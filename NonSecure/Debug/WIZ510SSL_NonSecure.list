
WIZ510SSL_NonSecure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021510  080101f8  080101f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004a5c  08031708  08031708  00031708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08036164  08036164  00038364  2**0
                  CONTENTS
  4 .ARM          00000008  08036164  08036164  00036164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803616c  0803616c  00038364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803616c  0803616c  0003616c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08036170  08036170  00036170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000364  20018000  08036174  00038000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007b78  20018368  080364d8  00038368  2**3
                  ALLOC
 10 ._user_heap_stack 0000bb00  2001fee0  080364d8  0003fee0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00038364  2**0
                  CONTENTS, READONLY
 12 .debug_info   0009d280  00000000  00000000  0003839a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000121b2  00000000  00000000  000d561a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0006cb72  00000000  00000000  000e77cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002d40  00000000  00000000  00154340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 0000b160  00000000  00000000  00157080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003c999  00000000  00000000  001621e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0006f321  00000000  00000000  0019eb79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00144311  00000000  00000000  0020de9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  003521ab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b2e0  00000000  00000000  00352200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080101f8 <__do_global_dtors_aux>:
 80101f8:	b510      	push	{r4, lr}
 80101fa:	4c05      	ldr	r4, [pc, #20]	; (8010210 <__do_global_dtors_aux+0x18>)
 80101fc:	7823      	ldrb	r3, [r4, #0]
 80101fe:	b933      	cbnz	r3, 801020e <__do_global_dtors_aux+0x16>
 8010200:	4b04      	ldr	r3, [pc, #16]	; (8010214 <__do_global_dtors_aux+0x1c>)
 8010202:	b113      	cbz	r3, 801020a <__do_global_dtors_aux+0x12>
 8010204:	4804      	ldr	r0, [pc, #16]	; (8010218 <__do_global_dtors_aux+0x20>)
 8010206:	e000      	b.n	801020a <__do_global_dtors_aux+0x12>
 8010208:	bf00      	nop
 801020a:	2301      	movs	r3, #1
 801020c:	7023      	strb	r3, [r4, #0]
 801020e:	bd10      	pop	{r4, pc}
 8010210:	20018368 	.word	0x20018368
 8010214:	00000000 	.word	0x00000000
 8010218:	0803169c 	.word	0x0803169c

0801021c <frame_dummy>:
 801021c:	b508      	push	{r3, lr}
 801021e:	4b03      	ldr	r3, [pc, #12]	; (801022c <frame_dummy+0x10>)
 8010220:	b11b      	cbz	r3, 801022a <frame_dummy+0xe>
 8010222:	4903      	ldr	r1, [pc, #12]	; (8010230 <frame_dummy+0x14>)
 8010224:	4803      	ldr	r0, [pc, #12]	; (8010234 <frame_dummy+0x18>)
 8010226:	e000      	b.n	801022a <frame_dummy+0xe>
 8010228:	bf00      	nop
 801022a:	bd08      	pop	{r3, pc}
 801022c:	00000000 	.word	0x00000000
 8010230:	2001836c 	.word	0x2001836c
 8010234:	0803169c 	.word	0x0803169c

08010238 <strcmp>:
 8010238:	f810 2b01 	ldrb.w	r2, [r0], #1
 801023c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010240:	2a01      	cmp	r2, #1
 8010242:	bf28      	it	cs
 8010244:	429a      	cmpcs	r2, r3
 8010246:	d0f7      	beq.n	8010238 <strcmp>
 8010248:	1ad0      	subs	r0, r2, r3
 801024a:	4770      	bx	lr

0801024c <strlen>:
 801024c:	4603      	mov	r3, r0
 801024e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010252:	2a00      	cmp	r2, #0
 8010254:	d1fb      	bne.n	801024e <strlen+0x2>
 8010256:	1a18      	subs	r0, r3, r0
 8010258:	3801      	subs	r0, #1
 801025a:	4770      	bx	lr

0801025c <__aeabi_uldivmod>:
 801025c:	b953      	cbnz	r3, 8010274 <__aeabi_uldivmod+0x18>
 801025e:	b94a      	cbnz	r2, 8010274 <__aeabi_uldivmod+0x18>
 8010260:	2900      	cmp	r1, #0
 8010262:	bf08      	it	eq
 8010264:	2800      	cmpeq	r0, #0
 8010266:	bf1c      	itt	ne
 8010268:	f04f 31ff 	movne.w	r1, #4294967295
 801026c:	f04f 30ff 	movne.w	r0, #4294967295
 8010270:	f000 b980 	b.w	8010574 <__aeabi_idiv0>
 8010274:	f1ad 0c08 	sub.w	ip, sp, #8
 8010278:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 801027c:	f000 f806 	bl	801028c <__udivmoddi4>
 8010280:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010288:	b004      	add	sp, #16
 801028a:	4770      	bx	lr

0801028c <__udivmoddi4>:
 801028c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010290:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010292:	4604      	mov	r4, r0
 8010294:	4688      	mov	r8, r1
 8010296:	2b00      	cmp	r3, #0
 8010298:	f040 8084 	bne.w	80103a4 <__udivmoddi4+0x118>
 801029c:	428a      	cmp	r2, r1
 801029e:	4617      	mov	r7, r2
 80102a0:	d943      	bls.n	801032a <__udivmoddi4+0x9e>
 80102a2:	fab2 f282 	clz	r2, r2
 80102a6:	b142      	cbz	r2, 80102ba <__udivmoddi4+0x2e>
 80102a8:	f1c2 0020 	rsb	r0, r2, #32
 80102ac:	4091      	lsls	r1, r2
 80102ae:	4097      	lsls	r7, r2
 80102b0:	fa24 f000 	lsr.w	r0, r4, r0
 80102b4:	4094      	lsls	r4, r2
 80102b6:	ea40 0801 	orr.w	r8, r0, r1
 80102ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80102be:	0c23      	lsrs	r3, r4, #16
 80102c0:	fa1f fe87 	uxth.w	lr, r7
 80102c4:	fbb8 f6fc 	udiv	r6, r8, ip
 80102c8:	fb0c 8116 	mls	r1, ip, r6, r8
 80102cc:	fb06 f00e 	mul.w	r0, r6, lr
 80102d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80102d4:	4298      	cmp	r0, r3
 80102d6:	d907      	bls.n	80102e8 <__udivmoddi4+0x5c>
 80102d8:	18fb      	adds	r3, r7, r3
 80102da:	f106 31ff 	add.w	r1, r6, #4294967295
 80102de:	d202      	bcs.n	80102e6 <__udivmoddi4+0x5a>
 80102e0:	4298      	cmp	r0, r3
 80102e2:	f200 8131 	bhi.w	8010548 <__udivmoddi4+0x2bc>
 80102e6:	460e      	mov	r6, r1
 80102e8:	1a19      	subs	r1, r3, r0
 80102ea:	b2a3      	uxth	r3, r4
 80102ec:	fbb1 f0fc 	udiv	r0, r1, ip
 80102f0:	fb0c 1110 	mls	r1, ip, r0, r1
 80102f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80102f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80102fc:	45a6      	cmp	lr, r4
 80102fe:	d907      	bls.n	8010310 <__udivmoddi4+0x84>
 8010300:	193c      	adds	r4, r7, r4
 8010302:	f100 33ff 	add.w	r3, r0, #4294967295
 8010306:	d202      	bcs.n	801030e <__udivmoddi4+0x82>
 8010308:	45a6      	cmp	lr, r4
 801030a:	f200 811a 	bhi.w	8010542 <__udivmoddi4+0x2b6>
 801030e:	4618      	mov	r0, r3
 8010310:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8010314:	eba4 040e 	sub.w	r4, r4, lr
 8010318:	2600      	movs	r6, #0
 801031a:	b11d      	cbz	r5, 8010324 <__udivmoddi4+0x98>
 801031c:	40d4      	lsrs	r4, r2
 801031e:	2300      	movs	r3, #0
 8010320:	e9c5 4300 	strd	r4, r3, [r5]
 8010324:	4631      	mov	r1, r6
 8010326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801032a:	b902      	cbnz	r2, 801032e <__udivmoddi4+0xa2>
 801032c:	deff      	udf	#255	; 0xff
 801032e:	fab2 f282 	clz	r2, r2
 8010332:	2a00      	cmp	r2, #0
 8010334:	d152      	bne.n	80103dc <__udivmoddi4+0x150>
 8010336:	1bcb      	subs	r3, r1, r7
 8010338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 801033c:	fa1f f887 	uxth.w	r8, r7
 8010340:	2601      	movs	r6, #1
 8010342:	0c21      	lsrs	r1, r4, #16
 8010344:	fbb3 fcfe 	udiv	ip, r3, lr
 8010348:	fb0e 301c 	mls	r0, lr, ip, r3
 801034c:	fb08 f90c 	mul.w	r9, r8, ip
 8010350:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010354:	4589      	cmp	r9, r1
 8010356:	d90b      	bls.n	8010370 <__udivmoddi4+0xe4>
 8010358:	1879      	adds	r1, r7, r1
 801035a:	f10c 33ff 	add.w	r3, ip, #4294967295
 801035e:	bf2c      	ite	cs
 8010360:	2001      	movcs	r0, #1
 8010362:	2000      	movcc	r0, #0
 8010364:	4589      	cmp	r9, r1
 8010366:	d902      	bls.n	801036e <__udivmoddi4+0xe2>
 8010368:	2800      	cmp	r0, #0
 801036a:	f000 80f0 	beq.w	801054e <__udivmoddi4+0x2c2>
 801036e:	469c      	mov	ip, r3
 8010370:	eba1 0109 	sub.w	r1, r1, r9
 8010374:	b2a3      	uxth	r3, r4
 8010376:	fbb1 f0fe 	udiv	r0, r1, lr
 801037a:	fb0e 1110 	mls	r1, lr, r0, r1
 801037e:	fb08 f800 	mul.w	r8, r8, r0
 8010382:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8010386:	45a0      	cmp	r8, r4
 8010388:	d907      	bls.n	801039a <__udivmoddi4+0x10e>
 801038a:	193c      	adds	r4, r7, r4
 801038c:	f100 33ff 	add.w	r3, r0, #4294967295
 8010390:	d202      	bcs.n	8010398 <__udivmoddi4+0x10c>
 8010392:	45a0      	cmp	r8, r4
 8010394:	f200 80d2 	bhi.w	801053c <__udivmoddi4+0x2b0>
 8010398:	4618      	mov	r0, r3
 801039a:	eba4 0408 	sub.w	r4, r4, r8
 801039e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80103a2:	e7ba      	b.n	801031a <__udivmoddi4+0x8e>
 80103a4:	428b      	cmp	r3, r1
 80103a6:	d909      	bls.n	80103bc <__udivmoddi4+0x130>
 80103a8:	2d00      	cmp	r5, #0
 80103aa:	f000 80be 	beq.w	801052a <__udivmoddi4+0x29e>
 80103ae:	2600      	movs	r6, #0
 80103b0:	e9c5 0100 	strd	r0, r1, [r5]
 80103b4:	4630      	mov	r0, r6
 80103b6:	4631      	mov	r1, r6
 80103b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103bc:	fab3 f683 	clz	r6, r3
 80103c0:	2e00      	cmp	r6, #0
 80103c2:	d14d      	bne.n	8010460 <__udivmoddi4+0x1d4>
 80103c4:	428b      	cmp	r3, r1
 80103c6:	f0c0 80b3 	bcc.w	8010530 <__udivmoddi4+0x2a4>
 80103ca:	4282      	cmp	r2, r0
 80103cc:	f240 80b0 	bls.w	8010530 <__udivmoddi4+0x2a4>
 80103d0:	4630      	mov	r0, r6
 80103d2:	2d00      	cmp	r5, #0
 80103d4:	d0a6      	beq.n	8010324 <__udivmoddi4+0x98>
 80103d6:	e9c5 4800 	strd	r4, r8, [r5]
 80103da:	e7a3      	b.n	8010324 <__udivmoddi4+0x98>
 80103dc:	4097      	lsls	r7, r2
 80103de:	f1c2 0320 	rsb	r3, r2, #32
 80103e2:	fa01 f002 	lsl.w	r0, r1, r2
 80103e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80103ea:	40d9      	lsrs	r1, r3
 80103ec:	fa24 f303 	lsr.w	r3, r4, r3
 80103f0:	fa1f f887 	uxth.w	r8, r7
 80103f4:	4094      	lsls	r4, r2
 80103f6:	4303      	orrs	r3, r0
 80103f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80103fc:	0c1e      	lsrs	r6, r3, #16
 80103fe:	fb0e 1110 	mls	r1, lr, r0, r1
 8010402:	fb00 fc08 	mul.w	ip, r0, r8
 8010406:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 801040a:	458c      	cmp	ip, r1
 801040c:	d90e      	bls.n	801042c <__udivmoddi4+0x1a0>
 801040e:	1879      	adds	r1, r7, r1
 8010410:	f100 36ff 	add.w	r6, r0, #4294967295
 8010414:	bf2c      	ite	cs
 8010416:	f04f 0901 	movcs.w	r9, #1
 801041a:	f04f 0900 	movcc.w	r9, #0
 801041e:	458c      	cmp	ip, r1
 8010420:	d903      	bls.n	801042a <__udivmoddi4+0x19e>
 8010422:	f1b9 0f00 	cmp.w	r9, #0
 8010426:	f000 8096 	beq.w	8010556 <__udivmoddi4+0x2ca>
 801042a:	4630      	mov	r0, r6
 801042c:	eba1 010c 	sub.w	r1, r1, ip
 8010430:	b29b      	uxth	r3, r3
 8010432:	fbb1 f6fe 	udiv	r6, r1, lr
 8010436:	fb0e 1116 	mls	r1, lr, r6, r1
 801043a:	fb06 fc08 	mul.w	ip, r6, r8
 801043e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8010442:	458c      	cmp	ip, r1
 8010444:	d907      	bls.n	8010456 <__udivmoddi4+0x1ca>
 8010446:	1879      	adds	r1, r7, r1
 8010448:	f106 33ff 	add.w	r3, r6, #4294967295
 801044c:	d202      	bcs.n	8010454 <__udivmoddi4+0x1c8>
 801044e:	458c      	cmp	ip, r1
 8010450:	f200 8088 	bhi.w	8010564 <__udivmoddi4+0x2d8>
 8010454:	461e      	mov	r6, r3
 8010456:	eba1 030c 	sub.w	r3, r1, ip
 801045a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 801045e:	e770      	b.n	8010342 <__udivmoddi4+0xb6>
 8010460:	f1c6 0720 	rsb	r7, r6, #32
 8010464:	fa03 f406 	lsl.w	r4, r3, r6
 8010468:	fa02 fc06 	lsl.w	ip, r2, r6
 801046c:	fa01 fe06 	lsl.w	lr, r1, r6
 8010470:	40fa      	lsrs	r2, r7
 8010472:	fa20 f807 	lsr.w	r8, r0, r7
 8010476:	40f9      	lsrs	r1, r7
 8010478:	fa00 f306 	lsl.w	r3, r0, r6
 801047c:	4322      	orrs	r2, r4
 801047e:	ea48 040e 	orr.w	r4, r8, lr
 8010482:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8010486:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 801048a:	fa1f f982 	uxth.w	r9, r2
 801048e:	fbb1 faf8 	udiv	sl, r1, r8
 8010492:	fb08 111a 	mls	r1, r8, sl, r1
 8010496:	fb0a f009 	mul.w	r0, sl, r9
 801049a:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 801049e:	4570      	cmp	r0, lr
 80104a0:	d90e      	bls.n	80104c0 <__udivmoddi4+0x234>
 80104a2:	eb12 0e0e 	adds.w	lr, r2, lr
 80104a6:	f10a 31ff 	add.w	r1, sl, #4294967295
 80104aa:	bf2c      	ite	cs
 80104ac:	f04f 0b01 	movcs.w	fp, #1
 80104b0:	f04f 0b00 	movcc.w	fp, #0
 80104b4:	4570      	cmp	r0, lr
 80104b6:	d902      	bls.n	80104be <__udivmoddi4+0x232>
 80104b8:	f1bb 0f00 	cmp.w	fp, #0
 80104bc:	d04e      	beq.n	801055c <__udivmoddi4+0x2d0>
 80104be:	468a      	mov	sl, r1
 80104c0:	ebae 0e00 	sub.w	lr, lr, r0
 80104c4:	b2a4      	uxth	r4, r4
 80104c6:	fbbe f0f8 	udiv	r0, lr, r8
 80104ca:	fb08 ee10 	mls	lr, r8, r0, lr
 80104ce:	fb00 f909 	mul.w	r9, r0, r9
 80104d2:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 80104d6:	45f1      	cmp	r9, lr
 80104d8:	d907      	bls.n	80104ea <__udivmoddi4+0x25e>
 80104da:	eb12 0e0e 	adds.w	lr, r2, lr
 80104de:	f100 31ff 	add.w	r1, r0, #4294967295
 80104e2:	d201      	bcs.n	80104e8 <__udivmoddi4+0x25c>
 80104e4:	45f1      	cmp	r9, lr
 80104e6:	d840      	bhi.n	801056a <__udivmoddi4+0x2de>
 80104e8:	4608      	mov	r0, r1
 80104ea:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 80104ee:	ebae 0e09 	sub.w	lr, lr, r9
 80104f2:	fba0 890c 	umull	r8, r9, r0, ip
 80104f6:	45ce      	cmp	lr, r9
 80104f8:	4641      	mov	r1, r8
 80104fa:	464c      	mov	r4, r9
 80104fc:	d302      	bcc.n	8010504 <__udivmoddi4+0x278>
 80104fe:	d106      	bne.n	801050e <__udivmoddi4+0x282>
 8010500:	4543      	cmp	r3, r8
 8010502:	d204      	bcs.n	801050e <__udivmoddi4+0x282>
 8010504:	3801      	subs	r0, #1
 8010506:	ebb8 010c 	subs.w	r1, r8, ip
 801050a:	eb69 0402 	sbc.w	r4, r9, r2
 801050e:	b37d      	cbz	r5, 8010570 <__udivmoddi4+0x2e4>
 8010510:	1a5a      	subs	r2, r3, r1
 8010512:	eb6e 0e04 	sbc.w	lr, lr, r4
 8010516:	40f2      	lsrs	r2, r6
 8010518:	fa0e f707 	lsl.w	r7, lr, r7
 801051c:	fa2e f306 	lsr.w	r3, lr, r6
 8010520:	2600      	movs	r6, #0
 8010522:	4317      	orrs	r7, r2
 8010524:	e9c5 7300 	strd	r7, r3, [r5]
 8010528:	e6fc      	b.n	8010324 <__udivmoddi4+0x98>
 801052a:	462e      	mov	r6, r5
 801052c:	4628      	mov	r0, r5
 801052e:	e6f9      	b.n	8010324 <__udivmoddi4+0x98>
 8010530:	1a84      	subs	r4, r0, r2
 8010532:	eb61 0103 	sbc.w	r1, r1, r3
 8010536:	2001      	movs	r0, #1
 8010538:	4688      	mov	r8, r1
 801053a:	e74a      	b.n	80103d2 <__udivmoddi4+0x146>
 801053c:	3802      	subs	r0, #2
 801053e:	443c      	add	r4, r7
 8010540:	e72b      	b.n	801039a <__udivmoddi4+0x10e>
 8010542:	3802      	subs	r0, #2
 8010544:	443c      	add	r4, r7
 8010546:	e6e3      	b.n	8010310 <__udivmoddi4+0x84>
 8010548:	3e02      	subs	r6, #2
 801054a:	443b      	add	r3, r7
 801054c:	e6cc      	b.n	80102e8 <__udivmoddi4+0x5c>
 801054e:	f1ac 0c02 	sub.w	ip, ip, #2
 8010552:	4439      	add	r1, r7
 8010554:	e70c      	b.n	8010370 <__udivmoddi4+0xe4>
 8010556:	3802      	subs	r0, #2
 8010558:	4439      	add	r1, r7
 801055a:	e767      	b.n	801042c <__udivmoddi4+0x1a0>
 801055c:	f1aa 0a02 	sub.w	sl, sl, #2
 8010560:	4496      	add	lr, r2
 8010562:	e7ad      	b.n	80104c0 <__udivmoddi4+0x234>
 8010564:	3e02      	subs	r6, #2
 8010566:	4439      	add	r1, r7
 8010568:	e775      	b.n	8010456 <__udivmoddi4+0x1ca>
 801056a:	3802      	subs	r0, #2
 801056c:	4496      	add	lr, r2
 801056e:	e7bc      	b.n	80104ea <__udivmoddi4+0x25e>
 8010570:	462e      	mov	r6, r5
 8010572:	e6d7      	b.n	8010324 <__udivmoddi4+0x98>

08010574 <__aeabi_idiv0>:
 8010574:	4770      	bx	lr
 8010576:	bf00      	nop

08010578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8010578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801057c:	b08c      	sub	sp, #48	; 0x30
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801057e:	2400      	movs	r4, #0
  DevConfig *dev_config = get_DevConfig_pointer();
 8010580:	f003 fd58 	bl	8014034 <get_DevConfig_pointer>
 8010584:	4605      	mov	r5, r0
  HAL_Init();
 8010586:	f000 fbb1 	bl	8010cec <HAL_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801058a:	e9cd 4406 	strd	r4, r4, [sp, #24]
 801058e:	e9cd 4408 	strd	r4, r4, [sp, #32]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8010592:	4bb6      	ldr	r3, [pc, #728]	; (801086c <main+0x2f4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010594:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8010596:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8010598:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801059a:	f041 0101 	orr.w	r1, r1, #1
 801059e:	64d9      	str	r1, [r3, #76]	; 0x4c
 80105a0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80105a2:	2110      	movs	r1, #16
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80105a4:	f000 0001 	and.w	r0, r0, #1
 80105a8:	9001      	str	r0, [sp, #4]
 80105aa:	9801      	ldr	r0, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80105ac:	6cde      	ldr	r6, [r3, #76]	; 0x4c
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80105ae:	48b0      	ldr	r0, [pc, #704]	; (8010870 <main+0x2f8>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80105b0:	f046 0602 	orr.w	r6, r6, #2
 80105b4:	64de      	str	r6, [r3, #76]	; 0x4c
 80105b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STATUS_LED0_Pin|STATUS_LED1_Pin|STATUS_OUT_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80105b8:	2600      	movs	r6, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80105ba:	f003 0302 	and.w	r3, r3, #2
 80105be:	9302      	str	r3, [sp, #8]
 80105c0:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80105c2:	f000 ffcf 	bl	8011564 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, W5100S_RST_Pin|DTR_OUT_Pin, GPIO_PIN_RESET);
 80105c6:	4622      	mov	r2, r4
 80105c8:	f248 0102 	movw	r1, #32770	; 0x8002
 80105cc:	48a9      	ldr	r0, [pc, #676]	; (8010874 <main+0x2fc>)
 80105ce:	f000 ffc9 	bl	8011564 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, STATUS_LED0_Pin|STATUS_LED1_Pin|STATUS_OUT_Pin, GPIO_PIN_SET);
 80105d2:	2201      	movs	r2, #1
 80105d4:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 80105d8:	48a6      	ldr	r0, [pc, #664]	; (8010874 <main+0x2fc>)
 80105da:	f000 ffc3 	bl	8011564 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80105de:	2700      	movs	r7, #0
 80105e0:	2210      	movs	r2, #16
 80105e2:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80105e4:	48a2      	ldr	r0, [pc, #648]	; (8010870 <main+0x2f8>)
 80105e6:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80105e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80105ec:	e9cd 6708 	strd	r6, r7, [sp, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80105f0:	f000 fe0c 	bl	801120c <HAL_GPIO_Init>

  /*Configure GPIO pins : W5100S_INT_Pin DSR_IN_Pin */
  GPIO_InitStruct.Pin = W5100S_INT_Pin|DSR_IN_Pin;
 80105f4:	f244 0201 	movw	r2, #16385	; 0x4001
 80105f8:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80105fa:	489e      	ldr	r0, [pc, #632]	; (8010874 <main+0x2fc>)
 80105fc:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = W5100S_INT_Pin|DSR_IN_Pin;
 80105fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010602:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010604:	f000 fe02 	bl	801120c <HAL_GPIO_Init>

  /*Configure GPIO pins : W5100S_RST_Pin STATUS_LED0_Pin STATUS_LED1_Pin STATUS_OUT_Pin
                           DTR_OUT_Pin */
  GPIO_InitStruct.Pin = W5100S_RST_Pin|STATUS_LED0_Pin|STATUS_LED1_Pin|STATUS_OUT_Pin
 8010608:	f64a 4202 	movw	r2, #44034	; 0xac02
 801060c:	2301      	movs	r3, #1
                          |DTR_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801060e:	4899      	ldr	r0, [pc, #612]	; (8010874 <main+0x2fc>)
 8010610:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = W5100S_RST_Pin|STATUS_LED0_Pin|STATUS_LED1_Pin|STATUS_OUT_Pin
 8010612:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010616:	e9cd 6708 	strd	r6, r7, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801061a:	f000 fdf7 	bl	801120c <HAL_GPIO_Init>

  /*Configure GPIO pin : FAC_RESET_Pin */
  GPIO_InitStruct.Pin = FAC_RESET_Pin;
 801061e:	2610      	movs	r6, #16
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010620:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = FAC_RESET_Pin;
 8010622:	4f95      	ldr	r7, [pc, #596]	; (8010878 <main+0x300>)
  HAL_GPIO_Init(FAC_RESET_GPIO_Port, &GPIO_InitStruct);
 8010624:	4893      	ldr	r0, [pc, #588]	; (8010874 <main+0x2fc>)
 8010626:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010628:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pin = FAC_RESET_Pin;
 801062a:	e9cd 6706 	strd	r6, r7, [sp, #24]
  HAL_GPIO_Init(FAC_RESET_GPIO_Port, &GPIO_InitStruct);
 801062e:	f000 fded 	bl	801120c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8010632:	4622      	mov	r2, r4
 8010634:	4621      	mov	r1, r4
 8010636:	200f      	movs	r0, #15
 8010638:	f000 fba4 	bl	8010d84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 801063c:	200f      	movs	r0, #15
 801063e:	f000 fbd9 	bl	8010df4 <HAL_NVIC_EnableIRQ>
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8010642:	f44f 67e0 	mov.w	r7, #1792	; 0x700
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8010646:	f44f 7c82 	mov.w	ip, #260	; 0x104
  hspi1.Init.NSS = SPI_NSS_SOFT;
 801064a:	f44f 7600 	mov.w	r6, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 801064e:	2120      	movs	r1, #32
  hspi1.Init.CRCPolynomial = 7;
 8010650:	2207      	movs	r2, #7
  hspi1.Instance = SPI1;
 8010652:	4b8a      	ldr	r3, [pc, #552]	; (801087c <main+0x304>)
 8010654:	488a      	ldr	r0, [pc, #552]	; (8010880 <main+0x308>)
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8010656:	e9c3 4404 	strd	r4, r4, [r3, #16]
  hspi1.Instance = SPI1;
 801065a:	6018      	str	r0, [r3, #0]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 801065c:	4618      	mov	r0, r3
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 801065e:	e9c3 4408 	strd	r4, r4, [r3, #32]
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8010662:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8010666:	e9c3 6106 	strd	r6, r1, [r3, #24]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 801066a:	609c      	str	r4, [r3, #8]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801066c:	629c      	str	r4, [r3, #40]	; 0x28
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801066e:	f8c3 c004 	str.w	ip, [r3, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8010672:	60df      	str	r7, [r3, #12]
  hspi1.Init.CRCPolynomial = 7;
 8010674:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8010676:	f001 fe9b 	bl	80123b0 <HAL_SPI_Init>
 801067a:	b108      	cbz	r0, 8010680 <main+0x108>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 801067c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 801067e:	e7fe      	b.n	801067e <main+0x106>
  huart1.Init.BaudRate = 115200;
 8010680:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8010684:	220c      	movs	r2, #12
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8010686:	f44f 7340 	mov.w	r3, #768	; 0x300
  huart1.Instance = USART1;
 801068a:	4c7e      	ldr	r4, [pc, #504]	; (8010884 <main+0x30c>)
 801068c:	497e      	ldr	r1, [pc, #504]	; (8010888 <main+0x310>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801068e:	e9c4 6001 	strd	r6, r0, [r4, #4]
  huart1.Init.Parity = UART_PARITY_NONE;
 8010692:	e9c4 0003 	strd	r0, r0, [r4, #12]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8010696:	e9c4 0007 	strd	r0, r0, [r4, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801069a:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801069e:	4620      	mov	r0, r4
  huart1.Instance = USART1;
 80106a0:	6021      	str	r1, [r4, #0]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80106a2:	e9c4 2305 	strd	r2, r3, [r4, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80106a6:	f003 f8bb 	bl	8013820 <HAL_UART_Init>
 80106aa:	4601      	mov	r1, r0
 80106ac:	b108      	cbz	r0, 80106b2 <main+0x13a>
 80106ae:	b672      	cpsid	i
  while (1)
 80106b0:	e7fe      	b.n	80106b0 <main+0x138>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80106b2:	4620      	mov	r0, r4
 80106b4:	f003 fbb2 	bl	8013e1c <HAL_UARTEx_SetTxFifoThreshold>
 80106b8:	4601      	mov	r1, r0
 80106ba:	b108      	cbz	r0, 80106c0 <main+0x148>
 80106bc:	b672      	cpsid	i
  while (1)
 80106be:	e7fe      	b.n	80106be <main+0x146>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80106c0:	4620      	mov	r0, r4
 80106c2:	f003 fbe9 	bl	8013e98 <HAL_UARTEx_SetRxFifoThreshold>
 80106c6:	b108      	cbz	r0, 80106cc <main+0x154>
 80106c8:	b672      	cpsid	i
  while (1)
 80106ca:	e7fe      	b.n	80106ca <main+0x152>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80106cc:	4620      	mov	r0, r4
 80106ce:	f003 fb87 	bl	8013de0 <HAL_UARTEx_DisableFifoMode>
 80106d2:	4603      	mov	r3, r0
 80106d4:	b108      	cbz	r0, 80106da <main+0x162>
 80106d6:	b672      	cpsid	i
  while (1)
 80106d8:	e7fe      	b.n	80106d8 <main+0x160>
  htim2.Init.Prescaler = 100;
 80106da:	2064      	movs	r0, #100	; 0x64
  htim2.Instance = TIM2;
 80106dc:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
  htim2.Init.Period = 999;
 80106e0:	f240 31e7 	movw	r1, #999	; 0x3e7
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80106e4:	2280      	movs	r2, #128	; 0x80
  htim2.Instance = TIM2;
 80106e6:	4e69      	ldr	r6, [pc, #420]	; (801088c <main+0x314>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80106e8:	e9cd 3306 	strd	r3, r3, [sp, #24]
  htim2.Init.Prescaler = 100;
 80106ec:	6070      	str	r0, [r6, #4]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80106ee:	4630      	mov	r0, r6
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80106f0:	e9cd 3308 	strd	r3, r3, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80106f4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80106f8:	9303      	str	r3, [sp, #12]
  htim2.Instance = TIM2;
 80106fa:	6037      	str	r7, [r6, #0]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80106fc:	60b3      	str	r3, [r6, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80106fe:	6133      	str	r3, [r6, #16]
  htim2.Init.Period = 999;
 8010700:	60f1      	str	r1, [r6, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8010702:	61b2      	str	r2, [r6, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8010704:	f002 f868 	bl	80127d8 <HAL_TIM_Base_Init>
 8010708:	b108      	cbz	r0, 801070e <main+0x196>
 801070a:	b672      	cpsid	i
  while (1)
 801070c:	e7fe      	b.n	801070c <main+0x194>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801070e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8010712:	4630      	mov	r0, r6
 8010714:	a906      	add	r1, sp, #24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8010716:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8010718:	f002 f918 	bl	801294c <HAL_TIM_ConfigClockSource>
 801071c:	4603      	mov	r3, r0
 801071e:	b108      	cbz	r0, 8010724 <main+0x1ac>
 8010720:	b672      	cpsid	i
  while (1)
 8010722:	e7fe      	b.n	8010722 <main+0x1aa>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8010724:	4630      	mov	r0, r6
 8010726:	a903      	add	r1, sp, #12
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8010728:	9303      	str	r3, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801072a:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801072c:	f002 fa7c 	bl	8012c28 <HAL_TIMEx_MasterConfigSynchronization>
 8010730:	b108      	cbz	r0, 8010736 <main+0x1be>
 8010732:	b672      	cpsid	i
  while (1)
 8010734:	e7fe      	b.n	8010734 <main+0x1bc>
  hrng.Instance = RNG;
 8010736:	4b56      	ldr	r3, [pc, #344]	; (8010890 <main+0x318>)
 8010738:	4a56      	ldr	r2, [pc, #344]	; (8010894 <main+0x31c>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 801073a:	6058      	str	r0, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 801073c:	4618      	mov	r0, r3
  hrng.Instance = RNG;
 801073e:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8010740:	f001 fc34 	bl	8011fac <HAL_RNG_Init>
 8010744:	4607      	mov	r7, r0
 8010746:	b108      	cbz	r0, 801074c <main+0x1d4>
 8010748:	b672      	cpsid	i
  while (1)
 801074a:	e7fe      	b.n	801074a <main+0x1d2>
    HAL_TIM_Base_Start_IT(&htim2);
 801074c:	4630      	mov	r0, r6
 801074e:	f002 f8bf 	bl	80128d0 <HAL_TIM_Base_Start_IT>
    WIZnet_Chip_Init();
 8010752:	f007 fbd9 	bl	8017f08 <WIZnet_Chip_Init>
    s2e_ssl_Board_Init();
 8010756:	f003 fbdd 	bl	8013f14 <s2e_ssl_Board_Init>
    load_DevConfig_from_storage();
 801075a:	f003 fd77 	bl	801424c <load_DevConfig_from_storage>
    init_serial_settings(&huart1, DATA0_UART_PORTNUM);
 801075e:	4639      	mov	r1, r7
 8010760:	4620      	mov	r0, r4
 8010762:	f007 f97b 	bl	8017a5c <init_serial_settings>
    check_mac_address();
 8010766:	f003 fef5 	bl	8014554 <check_mac_address>
    DATA0_UART_Configuration();
 801076a:	f007 f95f 	bl	8017a2c <DATA0_UART_Configuration>
    delay_ms(3000);
 801076e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8010772:	f007 f8d3 	bl	801791c <delay_ms>
    while (check_phylink_status() == PHY_LINK_OFF);
 8010776:	f006 ff2b 	bl	80175d0 <check_phylink_status>
 801077a:	2800      	cmp	r0, #0
 801077c:	d0fb      	beq.n	8010776 <main+0x1fe>
    if(dev_config->serial_common.serial_debug_en)
 801077e:	f895 30e2 	ldrb.w	r3, [r5, #226]	; 0xe2
 8010782:	2b00      	cmp	r3, #0
 8010784:	f040 809c 	bne.w	80108c0 <main+0x348>
      Net_Conf();
 8010788:	f003 feba 	bl	8014500 <Net_Conf>
      display_Net_Info();
 801078c:	f003 fdfe 	bl	801438c <display_Net_Info>
      if(dev_config->network_option.dhcp_use)
 8010790:	f895 30c7 	ldrb.w	r3, [r5, #199]	; 0xc7
 8010794:	2b00      	cmp	r3, #0
 8010796:	f040 808b 	bne.w	80108b0 <main+0x338>
 801079a:	4f3f      	ldr	r7, [pc, #252]	; (8010898 <main+0x320>)
      if(dev_config->serial_common.serial_debug_en)
 801079c:	f895 30e2 	ldrb.w	r3, [r5, #226]	; 0xe2
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d15e      	bne.n	8010862 <main+0x2ea>
        if(dev_config->network_connection[i].working_mode != TCP_SERVER_MODE)
 80107a4:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
 80107a8:	2b01      	cmp	r3, #1
 80107aa:	d004      	beq.n	80107b6 <main+0x23e>
            if(dev_config->network_connection[i].dns_use)
 80107ac:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	f040 808a 	bne.w	80108ca <main+0x352>
        serial_mode = get_serial_communation_protocol(i);
 80107b6:	2000      	movs	r0, #0
 80107b8:	f007 fcec 	bl	8018194 <get_serial_communation_protocol>
        if(serial_mode == SEG_SERIAL_PROTOCOL_NONE)
 80107bc:	2800      	cmp	r0, #0
 80107be:	d047      	beq.n	8010850 <main+0x2d8>
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 80107c0:	2105      	movs	r1, #5
  hiwdg.Init.Window = 4095;
 80107c2:	f640 73ff 	movw	r3, #4095	; 0xfff
  hiwdg.Instance = IWDG;
 80107c6:	4835      	ldr	r0, [pc, #212]	; (801089c <main+0x324>)
 80107c8:	4a35      	ldr	r2, [pc, #212]	; (80108a0 <main+0x328>)
  hiwdg.Init.Reload = 4095;
 80107ca:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hiwdg.Instance = IWDG;
 80107ce:	e9c0 2100 	strd	r2, r1, [r0]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80107d2:	f000 fee5 	bl	80115a0 <HAL_IWDG_Init>
 80107d6:	4606      	mov	r6, r0
 80107d8:	b108      	cbz	r0, 80107de <main+0x266>
 80107da:	b672      	cpsid	i
  while (1)
 80107dc:	e7fe      	b.n	80107dc <main+0x264>
    updatetime = millis();
 80107de:	f007 f8a7 	bl	8017930 <millis>
 80107e2:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80108ac <main+0x334>
 80107e6:	4604      	mov	r4, r0
 80107e8:	e022      	b.n	8010830 <main+0x2b8>
      t1 = millis(); // Start time of main routine
 80107ea:	f007 f8a1 	bl	8017930 <millis>
      do_segcp();
 80107ee:	f005 fd77 	bl	80162e0 <do_segcp>
          do_seg(DATA0_UART_PORTNUM, SEG_DATA0_SOCK);
 80107f2:	2100      	movs	r1, #0
      if((dev_config->serial_option[0].uart_interface == UART_IF_TTL) ||
 80107f4:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
 80107f8:	2b01      	cmp	r3, #1
          do_seg(DATA0_UART_PORTNUM, SEG_DATA0_SOCK);
 80107fa:	bf94      	ite	ls
 80107fc:	4608      	movls	r0, r1
          do_seg(DATA1_UART_PORTNUM, SEG_DATA0_SOCK);
 80107fe:	2001      	movhi	r0, #1
 8010800:	f009 ffc4 	bl	801a78c <do_seg>
      if(flag_process_dhcp_success == ON) DHCP_run(); // DHCP client handler for IP renewal
 8010804:	783b      	ldrb	r3, [r7, #0]
 8010806:	2b01      	cmp	r3, #1
 8010808:	d01f      	beq.n	801084a <main+0x2d2>
      t2 = millis(); // End time of main routine
 801080a:	f007 f891 	bl	8017930 <millis>
      if((millis() - updatetime) >= 1000)
 801080e:	f007 f88f 	bl	8017930 <millis>
 8010812:	1b00      	subs	r0, r0, r4
 8010814:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8010818:	d308      	bcc.n	801082c <main+0x2b4>
          LED_Toggle(LED_0);
 801081a:	2000      	movs	r0, #0
 801081c:	f003 fbae 	bl	8013f7c <LED_Toggle>
          LED_Toggle(LED_1);
 8010820:	2001      	movs	r0, #1
 8010822:	f003 fbab 	bl	8013f7c <LED_Toggle>
          updatetime = millis();
 8010826:	f007 f883 	bl	8017930 <millis>
 801082a:	4604      	mov	r4, r0
      wdt_reset();
 801082c:	f006 fbdc 	bl	8016fe8 <wdt_reset>
      if (flag_check_phylink)
 8010830:	f898 3000 	ldrb.w	r3, [r8]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d0d8      	beq.n	80107ea <main+0x272>
        flag_check_phylink = 0;
 8010838:	f888 6000 	strb.w	r6, [r8]
        if (check_phylink_status() == PHY_LINK_OFF)
 801083c:	f006 fec8 	bl	80175d0 <check_phylink_status>
 8010840:	2800      	cmp	r0, #0
 8010842:	d1d2      	bne.n	80107ea <main+0x272>
            device_reboot();
 8010844:	f005 ff80 	bl	8016748 <device_reboot>
 8010848:	e7cf      	b.n	80107ea <main+0x272>
      if(flag_process_dhcp_success == ON) DHCP_run(); // DHCP client handler for IP renewal
 801084a:	f00c fa29 	bl	801cca0 <DHCP_run>
 801084e:	e7dc      	b.n	801080a <main+0x292>
            if(dev_config->serial_common.serial_debug_en)
 8010850:	f895 30e2 	ldrb.w	r3, [r5, #226]	; 0xe2
 8010854:	2b00      	cmp	r3, #0
 8010856:	d0b3      	beq.n	80107c0 <main+0x248>
                PRT_INFO(" > Serial to Ethernet Gateway Mode\r\n");
 8010858:	4912      	ldr	r1, [pc, #72]	; (80108a4 <main+0x32c>)
 801085a:	4813      	ldr	r0, [pc, #76]	; (80108a8 <main+0x330>)
 801085c:	f007 faf2 	bl	8017e44 <WIZ_SECURE_printf>
    for(i = 0; i < DEVICE_UART_CNT; i++)
 8010860:	e7ae      	b.n	80107c0 <main+0x248>
          display_Net_Info();
 8010862:	f003 fd93 	bl	801438c <display_Net_Info>
          display_Dev_Info_dhcp();
 8010866:	f006 fb09 	bl	8016e7c <display_Dev_Info_dhcp>
 801086a:	e79b      	b.n	80107a4 <main+0x22c>
 801086c:	40021000 	.word	0x40021000
 8010870:	42020000 	.word	0x42020000
 8010874:	42020400 	.word	0x42020400
 8010878:	10210000 	.word	0x10210000
 801087c:	2001bd04 	.word	0x2001bd04
 8010880:	40013000 	.word	0x40013000
 8010884:	2001bc60 	.word	0x2001bc60
 8010888:	40013800 	.word	0x40013800
 801088c:	2001bd68 	.word	0x2001bd68
 8010890:	2001bcf0 	.word	0x2001bcf0
 8010894:	420c0800 	.word	0x420c0800
 8010898:	20019905 	.word	0x20019905
 801089c:	2001bc50 	.word	0x2001bc50
 80108a0:	40003000 	.word	0x40003000
 80108a4:	080317e0 	.word	0x080317e0
 80108a8:	080317ac 	.word	0x080317ac
 80108ac:	2001838b 	.word	0x2001838b
          if(process_dhcp() == DHCP_IP_LEASED) // DHCP success
 80108b0:	f006 fb44 	bl	8016f3c <process_dhcp>
 80108b4:	2804      	cmp	r0, #4
 80108b6:	d11c      	bne.n	80108f2 <main+0x37a>
              flag_process_dhcp_success = ON;
 80108b8:	2301      	movs	r3, #1
 80108ba:	4f0f      	ldr	r7, [pc, #60]	; (80108f8 <main+0x380>)
 80108bc:	703b      	strb	r3, [r7, #0]
 80108be:	e76d      	b.n	801079c <main+0x224>
        display_Dev_Info_header();
 80108c0:	f006 f884 	bl	80169cc <display_Dev_Info_header>
        display_Dev_Info_main();
 80108c4:	f006 f8c8 	bl	8016a58 <display_Dev_Info_main>
 80108c8:	e75e      	b.n	8010788 <main+0x210>
                    if(process_dns(i)) // DNS success
 80108ca:	2000      	movs	r0, #0
 80108cc:	f006 fc60 	bl	8017190 <process_dns>
 80108d0:	b130      	cbz	r0, 80108e0 <main+0x368>
                        flag_process_dns_success[i] = ON;
 80108d2:	2201      	movs	r2, #1
 80108d4:	4b09      	ldr	r3, [pc, #36]	; (80108fc <main+0x384>)
                        PRT_INFO("flag_process_dns_success[0] == ON\r\n");
 80108d6:	490a      	ldr	r1, [pc, #40]	; (8010900 <main+0x388>)
 80108d8:	480a      	ldr	r0, [pc, #40]	; (8010904 <main+0x38c>)
                        flag_process_dns_success[i] = ON;
 80108da:	701a      	strb	r2, [r3, #0]
                        PRT_INFO("flag_process_dns_success[0] == ON\r\n");
 80108dc:	f007 fab2 	bl	8017e44 <WIZ_SECURE_printf>
                if(dev_config->serial_common.serial_debug_en)
 80108e0:	f895 30e2 	ldrb.w	r3, [r5, #226]	; 0xe2
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	f43f af66 	beq.w	80107b6 <main+0x23e>
                    display_Dev_Info_dns(i);
 80108ea:	2000      	movs	r0, #0
 80108ec:	f006 fae8 	bl	8016ec0 <display_Dev_Info_dns>
    for(i = 0; i < DEVICE_UART_CNT; i++)
 80108f0:	e761      	b.n	80107b6 <main+0x23e>
              Net_Conf(); // Set default static IP settings
 80108f2:	f003 fe05 	bl	8014500 <Net_Conf>
 80108f6:	e750      	b.n	801079a <main+0x222>
 80108f8:	20019905 	.word	0x20019905
 80108fc:	20019908 	.word	0x20019908
 8010900:	080317e0 	.word	0x080317e0
 8010904:	0803177c 	.word	0x0803177c

08010908 <Error_Handler>:
 8010908:	b672      	cpsid	i
  while (1)
 801090a:	e7fe      	b.n	801090a <Error_Handler+0x2>

0801090c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801090c:	4b0a      	ldr	r3, [pc, #40]	; (8010938 <HAL_MspInit+0x2c>)
{
 801090e:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010910:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8010912:	f042 0201 	orr.w	r2, r2, #1
 8010916:	661a      	str	r2, [r3, #96]	; 0x60
 8010918:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801091a:	f002 0201 	and.w	r2, r2, #1
 801091e:	9200      	str	r2, [sp, #0]
 8010920:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8010922:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010924:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8010928:	659a      	str	r2, [r3, #88]	; 0x58
 801092a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801092c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010930:	9301      	str	r3, [sp, #4]
 8010932:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010934:	b002      	add	sp, #8
 8010936:	4770      	bx	lr
 8010938:	40021000 	.word	0x40021000

0801093c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 801093c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010940:	4604      	mov	r4, r0
 8010942:	b0a9      	sub	sp, #164	; 0xa4
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8010944:	2294      	movs	r2, #148	; 0x94
 8010946:	2100      	movs	r1, #0
 8010948:	a802      	add	r0, sp, #8
 801094a:	f01f fa8c 	bl	802fe66 <memset>
  if(hrng->Instance==RNG)
 801094e:	6822      	ldr	r2, [r4, #0]
 8010950:	4b17      	ldr	r3, [pc, #92]	; (80109b0 <HAL_RNG_MspInit+0x74>)
 8010952:	429a      	cmp	r2, r3
 8010954:	d002      	beq.n	801095c <HAL_RNG_MspInit+0x20>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8010956:	b029      	add	sp, #164	; 0xa4
 8010958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 801095c:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8010960:	f44f 2880 	mov.w	r8, #262144	; 0x40000
 8010964:	f04f 0901 	mov.w	r9, #1
 8010968:	2601      	movs	r6, #1
 801096a:	2710      	movs	r7, #16
 801096c:	2407      	movs	r4, #7
 801096e:	2502      	movs	r5, #2
 8010970:	2202      	movs	r2, #2
 8010972:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8010976:	a802      	add	r0, sp, #8
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8010978:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801097c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010980:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010984:	e9cd 2308 	strd	r2, r3, [sp, #32]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8010988:	9121      	str	r1, [sp, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801098a:	f001 f87f 	bl	8011a8c <HAL_RCCEx_PeriphCLKConfig>
 801098e:	b960      	cbnz	r0, 80109aa <HAL_RNG_MspInit+0x6e>
    __HAL_RCC_RNG_CLK_ENABLE();
 8010990:	4b08      	ldr	r3, [pc, #32]	; (80109b4 <HAL_RNG_MspInit+0x78>)
 8010992:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010994:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8010998:	64da      	str	r2, [r3, #76]	; 0x4c
 801099a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801099c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80109a0:	9301      	str	r3, [sp, #4]
 80109a2:	9b01      	ldr	r3, [sp, #4]
}
 80109a4:	b029      	add	sp, #164	; 0xa4
 80109a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      Error_Handler();
 80109aa:	f7ff ffad 	bl	8010908 <Error_Handler>
 80109ae:	e7ef      	b.n	8010990 <HAL_RNG_MspInit+0x54>
 80109b0:	420c0800 	.word	0x420c0800
 80109b4:	40021000 	.word	0x40021000

080109b8 <HAL_SPI_MspInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80109b8:	2300      	movs	r3, #0
{
 80109ba:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hspi->Instance==SPI1)
 80109bc:	6801      	ldr	r1, [r0, #0]
 80109be:	4a19      	ldr	r2, [pc, #100]	; (8010a24 <HAL_SPI_MspInit+0x6c>)
{
 80109c0:	b089      	sub	sp, #36	; 0x24
  if(hspi->Instance==SPI1)
 80109c2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80109c4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80109c8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80109cc:	9306      	str	r3, [sp, #24]
  if(hspi->Instance==SPI1)
 80109ce:	d001      	beq.n	80109d4 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80109d0:	b009      	add	sp, #36	; 0x24
 80109d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80109d4:	f04f 0c05 	mov.w	ip, #5
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80109d8:	26e0      	movs	r6, #224	; 0xe0
 80109da:	2702      	movs	r7, #2
 80109dc:	2400      	movs	r4, #0
 80109de:	2500      	movs	r5, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 80109e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80109e4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80109e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80109ea:	480f      	ldr	r0, [pc, #60]	; (8010a28 <HAL_SPI_MspInit+0x70>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80109ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80109f0:	661a      	str	r2, [r3, #96]	; 0x60
 80109f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80109f4:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 80109f6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80109fa:	9200      	str	r2, [sp, #0]
 80109fc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80109fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010a00:	f042 0201 	orr.w	r2, r2, #1
 8010a04:	64da      	str	r2, [r3, #76]	; 0x4c
 8010a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8010a08:	e9cd 6702 	strd	r6, r7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010a0c:	f003 0301 	and.w	r3, r3, #1
 8010a10:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8010a12:	e9cd 4504 	strd	r4, r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010a16:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8010a18:	f8cd c018 	str.w	ip, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010a1c:	f000 fbf6 	bl	801120c <HAL_GPIO_Init>
}
 8010a20:	b009      	add	sp, #36	; 0x24
 8010a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a24:	40013000 	.word	0x40013000
 8010a28:	42020000 	.word	0x42020000

08010a2c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8010a2c:	6803      	ldr	r3, [r0, #0]
 8010a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010a32:	d000      	beq.n	8010a36 <HAL_TIM_Base_MspInit+0xa>
 8010a34:	4770      	bx	lr

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8010a36:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8010a38:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
{
 8010a3c:	b510      	push	{r4, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8010a3e:	6d9c      	ldr	r4, [r3, #88]	; 0x58
{
 8010a40:	b082      	sub	sp, #8
    __HAL_RCC_TIM2_CLK_ENABLE();
 8010a42:	f044 0401 	orr.w	r4, r4, #1
 8010a46:	659c      	str	r4, [r3, #88]	; 0x58
 8010a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8010a4a:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8010a4c:	f003 0301 	and.w	r3, r3, #1
 8010a50:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8010a52:	202d      	movs	r0, #45	; 0x2d
    __HAL_RCC_TIM2_CLK_ENABLE();
 8010a54:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8010a56:	f000 f995 	bl	8010d84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8010a5a:	202d      	movs	r0, #45	; 0x2d
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8010a5c:	b002      	add	sp, #8
 8010a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8010a62:	f000 b9c7 	b.w	8010df4 <HAL_NVIC_EnableIRQ>
 8010a66:	bf00      	nop

08010a68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8010a68:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010a6a:	2400      	movs	r4, #0
{
 8010a6c:	4605      	mov	r5, r0
 8010a6e:	b0ad      	sub	sp, #180	; 0xb4
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8010a70:	2294      	movs	r2, #148	; 0x94
 8010a72:	4621      	mov	r1, r4
 8010a74:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010a76:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8010a7a:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8010a7e:	9406      	str	r4, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8010a80:	f01f f9f1 	bl	802fe66 <memset>
  if(huart->Instance==USART1)
 8010a84:	682a      	ldr	r2, [r5, #0]
 8010a86:	4b1e      	ldr	r3, [pc, #120]	; (8010b00 <HAL_UART_MspInit+0x98>)
 8010a88:	429a      	cmp	r2, r3
 8010a8a:	d001      	beq.n	8010a90 <HAL_UART_MspInit+0x28>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8010a8c:	b02d      	add	sp, #180	; 0xb4
 8010a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8010a90:	2301      	movs	r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8010a92:	a807      	add	r0, sp, #28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8010a94:	9414      	str	r4, [sp, #80]	; 0x50
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8010a96:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8010a98:	f000 fff8 	bl	8011a8c <HAL_RCCEx_PeriphCLKConfig>
 8010a9c:	bb68      	cbnz	r0, 8010afa <HAL_UART_MspInit+0x92>
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8010a9e:	f04f 0c07 	mov.w	ip, #7
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8010aa2:	f44f 56f0 	mov.w	r6, #7680	; 0x1e00
 8010aa6:	2702      	movs	r7, #2
 8010aa8:	2400      	movs	r4, #0
 8010aaa:	2500      	movs	r5, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8010aac:	4b15      	ldr	r3, [pc, #84]	; (8010b04 <HAL_UART_MspInit+0x9c>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010aae:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8010ab0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010ab2:	4815      	ldr	r0, [pc, #84]	; (8010b08 <HAL_UART_MspInit+0xa0>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8010ab4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010ab8:	661a      	str	r2, [r3, #96]	; 0x60
 8010aba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8010abc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8010ac0:	9200      	str	r2, [sp, #0]
 8010ac2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010ac4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010ac6:	f042 0201 	orr.w	r2, r2, #1
 8010aca:	64da      	str	r2, [r3, #76]	; 0x4c
 8010acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8010ace:	f8cd c018 	str.w	ip, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010ad2:	f003 0301 	and.w	r3, r3, #1
 8010ad6:	9301      	str	r3, [sp, #4]
 8010ad8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8010ada:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8010ade:	e9cd 4504 	strd	r4, r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010ae2:	f000 fb93 	bl	801120c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	203d      	movs	r0, #61	; 0x3d
 8010aea:	4611      	mov	r1, r2
 8010aec:	f000 f94a 	bl	8010d84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8010af0:	203d      	movs	r0, #61	; 0x3d
 8010af2:	f000 f97f 	bl	8010df4 <HAL_NVIC_EnableIRQ>
}
 8010af6:	b02d      	add	sp, #180	; 0xb4
 8010af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8010afa:	f7ff ff05 	bl	8010908 <Error_Handler>
 8010afe:	e7ce      	b.n	8010a9e <HAL_UART_MspInit+0x36>
 8010b00:	40013800 	.word	0x40013800
 8010b04:	40021000 	.word	0x40021000
 8010b08:	42020000 	.word	0x42020000

08010b0c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8010b0c:	b508      	push	{r3, lr}
  if(huart->Instance==USART1)
 8010b0e:	6802      	ldr	r2, [r0, #0]
 8010b10:	4b09      	ldr	r3, [pc, #36]	; (8010b38 <HAL_UART_MspDeInit+0x2c>)
 8010b12:	429a      	cmp	r2, r3
 8010b14:	d000      	beq.n	8010b18 <HAL_UART_MspDeInit+0xc>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8010b16:	bd08      	pop	{r3, pc}
    __HAL_RCC_USART1_CLK_DISABLE();
 8010b18:	4a08      	ldr	r2, [pc, #32]	; (8010b3c <HAL_UART_MspDeInit+0x30>)
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 8010b1a:	4809      	ldr	r0, [pc, #36]	; (8010b40 <HAL_UART_MspDeInit+0x34>)
    __HAL_RCC_USART1_CLK_DISABLE();
 8010b1c:	6e13      	ldr	r3, [r2, #96]	; 0x60
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 8010b1e:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
    __HAL_RCC_USART1_CLK_DISABLE();
 8010b22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010b26:	6613      	str	r3, [r2, #96]	; 0x60
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 8010b28:	f000 fc68 	bl	80113fc <HAL_GPIO_DeInit>
}
 8010b2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8010b30:	203d      	movs	r0, #61	; 0x3d
 8010b32:	f000 b96d 	b.w	8010e10 <HAL_NVIC_DisableIRQ>
 8010b36:	bf00      	nop
 8010b38:	40013800 	.word	0x40013800
 8010b3c:	40021000 	.word	0x40021000
 8010b40:	42020000 	.word	0x42020000

08010b44 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010b44:	e7fe      	b.n	8010b44 <MemManage_Handler>
 8010b46:	bf00      	nop

08010b48 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010b48:	e7fe      	b.n	8010b48 <UsageFault_Handler>
 8010b4a:	bf00      	nop

08010b4c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8010b4c:	4770      	bx	lr
 8010b4e:	bf00      	nop

08010b50 <PendSV_Handler>:
 8010b50:	4770      	bx	lr
 8010b52:	bf00      	nop

08010b54 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8010b54:	f000 b8dc 	b.w	8010d10 <HAL_IncTick>

08010b58 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8010b58:	2010      	movs	r0, #16
 8010b5a:	f000 bd0b 	b.w	8011574 <HAL_GPIO_EXTI_IRQHandler>
 8010b5e:	bf00      	nop

08010b60 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8010b60:	4801      	ldr	r0, [pc, #4]	; (8010b68 <TIM2_IRQHandler+0x8>)
 8010b62:	f001 bfa9 	b.w	8012ab8 <HAL_TIM_IRQHandler>
 8010b66:	bf00      	nop
 8010b68:	2001bd68 	.word	0x2001bd68

08010b6c <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8010b6c:	4801      	ldr	r0, [pc, #4]	; (8010b74 <USART1_IRQHandler+0x8>)
 8010b6e:	f002 ba47 	b.w	8013000 <HAL_UART_IRQHandler>
 8010b72:	bf00      	nop
 8010b74:	2001bc60 	.word	0x2001bc60

08010b78 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8010b78:	2001      	movs	r0, #1
 8010b7a:	4770      	bx	lr

08010b7c <_kill>:

int _kill(int pid, int sig)
{
 8010b7c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8010b7e:	f01f f903 	bl	802fd88 <__errno>
 8010b82:	2216      	movs	r2, #22
 8010b84:	4603      	mov	r3, r0
	return -1;
}
 8010b86:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8010b8a:	601a      	str	r2, [r3, #0]
}
 8010b8c:	bd08      	pop	{r3, pc}
 8010b8e:	bf00      	nop

08010b90 <_exit>:

void _exit (int status)
{
 8010b90:	b508      	push	{r3, lr}
	errno = EINVAL;
 8010b92:	f01f f8f9 	bl	802fd88 <__errno>
 8010b96:	2316      	movs	r3, #22
 8010b98:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8010b9a:	e7fe      	b.n	8010b9a <_exit+0xa>

08010b9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8010b9c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010b9e:	1e16      	subs	r6, r2, #0
 8010ba0:	dd07      	ble.n	8010bb2 <_read+0x16>
 8010ba2:	460c      	mov	r4, r1
 8010ba4:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8010ba6:	e000      	b.n	8010baa <_read+0xe>
 8010ba8:	bf00      	nop
 8010baa:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010bae:	42a5      	cmp	r5, r4
 8010bb0:	d1f9      	bne.n	8010ba6 <_read+0xa>
	}

return len;
}
 8010bb2:	4630      	mov	r0, r6
 8010bb4:	bd70      	pop	{r4, r5, r6, pc}
 8010bb6:	bf00      	nop

08010bb8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8010bb8:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010bba:	1e16      	subs	r6, r2, #0
 8010bbc:	dd07      	ble.n	8010bce <_write+0x16>
 8010bbe:	460c      	mov	r4, r1
 8010bc0:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8010bc2:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010bc6:	e000      	b.n	8010bca <_write+0x12>
 8010bc8:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010bca:	42ac      	cmp	r4, r5
 8010bcc:	d1f9      	bne.n	8010bc2 <_write+0xa>
	}
	return len;
}
 8010bce:	4630      	mov	r0, r6
 8010bd0:	bd70      	pop	{r4, r5, r6, pc}
 8010bd2:	bf00      	nop

08010bd4 <_close>:

int _close(int file)
{
	return -1;
}
 8010bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8010bd8:	4770      	bx	lr
 8010bda:	bf00      	nop

08010bdc <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8010bdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8010be0:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8010be2:	604b      	str	r3, [r1, #4]
}
 8010be4:	4770      	bx	lr
 8010be6:	bf00      	nop

08010be8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8010be8:	2001      	movs	r0, #1
 8010bea:	4770      	bx	lr

08010bec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8010bec:	2000      	movs	r0, #0
 8010bee:	4770      	bx	lr

08010bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8010bf0:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8010bf2:	480d      	ldr	r0, [pc, #52]	; (8010c28 <_sbrk+0x38>)
{
 8010bf4:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8010bf6:	490d      	ldr	r1, [pc, #52]	; (8010c2c <_sbrk+0x3c>)
 8010bf8:	4c0d      	ldr	r4, [pc, #52]	; (8010c30 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8010bfa:	6802      	ldr	r2, [r0, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8010bfc:	1b09      	subs	r1, r1, r4
  if (NULL == __sbrk_heap_end)
 8010bfe:	b12a      	cbz	r2, 8010c0c <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8010c00:	4413      	add	r3, r2
 8010c02:	428b      	cmp	r3, r1
 8010c04:	d808      	bhi.n	8010c18 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8010c06:	6003      	str	r3, [r0, #0]

  return (void *)prev_heap_end;
}
 8010c08:	4610      	mov	r0, r2
 8010c0a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8010c0c:	4c09      	ldr	r4, [pc, #36]	; (8010c34 <_sbrk+0x44>)
 8010c0e:	4622      	mov	r2, r4
  if (__sbrk_heap_end + incr > max_heap)
 8010c10:	4413      	add	r3, r2
 8010c12:	428b      	cmp	r3, r1
    __sbrk_heap_end = &_end;
 8010c14:	6004      	str	r4, [r0, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8010c16:	d9f6      	bls.n	8010c06 <_sbrk+0x16>
    errno = ENOMEM;
 8010c18:	f01f f8b6 	bl	802fd88 <__errno>
 8010c1c:	230c      	movs	r3, #12
    return (void *)-1;
 8010c1e:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8010c22:	6003      	str	r3, [r0, #0]
}
 8010c24:	4610      	mov	r0, r2
 8010c26:	bd10      	pop	{r4, pc}
 8010c28:	20018384 	.word	0x20018384
 8010c2c:	20030000 	.word	0x20030000
 8010c30:	00000b00 	.word	0x00000b00
 8010c34:	2001fee0 	.word	0x2001fee0

08010c38 <SystemInit>:
#endif

  /* Non-secure main application shall call SystemCoreClockUpdate() to update */
  /* the SystemCoreClock variable to insure non-secure application relies on  */
  /* the initial clock reference set by secure application.                   */
}
 8010c38:	4770      	bx	lr
 8010c3a:	bf00      	nop

08010c3c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8010c3c:	b508      	push	{r3, lr}
  /* Get the SystemCoreClock value from the secure domain */
  SystemCoreClock = SECURE_SystemCoreClockUpdate();
 8010c3e:	f020 fd3b 	bl	80316b8 <__SECURE_SystemCoreClockUpdate_veneer>
 8010c42:	4b01      	ldr	r3, [pc, #4]	; (8010c48 <SystemCoreClockUpdate+0xc>)
 8010c44:	6018      	str	r0, [r3, #0]
}
 8010c46:	bd08      	pop	{r3, pc}
 8010c48:	20018000 	.word	0x20018000

08010c4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8010c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010c84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8010c50:	f7ff fff2 	bl	8010c38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8010c54:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8010c56:	e003      	b.n	8010c60 <LoopCopyDataInit>

08010c58 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8010c58:	4b0b      	ldr	r3, [pc, #44]	; (8010c88 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8010c5a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8010c5c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8010c5e:	3104      	adds	r1, #4

08010c60 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8010c60:	480a      	ldr	r0, [pc, #40]	; (8010c8c <LoopForever+0xa>)
	ldr	r3, =_edata
 8010c62:	4b0b      	ldr	r3, [pc, #44]	; (8010c90 <LoopForever+0xe>)
	adds	r2, r0, r1
 8010c64:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8010c66:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8010c68:	d3f6      	bcc.n	8010c58 <CopyDataInit>
	ldr	r2, =_sbss
 8010c6a:	4a0a      	ldr	r2, [pc, #40]	; (8010c94 <LoopForever+0x12>)
	b	LoopFillZerobss
 8010c6c:	e002      	b.n	8010c74 <LoopFillZerobss>

08010c6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8010c6e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8010c70:	f842 3b04 	str.w	r3, [r2], #4

08010c74 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8010c74:	4b08      	ldr	r3, [pc, #32]	; (8010c98 <LoopForever+0x16>)
	cmp	r2, r3
 8010c76:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8010c78:	d3f9      	bcc.n	8010c6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8010c7a:	f01f f88b 	bl	802fd94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8010c7e:	f7ff fc7b 	bl	8010578 <main>

08010c82 <LoopForever>:

LoopForever:
    b LoopForever
 8010c82:	e7fe      	b.n	8010c82 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8010c84:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8010c88:	08036174 	.word	0x08036174
	ldr	r0, =_sdata
 8010c8c:	20018000 	.word	0x20018000
	ldr	r3, =_edata
 8010c90:	20018364 	.word	0x20018364
	ldr	r2, =_sbss
 8010c94:	20018368 	.word	0x20018368
	ldr	r3, = _ebss
 8010c98:	2001fee0 	.word	0x2001fee0

08010c9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8010c9c:	e7fe      	b.n	8010c9c <ADC1_2_IRQHandler>
	...

08010ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010ca0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8010ca2:	4b0f      	ldr	r3, [pc, #60]	; (8010ce0 <HAL_InitTick+0x40>)
 8010ca4:	781b      	ldrb	r3, [r3, #0]
 8010ca6:	b90b      	cbnz	r3, 8010cac <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8010ca8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8010caa:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8010cac:	4605      	mov	r5, r0
 8010cae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010cb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8010cb6:	4a0b      	ldr	r2, [pc, #44]	; (8010ce4 <HAL_InitTick+0x44>)
 8010cb8:	6810      	ldr	r0, [r2, #0]
 8010cba:	fbb0 f0f3 	udiv	r0, r0, r3
 8010cbe:	f000 f8b9 	bl	8010e34 <HAL_SYSTICK_Config>
 8010cc2:	4604      	mov	r4, r0
 8010cc4:	2800      	cmp	r0, #0
 8010cc6:	d1ef      	bne.n	8010ca8 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8010cc8:	2d07      	cmp	r5, #7
 8010cca:	d8ed      	bhi.n	8010ca8 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8010ccc:	4602      	mov	r2, r0
 8010cce:	4629      	mov	r1, r5
 8010cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8010cd4:	f000 f856 	bl	8010d84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8010cd8:	4b03      	ldr	r3, [pc, #12]	; (8010ce8 <HAL_InitTick+0x48>)
 8010cda:	4620      	mov	r0, r4
 8010cdc:	601d      	str	r5, [r3, #0]
}
 8010cde:	bd38      	pop	{r3, r4, r5, pc}
 8010ce0:	20018004 	.word	0x20018004
 8010ce4:	20018000 	.word	0x20018000
 8010ce8:	20018008 	.word	0x20018008

08010cec <HAL_Init>:
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8010cec:	2004      	movs	r0, #4
{
 8010cee:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8010cf0:	f000 f832 	bl	8010d58 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClockUpdate();
 8010cf4:	f7ff ffa2 	bl	8010c3c <SystemCoreClockUpdate>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8010cf8:	2000      	movs	r0, #0
 8010cfa:	f7ff ffd1 	bl	8010ca0 <HAL_InitTick>
 8010cfe:	b110      	cbz	r0, 8010d06 <HAL_Init+0x1a>
    status = HAL_ERROR;
 8010d00:	2401      	movs	r4, #1
}
 8010d02:	4620      	mov	r0, r4
 8010d04:	bd10      	pop	{r4, pc}
 8010d06:	4604      	mov	r4, r0
    HAL_MspInit();
 8010d08:	f7ff fe00 	bl	801090c <HAL_MspInit>
}
 8010d0c:	4620      	mov	r0, r4
 8010d0e:	bd10      	pop	{r4, pc}

08010d10 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8010d10:	4a03      	ldr	r2, [pc, #12]	; (8010d20 <HAL_IncTick+0x10>)
 8010d12:	4b04      	ldr	r3, [pc, #16]	; (8010d24 <HAL_IncTick+0x14>)
 8010d14:	6811      	ldr	r1, [r2, #0]
 8010d16:	781b      	ldrb	r3, [r3, #0]
 8010d18:	440b      	add	r3, r1
 8010d1a:	6013      	str	r3, [r2, #0]
}
 8010d1c:	4770      	bx	lr
 8010d1e:	bf00      	nop
 8010d20:	2001bdb4 	.word	0x2001bdb4
 8010d24:	20018004 	.word	0x20018004

08010d28 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8010d28:	4b01      	ldr	r3, [pc, #4]	; (8010d30 <HAL_GetTick+0x8>)
 8010d2a:	6818      	ldr	r0, [r3, #0]
}
 8010d2c:	4770      	bx	lr
 8010d2e:	bf00      	nop
 8010d30:	2001bdb4 	.word	0x2001bdb4

08010d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010d34:	b538      	push	{r3, r4, r5, lr}
 8010d36:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8010d38:	f7ff fff6 	bl	8010d28 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8010d3c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8010d3e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8010d40:	d002      	beq.n	8010d48 <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 8010d42:	4b04      	ldr	r3, [pc, #16]	; (8010d54 <HAL_Delay+0x20>)
 8010d44:	781b      	ldrb	r3, [r3, #0]
 8010d46:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8010d48:	f7ff ffee 	bl	8010d28 <HAL_GetTick>
 8010d4c:	1b43      	subs	r3, r0, r5
 8010d4e:	42a3      	cmp	r3, r4
 8010d50:	d3fa      	bcc.n	8010d48 <HAL_Delay+0x14>
  {
  }
}
 8010d52:	bd38      	pop	{r3, r4, r5, pc}
 8010d54:	20018004 	.word	0x20018004

08010d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010d58:	b410      	push	{r4}
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010d5a:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010d5e:	4908      	ldr	r1, [pc, #32]	; (8010d80 <HAL_NVIC_SetPriorityGrouping+0x28>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010d60:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010d62:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010d64:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010d68:	ea02 0004 	and.w	r0, r2, r4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010d6c:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8010d6e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8010d72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8010d76:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 8010d7a:	60cb      	str	r3, [r1, #12]
 8010d7c:	4770      	bx	lr
 8010d7e:	bf00      	nop
 8010d80:	e000ed00 	.word	0xe000ed00

08010d84 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010d84:	4b19      	ldr	r3, [pc, #100]	; (8010dec <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010d86:	b430      	push	{r4, r5}
 8010d88:	68db      	ldr	r3, [r3, #12]
 8010d8a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010d8e:	f1c3 0507 	rsb	r5, r3, #7
 8010d92:	2d03      	cmp	r5, #3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010d94:	f103 0403 	add.w	r4, r3, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010d98:	bf28      	it	cs
 8010d9a:	2503      	movcs	r5, #3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010d9c:	2c06      	cmp	r4, #6
 8010d9e:	d919      	bls.n	8010dd4 <HAL_NVIC_SetPriority+0x50>
 8010da0:	f04f 34ff 	mov.w	r4, #4294967295
 8010da4:	3b04      	subs	r3, #4
 8010da6:	409c      	lsls	r4, r3
 8010da8:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010dac:	f04f 34ff 	mov.w	r4, #4294967295
 8010db0:	40ac      	lsls	r4, r5
 8010db2:	ea21 0104 	bic.w	r1, r1, r4
 8010db6:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8010db8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010dba:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8010dbe:	db0c      	blt.n	8010dda <HAL_NVIC_SetPriority+0x56>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010dc0:	0149      	lsls	r1, r1, #5
 8010dc2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8010dc6:	b2c9      	uxtb	r1, r1
 8010dc8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8010dcc:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8010dd0:	bc30      	pop	{r4, r5}
 8010dd2:	4770      	bx	lr
 8010dd4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010dd6:	4613      	mov	r3, r2
 8010dd8:	e7e8      	b.n	8010dac <HAL_NVIC_SetPriority+0x28>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010dda:	4b05      	ldr	r3, [pc, #20]	; (8010df0 <HAL_NVIC_SetPriority+0x6c>)
 8010ddc:	f000 000f 	and.w	r0, r0, #15
 8010de0:	0149      	lsls	r1, r1, #5
 8010de2:	b2c9      	uxtb	r1, r1
 8010de4:	4403      	add	r3, r0
 8010de6:	7619      	strb	r1, [r3, #24]
 8010de8:	bc30      	pop	{r4, r5}
 8010dea:	4770      	bx	lr
 8010dec:	e000ed00 	.word	0xe000ed00
 8010df0:	e000ecfc 	.word	0xe000ecfc

08010df4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8010df4:	2800      	cmp	r0, #0
 8010df6:	db07      	blt.n	8010e08 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010df8:	2301      	movs	r3, #1
 8010dfa:	f000 011f 	and.w	r1, r0, #31
 8010dfe:	4a03      	ldr	r2, [pc, #12]	; (8010e0c <HAL_NVIC_EnableIRQ+0x18>)
 8010e00:	0940      	lsrs	r0, r0, #5
 8010e02:	408b      	lsls	r3, r1
 8010e04:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8010e08:	4770      	bx	lr
 8010e0a:	bf00      	nop
 8010e0c:	e000e100 	.word	0xe000e100

08010e10 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8010e10:	2800      	cmp	r0, #0
 8010e12:	db0c      	blt.n	8010e2e <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010e14:	2301      	movs	r3, #1
 8010e16:	f000 011f 	and.w	r1, r0, #31
 8010e1a:	4a05      	ldr	r2, [pc, #20]	; (8010e30 <HAL_NVIC_DisableIRQ+0x20>)
 8010e1c:	0940      	lsrs	r0, r0, #5
 8010e1e:	408b      	lsls	r3, r1
 8010e20:	3020      	adds	r0, #32
 8010e22:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8010e26:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8010e2a:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8010e2e:	4770      	bx	lr
 8010e30:	e000e100 	.word	0xe000e100

08010e34 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010e34:	3801      	subs	r0, #1
 8010e36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8010e3a:	d20d      	bcs.n	8010e58 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8010e3c:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010e3e:	25e0      	movs	r5, #224	; 0xe0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010e40:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010e42:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010e44:	4b05      	ldr	r3, [pc, #20]	; (8010e5c <HAL_SYSTICK_Config+0x28>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010e46:	4c06      	ldr	r4, [pc, #24]	; (8010e60 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010e48:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010e4a:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010e4e:	4610      	mov	r0, r2
  return SysTick_Config(TicksNumb);
}
 8010e50:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010e52:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010e54:	6019      	str	r1, [r3, #0]
 8010e56:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8010e58:	2001      	movs	r0, #1
 8010e5a:	4770      	bx	lr
 8010e5c:	e000e010 	.word	0xe000e010
 8010e60:	e000ed00 	.word	0xe000ed00

08010e64 <HAL_DMA_Abort>:
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8010e64:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
{
 8010e68:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8010e6a:	2a02      	cmp	r2, #2
 8010e6c:	d006      	beq.n	8010e7c <HAL_DMA_Abort+0x18>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8010e6e:	2104      	movs	r1, #4

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010e70:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8010e72:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_UNLOCK(hdma);
 8010e74:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24

    return HAL_ERROR;
 8010e78:	2001      	movs	r0, #1
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    return status;
  }
}
 8010e7a:	4770      	bx	lr
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8010e7c:	2101      	movs	r1, #1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8010e7e:	6802      	ldr	r2, [r0, #0]
{
 8010e80:	b430      	push	{r4, r5}
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8010e82:	6d05      	ldr	r5, [r0, #80]	; 0x50
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8010e84:	6810      	ldr	r0, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8010e86:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8010e88:	f020 000e 	bic.w	r0, r0, #14
 8010e8c:	6010      	str	r0, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8010e8e:	6828      	ldr	r0, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8010e90:	f004 041c 	and.w	r4, r4, #28
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8010e94:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8010e98:	6028      	str	r0, [r5, #0]
    __HAL_DMA_DISABLE(hdma);
 8010e9a:	6810      	ldr	r0, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8010e9c:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 8010e9e:	40a1      	lsls	r1, r4
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8010ea0:	6d5c      	ldr	r4, [r3, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8010ea2:	f020 0001 	bic.w	r0, r0, #1
 8010ea6:	6010      	str	r0, [r2, #0]
    if(hdma->DMAmuxRequestGen != 0U)
 8010ea8:	e9d3 0216 	ldrd	r0, r2, [r3, #88]	; 0x58
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8010eac:	6069      	str	r1, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8010eae:	6060      	str	r0, [r4, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8010eb0:	b132      	cbz	r2, 8010ec0 <HAL_DMA_Abort+0x5c>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8010eb2:	e9d3 0418 	ldrd	r0, r4, [r3, #96]	; 0x60
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8010eb6:	6811      	ldr	r1, [r2, #0]
 8010eb8:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8010ebc:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8010ebe:	6044      	str	r4, [r0, #4]
    __HAL_UNLOCK(hdma);
 8010ec0:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_READY;
 8010ec2:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8010ec4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8010ec8:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
    return status;
 8010ecc:	4610      	mov	r0, r2
}
 8010ece:	bc30      	pop	{r4, r5}
 8010ed0:	4770      	bx	lr
 8010ed2:	bf00      	nop

08010ed4 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8010ed4:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
{
 8010ed8:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8010eda:	2a02      	cmp	r2, #2
 8010edc:	d003      	beq.n	8010ee6 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8010ede:	2204      	movs	r2, #4

    status = HAL_ERROR;
 8010ee0:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8010ee2:	645a      	str	r2, [r3, #68]	; 0x44
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8010ee4:	4770      	bx	lr
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8010ee6:	2101      	movs	r1, #1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8010ee8:	6802      	ldr	r2, [r0, #0]
{
 8010eea:	b570      	push	{r4, r5, r6, lr}
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8010eec:	6d05      	ldr	r5, [r0, #80]	; 0x50
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8010eee:	6810      	ldr	r0, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8010ef0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8010ef2:	f020 000e 	bic.w	r0, r0, #14
 8010ef6:	6010      	str	r0, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8010ef8:	6810      	ldr	r0, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8010efa:	f004 041c 	and.w	r4, r4, #28
    __HAL_DMA_DISABLE(hdma);
 8010efe:	f020 0001 	bic.w	r0, r0, #1
 8010f02:	6010      	str	r0, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8010f04:	6828      	ldr	r0, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8010f06:	6c9e      	ldr	r6, [r3, #72]	; 0x48
 8010f08:	fa01 f204 	lsl.w	r2, r1, r4
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8010f0c:	6d5c      	ldr	r4, [r3, #84]	; 0x54
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8010f0e:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8010f12:	6028      	str	r0, [r5, #0]
    if(hdma->DMAmuxRequestGen != 0U)
 8010f14:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8010f18:	6072      	str	r2, [r6, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8010f1a:	6060      	str	r0, [r4, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8010f1c:	b131      	cbz	r1, 8010f2c <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8010f1e:	e9d3 0418 	ldrd	r0, r4, [r3, #96]	; 0x60
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8010f22:	680a      	ldr	r2, [r1, #0]
 8010f24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010f28:	600a      	str	r2, [r1, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8010f2a:	6044      	str	r4, [r0, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8010f2c:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8010f2e:	2400      	movs	r4, #0
    if(hdma->XferAbortCallback != NULL)
 8010f30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    hdma->State = HAL_DMA_STATE_READY;
 8010f32:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8010f36:	f883 4024 	strb.w	r4, [r3, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8010f3a:	b11a      	cbz	r2, 8010f44 <HAL_DMA_Abort_IT+0x70>
      hdma->XferAbortCallback(hdma);
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8010f40:	4620      	mov	r0, r4
}
 8010f42:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8010f44:	4610      	mov	r0, r2
}
 8010f46:	bd70      	pop	{r4, r5, r6, pc}

08010f48 <HAL_FLASH_Program>:
  *                This parameter is the data for the double word program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8010f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8010f4c:	4c37      	ldr	r4, [pc, #220]	; (801102c <HAL_FLASH_Program+0xe4>)
 8010f4e:	7826      	ldrb	r6, [r4, #0]
 8010f50:	2e01      	cmp	r6, #1
 8010f52:	d05a      	beq.n	801100a <HAL_FLASH_Program+0xc2>
 8010f54:	4691      	mov	r9, r2
 8010f56:	461f      	mov	r7, r3
 8010f58:	2201      	movs	r2, #1

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	4680      	mov	r8, r0
 8010f5e:	460d      	mov	r5, r1
  __HAL_LOCK(&pFlash);
 8010f60:	7022      	strb	r2, [r4, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010f62:	6063      	str	r3, [r4, #4]
{
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t timeout = HAL_GetTick() + Timeout;
 8010f64:	f7ff fee0 	bl	8010d28 <HAL_GetTick>
  uint32_t error;
  __IO uint32_t *reg_sr;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8010f68:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8011038 <HAL_FLASH_Program+0xf0>
  uint32_t timeout = HAL_GetTick() + Timeout;
 8010f6c:	f500 767a 	add.w	r6, r0, #1000	; 0x3e8
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8010f70:	e003      	b.n	8010f7a <HAL_FLASH_Program+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if(HAL_GetTick() >= timeout)
 8010f72:	f7ff fed9 	bl	8010d28 <HAL_GetTick>
 8010f76:	4286      	cmp	r6, r0
 8010f78:	d942      	bls.n	8011000 <HAL_FLASH_Program+0xb8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8010f7a:	f8da 3020 	ldr.w	r3, [sl, #32]
 8010f7e:	03d8      	lsls	r0, r3, #15
 8010f80:	d4f7      	bmi.n	8010f72 <HAL_FLASH_Program+0x2a>
  
  /* Access to SECSR or NSSR registers depends on operation type */
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);

  /* Check FLASH operation error flags */
  error = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 8010f82:	f242 01fa 	movw	r1, #8442	; 0x20fa
 8010f86:	4a2a      	ldr	r2, [pc, #168]	; (8011030 <HAL_FLASH_Program+0xe8>)
 8010f88:	6813      	ldr	r3, [r2, #0]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  error |= (FLASH->NSSR & FLASH_FLAG_OPTWERR);
#endif /* __ARM_FEATURE_CMSE */ 

  if(error != 0u)
 8010f8a:	400b      	ands	r3, r1
 8010f8c:	d140      	bne.n	8011010 <HAL_FLASH_Program+0xc8>

    return HAL_ERROR;
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 8010f8e:	6813      	ldr	r3, [r2, #0]
 8010f90:	07d9      	lsls	r1, r3, #31
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_sr) = FLASH_FLAG_EOP;
 8010f92:	bf44      	itt	mi
 8010f94:	2301      	movmi	r3, #1
 8010f96:	6013      	strmi	r3, [r2, #0]
    pFlash.ProcedureOnGoing = TypeProgram;
 8010f98:	f8c4 8008 	str.w	r8, [r4, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f9c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010fa0:	b672      	cpsid	i
  /* Disable interrupts to avoid any interruption during the double word programming */
  primask_bit = __get_PRIMASK();
  __disable_irq();

  /* Set PG bit */
  SET_BIT((*reg), FLASH_NSCR_NSPG);
 8010fa2:	4a24      	ldr	r2, [pc, #144]	; (8011034 <HAL_FLASH_Program+0xec>)
 8010fa4:	6813      	ldr	r3, [r2, #0]
 8010fa6:	f043 0301 	orr.w	r3, r3, #1
 8010faa:	6013      	str	r3, [r2, #0]

  /* Program first word */
  *(uint32_t*)Address = (uint32_t)Data;
 8010fac:	f8c5 9000 	str.w	r9, [r5]
  __ASM volatile ("isb 0xF":::"memory");
 8010fb0:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t*)(Address+4U) = (uint32_t)(Data >> 32U);
 8010fb4:	606f      	str	r7, [r5, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010fb6:	f381 8810 	msr	PRIMASK, r1
  uint32_t timeout = HAL_GetTick() + Timeout;
 8010fba:	f7ff feb5 	bl	8010d28 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8010fbe:	4e1e      	ldr	r6, [pc, #120]	; (8011038 <HAL_FLASH_Program+0xf0>)
  uint32_t timeout = HAL_GetTick() + Timeout;
 8010fc0:	f500 757a 	add.w	r5, r0, #1000	; 0x3e8
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8010fc4:	e003      	b.n	8010fce <HAL_FLASH_Program+0x86>
      if(HAL_GetTick() >= timeout)
 8010fc6:	f7ff feaf 	bl	8010d28 <HAL_GetTick>
 8010fca:	4285      	cmp	r5, r0
 8010fcc:	d926      	bls.n	801101c <HAL_FLASH_Program+0xd4>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8010fce:	6a33      	ldr	r3, [r6, #32]
 8010fd0:	03db      	lsls	r3, r3, #15
 8010fd2:	d4f8      	bmi.n	8010fc6 <HAL_FLASH_Program+0x7e>
  error = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 8010fd4:	f242 02fa 	movw	r2, #8442	; 0x20fa
 8010fd8:	4915      	ldr	r1, [pc, #84]	; (8011030 <HAL_FLASH_Program+0xe8>)
 8010fda:	6808      	ldr	r0, [r1, #0]
  if(error != 0u)
 8010fdc:	4002      	ands	r2, r0
 8010fde:	d11f      	bne.n	8011020 <HAL_FLASH_Program+0xd8>
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 8010fe0:	6808      	ldr	r0, [r1, #0]
 8010fe2:	f010 0001 	ands.w	r0, r0, #1
 8010fe6:	d002      	beq.n	8010fee <HAL_FLASH_Program+0xa6>
    (*reg_sr) = FLASH_FLAG_EOP;
 8010fe8:	2301      	movs	r3, #1
 8010fea:	4610      	mov	r0, r2
 8010fec:	600b      	str	r3, [r1, #0]
    CLEAR_BIT((*reg), (pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)));
 8010fee:	4911      	ldr	r1, [pc, #68]	; (8011034 <HAL_FLASH_Program+0xec>)
 8010ff0:	68a2      	ldr	r2, [r4, #8]
 8010ff2:	680b      	ldr	r3, [r1, #0]
 8010ff4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8010ff8:	ea23 0302 	bic.w	r3, r3, r2
 8010ffc:	600b      	str	r3, [r1, #0]
 8010ffe:	e000      	b.n	8011002 <HAL_FLASH_Program+0xba>
 8011000:	2003      	movs	r0, #3
  __HAL_UNLOCK(&pFlash);
 8011002:	2300      	movs	r3, #0
 8011004:	7023      	strb	r3, [r4, #0]
}
 8011006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(&pFlash);
 801100a:	2002      	movs	r0, #2
}
 801100c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pFlash.ErrorCode |= error;
 8011010:	6861      	ldr	r1, [r4, #4]
    (*reg_sr) = error;
 8011012:	6013      	str	r3, [r2, #0]
    pFlash.ErrorCode |= error;
 8011014:	430b      	orrs	r3, r1
    return HAL_ERROR;
 8011016:	2001      	movs	r0, #1
    pFlash.ErrorCode |= error;
 8011018:	6063      	str	r3, [r4, #4]
  if(status == HAL_OK)
 801101a:	e7f2      	b.n	8011002 <HAL_FLASH_Program+0xba>
        return HAL_TIMEOUT;
 801101c:	2003      	movs	r0, #3
 801101e:	e7e6      	b.n	8010fee <HAL_FLASH_Program+0xa6>
    pFlash.ErrorCode |= error;
 8011020:	6860      	ldr	r0, [r4, #4]
    (*reg_sr) = error;
 8011022:	600a      	str	r2, [r1, #0]
    pFlash.ErrorCode |= error;
 8011024:	4310      	orrs	r0, r2
 8011026:	6060      	str	r0, [r4, #4]
    return HAL_ERROR;
 8011028:	2001      	movs	r0, #1
 801102a:	e7e0      	b.n	8010fee <HAL_FLASH_Program+0xa6>
 801102c:	2001800c 	.word	0x2001800c
 8011030:	40022020 	.word	0x40022020
 8011034:	40022028 	.word	0x40022028
 8011038:	40022000 	.word	0x40022000

0801103c <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK) != 0u)
 801103c:	4b06      	ldr	r3, [pc, #24]	; (8011058 <HAL_FLASH_Unlock+0x1c>)
 801103e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011040:	2a00      	cmp	r2, #0
 8011042:	db01      	blt.n	8011048 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8011044:	2000      	movs	r0, #0
}
 8011046:	4770      	bx	lr
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 8011048:	4904      	ldr	r1, [pc, #16]	; (801105c <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 801104a:	4a05      	ldr	r2, [pc, #20]	; (8011060 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 801104c:	6099      	str	r1, [r3, #8]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 801104e:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK) != 0u)
 8011050:	6a98      	ldr	r0, [r3, #40]	; 0x28
  HAL_StatusTypeDef status = HAL_OK;
 8011052:	0fc0      	lsrs	r0, r0, #31
 8011054:	4770      	bx	lr
 8011056:	bf00      	nop
 8011058:	40022000 	.word	0x40022000
 801105c:	45670123 	.word	0x45670123
 8011060:	cdef89ab 	.word	0xcdef89ab

08011064 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK);
 8011064:	4b04      	ldr	r3, [pc, #16]	; (8011078 <HAL_FLASH_Lock+0x14>)
 8011066:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011068:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 801106c:	629a      	str	r2, [r3, #40]	; 0x28
  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_NSLOCK) != 0u)
 801106e:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
 8011070:	43c0      	mvns	r0, r0
 8011072:	0fc0      	lsrs	r0, r0, #31
 8011074:	4770      	bx	lr
 8011076:	bf00      	nop
 8011078:	40022000 	.word	0x40022000

0801107c <FLASH_WaitForLastOperation>:
{
 801107c:	b570      	push	{r4, r5, r6, lr}
 801107e:	4604      	mov	r4, r0
  uint32_t timeout = HAL_GetTick() + Timeout;
 8011080:	f7ff fe52 	bl	8010d28 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8011084:	4e12      	ldr	r6, [pc, #72]	; (80110d0 <FLASH_WaitForLastOperation+0x54>)
  uint32_t timeout = HAL_GetTick() + Timeout;
 8011086:	1905      	adds	r5, r0, r4
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8011088:	1c60      	adds	r0, r4, #1
 801108a:	d111      	bne.n	80110b0 <FLASH_WaitForLastOperation+0x34>
 801108c:	4a10      	ldr	r2, [pc, #64]	; (80110d0 <FLASH_WaitForLastOperation+0x54>)
 801108e:	6a13      	ldr	r3, [r2, #32]
 8011090:	03d9      	lsls	r1, r3, #15
 8011092:	d4fc      	bmi.n	801108e <FLASH_WaitForLastOperation+0x12>
  error = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 8011094:	f242 01fa 	movw	r1, #8442	; 0x20fa
 8011098:	4a0e      	ldr	r2, [pc, #56]	; (80110d4 <FLASH_WaitForLastOperation+0x58>)
 801109a:	6813      	ldr	r3, [r2, #0]
  if(error != 0u)
 801109c:	400b      	ands	r3, r1
 801109e:	d110      	bne.n	80110c2 <FLASH_WaitForLastOperation+0x46>
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 80110a0:	6810      	ldr	r0, [r2, #0]
 80110a2:	f010 0001 	ands.w	r0, r0, #1
 80110a6:	d002      	beq.n	80110ae <FLASH_WaitForLastOperation+0x32>
    (*reg_sr) = FLASH_FLAG_EOP;
 80110a8:	2101      	movs	r1, #1
 80110aa:	4618      	mov	r0, r3
 80110ac:	6011      	str	r1, [r2, #0]
}
 80110ae:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80110b0:	6a33      	ldr	r3, [r6, #32]
 80110b2:	03db      	lsls	r3, r3, #15
 80110b4:	d5ee      	bpl.n	8011094 <FLASH_WaitForLastOperation+0x18>
      if(HAL_GetTick() >= timeout)
 80110b6:	f7ff fe37 	bl	8010d28 <HAL_GetTick>
 80110ba:	42a8      	cmp	r0, r5
 80110bc:	d3e4      	bcc.n	8011088 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 80110be:	2003      	movs	r0, #3
}
 80110c0:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode |= error;
 80110c2:	4905      	ldr	r1, [pc, #20]	; (80110d8 <FLASH_WaitForLastOperation+0x5c>)
    (*reg_sr) = error;
 80110c4:	6013      	str	r3, [r2, #0]
    pFlash.ErrorCode |= error;
 80110c6:	684a      	ldr	r2, [r1, #4]
    return HAL_ERROR;
 80110c8:	2001      	movs	r0, #1
    pFlash.ErrorCode |= error;
 80110ca:	4313      	orrs	r3, r2
 80110cc:	604b      	str	r3, [r1, #4]
}
 80110ce:	bd70      	pop	{r4, r5, r6, pc}
 80110d0:	40022000 	.word	0x40022000
 80110d4:	40022020 	.word	0x40022020
 80110d8:	2001800c 	.word	0x2001800c

080110dc <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80110dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80110e0:	4e46      	ldr	r6, [pc, #280]	; (80111fc <HAL_FLASHEx_Erase+0x120>)
 80110e2:	7833      	ldrb	r3, [r6, #0]
 80110e4:	2b01      	cmp	r3, #1
 80110e6:	d06f      	beq.n	80111c8 <HAL_FLASHEx_Erase+0xec>
 80110e8:	2201      	movs	r2, #1

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80110ea:	2300      	movs	r3, #0
 80110ec:	4683      	mov	fp, r0

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80110ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80110f2:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80110f4:	7032      	strb	r2, [r6, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80110f6:	6073      	str	r3, [r6, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80110f8:	f7ff ffc0 	bl	801107c <FLASH_WaitForLastOperation>

  if (status == HAL_OK)
 80110fc:	4607      	mov	r7, r0
 80110fe:	2800      	cmp	r0, #0
 8011100:	d15d      	bne.n	80111be <HAL_FLASHEx_Erase+0xe2>
  {
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;

    reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);

    if ((pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 8011102:	f248 0104 	movw	r1, #32772	; 0x8004
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8011106:	f8db 3000 	ldr.w	r3, [fp]
    if ((pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 801110a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801110e:	428a      	cmp	r2, r1
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8011110:	60b3      	str	r3, [r6, #8]
    if ((pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 8011112:	d03a      	beq.n	801118a <HAL_FLASHEx_Erase+0xae>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8011114:	f04f 33ff 	mov.w	r3, #4294967295
 8011118:	f8c8 3000 	str.w	r3, [r8]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801111c:	e9db 5302 	ldrd	r5, r3, [fp, #8]
 8011120:	442b      	add	r3, r5
 8011122:	429d      	cmp	r5, r3
 8011124:	d243      	bcs.n	80111ae <HAL_FLASHEx_Erase+0xd2>
#endif

  /* Access to SECCR or NSCR registers depends on operation type */
  reg = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);

  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8011126:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8011204 <HAL_FLASHEx_Erase+0x128>
    {
      CLEAR_BIT((*reg), FLASH_NSCR_NSBKER);
    }
    else
    {
      SET_BIT((*reg), FLASH_NSCR_NSBKER);
 801112a:	4c35      	ldr	r4, [pc, #212]	; (8011200 <HAL_FLASHEx_Erase+0x124>)
    }
  }

  /* Proceed to erase the page */
  MODIFY_REG((*reg), (FLASH_NSCR_NSPNB | FLASH_NSCR_NSPER), ((Page << FLASH_NSCR_NSPNB_Pos) | FLASH_NSCR_NSPER));
 801112c:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8011208 <HAL_FLASHEx_Erase+0x12c>
 8011130:	e01b      	b.n	801116a <HAL_FLASHEx_Erase+0x8e>
    CLEAR_BIT((*reg), FLASH_NSCR_NSBKER);
 8011132:	6823      	ldr	r3, [r4, #0]
 8011134:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011138:	6023      	str	r3, [r4, #0]
  MODIFY_REG((*reg), (FLASH_NSCR_NSPNB | FLASH_NSCR_NSPER), ((Page << FLASH_NSCR_NSPNB_Pos) | FLASH_NSCR_NSPER));
 801113a:	6823      	ldr	r3, [r4, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801113c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  MODIFY_REG((*reg), (FLASH_NSCR_NSPNB | FLASH_NSCR_NSPER), ((Page << FLASH_NSCR_NSPNB_Pos) | FLASH_NSCR_NSPER));
 8011140:	ea03 0309 	and.w	r3, r3, r9
 8011144:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
 8011148:	f043 0302 	orr.w	r3, r3, #2
 801114c:	6023      	str	r3, [r4, #0]
  SET_BIT((*reg), FLASH_NSCR_NSSTRT);
 801114e:	6823      	ldr	r3, [r4, #0]
 8011150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011154:	6023      	str	r3, [r4, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011156:	f7ff ff91 	bl	801107c <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 801115a:	2800      	cmp	r0, #0
 801115c:	d138      	bne.n	80111d0 <HAL_FLASHEx_Erase+0xf4>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801115e:	e9db 3202 	ldrd	r3, r2, [fp, #8]
 8011162:	3501      	adds	r5, #1
 8011164:	4413      	add	r3, r2
 8011166:	42ab      	cmp	r3, r5
 8011168:	d921      	bls.n	80111ae <HAL_FLASHEx_Erase+0xd2>
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 801116a:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 801116e:	025b      	lsls	r3, r3, #9
 8011170:	d5df      	bpl.n	8011132 <HAL_FLASHEx_Erase+0x56>
    if((Banks & FLASH_BANK_1) != 0U)
 8011172:	f8db 3004 	ldr.w	r3, [fp, #4]
 8011176:	f013 0f01 	tst.w	r3, #1
      CLEAR_BIT((*reg), FLASH_NSCR_NSBKER);
 801117a:	6823      	ldr	r3, [r4, #0]
 801117c:	bf14      	ite	ne
 801117e:	f423 6300 	bicne.w	r3, r3, #2048	; 0x800
      SET_BIT((*reg), FLASH_NSCR_NSBKER);
 8011182:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
 8011186:	6023      	str	r3, [r4, #0]
 8011188:	e7d7      	b.n	801113a <HAL_FLASHEx_Erase+0x5e>
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 801118a:	4b1e      	ldr	r3, [pc, #120]	; (8011204 <HAL_FLASHEx_Erase+0x128>)
 801118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801118e:	0258      	lsls	r0, r3, #9
 8011190:	d422      	bmi.n	80111d8 <HAL_FLASHEx_Erase+0xfc>
    SET_BIT((*reg), (FLASH_NSCR_NSMER1 | FLASH_NSCR_NSMER2));
 8011192:	491b      	ldr	r1, [pc, #108]	; (8011200 <HAL_FLASHEx_Erase+0x124>)
 8011194:	680b      	ldr	r3, [r1, #0]
 8011196:	431a      	orrs	r2, r3
 8011198:	600a      	str	r2, [r1, #0]
  SET_BIT((*reg), FLASH_NSCR_NSSTRT);
 801119a:	4a19      	ldr	r2, [pc, #100]	; (8011200 <HAL_FLASHEx_Erase+0x124>)
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801119c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  SET_BIT((*reg), FLASH_NSCR_NSSTRT);
 80111a0:	6813      	ldr	r3, [r2, #0]
 80111a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80111a6:	6013      	str	r3, [r2, #0]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80111a8:	f7ff ff68 	bl	801107c <FLASH_WaitForLastOperation>
 80111ac:	4607      	mov	r7, r0
    CLEAR_BIT((*reg), (pFlash.ProcedureOnGoing & ~(FLASH_NON_SECURE_MASK)));
 80111ae:	4914      	ldr	r1, [pc, #80]	; (8011200 <HAL_FLASHEx_Erase+0x124>)
 80111b0:	68b2      	ldr	r2, [r6, #8]
 80111b2:	680b      	ldr	r3, [r1, #0]
 80111b4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80111b8:	ea23 0302 	bic.w	r3, r3, r2
 80111bc:	600b      	str	r3, [r1, #0]
  __HAL_UNLOCK(&pFlash);
 80111be:	2300      	movs	r3, #0
}
 80111c0:	4638      	mov	r0, r7
  __HAL_UNLOCK(&pFlash);
 80111c2:	7033      	strb	r3, [r6, #0]
}
 80111c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 80111c8:	2702      	movs	r7, #2
}
 80111ca:	4638      	mov	r0, r7
 80111cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80111d0:	4607      	mov	r7, r0
          *PageError = page_index;
 80111d2:	f8c8 5000 	str.w	r5, [r8]
          break;
 80111d6:	e7ea      	b.n	80111ae <HAL_FLASHEx_Erase+0xd2>
      FLASH_MassErase(pEraseInit->Banks);
 80111d8:	f8db 3004 	ldr.w	r3, [fp, #4]
    if((Banks & FLASH_BANK_1) != 0U)
 80111dc:	07d9      	lsls	r1, r3, #31
 80111de:	d504      	bpl.n	80111ea <HAL_FLASHEx_Erase+0x10e>
      SET_BIT((*reg), FLASH_NSCR_NSMER1);
 80111e0:	4907      	ldr	r1, [pc, #28]	; (8011200 <HAL_FLASHEx_Erase+0x124>)
 80111e2:	680a      	ldr	r2, [r1, #0]
 80111e4:	f042 0204 	orr.w	r2, r2, #4
 80111e8:	600a      	str	r2, [r1, #0]
    if((Banks & FLASH_BANK_2) != 0U)
 80111ea:	079a      	lsls	r2, r3, #30
 80111ec:	d5d5      	bpl.n	801119a <HAL_FLASHEx_Erase+0xbe>
      SET_BIT((*reg), FLASH_NSCR_NSMER2);
 80111ee:	4a04      	ldr	r2, [pc, #16]	; (8011200 <HAL_FLASHEx_Erase+0x124>)
 80111f0:	6813      	ldr	r3, [r2, #0]
 80111f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80111f6:	6013      	str	r3, [r2, #0]
 80111f8:	e7cf      	b.n	801119a <HAL_FLASHEx_Erase+0xbe>
 80111fa:	bf00      	nop
 80111fc:	2001800c 	.word	0x2001800c
 8011200:	40022028 	.word	0x40022028
 8011204:	40022000 	.word	0x40022000
 8011208:	fffffc05 	.word	0xfffffc05

0801120c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801120c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8011210:	680d      	ldr	r5, [r1, #0]
{
 8011212:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0U)
 8011214:	2d00      	cmp	r5, #0
 8011216:	f000 8089 	beq.w	801132c <HAL_GPIO_Init+0x120>
  uint32_t position = 0U;
 801121a:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801121c:	f04f 0b01 	mov.w	fp, #1
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
        EXTI->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8011220:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 80113f8 <HAL_GPIO_Init+0x1ec>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8011224:	9501      	str	r5, [sp, #4]
    if(iocurrent != 0U)
 8011226:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8011228:	fa0b fe03 	lsl.w	lr, fp, r3
    if(iocurrent != 0U)
 801122c:	ea1e 0a02 	ands.w	sl, lr, r2
 8011230:	d077      	beq.n	8011322 <HAL_GPIO_Init+0x116>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011232:	684c      	ldr	r4, [r1, #4]
 8011234:	005e      	lsls	r6, r3, #1
 8011236:	f024 0810 	bic.w	r8, r4, #16
 801123a:	f108 32ff 	add.w	r2, r8, #4294967295
 801123e:	2a01      	cmp	r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8011240:	f04f 0203 	mov.w	r2, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011244:	d975      	bls.n	8011332 <HAL_GPIO_Init+0x126>
      temp = GPIOx->PUPDR;
 8011246:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8011248:	40b2      	lsls	r2, r6
 801124a:	ea27 0e02 	bic.w	lr, r7, r2
 801124e:	43d2      	mvns	r2, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8011250:	688f      	ldr	r7, [r1, #8]
 8011252:	40b7      	lsls	r7, r6
 8011254:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->PUPDR = temp;
 8011258:	60c7      	str	r7, [r0, #12]
      temp = GPIOx->MODER;
 801125a:	f8d0 e000 	ldr.w	lr, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801125e:	f004 0703 	and.w	r7, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8011262:	ea0e 0e02 	and.w	lr, lr, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8011266:	fa07 f606 	lsl.w	r6, r7, r6
 801126a:	ea46 060e 	orr.w	r6, r6, lr
      GPIOx->MODER = temp;
 801126e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8011270:	00e6      	lsls	r6, r4, #3
 8011272:	d556      	bpl.n	8011322 <HAL_GPIO_Init+0x116>
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8011274:	220f      	movs	r2, #15
 8011276:	f023 0703 	bic.w	r7, r3, #3
 801127a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 801127e:	4d58      	ldr	r5, [pc, #352]	; (80113e0 <HAL_GPIO_Init+0x1d4>)
 8011280:	f507 373d 	add.w	r7, r7, #193536	; 0x2f400
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8011284:	f003 0603 	and.w	r6, r3, #3
        temp = EXTI->EXTICR[position >> 2U];
 8011288:	f8d7 e060 	ldr.w	lr, [r7, #96]	; 0x60
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 801128c:	00f6      	lsls	r6, r6, #3
 801128e:	40b2      	lsls	r2, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8011290:	42a8      	cmp	r0, r5
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8011292:	ea2e 0202 	bic.w	r2, lr, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8011296:	d01d      	beq.n	80112d4 <HAL_GPIO_Init+0xc8>
 8011298:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 801129c:	42a8      	cmp	r0, r5
 801129e:	f000 8089 	beq.w	80113b4 <HAL_GPIO_Init+0x1a8>
 80112a2:	4d50      	ldr	r5, [pc, #320]	; (80113e4 <HAL_GPIO_Init+0x1d8>)
 80112a4:	42a8      	cmp	r0, r5
 80112a6:	f000 8089 	beq.w	80113bc <HAL_GPIO_Init+0x1b0>
 80112aa:	4d4f      	ldr	r5, [pc, #316]	; (80113e8 <HAL_GPIO_Init+0x1dc>)
 80112ac:	42a8      	cmp	r0, r5
 80112ae:	d07b      	beq.n	80113a8 <HAL_GPIO_Init+0x19c>
 80112b0:	4d4e      	ldr	r5, [pc, #312]	; (80113ec <HAL_GPIO_Init+0x1e0>)
 80112b2:	42a8      	cmp	r0, r5
 80112b4:	f000 8088 	beq.w	80113c8 <HAL_GPIO_Init+0x1bc>
 80112b8:	4d4d      	ldr	r5, [pc, #308]	; (80113f0 <HAL_GPIO_Init+0x1e4>)
 80112ba:	42a8      	cmp	r0, r5
 80112bc:	f000 808a 	beq.w	80113d4 <HAL_GPIO_Init+0x1c8>
 80112c0:	4d4c      	ldr	r5, [pc, #304]	; (80113f4 <HAL_GPIO_Init+0x1e8>)
 80112c2:	42a8      	cmp	r0, r5
 80112c4:	bf0c      	ite	eq
 80112c6:	f04f 0e06 	moveq.w	lr, #6
 80112ca:	f04f 0e07 	movne.w	lr, #7
 80112ce:	fa0e f606 	lsl.w	r6, lr, r6
 80112d2:	4332      	orrs	r2, r6
        EXTI->EXTICR[position >> 2U] = temp;
 80112d4:	663a      	str	r2, [r7, #96]	; 0x60
        temp &= ~(iocurrent);
 80112d6:	ea6f 070a 	mvn.w	r7, sl
        temp = EXTI->IMR1;
 80112da:	f8dc 2080 	ldr.w	r2, [ip, #128]	; 0x80
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80112de:	03e5      	lsls	r5, r4, #15
        temp &= ~(iocurrent);
 80112e0:	bf54      	ite	pl
 80112e2:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 80112e4:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR1 = temp;
 80112e8:	f8cc 2080 	str.w	r2, [ip, #128]	; 0x80

        temp = EXTI->EMR1;
 80112ec:	f8dc 6084 	ldr.w	r6, [ip, #132]	; 0x84
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80112f0:	03a2      	lsls	r2, r4, #14
        temp &= ~(iocurrent);
 80112f2:	bf54      	ite	pl
 80112f4:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80112f6:	ea4a 0606 	orrmi.w	r6, sl, r6
        }
        EXTI->EMR1 = temp;
 80112fa:	f8cc 6084 	str.w	r6, [ip, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80112fe:	f8dc 6000 	ldr.w	r6, [ip]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011302:	02e5      	lsls	r5, r4, #11
        temp &= ~(iocurrent);
 8011304:	bf54      	ite	pl
 8011306:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8011308:	ea4a 0606 	orrmi.w	r6, sl, r6
        }
        EXTI->RTSR1 = temp;
 801130c:	f8cc 6000 	str.w	r6, [ip]

        temp = EXTI->FTSR1;
 8011310:	f8dc 2004 	ldr.w	r2, [ip, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8011314:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8011316:	bf54      	ite	pl
 8011318:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 801131a:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;
 801131e:	f8cc 2004 	str.w	r2, [ip, #4]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8011322:	9a01      	ldr	r2, [sp, #4]
      }
    }

    position++;
 8011324:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8011326:	40da      	lsrs	r2, r3
 8011328:	f47f af7d 	bne.w	8011226 <HAL_GPIO_Init+0x1a>
  }
}
 801132c:	b003      	add	sp, #12
 801132e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8011332:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8011334:	40b2      	lsls	r2, r6
 8011336:	ea27 0902 	bic.w	r9, r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 801133a:	68cf      	ldr	r7, [r1, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801133c:	f1b8 0f02 	cmp.w	r8, #2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8011340:	fa07 f706 	lsl.w	r7, r7, r6
 8011344:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8011348:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 801134a:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 801134e:	f3c4 1700 	ubfx	r7, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8011352:	ea29 0e0e 	bic.w	lr, r9, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8011356:	fa07 f703 	lsl.w	r7, r7, r3
 801135a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 801135e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8011360:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8011362:	ea27 0e02 	bic.w	lr, r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8011366:	688f      	ldr	r7, [r1, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8011368:	ea6f 0202 	mvn.w	r2, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801136c:	fa07 f706 	lsl.w	r7, r7, r6
 8011370:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->PUPDR = temp;
 8011374:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8011376:	f47f af70 	bne.w	801125a <HAL_GPIO_Init+0x4e>
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 801137a:	f04f 0e0f 	mov.w	lr, #15
        temp = GPIOx->AFR[position >> 3U];
 801137e:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8011382:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8011386:	f003 0707 	and.w	r7, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 801138a:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801138e:	690d      	ldr	r5, [r1, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8011390:	00bf      	lsls	r7, r7, #2
 8011392:	fa0e fe07 	lsl.w	lr, lr, r7
 8011396:	ea29 0e0e 	bic.w	lr, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801139a:	fa05 f707 	lsl.w	r7, r5, r7
 801139e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80113a2:	f8c8 7020 	str.w	r7, [r8, #32]
 80113a6:	e758      	b.n	801125a <HAL_GPIO_Init+0x4e>
 80113a8:	f04f 0e03 	mov.w	lr, #3
 80113ac:	fa0e f606 	lsl.w	r6, lr, r6
 80113b0:	4332      	orrs	r2, r6
 80113b2:	e78f      	b.n	80112d4 <HAL_GPIO_Init+0xc8>
 80113b4:	fa0b f606 	lsl.w	r6, fp, r6
 80113b8:	4332      	orrs	r2, r6
 80113ba:	e78b      	b.n	80112d4 <HAL_GPIO_Init+0xc8>
 80113bc:	f04f 0e02 	mov.w	lr, #2
 80113c0:	fa0e f606 	lsl.w	r6, lr, r6
 80113c4:	4332      	orrs	r2, r6
 80113c6:	e785      	b.n	80112d4 <HAL_GPIO_Init+0xc8>
 80113c8:	f04f 0e04 	mov.w	lr, #4
 80113cc:	fa0e f606 	lsl.w	r6, lr, r6
 80113d0:	4332      	orrs	r2, r6
 80113d2:	e77f      	b.n	80112d4 <HAL_GPIO_Init+0xc8>
 80113d4:	f04f 0e05 	mov.w	lr, #5
 80113d8:	fa0e f606 	lsl.w	r6, lr, r6
 80113dc:	4332      	orrs	r2, r6
 80113de:	e779      	b.n	80112d4 <HAL_GPIO_Init+0xc8>
 80113e0:	42020000 	.word	0x42020000
 80113e4:	42020800 	.word	0x42020800
 80113e8:	42020c00 	.word	0x42020c00
 80113ec:	42021000 	.word	0x42021000
 80113f0:	42021400 	.word	0x42021400
 80113f4:	42021800 	.word	0x42021800
 80113f8:	4002f400 	.word	0x4002f400

080113fc <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80113fc:	2900      	cmp	r1, #0
 80113fe:	f000 8099 	beq.w	8011534 <HAL_GPIO_DeInit+0x138>
{
 8011402:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0U;
 8011406:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8011408:	f04f 0801 	mov.w	r8, #1
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      temp = EXTI->EXTICR[position >> 2U];
      temp &= ((0x0FUL) << (8U * (position & 0x03U)));
      if(temp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 801140c:	f8df 913c 	ldr.w	r9, [pc, #316]	; 801154c <HAL_GPIO_DeInit+0x150>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8011410:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8011550 <HAL_GPIO_DeInit+0x154>
      if(temp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8011414:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8011554 <HAL_GPIO_DeInit+0x158>
{
 8011418:	b083      	sub	sp, #12
    iocurrent = (GPIO_Pin) & (1UL << position);
 801141a:	fa08 f403 	lsl.w	r4, r8, r3
    if (iocurrent != 0U)
 801141e:	ea14 0701 	ands.w	r7, r4, r1
 8011422:	d069      	beq.n	80114f8 <HAL_GPIO_DeInit+0xfc>
      temp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8011424:	260f      	movs	r6, #15
 8011426:	f023 0503 	bic.w	r5, r3, #3
 801142a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 801142e:	f505 353d 	add.w	r5, r5, #193536	; 0x2f400
 8011432:	f003 0203 	and.w	r2, r3, #3
      temp = EXTI->EXTICR[position >> 2U];
 8011436:	f8d5 c060 	ldr.w	ip, [r5, #96]	; 0x60
      temp &= ((0x0FUL) << (8U * (position & 0x03U)));
 801143a:	00d2      	lsls	r2, r2, #3
 801143c:	4096      	lsls	r6, r2
      if(temp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 801143e:	4548      	cmp	r0, r9
      temp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8011440:	9601      	str	r6, [sp, #4]
 8011442:	ea06 0c0c 	and.w	ip, r6, ip
      if(temp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8011446:	d017      	beq.n	8011478 <HAL_GPIO_DeInit+0x7c>
 8011448:	4550      	cmp	r0, sl
 801144a:	d05c      	beq.n	8011506 <HAL_GPIO_DeInit+0x10a>
 801144c:	4e3a      	ldr	r6, [pc, #232]	; (8011538 <HAL_GPIO_DeInit+0x13c>)
 801144e:	42b0      	cmp	r0, r6
 8011450:	d05c      	beq.n	801150c <HAL_GPIO_DeInit+0x110>
 8011452:	4e3a      	ldr	r6, [pc, #232]	; (801153c <HAL_GPIO_DeInit+0x140>)
 8011454:	42b0      	cmp	r0, r6
 8011456:	d063      	beq.n	8011520 <HAL_GPIO_DeInit+0x124>
 8011458:	4e39      	ldr	r6, [pc, #228]	; (8011540 <HAL_GPIO_DeInit+0x144>)
 801145a:	42b0      	cmp	r0, r6
 801145c:	d065      	beq.n	801152a <HAL_GPIO_DeInit+0x12e>
 801145e:	4e39      	ldr	r6, [pc, #228]	; (8011544 <HAL_GPIO_DeInit+0x148>)
 8011460:	42b0      	cmp	r0, r6
 8011462:	d058      	beq.n	8011516 <HAL_GPIO_DeInit+0x11a>
 8011464:	4e38      	ldr	r6, [pc, #224]	; (8011548 <HAL_GPIO_DeInit+0x14c>)
 8011466:	42b0      	cmp	r0, r6
 8011468:	bf14      	ite	ne
 801146a:	f04f 0b07 	movne.w	fp, #7
 801146e:	f04f 0b06 	moveq.w	fp, #6
 8011472:	fa0b f202 	lsl.w	r2, fp, r2
 8011476:	e000      	b.n	801147a <HAL_GPIO_DeInit+0x7e>
 8011478:	2200      	movs	r2, #0
 801147a:	4594      	cmp	ip, r2
 801147c:	d11c      	bne.n	80114b8 <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR1 &= ~(iocurrent);
 801147e:	f8de 2080 	ldr.w	r2, [lr, #128]	; 0x80
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
        EXTI->FTSR1 &= ~(iocurrent);

        temp = (0x0FUL) << (8U * (position & 0x03U));
        EXTI->EXTICR[position >> 2U] &= ~temp;
 8011482:	9e01      	ldr	r6, [sp, #4]
        EXTI->IMR1 &= ~(iocurrent);
 8011484:	ea22 0207 	bic.w	r2, r2, r7
 8011488:	f8ce 2080 	str.w	r2, [lr, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 801148c:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 8011490:	ea22 0207 	bic.w	r2, r2, r7
 8011494:	f8ce 2084 	str.w	r2, [lr, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8011498:	f8de 2000 	ldr.w	r2, [lr]
 801149c:	ea22 0207 	bic.w	r2, r2, r7
 80114a0:	f8ce 2000 	str.w	r2, [lr]
        EXTI->FTSR1 &= ~(iocurrent);
 80114a4:	f8de 2004 	ldr.w	r2, [lr, #4]
 80114a8:	ea22 0707 	bic.w	r7, r2, r7
 80114ac:	f8ce 7004 	str.w	r7, [lr, #4]
        EXTI->EXTICR[position >> 2U] &= ~temp;
 80114b0:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80114b2:	ea22 0606 	bic.w	r6, r2, r6
 80114b6:	662e      	str	r6, [r5, #96]	; 0x60
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80114b8:	2503      	movs	r5, #3

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80114ba:	f04f 0c0f 	mov.w	ip, #15
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80114be:	6806      	ldr	r6, [r0, #0]
 80114c0:	005a      	lsls	r2, r3, #1
 80114c2:	4095      	lsls	r5, r2
 80114c4:	432e      	orrs	r6, r5
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80114c6:	08da      	lsrs	r2, r3, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80114c8:	6006      	str	r6, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80114ca:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80114ce:	f003 0607 	and.w	r6, r3, #7
 80114d2:	6a17      	ldr	r7, [r2, #32]
 80114d4:	00b6      	lsls	r6, r6, #2
 80114d6:	fa0c f606 	lsl.w	r6, ip, r6
 80114da:	ea27 0706 	bic.w	r7, r7, r6
 80114de:	6217      	str	r7, [r2, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80114e0:	6882      	ldr	r2, [r0, #8]
 80114e2:	ea22 0205 	bic.w	r2, r2, r5
 80114e6:	6082      	str	r2, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80114e8:	6842      	ldr	r2, [r0, #4]
 80114ea:	ea22 0404 	bic.w	r4, r2, r4
 80114ee:	6044      	str	r4, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80114f0:	68c2      	ldr	r2, [r0, #12]
 80114f2:	ea22 0505 	bic.w	r5, r2, r5
 80114f6:	60c5      	str	r5, [r0, #12]
    }

    position++;
 80114f8:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0U)
 80114fa:	fa31 f203 	lsrs.w	r2, r1, r3
 80114fe:	d18c      	bne.n	801141a <HAL_GPIO_DeInit+0x1e>
  }
}
 8011500:	b003      	add	sp, #12
 8011502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011506:	fa08 f202 	lsl.w	r2, r8, r2
 801150a:	e7b6      	b.n	801147a <HAL_GPIO_DeInit+0x7e>
 801150c:	f04f 0b02 	mov.w	fp, #2
 8011510:	fa0b f202 	lsl.w	r2, fp, r2
 8011514:	e7b1      	b.n	801147a <HAL_GPIO_DeInit+0x7e>
 8011516:	f04f 0b05 	mov.w	fp, #5
 801151a:	fa0b f202 	lsl.w	r2, fp, r2
 801151e:	e7ac      	b.n	801147a <HAL_GPIO_DeInit+0x7e>
 8011520:	f04f 0b03 	mov.w	fp, #3
 8011524:	fa0b f202 	lsl.w	r2, fp, r2
 8011528:	e7a7      	b.n	801147a <HAL_GPIO_DeInit+0x7e>
 801152a:	f04f 0b04 	mov.w	fp, #4
 801152e:	fa0b f202 	lsl.w	r2, fp, r2
 8011532:	e7a2      	b.n	801147a <HAL_GPIO_DeInit+0x7e>
 8011534:	4770      	bx	lr
 8011536:	bf00      	nop
 8011538:	42020800 	.word	0x42020800
 801153c:	42020c00 	.word	0x42020c00
 8011540:	42021000 	.word	0x42021000
 8011544:	42021400 	.word	0x42021400
 8011548:	42021800 	.word	0x42021800
 801154c:	42020000 	.word	0x42020000
 8011550:	4002f400 	.word	0x4002f400
 8011554:	42020400 	.word	0x42020400

08011558 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != 0U)
 8011558:	6903      	ldr	r3, [r0, #16]
 801155a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 801155c:	bf14      	ite	ne
 801155e:	2001      	movne	r0, #1
 8011560:	2000      	moveq	r0, #0
 8011562:	4770      	bx	lr

08011564 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8011564:	b10a      	cbz	r2, 801156a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8011566:	6181      	str	r1, [r0, #24]
 8011568:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801156a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 801156c:	4770      	bx	lr
 801156e:	bf00      	nop

08011570 <HAL_GPIO_EXTI_Rising_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8011570:	4770      	bx	lr
 8011572:	bf00      	nop

08011574 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8011574:	4b09      	ldr	r3, [pc, #36]	; (801159c <HAL_GPIO_EXTI_IRQHandler+0x28>)
{
 8011576:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8011578:	68da      	ldr	r2, [r3, #12]
{
 801157a:	4604      	mov	r4, r0
  if(__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 801157c:	4202      	tst	r2, r0
 801157e:	d109      	bne.n	8011594 <HAL_GPIO_EXTI_IRQHandler+0x20>
  if(__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8011580:	4b06      	ldr	r3, [pc, #24]	; (801159c <HAL_GPIO_EXTI_IRQHandler+0x28>)
 8011582:	691a      	ldr	r2, [r3, #16]
 8011584:	4214      	tst	r4, r2
 8011586:	d100      	bne.n	801158a <HAL_GPIO_EXTI_IRQHandler+0x16>
}
 8011588:	bd10      	pop	{r4, pc}
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 801158a:	4620      	mov	r0, r4
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 801158c:	611c      	str	r4, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 801158e:	f006 f863 	bl	8017658 <HAL_GPIO_EXTI_Falling_Callback>
}
 8011592:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8011594:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8011596:	f7ff ffeb 	bl	8011570 <HAL_GPIO_EXTI_Rising_Callback>
 801159a:	e7f1      	b.n	8011580 <HAL_GPIO_EXTI_IRQHandler+0xc>
 801159c:	4002f400 	.word	0x4002f400

080115a0 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80115a0:	b328      	cbz	r0, 80115ee <HAL_IWDG_Init+0x4e>
{
 80115a2:	b538      	push	{r3, r4, r5, lr}
 80115a4:	4604      	mov	r4, r0
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80115a6:	f64c 45cc 	movw	r5, #52428	; 0xcccc
  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80115aa:	e9d4 3100 	ldrd	r3, r1, [r4]
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80115ae:	f245 5055 	movw	r0, #21845	; 0x5555
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80115b2:	68a2      	ldr	r2, [r4, #8]
  __HAL_IWDG_START(hiwdg);
 80115b4:	601d      	str	r5, [r3, #0]
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80115b6:	6018      	str	r0, [r3, #0]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80115b8:	6059      	str	r1, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80115ba:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80115bc:	f7ff fbb4 	bl	8010d28 <HAL_GetTick>
 80115c0:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80115c2:	6823      	ldr	r3, [r4, #0]
 80115c4:	68da      	ldr	r2, [r3, #12]
 80115c6:	0751      	lsls	r1, r2, #29
 80115c8:	d00a      	beq.n	80115e0 <HAL_IWDG_Init+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80115ca:	f7ff fbad 	bl	8010d28 <HAL_GetTick>
 80115ce:	1b43      	subs	r3, r0, r5
 80115d0:	2b30      	cmp	r3, #48	; 0x30
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80115d2:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80115d4:	d9f6      	bls.n	80115c4 <HAL_IWDG_Init+0x24>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80115d6:	68da      	ldr	r2, [r3, #12]
 80115d8:	0752      	lsls	r2, r2, #29
 80115da:	d0f3      	beq.n	80115c4 <HAL_IWDG_Init+0x24>
      {
        return HAL_TIMEOUT;
 80115dc:	2003      	movs	r0, #3
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
}
 80115de:	bd38      	pop	{r3, r4, r5, pc}
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80115e0:	68e2      	ldr	r2, [r4, #12]
 80115e2:	6919      	ldr	r1, [r3, #16]
 80115e4:	4291      	cmp	r1, r2
 80115e6:	d004      	beq.n	80115f2 <HAL_IWDG_Init+0x52>
  return HAL_OK;
 80115e8:	2000      	movs	r0, #0
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80115ea:	611a      	str	r2, [r3, #16]
}
 80115ec:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80115ee:	2001      	movs	r0, #1
}
 80115f0:	4770      	bx	lr
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80115f2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
  return HAL_OK;
 80115f6:	2000      	movs	r0, #0
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80115f8:	601a      	str	r2, [r3, #0]
}
 80115fa:	bd38      	pop	{r3, r4, r5, pc}

080115fc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t msirange = 0U, sysclockfreq = 0U;
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80115fc:	4a2c      	ldr	r2, [pc, #176]	; (80116b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80115fe:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8011600:	68d2      	ldr	r2, [r2, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8011602:	f013 030c 	ands.w	r3, r3, #12
 8011606:	d008      	beq.n	801161a <HAL_RCC_GetSysClockFreq+0x1e>
 8011608:	2b0c      	cmp	r3, #12
 801160a:	d038      	beq.n	801167e <HAL_RCC_GetSysClockFreq+0x82>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 801160c:	2b04      	cmp	r3, #4
 801160e:	d034      	beq.n	801167a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8011610:	2b08      	cmp	r3, #8
 8011612:	4828      	ldr	r0, [pc, #160]	; (80116b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8011614:	bf18      	it	ne
 8011616:	2000      	movne	r0, #0
 8011618:	4770      	bx	lr
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 801161a:	4a25      	ldr	r2, [pc, #148]	; (80116b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 801161c:	6811      	ldr	r1, [r2, #0]
 801161e:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8011620:	bf54      	ite	pl
 8011622:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8011626:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 8011628:	4923      	ldr	r1, [pc, #140]	; (80116b8 <HAL_RCC_GetSysClockFreq+0xbc>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 801162a:	bf54      	ite	pl
 801162c:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8011630:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8011634:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8011638:	b303      	cbz	r3, 801167c <HAL_RCC_GetSysClockFreq+0x80>
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801163a:	2b0c      	cmp	r3, #12
 801163c:	d136      	bne.n	80116ac <HAL_RCC_GetSysClockFreq+0xb0>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 801163e:	491c      	ldr	r1, [pc, #112]	; (80116b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8011640:	68ca      	ldr	r2, [r1, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8011642:	68cb      	ldr	r3, [r1, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8011644:	f002 0203 	and.w	r2, r2, #3
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8011648:	f3c3 1303 	ubfx	r3, r3, #4, #4

    switch (pllsource)
 801164c:	2a02      	cmp	r2, #2
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801164e:	f103 0301 	add.w	r3, r3, #1
    switch (pllsource)
 8011652:	d022      	beq.n	801169a <HAL_RCC_GetSysClockFreq+0x9e>
 8011654:	2a03      	cmp	r2, #3
 8011656:	d118      	bne.n	801168a <HAL_RCC_GetSysClockFreq+0x8e>
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
        break;

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8011658:	4816      	ldr	r0, [pc, #88]	; (80116b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 801165a:	68ca      	ldr	r2, [r1, #12]
 801165c:	fbb0 f0f3 	udiv	r0, r0, r3
 8011660:	f3c2 2306 	ubfx	r3, r2, #8, #7
 8011664:	fb00 f003 	mul.w	r0, r0, r3
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
        break;
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8011668:	4b11      	ldr	r3, [pc, #68]	; (80116b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 801166a:	68db      	ldr	r3, [r3, #12]
 801166c:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8011670:	3301      	adds	r3, #1
 8011672:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 8011674:	fbb0 f0f3 	udiv	r0, r0, r3
 8011678:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 801167a:	4810      	ldr	r0, [pc, #64]	; (80116bc <HAL_RCC_GetSysClockFreq+0xc0>)
  }

  return sysclockfreq;
}
 801167c:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 801167e:	f002 0203 	and.w	r2, r2, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8011682:	2a01      	cmp	r2, #1
 8011684:	d0c9      	beq.n	801161a <HAL_RCC_GetSysClockFreq+0x1e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8011686:	2000      	movs	r0, #0
 8011688:	e7d9      	b.n	801163e <HAL_RCC_GetSysClockFreq+0x42>
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801168a:	fbb0 f0f3 	udiv	r0, r0, r3
 801168e:	68cb      	ldr	r3, [r1, #12]
 8011690:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8011694:	fb00 f003 	mul.w	r0, r0, r3
        break;
 8011698:	e7e6      	b.n	8011668 <HAL_RCC_GetSysClockFreq+0x6c>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801169a:	4808      	ldr	r0, [pc, #32]	; (80116bc <HAL_RCC_GetSysClockFreq+0xc0>)
 801169c:	68ca      	ldr	r2, [r1, #12]
 801169e:	fbb0 f0f3 	udiv	r0, r0, r3
 80116a2:	f3c2 2306 	ubfx	r3, r2, #8, #7
 80116a6:	fb00 f003 	mul.w	r0, r0, r3
        break;
 80116aa:	e7dd      	b.n	8011668 <HAL_RCC_GetSysClockFreq+0x6c>
 80116ac:	2000      	movs	r0, #0
  return sysclockfreq;
 80116ae:	4770      	bx	lr
 80116b0:	40021000 	.word	0x40021000
 80116b4:	00b71b00 	.word	0x00b71b00
 80116b8:	08031800 	.word	0x08031800
 80116bc:	00f42400 	.word	0x00f42400

080116c0 <HAL_RCC_GetPCLK1Freq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80116c0:	4a35      	ldr	r2, [pc, #212]	; (8011798 <HAL_RCC_GetPCLK1Freq+0xd8>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80116c2:	b410      	push	{r4}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80116c4:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80116c6:	68d2      	ldr	r2, [r2, #12]
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80116c8:	f013 030c 	ands.w	r3, r3, #12
 80116cc:	d018      	beq.n	8011700 <HAL_RCC_GetPCLK1Freq+0x40>
 80116ce:	2b0c      	cmp	r3, #12
 80116d0:	d047      	beq.n	8011762 <HAL_RCC_GetPCLK1Freq+0xa2>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80116d2:	2b04      	cmp	r3, #4
 80116d4:	d053      	beq.n	801177e <HAL_RCC_GetPCLK1Freq+0xbe>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80116d6:	2b08      	cmp	r3, #8
 80116d8:	4a30      	ldr	r2, [pc, #192]	; (801179c <HAL_RCC_GetPCLK1Freq+0xdc>)
 80116da:	bf18      	it	ne
 80116dc:	2200      	movne	r2, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80116de:	4b2e      	ldr	r3, [pc, #184]	; (8011798 <HAL_RCC_GetPCLK1Freq+0xd8>)
 80116e0:	482f      	ldr	r0, [pc, #188]	; (80117a0 <HAL_RCC_GetPCLK1Freq+0xe0>)
 80116e2:	6899      	ldr	r1, [r3, #8]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80116e4:	689b      	ldr	r3, [r3, #8]
 80116e6:	4c2f      	ldr	r4, [pc, #188]	; (80117a4 <HAL_RCC_GetPCLK1Freq+0xe4>)
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80116e8:	f3c1 1103 	ubfx	r1, r1, #4, #4
 80116ec:	5c40      	ldrb	r0, [r0, r1]
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80116ee:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80116f2:	5ce3      	ldrb	r3, [r4, r3]
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80116f4:	fa22 f000 	lsr.w	r0, r2, r0
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80116f8:	40d8      	lsrs	r0, r3
}
 80116fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80116fe:	4770      	bx	lr
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8011700:	4a25      	ldr	r2, [pc, #148]	; (8011798 <HAL_RCC_GetPCLK1Freq+0xd8>)
 8011702:	6811      	ldr	r1, [r2, #0]
 8011704:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8011706:	bf54      	ite	pl
 8011708:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 801170c:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 801170e:	4926      	ldr	r1, [pc, #152]	; (80117a8 <HAL_RCC_GetPCLK1Freq+0xe8>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8011710:	bf54      	ite	pl
 8011712:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8011716:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 801171a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 801171e:	2b00      	cmp	r3, #0
 8011720:	d0dd      	beq.n	80116de <HAL_RCC_GetPCLK1Freq+0x1e>
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011722:	2b0c      	cmp	r3, #12
 8011724:	d136      	bne.n	8011794 <HAL_RCC_GetPCLK1Freq+0xd4>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8011726:	491c      	ldr	r1, [pc, #112]	; (8011798 <HAL_RCC_GetPCLK1Freq+0xd8>)
 8011728:	68cb      	ldr	r3, [r1, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801172a:	68c8      	ldr	r0, [r1, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 801172c:	f003 0303 	and.w	r3, r3, #3
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8011730:	f3c0 1003 	ubfx	r0, r0, #4, #4
    switch (pllsource)
 8011734:	2b02      	cmp	r3, #2
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8011736:	f100 0001 	add.w	r0, r0, #1
    switch (pllsource)
 801173a:	d022      	beq.n	8011782 <HAL_RCC_GetPCLK1Freq+0xc2>
 801173c:	2b03      	cmp	r3, #3
 801173e:	d116      	bne.n	801176e <HAL_RCC_GetPCLK1Freq+0xae>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8011740:	4b16      	ldr	r3, [pc, #88]	; (801179c <HAL_RCC_GetPCLK1Freq+0xdc>)
 8011742:	68ca      	ldr	r2, [r1, #12]
 8011744:	fbb3 f0f0 	udiv	r0, r3, r0
 8011748:	f3c2 2206 	ubfx	r2, r2, #8, #7
 801174c:	fb00 f302 	mul.w	r3, r0, r2
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8011750:	4a11      	ldr	r2, [pc, #68]	; (8011798 <HAL_RCC_GetPCLK1Freq+0xd8>)
 8011752:	68d0      	ldr	r0, [r2, #12]
 8011754:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8011758:	3001      	adds	r0, #1
 801175a:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 801175c:	fbb3 f2f0 	udiv	r2, r3, r0
 8011760:	e7bd      	b.n	80116de <HAL_RCC_GetPCLK1Freq+0x1e>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8011762:	f002 0203 	and.w	r2, r2, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8011766:	2a01      	cmp	r2, #1
 8011768:	d0ca      	beq.n	8011700 <HAL_RCC_GetPCLK1Freq+0x40>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 801176a:	2200      	movs	r2, #0
 801176c:	e7db      	b.n	8011726 <HAL_RCC_GetPCLK1Freq+0x66>
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801176e:	fbb2 f0f0 	udiv	r0, r2, r0
 8011772:	68ca      	ldr	r2, [r1, #12]
 8011774:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8011778:	fb00 f302 	mul.w	r3, r0, r2
        break;
 801177c:	e7e8      	b.n	8011750 <HAL_RCC_GetPCLK1Freq+0x90>
    sysclockfreq = HSI_VALUE;
 801177e:	4a0b      	ldr	r2, [pc, #44]	; (80117ac <HAL_RCC_GetPCLK1Freq+0xec>)
 8011780:	e7ad      	b.n	80116de <HAL_RCC_GetPCLK1Freq+0x1e>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8011782:	4b0a      	ldr	r3, [pc, #40]	; (80117ac <HAL_RCC_GetPCLK1Freq+0xec>)
 8011784:	68ca      	ldr	r2, [r1, #12]
 8011786:	fbb3 f0f0 	udiv	r0, r3, r0
 801178a:	f3c2 2206 	ubfx	r2, r2, #8, #7
 801178e:	fb00 f302 	mul.w	r3, r0, r2
        break;
 8011792:	e7dd      	b.n	8011750 <HAL_RCC_GetPCLK1Freq+0x90>
 8011794:	2200      	movs	r2, #0
 8011796:	e7a2      	b.n	80116de <HAL_RCC_GetPCLK1Freq+0x1e>
 8011798:	40021000 	.word	0x40021000
 801179c:	00b71b00 	.word	0x00b71b00
 80117a0:	080317e8 	.word	0x080317e8
 80117a4:	080317f8 	.word	0x080317f8
 80117a8:	08031800 	.word	0x08031800
 80117ac:	00f42400 	.word	0x00f42400

080117b0 <HAL_RCC_GetPCLK2Freq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80117b0:	4a35      	ldr	r2, [pc, #212]	; (8011888 <HAL_RCC_GetPCLK2Freq+0xd8>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80117b2:	b410      	push	{r4}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80117b4:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80117b6:	68d2      	ldr	r2, [r2, #12]
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80117b8:	f013 030c 	ands.w	r3, r3, #12
 80117bc:	d018      	beq.n	80117f0 <HAL_RCC_GetPCLK2Freq+0x40>
 80117be:	2b0c      	cmp	r3, #12
 80117c0:	d047      	beq.n	8011852 <HAL_RCC_GetPCLK2Freq+0xa2>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80117c2:	2b04      	cmp	r3, #4
 80117c4:	d053      	beq.n	801186e <HAL_RCC_GetPCLK2Freq+0xbe>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80117c6:	2b08      	cmp	r3, #8
 80117c8:	4a30      	ldr	r2, [pc, #192]	; (801188c <HAL_RCC_GetPCLK2Freq+0xdc>)
 80117ca:	bf18      	it	ne
 80117cc:	2200      	movne	r2, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80117ce:	4b2e      	ldr	r3, [pc, #184]	; (8011888 <HAL_RCC_GetPCLK2Freq+0xd8>)
 80117d0:	482f      	ldr	r0, [pc, #188]	; (8011890 <HAL_RCC_GetPCLK2Freq+0xe0>)
 80117d2:	6899      	ldr	r1, [r3, #8]
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80117d4:	689b      	ldr	r3, [r3, #8]
 80117d6:	4c2f      	ldr	r4, [pc, #188]	; (8011894 <HAL_RCC_GetPCLK2Freq+0xe4>)
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80117d8:	f3c1 1103 	ubfx	r1, r1, #4, #4
 80117dc:	5c40      	ldrb	r0, [r0, r1]
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80117de:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80117e2:	5ce3      	ldrb	r3, [r4, r3]
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80117e4:	fa22 f000 	lsr.w	r0, r2, r0
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80117e8:	40d8      	lsrs	r0, r3
}
 80117ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80117ee:	4770      	bx	lr
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80117f0:	4a25      	ldr	r2, [pc, #148]	; (8011888 <HAL_RCC_GetPCLK2Freq+0xd8>)
 80117f2:	6811      	ldr	r1, [r2, #0]
 80117f4:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80117f6:	bf54      	ite	pl
 80117f8:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80117fc:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 80117fe:	4926      	ldr	r1, [pc, #152]	; (8011898 <HAL_RCC_GetPCLK2Freq+0xe8>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8011800:	bf54      	ite	pl
 8011802:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8011806:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 801180a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 801180e:	2b00      	cmp	r3, #0
 8011810:	d0dd      	beq.n	80117ce <HAL_RCC_GetPCLK2Freq+0x1e>
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011812:	2b0c      	cmp	r3, #12
 8011814:	d136      	bne.n	8011884 <HAL_RCC_GetPCLK2Freq+0xd4>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8011816:	491c      	ldr	r1, [pc, #112]	; (8011888 <HAL_RCC_GetPCLK2Freq+0xd8>)
 8011818:	68cb      	ldr	r3, [r1, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801181a:	68c8      	ldr	r0, [r1, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 801181c:	f003 0303 	and.w	r3, r3, #3
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8011820:	f3c0 1003 	ubfx	r0, r0, #4, #4
    switch (pllsource)
 8011824:	2b02      	cmp	r3, #2
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8011826:	f100 0001 	add.w	r0, r0, #1
    switch (pllsource)
 801182a:	d022      	beq.n	8011872 <HAL_RCC_GetPCLK2Freq+0xc2>
 801182c:	2b03      	cmp	r3, #3
 801182e:	d116      	bne.n	801185e <HAL_RCC_GetPCLK2Freq+0xae>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8011830:	4b16      	ldr	r3, [pc, #88]	; (801188c <HAL_RCC_GetPCLK2Freq+0xdc>)
 8011832:	68ca      	ldr	r2, [r1, #12]
 8011834:	fbb3 f0f0 	udiv	r0, r3, r0
 8011838:	f3c2 2206 	ubfx	r2, r2, #8, #7
 801183c:	fb00 f302 	mul.w	r3, r0, r2
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8011840:	4a11      	ldr	r2, [pc, #68]	; (8011888 <HAL_RCC_GetPCLK2Freq+0xd8>)
 8011842:	68d0      	ldr	r0, [r2, #12]
 8011844:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8011848:	3001      	adds	r0, #1
 801184a:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 801184c:	fbb3 f2f0 	udiv	r2, r3, r0
 8011850:	e7bd      	b.n	80117ce <HAL_RCC_GetPCLK2Freq+0x1e>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8011852:	f002 0203 	and.w	r2, r2, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8011856:	2a01      	cmp	r2, #1
 8011858:	d0ca      	beq.n	80117f0 <HAL_RCC_GetPCLK2Freq+0x40>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 801185a:	2200      	movs	r2, #0
 801185c:	e7db      	b.n	8011816 <HAL_RCC_GetPCLK2Freq+0x66>
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801185e:	fbb2 f0f0 	udiv	r0, r2, r0
 8011862:	68ca      	ldr	r2, [r1, #12]
 8011864:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8011868:	fb00 f302 	mul.w	r3, r0, r2
        break;
 801186c:	e7e8      	b.n	8011840 <HAL_RCC_GetPCLK2Freq+0x90>
    sysclockfreq = HSI_VALUE;
 801186e:	4a0b      	ldr	r2, [pc, #44]	; (801189c <HAL_RCC_GetPCLK2Freq+0xec>)
 8011870:	e7ad      	b.n	80117ce <HAL_RCC_GetPCLK2Freq+0x1e>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8011872:	4b0a      	ldr	r3, [pc, #40]	; (801189c <HAL_RCC_GetPCLK2Freq+0xec>)
 8011874:	68ca      	ldr	r2, [r1, #12]
 8011876:	fbb3 f0f0 	udiv	r0, r3, r0
 801187a:	f3c2 2206 	ubfx	r2, r2, #8, #7
 801187e:	fb00 f302 	mul.w	r3, r0, r2
        break;
 8011882:	e7dd      	b.n	8011840 <HAL_RCC_GetPCLK2Freq+0x90>
 8011884:	2200      	movs	r2, #0
 8011886:	e7a2      	b.n	80117ce <HAL_RCC_GetPCLK2Freq+0x1e>
 8011888:	40021000 	.word	0x40021000
 801188c:	00b71b00 	.word	0x00b71b00
 8011890:	080317e8 	.word	0x080317e8
 8011894:	080317f8 	.word	0x080317f8
 8011898:	08031800 	.word	0x08031800
 801189c:	00f42400 	.word	0x00f42400

080118a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 80118a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118a2:	4604      	mov	r4, r0
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80118a4:	6800      	ldr	r0, [r0, #0]
{
 80118a6:	460e      	mov	r6, r1
  switch (pPllSai1->PLLSAI1Source)
 80118a8:	2802      	cmp	r0, #2
 80118aa:	d005      	beq.n	80118b8 <RCCEx_PLLSAI1_Config+0x18>
 80118ac:	2803      	cmp	r0, #3
 80118ae:	d04e      	beq.n	801194e <RCCEx_PLLSAI1_Config+0xae>
 80118b0:	2801      	cmp	r0, #1
 80118b2:	d047      	beq.n	8011944 <RCCEx_PLLSAI1_Config+0xa4>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
      {
        status = HAL_ERROR;
 80118b4:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 80118b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80118b8:	4b3f      	ldr	r3, [pc, #252]	; (80119b8 <RCCEx_PLLSAI1_Config+0x118>)
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	055d      	lsls	r5, r3, #21
 80118be:	d5f9      	bpl.n	80118b4 <RCCEx_PLLSAI1_Config+0x14>
    __HAL_RCC_PLLSAI1_DISABLE();
 80118c0:	4b3d      	ldr	r3, [pc, #244]	; (80119b8 <RCCEx_PLLSAI1_Config+0x118>)
 80118c2:	681a      	ldr	r2, [r3, #0]
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80118c4:	461f      	mov	r7, r3
    __HAL_RCC_PLLSAI1_DISABLE();
 80118c6:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80118ca:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80118cc:	f7ff fa2c 	bl	8010d28 <HAL_GetTick>
 80118d0:	4605      	mov	r5, r0
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80118d2:	e004      	b.n	80118de <RCCEx_PLLSAI1_Config+0x3e>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80118d4:	f7ff fa28 	bl	8010d28 <HAL_GetTick>
 80118d8:	1b43      	subs	r3, r0, r5
 80118da:	2b02      	cmp	r3, #2
 80118dc:	d84f      	bhi.n	801197e <RCCEx_PLLSAI1_Config+0xde>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80118de:	683b      	ldr	r3, [r7, #0]
 80118e0:	0119      	lsls	r1, r3, #4
 80118e2:	d4f7      	bmi.n	80118d4 <RCCEx_PLLSAI1_Config+0x34>
      if (Divider == DIVIDER_P_UPDATE)
 80118e4:	2e00      	cmp	r6, #0
 80118e6:	d038      	beq.n	801195a <RCCEx_PLLSAI1_Config+0xba>
      else if (Divider == DIVIDER_Q_UPDATE)
 80118e8:	2e01      	cmp	r6, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80118ea:	4833      	ldr	r0, [pc, #204]	; (80119b8 <RCCEx_PLLSAI1_Config+0x118>)
      else if (Divider == DIVIDER_Q_UPDATE)
 80118ec:	d050      	beq.n	8011990 <RCCEx_PLLSAI1_Config+0xf0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80118ee:	6901      	ldr	r1, [r0, #16]
 80118f0:	4b32      	ldr	r3, [pc, #200]	; (80119bc <RCCEx_PLLSAI1_Config+0x11c>)
 80118f2:	6822      	ldr	r2, [r4, #0]
 80118f4:	400b      	ands	r3, r1
 80118f6:	4313      	orrs	r3, r2
 80118f8:	6962      	ldr	r2, [r4, #20]
 80118fa:	e9d4 1501 	ldrd	r1, r5, [r4, #4]
 80118fe:	0852      	lsrs	r2, r2, #1
 8011900:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8011904:	3901      	subs	r1, #1
 8011906:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 801190a:	3a01      	subs	r2, #1
 801190c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8011910:	6103      	str	r3, [r0, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8011912:	4b29      	ldr	r3, [pc, #164]	; (80119b8 <RCCEx_PLLSAI1_Config+0x118>)
 8011914:	681a      	ldr	r2, [r3, #0]
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8011916:	461e      	mov	r6, r3
      __HAL_RCC_PLLSAI1_ENABLE();
 8011918:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801191c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 801191e:	f7ff fa03 	bl	8010d28 <HAL_GetTick>
 8011922:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8011924:	e004      	b.n	8011930 <RCCEx_PLLSAI1_Config+0x90>
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8011926:	f7ff f9ff 	bl	8010d28 <HAL_GetTick>
 801192a:	1b43      	subs	r3, r0, r5
 801192c:	2b02      	cmp	r3, #2
 801192e:	d82b      	bhi.n	8011988 <RCCEx_PLLSAI1_Config+0xe8>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8011930:	6833      	ldr	r3, [r6, #0]
 8011932:	011b      	lsls	r3, r3, #4
 8011934:	d5f7      	bpl.n	8011926 <RCCEx_PLLSAI1_Config+0x86>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8011936:	4a20      	ldr	r2, [pc, #128]	; (80119b8 <RCCEx_PLLSAI1_Config+0x118>)
 8011938:	69a1      	ldr	r1, [r4, #24]
 801193a:	6913      	ldr	r3, [r2, #16]
 801193c:	2000      	movs	r0, #0
 801193e:	430b      	orrs	r3, r1
 8011940:	6113      	str	r3, [r2, #16]
}
 8011942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8011944:	4a1c      	ldr	r2, [pc, #112]	; (80119b8 <RCCEx_PLLSAI1_Config+0x118>)
 8011946:	6812      	ldr	r2, [r2, #0]
 8011948:	0797      	lsls	r7, r2, #30
 801194a:	d4b9      	bmi.n	80118c0 <RCCEx_PLLSAI1_Config+0x20>
}
 801194c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 801194e:	4b1a      	ldr	r3, [pc, #104]	; (80119b8 <RCCEx_PLLSAI1_Config+0x118>)
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	f413 2fc0 	tst.w	r3, #393216	; 0x60000
 8011956:	d0ad      	beq.n	80118b4 <RCCEx_PLLSAI1_Config+0x14>
 8011958:	e7b2      	b.n	80118c0 <RCCEx_PLLSAI1_Config+0x20>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801195a:	4917      	ldr	r1, [pc, #92]	; (80119b8 <RCCEx_PLLSAI1_Config+0x118>)
 801195c:	4b18      	ldr	r3, [pc, #96]	; (80119c0 <RCCEx_PLLSAI1_Config+0x120>)
 801195e:	6908      	ldr	r0, [r1, #16]
 8011960:	6822      	ldr	r2, [r4, #0]
 8011962:	68a5      	ldr	r5, [r4, #8]
 8011964:	4003      	ands	r3, r0
 8011966:	4313      	orrs	r3, r2
 8011968:	68e0      	ldr	r0, [r4, #12]
 801196a:	6862      	ldr	r2, [r4, #4]
 801196c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8011970:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8011974:	3a01      	subs	r2, #1
 8011976:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 801197a:	610b      	str	r3, [r1, #16]
 801197c:	e7c9      	b.n	8011912 <RCCEx_PLLSAI1_Config+0x72>
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	0118      	lsls	r0, r3, #4
 8011982:	d5af      	bpl.n	80118e4 <RCCEx_PLLSAI1_Config+0x44>
          status = HAL_TIMEOUT;
 8011984:	2003      	movs	r0, #3
}
 8011986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8011988:	6833      	ldr	r3, [r6, #0]
 801198a:	011a      	lsls	r2, r3, #4
 801198c:	d5fa      	bpl.n	8011984 <RCCEx_PLLSAI1_Config+0xe4>
 801198e:	e7d2      	b.n	8011936 <RCCEx_PLLSAI1_Config+0x96>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8011990:	6901      	ldr	r1, [r0, #16]
 8011992:	4b0c      	ldr	r3, [pc, #48]	; (80119c4 <RCCEx_PLLSAI1_Config+0x124>)
 8011994:	6822      	ldr	r2, [r4, #0]
 8011996:	400b      	ands	r3, r1
 8011998:	4313      	orrs	r3, r2
 801199a:	6922      	ldr	r2, [r4, #16]
 801199c:	e9d4 1501 	ldrd	r1, r5, [r4, #4]
 80119a0:	0852      	lsrs	r2, r2, #1
 80119a2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80119a6:	3901      	subs	r1, #1
 80119a8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80119ac:	3a01      	subs	r2, #1
 80119ae:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80119b2:	6103      	str	r3, [r0, #16]
 80119b4:	e7ad      	b.n	8011912 <RCCEx_PLLSAI1_Config+0x72>
 80119b6:	bf00      	nop
 80119b8:	40021000 	.word	0x40021000
 80119bc:	f9ff800c 	.word	0xf9ff800c
 80119c0:	07ff800c 	.word	0x07ff800c
 80119c4:	ff9f800c 	.word	0xff9f800c

080119c8 <RCCEx_PLLSAI2_Config.constprop.0>:
  *
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
 80119c8:	b570      	push	{r4, r5, r6, lr}
 80119ca:	4604      	mov	r4, r0
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 80119cc:	6800      	ldr	r0, [r0, #0]
 80119ce:	2802      	cmp	r0, #2
 80119d0:	d005      	beq.n	80119de <RCCEx_PLLSAI2_Config.constprop.0+0x16>
 80119d2:	2803      	cmp	r0, #3
 80119d4:	d047      	beq.n	8011a66 <RCCEx_PLLSAI2_Config.constprop.0+0x9e>
 80119d6:	2801      	cmp	r0, #1
 80119d8:	d040      	beq.n	8011a5c <RCCEx_PLLSAI2_Config.constprop.0+0x94>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
      {
        status = HAL_ERROR;
 80119da:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 80119dc:	bd70      	pop	{r4, r5, r6, pc}
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80119de:	4b29      	ldr	r3, [pc, #164]	; (8011a84 <RCCEx_PLLSAI2_Config.constprop.0+0xbc>)
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	055d      	lsls	r5, r3, #21
 80119e4:	d5f9      	bpl.n	80119da <RCCEx_PLLSAI2_Config.constprop.0+0x12>
    __HAL_RCC_PLLSAI2_DISABLE();
 80119e6:	4b27      	ldr	r3, [pc, #156]	; (8011a84 <RCCEx_PLLSAI2_Config.constprop.0+0xbc>)
 80119e8:	681a      	ldr	r2, [r3, #0]
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80119ea:	461e      	mov	r6, r3
    __HAL_RCC_PLLSAI2_DISABLE();
 80119ec:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80119f0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80119f2:	f7ff f999 	bl	8010d28 <HAL_GetTick>
 80119f6:	4605      	mov	r5, r0
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80119f8:	e004      	b.n	8011a04 <RCCEx_PLLSAI2_Config.constprop.0+0x3c>
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80119fa:	f7ff f995 	bl	8010d28 <HAL_GetTick>
 80119fe:	1b43      	subs	r3, r0, r5
 8011a00:	2b02      	cmp	r3, #2
 8011a02:	d836      	bhi.n	8011a72 <RCCEx_PLLSAI2_Config.constprop.0+0xaa>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8011a04:	6833      	ldr	r3, [r6, #0]
 8011a06:	0099      	lsls	r1, r3, #2
 8011a08:	d4f7      	bmi.n	80119fa <RCCEx_PLLSAI2_Config.constprop.0+0x32>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8011a0a:	4a1e      	ldr	r2, [pc, #120]	; (8011a84 <RCCEx_PLLSAI2_Config.constprop.0+0xbc>)
 8011a0c:	4b1e      	ldr	r3, [pc, #120]	; (8011a88 <RCCEx_PLLSAI2_Config.constprop.0+0xc0>)
 8011a0e:	6950      	ldr	r0, [r2, #20]
 8011a10:	6821      	ldr	r1, [r4, #0]
 8011a12:	68a5      	ldr	r5, [r4, #8]
 8011a14:	4003      	ands	r3, r0
 8011a16:	430b      	orrs	r3, r1
 8011a18:	68e0      	ldr	r0, [r4, #12]
 8011a1a:	6861      	ldr	r1, [r4, #4]
 8011a1c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8011a20:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8011a24:	3901      	subs	r1, #1
 8011a26:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8011a2a:	6153      	str	r3, [r2, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8011a2c:	6813      	ldr	r3, [r2, #0]
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8011a2e:	4616      	mov	r6, r2
      __HAL_RCC_PLLSAI2_ENABLE();
 8011a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011a34:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8011a36:	f7ff f977 	bl	8010d28 <HAL_GetTick>
 8011a3a:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8011a3c:	e004      	b.n	8011a48 <RCCEx_PLLSAI2_Config.constprop.0+0x80>
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8011a3e:	f7ff f973 	bl	8010d28 <HAL_GetTick>
 8011a42:	1b43      	subs	r3, r0, r5
 8011a44:	2b02      	cmp	r3, #2
 8011a46:	d819      	bhi.n	8011a7c <RCCEx_PLLSAI2_Config.constprop.0+0xb4>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8011a48:	6833      	ldr	r3, [r6, #0]
 8011a4a:	009b      	lsls	r3, r3, #2
 8011a4c:	d5f7      	bpl.n	8011a3e <RCCEx_PLLSAI2_Config.constprop.0+0x76>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8011a4e:	4a0d      	ldr	r2, [pc, #52]	; (8011a84 <RCCEx_PLLSAI2_Config.constprop.0+0xbc>)
 8011a50:	6921      	ldr	r1, [r4, #16]
 8011a52:	6953      	ldr	r3, [r2, #20]
 8011a54:	2000      	movs	r0, #0
 8011a56:	430b      	orrs	r3, r1
 8011a58:	6153      	str	r3, [r2, #20]
}
 8011a5a:	bd70      	pop	{r4, r5, r6, pc}
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8011a5c:	4a09      	ldr	r2, [pc, #36]	; (8011a84 <RCCEx_PLLSAI2_Config.constprop.0+0xbc>)
 8011a5e:	6812      	ldr	r2, [r2, #0]
 8011a60:	0796      	lsls	r6, r2, #30
 8011a62:	d4c0      	bmi.n	80119e6 <RCCEx_PLLSAI2_Config.constprop.0+0x1e>
}
 8011a64:	bd70      	pop	{r4, r5, r6, pc}
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8011a66:	4b07      	ldr	r3, [pc, #28]	; (8011a84 <RCCEx_PLLSAI2_Config.constprop.0+0xbc>)
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	f413 2fc0 	tst.w	r3, #393216	; 0x60000
 8011a6e:	d0b4      	beq.n	80119da <RCCEx_PLLSAI2_Config.constprop.0+0x12>
 8011a70:	e7b9      	b.n	80119e6 <RCCEx_PLLSAI2_Config.constprop.0+0x1e>
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8011a72:	6833      	ldr	r3, [r6, #0]
 8011a74:	0098      	lsls	r0, r3, #2
 8011a76:	d5c8      	bpl.n	8011a0a <RCCEx_PLLSAI2_Config.constprop.0+0x42>
          status = HAL_TIMEOUT;
 8011a78:	2003      	movs	r0, #3
}
 8011a7a:	bd70      	pop	{r4, r5, r6, pc}
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8011a7c:	6833      	ldr	r3, [r6, #0]
 8011a7e:	009a      	lsls	r2, r3, #2
 8011a80:	d5fa      	bpl.n	8011a78 <RCCEx_PLLSAI2_Config.constprop.0+0xb0>
 8011a82:	e7e4      	b.n	8011a4e <RCCEx_PLLSAI2_Config.constprop.0+0x86>
 8011a84:	40021000 	.word	0x40021000
 8011a88:	07ff800c 	.word	0x07ff800c

08011a8c <HAL_RCCEx_PeriphCLKConfig>:
{
 8011a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8011a90:	6803      	ldr	r3, [r0, #0]
{
 8011a92:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8011a94:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
{
 8011a98:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8011a9a:	d022      	beq.n	8011ae2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch (PeriphClkInit->Sai1ClockSelection)
 8011a9c:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8011a9e:	2940      	cmp	r1, #64	; 0x40
 8011aa0:	f000 8249 	beq.w	8011f36 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8011aa4:	d80f      	bhi.n	8011ac6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8011aa6:	2900      	cmp	r1, #0
 8011aa8:	f000 8203 	beq.w	8011eb2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8011aac:	2920      	cmp	r1, #32
 8011aae:	f040 8279 	bne.w	8011fa4 <HAL_RCCEx_PeriphCLKConfig+0x518>
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8011ab2:	3020      	adds	r0, #32
 8011ab4:	f7ff ff88 	bl	80119c8 <RCCEx_PLLSAI2_Config.constprop.0>
 8011ab8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8011aba:	2d00      	cmp	r5, #0
 8011abc:	f040 8239 	bne.w	8011f32 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8011ac0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8011ac2:	6823      	ldr	r3, [r4, #0]
 8011ac4:	e004      	b.n	8011ad0 <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch (PeriphClkInit->Sai1ClockSelection)
 8011ac6:	2960      	cmp	r1, #96	; 0x60
 8011ac8:	d002      	beq.n	8011ad0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8011aca:	2980      	cmp	r1, #128	; 0x80
 8011acc:	f040 826a 	bne.w	8011fa4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8011ad0:	2500      	movs	r5, #0
 8011ad2:	48b9      	ldr	r0, [pc, #740]	; (8011db8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8011ad4:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 8011ad8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8011adc:	4311      	orrs	r1, r2
 8011ade:	f8c0 109c 	str.w	r1, [r0, #156]	; 0x9c
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8011ae2:	04d9      	lsls	r1, r3, #19
 8011ae4:	f140 8154 	bpl.w	8011d90 <HAL_RCCEx_PeriphCLKConfig+0x304>
    switch (PeriphClkInit->Sai2ClockSelection)
 8011ae8:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8011aea:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8011aee:	f000 8228 	beq.w	8011f42 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8011af2:	f200 813f 	bhi.w	8011d74 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8011af6:	2900      	cmp	r1, #0
 8011af8:	f000 81d5 	beq.w	8011ea6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8011afc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8011b00:	f040 824d 	bne.w	8011f9e <HAL_RCCEx_PeriphCLKConfig+0x512>
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8011b04:	f104 0020 	add.w	r0, r4, #32
 8011b08:	f7ff ff5e 	bl	80119c8 <RCCEx_PLLSAI2_Config.constprop.0>
 8011b0c:	4680      	mov	r8, r0
        break;
 8011b0e:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 8011b10:	f1b8 0f00 	cmp.w	r8, #0
 8011b14:	f040 813a 	bne.w	8011d8c <HAL_RCCEx_PeriphCLKConfig+0x300>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8011b18:	49a7      	ldr	r1, [pc, #668]	; (8011db8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8011b1a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8011b1c:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8011b20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8011b24:	4302      	orrs	r2, r0
 8011b26:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8011b2a:	039a      	lsls	r2, r3, #14
 8011b2c:	f100 8134 	bmi.w	8011d98 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8011b30:	07df      	lsls	r7, r3, #31
 8011b32:	d508      	bpl.n	8011b46 <HAL_RCCEx_PeriphCLKConfig+0xba>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011b34:	49a0      	ldr	r1, [pc, #640]	; (8011db8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8011b36:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8011b38:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8011b3c:	f022 0203 	bic.w	r2, r2, #3
 8011b40:	4302      	orrs	r2, r0
 8011b42:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8011b46:	079e      	lsls	r6, r3, #30
 8011b48:	d508      	bpl.n	8011b5c <HAL_RCCEx_PeriphCLKConfig+0xd0>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8011b4a:	499b      	ldr	r1, [pc, #620]	; (8011db8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8011b4c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8011b4e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8011b52:	f022 020c 	bic.w	r2, r2, #12
 8011b56:	4302      	orrs	r2, r0
 8011b58:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8011b5c:	0758      	lsls	r0, r3, #29
 8011b5e:	d508      	bpl.n	8011b72 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8011b60:	4995      	ldr	r1, [pc, #596]	; (8011db8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8011b62:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8011b64:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8011b68:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8011b6c:	4302      	orrs	r2, r0
 8011b6e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8011b72:	0719      	lsls	r1, r3, #28
 8011b74:	d508      	bpl.n	8011b88 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8011b76:	4990      	ldr	r1, [pc, #576]	; (8011db8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8011b78:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8011b7a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8011b7e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8011b82:	4302      	orrs	r2, r0
 8011b84:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8011b88:	06da      	lsls	r2, r3, #27
 8011b8a:	d508      	bpl.n	8011b9e <HAL_RCCEx_PeriphCLKConfig+0x112>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8011b8c:	498a      	ldr	r1, [pc, #552]	; (8011db8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8011b8e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8011b90:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8011b94:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8011b98:	4302      	orrs	r2, r0
 8011b9a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8011b9e:	069f      	lsls	r7, r3, #26
 8011ba0:	d508      	bpl.n	8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x128>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8011ba2:	4985      	ldr	r1, [pc, #532]	; (8011db8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8011ba4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8011ba6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8011baa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8011bae:	4302      	orrs	r2, r0
 8011bb0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8011bb4:	059e      	lsls	r6, r3, #22
 8011bb6:	d508      	bpl.n	8011bca <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8011bb8:	497f      	ldr	r1, [pc, #508]	; (8011db8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8011bba:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8011bbc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8011bc0:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8011bc4:	4302      	orrs	r2, r0
 8011bc6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8011bca:	0558      	lsls	r0, r3, #21
 8011bcc:	d508      	bpl.n	8011be0 <HAL_RCCEx_PeriphCLKConfig+0x154>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8011bce:	497a      	ldr	r1, [pc, #488]	; (8011db8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8011bd0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8011bd2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8011bd6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8011bda:	4302      	orrs	r2, r0
 8011bdc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8011be0:	0259      	lsls	r1, r3, #9
 8011be2:	d508      	bpl.n	8011bf6 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8011be4:	4974      	ldr	r1, [pc, #464]	; (8011db8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8011be6:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8011be8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8011bec:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8011bf0:	4302      	orrs	r2, r0
 8011bf2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8011bf6:	019a      	lsls	r2, r3, #6
 8011bf8:	d50c      	bpl.n	8011c14 <HAL_RCCEx_PeriphCLKConfig+0x188>
    switch (PeriphClkInit->FdcanClockSelection)
 8011bfa:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8011bfc:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8011c00:	f000 8181 	beq.w	8011f06 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8011c04:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8011c08:	f000 8134 	beq.w	8011e74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8011c0c:	2a00      	cmp	r2, #0
 8011c0e:	f000 8137 	beq.w	8011e80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8011c12:	2501      	movs	r5, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011c14:	065f      	lsls	r7, r3, #25
 8011c16:	d508      	bpl.n	8011c2a <HAL_RCCEx_PeriphCLKConfig+0x19e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8011c18:	4967      	ldr	r1, [pc, #412]	; (8011db8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8011c1a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8011c1c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8011c20:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8011c24:	4302      	orrs	r2, r0
 8011c26:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8011c2a:	061e      	lsls	r6, r3, #24
 8011c2c:	d508      	bpl.n	8011c40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8011c2e:	4962      	ldr	r1, [pc, #392]	; (8011db8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8011c30:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8011c32:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8011c36:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8011c3a:	4302      	orrs	r2, r0
 8011c3c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8011c40:	05d8      	lsls	r0, r3, #23
 8011c42:	d508      	bpl.n	8011c56 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8011c44:	495c      	ldr	r1, [pc, #368]	; (8011db8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8011c46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011c48:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8011c4c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8011c50:	4302      	orrs	r2, r0
 8011c52:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8011c56:	02d9      	lsls	r1, r3, #11
 8011c58:	d508      	bpl.n	8011c6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8011c5a:	4957      	ldr	r1, [pc, #348]	; (8011db8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8011c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c5e:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8011c62:	f022 0203 	bic.w	r2, r2, #3
 8011c66:	4302      	orrs	r2, r0
 8011c68:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8011c6c:	049a      	lsls	r2, r3, #18
 8011c6e:	d511      	bpl.n	8011c94 <HAL_RCCEx_PeriphCLKConfig+0x208>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8011c70:	4951      	ldr	r1, [pc, #324]	; (8011db8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8011c72:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8011c74:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8011c78:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8011c7c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8011c80:	ea42 0200 	orr.w	r2, r2, r0
 8011c84:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8011c88:	f000 811f 	beq.w	8011eca <HAL_RCCEx_PeriphCLKConfig+0x43e>
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8011c8c:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8011c90:	f000 815e 	beq.w	8011f50 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8011c94:	031f      	lsls	r7, r3, #12
 8011c96:	d51b      	bpl.n	8011cd0 <HAL_RCCEx_PeriphCLKConfig+0x244>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8011c98:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8011c9a:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8011c9e:	f000 8121 	beq.w	8011ee4 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8011ca2:	4945      	ldr	r1, [pc, #276]	; (8011db8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8011ca4:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8011ca8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8011cac:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8011cb0:	ea42 0200 	orr.w	r2, r2, r0
 8011cb4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 8011cb8:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8011cbc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8011cc0:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8011cc4:	f000 8154 	beq.w	8011f70 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8011cc8:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 8011ccc:	f000 812c 	beq.w	8011f28 <HAL_RCCEx_PeriphCLKConfig+0x49c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8011cd0:	035e      	lsls	r6, r3, #13
 8011cd2:	d511      	bpl.n	8011cf8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8011cd4:	4938      	ldr	r1, [pc, #224]	; (8011db8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8011cd6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8011cd8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8011cdc:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8011ce0:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8011ce4:	ea42 0200 	orr.w	r2, r2, r0
 8011ce8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8011cec:	f000 8106 	beq.w	8011efc <HAL_RCCEx_PeriphCLKConfig+0x470>
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8011cf0:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8011cf4:	f000 8134 	beq.w	8011f60 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8011cf8:	0458      	lsls	r0, r3, #17
 8011cfa:	d50e      	bpl.n	8011d1a <HAL_RCCEx_PeriphCLKConfig+0x28e>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8011cfc:	482e      	ldr	r0, [pc, #184]	; (8011db8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8011cfe:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8011d02:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8011d06:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8011d0a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8011d0e:	ea42 0201 	orr.w	r2, r2, r1
 8011d12:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8011d16:	f000 80ff 	beq.w	8011f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8011d1a:	03d9      	lsls	r1, r3, #15
 8011d1c:	d509      	bpl.n	8011d32 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8011d1e:	4926      	ldr	r1, [pc, #152]	; (8011db8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8011d20:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8011d24:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8011d28:	f022 0204 	bic.w	r2, r2, #4
 8011d2c:	4302      	orrs	r2, r0
 8011d2e:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8011d32:	029a      	lsls	r2, r3, #10
 8011d34:	d509      	bpl.n	8011d4a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8011d36:	4920      	ldr	r1, [pc, #128]	; (8011db8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8011d38:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8011d3c:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8011d40:	f022 0218 	bic.w	r2, r2, #24
 8011d44:	4302      	orrs	r2, r0
 8011d46:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8011d4a:	01db      	lsls	r3, r3, #7
 8011d4c:	d50e      	bpl.n	8011d6c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8011d4e:	4a1a      	ldr	r2, [pc, #104]	; (8011db8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8011d50:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8011d54:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8011d58:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8011d5c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8011d60:	ea43 0301 	orr.w	r3, r3, r1
 8011d64:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8011d68:	f000 80b4 	beq.w	8011ed4 <HAL_RCCEx_PeriphCLKConfig+0x448>
}
 8011d6c:	4628      	mov	r0, r5
 8011d6e:	b002      	add	sp, #8
 8011d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch (PeriphClkInit->Sai2ClockSelection)
 8011d74:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8011d78:	d003      	beq.n	8011d82 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8011d7a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8011d7e:	f040 810e 	bne.w	8011f9e <HAL_RCCEx_PeriphCLKConfig+0x512>
 8011d82:	46a8      	mov	r8, r5
    if (ret == HAL_OK)
 8011d84:	f1b8 0f00 	cmp.w	r8, #0
 8011d88:	f43f aec6 	beq.w	8011b18 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8011d8c:	4645      	mov	r5, r8
 8011d8e:	e000      	b.n	8011d92 <HAL_RCCEx_PeriphCLKConfig+0x306>
 8011d90:	46a8      	mov	r8, r5
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8011d92:	039a      	lsls	r2, r3, #14
 8011d94:	f57f aecc 	bpl.w	8011b30 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011d98:	4b07      	ldr	r3, [pc, #28]	; (8011db8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8011d9a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011d9c:	00d7      	lsls	r7, r2, #3
 8011d9e:	d55d      	bpl.n	8011e5c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    FlagStatus       pwrclkchanged = RESET;
 8011da0:	f04f 0900 	mov.w	r9, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011da4:	4b05      	ldr	r3, [pc, #20]	; (8011dbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8011da6:	681a      	ldr	r2, [r3, #0]
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011da8:	461f      	mov	r7, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011daa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011dae:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8011db0:	f7fe ffba 	bl	8010d28 <HAL_GetTick>
 8011db4:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011db6:	e008      	b.n	8011dca <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8011db8:	40021000 	.word	0x40021000
 8011dbc:	40007000 	.word	0x40007000
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011dc0:	f7fe ffb2 	bl	8010d28 <HAL_GetTick>
 8011dc4:	1b83      	subs	r3, r0, r6
 8011dc6:	2b02      	cmp	r3, #2
 8011dc8:	d867      	bhi.n	8011e9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011dca:	683b      	ldr	r3, [r7, #0]
 8011dcc:	05d8      	lsls	r0, r3, #23
 8011dce:	d5f7      	bpl.n	8011dc0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    if (ret == HAL_OK)
 8011dd0:	f1b8 0f00 	cmp.w	r8, #0
 8011dd4:	d175      	bne.n	8011ec2 <HAL_RCCEx_PeriphCLKConfig+0x436>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8011dd6:	4e74      	ldr	r6, [pc, #464]	; (8011fa8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8011dd8:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8011ddc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8011de0:	d028      	beq.n	8011e34 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8011de2:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8011de6:	429a      	cmp	r2, r3
 8011de8:	d026      	beq.n	8011e38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8011dea:	f8d6 1090 	ldr.w	r1, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8011dee:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8011df2:	f421 7040 	bic.w	r0, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8011df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011dfa:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8011dfe:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8011e02:	07c9      	lsls	r1, r1, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8011e04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011e08:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8011e0c:	f8c6 0090 	str.w	r0, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8011e10:	f140 80c3 	bpl.w	8011f9a <HAL_RCCEx_PeriphCLKConfig+0x50e>
        tickstart = HAL_GetTick();
 8011e14:	f7fe ff88 	bl	8010d28 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011e18:	f241 3a88 	movw	sl, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8011e1c:	4607      	mov	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011e1e:	e005      	b.n	8011e2c <HAL_RCCEx_PeriphCLKConfig+0x3a0>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011e20:	f7fe ff82 	bl	8010d28 <HAL_GetTick>
 8011e24:	1bc0      	subs	r0, r0, r7
 8011e26:	4550      	cmp	r0, sl
 8011e28:	f200 80b2 	bhi.w	8011f90 <HAL_RCCEx_PeriphCLKConfig+0x504>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011e2c:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8011e30:	079b      	lsls	r3, r3, #30
 8011e32:	d5f5      	bpl.n	8011e20 <HAL_RCCEx_PeriphCLKConfig+0x394>
 8011e34:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8011e38:	495b      	ldr	r1, [pc, #364]	; (8011fa8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8011e3a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8011e3e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8011e42:	4313      	orrs	r3, r2
 8011e44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
    if (pwrclkchanged == SET)
 8011e48:	f1b9 0f00 	cmp.w	r9, #0
 8011e4c:	d004      	beq.n	8011e58 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8011e4e:	4a56      	ldr	r2, [pc, #344]	; (8011fa8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8011e50:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8011e52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011e56:	6593      	str	r3, [r2, #88]	; 0x58
 8011e58:	6823      	ldr	r3, [r4, #0]
 8011e5a:	e669      	b.n	8011b30 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8011e5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
      pwrclkchanged = SET;
 8011e5e:	f04f 0901 	mov.w	r9, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8011e62:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8011e66:	659a      	str	r2, [r3, #88]	; 0x58
 8011e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011e6e:	9301      	str	r3, [sp, #4]
 8011e70:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8011e72:	e797      	b.n	8011da4 <HAL_RCCEx_PeriphCLKConfig+0x318>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8011e74:	2100      	movs	r1, #0
 8011e76:	1d20      	adds	r0, r4, #4
 8011e78:	f7ff fd12 	bl	80118a0 <RCCEx_PLLSAI1_Config>
 8011e7c:	4680      	mov	r8, r0
        break;
 8011e7e:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 8011e80:	f1b8 0f00 	cmp.w	r8, #0
 8011e84:	d11f      	bne.n	8011ec6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8011e86:	4948      	ldr	r1, [pc, #288]	; (8011fa8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8011e88:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8011e8a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8011e8e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8011e92:	4302      	orrs	r2, r0
 8011e94:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 8011e98:	e6bc      	b.n	8011c14 <HAL_RCCEx_PeriphCLKConfig+0x188>
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011e9a:	683b      	ldr	r3, [r7, #0]
 8011e9c:	05de      	lsls	r6, r3, #23
 8011e9e:	d497      	bmi.n	8011dd0 <HAL_RCCEx_PeriphCLKConfig+0x344>
          ret = HAL_TIMEOUT;
 8011ea0:	2503      	movs	r5, #3
 8011ea2:	46a8      	mov	r8, r5
 8011ea4:	e7d0      	b.n	8011e48 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8011ea6:	1d20      	adds	r0, r4, #4
 8011ea8:	f7ff fcfa 	bl	80118a0 <RCCEx_PLLSAI1_Config>
 8011eac:	6823      	ldr	r3, [r4, #0]
 8011eae:	4680      	mov	r8, r0
        break;
 8011eb0:	e62e      	b.n	8011b10 <HAL_RCCEx_PeriphCLKConfig+0x84>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8011eb2:	3004      	adds	r0, #4
 8011eb4:	f7ff fcf4 	bl	80118a0 <RCCEx_PLLSAI1_Config>
 8011eb8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8011eba:	2d00      	cmp	r5, #0
 8011ebc:	f43f ae00 	beq.w	8011ac0 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8011ec0:	e037      	b.n	8011f32 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8011ec2:	4645      	mov	r5, r8
 8011ec4:	e7c0      	b.n	8011e48 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8011ec6:	4645      	mov	r5, r8
 8011ec8:	e6a4      	b.n	8011c14 <HAL_RCCEx_PeriphCLKConfig+0x188>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8011eca:	68ca      	ldr	r2, [r1, #12]
 8011ecc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8011ed0:	60ca      	str	r2, [r1, #12]
 8011ed2:	e6df      	b.n	8011c94 <HAL_RCCEx_PeriphCLKConfig+0x208>
}
 8011ed4:	4628      	mov	r0, r5
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8011ed6:	68d3      	ldr	r3, [r2, #12]
 8011ed8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011edc:	60d3      	str	r3, [r2, #12]
}
 8011ede:	b002      	add	sp, #8
 8011ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8011ee4:	4a30      	ldr	r2, [pc, #192]	; (8011fa8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8011ee6:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
 8011eea:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8011eee:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8011ef2:	68d1      	ldr	r1, [r2, #12]
 8011ef4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8011ef8:	60d1      	str	r1, [r2, #12]
 8011efa:	e6e9      	b.n	8011cd0 <HAL_RCCEx_PeriphCLKConfig+0x244>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8011efc:	68ca      	ldr	r2, [r1, #12]
 8011efe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8011f02:	60ca      	str	r2, [r1, #12]
 8011f04:	e6f8      	b.n	8011cf8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8011f06:	4928      	ldr	r1, [pc, #160]	; (8011fa8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8011f08:	68ca      	ldr	r2, [r1, #12]
 8011f0a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8011f0e:	60ca      	str	r2, [r1, #12]
    if (ret == HAL_OK)
 8011f10:	f1b8 0f00 	cmp.w	r8, #0
 8011f14:	d1d7      	bne.n	8011ec6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8011f16:	e7b6      	b.n	8011e86 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8011f18:	2102      	movs	r1, #2
 8011f1a:	1d20      	adds	r0, r4, #4
 8011f1c:	f7ff fcc0 	bl	80118a0 <RCCEx_PLLSAI1_Config>
      if (ret != HAL_OK)
 8011f20:	b370      	cbz	r0, 8011f80 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8011f22:	4605      	mov	r5, r0
 8011f24:	6823      	ldr	r3, [r4, #0]
 8011f26:	e6f8      	b.n	8011d1a <HAL_RCCEx_PeriphCLKConfig+0x28e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8011f28:	68ca      	ldr	r2, [r1, #12]
 8011f2a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8011f2e:	60ca      	str	r2, [r1, #12]
 8011f30:	e6ce      	b.n	8011cd0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8011f32:	6823      	ldr	r3, [r4, #0]
 8011f34:	e5d5      	b.n	8011ae2 <HAL_RCCEx_PeriphCLKConfig+0x56>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8011f36:	481c      	ldr	r0, [pc, #112]	; (8011fa8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 8011f38:	68c2      	ldr	r2, [r0, #12]
 8011f3a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8011f3e:	60c2      	str	r2, [r0, #12]
    if (ret == HAL_OK)
 8011f40:	e5c6      	b.n	8011ad0 <HAL_RCCEx_PeriphCLKConfig+0x44>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8011f42:	4919      	ldr	r1, [pc, #100]	; (8011fa8 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
        break;
 8011f44:	46a8      	mov	r8, r5
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8011f46:	68ca      	ldr	r2, [r1, #12]
 8011f48:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8011f4c:	60ca      	str	r2, [r1, #12]
        break;
 8011f4e:	e5df      	b.n	8011b10 <HAL_RCCEx_PeriphCLKConfig+0x84>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8011f50:	2101      	movs	r1, #1
 8011f52:	1d20      	adds	r0, r4, #4
 8011f54:	f7ff fca4 	bl	80118a0 <RCCEx_PLLSAI1_Config>
        if (ret != HAL_OK)
 8011f58:	b1c0      	cbz	r0, 8011f8c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8011f5a:	4605      	mov	r5, r0
 8011f5c:	6823      	ldr	r3, [r4, #0]
 8011f5e:	e699      	b.n	8011c94 <HAL_RCCEx_PeriphCLKConfig+0x208>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8011f60:	2101      	movs	r1, #1
 8011f62:	1d20      	adds	r0, r4, #4
 8011f64:	f7ff fc9c 	bl	80118a0 <RCCEx_PLLSAI1_Config>
      if (ret != HAL_OK)
 8011f68:	b170      	cbz	r0, 8011f88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8011f6a:	4605      	mov	r5, r0
 8011f6c:	6823      	ldr	r3, [r4, #0]
 8011f6e:	e6c3      	b.n	8011cf8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8011f70:	2101      	movs	r1, #1
 8011f72:	1d20      	adds	r0, r4, #4
 8011f74:	f7ff fc94 	bl	80118a0 <RCCEx_PLLSAI1_Config>
      if (ret != HAL_OK)
 8011f78:	b120      	cbz	r0, 8011f84 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8011f7a:	4605      	mov	r5, r0
 8011f7c:	6823      	ldr	r3, [r4, #0]
 8011f7e:	e6a7      	b.n	8011cd0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8011f80:	6823      	ldr	r3, [r4, #0]
 8011f82:	e6ca      	b.n	8011d1a <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8011f84:	6823      	ldr	r3, [r4, #0]
 8011f86:	e6a3      	b.n	8011cd0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8011f88:	6823      	ldr	r3, [r4, #0]
 8011f8a:	e6b5      	b.n	8011cf8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8011f8c:	6823      	ldr	r3, [r4, #0]
 8011f8e:	e681      	b.n	8011c94 <HAL_RCCEx_PeriphCLKConfig+0x208>
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011f90:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8011f94:	079a      	lsls	r2, r3, #30
 8011f96:	d583      	bpl.n	8011ea0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8011f98:	e74c      	b.n	8011e34 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8011f9a:	4613      	mov	r3, r2
 8011f9c:	e74c      	b.n	8011e38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    switch (PeriphClkInit->Sai2ClockSelection)
 8011f9e:	2501      	movs	r5, #1
 8011fa0:	46a8      	mov	r8, r5
 8011fa2:	e6f6      	b.n	8011d92 <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch (PeriphClkInit->Sai1ClockSelection)
 8011fa4:	2501      	movs	r5, #1
 8011fa6:	e59c      	b.n	8011ae2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8011fa8:	40021000 	.word	0x40021000

08011fac <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8011fac:	2800      	cmp	r0, #0
 8011fae:	d060      	beq.n	8012072 <HAL_RNG_Init+0xc6>
{
 8011fb0:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8011fb2:	7a43      	ldrb	r3, [r0, #9]
 8011fb4:	4604      	mov	r4, r0
 8011fb6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d04f      	beq.n	801205e <HAL_RNG_Init+0xb2>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8011fbe:	2302      	movs	r3, #2

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 8011fc0:	f24a 20b3 	movw	r0, #41651	; 0xa2b3
  __HAL_RNG_DISABLE(hrng);
 8011fc4:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 8011fc6:	7263      	strb	r3, [r4, #9]
  __HAL_RNG_DISABLE(hrng);
 8011fc8:	6811      	ldr	r1, [r2, #0]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 8011fca:	6865      	ldr	r5, [r4, #4]
  __HAL_RNG_DISABLE(hrng);
 8011fcc:	f021 0104 	bic.w	r1, r1, #4
 8011fd0:	6011      	str	r1, [r2, #0]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 8011fd2:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 8011fd4:	4928      	ldr	r1, [pc, #160]	; (8012078 <HAL_RNG_Init+0xcc>)
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 8011fd6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011fda:	f023 0320 	bic.w	r3, r3, #32
 8011fde:	432b      	orrs	r3, r5
 8011fe0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011fe4:	6013      	str	r3, [r2, #0]
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 8011fe6:	6111      	str	r1, [r2, #16]
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 8011fe8:	6110      	str	r0, [r2, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8011fea:	6813      	ldr	r3, [r2, #0]
 8011fec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011ff0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011ff2:	f7fe fe99 	bl	8010d28 <HAL_GetTick>
 8011ff6:	4605      	mov	r5, r0

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8011ff8:	6823      	ldr	r3, [r4, #0]
 8011ffa:	681a      	ldr	r2, [r3, #0]
 8011ffc:	0051      	lsls	r1, r2, #1
 8011ffe:	d50d      	bpl.n	801201c <HAL_RNG_Init+0x70>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8012000:	f7fe fe92 	bl	8010d28 <HAL_GetTick>
 8012004:	1b40      	subs	r0, r0, r5
 8012006:	2802      	cmp	r0, #2
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8012008:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 801200a:	d9f6      	bls.n	8011ffa <HAL_RNG_Init+0x4e>
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 801200c:	681a      	ldr	r2, [r3, #0]
 801200e:	0052      	lsls	r2, r2, #1
 8012010:	d5f3      	bpl.n	8011ffa <HAL_RNG_Init+0x4e>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8012012:	2001      	movs	r0, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8012014:	2302      	movs	r3, #2
        hrng->State = HAL_RNG_STATE_READY;
 8012016:	7260      	strb	r0, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8012018:	60e3      	str	r3, [r4, #12]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 801201a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_RNG_ENABLE(hrng);
 801201c:	681a      	ldr	r2, [r3, #0]
 801201e:	f042 0204 	orr.w	r2, r2, #4
 8012022:	601a      	str	r2, [r3, #0]
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8012024:	685b      	ldr	r3, [r3, #4]
 8012026:	0658      	lsls	r0, r3, #25
 8012028:	d503      	bpl.n	8012032 <HAL_RNG_Init+0x86>
    hrng->State = HAL_RNG_STATE_ERROR;
 801202a:	2304      	movs	r3, #4
 801202c:	7263      	strb	r3, [r4, #9]
    return HAL_ERROR;
 801202e:	2001      	movs	r0, #1
}
 8012030:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 8012032:	f7fe fe79 	bl	8010d28 <HAL_GetTick>
 8012036:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8012038:	6823      	ldr	r3, [r4, #0]
 801203a:	685b      	ldr	r3, [r3, #4]
 801203c:	0759      	lsls	r1, r3, #29
 801203e:	d512      	bpl.n	8012066 <HAL_RNG_Init+0xba>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8012040:	f7fe fe72 	bl	8010d28 <HAL_GetTick>
 8012044:	1b40      	subs	r0, r0, r5
 8012046:	2802      	cmp	r0, #2
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8012048:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 801204a:	d9f6      	bls.n	801203a <HAL_RNG_Init+0x8e>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 801204c:	685a      	ldr	r2, [r3, #4]
 801204e:	0752      	lsls	r2, r2, #29
 8012050:	d5f3      	bpl.n	801203a <HAL_RNG_Init+0x8e>
        hrng->State = HAL_RNG_STATE_ERROR;
 8012052:	2204      	movs	r2, #4
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8012054:	2302      	movs	r3, #2
        hrng->State = HAL_RNG_STATE_ERROR;
 8012056:	7262      	strb	r2, [r4, #9]
        return HAL_ERROR;
 8012058:	2001      	movs	r0, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801205a:	60e3      	str	r3, [r4, #12]
}
 801205c:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 801205e:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 8012060:	f7fe fc6c 	bl	801093c <HAL_RNG_MspInit>
 8012064:	e7ab      	b.n	8011fbe <HAL_RNG_Init+0x12>
  hrng->State = HAL_RNG_STATE_READY;
 8012066:	2201      	movs	r2, #1
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8012068:	2300      	movs	r3, #0
  hrng->State = HAL_RNG_STATE_READY;
 801206a:	7262      	strb	r2, [r4, #9]
  return HAL_OK;
 801206c:	4618      	mov	r0, r3
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 801206e:	60e3      	str	r3, [r4, #12]
}
 8012070:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8012072:	2001      	movs	r0, #1
}
 8012074:	4770      	bx	lr
 8012076:	bf00      	nop
 8012078:	17590abc 	.word	0x17590abc

0801207c <HAL_RNG_ErrorCallback>:
 801207c:	4770      	bx	lr
 801207e:	bf00      	nop

08012080 <RNG_RecoverSeedError>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
  __IO uint32_t count = 0U;
 8012080:	2300      	movs	r3, #0
{
 8012082:	b510      	push	{r4, lr}

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 8012084:	6802      	ldr	r2, [r0, #0]
{
 8012086:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8012088:	9301      	str	r3, [sp, #4]
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 801208a:	6853      	ldr	r3, [r2, #4]
{
 801208c:	4601      	mov	r1, r0
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 801208e:	075b      	lsls	r3, r3, #29
 8012090:	d40a      	bmi.n	80120a8 <RNG_RecoverSeedError+0x28>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8012092:	6853      	ldr	r3, [r2, #4]
 8012094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012098:	6053      	str	r3, [r2, #4]
    }
    while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
  return HAL_OK;
 801209a:	2000      	movs	r0, #0
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 801209c:	68cb      	ldr	r3, [r1, #12]
 801209e:	f023 0308 	bic.w	r3, r3, #8
 80120a2:	60cb      	str	r3, [r1, #12]
}
 80120a4:	b002      	add	sp, #8
 80120a6:	bd10      	pop	{r4, pc}
    count = RNG_TIMEOUT_VALUE;
 80120a8:	2002      	movs	r0, #2
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 80120aa:	6813      	ldr	r3, [r2, #0]
 80120ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80120b0:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 80120b2:	6813      	ldr	r3, [r2, #0]
 80120b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80120b8:	6013      	str	r3, [r2, #0]
    count = RNG_TIMEOUT_VALUE;
 80120ba:	9001      	str	r0, [sp, #4]
 80120bc:	e002      	b.n	80120c4 <RNG_RecoverSeedError+0x44>
    while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 80120be:	6813      	ldr	r3, [r2, #0]
 80120c0:	005c      	lsls	r4, r3, #1
 80120c2:	d512      	bpl.n	80120ea <RNG_RecoverSeedError+0x6a>
      count-- ;
 80120c4:	9b01      	ldr	r3, [sp, #4]
 80120c6:	3b01      	subs	r3, #1
 80120c8:	9301      	str	r3, [sp, #4]
      if (count == 0U)
 80120ca:	9b01      	ldr	r3, [sp, #4]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d1f6      	bne.n	80120be <RNG_RecoverSeedError+0x3e>
        hrng->State = HAL_RNG_STATE_READY;
 80120d0:	2401      	movs	r4, #1
 80120d2:	724c      	strb	r4, [r1, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 80120d4:	68ca      	ldr	r2, [r1, #12]
        HAL_RNG_ErrorCallback(hrng);
 80120d6:	4608      	mov	r0, r1
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 80120d8:	f042 0202 	orr.w	r2, r2, #2
        __HAL_UNLOCK(hrng);
 80120dc:	720b      	strb	r3, [r1, #8]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 80120de:	60ca      	str	r2, [r1, #12]
        HAL_RNG_ErrorCallback(hrng);
 80120e0:	f7ff ffcc 	bl	801207c <HAL_RNG_ErrorCallback>
        return HAL_ERROR;
 80120e4:	4620      	mov	r0, r4
}
 80120e6:	b002      	add	sp, #8
 80120e8:	bd10      	pop	{r4, pc}
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80120ea:	6853      	ldr	r3, [r2, #4]
 80120ec:	0658      	lsls	r0, r3, #25
 80120ee:	d40c      	bmi.n	801210a <RNG_RecoverSeedError+0x8a>
    count = RNG_TIMEOUT_VALUE;
 80120f0:	2302      	movs	r3, #2
 80120f2:	9301      	str	r3, [sp, #4]
 80120f4:	e002      	b.n	80120fc <RNG_RecoverSeedError+0x7c>
    while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 80120f6:	6853      	ldr	r3, [r2, #4]
 80120f8:	075b      	lsls	r3, r3, #29
 80120fa:	d5ce      	bpl.n	801209a <RNG_RecoverSeedError+0x1a>
      count-- ;
 80120fc:	9b01      	ldr	r3, [sp, #4]
 80120fe:	3b01      	subs	r3, #1
 8012100:	9301      	str	r3, [sp, #4]
      if (count == 0U)
 8012102:	9b01      	ldr	r3, [sp, #4]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d1f6      	bne.n	80120f6 <RNG_RecoverSeedError+0x76>
 8012108:	e7e2      	b.n	80120d0 <RNG_RecoverSeedError+0x50>
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 801210a:	6853      	ldr	r3, [r2, #4]
 801210c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012110:	6053      	str	r3, [r2, #4]
 8012112:	e7ed      	b.n	80120f0 <RNG_RecoverSeedError+0x70>

08012114 <HAL_RNG_GenerateRandomNumber>:
{
 8012114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrng);
 8012116:	7a03      	ldrb	r3, [r0, #8]
 8012118:	2b01      	cmp	r3, #1
 801211a:	d040      	beq.n	801219e <HAL_RNG_GenerateRandomNumber+0x8a>
 801211c:	2501      	movs	r5, #1
  if (hrng->State == HAL_RNG_STATE_READY)
 801211e:	7a43      	ldrb	r3, [r0, #9]
 8012120:	4604      	mov	r4, r0
 8012122:	42ab      	cmp	r3, r5
  __HAL_LOCK(hrng);
 8012124:	7205      	strb	r5, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 8012126:	d005      	beq.n	8012134 <HAL_RNG_GenerateRandomNumber+0x20>
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8012128:	2304      	movs	r3, #4
 801212a:	60c3      	str	r3, [r0, #12]
  __HAL_UNLOCK(hrng);
 801212c:	2300      	movs	r3, #0
 801212e:	7223      	strb	r3, [r4, #8]
}
 8012130:	4628      	mov	r0, r5
 8012132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 8012134:	2202      	movs	r2, #2
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8012136:	6803      	ldr	r3, [r0, #0]
    hrng->State = HAL_RNG_STATE_BUSY;
 8012138:	7242      	strb	r2, [r0, #9]
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 801213a:	685d      	ldr	r5, [r3, #4]
 801213c:	460f      	mov	r7, r1
 801213e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8012142:	d116      	bne.n	8012172 <HAL_RNG_GenerateRandomNumber+0x5e>
    tickstart = HAL_GetTick();
 8012144:	f7fe fdf0 	bl	8010d28 <HAL_GetTick>
 8012148:	4606      	mov	r6, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801214a:	6823      	ldr	r3, [r4, #0]
 801214c:	685a      	ldr	r2, [r3, #4]
 801214e:	07d0      	lsls	r0, r2, #31
 8012150:	d417      	bmi.n	8012182 <HAL_RNG_GenerateRandomNumber+0x6e>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8012152:	f7fe fde9 	bl	8010d28 <HAL_GetTick>
 8012156:	1b83      	subs	r3, r0, r6
 8012158:	2b02      	cmp	r3, #2
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801215a:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 801215c:	d9f6      	bls.n	801214c <HAL_RNG_GenerateRandomNumber+0x38>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801215e:	685a      	ldr	r2, [r3, #4]
 8012160:	f012 0201 	ands.w	r2, r2, #1
 8012164:	d1f2      	bne.n	801214c <HAL_RNG_GenerateRandomNumber+0x38>
          hrng->State = HAL_RNG_STATE_READY;
 8012166:	2501      	movs	r5, #1
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8012168:	2302      	movs	r3, #2
          hrng->State = HAL_RNG_STATE_READY;
 801216a:	7265      	strb	r5, [r4, #9]
          __HAL_UNLOCK(hrng);
 801216c:	7222      	strb	r2, [r4, #8]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801216e:	60e3      	str	r3, [r4, #12]
          return HAL_ERROR;
 8012170:	e7de      	b.n	8012130 <HAL_RNG_GenerateRandomNumber+0x1c>
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8012172:	2308      	movs	r3, #8
 8012174:	60c3      	str	r3, [r0, #12]
      status = RNG_RecoverSeedError(hrng);
 8012176:	f7ff ff83 	bl	8012080 <RNG_RecoverSeedError>
      if (status == HAL_ERROR)
 801217a:	2801      	cmp	r0, #1
      status = RNG_RecoverSeedError(hrng);
 801217c:	4605      	mov	r5, r0
      if (status == HAL_ERROR)
 801217e:	d1e1      	bne.n	8012144 <HAL_RNG_GenerateRandomNumber+0x30>
 8012180:	e7d6      	b.n	8012130 <HAL_RNG_GenerateRandomNumber+0x1c>
    hrng->RandomNumber = hrng->Instance->DR;
 8012182:	689a      	ldr	r2, [r3, #8]
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8012184:	6859      	ldr	r1, [r3, #4]
    hrng->RandomNumber = hrng->Instance->DR;
 8012186:	6122      	str	r2, [r4, #16]
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8012188:	0649      	lsls	r1, r1, #25
 801218a:	d50b      	bpl.n	80121a4 <HAL_RNG_GenerateRandomNumber+0x90>
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 801218c:	2208      	movs	r2, #8
 801218e:	60e2      	str	r2, [r4, #12]
      CLEAR_BIT(hrng->Instance->SR, RNG_FLAG_DRDY);
 8012190:	685a      	ldr	r2, [r3, #4]
 8012192:	f022 0201 	bic.w	r2, r2, #1
 8012196:	605a      	str	r2, [r3, #4]
    hrng->State = HAL_RNG_STATE_READY;
 8012198:	2301      	movs	r3, #1
 801219a:	7263      	strb	r3, [r4, #9]
 801219c:	e7c6      	b.n	801212c <HAL_RNG_GenerateRandomNumber+0x18>
  __HAL_LOCK(hrng);
 801219e:	2502      	movs	r5, #2
}
 80121a0:	4628      	mov	r0, r5
 80121a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *random32bit = hrng->RandomNumber;
 80121a4:	603a      	str	r2, [r7, #0]
 80121a6:	e7f7      	b.n	8012198 <HAL_RNG_GenerateRandomNumber+0x84>

080121a8 <SPI_WaitFifoStateUntilTimeout.constprop.1>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80121a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121aa:	460c      	mov	r4, r1
 80121ac:	4617      	mov	r7, r2
 80121ae:	b083      	sub	sp, #12
 80121b0:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80121b2:	f7fe fdb9 	bl	8010d28 <HAL_GetTick>
 80121b6:	4427      	add	r7, r4
 80121b8:	1a3e      	subs	r6, r7, r0
  tmp_tickstart = HAL_GetTick();
 80121ba:	f7fe fdb5 	bl	8010d28 <HAL_GetTick>
 80121be:	4607      	mov	r7, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80121c0:	4b2d      	ldr	r3, [pc, #180]	; (8012278 <SPI_WaitFifoStateUntilTimeout.constprop.1+0xd0>)
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80121c8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80121cc:	0d1b      	lsrs	r3, r3, #20
 80121ce:	fb06 f303 	mul.w	r3, r6, r3
 80121d2:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 80121d4:	682a      	ldr	r2, [r5, #0]
 80121d6:	1c61      	adds	r1, r4, #1
 80121d8:	6893      	ldr	r3, [r2, #8]
 80121da:	d10d      	bne.n	80121f8 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x50>
 80121dc:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 80121e0:	d007      	beq.n	80121f2 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x4a>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80121e2:	7b13      	ldrb	r3, [r2, #12]
 80121e4:	b2db      	uxtb	r3, r3
 80121e6:	9300      	str	r3, [sp, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80121e8:	9b00      	ldr	r3, [sp, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80121ea:	6893      	ldr	r3, [r2, #8]
 80121ec:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 80121f0:	d1f7      	bne.n	80121e2 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x3a>
      }      
      count--;
    }
  }

  return HAL_OK;
 80121f2:	2000      	movs	r0, #0
}
 80121f4:	b003      	add	sp, #12
 80121f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 80121f8:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 80121fc:	d0f9      	beq.n	80121f2 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x4a>
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80121fe:	7b13      	ldrb	r3, [r2, #12]
 8012200:	b2db      	uxtb	r3, r3
 8012202:	9300      	str	r3, [sp, #0]
      UNUSED(tmpreg);
 8012204:	9b00      	ldr	r3, [sp, #0]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8012206:	f7fe fd8f 	bl	8010d28 <HAL_GetTick>
 801220a:	1bc0      	subs	r0, r0, r7
 801220c:	42b0      	cmp	r0, r6
 801220e:	d208      	bcs.n	8012222 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x7a>
      if(count == 0U)
 8012210:	9a01      	ldr	r2, [sp, #4]
      count--;
 8012212:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8012214:	2a00      	cmp	r2, #0
      count--;
 8012216:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 801221a:	bf08      	it	eq
 801221c:	2600      	moveq	r6, #0
      count--;
 801221e:	9301      	str	r3, [sp, #4]
 8012220:	e7d8      	b.n	80121d4 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x2c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012222:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8012226:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012228:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801222c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8012230:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012232:	d014      	beq.n	801225e <SPI_WaitFifoStateUntilTimeout.constprop.1+0xb6>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8012234:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8012236:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 801223a:	d007      	beq.n	801224c <SPI_WaitFifoStateUntilTimeout.constprop.1+0xa4>
        hspi->State = HAL_SPI_STATE_READY;
 801223c:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 801223e:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8012240:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 8012242:	f885 205d 	strb.w	r2, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8012246:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 801224a:	e7d3      	b.n	80121f4 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x4c>
          SPI_RESET_CRC(hspi);
 801224c:	681a      	ldr	r2, [r3, #0]
 801224e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8012252:	601a      	str	r2, [r3, #0]
 8012254:	681a      	ldr	r2, [r3, #0]
 8012256:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801225a:	601a      	str	r2, [r3, #0]
 801225c:	e7ee      	b.n	801223c <SPI_WaitFifoStateUntilTimeout.constprop.1+0x94>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801225e:	68aa      	ldr	r2, [r5, #8]
 8012260:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8012264:	d002      	beq.n	801226c <SPI_WaitFifoStateUntilTimeout.constprop.1+0xc4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012266:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 801226a:	d1e3      	bne.n	8012234 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x8c>
          __HAL_SPI_DISABLE(hspi);
 801226c:	681a      	ldr	r2, [r3, #0]
 801226e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012272:	601a      	str	r2, [r3, #0]
 8012274:	e7de      	b.n	8012234 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x8c>
 8012276:	bf00      	nop
 8012278:	20018000 	.word	0x20018000

0801227c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801227c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012280:	460d      	mov	r5, r1
 8012282:	4616      	mov	r6, r2
 8012284:	b082      	sub	sp, #8
 8012286:	4604      	mov	r4, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8012288:	f7fe fd4e 	bl	8010d28 <HAL_GetTick>
 801228c:	19af      	adds	r7, r5, r6
 801228e:	eba7 0800 	sub.w	r8, r7, r0
  tmp_tickstart = HAL_GetTick();
 8012292:	f7fe fd49 	bl	8010d28 <HAL_GetTick>
 8012296:	4681      	mov	r9, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8012298:	f8df a110 	ldr.w	sl, [pc, #272]	; 80123ac <SPI_EndRxTxTransaction+0x130>
 801229c:	f8da 3000 	ldr.w	r3, [sl]
 80122a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80122a4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80122a8:	0d1b      	lsrs	r3, r3, #20
 80122aa:	fb08 f303 	mul.w	r3, r8, r3
 80122ae:	9300      	str	r3, [sp, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80122b0:	1c68      	adds	r0, r5, #1
 80122b2:	6823      	ldr	r3, [r4, #0]
 80122b4:	d11f      	bne.n	80122f6 <SPI_EndRxTxTransaction+0x7a>
 80122b6:	689a      	ldr	r2, [r3, #8]
 80122b8:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 80122bc:	d1fb      	bne.n	80122b6 <SPI_EndRxTxTransaction+0x3a>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80122be:	f7fe fd33 	bl	8010d28 <HAL_GetTick>
 80122c2:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 80122c4:	f7fe fd30 	bl	8010d28 <HAL_GetTick>
 80122c8:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80122ca:	f8da 3000 	ldr.w	r3, [sl]
 80122ce:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80122d2:	fb07 f303 	mul.w	r3, r7, r3
 80122d6:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80122d8:	1c69      	adds	r1, r5, #1
 80122da:	6823      	ldr	r3, [r4, #0]
 80122dc:	d11f      	bne.n	801231e <SPI_EndRxTxTransaction+0xa2>
 80122de:	689a      	ldr	r2, [r3, #8]
 80122e0:	0612      	lsls	r2, r2, #24
 80122e2:	d4fc      	bmi.n	80122de <SPI_EndRxTxTransaction+0x62>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80122e4:	4632      	mov	r2, r6
 80122e6:	4629      	mov	r1, r5
 80122e8:	4620      	mov	r0, r4
 80122ea:	f7ff ff5d 	bl	80121a8 <SPI_WaitFifoStateUntilTimeout.constprop.1>
 80122ee:	bb40      	cbnz	r0, 8012342 <SPI_EndRxTxTransaction+0xc6>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 80122f0:	b002      	add	sp, #8
 80122f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 80122f6:	689b      	ldr	r3, [r3, #8]
 80122f8:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 80122fc:	d0df      	beq.n	80122be <SPI_EndRxTxTransaction+0x42>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80122fe:	f7fe fd13 	bl	8010d28 <HAL_GetTick>
 8012302:	eba0 0009 	sub.w	r0, r0, r9
 8012306:	4540      	cmp	r0, r8
 8012308:	d221      	bcs.n	801234e <SPI_EndRxTxTransaction+0xd2>
      if(count == 0U)
 801230a:	9a00      	ldr	r2, [sp, #0]
      count--;
 801230c:	9b00      	ldr	r3, [sp, #0]
        tmp_timeout = 0U;
 801230e:	2a00      	cmp	r2, #0
      count--;
 8012310:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8012314:	bf08      	it	eq
 8012316:	f04f 0800 	moveq.w	r8, #0
      count--;
 801231a:	9300      	str	r3, [sp, #0]
 801231c:	e7c8      	b.n	80122b0 <SPI_EndRxTxTransaction+0x34>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801231e:	689b      	ldr	r3, [r3, #8]
 8012320:	061b      	lsls	r3, r3, #24
 8012322:	d5df      	bpl.n	80122e4 <SPI_EndRxTxTransaction+0x68>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8012324:	f7fe fd00 	bl	8010d28 <HAL_GetTick>
 8012328:	eba0 0008 	sub.w	r0, r0, r8
 801232c:	42b8      	cmp	r0, r7
 801232e:	d20e      	bcs.n	801234e <SPI_EndRxTxTransaction+0xd2>
      if(count == 0U)
 8012330:	9a01      	ldr	r2, [sp, #4]
      count--;
 8012332:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8012334:	2a00      	cmp	r2, #0
      count--;
 8012336:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 801233a:	bf08      	it	eq
 801233c:	2700      	moveq	r7, #0
      count--;
 801233e:	9301      	str	r3, [sp, #4]
 8012340:	e7ca      	b.n	80122d8 <SPI_EndRxTxTransaction+0x5c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012342:	6e23      	ldr	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8012344:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012346:	f043 0320 	orr.w	r3, r3, #32
 801234a:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 801234c:	e7d0      	b.n	80122f0 <SPI_EndRxTxTransaction+0x74>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801234e:	e9d4 3100 	ldrd	r3, r1, [r4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8012352:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012354:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8012358:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801235c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801235e:	d019      	beq.n	8012394 <SPI_EndRxTxTransaction+0x118>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8012360:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8012362:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8012366:	d107      	bne.n	8012378 <SPI_EndRxTxTransaction+0xfc>
          SPI_RESET_CRC(hspi);
 8012368:	681a      	ldr	r2, [r3, #0]
 801236a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801236e:	601a      	str	r2, [r3, #0]
 8012370:	681a      	ldr	r2, [r3, #0]
 8012372:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8012376:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8012378:	2301      	movs	r3, #1
        __HAL_UNLOCK(hspi);
 801237a:	2200      	movs	r2, #0
    return HAL_TIMEOUT;
 801237c:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 801237e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012382:	6e23      	ldr	r3, [r4, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 8012384:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012388:	f043 0320 	orr.w	r3, r3, #32
 801238c:	6623      	str	r3, [r4, #96]	; 0x60
}
 801238e:	b002      	add	sp, #8
 8012390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012394:	68a2      	ldr	r2, [r4, #8]
 8012396:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 801239a:	d002      	beq.n	80123a2 <SPI_EndRxTxTransaction+0x126>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801239c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80123a0:	d1de      	bne.n	8012360 <SPI_EndRxTxTransaction+0xe4>
          __HAL_SPI_DISABLE(hspi);
 80123a2:	681a      	ldr	r2, [r3, #0]
 80123a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80123a8:	601a      	str	r2, [r3, #0]
 80123aa:	e7d9      	b.n	8012360 <SPI_EndRxTxTransaction+0xe4>
 80123ac:	20018000 	.word	0x20018000

080123b0 <HAL_SPI_Init>:
  if (hspi == NULL)
 80123b0:	2800      	cmp	r0, #0
 80123b2:	d07c      	beq.n	80124ae <HAL_SPI_Init+0xfe>
{
 80123b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80123b8:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
 80123bc:	4604      	mov	r4, r0
 80123be:	f1b8 0f00 	cmp.w	r8, #0
 80123c2:	d058      	beq.n	8012476 <HAL_SPI_Init+0xc6>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80123c4:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80123c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80123ca:	2200      	movs	r2, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 80123cc:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80123d0:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80123d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d05b      	beq.n	8012492 <HAL_SPI_Init+0xe2>
  hspi->State = HAL_SPI_STATE_BUSY;
 80123da:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80123dc:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80123de:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80123e2:	680a      	ldr	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80123e4:	68e0      	ldr	r0, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 80123e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80123ea:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80123ee:	600a      	str	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80123f0:	d948      	bls.n	8012484 <HAL_SPI_Init+0xd4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80123f2:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
 80123f6:	d15c      	bne.n	80124b2 <HAL_SPI_Init+0x102>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80123f8:	f04f 0c00 	mov.w	ip, #0
 80123fc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80123fe:	f402 5700 	and.w	r7, r2, #8192	; 0x2000
  hspi->State     = HAL_SPI_STATE_READY;
 8012402:	2601      	movs	r6, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012404:	2500      	movs	r5, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8012406:	6863      	ldr	r3, [r4, #4]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8012408:	f400 6970 	and.w	r9, r0, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801240c:	f403 7e82 	and.w	lr, r3, #260	; 0x104
 8012410:	68a3      	ldr	r3, [r4, #8]
 8012412:	6920      	ldr	r0, [r4, #16]
 8012414:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8012418:	ea4e 0e03 	orr.w	lr, lr, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801241c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801241e:	69a2      	ldr	r2, [r4, #24]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8012420:	f003 0308 	and.w	r3, r3, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8012424:	f000 0002 	and.w	r0, r0, #2
 8012428:	ea4e 0e00 	orr.w	lr, lr, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801242c:	ea43 0909 	orr.w	r9, r3, r9
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8012430:	f402 7000 	and.w	r0, r2, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8012434:	0c13      	lsrs	r3, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8012436:	6962      	ldr	r2, [r4, #20]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8012438:	f003 0304 	and.w	r3, r3, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801243c:	4032      	ands	r2, r6
 801243e:	ea4e 0202 	orr.w	r2, lr, r2
 8012442:	4302      	orrs	r2, r0
 8012444:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8012446:	f008 0810 	and.w	r8, r8, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801244a:	f000 0038 	and.w	r0, r0, #56	; 0x38
 801244e:	4302      	orrs	r2, r0
 8012450:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8012452:	ea49 0303 	orr.w	r3, r9, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8012456:	f000 0080 	and.w	r0, r0, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801245a:	ea43 0308 	orr.w	r3, r3, r8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801245e:	4302      	orrs	r2, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8012460:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8012464:	433a      	orrs	r2, r7
 8012466:	600a      	str	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8012468:	604b      	str	r3, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801246a:	6625      	str	r5, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801246c:	f884 605d 	strb.w	r6, [r4, #93]	; 0x5d
  return HAL_OK;
 8012470:	4628      	mov	r0, r5
}
 8012472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012476:	6843      	ldr	r3, [r0, #4]
 8012478:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801247c:	d0a5      	beq.n	80123ca <HAL_SPI_Init+0x1a>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801247e:	f8c0 801c 	str.w	r8, [r0, #28]
 8012482:	e7a2      	b.n	80123ca <HAL_SPI_Init+0x1a>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8012484:	d00d      	beq.n	80124a2 <HAL_SPI_Init+0xf2>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8012486:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801248a:	2300      	movs	r3, #0
 801248c:	461f      	mov	r7, r3
 801248e:	62a3      	str	r3, [r4, #40]	; 0x28
 8012490:	e7b7      	b.n	8012402 <HAL_SPI_Init+0x52>
    HAL_SPI_MspInit(hspi);
 8012492:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8012494:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8012498:	f7fe fa8e 	bl	80109b8 <HAL_SPI_MspInit>
 801249c:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 80124a0:	e79b      	b.n	80123da <HAL_SPI_Init+0x2a>
 80124a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80124a4:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 80124a8:	f402 5700 	and.w	r7, r2, #8192	; 0x2000
 80124ac:	e7a9      	b.n	8012402 <HAL_SPI_Init+0x52>
    return HAL_ERROR;
 80124ae:	2001      	movs	r0, #1
}
 80124b0:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80124b2:	f04f 0c00 	mov.w	ip, #0
 80124b6:	e7e8      	b.n	801248a <HAL_SPI_Init+0xda>

080124b8 <HAL_SPI_TransmitReceive>:
{
 80124b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124bc:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80124be:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
{
 80124c2:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hspi);
 80124c4:	2801      	cmp	r0, #1
 80124c6:	f000 809d 	beq.w	8012604 <HAL_SPI_TransmitReceive+0x14c>
 80124ca:	4698      	mov	r8, r3
 80124cc:	2301      	movs	r3, #1
 80124ce:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80124d2:	468a      	mov	sl, r1
 80124d4:	4691      	mov	r9, r2
 80124d6:	f7fe fc27 	bl	8010d28 <HAL_GetTick>
  tmp_state           = hspi->State;
 80124da:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 80124de:	4605      	mov	r5, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80124e0:	2f01      	cmp	r7, #1
  tmp_mode            = hspi->Init.Mode;
 80124e2:	6863      	ldr	r3, [r4, #4]
  tmp_state           = hspi->State;
 80124e4:	b2f9      	uxtb	r1, r7
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80124e6:	d010      	beq.n	801250a <HAL_SPI_TransmitReceive+0x52>
 80124e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80124ec:	d008      	beq.n	8012500 <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 80124ee:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80124f0:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 80124f2:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80124f4:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80124f8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80124fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8012500:	68a2      	ldr	r2, [r4, #8]
 8012502:	2a00      	cmp	r2, #0
 8012504:	d1f3      	bne.n	80124ee <HAL_SPI_TransmitReceive+0x36>
 8012506:	2904      	cmp	r1, #4
 8012508:	d1f1      	bne.n	80124ee <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801250a:	f1ba 0f00 	cmp.w	sl, #0
 801250e:	d07c      	beq.n	801260a <HAL_SPI_TransmitReceive+0x152>
 8012510:	f1b9 0f00 	cmp.w	r9, #0
 8012514:	d079      	beq.n	801260a <HAL_SPI_TransmitReceive+0x152>
 8012516:	f1b8 0f00 	cmp.w	r8, #0
 801251a:	d076      	beq.n	801260a <HAL_SPI_TransmitReceive+0x152>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801251c:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8012520:	68e1      	ldr	r1, [r4, #12]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012522:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8012524:	bf1c      	itt	ne
 8012526:	2205      	movne	r2, #5
 8012528:	f884 205d 	strbne.w	r2, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801252c:	2200      	movs	r2, #0
 801252e:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 8012530:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012534:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferCount = Size;
 8012536:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801253a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  hspi->TxXferCount = Size;
 801253e:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012542:	6851      	ldr	r1, [r2, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8012544:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8012548:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801254c:	f8c4 a038 	str.w	sl, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8012550:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8012554:	d85b      	bhi.n	801260e <HAL_SPI_TransmitReceive+0x156>
 8012556:	f1b8 0f01 	cmp.w	r8, #1
 801255a:	f240 80ea 	bls.w	8012732 <HAL_SPI_TransmitReceive+0x27a>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801255e:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8012562:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012564:	6811      	ldr	r1, [r2, #0]
 8012566:	0649      	lsls	r1, r1, #25
 8012568:	f140 80ea 	bpl.w	8012740 <HAL_SPI_TransmitReceive+0x288>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801256c:	b96b      	cbnz	r3, 801258a <HAL_SPI_TransmitReceive+0xd2>
      if (hspi->TxXferCount > 1U)
 801256e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8012570:	b29b      	uxth	r3, r3
 8012572:	2b01      	cmp	r3, #1
 8012574:	f240 8120 	bls.w	80127b8 <HAL_SPI_TransmitReceive+0x300>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012578:	4651      	mov	r1, sl
 801257a:	f831 3b02 	ldrh.w	r3, [r1], #2
 801257e:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount -= 2U;
 8012580:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012582:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8012584:	3b02      	subs	r3, #2
 8012586:	b29b      	uxth	r3, r3
 8012588:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 801258a:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801258c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801258e:	b29b      	uxth	r3, r3
 8012590:	b92b      	cbnz	r3, 801259e <HAL_SPI_TransmitReceive+0xe6>
 8012592:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8012596:	b29b      	uxth	r3, r3
 8012598:	2b00      	cmp	r3, #0
 801259a:	f000 8084 	beq.w	80126a6 <HAL_SPI_TransmitReceive+0x1ee>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801259e:	6822      	ldr	r2, [r4, #0]
 80125a0:	6893      	ldr	r3, [r2, #8]
 80125a2:	0799      	lsls	r1, r3, #30
 80125a4:	d505      	bpl.n	80125b2 <HAL_SPI_TransmitReceive+0xfa>
 80125a6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80125a8:	b29b      	uxth	r3, r3
 80125aa:	b113      	cbz	r3, 80125b2 <HAL_SPI_TransmitReceive+0xfa>
 80125ac:	2f00      	cmp	r7, #0
 80125ae:	f040 80e1 	bne.w	8012774 <HAL_SPI_TransmitReceive+0x2bc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80125b2:	6893      	ldr	r3, [r2, #8]
 80125b4:	f013 0301 	ands.w	r3, r3, #1
 80125b8:	d01b      	beq.n	80125f2 <HAL_SPI_TransmitReceive+0x13a>
 80125ba:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80125be:	b289      	uxth	r1, r1
 80125c0:	b1b9      	cbz	r1, 80125f2 <HAL_SPI_TransmitReceive+0x13a>
        if (hspi->RxXferCount > 1U)
 80125c2:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80125c6:	b289      	uxth	r1, r1
 80125c8:	2901      	cmp	r1, #1
 80125ca:	f240 80c5 	bls.w	8012758 <HAL_SPI_TransmitReceive+0x2a0>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80125ce:	68d1      	ldr	r1, [r2, #12]
 80125d0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80125d2:	f820 1b02 	strh.w	r1, [r0], #2
          hspi->RxXferCount -= 2U;
 80125d6:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80125da:	6420      	str	r0, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80125dc:	3902      	subs	r1, #2
 80125de:	b289      	uxth	r1, r1
 80125e0:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80125e4:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80125e8:	b289      	uxth	r1, r1
 80125ea:	2901      	cmp	r1, #1
 80125ec:	f240 80d1 	bls.w	8012792 <HAL_SPI_TransmitReceive+0x2da>
        txallowed = 1U;
 80125f0:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80125f2:	f7fe fb99 	bl	8010d28 <HAL_GetTick>
 80125f6:	1b40      	subs	r0, r0, r5
 80125f8:	42b0      	cmp	r0, r6
 80125fa:	d3c7      	bcc.n	801258c <HAL_SPI_TransmitReceive+0xd4>
 80125fc:	1c73      	adds	r3, r6, #1
 80125fe:	d0c5      	beq.n	801258c <HAL_SPI_TransmitReceive+0xd4>
        errorcode = HAL_TIMEOUT;
 8012600:	2003      	movs	r0, #3
 8012602:	e775      	b.n	80124f0 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 8012604:	2002      	movs	r0, #2
}
 8012606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    errorcode = HAL_ERROR;
 801260a:	2001      	movs	r0, #1
 801260c:	e770      	b.n	80124f0 <HAL_SPI_TransmitReceive+0x38>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801260e:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8012612:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012614:	6811      	ldr	r1, [r2, #0]
 8012616:	0648      	lsls	r0, r1, #25
 8012618:	d403      	bmi.n	8012622 <HAL_SPI_TransmitReceive+0x16a>
    __HAL_SPI_ENABLE(hspi);
 801261a:	6811      	ldr	r1, [r2, #0]
 801261c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8012620:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012622:	2b00      	cmp	r3, #0
 8012624:	f040 8081 	bne.w	801272a <HAL_SPI_TransmitReceive+0x272>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012628:	4651      	mov	r1, sl
 801262a:	f831 3b02 	ldrh.w	r3, [r1], #2
 801262e:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 8012630:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8012632:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8012634:	3b01      	subs	r3, #1
 8012636:	b29b      	uxth	r3, r3
 8012638:	87e3      	strh	r3, [r4, #62]	; 0x3e
 801263a:	1c72      	adds	r2, r6, #1
{
 801263c:	f04f 0701 	mov.w	r7, #1
 8012640:	d028      	beq.n	8012694 <HAL_SPI_TransmitReceive+0x1dc>
 8012642:	e06d      	b.n	8012720 <HAL_SPI_TransmitReceive+0x268>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8012644:	6822      	ldr	r2, [r4, #0]
 8012646:	6893      	ldr	r3, [r2, #8]
 8012648:	079b      	lsls	r3, r3, #30
 801264a:	d50d      	bpl.n	8012668 <HAL_SPI_TransmitReceive+0x1b0>
 801264c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801264e:	b29b      	uxth	r3, r3
 8012650:	b153      	cbz	r3, 8012668 <HAL_SPI_TransmitReceive+0x1b0>
 8012652:	b14f      	cbz	r7, 8012668 <HAL_SPI_TransmitReceive+0x1b0>
        txallowed = 0U;
 8012654:	2700      	movs	r7, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012656:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012658:	f831 3b02 	ldrh.w	r3, [r1], #2
 801265c:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 801265e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012660:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8012662:	3b01      	subs	r3, #1
 8012664:	b29b      	uxth	r3, r3
 8012666:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012668:	6893      	ldr	r3, [r2, #8]
 801266a:	f013 0301 	ands.w	r3, r3, #1
 801266e:	d00f      	beq.n	8012690 <HAL_SPI_TransmitReceive+0x1d8>
 8012670:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8012674:	b289      	uxth	r1, r1
 8012676:	b159      	cbz	r1, 8012690 <HAL_SPI_TransmitReceive+0x1d8>
        txallowed = 1U;
 8012678:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801267a:	68d3      	ldr	r3, [r2, #12]
 801267c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801267e:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 8012682:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8012686:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8012688:	3b01      	subs	r3, #1
 801268a:	b29b      	uxth	r3, r3
 801268c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8012690:	f7fe fb4a 	bl	8010d28 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012694:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8012696:	b29b      	uxth	r3, r3
 8012698:	2b00      	cmp	r3, #0
 801269a:	d1d3      	bne.n	8012644 <HAL_SPI_TransmitReceive+0x18c>
 801269c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80126a0:	b29b      	uxth	r3, r3
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d1ce      	bne.n	8012644 <HAL_SPI_TransmitReceive+0x18c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80126a6:	462a      	mov	r2, r5
 80126a8:	4631      	mov	r1, r6
 80126aa:	4620      	mov	r0, r4
 80126ac:	f7ff fde6 	bl	801227c <SPI_EndRxTxTransaction>
 80126b0:	2800      	cmp	r0, #0
 80126b2:	f43f af1d 	beq.w	80124f0 <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80126b6:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 80126b8:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80126ba:	6623      	str	r3, [r4, #96]	; 0x60
 80126bc:	e718      	b.n	80124f0 <HAL_SPI_TransmitReceive+0x38>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80126be:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80126c2:	b29b      	uxth	r3, r3
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d0ee      	beq.n	80126a6 <HAL_SPI_TransmitReceive+0x1ee>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80126c8:	6822      	ldr	r2, [r4, #0]
 80126ca:	6893      	ldr	r3, [r2, #8]
 80126cc:	0798      	lsls	r0, r3, #30
 80126ce:	d50d      	bpl.n	80126ec <HAL_SPI_TransmitReceive+0x234>
 80126d0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80126d2:	b29b      	uxth	r3, r3
 80126d4:	b153      	cbz	r3, 80126ec <HAL_SPI_TransmitReceive+0x234>
 80126d6:	b14f      	cbz	r7, 80126ec <HAL_SPI_TransmitReceive+0x234>
        txallowed = 0U;
 80126d8:	2700      	movs	r7, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80126da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80126dc:	f831 3b02 	ldrh.w	r3, [r1], #2
 80126e0:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 80126e2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80126e4:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80126e6:	3b01      	subs	r3, #1
 80126e8:	b29b      	uxth	r3, r3
 80126ea:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80126ec:	6893      	ldr	r3, [r2, #8]
 80126ee:	f013 0301 	ands.w	r3, r3, #1
 80126f2:	d00f      	beq.n	8012714 <HAL_SPI_TransmitReceive+0x25c>
 80126f4:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80126f8:	b289      	uxth	r1, r1
 80126fa:	b159      	cbz	r1, 8012714 <HAL_SPI_TransmitReceive+0x25c>
        txallowed = 1U;
 80126fc:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80126fe:	68d3      	ldr	r3, [r2, #12]
 8012700:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8012702:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 8012706:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801270a:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 801270c:	3b01      	subs	r3, #1
 801270e:	b29b      	uxth	r3, r3
 8012710:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8012714:	f7fe fb08 	bl	8010d28 <HAL_GetTick>
 8012718:	1b40      	subs	r0, r0, r5
 801271a:	42b0      	cmp	r0, r6
 801271c:	f4bf af70 	bcs.w	8012600 <HAL_SPI_TransmitReceive+0x148>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012720:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8012722:	b29b      	uxth	r3, r3
 8012724:	2b00      	cmp	r3, #0
 8012726:	d1cf      	bne.n	80126c8 <HAL_SPI_TransmitReceive+0x210>
 8012728:	e7c9      	b.n	80126be <HAL_SPI_TransmitReceive+0x206>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801272a:	f1b8 0f01 	cmp.w	r8, #1
 801272e:	d184      	bne.n	801263a <HAL_SPI_TransmitReceive+0x182>
 8012730:	e77a      	b.n	8012628 <HAL_SPI_TransmitReceive+0x170>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012732:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8012736:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012738:	6811      	ldr	r1, [r2, #0]
 801273a:	0649      	lsls	r1, r1, #25
 801273c:	f53f af17 	bmi.w	801256e <HAL_SPI_TransmitReceive+0xb6>
    __HAL_SPI_ENABLE(hspi);
 8012740:	6811      	ldr	r1, [r2, #0]
 8012742:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8012746:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012748:	2b00      	cmp	r3, #0
 801274a:	f43f af10 	beq.w	801256e <HAL_SPI_TransmitReceive+0xb6>
 801274e:	f1b8 0f01 	cmp.w	r8, #1
 8012752:	f47f af1a 	bne.w	801258a <HAL_SPI_TransmitReceive+0xd2>
 8012756:	e70a      	b.n	801256e <HAL_SPI_TransmitReceive+0xb6>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8012758:	7b11      	ldrb	r1, [r2, #12]
 801275a:	6c22      	ldr	r2, [r4, #64]	; 0x40
        txallowed = 1U;
 801275c:	461f      	mov	r7, r3
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801275e:	7011      	strb	r1, [r2, #0]
          hspi->RxXferCount--;
 8012760:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
          hspi->pRxBuffPtr++;
 8012764:	6c22      	ldr	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8012766:	3b01      	subs	r3, #1
 8012768:	b29b      	uxth	r3, r3
          hspi->pRxBuffPtr++;
 801276a:	3201      	adds	r2, #1
          hspi->RxXferCount--;
 801276c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          hspi->pRxBuffPtr++;
 8012770:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8012772:	e73e      	b.n	80125f2 <HAL_SPI_TransmitReceive+0x13a>
        if (hspi->TxXferCount > 1U)
 8012774:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8012776:	b29b      	uxth	r3, r3
 8012778:	2b01      	cmp	r3, #1
 801277a:	d910      	bls.n	801279e <HAL_SPI_TransmitReceive+0x2e6>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801277c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        txallowed = 0U;
 801277e:	2700      	movs	r7, #0
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012780:	f831 3b02 	ldrh.w	r3, [r1], #2
 8012784:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 8012786:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8012788:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801278a:	3b02      	subs	r3, #2
 801278c:	b29b      	uxth	r3, r3
 801278e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8012790:	e70f      	b.n	80125b2 <HAL_SPI_TransmitReceive+0xfa>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012792:	6851      	ldr	r1, [r2, #4]
        txallowed = 1U;
 8012794:	461f      	mov	r7, r3
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012796:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 801279a:	6051      	str	r1, [r2, #4]
 801279c:	e729      	b.n	80125f2 <HAL_SPI_TransmitReceive+0x13a>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801279e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        txallowed = 0U;
 80127a0:	2700      	movs	r7, #0
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80127a2:	781b      	ldrb	r3, [r3, #0]
 80127a4:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 80127a6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 80127a8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80127aa:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 80127ac:	1c51      	adds	r1, r2, #1
          hspi->TxXferCount--;
 80127ae:	b29b      	uxth	r3, r3
 80127b0:	6822      	ldr	r2, [r4, #0]
 80127b2:	87e3      	strh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 80127b4:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80127b6:	e6fc      	b.n	80125b2 <HAL_SPI_TransmitReceive+0xfa>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80127b8:	f89a 3000 	ldrb.w	r3, [sl]
 80127bc:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 80127be:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 80127c0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80127c2:	3b01      	subs	r3, #1
 80127c4:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 80127c6:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 80127c8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 80127ca:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80127cc:	e6dd      	b.n	801258a <HAL_SPI_TransmitReceive+0xd2>
 80127ce:	bf00      	nop

080127d0 <HAL_SPI_GetState>:
  return hspi->State;
 80127d0:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 80127d4:	4770      	bx	lr
 80127d6:	bf00      	nop

080127d8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80127d8:	2800      	cmp	r0, #0
 80127da:	d075      	beq.n	80128c8 <HAL_TIM_Base_Init+0xf0>
{
 80127dc:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80127de:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80127e2:	4604      	mov	r4, r0
 80127e4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d068      	beq.n	80128be <HAL_TIM_Base_Init+0xe6>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80127ec:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80127ee:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80127f0:	4936      	ldr	r1, [pc, #216]	; (80128cc <HAL_TIM_Base_Init+0xf4>)
  htim->State = HAL_TIM_STATE_BUSY;
 80127f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80127f6:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80127f8:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80127fa:	d04c      	beq.n	8012896 <HAL_TIM_Base_Init+0xbe>
 80127fc:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8012800:	d01c      	beq.n	801283c <HAL_TIM_Base_Init+0x64>
 8012802:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8012806:	428a      	cmp	r2, r1
 8012808:	d018      	beq.n	801283c <HAL_TIM_Base_Init+0x64>
 801280a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801280e:	428a      	cmp	r2, r1
 8012810:	d014      	beq.n	801283c <HAL_TIM_Base_Init+0x64>
 8012812:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012816:	428a      	cmp	r2, r1
 8012818:	d010      	beq.n	801283c <HAL_TIM_Base_Init+0x64>
 801281a:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 801281e:	428a      	cmp	r2, r1
 8012820:	d039      	beq.n	8012896 <HAL_TIM_Base_Init+0xbe>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012822:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8012826:	428a      	cmp	r2, r1
 8012828:	d039      	beq.n	801289e <HAL_TIM_Base_Init+0xc6>
 801282a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801282e:	428a      	cmp	r2, r1
 8012830:	d035      	beq.n	801289e <HAL_TIM_Base_Init+0xc6>
 8012832:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012836:	428a      	cmp	r2, r1
 8012838:	d108      	bne.n	801284c <HAL_TIM_Base_Init+0x74>
 801283a:	e030      	b.n	801289e <HAL_TIM_Base_Init+0xc6>
    tmpcr1 |= Structure->CounterMode;
 801283c:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801283e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8012842:	430b      	orrs	r3, r1
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012844:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8012846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801284a:	430b      	orrs	r3, r1
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801284c:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801284e:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012850:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012852:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012856:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8012858:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 801285a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 801285c:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801285e:	2301      	movs	r3, #1
 8012860:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012862:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012866:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 801286a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 801286e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8012872:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8012876:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801287a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801287e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8012882:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012886:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 801288a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 801288e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8012892:	2000      	movs	r0, #0
}
 8012894:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8012896:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 801289c:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801289e:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80128a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80128a4:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80128a6:	69a1      	ldr	r1, [r4, #24]
 80128a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80128ac:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80128ae:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80128b0:	68e3      	ldr	r3, [r4, #12]
 80128b2:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80128b4:	6863      	ldr	r3, [r4, #4]
 80128b6:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80128b8:	6963      	ldr	r3, [r4, #20]
 80128ba:	6313      	str	r3, [r2, #48]	; 0x30
 80128bc:	e7cf      	b.n	801285e <HAL_TIM_Base_Init+0x86>
    htim->Lock = HAL_UNLOCKED;
 80128be:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80128c2:	f7fe f8b3 	bl	8010a2c <HAL_TIM_Base_MspInit>
 80128c6:	e791      	b.n	80127ec <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 80128c8:	2001      	movs	r0, #1
}
 80128ca:	4770      	bx	lr
 80128cc:	40012c00 	.word	0x40012c00

080128d0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80128d0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80128d4:	2b01      	cmp	r3, #1
 80128d6:	d126      	bne.n	8012926 <HAL_TIM_Base_Start_IT+0x56>
  htim->State = HAL_TIM_STATE_BUSY;
 80128d8:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80128da:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80128dc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80128e0:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80128e2:	4917      	ldr	r1, [pc, #92]	; (8012940 <HAL_TIM_Base_Start_IT+0x70>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80128e4:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80128e8:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80128ea:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80128ec:	d01d      	beq.n	801292a <HAL_TIM_Base_Start_IT+0x5a>
 80128ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80128f2:	d01a      	beq.n	801292a <HAL_TIM_Base_Start_IT+0x5a>
 80128f4:	4a13      	ldr	r2, [pc, #76]	; (8012944 <HAL_TIM_Base_Start_IT+0x74>)
 80128f6:	4293      	cmp	r3, r2
 80128f8:	d017      	beq.n	801292a <HAL_TIM_Base_Start_IT+0x5a>
 80128fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80128fe:	4293      	cmp	r3, r2
 8012900:	d013      	beq.n	801292a <HAL_TIM_Base_Start_IT+0x5a>
 8012902:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012906:	4293      	cmp	r3, r2
 8012908:	d00f      	beq.n	801292a <HAL_TIM_Base_Start_IT+0x5a>
 801290a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 801290e:	4293      	cmp	r3, r2
 8012910:	d00b      	beq.n	801292a <HAL_TIM_Base_Start_IT+0x5a>
 8012912:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8012916:	4293      	cmp	r3, r2
 8012918:	d007      	beq.n	801292a <HAL_TIM_Base_Start_IT+0x5a>
    __HAL_TIM_ENABLE(htim);
 801291a:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 801291c:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 801291e:	f042 0201 	orr.w	r2, r2, #1
 8012922:	601a      	str	r2, [r3, #0]
 8012924:	4770      	bx	lr
    return HAL_ERROR;
 8012926:	2001      	movs	r0, #1
 8012928:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801292a:	6899      	ldr	r1, [r3, #8]
 801292c:	4a06      	ldr	r2, [pc, #24]	; (8012948 <HAL_TIM_Base_Start_IT+0x78>)
 801292e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012930:	2a06      	cmp	r2, #6
 8012932:	d002      	beq.n	801293a <HAL_TIM_Base_Start_IT+0x6a>
 8012934:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8012938:	d1ef      	bne.n	801291a <HAL_TIM_Base_Start_IT+0x4a>
  return HAL_OK;
 801293a:	2000      	movs	r0, #0
}
 801293c:	4770      	bx	lr
 801293e:	bf00      	nop
 8012940:	40012c00 	.word	0x40012c00
 8012944:	40000400 	.word	0x40000400
 8012948:	00010007 	.word	0x00010007

0801294c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 801294c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8012950:	2b01      	cmp	r3, #1
 8012952:	d079      	beq.n	8012a48 <HAL_TIM_ConfigClockSource+0xfc>
{
 8012954:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8012956:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8012958:	2401      	movs	r4, #1
  tmpsmcr = htim->Instance->SMCR;
 801295a:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 801295c:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8012960:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8012964:	6895      	ldr	r5, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8012966:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012968:	4c4e      	ldr	r4, [pc, #312]	; (8012aa4 <HAL_TIM_ConfigClockSource+0x158>)
  switch (sClockSourceConfig->ClockSource)
 801296a:	2b60      	cmp	r3, #96	; 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801296c:	ea04 0405 	and.w	r4, r4, r5
  htim->Instance->SMCR = tmpsmcr;
 8012970:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8012972:	d06b      	beq.n	8012a4c <HAL_TIM_ConfigClockSource+0x100>
 8012974:	d835      	bhi.n	80129e2 <HAL_TIM_ConfigClockSource+0x96>
 8012976:	2b40      	cmp	r3, #64	; 0x40
 8012978:	d04c      	beq.n	8012a14 <HAL_TIM_ConfigClockSource+0xc8>
 801297a:	d923      	bls.n	80129c4 <HAL_TIM_ConfigClockSource+0x78>
 801297c:	2b50      	cmp	r3, #80	; 0x50
 801297e:	d118      	bne.n	80129b2 <HAL_TIM_ConfigClockSource+0x66>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012980:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012982:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012984:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012986:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 801298a:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801298c:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 801298e:	6993      	ldr	r3, [r2, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012990:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012994:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012998:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 801299c:	4321      	orrs	r1, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801299e:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 80129a0:	6211      	str	r1, [r2, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80129a2:	6893      	ldr	r3, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80129a4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80129a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80129ac:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80129b0:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 80129b2:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80129b4:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 80129b6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 80129ba:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
}
 80129be:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80129c0:	4618      	mov	r0, r3
}
 80129c2:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80129c4:	2b20      	cmp	r3, #32
 80129c6:	d002      	beq.n	80129ce <HAL_TIM_ConfigClockSource+0x82>
 80129c8:	d920      	bls.n	8012a0c <HAL_TIM_ConfigClockSource+0xc0>
 80129ca:	2b30      	cmp	r3, #48	; 0x30
 80129cc:	d1f1      	bne.n	80129b2 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr = TIMx->SMCR;
 80129ce:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80129d0:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80129d4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80129d8:	430b      	orrs	r3, r1
 80129da:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80129de:	6093      	str	r3, [r2, #8]
}
 80129e0:	e7e7      	b.n	80129b2 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 80129e2:	2b70      	cmp	r3, #112	; 0x70
 80129e4:	d04d      	beq.n	8012a82 <HAL_TIM_ConfigClockSource+0x136>
 80129e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80129ea:	d1e2      	bne.n	80129b2 <HAL_TIM_ConfigClockSource+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80129ec:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 80129f0:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 80129f2:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80129f4:	432b      	orrs	r3, r5
 80129f6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80129fa:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80129fe:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012a00:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012a02:	6893      	ldr	r3, [r2, #8]
 8012a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012a08:	6093      	str	r3, [r2, #8]
      break;
 8012a0a:	e7d2      	b.n	80129b2 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8012a0c:	f033 0110 	bics.w	r1, r3, #16
 8012a10:	d1cf      	bne.n	80129b2 <HAL_TIM_ConfigClockSource+0x66>
 8012a12:	e7dc      	b.n	80129ce <HAL_TIM_ConfigClockSource+0x82>
  tmpccer = TIMx->CCER;
 8012a14:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012a16:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012a18:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012a1a:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012a1e:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012a20:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012a22:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012a24:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012a28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012a2c:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8012a30:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8012a32:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8012a34:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8012a36:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8012a38:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8012a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8012a40:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8012a44:	6093      	str	r3, [r2, #8]
}
 8012a46:	e7b4      	b.n	80129b2 <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 8012a48:	2002      	movs	r0, #2
}
 8012a4a:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012a4c:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8012a4e:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012a50:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8012a54:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012a56:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012a58:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 8012a5a:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012a5c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012a60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8012a64:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012a68:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8012a6c:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8012a6e:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8012a70:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8012a72:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8012a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8012a7a:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8012a7e:	6093      	str	r3, [r2, #8]
}
 8012a80:	e797      	b.n	80129b2 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012a82:	68cc      	ldr	r4, [r1, #12]
 8012a84:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8012a88:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012a8a:	432b      	orrs	r3, r5
 8012a8c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012a90:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012a94:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8012a96:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8012a98:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8012a9a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8012a9e:	6093      	str	r3, [r2, #8]
      break;
 8012aa0:	e787      	b.n	80129b2 <HAL_TIM_ConfigClockSource+0x66>
 8012aa2:	bf00      	nop
 8012aa4:	ffce0088 	.word	0xffce0088

08012aa8 <HAL_TIM_OC_DelayElapsedCallback>:
 8012aa8:	4770      	bx	lr
 8012aaa:	bf00      	nop

08012aac <HAL_TIM_IC_CaptureCallback>:
 8012aac:	4770      	bx	lr
 8012aae:	bf00      	nop

08012ab0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8012ab0:	4770      	bx	lr
 8012ab2:	bf00      	nop

08012ab4 <HAL_TIM_TriggerCallback>:
 8012ab4:	4770      	bx	lr
 8012ab6:	bf00      	nop

08012ab8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8012ab8:	6803      	ldr	r3, [r0, #0]
{
 8012aba:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8012abc:	691a      	ldr	r2, [r3, #16]
{
 8012abe:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8012ac0:	0791      	lsls	r1, r2, #30
 8012ac2:	d502      	bpl.n	8012aca <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8012ac4:	68da      	ldr	r2, [r3, #12]
 8012ac6:	0792      	lsls	r2, r2, #30
 8012ac8:	d468      	bmi.n	8012b9c <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8012aca:	691a      	ldr	r2, [r3, #16]
 8012acc:	0752      	lsls	r2, r2, #29
 8012ace:	d502      	bpl.n	8012ad6 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8012ad0:	68da      	ldr	r2, [r3, #12]
 8012ad2:	0750      	lsls	r0, r2, #29
 8012ad4:	d44f      	bmi.n	8012b76 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8012ad6:	691a      	ldr	r2, [r3, #16]
 8012ad8:	0711      	lsls	r1, r2, #28
 8012ada:	d502      	bpl.n	8012ae2 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8012adc:	68da      	ldr	r2, [r3, #12]
 8012ade:	0712      	lsls	r2, r2, #28
 8012ae0:	d437      	bmi.n	8012b52 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8012ae2:	691a      	ldr	r2, [r3, #16]
 8012ae4:	06d0      	lsls	r0, r2, #27
 8012ae6:	d502      	bpl.n	8012aee <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8012ae8:	68da      	ldr	r2, [r3, #12]
 8012aea:	06d1      	lsls	r1, r2, #27
 8012aec:	d41e      	bmi.n	8012b2c <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8012aee:	691a      	ldr	r2, [r3, #16]
 8012af0:	07d2      	lsls	r2, r2, #31
 8012af2:	d502      	bpl.n	8012afa <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8012af4:	68da      	ldr	r2, [r3, #12]
 8012af6:	07d0      	lsls	r0, r2, #31
 8012af8:	d469      	bmi.n	8012bce <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8012afa:	691a      	ldr	r2, [r3, #16]
 8012afc:	0611      	lsls	r1, r2, #24
 8012afe:	d502      	bpl.n	8012b06 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8012b00:	68da      	ldr	r2, [r3, #12]
 8012b02:	0612      	lsls	r2, r2, #24
 8012b04:	d46b      	bmi.n	8012bde <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8012b06:	691a      	ldr	r2, [r3, #16]
 8012b08:	05d0      	lsls	r0, r2, #23
 8012b0a:	d502      	bpl.n	8012b12 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8012b0c:	68da      	ldr	r2, [r3, #12]
 8012b0e:	0611      	lsls	r1, r2, #24
 8012b10:	d46d      	bmi.n	8012bee <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8012b12:	691a      	ldr	r2, [r3, #16]
 8012b14:	0652      	lsls	r2, r2, #25
 8012b16:	d502      	bpl.n	8012b1e <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8012b18:	68da      	ldr	r2, [r3, #12]
 8012b1a:	0650      	lsls	r0, r2, #25
 8012b1c:	d46f      	bmi.n	8012bfe <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8012b1e:	691a      	ldr	r2, [r3, #16]
 8012b20:	0691      	lsls	r1, r2, #26
 8012b22:	d502      	bpl.n	8012b2a <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8012b24:	68da      	ldr	r2, [r3, #12]
 8012b26:	0692      	lsls	r2, r2, #26
 8012b28:	d449      	bmi.n	8012bbe <HAL_TIM_IRQHandler+0x106>
}
 8012b2a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8012b2c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012b30:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8012b32:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012b34:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012b36:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8012b38:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012b3a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8012b3e:	d16f      	bne.n	8012c20 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012b40:	f7ff ffb2 	bl	8012aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012b44:	4620      	mov	r0, r4
 8012b46:	f7ff ffb3 	bl	8012ab0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012b4a:	2200      	movs	r2, #0
 8012b4c:	6823      	ldr	r3, [r4, #0]
 8012b4e:	7722      	strb	r2, [r4, #28]
 8012b50:	e7cd      	b.n	8012aee <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8012b52:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012b56:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8012b58:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012b5a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012b5c:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8012b5e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012b60:	079b      	lsls	r3, r3, #30
 8012b62:	d15a      	bne.n	8012c1a <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012b64:	f7ff ffa0 	bl	8012aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012b68:	4620      	mov	r0, r4
 8012b6a:	f7ff ffa1 	bl	8012ab0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012b6e:	2200      	movs	r2, #0
 8012b70:	6823      	ldr	r3, [r4, #0]
 8012b72:	7722      	strb	r2, [r4, #28]
 8012b74:	e7b5      	b.n	8012ae2 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8012b76:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012b7a:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8012b7c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012b7e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012b80:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8012b82:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012b84:	f413 7f40 	tst.w	r3, #768	; 0x300
 8012b88:	d144      	bne.n	8012c14 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012b8a:	f7ff ff8d 	bl	8012aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012b8e:	4620      	mov	r0, r4
 8012b90:	f7ff ff8e 	bl	8012ab0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012b94:	2200      	movs	r2, #0
 8012b96:	6823      	ldr	r3, [r4, #0]
 8012b98:	7722      	strb	r2, [r4, #28]
 8012b9a:	e79c      	b.n	8012ad6 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8012b9c:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012ba0:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8012ba2:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012ba4:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012ba6:	699b      	ldr	r3, [r3, #24]
 8012ba8:	0799      	lsls	r1, r3, #30
 8012baa:	d130      	bne.n	8012c0e <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8012bac:	f7ff ff7c 	bl	8012aa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012bb0:	4620      	mov	r0, r4
 8012bb2:	f7ff ff7d 	bl	8012ab0 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	6823      	ldr	r3, [r4, #0]
 8012bba:	7722      	strb	r2, [r4, #28]
 8012bbc:	e785      	b.n	8012aca <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8012bbe:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8012bc2:	4620      	mov	r0, r4
}
 8012bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8012bc8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8012bca:	f000 b875 	b.w	8012cb8 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8012bce:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8012bd2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8012bd4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8012bd6:	f004 fdeb 	bl	80177b0 <HAL_TIM_PeriodElapsedCallback>
 8012bda:	6823      	ldr	r3, [r4, #0]
 8012bdc:	e78d      	b.n	8012afa <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8012bde:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8012be2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8012be4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8012be6:	f000 f869 	bl	8012cbc <HAL_TIMEx_BreakCallback>
 8012bea:	6823      	ldr	r3, [r4, #0]
 8012bec:	e78b      	b.n	8012b06 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8012bee:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 8012bf2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8012bf4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8012bf6:	f000 f863 	bl	8012cc0 <HAL_TIMEx_Break2Callback>
 8012bfa:	6823      	ldr	r3, [r4, #0]
 8012bfc:	e789      	b.n	8012b12 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8012bfe:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8012c02:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8012c04:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8012c06:	f7ff ff55 	bl	8012ab4 <HAL_TIM_TriggerCallback>
 8012c0a:	6823      	ldr	r3, [r4, #0]
 8012c0c:	e787      	b.n	8012b1e <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8012c0e:	f7ff ff4d 	bl	8012aac <HAL_TIM_IC_CaptureCallback>
 8012c12:	e7d0      	b.n	8012bb6 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8012c14:	f7ff ff4a 	bl	8012aac <HAL_TIM_IC_CaptureCallback>
 8012c18:	e7bc      	b.n	8012b94 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8012c1a:	f7ff ff47 	bl	8012aac <HAL_TIM_IC_CaptureCallback>
 8012c1e:	e7a6      	b.n	8012b6e <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8012c20:	f7ff ff44 	bl	8012aac <HAL_TIM_IC_CaptureCallback>
 8012c24:	e791      	b.n	8012b4a <HAL_TIM_IRQHandler+0x92>
 8012c26:	bf00      	nop

08012c28 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012c28:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8012c2c:	2b01      	cmp	r3, #1
 8012c2e:	d03c      	beq.n	8012caa <HAL_TIMEx_MasterConfigSynchronization+0x82>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012c30:	2302      	movs	r3, #2
{
 8012c32:	b430      	push	{r4, r5}

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012c34:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012c36:	4d1e      	ldr	r5, [pc, #120]	; (8012cb0 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
  htim->State = HAL_TIM_STATE_BUSY;
 8012c38:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012c3c:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8012c3e:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8012c40:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012c42:	d028      	beq.n	8012c96 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8012c44:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8012c48:	42aa      	cmp	r2, r5
 8012c4a:	d024      	beq.n	8012c96 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012c4c:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8012c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012c52:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012c54:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8012c58:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012c5a:	d00e      	beq.n	8012c7a <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8012c5c:	4b15      	ldr	r3, [pc, #84]	; (8012cb4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 8012c5e:	429a      	cmp	r2, r3
 8012c60:	d00b      	beq.n	8012c7a <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8012c62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012c66:	429a      	cmp	r2, r3
 8012c68:	d007      	beq.n	8012c7a <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8012c6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012c6e:	429a      	cmp	r2, r3
 8012c70:	d003      	beq.n	8012c7a <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8012c72:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 8012c76:	429a      	cmp	r2, r3
 8012c78:	d104      	bne.n	8012c84 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012c7a:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012c7c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012c80:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012c82:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8012c84:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8012c86:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8012c88:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8012c8c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  return HAL_OK;
}
 8012c90:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8012c92:	4618      	mov	r0, r3
}
 8012c94:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012c96:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012c98:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012c9c:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012c9e:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8012ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012ca4:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8012ca6:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012ca8:	e7e7      	b.n	8012c7a <HAL_TIMEx_MasterConfigSynchronization+0x52>
  __HAL_LOCK(htim);
 8012caa:	2002      	movs	r0, #2
}
 8012cac:	4770      	bx	lr
 8012cae:	bf00      	nop
 8012cb0:	40012c00 	.word	0x40012c00
 8012cb4:	40000400 	.word	0x40000400

08012cb8 <HAL_TIMEx_CommutCallback>:
 8012cb8:	4770      	bx	lr
 8012cba:	bf00      	nop

08012cbc <HAL_TIMEx_BreakCallback>:
 8012cbc:	4770      	bx	lr
 8012cbe:	bf00      	nop

08012cc0 <HAL_TIMEx_Break2Callback>:
 8012cc0:	4770      	bx	lr
 8012cc2:	bf00      	nop

08012cc4 <HAL_UART_DeInit>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012cc4:	b1d0      	cbz	r0, 8012cfc <HAL_UART_DeInit+0x38>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8012cc6:	2224      	movs	r2, #36	; 0x24
{
 8012cc8:	b538      	push	{r3, r4, r5, lr}

  __HAL_UART_DISABLE(huart);

  huart->Instance->CR1 = 0x0U;
 8012cca:	2500      	movs	r5, #0
 8012ccc:	4604      	mov	r4, r0
  __HAL_UART_DISABLE(huart);
 8012cce:	6803      	ldr	r3, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8012cd0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8012cd4:	681a      	ldr	r2, [r3, #0]
 8012cd6:	f022 0201 	bic.w	r2, r2, #1
 8012cda:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0U;
 8012cdc:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8012cde:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8012ce0:	609d      	str	r5, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8012ce2:	f7fd ff13 	bl	8010b0c <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState = HAL_UART_STATE_RESET;
  huart->RxState = HAL_UART_STATE_RESET;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

  __HAL_UNLOCK(huart);
 8012ce6:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012cea:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c

  return HAL_OK;
 8012cee:	4628      	mov	r0, r5
  huart->gState = HAL_UART_STATE_RESET;
 8012cf0:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 8012cf4:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012cf8:	66e5      	str	r5, [r4, #108]	; 0x6c
}
 8012cfa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8012cfc:	2001      	movs	r0, #1
}
 8012cfe:	4770      	bx	lr

08012d00 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d04:	4604      	mov	r4, r0
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012d06:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8012d0a:	2820      	cmp	r0, #32
 8012d0c:	d155      	bne.n	8012dba <HAL_UART_Receive+0xba>
  {
    if ((pData == NULL) || (Size == 0U))
 8012d0e:	4689      	mov	r9, r1
 8012d10:	2900      	cmp	r1, #0
 8012d12:	d04f      	beq.n	8012db4 <HAL_UART_Receive+0xb4>
 8012d14:	4616      	mov	r6, r2
 8012d16:	2a00      	cmp	r2, #0
 8012d18:	d04c      	beq.n	8012db4 <HAL_UART_Receive+0xb4>
 8012d1a:	461d      	mov	r5, r3
    {
      return  HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8012d1c:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8012d20:	2b01      	cmp	r3, #1
 8012d22:	d04a      	beq.n	8012dba <HAL_UART_Receive+0xba>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012d24:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012d26:	f04f 0800 	mov.w	r8, #0
    __HAL_LOCK(huart);
 8012d2a:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012d2c:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
    __HAL_LOCK(huart);
 8012d30:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012d34:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012d38:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012d3c:	f7fd fff4 	bl	8010d28 <HAL_GetTick>

    huart->RxXferSize  = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8012d40:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8012d42:	4607      	mov	r7, r0
    UART_MASK_COMPUTATION(huart);
 8012d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize  = Size;
 8012d48:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
    huart->RxXferCount = Size;
 8012d4c:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
    UART_MASK_COMPUTATION(huart);
 8012d50:	d036      	beq.n	8012dc0 <HAL_UART_Receive+0xc0>
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	f040 8087 	bne.w	8012e66 <HAL_UART_Receive+0x166>
 8012d58:	6923      	ldr	r3, [r4, #16]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	f000 808e 	beq.w	8012e7c <HAL_UART_Receive+0x17c>
 8012d60:	267f      	movs	r6, #127	; 0x7f
 8012d62:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
      pdata16bits = (uint16_t *) pData;
    }
    else
    {
      pdata8bits  = pData;
      pdata16bits = NULL;
 8012d66:	f04f 0800 	mov.w	r8, #0
    }

    __HAL_UNLOCK(huart);
 8012d6a:	2200      	movs	r2, #0

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8012d6c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
    __HAL_UNLOCK(huart);
 8012d70:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    while (huart->RxXferCount > 0U)
 8012d74:	b29b      	uxth	r3, r3
 8012d76:	b1bb      	cbz	r3, 8012da8 <HAL_UART_Receive+0xa8>
 8012d78:	6822      	ldr	r2, [r4, #0]
 8012d7a:	1c69      	adds	r1, r5, #1
 8012d7c:	d12a      	bne.n	8012dd4 <HAL_UART_Receive+0xd4>
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012d7e:	69d3      	ldr	r3, [r2, #28]
 8012d80:	069b      	lsls	r3, r3, #26
 8012d82:	d5fc      	bpl.n	8012d7e <HAL_UART_Receive+0x7e>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8012d84:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8012d86:	4033      	ands	r3, r6
      if (pdata8bits == NULL)
 8012d88:	f1b9 0f00 	cmp.w	r9, #0
 8012d8c:	d049      	beq.n	8012e22 <HAL_UART_Receive+0x122>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8012d8e:	f809 3b01 	strb.w	r3, [r9], #1
      huart->RxXferCount--;
 8012d92:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8012d96:	3b01      	subs	r3, #1
 8012d98:	b29b      	uxth	r3, r3
 8012d9a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8012d9e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8012da2:	b29b      	uxth	r3, r3
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d1e7      	bne.n	8012d78 <HAL_UART_Receive+0x78>
    huart->RxState = HAL_UART_STATE_READY;
 8012da8:	2320      	movs	r3, #32
    return HAL_OK;
 8012daa:	2000      	movs	r0, #0
    huart->RxState = HAL_UART_STATE_READY;
 8012dac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 8012db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8012db4:	2001      	movs	r0, #1
}
 8012db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 8012dba:	2002      	movs	r0, #2
}
 8012dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    UART_MASK_COMPUTATION(huart);
 8012dc0:	6923      	ldr	r3, [r4, #16]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d156      	bne.n	8012e74 <HAL_UART_Receive+0x174>
 8012dc6:	f240 16ff 	movw	r6, #511	; 0x1ff
 8012dca:	46c8      	mov	r8, r9
 8012dcc:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
      pdata8bits  = NULL;
 8012dd0:	4699      	mov	r9, r3
 8012dd2:	e7ca      	b.n	8012d6a <HAL_UART_Receive+0x6a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012dd4:	69d3      	ldr	r3, [r2, #28]
 8012dd6:	f013 0a20 	ands.w	sl, r3, #32
 8012dda:	d1d3      	bne.n	8012d84 <HAL_UART_Receive+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012ddc:	f7fd ffa4 	bl	8010d28 <HAL_GetTick>
 8012de0:	1bc0      	subs	r0, r0, r7
 8012de2:	4285      	cmp	r5, r0
 8012de4:	d32b      	bcc.n	8012e3e <HAL_UART_Receive+0x13e>
 8012de6:	b355      	cbz	r5, 8012e3e <HAL_UART_Receive+0x13e>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012de8:	6822      	ldr	r2, [r4, #0]
 8012dea:	6813      	ldr	r3, [r2, #0]
 8012dec:	075b      	lsls	r3, r3, #29
 8012dee:	d5c4      	bpl.n	8012d7a <HAL_UART_Receive+0x7a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012df0:	69d3      	ldr	r3, [r2, #28]
 8012df2:	0518      	lsls	r0, r3, #20
 8012df4:	d5c1      	bpl.n	8012d7a <HAL_UART_Receive+0x7a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012df6:	f44f 6100 	mov.w	r1, #2048	; 0x800

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

          huart->gState = HAL_UART_STATE_READY;
 8012dfa:	2320      	movs	r3, #32
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012dfc:	6211      	str	r1, [r2, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8012dfe:	6811      	ldr	r1, [r2, #0]
        return HAL_TIMEOUT;
 8012e00:	2003      	movs	r0, #3
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8012e02:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 8012e06:	6011      	str	r1, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012e08:	6891      	ldr	r1, [r2, #8]
 8012e0a:	f021 0101 	bic.w	r1, r1, #1
 8012e0e:	6091      	str	r1, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 8012e10:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012e14:	f884 a080 	strb.w	sl, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8012e18:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012e1c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

          return HAL_TIMEOUT;
 8012e20:	e7c9      	b.n	8012db6 <HAL_UART_Receive+0xb6>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8012e22:	f828 3b02 	strh.w	r3, [r8], #2
      huart->RxXferCount--;
 8012e26:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8012e2a:	3b01      	subs	r3, #1
 8012e2c:	b29b      	uxth	r3, r3
 8012e2e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8012e32:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8012e36:	b29b      	uxth	r3, r3
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d19e      	bne.n	8012d7a <HAL_UART_Receive+0x7a>
 8012e3c:	e7b4      	b.n	8012da8 <HAL_UART_Receive+0xa8>
        __HAL_UNLOCK(huart);
 8012e3e:	2500      	movs	r5, #0
        huart->gState = HAL_UART_STATE_READY;
 8012e40:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8012e42:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 8012e44:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8012e46:	681a      	ldr	r2, [r3, #0]
 8012e48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8012e4c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012e4e:	689a      	ldr	r2, [r3, #8]
 8012e50:	f022 0201 	bic.w	r2, r2, #1
 8012e54:	609a      	str	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 8012e56:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8012e5a:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8012e5e:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
}
 8012e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    UART_MASK_COMPUTATION(huart);
 8012e66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012e6a:	d00b      	beq.n	8012e84 <HAL_UART_Receive+0x184>
 8012e6c:	4646      	mov	r6, r8
 8012e6e:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
 8012e72:	e778      	b.n	8012d66 <HAL_UART_Receive+0x66>
 8012e74:	26ff      	movs	r6, #255	; 0xff
 8012e76:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012e7a:	e776      	b.n	8012d6a <HAL_UART_Receive+0x6a>
    UART_MASK_COMPUTATION(huart);
 8012e7c:	26ff      	movs	r6, #255	; 0xff
 8012e7e:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
 8012e82:	e770      	b.n	8012d66 <HAL_UART_Receive+0x66>
 8012e84:	6923      	ldr	r3, [r4, #16]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	f43f af6a 	beq.w	8012d60 <HAL_UART_Receive+0x60>
 8012e8c:	263f      	movs	r6, #63	; 0x3f
 8012e8e:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
 8012e92:	e768      	b.n	8012d66 <HAL_UART_Receive+0x66>

08012e94 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8012e94:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8012e98:	2b20      	cmp	r3, #32
 8012e9a:	d147      	bne.n	8012f2c <HAL_UART_Receive_IT+0x98>
    if ((pData == NULL) || (Size == 0U))
 8012e9c:	2900      	cmp	r1, #0
 8012e9e:	d043      	beq.n	8012f28 <HAL_UART_Receive_IT+0x94>
 8012ea0:	2a00      	cmp	r2, #0
 8012ea2:	d041      	beq.n	8012f28 <HAL_UART_Receive_IT+0x94>
    __HAL_LOCK(huart);
 8012ea4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8012ea8:	2b01      	cmp	r3, #1
 8012eaa:	d03f      	beq.n	8012f2c <HAL_UART_Receive_IT+0x98>
 8012eac:	2301      	movs	r3, #1
{
 8012eae:	b470      	push	{r4, r5, r6}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012eb0:	2500      	movs	r5, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012eb2:	6804      	ldr	r4, [r0, #0]
    __HAL_LOCK(huart);
 8012eb4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012eb8:	4b45      	ldr	r3, [pc, #276]	; (8012fd0 <HAL_UART_Receive_IT+0x13c>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012eba:	66c5      	str	r5, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012ebc:	429c      	cmp	r4, r3
 8012ebe:	d006      	beq.n	8012ece <HAL_UART_Receive_IT+0x3a>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012ec0:	6863      	ldr	r3, [r4, #4]
 8012ec2:	021b      	lsls	r3, r3, #8
 8012ec4:	d503      	bpl.n	8012ece <HAL_UART_Receive_IT+0x3a>
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012ec6:	6823      	ldr	r3, [r4, #0]
 8012ec8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012ecc:	6023      	str	r3, [r4, #0]
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  huart->pRxBuffPtr  = pData;
  huart->RxXferSize  = Size;
  huart->RxXferCount = Size;
  huart->RxISR       = NULL;
 8012ece:	2500      	movs	r5, #0

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8012ed0:	6883      	ldr	r3, [r0, #8]
  huart->pRxBuffPtr  = pData;
 8012ed2:	6581      	str	r1, [r0, #88]	; 0x58
  UART_MASK_COMPUTATION(huart);
 8012ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  huart->RxXferSize  = Size;
 8012ed8:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8012edc:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8012ee0:	6705      	str	r5, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 8012ee2:	d025      	beq.n	8012f30 <HAL_UART_Receive_IT+0x9c>
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d138      	bne.n	8012f5a <HAL_UART_Receive_IT+0xc6>
 8012ee8:	6903      	ldr	r3, [r0, #16]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d05e      	beq.n	8012fac <HAL_UART_Receive_IT+0x118>
 8012eee:	237f      	movs	r3, #127	; 0x7f
 8012ef0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012ef4:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012ef6:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012ef8:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012efc:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012f00:	68a3      	ldr	r3, [r4, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8012f02:	6e41      	ldr	r1, [r0, #100]	; 0x64
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012f04:	f043 0301 	orr.w	r3, r3, #1
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8012f08:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012f0c:	60a3      	str	r3, [r4, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8012f0e:	d03a      	beq.n	8012f86 <HAL_UART_Receive_IT+0xf2>
    {
      huart->RxISR = UART_RxISR_16BIT;
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8012f10:	4930      	ldr	r1, [pc, #192]	; (8012fd4 <HAL_UART_Receive_IT+0x140>)
    }

    __HAL_UNLOCK(huart);
 8012f12:	2300      	movs	r3, #0
 8012f14:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8012f18:	6822      	ldr	r2, [r4, #0]
 8012f1a:	6701      	str	r1, [r0, #112]	; 0x70
    return(UART_Start_Receive_IT(huart, pData, Size));
 8012f1c:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8012f1e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8012f22:	6022      	str	r2, [r4, #0]
}
 8012f24:	bc70      	pop	{r4, r5, r6}
 8012f26:	4770      	bx	lr
      return HAL_ERROR;
 8012f28:	2001      	movs	r0, #1
 8012f2a:	4770      	bx	lr
    return HAL_BUSY;
 8012f2c:	2002      	movs	r0, #2
}
 8012f2e:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8012f30:	6903      	ldr	r3, [r0, #16]
 8012f32:	b9c3      	cbnz	r3, 8012f66 <HAL_UART_Receive_IT+0xd2>
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012f34:	2122      	movs	r1, #34	; 0x22
 8012f36:	f240 15ff 	movw	r5, #511	; 0x1ff
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012f3a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012f3e:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012f42:	68a3      	ldr	r3, [r4, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8012f44:	6e41      	ldr	r1, [r0, #100]	; 0x64
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012f46:	f043 0301 	orr.w	r3, r3, #1
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8012f4a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8012f4e:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012f52:	60a3      	str	r3, [r4, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8012f54:	d035      	beq.n	8012fc2 <HAL_UART_Receive_IT+0x12e>
      huart->RxISR = UART_RxISR_16BIT;
 8012f56:	4920      	ldr	r1, [pc, #128]	; (8012fd8 <HAL_UART_Receive_IT+0x144>)
 8012f58:	e7db      	b.n	8012f12 <HAL_UART_Receive_IT+0x7e>
  UART_MASK_COMPUTATION(huart);
 8012f5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012f5e:	d029      	beq.n	8012fb4 <HAL_UART_Receive_IT+0x120>
 8012f60:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
 8012f64:	e7c6      	b.n	8012ef4 <HAL_UART_Receive_IT+0x60>
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012f66:	2322      	movs	r3, #34	; 0x22
 8012f68:	26ff      	movs	r6, #255	; 0xff
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012f6a:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012f6e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012f72:	68a3      	ldr	r3, [r4, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8012f74:	6e41      	ldr	r1, [r0, #100]	; 0x64
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012f76:	f043 0301 	orr.w	r3, r3, #1
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8012f7a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8012f7e:	f8a0 6060 	strh.w	r6, [r0, #96]	; 0x60
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012f82:	60a3      	str	r3, [r4, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8012f84:	d1c4      	bne.n	8012f10 <HAL_UART_Receive_IT+0x7c>
 8012f86:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8012f8a:	4293      	cmp	r3, r2
 8012f8c:	d8c0      	bhi.n	8012f10 <HAL_UART_Receive_IT+0x7c>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8012f8e:	4913      	ldr	r1, [pc, #76]	; (8012fdc <HAL_UART_Receive_IT+0x148>)
    __HAL_UNLOCK(huart);
 8012f90:	2300      	movs	r3, #0
 8012f92:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012f96:	6822      	ldr	r2, [r4, #0]
 8012f98:	6701      	str	r1, [r0, #112]	; 0x70
 8012f9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012f9e:	6022      	str	r2, [r4, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012fa0:	68a2      	ldr	r2, [r4, #8]
    return(UART_Start_Receive_IT(huart, pData, Size));
 8012fa2:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012fa4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8012fa8:	60a2      	str	r2, [r4, #8]
 8012faa:	e7bb      	b.n	8012f24 <HAL_UART_Receive_IT+0x90>
  UART_MASK_COMPUTATION(huart);
 8012fac:	23ff      	movs	r3, #255	; 0xff
 8012fae:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8012fb2:	e79f      	b.n	8012ef4 <HAL_UART_Receive_IT+0x60>
 8012fb4:	6903      	ldr	r3, [r0, #16]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d099      	beq.n	8012eee <HAL_UART_Receive_IT+0x5a>
 8012fba:	233f      	movs	r3, #63	; 0x3f
 8012fbc:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8012fc0:	e798      	b.n	8012ef4 <HAL_UART_Receive_IT+0x60>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8012fc2:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8012fc6:	4293      	cmp	r3, r2
 8012fc8:	d8c5      	bhi.n	8012f56 <HAL_UART_Receive_IT+0xc2>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8012fca:	4905      	ldr	r1, [pc, #20]	; (8012fe0 <HAL_UART_Receive_IT+0x14c>)
 8012fcc:	e7e0      	b.n	8012f90 <HAL_UART_Receive_IT+0xfc>
 8012fce:	bf00      	nop
 8012fd0:	40008000 	.word	0x40008000
 8012fd4:	080132cd 	.word	0x080132cd
 8012fd8:	0801334d 	.word	0x0801334d
 8012fdc:	080133c5 	.word	0x080133c5
 8012fe0:	08013539 	.word	0x08013539

08012fe4 <HAL_UART_ErrorCallback>:
 8012fe4:	4770      	bx	lr
 8012fe6:	bf00      	nop

08012fe8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012fe8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
  huart->RxXferCount = 0U;
 8012fea:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012fec:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8012fee:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8012ff2:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012ff6:	f7ff fff5 	bl	8012fe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012ffa:	bd08      	pop	{r3, pc}

08012ffc <HAL_UARTEx_RxEventCallback>:
}
 8012ffc:	4770      	bx	lr
 8012ffe:	bf00      	nop

08013000 <HAL_UART_IRQHandler>:
{
 8013000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8013004:	f640 060f 	movw	r6, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8013008:	6802      	ldr	r2, [r0, #0]
{
 801300a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801300c:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801300e:	6815      	ldr	r5, [r2, #0]
  if (errorflags == 0U)
 8013010:	4233      	tst	r3, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8013012:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 8013014:	d027      	beq.n	8013066 <HAL_UART_IRQHandler+0x66>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8013016:	48aa      	ldr	r0, [pc, #680]	; (80132c0 <HAL_UART_IRQHandler+0x2c0>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8013018:	4eaa      	ldr	r6, [pc, #680]	; (80132c4 <HAL_UART_IRQHandler+0x2c4>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801301a:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801301c:	402e      	ands	r6, r5
 801301e:	4306      	orrs	r6, r0
 8013020:	d153      	bne.n	80130ca <HAL_UART_IRQHandler+0xca>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013022:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8013024:	2801      	cmp	r0, #1
 8013026:	d02c      	beq.n	8013082 <HAL_UART_IRQHandler+0x82>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8013028:	02de      	lsls	r6, r3, #11
 801302a:	d502      	bpl.n	8013032 <HAL_UART_IRQHandler+0x32>
 801302c:	0248      	lsls	r0, r1, #9
 801302e:	f100 80d7 	bmi.w	80131e0 <HAL_UART_IRQHandler+0x1e0>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8013032:	061f      	lsls	r7, r3, #24
 8013034:	d506      	bpl.n	8013044 <HAL_UART_IRQHandler+0x44>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8013036:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801303a:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801303e:	4301      	orrs	r1, r0
 8013040:	f040 80c6 	bne.w	80131d0 <HAL_UART_IRQHandler+0x1d0>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8013044:	065e      	lsls	r6, r3, #25
 8013046:	d502      	bpl.n	801304e <HAL_UART_IRQHandler+0x4e>
 8013048:	0668      	lsls	r0, r5, #25
 801304a:	f100 80d5 	bmi.w	80131f8 <HAL_UART_IRQHandler+0x1f8>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801304e:	0219      	lsls	r1, r3, #8
 8013050:	d502      	bpl.n	8013058 <HAL_UART_IRQHandler+0x58>
 8013052:	006a      	lsls	r2, r5, #1
 8013054:	f100 80dd 	bmi.w	8013212 <HAL_UART_IRQHandler+0x212>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8013058:	01db      	lsls	r3, r3, #7
 801305a:	d502      	bpl.n	8013062 <HAL_UART_IRQHandler+0x62>
 801305c:	2d00      	cmp	r5, #0
 801305e:	f2c0 810b 	blt.w	8013278 <HAL_UART_IRQHandler+0x278>
}
 8013062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8013066:	069e      	lsls	r6, r3, #26
 8013068:	d5db      	bpl.n	8013022 <HAL_UART_IRQHandler+0x22>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801306a:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801306e:	f001 5780 	and.w	r7, r1, #268435456	; 0x10000000
 8013072:	433e      	orrs	r6, r7
 8013074:	d0d5      	beq.n	8013022 <HAL_UART_IRQHandler+0x22>
      if (huart->RxISR != NULL)
 8013076:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8013078:	2b00      	cmp	r3, #0
 801307a:	d0f2      	beq.n	8013062 <HAL_UART_IRQHandler+0x62>
}
 801307c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013080:	4718      	bx	r3
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8013082:	06d8      	lsls	r0, r3, #27
 8013084:	d5d0      	bpl.n	8013028 <HAL_UART_IRQHandler+0x28>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8013086:	06ef      	lsls	r7, r5, #27
 8013088:	d5ce      	bpl.n	8013028 <HAL_UART_IRQHandler+0x28>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801308a:	2310      	movs	r3, #16
 801308c:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801308e:	6893      	ldr	r3, [r2, #8]
 8013090:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8013094:	f000 80c9 	beq.w	801322a <HAL_UART_IRQHandler+0x22a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8013098:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 801309a:	6801      	ldr	r1, [r0, #0]
 801309c:	684b      	ldr	r3, [r1, #4]
 801309e:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d0de      	beq.n	8013062 <HAL_UART_IRQHandler+0x62>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80130a4:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 80130a8:	429d      	cmp	r5, r3
 80130aa:	d9da      	bls.n	8013062 <HAL_UART_IRQHandler+0x62>
        huart->RxXferCount = nb_remaining_rx_data;
 80130ac:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80130b0:	680b      	ldr	r3, [r1, #0]
 80130b2:	f013 0320 	ands.w	r3, r3, #32
 80130b6:	f000 80ea 	beq.w	801328e <HAL_UART_IRQHandler+0x28e>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80130ba:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 80130be:	4620      	mov	r0, r4
 80130c0:	1a69      	subs	r1, r5, r1
 80130c2:	b289      	uxth	r1, r1
 80130c4:	f7ff ff9a 	bl	8012ffc <HAL_UARTEx_RxEventCallback>
 80130c8:	e7cb      	b.n	8013062 <HAL_UART_IRQHandler+0x62>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80130ca:	07df      	lsls	r7, r3, #31
 80130cc:	d509      	bpl.n	80130e2 <HAL_UART_IRQHandler+0xe2>
 80130ce:	05ee      	lsls	r6, r5, #23
 80130d0:	d507      	bpl.n	80130e2 <HAL_UART_IRQHandler+0xe2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80130d2:	2601      	movs	r6, #1
 80130d4:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80130d6:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 80130da:	f046 0601 	orr.w	r6, r6, #1
 80130de:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80130e2:	079f      	lsls	r7, r3, #30
 80130e4:	d567      	bpl.n	80131b6 <HAL_UART_IRQHandler+0x1b6>
 80130e6:	07ce      	lsls	r6, r1, #31
 80130e8:	d509      	bpl.n	80130fe <HAL_UART_IRQHandler+0xfe>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80130ea:	2602      	movs	r6, #2
 80130ec:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80130ee:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80130f2:	075f      	lsls	r7, r3, #29
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80130f4:	f046 0604 	orr.w	r6, r6, #4
 80130f8:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80130fc:	d45f      	bmi.n	80131be <HAL_UART_IRQHandler+0x1be>
    if (((isrflags & USART_ISR_ORE) != 0U)
 80130fe:	071e      	lsls	r6, r3, #28
 8013100:	d50b      	bpl.n	801311a <HAL_UART_IRQHandler+0x11a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013102:	f005 0620 	and.w	r6, r5, #32
 8013106:	4330      	orrs	r0, r6
 8013108:	d007      	beq.n	801311a <HAL_UART_IRQHandler+0x11a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801310a:	2008      	movs	r0, #8
 801310c:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801310e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8013112:	f040 0008 	orr.w	r0, r0, #8
 8013116:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801311a:	0518      	lsls	r0, r3, #20
 801311c:	d50a      	bpl.n	8013134 <HAL_UART_IRQHandler+0x134>
 801311e:	016f      	lsls	r7, r5, #5
 8013120:	d508      	bpl.n	8013134 <HAL_UART_IRQHandler+0x134>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013122:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8013126:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8013128:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 801312c:	f040 0020 	orr.w	r0, r0, #32
 8013130:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013134:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8013138:	2800      	cmp	r0, #0
 801313a:	d092      	beq.n	8013062 <HAL_UART_IRQHandler+0x62>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801313c:	069e      	lsls	r6, r3, #26
 801313e:	d506      	bpl.n	801314e <HAL_UART_IRQHandler+0x14e>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8013140:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8013144:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8013148:	ea55 0301 	orrs.w	r3, r5, r1
 801314c:	d166      	bne.n	801321c <HAL_UART_IRQHandler+0x21c>
      errorcode = huart->ErrorCode;
 801314e:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013152:	6893      	ldr	r3, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8013154:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801315c:	431d      	orrs	r5, r3
 801315e:	f000 8090 	beq.w	8013282 <HAL_UART_IRQHandler+0x282>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013162:	6813      	ldr	r3, [r2, #0]
 8013164:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013168:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801316a:	6893      	ldr	r3, [r2, #8]
 801316c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013170:	f023 0301 	bic.w	r3, r3, #1
 8013174:	6093      	str	r3, [r2, #8]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013176:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013178:	2b01      	cmp	r3, #1
 801317a:	d103      	bne.n	8013184 <HAL_UART_IRQHandler+0x184>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801317c:	6813      	ldr	r3, [r2, #0]
 801317e:	f023 0310 	bic.w	r3, r3, #16
 8013182:	6013      	str	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8013184:	2120      	movs	r1, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013186:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8013188:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801318c:	66e3      	str	r3, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801318e:	6891      	ldr	r1, [r2, #8]
  huart->RxISR = NULL;
 8013190:	6723      	str	r3, [r4, #112]	; 0x70
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013192:	064d      	lsls	r5, r1, #25
 8013194:	d52c      	bpl.n	80131f0 <HAL_UART_IRQHandler+0x1f0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013196:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8013198:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801319a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801319e:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 80131a0:	b330      	cbz	r0, 80131f0 <HAL_UART_IRQHandler+0x1f0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80131a2:	4b49      	ldr	r3, [pc, #292]	; (80132c8 <HAL_UART_IRQHandler+0x2c8>)
 80131a4:	6403      	str	r3, [r0, #64]	; 0x40
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80131a6:	f7fd fe95 	bl	8010ed4 <HAL_DMA_Abort_IT>
 80131aa:	2800      	cmp	r0, #0
 80131ac:	f43f af59 	beq.w	8013062 <HAL_UART_IRQHandler+0x62>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80131b0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80131b2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80131b4:	e762      	b.n	801307c <HAL_UART_IRQHandler+0x7c>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80131b6:	075e      	lsls	r6, r3, #29
 80131b8:	d5a1      	bpl.n	80130fe <HAL_UART_IRQHandler+0xfe>
 80131ba:	07cf      	lsls	r7, r1, #31
 80131bc:	d59f      	bpl.n	80130fe <HAL_UART_IRQHandler+0xfe>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80131be:	2604      	movs	r6, #4
 80131c0:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80131c2:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 80131c6:	f046 0602 	orr.w	r6, r6, #2
 80131ca:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 80131ce:	e796      	b.n	80130fe <HAL_UART_IRQHandler+0xfe>
    if (huart->TxISR != NULL)
 80131d0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	f43f af45 	beq.w	8013062 <HAL_UART_IRQHandler+0x62>
      huart->TxISR(huart);
 80131d8:	4620      	mov	r0, r4
}
 80131da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 80131de:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80131e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 80131e4:	4620      	mov	r0, r4
}
 80131e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80131ea:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80131ec:	f000 bdf2 	b.w	8013dd4 <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 80131f0:	4620      	mov	r0, r4
 80131f2:	f7ff fef7 	bl	8012fe4 <HAL_UART_ErrorCallback>
 80131f6:	e734      	b.n	8013062 <HAL_UART_IRQHandler+0x62>
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80131f8:	2520      	movs	r5, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80131fa:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80131fc:	6813      	ldr	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80131fe:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013200:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013204:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8013206:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  huart->TxISR = NULL;
 801320a:	6761      	str	r1, [r4, #116]	; 0x74
  HAL_UART_TxCpltCallback(huart);
 801320c:	f004 fbae 	bl	801796c <HAL_UART_TxCpltCallback>
    return;
 8013210:	e727      	b.n	8013062 <HAL_UART_IRQHandler+0x62>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8013212:	4620      	mov	r0, r4
}
 8013214:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8013218:	f000 bde0 	b.w	8013ddc <HAL_UARTEx_TxFifoEmptyCallback>
        if (huart->RxISR != NULL)
 801321c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801321e:	2b00      	cmp	r3, #0
 8013220:	d095      	beq.n	801314e <HAL_UART_IRQHandler+0x14e>
          huart->RxISR(huart);
 8013222:	4620      	mov	r0, r4
 8013224:	4798      	blx	r3
 8013226:	6822      	ldr	r2, [r4, #0]
 8013228:	e791      	b.n	801314e <HAL_UART_IRQHandler+0x14e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801322a:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
      if (  (huart->RxXferCount > 0U)
 801322e:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8013232:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 8013234:	b289      	uxth	r1, r1
 8013236:	2900      	cmp	r1, #0
 8013238:	f43f af13 	beq.w	8013062 <HAL_UART_IRQHandler+0x62>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801323c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8013240:	1a08      	subs	r0, r1, r0
 8013242:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 8013244:	2900      	cmp	r1, #0
 8013246:	f43f af0c 	beq.w	8013062 <HAL_UART_IRQHandler+0x62>
        huart->RxState = HAL_UART_STATE_READY;
 801324a:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801324c:	6810      	ldr	r0, [r2, #0]
 801324e:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 8013252:	6010      	str	r0, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013254:	6890      	ldr	r0, [r2, #8]
 8013256:	f020 5080 	bic.w	r0, r0, #268435456	; 0x10000000
 801325a:	f020 0001 	bic.w	r0, r0, #1
 801325e:	6090      	str	r0, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8013260:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013264:	66e3      	str	r3, [r4, #108]	; 0x6c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013266:	6810      	ldr	r0, [r2, #0]
        huart->RxISR = NULL;
 8013268:	6723      	str	r3, [r4, #112]	; 0x70
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801326a:	f020 0310 	bic.w	r3, r0, #16
 801326e:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8013270:	4620      	mov	r0, r4
 8013272:	f7ff fec3 	bl	8012ffc <HAL_UARTEx_RxEventCallback>
 8013276:	e6f4      	b.n	8013062 <HAL_UART_IRQHandler+0x62>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8013278:	4620      	mov	r0, r4
}
 801327a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 801327e:	f000 bdab 	b.w	8013dd8 <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 8013282:	4620      	mov	r0, r4
 8013284:	f7ff feae 	bl	8012fe4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013288:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 801328c:	e6e9      	b.n	8013062 <HAL_UART_IRQHandler+0x62>
          huart->RxState = HAL_UART_STATE_READY;
 801328e:	2520      	movs	r5, #32
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013290:	6811      	ldr	r1, [r2, #0]
 8013292:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8013296:	6011      	str	r1, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013298:	6891      	ldr	r1, [r2, #8]
 801329a:	f021 0101 	bic.w	r1, r1, #1
 801329e:	6091      	str	r1, [r2, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80132a0:	6891      	ldr	r1, [r2, #8]
 80132a2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80132a6:	6091      	str	r1, [r2, #8]
          huart->RxState = HAL_UART_STATE_READY;
 80132a8:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80132ac:	66e3      	str	r3, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80132ae:	6813      	ldr	r3, [r2, #0]
 80132b0:	f023 0310 	bic.w	r3, r3, #16
 80132b4:	6013      	str	r3, [r2, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 80132b6:	f7fd fdd5 	bl	8010e64 <HAL_DMA_Abort>
 80132ba:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 80132be:	e6fc      	b.n	80130ba <HAL_UART_IRQHandler+0xba>
 80132c0:	10000001 	.word	0x10000001
 80132c4:	04000120 	.word	0x04000120
 80132c8:	08012fe9 	.word	0x08012fe9

080132cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80132cc:	b538      	push	{r3, r4, r5, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80132ce:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 80132d2:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80132d4:	2b22      	cmp	r3, #34	; 0x22
 80132d6:	d005      	beq.n	80132e4 <UART_RxISR_8BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80132d8:	6802      	ldr	r2, [r0, #0]
 80132da:	6993      	ldr	r3, [r2, #24]
 80132dc:	f043 0308 	orr.w	r3, r3, #8
 80132e0:	6193      	str	r3, [r2, #24]
  }
}
 80132e2:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80132e4:	6803      	ldr	r3, [r0, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80132e6:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80132ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80132ec:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80132ee:	400b      	ands	r3, r1
 80132f0:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 80132f2:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 80132f6:	6d82      	ldr	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80132f8:	3b01      	subs	r3, #1
 80132fa:	b29b      	uxth	r3, r3
 80132fc:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8013300:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 8013304:	3201      	adds	r2, #1
    if (huart->RxXferCount == 0U)
 8013306:	b29b      	uxth	r3, r3
    huart->pRxBuffPtr++;
 8013308:	6582      	str	r2, [r0, #88]	; 0x58
    if (huart->RxXferCount == 0U)
 801330a:	2b00      	cmp	r3, #0
 801330c:	d1e9      	bne.n	80132e2 <UART_RxISR_8BIT+0x16>
      huart->RxState = HAL_UART_STATE_READY;
 801330e:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013310:	6802      	ldr	r2, [r0, #0]
 8013312:	6811      	ldr	r1, [r2, #0]
 8013314:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8013318:	6011      	str	r1, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801331a:	6891      	ldr	r1, [r2, #8]
 801331c:	f021 0101 	bic.w	r1, r1, #1
 8013320:	6091      	str	r1, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8013322:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013326:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
      huart->RxISR = NULL;
 8013328:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801332a:	2901      	cmp	r1, #1
 801332c:	d004      	beq.n	8013338 <UART_RxISR_8BIT+0x6c>
        HAL_UART_RxCpltCallback(huart);
 801332e:	f004 fb1f 	bl	8017970 <HAL_UART_RxCpltCallback>
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013332:	2300      	movs	r3, #0
 8013334:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8013336:	bd38      	pop	{r3, r4, r5, pc}
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013338:	6813      	ldr	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801333a:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801333e:	f023 0310 	bic.w	r3, r3, #16
 8013342:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013344:	f7ff fe5a 	bl	8012ffc <HAL_UARTEx_RxEventCallback>
 8013348:	e7f3      	b.n	8013332 <UART_RxISR_8BIT+0x66>
 801334a:	bf00      	nop

0801334c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801334c:	b538      	push	{r3, r4, r5, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801334e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 8013352:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013354:	2b22      	cmp	r3, #34	; 0x22
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013356:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013358:	d004      	beq.n	8013364 <UART_RxISR_16BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801335a:	6993      	ldr	r3, [r2, #24]
 801335c:	f043 0308 	orr.w	r3, r3, #8
 8013360:	6193      	str	r3, [r2, #24]
  }
}
 8013362:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013364:	6a53      	ldr	r3, [r2, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8013366:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
 801336a:	6d81      	ldr	r1, [r0, #88]	; 0x58
 801336c:	402b      	ands	r3, r5
 801336e:	f821 3b02 	strh.w	r3, [r1], #2
    huart->RxXferCount--;
 8013372:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    huart->pRxBuffPtr += 2U;
 8013376:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8013378:	3b01      	subs	r3, #1
 801337a:	b29b      	uxth	r3, r3
 801337c:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8013380:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8013384:	b29b      	uxth	r3, r3
 8013386:	2b00      	cmp	r3, #0
 8013388:	d1eb      	bne.n	8013362 <UART_RxISR_16BIT+0x16>
      huart->RxState = HAL_UART_STATE_READY;
 801338a:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801338c:	6811      	ldr	r1, [r2, #0]
 801338e:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8013392:	6011      	str	r1, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013394:	6891      	ldr	r1, [r2, #8]
 8013396:	f021 0101 	bic.w	r1, r1, #1
 801339a:	6091      	str	r1, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 801339c:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80133a0:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
      huart->RxISR = NULL;
 80133a2:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80133a4:	2901      	cmp	r1, #1
 80133a6:	d004      	beq.n	80133b2 <UART_RxISR_16BIT+0x66>
        HAL_UART_RxCpltCallback(huart);
 80133a8:	f004 fae2 	bl	8017970 <HAL_UART_RxCpltCallback>
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80133ac:	2300      	movs	r3, #0
 80133ae:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 80133b0:	bd38      	pop	{r3, r4, r5, pc}
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80133b2:	6813      	ldr	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80133b4:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80133b8:	f023 0310 	bic.w	r3, r3, #16
 80133bc:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80133be:	f7ff fe1d 	bl	8012ffc <HAL_UARTEx_RxEventCallback>
 80133c2:	e7f3      	b.n	80133ac <UART_RxISR_16BIT+0x60>

080133c4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80133c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80133c8:	6803      	ldr	r3, [r0, #0]
 80133ca:	69d9      	ldr	r1, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80133cc:	681f      	ldr	r7, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80133ce:	689e      	ldr	r6, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80133d0:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80133d4:	2a22      	cmp	r2, #34	; 0x22
 80133d6:	d005      	beq.n	80133e4 <UART_RxISR_8BIT_FIFOEN+0x20>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80133d8:	699a      	ldr	r2, [r3, #24]
 80133da:	f042 0208 	orr.w	r2, r2, #8
 80133de:	619a      	str	r2, [r3, #24]
  }
}
 80133e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80133e4:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 80133e8:	4604      	mov	r4, r0
 80133ea:	2a00      	cmp	r2, #0
 80133ec:	f000 809d 	beq.w	801352a <UART_RxISR_8BIT_FIFOEN+0x166>
 80133f0:	068a      	lsls	r2, r1, #26
 80133f2:	f140 8083 	bpl.w	80134fc <UART_RxISR_8BIT_FIFOEN+0x138>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80133f6:	f04f 0800 	mov.w	r8, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80133fa:	f04f 0a04 	mov.w	sl, #4
 80133fe:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013402:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8013534 <UART_RxISR_8BIT_FIFOEN+0x170>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013406:	f407 7780 	and.w	r7, r7, #256	; 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801340a:	f006 0601 	and.w	r6, r6, #1
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8013410:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8013412:	402b      	ands	r3, r5
 8013414:	7013      	strb	r3, [r2, #0]
      huart->RxXferCount--;
 8013416:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801341a:	6822      	ldr	r2, [r4, #0]
      huart->RxXferCount--;
 801341c:	3b01      	subs	r3, #1
 801341e:	b29b      	uxth	r3, r3
 8013420:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8013424:	f8d2 b01c 	ldr.w	fp, [r2, #28]
      huart->pRxBuffPtr++;
 8013428:	6da3      	ldr	r3, [r4, #88]	; 0x58
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801342a:	f01b 0f07 	tst.w	fp, #7
      huart->pRxBuffPtr++;
 801342e:	f103 0301 	add.w	r3, r3, #1
 8013432:	65a3      	str	r3, [r4, #88]	; 0x58
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8013434:	d026      	beq.n	8013484 <UART_RxISR_8BIT_FIFOEN+0xc0>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013436:	f01b 0f01 	tst.w	fp, #1
 801343a:	d008      	beq.n	801344e <UART_RxISR_8BIT_FIFOEN+0x8a>
 801343c:	b13f      	cbz	r7, 801344e <UART_RxISR_8BIT_FIFOEN+0x8a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801343e:	2301      	movs	r3, #1
 8013440:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013442:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8013446:	f043 0301 	orr.w	r3, r3, #1
 801344a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801344e:	f01b 0f02 	tst.w	fp, #2
 8013452:	d035      	beq.n	80134c0 <UART_RxISR_8BIT_FIFOEN+0xfc>
 8013454:	b196      	cbz	r6, 801347c <UART_RxISR_8BIT_FIFOEN+0xb8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013456:	2302      	movs	r3, #2
 8013458:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801345a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801345e:	f01b 0f04 	tst.w	fp, #4
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013462:	f043 0304 	orr.w	r3, r3, #4
 8013466:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801346a:	d007      	beq.n	801347c <UART_RxISR_8BIT_FIFOEN+0xb8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801346c:	f8c2 a020 	str.w	sl, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013470:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8013474:	f043 0302 	orr.w	r3, r3, #2
 8013478:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801347c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8013480:	2b00      	cmp	r3, #0
 8013482:	d135      	bne.n	80134f0 <UART_RxISR_8BIT_FIFOEN+0x12c>
      if (huart->RxXferCount == 0U)
 8013484:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8013488:	b29b      	uxth	r3, r3
 801348a:	b9a3      	cbnz	r3, 80134b6 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 801348c:	2020      	movs	r0, #32
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801348e:	6822      	ldr	r2, [r4, #0]
 8013490:	6811      	ldr	r1, [r2, #0]
 8013492:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8013496:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013498:	6891      	ldr	r1, [r2, #8]
 801349a:	ea01 0109 	and.w	r1, r1, r9
 801349e:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 80134a0:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80134a4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 80134a6:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80134a8:	2901      	cmp	r1, #1
 80134aa:	d017      	beq.n	80134dc <UART_RxISR_8BIT_FIFOEN+0x118>
          HAL_UART_RxCpltCallback(huart);
 80134ac:	4620      	mov	r0, r4
 80134ae:	f004 fa5f 	bl	8017970 <HAL_UART_RxCpltCallback>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80134b2:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80134b6:	f01b 0f20 	tst.w	fp, #32
 80134ba:	d01f      	beq.n	80134fc <UART_RxISR_8BIT_FIFOEN+0x138>
 80134bc:	6823      	ldr	r3, [r4, #0]
 80134be:	e7a6      	b.n	801340e <UART_RxISR_8BIT_FIFOEN+0x4a>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80134c0:	f01b 0f04 	tst.w	fp, #4
 80134c4:	d0da      	beq.n	801347c <UART_RxISR_8BIT_FIFOEN+0xb8>
 80134c6:	2e00      	cmp	r6, #0
 80134c8:	d0d8      	beq.n	801347c <UART_RxISR_8BIT_FIFOEN+0xb8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80134ca:	f8c2 a020 	str.w	sl, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80134ce:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80134d2:	f043 0302 	orr.w	r3, r3, #2
 80134d6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80134da:	e7cf      	b.n	801347c <UART_RxISR_8BIT_FIFOEN+0xb8>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80134dc:	6813      	ldr	r3, [r2, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80134de:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80134e2:	f023 0310 	bic.w	r3, r3, #16
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80134e6:	4620      	mov	r0, r4
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80134e8:	6013      	str	r3, [r2, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80134ea:	f7ff fd87 	bl	8012ffc <HAL_UARTEx_RxEventCallback>
 80134ee:	e7e0      	b.n	80134b2 <UART_RxISR_8BIT_FIFOEN+0xee>
          HAL_UART_ErrorCallback(huart);
 80134f0:	4620      	mov	r0, r4
 80134f2:	f7ff fd77 	bl	8012fe4 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80134f6:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
 80134fa:	e7c3      	b.n	8013484 <UART_RxISR_8BIT_FIFOEN+0xc0>
    rxdatacount = huart->RxXferCount;
 80134fc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8013500:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8013502:	2b00      	cmp	r3, #0
 8013504:	f43f af6c 	beq.w	80133e0 <UART_RxISR_8BIT_FIFOEN+0x1c>
 8013508:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 801350c:	429a      	cmp	r2, r3
 801350e:	f67f af67 	bls.w	80133e0 <UART_RxISR_8BIT_FIFOEN+0x1c>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8013512:	6823      	ldr	r3, [r4, #0]
      huart->RxISR = UART_RxISR_8BIT;
 8013514:	4906      	ldr	r1, [pc, #24]	; (8013530 <UART_RxISR_8BIT_FIFOEN+0x16c>)
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8013516:	689a      	ldr	r2, [r3, #8]
 8013518:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 801351c:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801351e:	681a      	ldr	r2, [r3, #0]
      huart->RxISR = UART_RxISR_8BIT;
 8013520:	6721      	str	r1, [r4, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8013522:	f042 0220 	orr.w	r2, r2, #32
 8013526:	601a      	str	r2, [r3, #0]
 8013528:	e75a      	b.n	80133e0 <UART_RxISR_8BIT_FIFOEN+0x1c>
    rxdatacount = huart->RxXferCount;
 801352a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801352e:	e757      	b.n	80133e0 <UART_RxISR_8BIT_FIFOEN+0x1c>
 8013530:	080132cd 	.word	0x080132cd
 8013534:	effffffe 	.word	0xeffffffe

08013538 <UART_RxISR_16BIT_FIFOEN>:
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8013538:	6802      	ldr	r2, [r0, #0]
{
 801353a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801353e:	69d1      	ldr	r1, [r2, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8013540:	6817      	ldr	r7, [r2, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8013542:	6896      	ldr	r6, [r2, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013544:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8013548:	2b22      	cmp	r3, #34	; 0x22
 801354a:	d005      	beq.n	8013558 <UART_RxISR_16BIT_FIFOEN+0x20>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801354c:	6993      	ldr	r3, [r2, #24]
 801354e:	f043 0308 	orr.w	r3, r3, #8
 8013552:	6193      	str	r3, [r2, #24]
  }
}
 8013554:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8013558:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 801355c:	4604      	mov	r4, r0
 801355e:	2b00      	cmp	r3, #0
 8013560:	f000 8099 	beq.w	8013696 <UART_RxISR_16BIT_FIFOEN+0x15e>
 8013564:	068b      	lsls	r3, r1, #26
 8013566:	d57f      	bpl.n	8013668 <UART_RxISR_16BIT_FIFOEN+0x130>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013568:	f04f 0800 	mov.w	r8, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801356c:	f04f 0a04 	mov.w	sl, #4
  uint16_t  uhMask = huart->Mask;
 8013570:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013574:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80136a0 <UART_RxISR_16BIT_FIFOEN+0x168>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013578:	f407 7780 	and.w	r7, r7, #256	; 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801357c:	f006 0601 	and.w	r6, r6, #1
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013580:	6a53      	ldr	r3, [r2, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 8013582:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8013584:	402b      	ands	r3, r5
 8013586:	f821 3b02 	strh.w	r3, [r1], #2
      huart->RxXferCount--;
 801358a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
      huart->pRxBuffPtr += 2U;
 801358e:	65a1      	str	r1, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8013590:	3b01      	subs	r3, #1
 8013592:	b29b      	uxth	r3, r3
 8013594:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8013598:	f8d2 b01c 	ldr.w	fp, [r2, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801359c:	f01b 0f07 	tst.w	fp, #7
 80135a0:	d026      	beq.n	80135f0 <UART_RxISR_16BIT_FIFOEN+0xb8>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80135a2:	f01b 0f01 	tst.w	fp, #1
 80135a6:	d008      	beq.n	80135ba <UART_RxISR_16BIT_FIFOEN+0x82>
 80135a8:	b13f      	cbz	r7, 80135ba <UART_RxISR_16BIT_FIFOEN+0x82>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80135aa:	2301      	movs	r3, #1
 80135ac:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80135ae:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80135b2:	f043 0301 	orr.w	r3, r3, #1
 80135b6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80135ba:	f01b 0f02 	tst.w	fp, #2
 80135be:	d035      	beq.n	801362c <UART_RxISR_16BIT_FIFOEN+0xf4>
 80135c0:	b196      	cbz	r6, 80135e8 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80135c2:	2302      	movs	r3, #2
 80135c4:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80135c6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80135ca:	f01b 0f04 	tst.w	fp, #4
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80135ce:	f043 0304 	orr.w	r3, r3, #4
 80135d2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80135d6:	d007      	beq.n	80135e8 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80135d8:	f8c2 a020 	str.w	sl, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80135dc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80135e0:	f043 0302 	orr.w	r3, r3, #2
 80135e4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80135e8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d135      	bne.n	801365c <UART_RxISR_16BIT_FIFOEN+0x124>
      if (huart->RxXferCount == 0U)
 80135f0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80135f4:	b29b      	uxth	r3, r3
 80135f6:	b9a3      	cbnz	r3, 8013622 <UART_RxISR_16BIT_FIFOEN+0xea>
        huart->RxState = HAL_UART_STATE_READY;
 80135f8:	2020      	movs	r0, #32
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80135fa:	6822      	ldr	r2, [r4, #0]
 80135fc:	6811      	ldr	r1, [r2, #0]
 80135fe:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8013602:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013604:	6891      	ldr	r1, [r2, #8]
 8013606:	ea01 0109 	and.w	r1, r1, r9
 801360a:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 801360c:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013610:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8013612:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013614:	2901      	cmp	r1, #1
 8013616:	d017      	beq.n	8013648 <UART_RxISR_16BIT_FIFOEN+0x110>
          HAL_UART_RxCpltCallback(huart);
 8013618:	4620      	mov	r0, r4
 801361a:	f004 f9a9 	bl	8017970 <HAL_UART_RxCpltCallback>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801361e:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8013622:	f01b 0f20 	tst.w	fp, #32
 8013626:	d01f      	beq.n	8013668 <UART_RxISR_16BIT_FIFOEN+0x130>
 8013628:	6822      	ldr	r2, [r4, #0]
 801362a:	e7a9      	b.n	8013580 <UART_RxISR_16BIT_FIFOEN+0x48>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801362c:	f01b 0f04 	tst.w	fp, #4
 8013630:	d0da      	beq.n	80135e8 <UART_RxISR_16BIT_FIFOEN+0xb0>
 8013632:	2e00      	cmp	r6, #0
 8013634:	d0d8      	beq.n	80135e8 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013636:	f8c2 a020 	str.w	sl, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801363a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 801363e:	f043 0302 	orr.w	r3, r3, #2
 8013642:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8013646:	e7cf      	b.n	80135e8 <UART_RxISR_16BIT_FIFOEN+0xb0>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013648:	6813      	ldr	r3, [r2, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801364a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801364e:	f023 0310 	bic.w	r3, r3, #16
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013652:	4620      	mov	r0, r4
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013654:	6013      	str	r3, [r2, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013656:	f7ff fcd1 	bl	8012ffc <HAL_UARTEx_RxEventCallback>
 801365a:	e7e0      	b.n	801361e <UART_RxISR_16BIT_FIFOEN+0xe6>
          HAL_UART_ErrorCallback(huart);
 801365c:	4620      	mov	r0, r4
 801365e:	f7ff fcc1 	bl	8012fe4 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013662:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
 8013666:	e7c3      	b.n	80135f0 <UART_RxISR_16BIT_FIFOEN+0xb8>
    rxdatacount = huart->RxXferCount;
 8013668:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 801366c:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801366e:	2b00      	cmp	r3, #0
 8013670:	f43f af70 	beq.w	8013554 <UART_RxISR_16BIT_FIFOEN+0x1c>
 8013674:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8013678:	429a      	cmp	r2, r3
 801367a:	f67f af6b 	bls.w	8013554 <UART_RxISR_16BIT_FIFOEN+0x1c>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801367e:	6823      	ldr	r3, [r4, #0]
      huart->RxISR = UART_RxISR_16BIT;
 8013680:	4906      	ldr	r1, [pc, #24]	; (801369c <UART_RxISR_16BIT_FIFOEN+0x164>)
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8013682:	689a      	ldr	r2, [r3, #8]
 8013684:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8013688:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801368a:	681a      	ldr	r2, [r3, #0]
      huart->RxISR = UART_RxISR_16BIT;
 801368c:	6721      	str	r1, [r4, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801368e:	f042 0220 	orr.w	r2, r2, #32
 8013692:	601a      	str	r2, [r3, #0]
 8013694:	e75e      	b.n	8013554 <UART_RxISR_16BIT_FIFOEN+0x1c>
    rxdatacount = huart->RxXferCount;
 8013696:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801369a:	e75b      	b.n	8013554 <UART_RxISR_16BIT_FIFOEN+0x1c>
 801369c:	0801334d 	.word	0x0801334d
 80136a0:	effffffe 	.word	0xeffffffe

080136a4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80136a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 80136a6:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80136a8:	07da      	lsls	r2, r3, #31
 80136aa:	d506      	bpl.n	80136ba <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80136ac:	6801      	ldr	r1, [r0, #0]
 80136ae:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80136b0:	684a      	ldr	r2, [r1, #4]
 80136b2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80136b6:	4322      	orrs	r2, r4
 80136b8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80136ba:	079c      	lsls	r4, r3, #30
 80136bc:	d506      	bpl.n	80136cc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80136be:	6801      	ldr	r1, [r0, #0]
 80136c0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80136c2:	684a      	ldr	r2, [r1, #4]
 80136c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80136c8:	4322      	orrs	r2, r4
 80136ca:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80136cc:	0759      	lsls	r1, r3, #29
 80136ce:	d506      	bpl.n	80136de <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80136d0:	6801      	ldr	r1, [r0, #0]
 80136d2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80136d4:	684a      	ldr	r2, [r1, #4]
 80136d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80136da:	4322      	orrs	r2, r4
 80136dc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80136de:	071a      	lsls	r2, r3, #28
 80136e0:	d506      	bpl.n	80136f0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80136e2:	6801      	ldr	r1, [r0, #0]
 80136e4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80136e6:	684a      	ldr	r2, [r1, #4]
 80136e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80136ec:	4322      	orrs	r2, r4
 80136ee:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80136f0:	06dc      	lsls	r4, r3, #27
 80136f2:	d506      	bpl.n	8013702 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80136f4:	6801      	ldr	r1, [r0, #0]
 80136f6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80136f8:	688a      	ldr	r2, [r1, #8]
 80136fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80136fe:	4322      	orrs	r2, r4
 8013700:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013702:	0699      	lsls	r1, r3, #26
 8013704:	d506      	bpl.n	8013714 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013706:	6801      	ldr	r1, [r0, #0]
 8013708:	6c04      	ldr	r4, [r0, #64]	; 0x40
 801370a:	688a      	ldr	r2, [r1, #8]
 801370c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013710:	4322      	orrs	r2, r4
 8013712:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013714:	065a      	lsls	r2, r3, #25
 8013716:	d50a      	bpl.n	801372e <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013718:	6801      	ldr	r1, [r0, #0]
 801371a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 801371c:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801371e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013722:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8013726:	ea42 0204 	orr.w	r2, r2, r4
 801372a:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801372c:	d00b      	beq.n	8013746 <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801372e:	061b      	lsls	r3, r3, #24
 8013730:	d506      	bpl.n	8013740 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013732:	6802      	ldr	r2, [r0, #0]
 8013734:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8013736:	6853      	ldr	r3, [r2, #4]
 8013738:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 801373c:	430b      	orrs	r3, r1
 801373e:	6053      	str	r3, [r2, #4]
}
 8013740:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013744:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013746:	684a      	ldr	r2, [r1, #4]
 8013748:	6c84      	ldr	r4, [r0, #72]	; 0x48
 801374a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 801374e:	4322      	orrs	r2, r4
 8013750:	604a      	str	r2, [r1, #4]
 8013752:	e7ec      	b.n	801372e <UART_AdvFeatureConfig+0x8a>

08013754 <UART_CheckIdleState>:
{
 8013754:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013756:	2300      	movs	r3, #0
{
 8013758:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801375a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 801375e:	f7fd fae3 	bl	8010d28 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013762:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8013764:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013766:	681a      	ldr	r2, [r3, #0]
 8013768:	0711      	lsls	r1, r2, #28
 801376a:	d40d      	bmi.n	8013788 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801376c:	681a      	ldr	r2, [r3, #0]
 801376e:	0752      	lsls	r2, r2, #29
 8013770:	d431      	bmi.n	80137d6 <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013772:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8013774:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8013776:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 801377a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  return HAL_OK;
 801377e:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8013780:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013784:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8013786:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013788:	69da      	ldr	r2, [r3, #28]
 801378a:	0292      	lsls	r2, r2, #10
 801378c:	d4ee      	bmi.n	801376c <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801378e:	f7fd facb 	bl	8010d28 <HAL_GetTick>
 8013792:	1b40      	subs	r0, r0, r5
 8013794:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8013798:	d22e      	bcs.n	80137f8 <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801379a:	6823      	ldr	r3, [r4, #0]
 801379c:	681a      	ldr	r2, [r3, #0]
 801379e:	0750      	lsls	r0, r2, #29
 80137a0:	d5f2      	bpl.n	8013788 <UART_CheckIdleState+0x34>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80137a2:	69da      	ldr	r2, [r3, #28]
 80137a4:	0511      	lsls	r1, r2, #20
 80137a6:	d5ef      	bpl.n	8013788 <UART_CheckIdleState+0x34>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80137a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
          __HAL_UNLOCK(huart);
 80137ac:	2500      	movs	r5, #0
          huart->gState = HAL_UART_STATE_READY;
 80137ae:	2220      	movs	r2, #32
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80137b0:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80137b2:	6819      	ldr	r1, [r3, #0]
      return HAL_TIMEOUT;
 80137b4:	2003      	movs	r0, #3
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80137b6:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 80137ba:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80137bc:	6899      	ldr	r1, [r3, #8]
 80137be:	f021 0101 	bic.w	r1, r1, #1
 80137c2:	6099      	str	r1, [r3, #8]
          __HAL_UNLOCK(huart);
 80137c4:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
          huart->gState = HAL_UART_STATE_READY;
 80137c8:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80137cc:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80137d0:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
}
 80137d4:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80137d6:	69db      	ldr	r3, [r3, #28]
 80137d8:	0258      	lsls	r0, r3, #9
 80137da:	d4ca      	bmi.n	8013772 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80137dc:	f7fd faa4 	bl	8010d28 <HAL_GetTick>
 80137e0:	1b40      	subs	r0, r0, r5
 80137e2:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 80137e6:	d207      	bcs.n	80137f8 <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80137e8:	6823      	ldr	r3, [r4, #0]
 80137ea:	681a      	ldr	r2, [r3, #0]
 80137ec:	0751      	lsls	r1, r2, #29
 80137ee:	d5f2      	bpl.n	80137d6 <UART_CheckIdleState+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80137f0:	69da      	ldr	r2, [r3, #28]
 80137f2:	0512      	lsls	r2, r2, #20
 80137f4:	d5ef      	bpl.n	80137d6 <UART_CheckIdleState+0x82>
 80137f6:	e7d7      	b.n	80137a8 <UART_CheckIdleState+0x54>
        __HAL_UNLOCK(huart);
 80137f8:	2500      	movs	r5, #0
        huart->gState = HAL_UART_STATE_READY;
 80137fa:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80137fc:	6823      	ldr	r3, [r4, #0]
      return HAL_TIMEOUT;
 80137fe:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8013800:	681a      	ldr	r2, [r3, #0]
 8013802:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8013806:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013808:	689a      	ldr	r2, [r3, #8]
 801380a:	f022 0201 	bic.w	r2, r2, #1
 801380e:	609a      	str	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 8013810:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8013814:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8013818:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
}
 801381c:	bd38      	pop	{r3, r4, r5, pc}
 801381e:	bf00      	nop

08013820 <HAL_UART_Init>:
  if (huart == NULL)
 8013820:	2800      	cmp	r0, #0
 8013822:	f000 81bb 	beq.w	8013b9c <HAL_UART_Init+0x37c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8013826:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 801382a:	b570      	push	{r4, r5, r6, lr}
 801382c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 801382e:	2b00      	cmp	r3, #0
 8013830:	d06c      	beq.n	801390c <HAL_UART_Init+0xec>
  huart->gState = HAL_UART_STATE_BUSY;
 8013832:	2224      	movs	r2, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8013834:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8013836:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 801383a:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801383c:	6925      	ldr	r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 801383e:	f021 0101 	bic.w	r1, r1, #1
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013842:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8013844:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013846:	6818      	ldr	r0, [r3, #0]
 8013848:	49c5      	ldr	r1, [pc, #788]	; (8013b60 <HAL_UART_Init+0x340>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801384a:	432a      	orrs	r2, r5
 801384c:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801384e:	4001      	ands	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013850:	69e0      	ldr	r0, [r4, #28]
 8013852:	432a      	orrs	r2, r5
 8013854:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013856:	430a      	orrs	r2, r1
 8013858:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801385a:	685a      	ldr	r2, [r3, #4]
 801385c:	68e5      	ldr	r5, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801385e:	49c1      	ldr	r1, [pc, #772]	; (8013b64 <HAL_UART_Init+0x344>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013860:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8013864:	432a      	orrs	r2, r5
 8013866:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8013868:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801386a:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801386c:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801386e:	d052      	beq.n	8013916 <HAL_UART_Init+0xf6>
    tmpreg |= huart->Init.OneBitSampling;
 8013870:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013872:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8013876:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 801387a:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801387c:	430a      	orrs	r2, r1
 801387e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8013880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013882:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013884:	4db8      	ldr	r5, [pc, #736]	; (8013b68 <HAL_UART_Init+0x348>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8013886:	f022 020f 	bic.w	r2, r2, #15
 801388a:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 801388c:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801388e:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013890:	d028      	beq.n	80138e4 <HAL_UART_Init+0xc4>
 8013892:	4ab6      	ldr	r2, [pc, #728]	; (8013b6c <HAL_UART_Init+0x34c>)
 8013894:	4293      	cmp	r3, r2
 8013896:	f000 8091 	beq.w	80139bc <HAL_UART_Init+0x19c>
 801389a:	4ab5      	ldr	r2, [pc, #724]	; (8013b70 <HAL_UART_Init+0x350>)
 801389c:	4293      	cmp	r3, r2
 801389e:	f000 8151 	beq.w	8013b44 <HAL_UART_Init+0x324>
 80138a2:	4ab4      	ldr	r2, [pc, #720]	; (8013b74 <HAL_UART_Init+0x354>)
 80138a4:	4293      	cmp	r3, r2
 80138a6:	f000 80e4 	beq.w	8013a72 <HAL_UART_Init+0x252>
 80138aa:	4ab3      	ldr	r2, [pc, #716]	; (8013b78 <HAL_UART_Init+0x358>)
 80138ac:	4293      	cmp	r3, r2
 80138ae:	d111      	bne.n	80138d4 <HAL_UART_Init+0xb4>
 80138b0:	4bb2      	ldr	r3, [pc, #712]	; (8013b7c <HAL_UART_Init+0x35c>)
 80138b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80138b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80138ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80138be:	f000 8180 	beq.w	8013bc2 <HAL_UART_Init+0x3a2>
 80138c2:	f200 80f5 	bhi.w	8013ab0 <HAL_UART_Init+0x290>
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	f000 80e8 	beq.w	8013a9c <HAL_UART_Init+0x27c>
 80138cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80138d0:	f000 80dd 	beq.w	8013a8e <HAL_UART_Init+0x26e>
  huart->NbRxDataToProcess = 1;
 80138d4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 80138d8:	2300      	movs	r3, #0
}
 80138da:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 80138dc:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 80138e0:	66a2      	str	r2, [r4, #104]	; 0x68
}
 80138e2:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80138e4:	4ba5      	ldr	r3, [pc, #660]	; (8013b7c <HAL_UART_Init+0x35c>)
 80138e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80138ea:	f003 0303 	and.w	r3, r3, #3
 80138ee:	3b01      	subs	r3, #1
 80138f0:	2b02      	cmp	r3, #2
 80138f2:	f240 80da 	bls.w	8013aaa <HAL_UART_Init+0x28a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80138f6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80138fa:	f000 8157 	beq.w	8013bac <HAL_UART_Init+0x38c>
        pclk = HAL_RCC_GetPCLK2Freq();
 80138fe:	f7fd ff57 	bl	80117b0 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8013902:	2800      	cmp	r0, #0
 8013904:	f000 8117 	beq.w	8013b36 <HAL_UART_Init+0x316>
 8013908:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801390a:	e081      	b.n	8013a10 <HAL_UART_Init+0x1f0>
    huart->Lock = HAL_UNLOCKED;
 801390c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8013910:	f7fd f8aa 	bl	8010a68 <HAL_UART_MspInit>
 8013914:	e78d      	b.n	8013832 <HAL_UART_Init+0x12>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013916:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 801391a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 801391e:	430a      	orrs	r2, r1
 8013920:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8013922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013924:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013926:	f022 020f 	bic.w	r2, r2, #15
  UART_GETCLOCKSOURCE(huart, clocksource);
 801392a:	4894      	ldr	r0, [pc, #592]	; (8013b7c <HAL_UART_Init+0x35c>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801392c:	430a      	orrs	r2, r1
 801392e:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013930:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8013934:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8013938:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801393c:	f000 813f 	beq.w	8013bbe <HAL_UART_Init+0x39e>
 8013940:	d80c      	bhi.n	801395c <HAL_UART_Init+0x13c>
 8013942:	2b00      	cmp	r3, #0
 8013944:	f000 8138 	beq.w	8013bb8 <HAL_UART_Init+0x398>
 8013948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801394c:	d1c2      	bne.n	80138d4 <HAL_UART_Init+0xb4>
        pclk = HAL_RCC_GetSysClockFreq();
 801394e:	f7fd fe55 	bl	80115fc <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8013952:	2800      	cmp	r0, #0
 8013954:	f000 80ef 	beq.w	8013b36 <HAL_UART_Init+0x316>
 8013958:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801395a:	e004      	b.n	8013966 <HAL_UART_Init+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801395c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8013960:	d1b8      	bne.n	80138d4 <HAL_UART_Init+0xb4>
        pclk = (uint32_t) LSE_VALUE;
 8013962:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8013966:	4b86      	ldr	r3, [pc, #536]	; (8013b80 <HAL_UART_Init+0x360>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013968:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801396a:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801396e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8013972:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013976:	428b      	cmp	r3, r1
 8013978:	d3ac      	bcc.n	80138d4 <HAL_UART_Init+0xb4>
 801397a:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 801397e:	d8a9      	bhi.n	80138d4 <HAL_UART_Init+0xb4>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013980:	2600      	movs	r6, #0
 8013982:	2300      	movs	r3, #0
 8013984:	4631      	mov	r1, r6
 8013986:	f7fc fc69 	bl	801025c <__aeabi_uldivmod>
 801398a:	020b      	lsls	r3, r1, #8
 801398c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8013990:	0202      	lsls	r2, r0, #8
 8013992:	0868      	lsrs	r0, r5, #1
 8013994:	1810      	adds	r0, r2, r0
 8013996:	f143 0100 	adc.w	r1, r3, #0
 801399a:	462a      	mov	r2, r5
 801399c:	4633      	mov	r3, r6
 801399e:	f7fc fc5d 	bl	801025c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80139a2:	4b78      	ldr	r3, [pc, #480]	; (8013b84 <HAL_UART_Init+0x364>)
 80139a4:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80139a8:	429a      	cmp	r2, r3
 80139aa:	d893      	bhi.n	80138d4 <HAL_UART_Init+0xb4>
  huart->NbRxDataToProcess = 1;
 80139ac:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 80139b0:	6822      	ldr	r2, [r4, #0]
 80139b2:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 80139b4:	e9c4 661c 	strd	r6, r6, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 80139b8:	66a3      	str	r3, [r4, #104]	; 0x68
  return ret;
 80139ba:	e043      	b.n	8013a44 <HAL_UART_Init+0x224>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80139bc:	4b6f      	ldr	r3, [pc, #444]	; (8013b7c <HAL_UART_Init+0x35c>)
 80139be:	4a72      	ldr	r2, [pc, #456]	; (8013b88 <HAL_UART_Init+0x368>)
 80139c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80139c4:	f003 030c 	and.w	r3, r3, #12
 80139c8:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80139ca:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80139ce:	d073      	beq.n	8013ab8 <HAL_UART_Init+0x298>
    switch (clocksource)
 80139d0:	2b08      	cmp	r3, #8
 80139d2:	f63f af7f 	bhi.w	80138d4 <HAL_UART_Init+0xb4>
 80139d6:	a201      	add	r2, pc, #4	; (adr r2, 80139dc <HAL_UART_Init+0x1bc>)
 80139d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139dc:	08013aa5 	.word	0x08013aa5
 80139e0:	080138ff 	.word	0x080138ff
 80139e4:	08013a6f 	.word	0x08013a6f
 80139e8:	080138d5 	.word	0x080138d5
 80139ec:	08013a97 	.word	0x08013a97
 80139f0:	080138d5 	.word	0x080138d5
 80139f4:	080138d5 	.word	0x080138d5
 80139f8:	080138d5 	.word	0x080138d5
 80139fc:	08013a0d 	.word	0x08013a0d
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013a00:	2b30      	cmp	r3, #48	; 0x30
 8013a02:	f47f af67 	bne.w	80138d4 <HAL_UART_Init+0xb4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013a06:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8013a0a:	d06e      	beq.n	8013aea <HAL_UART_Init+0x2ca>
 8013a0c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013a10:	4b5b      	ldr	r3, [pc, #364]	; (8013b80 <HAL_UART_Init+0x360>)
 8013a12:	6862      	ldr	r2, [r4, #4]
 8013a14:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013a18:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013a1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8013a20:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8013a24:	fbb3 f3f2 	udiv	r3, r3, r2
 8013a28:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013a2a:	f1a3 0210 	sub.w	r2, r3, #16
 8013a2e:	428a      	cmp	r2, r1
 8013a30:	f63f af50 	bhi.w	80138d4 <HAL_UART_Init+0xb4>
  huart->RxISR = NULL;
 8013a34:	2200      	movs	r2, #0
  huart->NbRxDataToProcess = 1;
 8013a36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
        huart->Instance->BRR = usartdiv;
 8013a3a:	6820      	ldr	r0, [r4, #0]
 8013a3c:	60c3      	str	r3, [r0, #12]
  huart->TxISR = NULL;
 8013a3e:	e9c4 221c 	strd	r2, r2, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8013a42:	66a1      	str	r1, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013a44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d171      	bne.n	8013b2e <HAL_UART_Init+0x30e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013a4a:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8013a4c:	4620      	mov	r0, r4
}
 8013a4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013a52:	685a      	ldr	r2, [r3, #4]
 8013a54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013a58:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013a5a:	689a      	ldr	r2, [r3, #8]
 8013a5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013a60:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8013a62:	681a      	ldr	r2, [r3, #0]
 8013a64:	f042 0201 	orr.w	r2, r2, #1
 8013a68:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8013a6a:	f7ff be73 	b.w	8013754 <UART_CheckIdleState>
        pclk = (uint32_t) HSI_VALUE;
 8013a6e:	4847      	ldr	r0, [pc, #284]	; (8013b8c <HAL_UART_Init+0x36c>)
 8013a70:	e7ce      	b.n	8013a10 <HAL_UART_Init+0x1f0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013a72:	4b42      	ldr	r3, [pc, #264]	; (8013b7c <HAL_UART_Init+0x35c>)
 8013a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013a78:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013a7c:	2b80      	cmp	r3, #128	; 0x80
 8013a7e:	f000 80a0 	beq.w	8013bc2 <HAL_UART_Init+0x3a2>
 8013a82:	f200 8087 	bhi.w	8013b94 <HAL_UART_Init+0x374>
 8013a86:	b14b      	cbz	r3, 8013a9c <HAL_UART_Init+0x27c>
 8013a88:	2b40      	cmp	r3, #64	; 0x40
 8013a8a:	f47f af23 	bne.w	80138d4 <HAL_UART_Init+0xb4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013a8e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8013a92:	f000 8085 	beq.w	8013ba0 <HAL_UART_Init+0x380>
        pclk = HAL_RCC_GetSysClockFreq();
 8013a96:	f7fd fdb1 	bl	80115fc <HAL_RCC_GetSysClockFreq>
        break;
 8013a9a:	e732      	b.n	8013902 <HAL_UART_Init+0xe2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013a9c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8013aa0:	f000 8087 	beq.w	8013bb2 <HAL_UART_Init+0x392>
        pclk = HAL_RCC_GetPCLK1Freq();
 8013aa4:	f7fd fe0c 	bl	80116c0 <HAL_RCC_GetPCLK1Freq>
        break;
 8013aa8:	e72b      	b.n	8013902 <HAL_UART_Init+0xe2>
 8013aaa:	4a39      	ldr	r2, [pc, #228]	; (8013b90 <HAL_UART_Init+0x370>)
 8013aac:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8013aae:	e78c      	b.n	80139ca <HAL_UART_Init+0x1aa>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013ab0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013ab4:	d0a7      	beq.n	8013a06 <HAL_UART_Init+0x1e6>
 8013ab6:	e70d      	b.n	80138d4 <HAL_UART_Init+0xb4>
    switch (clocksource)
 8013ab8:	2b08      	cmp	r3, #8
 8013aba:	f63f af0b 	bhi.w	80138d4 <HAL_UART_Init+0xb4>
 8013abe:	a201      	add	r2, pc, #4	; (adr r2, 8013ac4 <HAL_UART_Init+0x2a4>)
 8013ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ac4:	08013bb3 	.word	0x08013bb3
 8013ac8:	08013bad 	.word	0x08013bad
 8013acc:	08013ae9 	.word	0x08013ae9
 8013ad0:	080138d5 	.word	0x080138d5
 8013ad4:	08013ba1 	.word	0x08013ba1
 8013ad8:	080138d5 	.word	0x080138d5
 8013adc:	080138d5 	.word	0x080138d5
 8013ae0:	080138d5 	.word	0x080138d5
 8013ae4:	08013aeb 	.word	0x08013aeb
        pclk = (uint32_t) HSI_VALUE;
 8013ae8:	4828      	ldr	r0, [pc, #160]	; (8013b8c <HAL_UART_Init+0x36c>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013aea:	4b25      	ldr	r3, [pc, #148]	; (8013b80 <HAL_UART_Init+0x360>)
 8013aec:	6862      	ldr	r2, [r4, #4]
 8013aee:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8013af2:	0853      	lsrs	r3, r2, #1
 8013af4:	fbb0 f0f1 	udiv	r0, r0, r1
 8013af8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8013afc:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013b00:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8013b04:	b282      	uxth	r2, r0
 8013b06:	f1a2 0110 	sub.w	r1, r2, #16
 8013b0a:	4299      	cmp	r1, r3
 8013b0c:	f63f aee2 	bhi.w	80138d4 <HAL_UART_Init+0xb4>
  huart->NbRxDataToProcess = 1;
 8013b10:	f04f 1501 	mov.w	r5, #65537	; 0x10001
  huart->RxISR = NULL;
 8013b14:	2100      	movs	r1, #0
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013b16:	f020 030f 	bic.w	r3, r0, #15
 8013b1a:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 8013b1c:	6820      	ldr	r0, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013b1e:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 8013b22:	4313      	orrs	r3, r2
 8013b24:	60c3      	str	r3, [r0, #12]
  huart->TxISR = NULL;
 8013b26:	e9c4 111c 	strd	r1, r1, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8013b2a:	66a5      	str	r5, [r4, #104]	; 0x68
  return ret;
 8013b2c:	e78a      	b.n	8013a44 <HAL_UART_Init+0x224>
    UART_AdvFeatureConfig(huart);
 8013b2e:	4620      	mov	r0, r4
 8013b30:	f7ff fdb8 	bl	80136a4 <UART_AdvFeatureConfig>
 8013b34:	e789      	b.n	8013a4a <HAL_UART_Init+0x22a>
  huart->NbRxDataToProcess = 1;
 8013b36:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 8013b3a:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8013b3c:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8013b3e:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  return ret;
 8013b42:	e77f      	b.n	8013a44 <HAL_UART_Init+0x224>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013b44:	4b0d      	ldr	r3, [pc, #52]	; (8013b7c <HAL_UART_Init+0x35c>)
 8013b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013b4a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8013b4e:	2b20      	cmp	r3, #32
 8013b50:	d037      	beq.n	8013bc2 <HAL_UART_Init+0x3a2>
 8013b52:	f63f af55 	bhi.w	8013a00 <HAL_UART_Init+0x1e0>
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d0a0      	beq.n	8013a9c <HAL_UART_Init+0x27c>
 8013b5a:	2b10      	cmp	r3, #16
 8013b5c:	d097      	beq.n	8013a8e <HAL_UART_Init+0x26e>
 8013b5e:	e6b9      	b.n	80138d4 <HAL_UART_Init+0xb4>
 8013b60:	cfff69f3 	.word	0xcfff69f3
 8013b64:	40008000 	.word	0x40008000
 8013b68:	40013800 	.word	0x40013800
 8013b6c:	40004400 	.word	0x40004400
 8013b70:	40004800 	.word	0x40004800
 8013b74:	40004c00 	.word	0x40004c00
 8013b78:	40005000 	.word	0x40005000
 8013b7c:	40021000 	.word	0x40021000
 8013b80:	08031854 	.word	0x08031854
 8013b84:	000ffcff 	.word	0x000ffcff
 8013b88:	08031844 	.word	0x08031844
 8013b8c:	00f42400 	.word	0x00f42400
 8013b90:	08031840 	.word	0x08031840
 8013b94:	2bc0      	cmp	r3, #192	; 0xc0
 8013b96:	f43f af36 	beq.w	8013a06 <HAL_UART_Init+0x1e6>
 8013b9a:	e69b      	b.n	80138d4 <HAL_UART_Init+0xb4>
}
 8013b9c:	2001      	movs	r0, #1
 8013b9e:	4770      	bx	lr
        pclk = HAL_RCC_GetSysClockFreq();
 8013ba0:	f7fd fd2c 	bl	80115fc <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8013ba4:	2800      	cmp	r0, #0
 8013ba6:	d0c6      	beq.n	8013b36 <HAL_UART_Init+0x316>
 8013ba8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013baa:	e79e      	b.n	8013aea <HAL_UART_Init+0x2ca>
        pclk = HAL_RCC_GetPCLK2Freq();
 8013bac:	f7fd fe00 	bl	80117b0 <HAL_RCC_GetPCLK2Freq>
        break;
 8013bb0:	e7f8      	b.n	8013ba4 <HAL_UART_Init+0x384>
        pclk = HAL_RCC_GetPCLK1Freq();
 8013bb2:	f7fd fd85 	bl	80116c0 <HAL_RCC_GetPCLK1Freq>
        break;
 8013bb6:	e7f5      	b.n	8013ba4 <HAL_UART_Init+0x384>
        pclk = HAL_RCC_GetPCLK1Freq();
 8013bb8:	f7fd fd82 	bl	80116c0 <HAL_RCC_GetPCLK1Freq>
        break;
 8013bbc:	e6c9      	b.n	8013952 <HAL_UART_Init+0x132>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013bbe:	4804      	ldr	r0, [pc, #16]	; (8013bd0 <HAL_UART_Init+0x3b0>)
 8013bc0:	e6d1      	b.n	8013966 <HAL_UART_Init+0x146>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013bc2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8013bc6:	4802      	ldr	r0, [pc, #8]	; (8013bd0 <HAL_UART_Init+0x3b0>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013bc8:	f47f af22 	bne.w	8013a10 <HAL_UART_Init+0x1f0>
 8013bcc:	e78d      	b.n	8013aea <HAL_UART_Init+0x2ca>
 8013bce:	bf00      	nop
 8013bd0:	00f42400 	.word	0x00f42400

08013bd4 <UART_WaitOnFlagUntilTimeout>:
{
 8013bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013bd8:	4607      	mov	r7, r0
 8013bda:	460e      	mov	r6, r1
 8013bdc:	4615      	mov	r5, r2
 8013bde:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013be0:	6804      	ldr	r4, [r0, #0]
{
 8013be2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013be6:	f1b8 3fff 	cmp.w	r8, #4294967295
 8013bea:	d10a      	bne.n	8013c02 <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013bec:	69e3      	ldr	r3, [r4, #28]
 8013bee:	ea36 0303 	bics.w	r3, r6, r3
 8013bf2:	bf0c      	ite	eq
 8013bf4:	2301      	moveq	r3, #1
 8013bf6:	2300      	movne	r3, #0
 8013bf8:	429d      	cmp	r5, r3
 8013bfa:	d0f7      	beq.n	8013bec <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 8013bfc:	2000      	movs	r0, #0
}
 8013bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013c02:	69e3      	ldr	r3, [r4, #28]
 8013c04:	ea36 0303 	bics.w	r3, r6, r3
 8013c08:	bf0c      	ite	eq
 8013c0a:	2301      	moveq	r3, #1
 8013c0c:	2300      	movne	r3, #0
 8013c0e:	429d      	cmp	r5, r3
 8013c10:	d1f4      	bne.n	8013bfc <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013c12:	f7fd f889 	bl	8010d28 <HAL_GetTick>
 8013c16:	eba0 0009 	sub.w	r0, r0, r9
 8013c1a:	4540      	cmp	r0, r8
 8013c1c:	d820      	bhi.n	8013c60 <UART_WaitOnFlagUntilTimeout+0x8c>
 8013c1e:	f1b8 0f00 	cmp.w	r8, #0
 8013c22:	d01d      	beq.n	8013c60 <UART_WaitOnFlagUntilTimeout+0x8c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013c24:	683c      	ldr	r4, [r7, #0]
 8013c26:	6823      	ldr	r3, [r4, #0]
 8013c28:	075a      	lsls	r2, r3, #29
 8013c2a:	d5dc      	bpl.n	8013be6 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013c2c:	69e3      	ldr	r3, [r4, #28]
 8013c2e:	051b      	lsls	r3, r3, #20
 8013c30:	d5d9      	bpl.n	8013be6 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013c32:	f44f 6200 	mov.w	r2, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 8013c36:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 8013c38:	2100      	movs	r1, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013c3a:	6222      	str	r2, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8013c3c:	6822      	ldr	r2, [r4, #0]
          return HAL_TIMEOUT;
 8013c3e:	2003      	movs	r0, #3
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8013c40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8013c44:	6022      	str	r2, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013c46:	68a2      	ldr	r2, [r4, #8]
 8013c48:	f022 0201 	bic.w	r2, r2, #1
 8013c4c:	60a2      	str	r2, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 8013c4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8013c52:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8013c56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013c5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 8013c5e:	e7ce      	b.n	8013bfe <UART_WaitOnFlagUntilTimeout+0x2a>
        huart->gState = HAL_UART_STATE_READY;
 8013c60:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8013c62:	2400      	movs	r4, #0
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8013c64:	683b      	ldr	r3, [r7, #0]
        __HAL_UNLOCK(huart);
 8013c66:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8013c68:	681a      	ldr	r2, [r3, #0]
 8013c6a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8013c6e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013c70:	689a      	ldr	r2, [r3, #8]
 8013c72:	f022 0201 	bic.w	r2, r2, #1
 8013c76:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8013c78:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8013c7c:	f887 4080 	strb.w	r4, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8013c80:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 8013c84:	e7bb      	b.n	8013bfe <UART_WaitOnFlagUntilTimeout+0x2a>
 8013c86:	bf00      	nop

08013c88 <HAL_UART_Transmit>:
{
 8013c88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013c8c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8013c8e:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
{
 8013c92:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8013c94:	2820      	cmp	r0, #32
 8013c96:	d17b      	bne.n	8013d90 <HAL_UART_Transmit+0x108>
    if ((pData == NULL) || (Size == 0U))
 8013c98:	4688      	mov	r8, r1
 8013c9a:	2900      	cmp	r1, #0
 8013c9c:	d048      	beq.n	8013d30 <HAL_UART_Transmit+0xa8>
 8013c9e:	4617      	mov	r7, r2
 8013ca0:	2a00      	cmp	r2, #0
 8013ca2:	d045      	beq.n	8013d30 <HAL_UART_Transmit+0xa8>
 8013ca4:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 8013ca6:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8013caa:	2b01      	cmp	r3, #1
 8013cac:	d070      	beq.n	8013d90 <HAL_UART_Transmit+0x108>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013cae:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8013cb0:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013cb2:	f04f 0900 	mov.w	r9, #0
    __HAL_LOCK(huart);
 8013cb6:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013cba:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013cbe:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    tickstart = HAL_GetTick();
 8013cc2:	f7fd f831 	bl	8010d28 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013cc6:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8013cc8:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize  = Size;
 8013cce:	f8a4 7054 	strh.w	r7, [r4, #84]	; 0x54
    huart->TxXferCount = Size;
 8013cd2:	f8a4 7056 	strh.w	r7, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013cd6:	d05f      	beq.n	8013d98 <HAL_UART_Transmit+0x110>
      pdata16bits = NULL;
 8013cd8:	464f      	mov	r7, r9
    __HAL_UNLOCK(huart);
 8013cda:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8013cdc:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
    __HAL_UNLOCK(huart);
 8013ce0:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 8013ce4:	b29b      	uxth	r3, r3
 8013ce6:	b1b3      	cbz	r3, 8013d16 <HAL_UART_Transmit+0x8e>
 8013ce8:	6822      	ldr	r2, [r4, #0]
 8013cea:	1c69      	adds	r1, r5, #1
 8013cec:	d124      	bne.n	8013d38 <HAL_UART_Transmit+0xb0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013cee:	69d3      	ldr	r3, [r2, #28]
 8013cf0:	061b      	lsls	r3, r3, #24
 8013cf2:	d5fc      	bpl.n	8013cee <HAL_UART_Transmit+0x66>
      if (pdata8bits == NULL)
 8013cf4:	f1b8 0f00 	cmp.w	r8, #0
 8013cf8:	d045      	beq.n	8013d86 <HAL_UART_Transmit+0xfe>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8013cfa:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013cfe:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8013d00:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8013d04:	3b01      	subs	r3, #1
 8013d06:	b29b      	uxth	r3, r3
 8013d08:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8013d0c:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8013d10:	b29b      	uxth	r3, r3
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d1e9      	bne.n	8013cea <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013d16:	4633      	mov	r3, r6
 8013d18:	2200      	movs	r2, #0
 8013d1a:	2140      	movs	r1, #64	; 0x40
 8013d1c:	4620      	mov	r0, r4
 8013d1e:	9500      	str	r5, [sp, #0]
 8013d20:	f7ff ff58 	bl	8013bd4 <UART_WaitOnFlagUntilTimeout>
 8013d24:	2800      	cmp	r0, #0
 8013d26:	d152      	bne.n	8013dce <HAL_UART_Transmit+0x146>
    huart->gState = HAL_UART_STATE_READY;
 8013d28:	2320      	movs	r3, #32
 8013d2a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 8013d2e:	e000      	b.n	8013d32 <HAL_UART_Transmit+0xaa>
      return  HAL_ERROR;
 8013d30:	2001      	movs	r0, #1
}
 8013d32:	b003      	add	sp, #12
 8013d34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013d38:	69d3      	ldr	r3, [r2, #28]
 8013d3a:	f013 0980 	ands.w	r9, r3, #128	; 0x80
 8013d3e:	d1d9      	bne.n	8013cf4 <HAL_UART_Transmit+0x6c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013d40:	f7fc fff2 	bl	8010d28 <HAL_GetTick>
 8013d44:	1b80      	subs	r0, r0, r6
 8013d46:	4285      	cmp	r5, r0
 8013d48:	d32c      	bcc.n	8013da4 <HAL_UART_Transmit+0x11c>
 8013d4a:	b35d      	cbz	r5, 8013da4 <HAL_UART_Transmit+0x11c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013d4c:	6822      	ldr	r2, [r4, #0]
 8013d4e:	6813      	ldr	r3, [r2, #0]
 8013d50:	075b      	lsls	r3, r3, #29
 8013d52:	d5ca      	bpl.n	8013cea <HAL_UART_Transmit+0x62>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013d54:	69d3      	ldr	r3, [r2, #28]
 8013d56:	0518      	lsls	r0, r3, #20
 8013d58:	d5c7      	bpl.n	8013cea <HAL_UART_Transmit+0x62>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013d5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 8013d5e:	2320      	movs	r3, #32
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013d60:	6211      	str	r1, [r2, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8013d62:	6811      	ldr	r1, [r2, #0]
        return HAL_TIMEOUT;
 8013d64:	2003      	movs	r0, #3
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8013d66:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 8013d6a:	6011      	str	r1, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013d6c:	6891      	ldr	r1, [r2, #8]
 8013d6e:	f021 0101 	bic.w	r1, r1, #1
 8013d72:	6091      	str	r1, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 8013d74:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8013d78:	f884 9080 	strb.w	r9, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8013d7c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013d80:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          return HAL_TIMEOUT;
 8013d84:	e7d5      	b.n	8013d32 <HAL_UART_Transmit+0xaa>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013d86:	f837 3b02 	ldrh.w	r3, [r7], #2
 8013d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d8e:	e7b6      	b.n	8013cfe <HAL_UART_Transmit+0x76>
    return HAL_BUSY;
 8013d90:	2002      	movs	r0, #2
}
 8013d92:	b003      	add	sp, #12
 8013d94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013d98:	6923      	ldr	r3, [r4, #16]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d19c      	bne.n	8013cd8 <HAL_UART_Transmit+0x50>
 8013d9e:	4647      	mov	r7, r8
      pdata8bits  = NULL;
 8013da0:	4698      	mov	r8, r3
 8013da2:	e79a      	b.n	8013cda <HAL_UART_Transmit+0x52>
        huart->gState = HAL_UART_STATE_READY;
 8013da4:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8013da6:	2500      	movs	r5, #0
        return HAL_TIMEOUT;
 8013da8:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8013daa:	6823      	ldr	r3, [r4, #0]
 8013dac:	681a      	ldr	r2, [r3, #0]
 8013dae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8013db2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013db4:	689a      	ldr	r2, [r3, #8]
 8013db6:	f022 0201 	bic.w	r2, r2, #1
 8013dba:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8013dbc:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8013dc0:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8013dc4:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
}
 8013dc8:	b003      	add	sp, #12
 8013dca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 8013dce:	2003      	movs	r0, #3
 8013dd0:	e7af      	b.n	8013d32 <HAL_UART_Transmit+0xaa>
 8013dd2:	bf00      	nop

08013dd4 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8013dd4:	4770      	bx	lr
 8013dd6:	bf00      	nop

08013dd8 <HAL_UARTEx_RxFifoFullCallback>:
 8013dd8:	4770      	bx	lr
 8013dda:	bf00      	nop

08013ddc <HAL_UARTEx_TxFifoEmptyCallback>:
 8013ddc:	4770      	bx	lr
 8013dde:	bf00      	nop

08013de0 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013de0:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8013de4:	2a01      	cmp	r2, #1
 8013de6:	d017      	beq.n	8013e18 <HAL_UARTEx_DisableFifoMode+0x38>
 8013de8:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 8013dea:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8013dec:	2100      	movs	r1, #0
{
 8013dee:	b430      	push	{r4, r5}

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8013df0:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013df2:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8013df4:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013df8:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8013dfa:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8013dfc:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8013e00:	f024 0401 	bic.w	r4, r4, #1
 8013e04:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8013e06:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013e08:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013e0a:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80

  return HAL_OK;
 8013e0e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8013e10:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8013e14:	bc30      	pop	{r4, r5}
 8013e16:	4770      	bx	lr
  __HAL_LOCK(huart);
 8013e18:	2002      	movs	r0, #2
}
 8013e1a:	4770      	bx	lr

08013e1c <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013e1c:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8013e20:	2a01      	cmp	r2, #1
 8013e22:	d033      	beq.n	8013e8c <HAL_UARTEx_SetTxFifoThreshold+0x70>

  huart->gState = HAL_UART_STATE_BUSY;
 8013e24:	4603      	mov	r3, r0
 8013e26:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013e28:	681a      	ldr	r2, [r3, #0]
{
 8013e2a:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8013e2c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013e30:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013e32:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013e34:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8013e36:	f020 0001 	bic.w	r0, r0, #1
 8013e3a:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013e3c:	6890      	ldr	r0, [r2, #8]
 8013e3e:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8013e42:	4301      	orrs	r1, r0
 8013e44:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013e46:	b1f5      	cbz	r5, 8013e86 <HAL_UARTEx_SetTxFifoThreshold+0x6a>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013e48:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013e4a:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8013e4c:	4810      	ldr	r0, [pc, #64]	; (8013e90 <HAL_UARTEx_SetTxFifoThreshold+0x74>)
 8013e4e:	4f11      	ldr	r7, [pc, #68]	; (8013e94 <HAL_UARTEx_SetTxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8013e50:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013e54:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8013e56:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8013e58:	5d40      	ldrb	r0, [r0, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8013e5a:	5dbe      	ldrb	r6, [r7, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8013e5c:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8013e5e:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8013e60:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8013e62:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8013e66:	fbb0 f0f5 	udiv	r0, r0, r5
  __HAL_UNLOCK(huart);
 8013e6a:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8013e6c:	2620      	movs	r6, #32
 8013e6e:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013e72:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
 8013e76:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8013e78:	f883 5080 	strb.w	r5, [r3, #128]	; 0x80
  return HAL_OK;
 8013e7c:	4628      	mov	r0, r5
  huart->gState = HAL_UART_STATE_READY;
 8013e7e:	f8c3 6084 	str.w	r6, [r3, #132]	; 0x84
}
 8013e82:	bcf0      	pop	{r4, r5, r6, r7}
 8013e84:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8013e86:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8013e88:	4608      	mov	r0, r1
 8013e8a:	e7ee      	b.n	8013e6a <HAL_UARTEx_SetTxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 8013e8c:	2002      	movs	r0, #2
}
 8013e8e:	4770      	bx	lr
 8013e90:	08031874 	.word	0x08031874
 8013e94:	0803186c 	.word	0x0803186c

08013e98 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8013e98:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8013e9c:	2a01      	cmp	r2, #1
 8013e9e:	d033      	beq.n	8013f08 <HAL_UARTEx_SetRxFifoThreshold+0x70>
  huart->gState = HAL_UART_STATE_BUSY;
 8013ea0:	4603      	mov	r3, r0
 8013ea2:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013ea4:	681a      	ldr	r2, [r3, #0]
{
 8013ea6:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8013ea8:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013eac:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8013eae:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013eb0:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8013eb2:	f020 0001 	bic.w	r0, r0, #1
 8013eb6:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8013eb8:	6890      	ldr	r0, [r2, #8]
 8013eba:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 8013ebe:	4301      	orrs	r1, r0
 8013ec0:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013ec2:	b1f5      	cbz	r5, 8013f02 <HAL_UARTEx_SetRxFifoThreshold+0x6a>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013ec4:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013ec6:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8013ec8:	4810      	ldr	r0, [pc, #64]	; (8013f0c <HAL_UARTEx_SetRxFifoThreshold+0x74>)
 8013eca:	4f11      	ldr	r7, [pc, #68]	; (8013f10 <HAL_UARTEx_SetRxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8013ecc:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013ed0:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8013ed2:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8013ed4:	5d40      	ldrb	r0, [r0, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8013ed6:	5dbe      	ldrb	r6, [r7, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8013ed8:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8013eda:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8013edc:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8013ede:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8013ee2:	fbb0 f0f5 	udiv	r0, r0, r5
  __HAL_UNLOCK(huart);
 8013ee6:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8013ee8:	2620      	movs	r6, #32
 8013eea:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013eee:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
 8013ef2:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8013ef4:	f883 5080 	strb.w	r5, [r3, #128]	; 0x80
  return HAL_OK;
 8013ef8:	4628      	mov	r0, r5
  huart->gState = HAL_UART_STATE_READY;
 8013efa:	f8c3 6084 	str.w	r6, [r3, #132]	; 0x84
}
 8013efe:	bcf0      	pop	{r4, r5, r6, r7}
 8013f00:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8013f02:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8013f04:	4608      	mov	r0, r1
 8013f06:	e7ee      	b.n	8013ee6 <HAL_UARTEx_SetRxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 8013f08:	2002      	movs	r0, #2
}
 8013f0a:	4770      	bx	lr
 8013f0c:	08031874 	.word	0x08031874
 8013f10:	0803186c 	.word	0x0803186c

08013f14 <s2e_ssl_Board_Init>:
void init_serial_mode_select_pin(void);
uint8_t get_serial_mode_select_pin(uint8_t sel);

/* WIZ2000 Board Initialization */
void s2e_ssl_Board_Init(void)
{
 8013f14:	b570      	push	{r4, r5, r6, lr}
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013f16:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8013f1a:	4b12      	ldr	r3, [pc, #72]	; (8013f64 <s2e_ssl_Board_Init+0x50>)
 8013f1c:	601a      	str	r2, [r3, #0]
void LED_Init(Led_TypeDef Led)
{
    GPIO_Configuration(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_MODE_OUTPUT_PP, GPIO_NOPULL);
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); // LED Off
    
    GPIO_INIT[Led] = ENABLE; // init state
 8013f1e:	2401      	movs	r4, #1
    GPIO_Configuration(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_MODE_OUTPUT_PP, GPIO_NOPULL);
 8013f20:	4d11      	ldr	r5, [pc, #68]	; (8013f68 <s2e_ssl_Board_Init+0x54>)
    Device_IO_Init();
 8013f22:	f003 fadd 	bl	80174e0 <Device_IO_Init>
    GPIO_Configuration(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_MODE_OUTPUT_PP, GPIO_NOPULL);
 8013f26:	2300      	movs	r3, #0
 8013f28:	4622      	mov	r2, r4
 8013f2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8013f2e:	6828      	ldr	r0, [r5, #0]
 8013f30:	f003 fa4a 	bl	80173c8 <GPIO_Configuration>
    GPIO_INIT[Led] = ENABLE; // init state
 8013f34:	4e0d      	ldr	r6, [pc, #52]	; (8013f6c <s2e_ssl_Board_Init+0x58>)
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); // LED Off
 8013f36:	4622      	mov	r2, r4
 8013f38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8013f3c:	6828      	ldr	r0, [r5, #0]
 8013f3e:	f7fd fb11 	bl	8011564 <HAL_GPIO_WritePin>
    GPIO_Configuration(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_MODE_OUTPUT_PP, GPIO_NOPULL);
 8013f42:	4622      	mov	r2, r4
 8013f44:	2300      	movs	r3, #0
 8013f46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013f4a:	6868      	ldr	r0, [r5, #4]
    GPIO_INIT[Led] = ENABLE; // init state
 8013f4c:	7034      	strb	r4, [r6, #0]
    GPIO_Configuration(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_MODE_OUTPUT_PP, GPIO_NOPULL);
 8013f4e:	f003 fa3b 	bl	80173c8 <GPIO_Configuration>
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); // LED Off
 8013f52:	4622      	mov	r2, r4
 8013f54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013f58:	6868      	ldr	r0, [r5, #4]
 8013f5a:	f7fd fb03 	bl	8011564 <HAL_GPIO_WritePin>
    GPIO_INIT[Led] = ENABLE; // init state
 8013f5e:	7074      	strb	r4, [r6, #1]
}
 8013f60:	bd70      	pop	{r4, r5, r6, pc}
 8013f62:	bf00      	nop
 8013f64:	e000e100 	.word	0xe000e100
 8013f68:	20018028 	.word	0x20018028
 8013f6c:	20018388 	.word	0x20018388

08013f70 <get_phylink>:
{
 8013f70:	b508      	push	{r3, lr}
    return wizphy_getphylink();
 8013f72:	f008 f937 	bl	801c1e4 <wizphy_getphylink>
}
 8013f76:	b2c0      	uxtb	r0, r0
 8013f78:	bd08      	pop	{r3, pc}
 8013f7a:	bf00      	nop

08013f7c <LED_Toggle>:
  *     @arg LED2
  * @retval None
  */
void LED_Toggle(Led_TypeDef Led)
{
    if(GPIO_INIT[Led] != ENABLE) return;
 8013f7c:	4b06      	ldr	r3, [pc, #24]	; (8013f98 <LED_Toggle+0x1c>)
 8013f7e:	5c1b      	ldrb	r3, [r3, r0]
 8013f80:	2b01      	cmp	r3, #1
 8013f82:	d108      	bne.n	8013f96 <LED_Toggle+0x1a>
    GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 8013f84:	4a05      	ldr	r2, [pc, #20]	; (8013f9c <LED_Toggle+0x20>)
 8013f86:	4b06      	ldr	r3, [pc, #24]	; (8013fa0 <LED_Toggle+0x24>)
 8013f88:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8013f8c:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8013f90:	6951      	ldr	r1, [r2, #20]
 8013f92:	404b      	eors	r3, r1
 8013f94:	6153      	str	r3, [r2, #20]
}
 8013f96:	4770      	bx	lr
 8013f98:	20018388 	.word	0x20018388
 8013f9c:	20018028 	.word	0x20018028
 8013fa0:	0803187c 	.word	0x0803187c

08013fa4 <wizchip_dhcp_assign>:
#include <stdint.h>
#include "dhcp.h"
#include "ConfigData.h"

void wizchip_dhcp_assign(void)
{
 8013fa4:	b510      	push	{r4, lr}
 8013fa6:	b086      	sub	sp, #24
	DevConfig *value = get_DevConfig_pointer();
 8013fa8:	f000 f844 	bl	8014034 <get_DevConfig_pointer>
 8013fac:	4604      	mov	r4, r0
	wiz_NetInfo gWIZNETINFO;

	getIPfromDHCP(gWIZNETINFO.ip);
 8013fae:	f10d 0006 	add.w	r0, sp, #6
 8013fb2:	f009 f801 	bl	801cfb8 <getIPfromDHCP>
	getGWfromDHCP(gWIZNETINFO.gw);
 8013fb6:	f10d 000e 	add.w	r0, sp, #14
 8013fba:	f009 f809 	bl	801cfd0 <getGWfromDHCP>
	getSNfromDHCP(gWIZNETINFO.sn);
 8013fbe:	f10d 000a 	add.w	r0, sp, #10
 8013fc2:	f009 f811 	bl	801cfe8 <getSNfromDHCP>
	getDNSfromDHCP(gWIZNETINFO.dns);
 8013fc6:	f10d 0012 	add.w	r0, sp, #18
 8013fca:	f009 f819 	bl	801d000 <getDNSfromDHCP>

	get_DevConfig_value(gWIZNETINFO.mac, value->network_common.mac, sizeof(gWIZNETINFO.mac[0]) * 6);
 8013fce:	4668      	mov	r0, sp
 8013fd0:	f104 0129 	add.w	r1, r4, #41	; 0x29
 8013fd4:	2206      	movs	r2, #6
 8013fd6:	f000 f9d5 	bl	8014384 <get_DevConfig_value>
	set_DevConfig_value(value->network_common.local_ip, gWIZNETINFO.ip, sizeof(value->network_common.local_ip));
 8013fda:	f10d 0106 	add.w	r1, sp, #6
 8013fde:	f104 002f 	add.w	r0, r4, #47	; 0x2f
 8013fe2:	2204      	movs	r2, #4
 8013fe4:	f000 f9d0 	bl	8014388 <set_DevConfig_value>
	set_DevConfig_value(value->network_common.gateway, gWIZNETINFO.gw, sizeof(value->network_common.gateway));
 8013fe8:	f10d 010e 	add.w	r1, sp, #14
 8013fec:	f104 0033 	add.w	r0, r4, #51	; 0x33
 8013ff0:	2204      	movs	r2, #4
 8013ff2:	f000 f9c9 	bl	8014388 <set_DevConfig_value>
	set_DevConfig_value(value->network_common.subnet, gWIZNETINFO.sn, sizeof(value->network_common.subnet));
 8013ff6:	f10d 010a 	add.w	r1, sp, #10
 8013ffa:	f104 0037 	add.w	r0, r4, #55	; 0x37
 8013ffe:	2204      	movs	r2, #4
 8014000:	f000 f9c2 	bl	8014388 <set_DevConfig_value>
	set_DevConfig_value(value->network_option.dns_server_ip, gWIZNETINFO.dns, sizeof(value->network_option.dns_server_ip));
 8014004:	2204      	movs	r2, #4
 8014006:	f10d 0112 	add.w	r1, sp, #18
 801400a:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
 801400e:	f000 f9bb 	bl	8014388 <set_DevConfig_value>
	if(value->network_option.dhcp_use)
 8014012:	f894 30c7 	ldrb.w	r3, [r4, #199]	; 0xc7
		gWIZNETINFO.dhcp = NETINFO_DHCP;
	else
		gWIZNETINFO.dhcp = NETINFO_STATIC;

	ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 8014016:	4669      	mov	r1, sp
	if(value->network_option.dhcp_use)
 8014018:	2b00      	cmp	r3, #0
		gWIZNETINFO.dhcp = NETINFO_STATIC;
 801401a:	bf14      	ite	ne
 801401c:	2302      	movne	r3, #2
 801401e:	2301      	moveq	r3, #1
	ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 8014020:	2000      	movs	r0, #0
 8014022:	f88d 3016 	strb.w	r3, [sp, #22]
 8014026:	f008 f91b 	bl	801c260 <ctlnetwork>

//	display_Net_Info();
//	printf("DHCP LEASED TIME : %d sec. \r\n", getDHCPLeasetime());
}
 801402a:	b006      	add	sp, #24
 801402c:	bd10      	pop	{r4, pc}
 801402e:	bf00      	nop

08014030 <wizchip_dhcp_conflict>:

void wizchip_dhcp_conflict(void)
{
	// TODO
	;
}
 8014030:	4770      	bx	lr
 8014032:	bf00      	nop

08014034 <get_DevConfig_pointer>:
uint8_t mac[] = {0x00, 0x08, 0xdc, 0xAA, 0xBB, 0xCC};

DevConfig* get_DevConfig_pointer(void)
{
    return &dev_config;
}
 8014034:	4800      	ldr	r0, [pc, #0]	; (8014038 <get_DevConfig_pointer+0x4>)
 8014036:	4770      	bx	lr
 8014038:	20018390 	.word	0x20018390

0801403c <set_DevConfig_to_factory_value>:

void set_DevConfig_to_factory_value(void)
{
 801403c:	b5f0      	push	{r4, r5, r6, r7, lr}
        dev_config.network_connection[i].working_state = ST_OPEN;

        dev_config.network_connection[i].local_port = 5000+i;

        dev_config.network_connection[i].remote_port = 5000+i;
        dev_config.network_connection[i].remote_ip[0] = 192;
 801403e:	2203      	movs	r2, #3
    memset(dev_config.config_common.pw_search, 0x00, sizeof(dev_config.config_common.pw_search));
 8014040:	2500      	movs	r5, #0
    dev_config.device_common.device_type[1] = 0x00;
 8014042:	f44f 7e80 	mov.w	lr, #256	; 0x100
    dev_config.config_common.app_protocol = 0;      // Reserved field for device support protocols
 8014046:	f04f 6ca0 	mov.w	ip, #83886080	; 0x5000000
    dev_config.device_common.device_mode = DEVICE_APP_MODE;    // Reserved field for App / Boot identification
 801404a:	2601      	movs	r6, #1
    dev_config.network_common.local_ip[0] = 192;
 801404c:	f06f 477f 	mvn.w	r7, #4278190080	; 0xff000000
    memcpy(dev_config.device_common.device_name, DEVICE_ID_DEFAULT, sizeof(DEVICE_ID_DEFAULT));
 8014050:	4b63      	ldr	r3, [pc, #396]	; (80141e0 <set_DevConfig_to_factory_value+0x1a4>)
    dev_config.device_common.fw_ver[0] = MAJOR_VER;
 8014052:	4c64      	ldr	r4, [pc, #400]	; (80141e4 <set_DevConfig_to_factory_value+0x1a8>)
    memcpy(dev_config.device_common.device_name, DEVICE_ID_DEFAULT, sizeof(DEVICE_ID_DEFAULT));
 8014054:	cb03      	ldmia	r3!, {r0, r1}
 8014056:	881b      	ldrh	r3, [r3, #0]
 8014058:	f8c4 100a 	str.w	r1, [r4, #10]
 801405c:	81e3      	strh	r3, [r4, #14]
    dev_config.device_common.fw_ver[0] = MAJOR_VER;
 801405e:	4b62      	ldr	r3, [pc, #392]	; (80141e8 <set_DevConfig_to_factory_value+0x1ac>)
    dev_config.network_common.local_ip[0] = 192;
 8014060:	4962      	ldr	r1, [pc, #392]	; (80141ec <set_DevConfig_to_factory_value+0x1b0>)
    dev_config.device_common.fw_ver[0] = MAJOR_VER;
 8014062:	6023      	str	r3, [r4, #0]
    dev_config.network_common.local_ip[0] = 192;
 8014064:	4b62      	ldr	r3, [pc, #392]	; (80141f0 <set_DevConfig_to_factory_value+0x1b4>)
 8014066:	f8c4 1033 	str.w	r1, [r4, #51]	; 0x33
        dev_config.network_connection[i].local_port = 5000+i;
 801406a:	4962      	ldr	r1, [pc, #392]	; (80141f4 <set_DevConfig_to_factory_value+0x1b8>)
    dev_config.network_common.local_ip[0] = 192;
 801406c:	f8c4 302f 	str.w	r3, [r4, #47]	; 0x2f
        dev_config.network_connection[i].working_state = ST_OPEN;
 8014070:	4b61      	ldr	r3, [pc, #388]	; (80141f8 <set_DevConfig_to_factory_value+0x1bc>)
{
 8014072:	b087      	sub	sp, #28
    memcpy(dev_config.device_common.device_name, DEVICE_ID_DEFAULT, sizeof(DEVICE_ID_DEFAULT));
 8014074:	f8c4 0006 	str.w	r0, [r4, #6]
        dev_config.network_connection[i].local_port = 5000+i;
 8014078:	6421      	str	r1, [r4, #64]	; 0x40
        dev_config.network_connection[i].remote_ip[0] = 192;
 801407a:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
        dev_config.network_connection[i].remote_ip[3] = 3;

        dev_config.network_connection[i].fixed_local_port = DISABLE;
        dev_config.network_connection[i].dns_use = DISABLE;

        memset(dev_config.network_connection[i].dns_domain_name, 0x00, sizeof(dev_config.network_connection[i].dns_domain_name));
 801407e:	4629      	mov	r1, r5
 8014080:	2274      	movs	r2, #116	; 0x74
 8014082:	f104 0053 	add.w	r0, r4, #83	; 0x53
    dev_config.device_common.device_type[1] = 0x00;
 8014086:	f8a4 e004 	strh.w	lr, [r4, #4]
    dev_config.config_common.app_protocol = 0;      // Reserved field for device support protocols
 801408a:	f8c4 c01b 	str.w	ip, [r4, #27]
    dev_config.network_common.local_ip[0] = 192;
 801408e:	f8c4 7037 	str.w	r7, [r4, #55]	; 0x37
        dev_config.network_connection[i].working_state = ST_OPEN;
 8014092:	63e3      	str	r3, [r4, #60]	; 0x3c
    memset(dev_config.config_common.pw_search, 0x00, sizeof(dev_config.config_common.pw_search));
 8014094:	f8a4 5027 	strh.w	r5, [r4, #39]	; 0x27
 8014098:	f8c4 501f 	str.w	r5, [r4, #31]
 801409c:	f8c4 5023 	str.w	r5, [r4, #35]	; 0x23
        dev_config.network_connection[i].dns_use = DISABLE;
 80140a0:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
    dev_config.device_common.device_mode = DEVICE_APP_MODE;    // Reserved field for App / Boot identification
 80140a4:	76a6      	strb	r6, [r4, #26]
        dev_config.network_connection[i].working_mode = TCP_SERVER_MODE; //UDP_MODE; //TCP_MIXED_MODE;
 80140a6:	f884 603b 	strb.w	r6, [r4, #59]	; 0x3b
        memset(dev_config.network_connection[i].dns_domain_name, 0x00, sizeof(dev_config.network_connection[i].dns_domain_name));
 80140aa:	f01b fedc 	bl	802fe66 <memset>
        memcpy(dev_config.network_connection[i].dns_domain_name, "192.168.11.3", 12);
 80140ae:	4b53      	ldr	r3, [pc, #332]	; (80141fc <set_DevConfig_to_factory_value+0x1c0>)
#ifdef __USE_DSR_DTR_DEFAULT__
        dev_config.serial_option[i].dtr_en = ENABLE;
        dev_config.serial_option[i].dsr_en = ENABLE;
#else
        dev_config.serial_option[i].dtr_en = DISABLE;
        dev_config.serial_option[i].dsr_en = DISABLE;
 80140b0:	e9c4 553b 	strd	r5, r5, [r4, #236]	; 0xec
        memcpy(dev_config.network_connection[i].dns_domain_name, "192.168.11.3", 12);
 80140b4:	cb07      	ldmia	r3!, {r0, r1, r2}
        dev_config.tcp_option[i].inactivity = 0;        // sec, default: NONE
 80140b6:	4b52      	ldr	r3, [pc, #328]	; (8014200 <set_DevConfig_to_factory_value+0x1c4>)
        dev_config.serial_data_packing[i].packing_delimiter[0] = 0; // packing_delimiter used only one-byte (for WIZ107SR compatibility)
 80140b8:	e9c4 553d 	strd	r5, r5, [r4, #244]	; 0xf4
        dev_config.tcp_option[i].inactivity = 0;        // sec, default: NONE
 80140bc:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    dev_config.user_io_info.user_io_type = 0;
    dev_config.user_io_info.user_io_direction = 0;
    dev_config.user_io_info.user_io_status = 0;
#endif

    if ((dev_config.firmware_update.current_bank != APP_BANK0) && (dev_config.firmware_update.current_bank != APP_BANK1))
 80140c0:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
        memset(dev_config.tcp_option[i].pw_connect, 0x00, sizeof(dev_config.tcp_option[i].pw_connect));
 80140c4:	f8c4 50d6 	str.w	r5, [r4, #214]	; 0xd6
    if ((dev_config.firmware_update.current_bank != APP_BANK0) && (dev_config.firmware_update.current_bank != APP_BANK1))
 80140c8:	2b01      	cmp	r3, #1
        dev_config.firmware_update.current_bank = APP_BANK0;
 80140ca:	bf88      	it	hi
 80140cc:	f884 510d 	strbhi.w	r5, [r4, #269]	; 0x10d
        memset(dev_config.tcp_option[i].pw_connect, 0x00, sizeof(dev_config.tcp_option[i].pw_connect));
 80140d0:	f8c4 50da 	str.w	r5, [r4, #218]	; 0xda
    dev_config.user_io_info.user_io_enable = 0;
 80140d4:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
 80140d8:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
 80140dc:	f884 5102 	strb.w	r5, [r4, #258]	; 0x102
        memset(dev_config.tcp_option[i].pw_connect, 0x00, sizeof(dev_config.tcp_option[i].pw_connect));
 80140e0:	f8a4 50de 	strh.w	r5, [r4, #222]	; 0xde

    // SSL Option
    dev_config.ssl_option.root_ca_option = MBEDTLS_SSL_VERIFY_NONE;
 80140e4:	2500      	movs	r5, #0
    dev_config.network_option.dns_server_ip[3] = 8;
 80140e6:	2708      	movs	r7, #8
        dev_config.tcp_option[i].keepalive_wait_time = 7000;
 80140e8:	f241 3688 	movw	r6, #5000	; 0x1388
        memcpy(dev_config.network_connection[i].dns_domain_name, "192.168.11.3", 12);
 80140ec:	f8c4 0047 	str.w	r0, [r4, #71]	; 0x47
 80140f0:	f8c4 104b 	str.w	r1, [r4, #75]	; 0x4b
    dev_config.network_option.dhcp_use = DISABLE; //hoon
 80140f4:	4843      	ldr	r0, [pc, #268]	; (8014204 <set_DevConfig_to_factory_value+0x1c8>)
    dev_config.network_option.tcp_rcr_val = 8; // Default RCR(TCP retransmission retry count) value: 8
 80140f6:	4944      	ldr	r1, [pc, #272]	; (8014208 <set_DevConfig_to_factory_value+0x1cc>)
        memcpy(dev_config.network_connection[i].dns_domain_name, "192.168.11.3", 12);
 80140f8:	f8c4 204f 	str.w	r2, [r4, #79]	; 0x4f
    dev_config.network_option.dhcp_use = DISABLE; //hoon
 80140fc:	f8c4 00c7 	str.w	r0, [r4, #199]	; 0xc7
    dev_config.network_option.tcp_rcr_val = 8; // Default RCR(TCP retransmission retry count) value: 8
 8014100:	f8c4 10cc 	str.w	r1, [r4, #204]	; 0xcc
        dev_config.tcp_option[i].pw_connect_en = DISABLE;
 8014104:	4841      	ldr	r0, [pc, #260]	; (801420c <set_DevConfig_to_factory_value+0x1d0>)
 8014106:	4942      	ldr	r1, [pc, #264]	; (8014210 <set_DevConfig_to_factory_value+0x1d4>)
 8014108:	4a42      	ldr	r2, [pc, #264]	; (8014214 <set_DevConfig_to_factory_value+0x1d8>)
 801410a:	e9c4 0138 	strd	r0, r1, [r4, #224]	; 0xe0
 801410e:	f8c4 20e8 	str.w	r2, [r4, #232]	; 0xe8
    dev_config.ssl_option.client_cert_enable = DISABLE;
    
    // MQTT Option

    memset(dev_config.mqtt_option.user_name, 0x00, sizeof(dev_config.mqtt_option.user_name));
 8014112:	4629      	mov	r1, r5
 8014114:	2280      	movs	r2, #128	; 0x80
 8014116:	4840      	ldr	r0, [pc, #256]	; (8014218 <set_DevConfig_to_factory_value+0x1dc>)
    dev_config.network_option.dns_server_ip[3] = 8;
 8014118:	f884 70cb 	strb.w	r7, [r4, #203]	; 0xcb
        dev_config.tcp_option[i].keepalive_wait_time = 7000;
 801411c:	f8a4 60d4 	strh.w	r6, [r4, #212]	; 0xd4
    dev_config.ssl_option.root_ca_option = MBEDTLS_SSL_VERIFY_NONE;
 8014120:	f8a4 510e 	strh.w	r5, [r4, #270]	; 0x10e
    memset(dev_config.mqtt_option.user_name, 0x00, sizeof(dev_config.mqtt_option.user_name));
 8014124:	f01b fe9f 	bl	802fe66 <memset>
    memset(dev_config.mqtt_option.password, 0x00, sizeof(dev_config.mqtt_option.password));
 8014128:	4629      	mov	r1, r5
 801412a:	2280      	movs	r2, #128	; 0x80
 801412c:	483b      	ldr	r0, [pc, #236]	; (801421c <set_DevConfig_to_factory_value+0x1e0>)
 801412e:	f01b fe9a 	bl	802fe66 <memset>
    memset(dev_config.mqtt_option.client_id, 0x00, sizeof(dev_config.mqtt_option.client_id));
 8014132:	4629      	mov	r1, r5
 8014134:	2280      	movs	r2, #128	; 0x80
 8014136:	483a      	ldr	r0, [pc, #232]	; (8014220 <set_DevConfig_to_factory_value+0x1e4>)
 8014138:	f01b fe95 	bl	802fe66 <memset>
    memset(dev_config.mqtt_option.pub_topic, 0x00, sizeof(dev_config.mqtt_option.pub_topic));
 801413c:	4629      	mov	r1, r5
 801413e:	2280      	movs	r2, #128	; 0x80
 8014140:	4838      	ldr	r0, [pc, #224]	; (8014224 <set_DevConfig_to_factory_value+0x1e8>)
 8014142:	f01b fe90 	bl	802fe66 <memset>
    memset(dev_config.mqtt_option.sub_topic_0, 0x00, sizeof(dev_config.mqtt_option.sub_topic_0));
 8014146:	4629      	mov	r1, r5
 8014148:	2280      	movs	r2, #128	; 0x80
 801414a:	4837      	ldr	r0, [pc, #220]	; (8014228 <set_DevConfig_to_factory_value+0x1ec>)
 801414c:	f01b fe8b 	bl	802fe66 <memset>
    memset(dev_config.mqtt_option.sub_topic_1, 0x00, sizeof(dev_config.mqtt_option.sub_topic_1));
 8014150:	4629      	mov	r1, r5
 8014152:	2280      	movs	r2, #128	; 0x80
 8014154:	4835      	ldr	r0, [pc, #212]	; (801422c <set_DevConfig_to_factory_value+0x1f0>)
 8014156:	f01b fe86 	bl	802fe66 <memset>
    memset(dev_config.mqtt_option.sub_topic_2, 0x00, sizeof(dev_config.mqtt_option.sub_topic_2));
 801415a:	4629      	mov	r1, r5
 801415c:	2280      	movs	r2, #128	; 0x80
 801415e:	4834      	ldr	r0, [pc, #208]	; (8014230 <set_DevConfig_to_factory_value+0x1f4>)
 8014160:	f01b fe81 	bl	802fe66 <memset>
    dev_config.mqtt_option.qos = QOS0;
 8014164:	f44f 7380 	mov.w	r3, #256	; 0x100

    // fixed local port enable / disable

    dev_config.device_option.pw_setting_en = ENABLE;
    memset(dev_config.device_option.pw_setting, 0x00, sizeof(dev_config.device_option.pw_setting));
    memset(dev_config.device_option.device_group, 0x00, sizeof(dev_config.device_option.device_group));
 8014168:	4629      	mov	r1, r5
 801416a:	2220      	movs	r2, #32
 801416c:	4831      	ldr	r0, [pc, #196]	; (8014234 <set_DevConfig_to_factory_value+0x1f8>)
    dev_config.mqtt_option.qos = QOS0;
 801416e:	f8a4 34a0 	strh.w	r3, [r4, #1184]	; 0x4a0
    dev_config.mqtt_option.keepalive = 0;
 8014172:	f8c4 549c 	str.w	r5, [r4, #1180]	; 0x49c
 8014176:	f884 54ab 	strb.w	r5, [r4, #1195]	; 0x4ab
    memset(dev_config.device_option.device_group, 0x00, sizeof(dev_config.device_option.device_group));
 801417a:	f01b fe74 	bl	802fe66 <memset>
    memset(dev_config.device_option.device_alias, 0x00, sizeof(dev_config.device_option.device_alias));
 801417e:	4629      	mov	r1, r5
 8014180:	2228      	movs	r2, #40	; 0x28

    memcpy(dev_config.device_option.pw_setting, DEVICE_SETTING_PASSWORD_DEFAULT, sizeof(DEVICE_SETTING_PASSWORD_DEFAULT));
 8014182:	4d2d      	ldr	r5, [pc, #180]	; (8014238 <set_DevConfig_to_factory_value+0x1fc>)
    memset(dev_config.device_option.device_alias, 0x00, sizeof(dev_config.device_option.device_alias));
 8014184:	482d      	ldr	r0, [pc, #180]	; (801423c <set_DevConfig_to_factory_value+0x200>)
 8014186:	f01b fe6e 	bl	802fe66 <memset>
    memcpy(dev_config.device_option.pw_setting, DEVICE_SETTING_PASSWORD_DEFAULT, sizeof(DEVICE_SETTING_PASSWORD_DEFAULT));
 801418a:	4e2d      	ldr	r6, [pc, #180]	; (8014240 <set_DevConfig_to_factory_value+0x204>)
    memcpy(dev_config.device_option.device_group, DEVICE_GROUP_DEFAULT, sizeof(DEVICE_GROUP_DEFAULT));
 801418c:	4a2d      	ldr	r2, [pc, #180]	; (8014244 <set_DevConfig_to_factory_value+0x208>)
 801418e:	f105 0332 	add.w	r3, r5, #50	; 0x32
    memcpy(dev_config.device_option.pw_setting, DEVICE_SETTING_PASSWORD_DEFAULT, sizeof(DEVICE_SETTING_PASSWORD_DEFAULT));
 8014192:	ce03      	ldmia	r6!, {r0, r1}
 8014194:	f8c4 04a2 	str.w	r0, [r4, #1186]	; 0x4a2
 8014198:	6069      	str	r1, [r5, #4]
    memcpy(dev_config.device_option.device_group, DEVICE_GROUP_DEFAULT, sizeof(DEVICE_GROUP_DEFAULT));
 801419a:	ca07      	ldmia	r2, {r0, r1, r2}
 801419c:	c303      	stmia	r3!, {r0, r1}

    sprintf((char *)dev_config.device_option.device_alias, "%s-%02X%02X%02X%02X%02X%02X",
 801419e:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    memcpy(dev_config.device_option.device_group, DEVICE_GROUP_DEFAULT, sizeof(DEVICE_GROUP_DEFAULT));
 80141a2:	801a      	strh	r2, [r3, #0]
    sprintf((char *)dev_config.device_option.device_alias, "%s-%02X%02X%02X%02X%02X%02X",
 80141a4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 80141a8:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80141ac:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
 80141b0:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    memcpy(dev_config.device_option.pw_setting, DEVICE_SETTING_PASSWORD_DEFAULT, sizeof(DEVICE_SETTING_PASSWORD_DEFAULT));
 80141b4:	7836      	ldrb	r6, [r6, #0]
    sprintf((char *)dev_config.device_option.device_alias, "%s-%02X%02X%02X%02X%02X%02X",
 80141b6:	e9cd 2002 	strd	r2, r0, [sp, #8]
 80141ba:	9101      	str	r1, [sp, #4]
 80141bc:	9300      	str	r3, [sp, #0]
 80141be:	9704      	str	r7, [sp, #16]
 80141c0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80141c4:	4920      	ldr	r1, [pc, #128]	; (8014248 <set_DevConfig_to_factory_value+0x20c>)
 80141c6:	f2a5 429c 	subw	r2, r5, #1180	; 0x49c
 80141ca:	f105 000a 	add.w	r0, r5, #10
    memcpy(dev_config.device_option.pw_setting, DEVICE_SETTING_PASSWORD_DEFAULT, sizeof(DEVICE_SETTING_PASSWORD_DEFAULT));
 80141ce:	722e      	strb	r6, [r5, #8]
    sprintf((char *)dev_config.device_option.device_alias, "%s-%02X%02X%02X%02X%02X%02X",
 80141d0:	f01c f84a 	bl	8030268 <siprintf>
                                                       dev_config.network_common.mac[2],
                                                       dev_config.network_common.mac[3],
                                                       dev_config.network_common.mac[4],
                                                       dev_config.network_common.mac[5]);

    dev_config.devConfigVer = DEV_CONFIG_VER;//DEV_CONFIG_VER;
 80141d4:	2366      	movs	r3, #102	; 0x66
 80141d6:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
}
 80141da:	b007      	add	sp, #28
 80141dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80141de:	bf00      	nop
 80141e0:	08031884 	.word	0x08031884
 80141e4:	20018390 	.word	0x20018390
 80141e8:	03020001 	.word	0x03020001
 80141ec:	010ba8c0 	.word	0x010ba8c0
 80141f0:	020ba8c0 	.word	0x020ba8c0
 80141f4:	0ba8c013 	.word	0x0ba8c013
 80141f8:	88138801 	.word	0x88138801
 80141fc:	08031890 	.word	0x08031890
 8014200:	1b58010b 	.word	0x1b58010b
 8014204:	08080800 	.word	0x08080800
 8014208:	b8000008 	.word	0xb8000008
 801420c:	01010100 	.word	0x01010100
 8014210:	002b2b2b 	.word	0x002b2b2b
 8014214:	010c0001 	.word	0x010c0001
 8014218:	200186ac 	.word	0x200186ac
 801421c:	200187ac 	.word	0x200187ac
 8014220:	2001872c 	.word	0x2001872c
 8014224:	200184ac 	.word	0x200184ac
 8014228:	2001852c 	.word	0x2001852c
 801422c:	200185ac 	.word	0x200185ac
 8014230:	2001862c 	.word	0x2001862c
 8014234:	2001886c 	.word	0x2001886c
 8014238:	20018832 	.word	0x20018832
 801423c:	2001883c 	.word	0x2001883c
 8014240:	080318a0 	.word	0x080318a0
 8014244:	080318ac 	.word	0x080318ac
 8014248:	080318b8 	.word	0x080318b8

0801424c <load_DevConfig_from_storage>:

void load_DevConfig_from_storage(void)
{
 801424c:	b510      	push	{r4, lr}
    int ret = -1;

    read_storage(STORAGE_CONFIG, 0, &dev_config, sizeof(DevConfig));
 801424e:	4c2e      	ldr	r4, [pc, #184]	; (8014308 <load_DevConfig_from_storage+0xbc>)
{
 8014250:	b084      	sub	sp, #16
    read_storage(STORAGE_CONFIG, 0, &dev_config, sizeof(DevConfig));
 8014252:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8014256:	4622      	mov	r2, r4
 8014258:	2100      	movs	r1, #0
 801425a:	2001      	movs	r0, #1
 801425c:	f003 fa02 	bl	8017664 <read_storage>
    read_storage(STORAGE_MAC, 0, dev_config.network_common.mac, 6);
 8014260:	2100      	movs	r1, #0
 8014262:	2306      	movs	r3, #6
 8014264:	4608      	mov	r0, r1
 8014266:	f104 0229 	add.w	r2, r4, #41	; 0x29
 801426a:	f003 f9fb 	bl	8017664 <read_storage>
    //read_flash(FLASH_MAC_ADDR, &dev_config.network_common.mac, 6);

    PRT_INFO("MAC = %02X%02X%02X%02X%02X%02X\r\n", dev_config.network_common.mac[0], dev_config.network_common.mac[1], dev_config.network_common.mac[2], \
 801426e:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 8014272:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 8014276:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801427a:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 801427e:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8014282:	e9cd 3200 	strd	r3, r2, [sp]
 8014286:	4921      	ldr	r1, [pc, #132]	; (801430c <load_DevConfig_from_storage+0xc0>)
 8014288:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 801428c:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8014290:	481f      	ldr	r0, [pc, #124]	; (8014310 <load_DevConfig_from_storage+0xc4>)
 8014292:	f003 fdd7 	bl	8017e44 <WIZ_SECURE_printf>
                                                   dev_config.network_common.mac[3], dev_config.network_common.mac[4], dev_config.network_common.mac[5]);

   PRT_INFO("dev_config.devConfigVer = %d, DEV_CONFIG_VER = %d\r\n", dev_config.devConfigVer, DEV_CONFIG_VER);
 8014296:	f8d4 24fc 	ldr.w	r2, [r4, #1276]	; 0x4fc
 801429a:	2366      	movs	r3, #102	; 0x66
 801429c:	491b      	ldr	r1, [pc, #108]	; (801430c <load_DevConfig_from_storage+0xc0>)
 801429e:	481d      	ldr	r0, [pc, #116]	; (8014314 <load_DevConfig_from_storage+0xc8>)
 80142a0:	f003 fdd0 	bl	8017e44 <WIZ_SECURE_printf>
    if((dev_config.config_common.packet_size == 0x0000) ||
 80142a4:	f8b4 201d 	ldrh.w	r2, [r4, #29]
 80142a8:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80142ac:	d103      	bne.n	80142b6 <load_DevConfig_from_storage+0x6a>
       (dev_config.config_common.packet_size == 0xFFFF) ||
       (dev_config.config_common.packet_size != sizeof(DevConfig)) ||
 80142ae:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
 80142b2:	2b66      	cmp	r3, #102	; 0x66
 80142b4:	d022      	beq.n	80142fc <load_DevConfig_from_storage+0xb0>
        dev_config.devConfigVer != DEV_CONFIG_VER)
    { 
        PRT_INFO(" Config Data size: %d / %d\r\n", dev_config.config_common.packet_size, sizeof(DevConfig));
 80142b6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80142ba:	4914      	ldr	r1, [pc, #80]	; (801430c <load_DevConfig_from_storage+0xc0>)
 80142bc:	4816      	ldr	r0, [pc, #88]	; (8014318 <load_DevConfig_from_storage+0xcc>)
 80142be:	f003 fdc1 	bl	8017e44 <WIZ_SECURE_printf>
        
        set_DevConfig_to_factory_value();
 80142c2:	f7ff febb 	bl	801403c <set_DevConfig_to_factory_value>

        erase_storage(STORAGE_CONFIG);
 80142c6:	2001      	movs	r0, #1
 80142c8:	f003 fa1a 	bl	8017700 <erase_storage>
        write_storage(STORAGE_CONFIG, 0, (uint8_t *)&dev_config, sizeof(DevConfig));
 80142cc:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80142d0:	2100      	movs	r1, #0
 80142d2:	4a0d      	ldr	r2, [pc, #52]	; (8014308 <load_DevConfig_from_storage+0xbc>)
 80142d4:	2001      	movs	r0, #1
 80142d6:	f003 f9e3 	bl	80176a0 <write_storage>
        read_storage(STORAGE_CONFIG, 0, &dev_config, sizeof(DevConfig));
 80142da:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80142de:	2100      	movs	r1, #0
 80142e0:	4a09      	ldr	r2, [pc, #36]	; (8014308 <load_DevConfig_from_storage+0xbc>)
 80142e2:	2001      	movs	r0, #1
 80142e4:	f003 f9be 	bl	8017664 <read_storage>

        PRT_INFO("After Config Data size: %d / %d\r\n", dev_config.config_common.packet_size, sizeof(DevConfig));
 80142e8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80142ec:	f8b4 201d 	ldrh.w	r2, [r4, #29]
 80142f0:	4906      	ldr	r1, [pc, #24]	; (801430c <load_DevConfig_from_storage+0xc0>)
 80142f2:	480a      	ldr	r0, [pc, #40]	; (801431c <load_DevConfig_from_storage+0xd0>)
 80142f4:	f003 fda6 	bl	8017e44 <WIZ_SECURE_printf>
        device_reboot();
 80142f8:	f002 fa26 	bl	8016748 <device_reboot>
    }
    dev_config.firmware_update.current_bank = SECURE_Get_Running_Bank();
 80142fc:	f01d f9fc 	bl	80316f8 <__SECURE_Get_Running_Bank_veneer>
 8014300:	f884 010d 	strb.w	r0, [r4, #269]	; 0x10d
}
 8014304:	b004      	add	sp, #16
 8014306:	bd10      	pop	{r4, pc}
 8014308:	20018390 	.word	0x20018390
 801430c:	08031bd8 	.word	0x08031bd8
 8014310:	080318d4 	.word	0x080318d4
 8014314:	08031904 	.word	0x08031904
 8014318:	08031944 	.word	0x08031944
 801431c:	08031970 	.word	0x08031970

08014320 <save_DevConfig_to_storage>:


void save_DevConfig_to_storage(void)
{
 8014320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014322:	4f16      	ldr	r7, [pc, #88]	; (801437c <save_DevConfig_to_storage+0x5c>)
    erase_storage(STORAGE_CONFIG);
 8014324:	2001      	movs	r0, #1
{
 8014326:	f2ad 5d04 	subw	sp, sp, #1284	; 0x504
    int ret;
    
    do {
            // ## 20180208 Added by Eric, Added the verify function to flash write (Device config-data)
            //read_storage(STORAGE_CONFIG, 0, &dev_config_tmp, sizeof(DevConfig));
            write_storage(STORAGE_CONFIG, 0, (uint8_t *)&dev_config, sizeof(DevConfig));
 801432a:	463d      	mov	r5, r7
    erase_storage(STORAGE_CONFIG);
 801432c:	f003 f9e8 	bl	8017700 <erase_storage>
 8014330:	2400      	movs	r4, #0
            write_storage(STORAGE_CONFIG, 0, (uint8_t *)&dev_config, sizeof(DevConfig));
 8014332:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8014336:	462a      	mov	r2, r5
 8014338:	2100      	movs	r1, #0
 801433a:	2001      	movs	r0, #1
 801433c:	f003 f9b0 	bl	80176a0 <write_storage>
            read_storage(STORAGE_CONFIG, 0, &dev_config_tmp, sizeof(DevConfig));
 8014340:	466a      	mov	r2, sp
 8014342:	2100      	movs	r1, #0
 8014344:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8014348:	2001      	movs	r0, #1
 801434a:	f003 f98b 	bl	8017664 <read_storage>
            
#endif        
            if(memcmp(&dev_config, &dev_config_tmp, sizeof(DevConfig)) == 0) { // Config-data set is successfully updated.
 801434e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8014352:	4669      	mov	r1, sp
 8014354:	4628      	mov	r0, r5
 8014356:	f01b fd51 	bl	802fdfc <memcmp>
 801435a:	b130      	cbz	r0, 801436a <save_DevConfig_to_storage+0x4a>
                update_success = SEGCP_ENABLE;
                //if(dev_config.serial_info[0].serial_debug_en) {printf(" > DevConfig is successfully updated\r\n");}
            } else {
                retry_cnt++;
                if(dev_config.serial_common.serial_debug_en) {SECURE_debug(" > DevConfig update failed, Retry: %d\r\n", retry_cnt);}
 801435c:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 8014360:	1c66      	adds	r6, r4, #1
 8014362:	b92b      	cbnz	r3, 8014370 <save_DevConfig_to_storage+0x50>
            }
            
            if(retry_cnt >= MAX_SAVE_RETRY) {
 8014364:	2e05      	cmp	r6, #5
 8014366:	4634      	mov	r4, r6
 8014368:	d1e3      	bne.n	8014332 <save_DevConfig_to_storage+0x12>
                break;
            }
    } while(update_success != SEGCP_ENABLE);
}
 801436a:	f20d 5d04 	addw	sp, sp, #1284	; 0x504
 801436e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                if(dev_config.serial_common.serial_debug_en) {SECURE_debug(" > DevConfig update failed, Retry: %d\r\n", retry_cnt);}
 8014370:	4631      	mov	r1, r6
 8014372:	4803      	ldr	r0, [pc, #12]	; (8014380 <save_DevConfig_to_storage+0x60>)
 8014374:	f003 fd66 	bl	8017e44 <WIZ_SECURE_printf>
 8014378:	e7f4      	b.n	8014364 <save_DevConfig_to_storage+0x44>
 801437a:	bf00      	nop
 801437c:	20018390 	.word	0x20018390
 8014380:	080319a0 	.word	0x080319a0

08014384 <get_DevConfig_value>:

void get_DevConfig_value(void *dest, const void *src, uint16_t size)
{
    memcpy(dest, src, size);
 8014384:	f01b bd48 	b.w	802fe18 <memcpy>

08014388 <set_DevConfig_value>:
 8014388:	f01b bd46 	b.w	802fe18 <memcpy>

0801438c <display_Net_Info>:
    else
        net->dhcp = NETINFO_STATIC;
}

void display_Net_Info(void)
{
 801438c:	b510      	push	{r4, lr}
 801438e:	b08a      	sub	sp, #40	; 0x28
    DevConfig *dev_config = get_DevConfig_pointer();
    wiz_NetInfo gWIZNETINFO;

    uint8_t i;

    ctlnetwork(CN_GET_NETINFO, (void*) &gWIZNETINFO);
 8014390:	a904      	add	r1, sp, #16
 8014392:	2001      	movs	r0, #1
 8014394:	f007 ff64 	bl	801c260 <ctlnetwork>
    PRT_INFO(" # MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n", gWIZNETINFO.mac[0], gWIZNETINFO.mac[1], gWIZNETINFO.mac[2], gWIZNETINFO.mac[3], gWIZNETINFO.mac[4], gWIZNETINFO.mac[5]);
 8014398:	f89d 0015 	ldrb.w	r0, [sp, #21]
 801439c:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80143a0:	f89d 2013 	ldrb.w	r2, [sp, #19]
 80143a4:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80143a8:	e9cd 1002 	strd	r1, r0, [sp, #8]
 80143ac:	e9cd 3200 	strd	r3, r2, [sp]
 80143b0:	4945      	ldr	r1, [pc, #276]	; (80144c8 <display_Net_Info+0x13c>)
 80143b2:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80143b6:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80143ba:	4844      	ldr	r0, [pc, #272]	; (80144cc <display_Net_Info+0x140>)
 80143bc:	f003 fd42 	bl	8017e44 <WIZ_SECURE_printf>
    PRT_INFO(" # IP : %d.%d.%d.%d / Port : \r\n", gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2], gWIZNETINFO.ip[3]);
 80143c0:	f89d 2019 	ldrb.w	r2, [sp, #25]
 80143c4:	f89d 3018 	ldrb.w	r3, [sp, #24]
    for(i = 0; i < DEVICE_UART_CNT; i++)
        PRT_INFO("[Ch%d] %d ", i, dev_config->network_connection[i].local_port);
 80143c8:	4c41      	ldr	r4, [pc, #260]	; (80144d0 <display_Net_Info+0x144>)
    PRT_INFO(" # IP : %d.%d.%d.%d / Port : \r\n", gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2], gWIZNETINFO.ip[3]);
 80143ca:	e9cd 3200 	strd	r3, r2, [sp]
 80143ce:	493e      	ldr	r1, [pc, #248]	; (80144c8 <display_Net_Info+0x13c>)
 80143d0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80143d4:	f89d 2016 	ldrb.w	r2, [sp, #22]
 80143d8:	483e      	ldr	r0, [pc, #248]	; (80144d4 <display_Net_Info+0x148>)
 80143da:	f003 fd33 	bl	8017e44 <WIZ_SECURE_printf>
        PRT_INFO("[Ch%d] %d ", i, dev_config->network_connection[i].local_port);
 80143de:	2200      	movs	r2, #0
 80143e0:	f8b4 303d 	ldrh.w	r3, [r4, #61]	; 0x3d
 80143e4:	4938      	ldr	r1, [pc, #224]	; (80144c8 <display_Net_Info+0x13c>)
 80143e6:	483c      	ldr	r0, [pc, #240]	; (80144d8 <display_Net_Info+0x14c>)
 80143e8:	f003 fd2c 	bl	8017e44 <WIZ_SECURE_printf>
    PRT_INFO("\r\n");
 80143ec:	4936      	ldr	r1, [pc, #216]	; (80144c8 <display_Net_Info+0x13c>)
 80143ee:	483b      	ldr	r0, [pc, #236]	; (80144dc <display_Net_Info+0x150>)
 80143f0:	f003 fd28 	bl	8017e44 <WIZ_SECURE_printf>
    PRT_INFO(" # GW : %d.%d.%d.%d\r\n", gWIZNETINFO.gw[0], gWIZNETINFO.gw[1], gWIZNETINFO.gw[2], gWIZNETINFO.gw[3]);
 80143f4:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 80143f8:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80143fc:	4932      	ldr	r1, [pc, #200]	; (80144c8 <display_Net_Info+0x13c>)
 80143fe:	e9cd 3200 	strd	r3, r2, [sp]
 8014402:	4837      	ldr	r0, [pc, #220]	; (80144e0 <display_Net_Info+0x154>)
 8014404:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8014408:	f89d 201e 	ldrb.w	r2, [sp, #30]
 801440c:	f003 fd1a 	bl	8017e44 <WIZ_SECURE_printf>
    PRT_INFO(" # SN : %d.%d.%d.%d\r\n", gWIZNETINFO.sn[0], gWIZNETINFO.sn[1], gWIZNETINFO.sn[2], gWIZNETINFO.sn[3]);
 8014410:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8014414:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8014418:	492b      	ldr	r1, [pc, #172]	; (80144c8 <display_Net_Info+0x13c>)
 801441a:	e9cd 3200 	strd	r3, r2, [sp]
 801441e:	4831      	ldr	r0, [pc, #196]	; (80144e4 <display_Net_Info+0x158>)
 8014420:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8014424:	f89d 201a 	ldrb.w	r2, [sp, #26]
 8014428:	f003 fd0c 	bl	8017e44 <WIZ_SECURE_printf>
    PRT_INFO(" # DNS: %d.%d.%d.%d\r\n", gWIZNETINFO.dns[0], gWIZNETINFO.dns[1], gWIZNETINFO.dns[2], gWIZNETINFO.dns[3]);
 801442c:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 8014430:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8014434:	4924      	ldr	r1, [pc, #144]	; (80144c8 <display_Net_Info+0x13c>)
 8014436:	e9cd 3200 	strd	r3, r2, [sp]
 801443a:	482b      	ldr	r0, [pc, #172]	; (80144e8 <display_Net_Info+0x15c>)
 801443c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014440:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
 8014444:	f003 fcfe 	bl	8017e44 <WIZ_SECURE_printf>
    
    for(i = 0; i < DEVICE_UART_CNT; i++)
    {
        if(dev_config->network_connection[i].working_mode != TCP_SERVER_MODE)
 8014448:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 801444c:	2b01      	cmp	r3, #1
 801444e:	d029      	beq.n	80144a4 <display_Net_Info+0x118>
        {
            if(dev_config->network_connection[i].dns_use == SEGCP_ENABLE)
 8014450:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8014454:	2b01      	cmp	r3, #1
 8014456:	d02a      	beq.n	80144ae <display_Net_Info+0x122>
                        dev_config->network_connection[i].dns_domain_name,
                        dev_config->network_connection[i].remote_port);
            }
            else
            {
                PRT_INFO(" # Destination IP: %d.%d.%d.%d / Port: %d\r\n",
 8014458:	f8b4 103f 	ldrh.w	r1, [r4, #63]	; 0x3f
 801445c:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8014460:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014464:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8014468:	9300      	str	r3, [sp, #0]
 801446a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 801446e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8014472:	4915      	ldr	r1, [pc, #84]	; (80144c8 <display_Net_Info+0x13c>)
 8014474:	481d      	ldr	r0, [pc, #116]	; (80144ec <display_Net_Info+0x160>)
 8014476:	f003 fce5 	bl	8017e44 <WIZ_SECURE_printf>
                        dev_config->network_connection[i].remote_ip[1],
                        dev_config->network_connection[i].remote_ip[2],
                        dev_config->network_connection[i].remote_ip[3],
                        dev_config->network_connection[i].remote_port);

                if(dev_config->network_connection[i].working_mode == UDP_MODE)
 801447a:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 801447e:	2b03      	cmp	r3, #3
 8014480:	d110      	bne.n	80144a4 <display_Net_Info+0x118>
                {
                    if((dev_config->network_connection[i].remote_ip[0] == 0) &&
                       (dev_config->network_connection[i].remote_ip[1] == 0) &&
                       (dev_config->network_connection[i].remote_ip[2] == 0) &&
 8014482:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8014486:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 801448a:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 801448e:	4313      	orrs	r3, r2
 8014490:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8014494:	430b      	orrs	r3, r1
 8014496:	4313      	orrs	r3, r2
                       (dev_config->network_connection[i].remote_ip[3] == 0))
                    {
                        PRT_INFO(" ## UDP 1:N Mode\r\n");
 8014498:	490b      	ldr	r1, [pc, #44]	; (80144c8 <display_Net_Info+0x13c>)
 801449a:	bf0c      	ite	eq
 801449c:	4814      	ldreq	r0, [pc, #80]	; (80144f0 <display_Net_Info+0x164>)
                    }
                    else
                    {
                        PRT_INFO(" ## UDP 1:1 Mode\r\n");
 801449e:	4815      	ldrne	r0, [pc, #84]	; (80144f4 <display_Net_Info+0x168>)
 80144a0:	f003 fcd0 	bl	8017e44 <WIZ_SECURE_printf>
                    }
                }
            }
        }
    }
    printf("\r\n");
 80144a4:	4814      	ldr	r0, [pc, #80]	; (80144f8 <display_Net_Info+0x16c>)
 80144a6:	f01b fe25 	bl	80300f4 <puts>
}
 80144aa:	b00a      	add	sp, #40	; 0x28
 80144ac:	bd10      	pop	{r4, pc}
                PRT_INFO(" # Destination Domain: %s / Port: %d\r\n",
 80144ae:	f8b4 303f 	ldrh.w	r3, [r4, #63]	; 0x3f
 80144b2:	4905      	ldr	r1, [pc, #20]	; (80144c8 <display_Net_Info+0x13c>)
 80144b4:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80144b8:	4810      	ldr	r0, [pc, #64]	; (80144fc <display_Net_Info+0x170>)
 80144ba:	f003 fcc3 	bl	8017e44 <WIZ_SECURE_printf>
    printf("\r\n");
 80144be:	480e      	ldr	r0, [pc, #56]	; (80144f8 <display_Net_Info+0x16c>)
 80144c0:	f01b fe18 	bl	80300f4 <puts>
}
 80144c4:	b00a      	add	sp, #40	; 0x28
 80144c6:	bd10      	pop	{r4, pc}
 80144c8:	08031bf4 	.word	0x08031bf4
 80144cc:	080319c8 	.word	0x080319c8
 80144d0:	20018390 	.word	0x20018390
 80144d4:	080319fc 	.word	0x080319fc
 80144d8:	08031a28 	.word	0x08031a28
 80144dc:	08031a40 	.word	0x08031a40
 80144e0:	08031a50 	.word	0x08031a50
 80144e4:	08031a74 	.word	0x08031a74
 80144e8:	08031a98 	.word	0x08031a98
 80144ec:	08031af0 	.word	0x08031af0
 80144f0:	08031b28 	.word	0x08031b28
 80144f4:	08031b48 	.word	0x08031b48
 80144f8:	08033678 	.word	0x08033678
 80144fc:	08031abc 	.word	0x08031abc

08014500 <Net_Conf>:
    DevConfig *dev_config = get_DevConfig_pointer();
    setSHAR(dev_config->network_common.mac);
}

void Net_Conf(void)
{
 8014500:	b570      	push	{r4, r5, r6, lr}
    memcpy(dest, src, size);
 8014502:	4b13      	ldr	r3, [pc, #76]	; (8014550 <Net_Conf+0x50>)
{
 8014504:	b086      	sub	sp, #24
    memcpy(dest, src, size);
 8014506:	461a      	mov	r2, r3
    get_DevConfig_value(gWIZNETINFO.mac, dev_config->network_common.mac, sizeof(gWIZNETINFO.mac[0]) * 6);
    get_DevConfig_value(gWIZNETINFO.ip, dev_config->network_common.local_ip, sizeof(gWIZNETINFO.ip[0]) * 4);
    get_DevConfig_value(gWIZNETINFO.gw, dev_config->network_common.gateway, sizeof(gWIZNETINFO.gw[0]) * 4);
    get_DevConfig_value(gWIZNETINFO.sn, dev_config->network_common.subnet, sizeof(gWIZNETINFO.sn[0]) * 4);
    get_DevConfig_value(gWIZNETINFO.dns, dev_config->network_option.dns_server_ip, sizeof(gWIZNETINFO.dns));
    if(dev_config->network_option.dhcp_use)
 8014508:	f893 40c7 	ldrb.w	r4, [r3, #199]	; 0xc7
    memcpy(dest, src, size);
 801450c:	f852 0f29 	ldr.w	r0, [r2, #41]!
    if(dev_config->network_option.dhcp_use)
 8014510:	2c00      	cmp	r4, #0
        gWIZNETINFO.dhcp = NETINFO_DHCP;
    else
        gWIZNETINFO.dhcp = NETINFO_STATIC;
 8014512:	bf14      	ite	ne
 8014514:	2602      	movne	r6, #2
 8014516:	2601      	moveq	r6, #1
    memcpy(dest, src, size);
 8014518:	8892      	ldrh	r2, [r2, #4]
 801451a:	f8d3 502f 	ldr.w	r5, [r3, #47]	; 0x2f
 801451e:	f8d3 4033 	ldr.w	r4, [r3, #51]	; 0x33
 8014522:	f8ad 2004 	strh.w	r2, [sp, #4]
 8014526:	f8d3 2037 	ldr.w	r2, [r3, #55]	; 0x37
 801452a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801452e:	9000      	str	r0, [sp, #0]

    ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 8014530:	4669      	mov	r1, sp
 8014532:	2000      	movs	r0, #0
 8014534:	f88d 6016 	strb.w	r6, [sp, #22]
    memcpy(dest, src, size);
 8014538:	f8cd 5006 	str.w	r5, [sp, #6]
 801453c:	f8cd 400e 	str.w	r4, [sp, #14]
 8014540:	f8cd 200a 	str.w	r2, [sp, #10]
 8014544:	f8cd 3012 	str.w	r3, [sp, #18]
    ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 8014548:	f007 fe8a 	bl	801c260 <ctlnetwork>
}
 801454c:	b006      	add	sp, #24
 801454e:	bd70      	pop	{r4, r5, r6, pc}
 8014550:	20018390 	.word	0x20018390

08014554 <check_mac_address>:
    memcpy(dev_config->network_common.mac, mac, sizeof(dev_config->network_common.mac));
}
//#if 0//Viktor MAC address save

void check_mac_address()
{
 8014554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014556:	b089      	sub	sp, #36	; 0x24
	//DevConfig *dev_config = get_DevConfig_pointer();
	int ret;
  	uint8_t buf[12], vt, temp;
  	uint32_t vi, vj;
    uint8_t temp_buf[] = "INPUT MAC ? ";
 8014558:	ae04      	add	r6, sp, #16
 801455a:	4634      	mov	r4, r6
 801455c:	4ba1      	ldr	r3, [pc, #644]	; (80147e4 <check_mac_address+0x290>)
    
  	if (dev_config.network_common.mac[0] != 0x00 || dev_config.network_common.mac[1] != 0x08 || dev_config.network_common.mac[2] != 0xDC)
 801455e:	4fa2      	ldr	r7, [pc, #648]	; (80147e8 <check_mac_address+0x294>)
    uint8_t temp_buf[] = "INPUT MAC ? ";
 8014560:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014562:	c407      	stmia	r4!, {r0, r1, r2}
  	if (dev_config.network_common.mac[0] != 0x00 || dev_config.network_common.mac[1] != 0x08 || dev_config.network_common.mac[2] != 0xDC)
 8014564:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
    uint8_t temp_buf[] = "INPUT MAC ? ";
 8014568:	7023      	strb	r3, [r4, #0]
  	if (dev_config.network_common.mac[0] != 0x00 || dev_config.network_common.mac[1] != 0x08 || dev_config.network_common.mac[2] != 0xDC)
 801456a:	b922      	cbnz	r2, 8014576 <check_mac_address+0x22>
 801456c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8014570:	2b08      	cmp	r3, #8
 8014572:	f000 8131 	beq.w	80147d8 <check_mac_address+0x284>
  	{
  		PRT_INFO("%s\r\n", temp_buf);
 8014576:	4632      	mov	r2, r6
 8014578:	499c      	ldr	r1, [pc, #624]	; (80147ec <check_mac_address+0x298>)
 801457a:	489d      	ldr	r0, [pc, #628]	; (80147f0 <check_mac_address+0x29c>)
 801457c:	f003 fc62 	bl	8017e44 <WIZ_SECURE_printf>
        HAL_UART_Transmit(&huart1, temp_buf, strlen(temp_buf), 100);
 8014580:	4630      	mov	r0, r6
 8014582:	f7fb fe63 	bl	801024c <strlen>
 8014586:	2364      	movs	r3, #100	; 0x64
 8014588:	b282      	uxth	r2, r0
 801458a:	4631      	mov	r1, r6
 801458c:	4899      	ldr	r0, [pc, #612]	; (80147f4 <check_mac_address+0x2a0>)
 801458e:	f7ff fb7b 	bl	8013c88 <HAL_UART_Transmit>
  		while(1){
  			HAL_UART_Receive(&huart1, &vt ,1,100);
 8014592:	4c98      	ldr	r4, [pc, #608]	; (80147f4 <check_mac_address+0x2a0>)
 8014594:	2364      	movs	r3, #100	; 0x64
 8014596:	2201      	movs	r2, #1
 8014598:	4620      	mov	r0, r4
 801459a:	f10d 0102 	add.w	r1, sp, #2
 801459e:	f7fe fbaf 	bl	8012d00 <HAL_UART_Receive>
  			if(vt == 'S') {
 80145a2:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80145a6:	2b53      	cmp	r3, #83	; 0x53
 80145a8:	d1f4      	bne.n	8014594 <check_mac_address+0x40>
  				temp = 'R';
 80145aa:	2452      	movs	r4, #82	; 0x52
  				HAL_UART_Transmit(&huart1,&temp,1, 100);
 80145ac:	2364      	movs	r3, #100	; 0x64
 80145ae:	2201      	movs	r2, #1
 80145b0:	4890      	ldr	r0, [pc, #576]	; (80147f4 <check_mac_address+0x2a0>)
 80145b2:	f10d 0103 	add.w	r1, sp, #3
  				temp = 'R';
 80145b6:	f88d 4003 	strb.w	r4, [sp, #3]
  				HAL_UART_Transmit(&huart1,&temp,1, 100);
 80145ba:	f7ff fb65 	bl	8013c88 <HAL_UART_Transmit>
  				break;
  			}
  		}
  		for(vi = 0; vi < 12; vi++){
  			HAL_UART_Receive(&huart1,&buf[vi],1,100);
 80145be:	4d8d      	ldr	r5, [pc, #564]	; (80147f4 <check_mac_address+0x2a0>)
 80145c0:	ac01      	add	r4, sp, #4
 80145c2:	4621      	mov	r1, r4
 80145c4:	2364      	movs	r3, #100	; 0x64
 80145c6:	2201      	movs	r2, #1
 80145c8:	4628      	mov	r0, r5
 80145ca:	f7fe fb99 	bl	8012d00 <HAL_UART_Receive>
  		    HAL_UART_Transmit(&huart1,&buf[vi],1,100);
 80145ce:	2201      	movs	r2, #1
 80145d0:	4621      	mov	r1, r4
 80145d2:	2364      	movs	r3, #100	; 0x64
 80145d4:	4414      	add	r4, r2
 80145d6:	4628      	mov	r0, r5
 80145d8:	f7ff fb56 	bl	8013c88 <HAL_UART_Transmit>
  		for(vi = 0; vi < 12; vi++){
 80145dc:	42b4      	cmp	r4, r6
 80145de:	d1f0      	bne.n	80145c2 <check_mac_address+0x6e>
  		}
		HAL_UART_Transmit(&huart1,"\r\n",2,100);
 80145e0:	2364      	movs	r3, #100	; 0x64
 80145e2:	2202      	movs	r2, #2
 80145e4:	4984      	ldr	r1, [pc, #528]	; (80147f8 <check_mac_address+0x2a4>)
 80145e6:	4883      	ldr	r0, [pc, #524]	; (80147f4 <check_mac_address+0x2a0>)
 80145e8:	f7ff fb4e 	bl	8013c88 <HAL_UART_Transmit>
  		for(vi = 0, vj = 0 ; vi < 6 ; vi++, vj += 2){
  			dev_config.network_common.mac[vi] = get_hex(buf[vj], buf[vj+1]);
 80145ec:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80145f0:	f89d 1005 	ldrb.w	r1, [sp, #5]
  return(buf[0]);
}

char atonum(char ch)
{
  ch -= '0';
 80145f4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80145f8:	b2db      	uxtb	r3, r3
  if (ch > 9) ch -= 7;
 80145fa:	2b09      	cmp	r3, #9
 80145fc:	d907      	bls.n	801460e <check_mac_address+0xba>
 80145fe:	f1a2 0337 	sub.w	r3, r2, #55	; 0x37
 8014602:	b2db      	uxtb	r3, r3
  if (ch > 15) ch -= 0x20;
 8014604:	2b0f      	cmp	r3, #15
 8014606:	bf84      	itt	hi
 8014608:	f1a2 0357 	subhi.w	r3, r2, #87	; 0x57
 801460c:	b2db      	uxtbhi	r3, r3
  ch -= '0';
 801460e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8014612:	b2d2      	uxtb	r2, r2
  buf[0] <<= 4;
 8014614:	011b      	lsls	r3, r3, #4
  if (ch > 9) ch -= 7;
 8014616:	2a09      	cmp	r2, #9
  buf[0] <<= 4;
 8014618:	b2db      	uxtb	r3, r3
  if (ch > 9) ch -= 7;
 801461a:	d907      	bls.n	801462c <check_mac_address+0xd8>
 801461c:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
 8014620:	b2d2      	uxtb	r2, r2
  if (ch > 15) ch -= 0x20;
 8014622:	2a0f      	cmp	r2, #15
 8014624:	bf84      	itt	hi
 8014626:	f1a1 0257 	subhi.w	r2, r1, #87	; 0x57
 801462a:	b2d2      	uxtbhi	r2, r2
  			dev_config.network_common.mac[vi] = get_hex(buf[vj], buf[vj+1]);
 801462c:	f89d 5006 	ldrb.w	r5, [sp, #6]
  			mac[vi] = get_hex(buf[vj], buf[vj+1]);
 8014630:	4972      	ldr	r1, [pc, #456]	; (80147fc <check_mac_address+0x2a8>)
  ch -= '0';
 8014632:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
  buf[0]  += atonum(buf[1]);
 8014636:	4413      	add	r3, r2
  ch -= '0';
 8014638:	b2c0      	uxtb	r0, r0
  buf[0]  += atonum(buf[1]);
 801463a:	b2db      	uxtb	r3, r3
  if (ch > 9) ch -= 7;
 801463c:	2809      	cmp	r0, #9
  			dev_config.network_common.mac[vi] = get_hex(buf[vj], buf[vj+1]);
 801463e:	f89d 4007 	ldrb.w	r4, [sp, #7]
 8014642:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  			mac[vi] = get_hex(buf[vj], buf[vj+1]);
 8014646:	700b      	strb	r3, [r1, #0]
  if (ch > 9) ch -= 7;
 8014648:	d907      	bls.n	801465a <check_mac_address+0x106>
 801464a:	f1a5 0037 	sub.w	r0, r5, #55	; 0x37
 801464e:	b2c0      	uxtb	r0, r0
  if (ch > 15) ch -= 0x20;
 8014650:	280f      	cmp	r0, #15
 8014652:	bf84      	itt	hi
 8014654:	f1a5 0057 	subhi.w	r0, r5, #87	; 0x57
 8014658:	b2c0      	uxtbhi	r0, r0
  ch -= '0';
 801465a:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 801465e:	b2d2      	uxtb	r2, r2
  buf[0] <<= 4;
 8014660:	0100      	lsls	r0, r0, #4
  if (ch > 9) ch -= 7;
 8014662:	2a09      	cmp	r2, #9
  buf[0] <<= 4;
 8014664:	b2c0      	uxtb	r0, r0
  if (ch > 9) ch -= 7;
 8014666:	d907      	bls.n	8014678 <check_mac_address+0x124>
 8014668:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
 801466c:	b2da      	uxtb	r2, r3
  if (ch > 15) ch -= 0x20;
 801466e:	2a0f      	cmp	r2, #15
 8014670:	bf84      	itt	hi
 8014672:	f1a4 0257 	subhi.w	r2, r4, #87	; 0x57
 8014676:	b2d2      	uxtbhi	r2, r2
  			dev_config.network_common.mac[vi] = get_hex(buf[vj], buf[vj+1]);
 8014678:	f89d 5008 	ldrb.w	r5, [sp, #8]
  buf[0]  += atonum(buf[1]);
 801467c:	4402      	add	r2, r0
  ch -= '0';
 801467e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8014682:	b2db      	uxtb	r3, r3
  buf[0]  += atonum(buf[1]);
 8014684:	b2d2      	uxtb	r2, r2
  if (ch > 9) ch -= 7;
 8014686:	2b09      	cmp	r3, #9
  			dev_config.network_common.mac[vi] = get_hex(buf[vj], buf[vj+1]);
 8014688:	f89d 4009 	ldrb.w	r4, [sp, #9]
 801468c:	f887 202a 	strb.w	r2, [r7, #42]	; 0x2a
  			mac[vi] = get_hex(buf[vj], buf[vj+1]);
 8014690:	704a      	strb	r2, [r1, #1]
  if (ch > 9) ch -= 7;
 8014692:	d907      	bls.n	80146a4 <check_mac_address+0x150>
 8014694:	f1a5 0337 	sub.w	r3, r5, #55	; 0x37
 8014698:	b2db      	uxtb	r3, r3
  if (ch > 15) ch -= 0x20;
 801469a:	2b0f      	cmp	r3, #15
 801469c:	bf84      	itt	hi
 801469e:	f1a5 0357 	subhi.w	r3, r5, #87	; 0x57
 80146a2:	b2db      	uxtbhi	r3, r3
  ch -= '0';
 80146a4:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 80146a8:	b2d0      	uxtb	r0, r2
  buf[0] <<= 4;
 80146aa:	011b      	lsls	r3, r3, #4
  if (ch > 9) ch -= 7;
 80146ac:	2809      	cmp	r0, #9
  buf[0] <<= 4;
 80146ae:	b2da      	uxtb	r2, r3
  if (ch > 9) ch -= 7;
 80146b0:	d907      	bls.n	80146c2 <check_mac_address+0x16e>
 80146b2:	f1a4 0037 	sub.w	r0, r4, #55	; 0x37
 80146b6:	b2c0      	uxtb	r0, r0
  if (ch > 15) ch -= 0x20;
 80146b8:	280f      	cmp	r0, #15
 80146ba:	bf84      	itt	hi
 80146bc:	f1a4 0057 	subhi.w	r0, r4, #87	; 0x57
 80146c0:	b2c0      	uxtbhi	r0, r0
  			dev_config.network_common.mac[vi] = get_hex(buf[vj], buf[vj+1]);
 80146c2:	f89d 500a 	ldrb.w	r5, [sp, #10]
  buf[0]  += atonum(buf[1]);
 80146c6:	4402      	add	r2, r0
  ch -= '0';
 80146c8:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80146cc:	b2db      	uxtb	r3, r3
  buf[0]  += atonum(buf[1]);
 80146ce:	b2d2      	uxtb	r2, r2
  if (ch > 9) ch -= 7;
 80146d0:	2b09      	cmp	r3, #9
  			dev_config.network_common.mac[vi] = get_hex(buf[vj], buf[vj+1]);
 80146d2:	f89d 400b 	ldrb.w	r4, [sp, #11]
 80146d6:	f887 202b 	strb.w	r2, [r7, #43]	; 0x2b
  			mac[vi] = get_hex(buf[vj], buf[vj+1]);
 80146da:	708a      	strb	r2, [r1, #2]
  if (ch > 9) ch -= 7;
 80146dc:	d907      	bls.n	80146ee <check_mac_address+0x19a>
 80146de:	f1a5 0337 	sub.w	r3, r5, #55	; 0x37
 80146e2:	b2db      	uxtb	r3, r3
  if (ch > 15) ch -= 0x20;
 80146e4:	2b0f      	cmp	r3, #15
 80146e6:	bf84      	itt	hi
 80146e8:	f1a5 0357 	subhi.w	r3, r5, #87	; 0x57
 80146ec:	b2db      	uxtbhi	r3, r3
  ch -= '0';
 80146ee:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 80146f2:	b2d0      	uxtb	r0, r2
  buf[0] <<= 4;
 80146f4:	011b      	lsls	r3, r3, #4
  if (ch > 9) ch -= 7;
 80146f6:	2809      	cmp	r0, #9
  buf[0] <<= 4;
 80146f8:	b2da      	uxtb	r2, r3
  if (ch > 9) ch -= 7;
 80146fa:	d907      	bls.n	801470c <check_mac_address+0x1b8>
 80146fc:	f1a4 0037 	sub.w	r0, r4, #55	; 0x37
 8014700:	b2c0      	uxtb	r0, r0
  if (ch > 15) ch -= 0x20;
 8014702:	280f      	cmp	r0, #15
 8014704:	bf84      	itt	hi
 8014706:	f1a4 0057 	subhi.w	r0, r4, #87	; 0x57
 801470a:	b2c0      	uxtbhi	r0, r0
  			dev_config.network_common.mac[vi] = get_hex(buf[vj], buf[vj+1]);
 801470c:	f89d 500c 	ldrb.w	r5, [sp, #12]
  buf[0]  += atonum(buf[1]);
 8014710:	4402      	add	r2, r0
  ch -= '0';
 8014712:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8014716:	b2db      	uxtb	r3, r3
  buf[0]  += atonum(buf[1]);
 8014718:	b2d2      	uxtb	r2, r2
  if (ch > 9) ch -= 7;
 801471a:	2b09      	cmp	r3, #9
  			dev_config.network_common.mac[vi] = get_hex(buf[vj], buf[vj+1]);
 801471c:	f89d 400d 	ldrb.w	r4, [sp, #13]
 8014720:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
  			mac[vi] = get_hex(buf[vj], buf[vj+1]);
 8014724:	70ca      	strb	r2, [r1, #3]
  if (ch > 9) ch -= 7;
 8014726:	d907      	bls.n	8014738 <check_mac_address+0x1e4>
 8014728:	f1a5 0337 	sub.w	r3, r5, #55	; 0x37
 801472c:	b2db      	uxtb	r3, r3
  if (ch > 15) ch -= 0x20;
 801472e:	2b0f      	cmp	r3, #15
 8014730:	bf84      	itt	hi
 8014732:	f1a5 0357 	subhi.w	r3, r5, #87	; 0x57
 8014736:	b2db      	uxtbhi	r3, r3
  ch -= '0';
 8014738:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 801473c:	b2d0      	uxtb	r0, r2
  buf[0] <<= 4;
 801473e:	011b      	lsls	r3, r3, #4
  if (ch > 9) ch -= 7;
 8014740:	2809      	cmp	r0, #9
  buf[0] <<= 4;
 8014742:	b2da      	uxtb	r2, r3
  if (ch > 9) ch -= 7;
 8014744:	d907      	bls.n	8014756 <check_mac_address+0x202>
 8014746:	f1a4 0037 	sub.w	r0, r4, #55	; 0x37
 801474a:	b2c0      	uxtb	r0, r0
  if (ch > 15) ch -= 0x20;
 801474c:	280f      	cmp	r0, #15
 801474e:	bf84      	itt	hi
 8014750:	f1a4 0057 	subhi.w	r0, r4, #87	; 0x57
 8014754:	b2c0      	uxtbhi	r0, r0
  			dev_config.network_common.mac[vi] = get_hex(buf[vj], buf[vj+1]);
 8014756:	f89d 400e 	ldrb.w	r4, [sp, #14]
  buf[0]  += atonum(buf[1]);
 801475a:	4402      	add	r2, r0
  ch -= '0';
 801475c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8014760:	b2db      	uxtb	r3, r3
  buf[0]  += atonum(buf[1]);
 8014762:	b2d2      	uxtb	r2, r2
  if (ch > 9) ch -= 7;
 8014764:	2b09      	cmp	r3, #9
  			dev_config.network_common.mac[vi] = get_hex(buf[vj], buf[vj+1]);
 8014766:	f89d 000f 	ldrb.w	r0, [sp, #15]
 801476a:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
  			mac[vi] = get_hex(buf[vj], buf[vj+1]);
 801476e:	710a      	strb	r2, [r1, #4]
  if (ch > 9) ch -= 7;
 8014770:	d907      	bls.n	8014782 <check_mac_address+0x22e>
 8014772:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
 8014776:	b2db      	uxtb	r3, r3
  if (ch > 15) ch -= 0x20;
 8014778:	2b0f      	cmp	r3, #15
 801477a:	bf84      	itt	hi
 801477c:	f1a4 0357 	subhi.w	r3, r4, #87	; 0x57
 8014780:	b2db      	uxtbhi	r3, r3
  ch -= '0';
 8014782:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
 8014786:	b2d2      	uxtb	r2, r2
  buf[0] <<= 4;
 8014788:	011b      	lsls	r3, r3, #4
  if (ch > 9) ch -= 7;
 801478a:	2a09      	cmp	r2, #9
  buf[0] <<= 4;
 801478c:	b2db      	uxtb	r3, r3
  if (ch > 9) ch -= 7;
 801478e:	d81a      	bhi.n	80147c6 <check_mac_address+0x272>
  buf[0]  += atonum(buf[1]);
 8014790:	4413      	add	r3, r2
 8014792:	b2db      	uxtb	r3, r3
  		ret = erase_flash_page(FLASH_MAC_ADDR);
 8014794:	481a      	ldr	r0, [pc, #104]	; (8014800 <check_mac_address+0x2ac>)
  			mac[vi] = get_hex(buf[vj], buf[vj+1]);
 8014796:	714b      	strb	r3, [r1, #5]
  			dev_config.network_common.mac[vi] = get_hex(buf[vj], buf[vj+1]);
 8014798:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  		ret = erase_flash_page(FLASH_MAC_ADDR);
 801479c:	f002 fdde 	bl	801735c <erase_flash_page>
  		PRT_INFO("erase_flash_page ret = %d\r\n", ret);
 80147a0:	4912      	ldr	r1, [pc, #72]	; (80147ec <check_mac_address+0x298>)
  		ret = erase_flash_page(FLASH_MAC_ADDR);
 80147a2:	4602      	mov	r2, r0
  		PRT_INFO("erase_flash_page ret = %d\r\n", ret);
 80147a4:	4817      	ldr	r0, [pc, #92]	; (8014804 <check_mac_address+0x2b0>)
 80147a6:	f003 fb4d 	bl	8017e44 <WIZ_SECURE_printf>
  		ret = write_flash(FLASH_MAC_ADDR, mac, 6);
 80147aa:	2206      	movs	r2, #6
 80147ac:	4913      	ldr	r1, [pc, #76]	; (80147fc <check_mac_address+0x2a8>)
 80147ae:	4814      	ldr	r0, [pc, #80]	; (8014800 <check_mac_address+0x2ac>)
 80147b0:	f002 fd36 	bl	8017220 <write_flash>
  		PRT_INFO("write_flash ret = %d\r\n", ret);
 80147b4:	490d      	ldr	r1, [pc, #52]	; (80147ec <check_mac_address+0x298>)
  		ret = write_flash(FLASH_MAC_ADDR, mac, 6);
 80147b6:	4602      	mov	r2, r0
  		PRT_INFO("write_flash ret = %d\r\n", ret);
 80147b8:	4813      	ldr	r0, [pc, #76]	; (8014808 <check_mac_address+0x2b4>)
 80147ba:	f003 fb43 	bl	8017e44 <WIZ_SECURE_printf>
        device_reboot();
 80147be:	f001 ffc3 	bl	8016748 <device_reboot>
}
 80147c2:	b009      	add	sp, #36	; 0x24
 80147c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (ch > 9) ch -= 7;
 80147c6:	f1a0 0237 	sub.w	r2, r0, #55	; 0x37
 80147ca:	b2d2      	uxtb	r2, r2
  if (ch > 15) ch -= 0x20;
 80147cc:	2a0f      	cmp	r2, #15
 80147ce:	bf84      	itt	hi
 80147d0:	f1a0 0257 	subhi.w	r2, r0, #87	; 0x57
 80147d4:	b2d2      	uxtbhi	r2, r2
 80147d6:	e7db      	b.n	8014790 <check_mac_address+0x23c>
  	if (dev_config.network_common.mac[0] != 0x00 || dev_config.network_common.mac[1] != 0x08 || dev_config.network_common.mac[2] != 0xDC)
 80147d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80147dc:	2bdc      	cmp	r3, #220	; 0xdc
 80147de:	f47f aeca 	bne.w	8014576 <check_mac_address+0x22>
 80147e2:	e7ee      	b.n	80147c2 <check_mac_address+0x26e>
 80147e4:	08031bc8 	.word	0x08031bc8
 80147e8:	20018390 	.word	0x20018390
 80147ec:	08031c08 	.word	0x08031c08
 80147f0:	08031b68 	.word	0x08031b68
 80147f4:	2001bc60 	.word	0x2001bc60
 80147f8:	08032fb8 	.word	0x08032fb8
 80147fc:	20018034 	.word	0x20018034
 8014800:	08074000 	.word	0x08074000
 8014804:	08031b7c 	.word	0x08031b7c
 8014808:	08031ba4 	.word	0x08031ba4

0801480c <segcp_ret_handler>:
    segcp_ret_handler(segcp_ret);

}

void segcp_ret_handler(uint16_t segcp_ret)
{
 801480c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801480e:	4604      	mov	r4, r0
    DevConfig *dev_config = get_DevConfig_pointer();
 8014810:	f7ff fc10 	bl	8014034 <get_DevConfig_pointer>

    uint8_t ret = 0;
    uint8_t i;
    teDEVSTATUS status_bak[DEVICE_UART_CNT];

    if(segcp_ret && ((segcp_ret & SEGCP_RET_ERR) != SEGCP_RET_ERR)) // Command parsing success
 8014814:	b223      	sxth	r3, r4
 8014816:	2b00      	cmp	r3, #0
 8014818:	dd19      	ble.n	801484e <segcp_ret_handler+0x42>
    {
        if(segcp_ret & SEGCP_RET_SWITCH)
 801481a:	06a7      	lsls	r7, r4, #26
 801481c:	4605      	mov	r5, r0
 801481e:	d50b      	bpl.n	8014838 <segcp_ret_handler+0x2c>
        {
            if(opmode == DEVICE_GW_MODE)
 8014820:	4b53      	ldr	r3, [pc, #332]	; (8014970 <segcp_ret_handler+0x164>)
                init_trigger_modeswitch(get_seg_channel(SEGCP_UART), SEGCP_UART, DEVICE_AT_MODE); // DEVICE_GW_MODE -> DEVICE_AT_MODE
 8014822:	4e54      	ldr	r6, [pc, #336]	; (8014974 <segcp_ret_handler+0x168>)
            if(opmode == DEVICE_GW_MODE)
 8014824:	781b      	ldrb	r3, [r3, #0]
                init_trigger_modeswitch(get_seg_channel(SEGCP_UART), SEGCP_UART, DEVICE_AT_MODE); // DEVICE_GW_MODE -> DEVICE_AT_MODE
 8014826:	7830      	ldrb	r0, [r6, #0]
            if(opmode == DEVICE_GW_MODE)
 8014828:	2b01      	cmp	r3, #1
 801482a:	d051      	beq.n	80148d0 <segcp_ret_handler+0xc4>
            else
                init_trigger_modeswitch(get_seg_channel(SEGCP_UART), SEGCP_UART, DEVICE_GW_MODE); // DEVICE_AT_MODE -> DEVICE_GW_MODE
 801482c:	f003 fbb8 	bl	8017fa0 <get_seg_channel>
 8014830:	2201      	movs	r2, #1
 8014832:	7831      	ldrb	r1, [r6, #0]
 8014834:	f003 fcee 	bl	8018214 <init_trigger_modeswitch>
        }
    
        if(segcp_ret & SEGCP_RET_FACTORY)
 8014838:	0726      	lsls	r6, r4, #28
 801483a:	d419      	bmi.n	8014870 <segcp_ret_handler+0x64>
        {
            device_set_factory_default();
        }
        else if(segcp_ret & SEGCP_RET_SAVE)
 801483c:	f014 0610 	ands.w	r6, r4, #16
 8014840:	d17c      	bne.n	801493c <segcp_ret_handler+0x130>
        {
            PRT_SEGCP("segcp_ret & SEGCP_RET_SAVE\r\n");
            save_DevConfig_to_storage();
        }
        else if(segcp_ret & SEGCP_RET_ERASE_EEPROM)
 8014842:	04e0      	lsls	r0, r4, #19
 8014844:	d44d      	bmi.n	80148e2 <segcp_ret_handler+0xd6>
                printf("\r\n");
#endif
                erase_storage(STORAGE_MAC);
                erase_storage(STORAGE_CONFIG);        
        }
        if(segcp_ret & SEGCP_RET_FWUP)
 8014846:	0662      	lsls	r2, r4, #25
 8014848:	d416      	bmi.n	8014878 <segcp_ret_handler+0x6c>
            
            // If this device worked unstable after fw update failed problem occurred, users can add the device_reboot() function at below.
            //device_reboot();
        }

        if (segcp_ret & SEGCP_RET_REBOOT)
 801484a:	0623      	lsls	r3, r4, #24
 801484c:	d400      	bmi.n	8014850 <segcp_ret_handler+0x44>

            // Reboot
            device_reboot();
        }
    }
}
 801484e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            PRT_SEGCP("segcp_ret & SEGCP_RET_REBOOT\r\n");
 8014850:	22ed      	movs	r2, #237	; 0xed
 8014852:	4949      	ldr	r1, [pc, #292]	; (8014978 <segcp_ret_handler+0x16c>)
 8014854:	4849      	ldr	r0, [pc, #292]	; (801497c <segcp_ret_handler+0x170>)
 8014856:	f003 faf5 	bl	8017e44 <WIZ_SECURE_printf>
            if(opmode == DEVICE_AT_MODE) 
 801485a:	4b45      	ldr	r3, [pc, #276]	; (8014970 <segcp_ret_handler+0x164>)
 801485c:	781b      	ldrb	r3, [r3, #0]
 801485e:	b91b      	cbnz	r3, 8014868 <segcp_ret_handler+0x5c>
                if(dev_config->serial_common.serial_debug_en) uart_puts(SEG_DEBUG_UART, (uint8_t *)"REBOOT\r\n", 8);
 8014860:	f895 30e2 	ldrb.w	r3, [r5, #226]	; 0xe2
 8014864:	2b00      	cmp	r3, #0
 8014866:	d17d      	bne.n	8014964 <segcp_ret_handler+0x158>
}
 8014868:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            device_reboot();
 801486c:	f001 bf6c 	b.w	8016748 <device_reboot>
            device_set_factory_default();
 8014870:	f001 ff62 	bl	8016738 <device_set_factory_default>
        if(segcp_ret & SEGCP_RET_FWUP)
 8014874:	0662      	lsls	r2, r4, #25
 8014876:	d5e8      	bpl.n	801484a <segcp_ret_handler+0x3e>
                status_bak[i] = (teDEVSTATUS)get_device_status(i);
 8014878:	2000      	movs	r0, #0
 801487a:	f003 fbfb 	bl	8018074 <get_device_status>
 801487e:	4606      	mov	r6, r0
                set_device_status(i, ST_UPGRADE);
 8014880:	2103      	movs	r1, #3
 8014882:	2000      	movs	r0, #0
 8014884:	f003 fbc2 	bl	801800c <set_device_status>
            if((segcp_ret & SEGCP_RET_FWUP_BANK) == segcp_ret)
 8014888:	f034 0343 	bics.w	r3, r4, #67	; 0x43
                status_bak[i] = (teDEVSTATUS)get_device_status(i);
 801488c:	4637      	mov	r7, r6
            if((segcp_ret & SEGCP_RET_FWUP_BANK) == segcp_ret)
 801488e:	d13d      	bne.n	801490c <segcp_ret_handler+0x100>
                ret = device_bank_update(); // BANK Firmware update by Configuration tool
 8014890:	f001 ff7c 	bl	801678c <device_bank_update>
            if(ret == DEVICE_FWUP_RET_SUCCESS)
 8014894:	2880      	cmp	r0, #128	; 0x80
                    status_bak[i] = (teDEVSTATUS)get_device_status(i);
 8014896:	f04f 0000 	mov.w	r0, #0
            if(ret == DEVICE_FWUP_RET_SUCCESS)
 801489a:	d057      	beq.n	801494c <segcp_ret_handler+0x140>
                    set_device_status(i, status_bak[i]);
 801489c:	4631      	mov	r1, r6
                dev_config->firmware_update.fwup_size = 0;
 801489e:	f885 0106 	strb.w	r0, [r5, #262]	; 0x106
 80148a2:	f885 0107 	strb.w	r0, [r5, #263]	; 0x107
 80148a6:	f885 0108 	strb.w	r0, [r5, #264]	; 0x108
 80148aa:	f885 0109 	strb.w	r0, [r5, #265]	; 0x109
                dev_config->firmware_update.fwup_flag = SEGCP_DISABLE;
 80148ae:	f885 0103 	strb.w	r0, [r5, #259]	; 0x103
                dev_config->firmware_update.fwup_server_flag = SEGCP_DISABLE;
 80148b2:	f885 010a 	strb.w	r0, [r5, #266]	; 0x10a
                    set_device_status(i, status_bak[i]);
 80148b6:	f003 fba9 	bl	801800c <set_device_status>
                close(SOCK_FWUPDATE);
 80148ba:	2003      	movs	r0, #3
 80148bc:	f006 fcaa 	bl	801b214 <close>
                if(dev_config->serial_common.serial_debug_en) printf(" > SEGCP:UPDATE:FAILED\r\n");
 80148c0:	f895 30e2 	ldrb.w	r3, [r5, #226]	; 0xe2
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d0c2      	beq.n	801484e <segcp_ret_handler+0x42>
 80148c8:	482d      	ldr	r0, [pc, #180]	; (8014980 <segcp_ret_handler+0x174>)
 80148ca:	f01b fc13 	bl	80300f4 <puts>
 80148ce:	e7bc      	b.n	801484a <segcp_ret_handler+0x3e>
                init_trigger_modeswitch(get_seg_channel(SEGCP_UART), SEGCP_UART, DEVICE_AT_MODE); // DEVICE_GW_MODE -> DEVICE_AT_MODE
 80148d0:	f003 fb66 	bl	8017fa0 <get_seg_channel>
 80148d4:	7831      	ldrb	r1, [r6, #0]
 80148d6:	2200      	movs	r2, #0
 80148d8:	f003 fc9c 	bl	8018214 <init_trigger_modeswitch>
        if(segcp_ret & SEGCP_RET_FACTORY)
 80148dc:	0726      	lsls	r6, r4, #28
 80148de:	d5ad      	bpl.n	801483c <segcp_ret_handler+0x30>
 80148e0:	e7c6      	b.n	8014870 <segcp_ret_handler+0x64>
            PRT_SEGCP("segcp_ret & SEGCP_RET_ERASE_EEPROM\r\n");
 80148e2:	4925      	ldr	r1, [pc, #148]	; (8014978 <segcp_ret_handler+0x16c>)
 80148e4:	2293      	movs	r2, #147	; 0x93
 80148e6:	4827      	ldr	r0, [pc, #156]	; (8014984 <segcp_ret_handler+0x178>)
 80148e8:	f003 faac 	bl	8017e44 <WIZ_SECURE_printf>
                erase_storage(STORAGE_MAC);
 80148ec:	4630      	mov	r0, r6
 80148ee:	f002 ff07 	bl	8017700 <erase_storage>
                erase_storage(STORAGE_CONFIG);        
 80148f2:	2001      	movs	r0, #1
 80148f4:	f002 ff04 	bl	8017700 <erase_storage>
        if(segcp_ret & SEGCP_RET_FWUP)
 80148f8:	0661      	lsls	r1, r4, #25
 80148fa:	d5a6      	bpl.n	801484a <segcp_ret_handler+0x3e>
                status_bak[i] = (teDEVSTATUS)get_device_status(i);
 80148fc:	4630      	mov	r0, r6
 80148fe:	f003 fbb9 	bl	8018074 <get_device_status>
                set_device_status(i, ST_UPGRADE);
 8014902:	2103      	movs	r1, #3
                status_bak[i] = (teDEVSTATUS)get_device_status(i);
 8014904:	4607      	mov	r7, r0
                set_device_status(i, ST_UPGRADE);
 8014906:	4630      	mov	r0, r6
 8014908:	f003 fb80 	bl	801800c <set_device_status>
                dev_config->firmware_update.fwup_size = 0;
 801490c:	2000      	movs	r0, #0
                    set_device_status(i, status_bak[i]);
 801490e:	4639      	mov	r1, r7
                dev_config->firmware_update.fwup_size = 0;
 8014910:	f885 0106 	strb.w	r0, [r5, #262]	; 0x106
 8014914:	f885 0107 	strb.w	r0, [r5, #263]	; 0x107
 8014918:	f885 0108 	strb.w	r0, [r5, #264]	; 0x108
 801491c:	f885 0109 	strb.w	r0, [r5, #265]	; 0x109
                dev_config->firmware_update.fwup_flag = SEGCP_DISABLE;
 8014920:	f885 0103 	strb.w	r0, [r5, #259]	; 0x103
                dev_config->firmware_update.fwup_server_flag = SEGCP_DISABLE;
 8014924:	f885 010a 	strb.w	r0, [r5, #266]	; 0x10a
                    set_device_status(i, status_bak[i]);
 8014928:	f003 fb70 	bl	801800c <set_device_status>
                close(SOCK_FWUPDATE);
 801492c:	2003      	movs	r0, #3
 801492e:	f006 fc71 	bl	801b214 <close>
                if(dev_config->serial_common.serial_debug_en) printf(" > SEGCP:UPDATE:FAILED\r\n");
 8014932:	f895 30e2 	ldrb.w	r3, [r5, #226]	; 0xe2
 8014936:	2b00      	cmp	r3, #0
 8014938:	d087      	beq.n	801484a <segcp_ret_handler+0x3e>
 801493a:	e7c5      	b.n	80148c8 <segcp_ret_handler+0xbc>
            PRT_SEGCP("segcp_ret & SEGCP_RET_SAVE\r\n");
 801493c:	228e      	movs	r2, #142	; 0x8e
 801493e:	490e      	ldr	r1, [pc, #56]	; (8014978 <segcp_ret_handler+0x16c>)
 8014940:	4811      	ldr	r0, [pc, #68]	; (8014988 <segcp_ret_handler+0x17c>)
 8014942:	f003 fa7f 	bl	8017e44 <WIZ_SECURE_printf>
            save_DevConfig_to_storage();
 8014946:	f7ff fceb 	bl	8014320 <save_DevConfig_to_storage>
 801494a:	e77c      	b.n	8014846 <segcp_ret_handler+0x3a>
                    status_bak[i] = (teDEVSTATUS)get_device_status(i);
 801494c:	f003 fb92 	bl	8018074 <get_device_status>
                    set_device_status(i, ST_OPEN);
 8014950:	2101      	movs	r1, #1
 8014952:	2000      	movs	r0, #0
 8014954:	f003 fb5a 	bl	801800c <set_device_status>
                save_DevConfig_to_storage();
 8014958:	f7ff fce2 	bl	8014320 <save_DevConfig_to_storage>
}
 801495c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                device_reboot();
 8014960:	f001 bef2 	b.w	8016748 <device_reboot>
                if(dev_config->serial_common.serial_debug_en) uart_puts(SEG_DEBUG_UART, (uint8_t *)"REBOOT\r\n", 8);
 8014964:	2208      	movs	r2, #8
 8014966:	4909      	ldr	r1, [pc, #36]	; (801498c <segcp_ret_handler+0x180>)
 8014968:	2002      	movs	r0, #2
 801496a:	f003 f9e7 	bl	8017d3c <uart_puts>
 801496e:	e77b      	b.n	8014868 <segcp_ret_handler+0x5c>
 8014970:	20018214 	.word	0x20018214
 8014974:	20018890 	.word	0x20018890
 8014978:	08032370 	.word	0x08032370
 801497c:	08031c94 	.word	0x08031c94
 8014980:	08031c7c 	.word	0x08031c7c
 8014984:	08031c48 	.word	0x08031c48
 8014988:	08031c1c 	.word	0x08031c1c
 801498c:	08031cc4 	.word	0x08031cc4

08014990 <get_segcp_uart>:
}


uint8_t get_segcp_uart(void)
{
    return SEGCP_UART;
 8014990:	4b01      	ldr	r3, [pc, #4]	; (8014998 <get_segcp_uart+0x8>)
}
 8014992:	7818      	ldrb	r0, [r3, #0]
 8014994:	4770      	bx	lr
 8014996:	bf00      	nop
 8014998:	20018890 	.word	0x20018890

0801499c <parse_SEGCP>:
    uint8_t** pcmd;
    uint8_t cmdnum = 0;
    uint8_t i;
    uint32_t len;
    
    *param = 0;
 801499c:	2300      	movs	r3, #0
{
 801499e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

    for(pcmd = tbSEGCPCMD; *pcmd != 0; pcmd++)
 80149a2:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8014b00 <parse_SEGCP+0x164>
    *param = 0;
 80149a6:	700b      	strb	r3, [r1, #0]
    for(pcmd = tbSEGCPCMD; *pcmd != 0; pcmd++)
 80149a8:	f8d8 4000 	ldr.w	r4, [r8]
{
 80149ac:	4606      	mov	r6, r0
 80149ae:	b083      	sub	sp, #12
    for(pcmd = tbSEGCPCMD; *pcmd != 0; pcmd++)
 80149b0:	2c00      	cmp	r4, #0
 80149b2:	f000 8089 	beq.w	8014ac8 <parse_SEGCP+0x12c>
 80149b6:	460f      	mov	r7, r1
 80149b8:	4645      	mov	r5, r8
 80149ba:	e004      	b.n	80149c6 <parse_SEGCP+0x2a>
 80149bc:	f855 4f04 	ldr.w	r4, [r5, #4]!
 80149c0:	2c00      	cmp	r4, #0
 80149c2:	f000 8081 	beq.w	8014ac8 <parse_SEGCP+0x12c>
    {
        if(!strncmp((char *)pmsg, *pcmd, strlen(*pcmd))) break;
 80149c6:	4620      	mov	r0, r4
 80149c8:	f7fb fc40 	bl	801024c <strlen>
 80149cc:	4621      	mov	r1, r4
 80149ce:	4602      	mov	r2, r0
 80149d0:	4630      	mov	r0, r6
 80149d2:	f01b fc87 	bl	80302e4 <strncmp>
 80149d6:	2800      	cmp	r0, #0
 80149d8:	d1f0      	bne.n	80149bc <parse_SEGCP+0x20>
    {
        PRT_SEGCP("[UNKNOWN]:%s\r\n", pmsg);
        return SEGCP_UNKNOWN;
    }
    
    cmdnum = (uint8_t)(pcmd - tbSEGCPCMD);
 80149da:	eba5 0408 	sub.w	r4, r5, r8
 80149de:	f3c4 0487 	ubfx	r4, r4, #2, #8
    
    if(cmdnum == (uint8_t)SEGCP_MA) 
 80149e2:	2c20      	cmp	r4, #32
    cmdnum = (uint8_t)(pcmd - tbSEGCPCMD);
 80149e4:	46a1      	mov	r9, r4
    if(cmdnum == (uint8_t)SEGCP_MA) 
 80149e6:	d031      	beq.n	8014a4c <parse_SEGCP+0xb0>
        else
        {
            return SEGCP_UNKNOWN;
        }
    }
    else if(cmdnum == (uint8_t)SEGCP_PW)
 80149e8:	2c21      	cmp	r4, #33	; 0x21
 80149ea:	d01b      	beq.n	8014a24 <parse_SEGCP+0x88>
        {
            return SEGCP_UNKNOWN;
        }
    }

    else if((cmdnum == (uint8_t)SEGCP_OC) || (cmdnum == (uint8_t)SEGCP_LC) || \
 80149ec:	f1a4 0342 	sub.w	r3, r4, #66	; 0x42
 80149f0:	2b02      	cmp	r3, #2
 80149f2:	d94f      	bls.n	8014a94 <parse_SEGCP+0xf8>
    }
#endif

    else
    {
        strcpy(param, (uint8_t*)&pmsg[2]);
 80149f4:	4638      	mov	r0, r7
 80149f6:	1cb1      	adds	r1, r6, #2
 80149f8:	f01b fc6c 	bl	80302d4 <strcpy>
    }

#if DBG_LEVEL_SEGCP
    PRT_SEGCP("[%d:%s:", cmdnum, *pcmd);
 80149fc:	682a      	ldr	r2, [r5, #0]
 80149fe:	4939      	ldr	r1, [pc, #228]	; (8014ae4 <parse_SEGCP+0x148>)
 8014a00:	4839      	ldr	r0, [pc, #228]	; (8014ae8 <parse_SEGCP+0x14c>)
 8014a02:	9200      	str	r2, [sp, #0]
 8014a04:	464b      	mov	r3, r9
 8014a06:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8014a0a:	f003 fa1b 	bl	8017e44 <WIZ_SECURE_printf>
    {
        for(i = 0; i < 6; i++) SECURE_debug("%.2x", param[i]);
    }
    else
    {
        SECURE_debug("%s",param);
 8014a0e:	4639      	mov	r1, r7
 8014a10:	4836      	ldr	r0, [pc, #216]	; (8014aec <parse_SEGCP+0x150>)
 8014a12:	f003 fa17 	bl	8017e44 <WIZ_SECURE_printf>
    }
    SECURE_debug("]\r\n");
 8014a16:	4836      	ldr	r0, [pc, #216]	; (8014af0 <parse_SEGCP+0x154>)
 8014a18:	f003 fa14 	bl	8017e44 <WIZ_SECURE_printf>
#endif
    
    return cmdnum;
}
 8014a1c:	4620      	mov	r0, r4
 8014a1e:	b003      	add	sp, #12
 8014a20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        for(i = 0; pmsg[2+i] != '\r'; i++)
 8014a24:	78b1      	ldrb	r1, [r6, #2]
 8014a26:	4602      	mov	r2, r0
 8014a28:	290d      	cmp	r1, #13
 8014a2a:	d055      	beq.n	8014ad8 <parse_SEGCP+0x13c>
 8014a2c:	1c53      	adds	r3, r2, #1
            param[i] = pmsg[2+i];
 8014a2e:	54b9      	strb	r1, [r7, r2]
        for(i = 0; pmsg[2+i] != '\r'; i++)
 8014a30:	b2da      	uxtb	r2, r3
 8014a32:	18b3      	adds	r3, r6, r2
 8014a34:	7899      	ldrb	r1, [r3, #2]
 8014a36:	290d      	cmp	r1, #13
 8014a38:	d1f8      	bne.n	8014a2c <parse_SEGCP+0x90>
 8014a3a:	1cd3      	adds	r3, r2, #3
        if(pmsg[2+i+1] == '\n')
 8014a3c:	5cf3      	ldrb	r3, [r6, r3]
 8014a3e:	2b0a      	cmp	r3, #10
 8014a40:	d10a      	bne.n	8014a58 <parse_SEGCP+0xbc>
            param[i] = 0; param[i+1] = 0;
 8014a42:	2300      	movs	r3, #0
 8014a44:	18b9      	adds	r1, r7, r2
 8014a46:	54bb      	strb	r3, [r7, r2]
 8014a48:	704b      	strb	r3, [r1, #1]
 8014a4a:	e7d7      	b.n	80149fc <parse_SEGCP+0x60>
        if((pmsg[8] == '\r') && (pmsg[9] == '\n'))
 8014a4c:	7a33      	ldrb	r3, [r6, #8]
 8014a4e:	2b0d      	cmp	r3, #13
 8014a50:	d102      	bne.n	8014a58 <parse_SEGCP+0xbc>
 8014a52:	7a73      	ldrb	r3, [r6, #9]
 8014a54:	2b0a      	cmp	r3, #10
 8014a56:	d004      	beq.n	8014a62 <parse_SEGCP+0xc6>
        return SEGCP_UNKNOWN;
 8014a58:	24ff      	movs	r4, #255	; 0xff
}
 8014a5a:	4620      	mov	r0, r4
 8014a5c:	b003      	add	sp, #12
 8014a5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            memcpy(param, (uint8_t*)&pmsg[2], 6);
 8014a62:	f856 2f02 	ldr.w	r2, [r6, #2]!
    PRT_SEGCP("[%d:%s:", cmdnum, *pcmd);
 8014a66:	4623      	mov	r3, r4
            memcpy(param, (uint8_t*)&pmsg[2], 6);
 8014a68:	603a      	str	r2, [r7, #0]
 8014a6a:	88b1      	ldrh	r1, [r6, #4]
    PRT_SEGCP("[%d:%s:", cmdnum, *pcmd);
 8014a6c:	f44f 72b2 	mov.w	r2, #356	; 0x164
            memcpy(param, (uint8_t*)&pmsg[2], 6);
 8014a70:	80b9      	strh	r1, [r7, #4]
    PRT_SEGCP("[%d:%s:", cmdnum, *pcmd);
 8014a72:	6828      	ldr	r0, [r5, #0]
 8014a74:	491b      	ldr	r1, [pc, #108]	; (8014ae4 <parse_SEGCP+0x148>)
 8014a76:	9000      	str	r0, [sp, #0]
 8014a78:	481b      	ldr	r0, [pc, #108]	; (8014ae8 <parse_SEGCP+0x14c>)
 8014a7a:	f003 f9e3 	bl	8017e44 <WIZ_SECURE_printf>
        for(i = 0; i < 6; i++) SECURE_debug("%.2x", param[i]);
 8014a7e:	4e1d      	ldr	r6, [pc, #116]	; (8014af4 <parse_SEGCP+0x158>)
 8014a80:	1e7d      	subs	r5, r7, #1
 8014a82:	3705      	adds	r7, #5
 8014a84:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8014a88:	4630      	mov	r0, r6
 8014a8a:	f003 f9db 	bl	8017e44 <WIZ_SECURE_printf>
 8014a8e:	42af      	cmp	r7, r5
 8014a90:	d1f8      	bne.n	8014a84 <parse_SEGCP+0xe8>
 8014a92:	e7c0      	b.n	8014a16 <parse_SEGCP+0x7a>
        PRT_SEGCP("cmd == %s\r\n", tbSEGCPCMD[cmdnum]);
 8014a94:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8014a98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014a9c:	4911      	ldr	r1, [pc, #68]	; (8014ae4 <parse_SEGCP+0x148>)
 8014a9e:	4816      	ldr	r0, [pc, #88]	; (8014af8 <parse_SEGCP+0x15c>)
 8014aa0:	f003 f9d0 	bl	8017e44 <WIZ_SECURE_printf>
        len = strlen(pmsg);
 8014aa4:	4630      	mov	r0, r6
 8014aa6:	f7fb fbd1 	bl	801024c <strlen>
            if ((*(pmsg + len + 1) == '\n') || (*(pmsg + len + 1) == NULL))
 8014aaa:	1c43      	adds	r3, r0, #1
 8014aac:	5cf2      	ldrb	r2, [r6, r3]
 8014aae:	2a0a      	cmp	r2, #10
 8014ab0:	d000      	beq.n	8014ab4 <parse_SEGCP+0x118>
 8014ab2:	b99a      	cbnz	r2, 8014adc <parse_SEGCP+0x140>
                *(pmsg + len) = '\r';
 8014ab4:	210d      	movs	r1, #13
                *(pmsg + len + 1) = '\n';
 8014ab6:	220a      	movs	r2, #10
                *(pmsg + len) = '\r';
 8014ab8:	5431      	strb	r1, [r6, r0]
                *(pmsg + len + 1) = '\n';
 8014aba:	54f2      	strb	r2, [r6, r3]
        *param = 1;
 8014abc:	2301      	movs	r3, #1
}
 8014abe:	4620      	mov	r0, r4
        *param = 1;
 8014ac0:	703b      	strb	r3, [r7, #0]
}
 8014ac2:	b003      	add	sp, #12
 8014ac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        PRT_SEGCP("[UNKNOWN]:%s\r\n", pmsg);
 8014ac8:	4633      	mov	r3, r6
 8014aca:	f240 1215 	movw	r2, #277	; 0x115
 8014ace:	4905      	ldr	r1, [pc, #20]	; (8014ae4 <parse_SEGCP+0x148>)
 8014ad0:	480a      	ldr	r0, [pc, #40]	; (8014afc <parse_SEGCP+0x160>)
 8014ad2:	f003 f9b7 	bl	8017e44 <WIZ_SECURE_printf>
 8014ad6:	e7bf      	b.n	8014a58 <parse_SEGCP+0xbc>
        for(i = 0; pmsg[2+i] != '\r'; i++)
 8014ad8:	2303      	movs	r3, #3
 8014ada:	e7af      	b.n	8014a3c <parse_SEGCP+0xa0>
                *(pmsg + len) = '\n';
 8014adc:	230a      	movs	r3, #10
 8014ade:	5433      	strb	r3, [r6, r0]
 8014ae0:	e7ec      	b.n	8014abc <parse_SEGCP+0x120>
 8014ae2:	bf00      	nop
 8014ae4:	08032384 	.word	0x08032384
 8014ae8:	08031cd0 	.word	0x08031cd0
 8014aec:	08031d0c 	.word	0x08031d0c
 8014af0:	080328a4 	.word	0x080328a4
 8014af4:	08031d04 	.word	0x08031d04
 8014af8:	08031ce8 	.word	0x08031ce8
 8014afc:	08031d10 	.word	0x08031d10
 8014b00:	20018058 	.word	0x20018058

08014b04 <proc_SEGCP>:

uint16_t proc_SEGCP(uint8_t* segcp_req, uint8_t* segcp_rep)
{
 8014b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b08:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8014b0c:	4604      	mov	r4, r0
 8014b0e:	4688      	mov	r8, r1
    DevConfig *dev_config = get_DevConfig_pointer();
 8014b10:	f7ff fa90 	bl	8014034 <get_DevConfig_pointer>
    uint8_t  io_num = 0;
    uint8_t  io_type = 0;
    uint8_t  io_dir = 0;
#endif

    uint8_t  tmp_byte = 0;
 8014b14:	2600      	movs	r6, #0
    uint8_t param[SEGCP_PARAM_MAX*2];

    uint32_t len;
    uint8_t *tmp_ptr;
    
    PRT_SEGCP("SEGCP_REQ : %s\r\n",segcp_req);
 8014b16:	4623      	mov	r3, r4
 8014b18:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8014b1c:	49b8      	ldr	r1, [pc, #736]	; (8014e00 <proc_SEGCP+0x2fc>)
    DevConfig *dev_config = get_DevConfig_pointer();
 8014b1e:	4681      	mov	r9, r0
    PRT_SEGCP("SEGCP_REQ : %s\r\n",segcp_req);
 8014b20:	48b8      	ldr	r0, [pc, #736]	; (8014e04 <proc_SEGCP+0x300>)
    uint8_t  tmp_byte = 0;
 8014b22:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
    PRT_SEGCP("SEGCP_REQ : %s\r\n",segcp_req);
 8014b26:	f003 f98d 	bl	8017e44 <WIZ_SECURE_printf>

    memset(trep, 0, sizeof(trep));

    //if (memcmp(segcp_rep, tbSEGCPCMD[SEGCP_UP], SEGCP_CMD_MAX))
    treq = strtok(segcp_req, SEGCP_DELIMETER);
 8014b2a:	4620      	mov	r0, r4
 8014b2c:	49b6      	ldr	r1, [pc, #728]	; (8014e08 <proc_SEGCP+0x304>)
    memset(trep, 0, sizeof(trep));
 8014b2e:	f8c8 6000 	str.w	r6, [r8]
    treq = strtok(segcp_req, SEGCP_DELIMETER);
 8014b32:	f01b fc13 	bl	803035c <strtok>
    
    while(treq)
 8014b36:	4604      	mov	r4, r0
 8014b38:	2800      	cmp	r0, #0
 8014b3a:	f001 804c 	beq.w	8015bd6 <proc_SEGCP+0x10d2>
    {
        PRT_SEGCP("SEGCP_REQ_TOK : %s\r\n",treq);
 8014b3e:	4fb0      	ldr	r7, [pc, #704]	; (8014e00 <proc_SEGCP+0x2fc>)
                        break;

                    case SEGCP_PK: // pkey
                        {
                            tmp_ptr = g_temp_buf;
                            memset(tmp_ptr, NULL, PKEY_BUF_SIZE);
 8014b40:	f8df b2f8 	ldr.w	fp, [pc, #760]	; 8014e3c <proc_SEGCP+0x338>
        PRT_SEGCP("SEGCP_REQ_TOK : %s\r\n",treq);
 8014b44:	4623      	mov	r3, r4
 8014b46:	f240 129b 	movw	r2, #411	; 0x19b
 8014b4a:	4639      	mov	r1, r7
 8014b4c:	48af      	ldr	r0, [pc, #700]	; (8014e0c <proc_SEGCP+0x308>)
 8014b4e:	f003 f979 	bl	8017e44 <WIZ_SECURE_printf>
        if((cmdnum = parse_SEGCP(treq, param)) != SEGCP_UNKNOWN)
 8014b52:	4620      	mov	r0, r4
 8014b54:	a90a      	add	r1, sp, #40	; 0x28
 8014b56:	f7ff ff21 	bl	801499c <parse_SEGCP>
 8014b5a:	28ff      	cmp	r0, #255	; 0xff
 8014b5c:	4605      	mov	r5, r0
 8014b5e:	d077      	beq.n	8014c50 <proc_SEGCP+0x14c>
            if(*param == 0)
 8014b60:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	f040 8098 	bne.w	8014c9a <proc_SEGCP+0x196>
                memcpy(trep, tbSEGCPCMD[cmdnum], SEGCP_CMD_MAX);
 8014b6a:	46c2      	mov	sl, r8
 8014b6c:	4ba8      	ldr	r3, [pc, #672]	; (8014e10 <proc_SEGCP+0x30c>)
 8014b6e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014b72:	881b      	ldrh	r3, [r3, #0]
 8014b74:	f82a 3b02 	strh.w	r3, [sl], #2
                switch((teSEGCPCMDNUM)cmdnum)
 8014b78:	2845      	cmp	r0, #69	; 0x45
 8014b7a:	d847      	bhi.n	8014c0c <proc_SEGCP+0x108>
 8014b7c:	e8df f010 	tbh	[pc, r0, lsl #1]
 8014b80:	02d202bd 	.word	0x02d202bd
 8014b84:	02e402de 	.word	0x02e402de
 8014b88:	02f202eb 	.word	0x02f202eb
 8014b8c:	03220314 	.word	0x03220314
 8014b90:	03300329 	.word	0x03300329
 8014b94:	033e0337 	.word	0x033e0337
 8014b98:	035c034d 	.word	0x035c034d
 8014b9c:	037a036b 	.word	0x037a036b
 8014ba0:	039f0398 	.word	0x039f0398
 8014ba4:	03b603a6 	.word	0x03b603a6
 8014ba8:	03c403bd 	.word	0x03c403bd
 8014bac:	03d203cb 	.word	0x03d203cb
 8014bb0:	03e003d9 	.word	0x03e003d9
 8014bb4:	0233022c 	.word	0x0233022c
 8014bb8:	02a4023a 	.word	0x02a4023a
 8014bbc:	01e701dc 	.word	0x01e701dc
 8014bc0:	019c019c 	.word	0x019c019c
 8014bc4:	02890280 	.word	0x02890280
 8014bc8:	029b0292 	.word	0x029b0292
 8014bcc:	024a0241 	.word	0x024a0241
 8014bd0:	00460259 	.word	0x00460259
 8014bd4:	00460046 	.word	0x00460046
 8014bd8:	00460046 	.word	0x00460046
 8014bdc:	00460046 	.word	0x00460046
 8014be0:	02b00046 	.word	0x02b00046
 8014be4:	026002b9 	.word	0x026002b9
 8014be8:	0279026b 	.word	0x0279026b
 8014bec:	01f901f2 	.word	0x01f901f2
 8014bf0:	020f0204 	.word	0x020f0204
 8014bf4:	0221021a 	.word	0x0221021a
 8014bf8:	01bf01b4 	.word	0x01bf01b4
 8014bfc:	01d501ca 	.word	0x01d501ca
 8014c00:	01ad01a6 	.word	0x01ad01a6
 8014c04:	00460046 	.word	0x00460046
 8014c08:	019f0046 	.word	0x019f0046
                        sprintf(trep,"%c", SEGCP_NULL);
 8014c0c:	2220      	movs	r2, #32
 8014c0e:	4650      	mov	r0, sl
 8014c10:	4980      	ldr	r1, [pc, #512]	; (8014e14 <proc_SEGCP+0x310>)
 8014c12:	f01b fb29 	bl	8030268 <siprintf>
                if(ret & (SEGCP_RET_ERR | SEGCP_RET_REBOOT | SEGCP_RET_SWITCH | SEGCP_RET_SAVE))
 8014c16:	4b80      	ldr	r3, [pc, #512]	; (8014e18 <proc_SEGCP+0x314>)
 8014c18:	421e      	tst	r6, r3
 8014c1a:	f000 813b 	beq.w	8014e94 <proc_SEGCP+0x390>
                    *trep = 0;
 8014c1e:	2300      	movs	r3, #0
 8014c20:	f888 3000 	strb.w	r3, [r8]
        {
            ret |= SEGCP_RET_ERR_NOCOMMAND;
        }
        
        // Process the serial command mode
        if(opmode == DEVICE_AT_MODE)
 8014c24:	4b7d      	ldr	r3, [pc, #500]	; (8014e1c <proc_SEGCP+0x318>)
 8014c26:	781b      	ldrb	r3, [r3, #0]
 8014c28:	b913      	cbnz	r3, 8014c30 <proc_SEGCP+0x12c>
        {
            if(ret & SEGCP_RET_ERR)
 8014c2a:	0432      	lsls	r2, r6, #16
 8014c2c:	f100 87f5 	bmi.w	8015c1a <proc_SEGCP+0x1116>
#endif
                uart_rx_flush(SEGCP_UART);
                return ret;
            }
        }
        treq = strtok(NULL, SEGCP_DELIMETER);
 8014c30:	2000      	movs	r0, #0
 8014c32:	4975      	ldr	r1, [pc, #468]	; (8014e08 <proc_SEGCP+0x304>)
 8014c34:	f01b fb92 	bl	803035c <strtok>
    while(treq)
 8014c38:	4604      	mov	r4, r0
 8014c3a:	2800      	cmp	r0, #0
 8014c3c:	d182      	bne.n	8014b44 <proc_SEGCP+0x40>
 8014c3e:	4631      	mov	r1, r6
        //PRT_SEGCP(">> strtok: %s\r\n", treq);
#endif
    }
    
#ifdef DBG_LEVEL_SEGCP
    SECURE_debug("\r\nEND of [proc_SEGCP] function - RET[0x%.4x]\r\n\r\n", ret);
 8014c40:	4877      	ldr	r0, [pc, #476]	; (8014e20 <proc_SEGCP+0x31c>)
 8014c42:	f003 f8ff 	bl	8017e44 <WIZ_SECURE_printf>
#endif
    
    return ret;
}
 8014c46:	4630      	mov	r0, r6
 8014c48:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c
 8014c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ret |= SEGCP_RET_ERR_NOCOMMAND;
 8014c50:	f446 4604 	orr.w	r6, r6, #33792	; 0x8400
        if(opmode == DEVICE_AT_MODE)
 8014c54:	4b71      	ldr	r3, [pc, #452]	; (8014e1c <proc_SEGCP+0x318>)
 8014c56:	781b      	ldrb	r3, [r3, #0]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d1e9      	bne.n	8014c30 <proc_SEGCP+0x12c>
                sprintf(trep,"%s:%s\r\n",tbSEGCPERR[((ret-SEGCP_RET_ERR) >> 8)],(cmdnum!=SEGCP_UNKNOWN)? tbSEGCPCMD[cmdnum] : treq);
 8014c5c:	f5a6 4200 	sub.w	r2, r6, #32768	; 0x8000
 8014c60:	4970      	ldr	r1, [pc, #448]	; (8014e24 <proc_SEGCP+0x320>)
                treq[2] = 0;
 8014c62:	70a3      	strb	r3, [r4, #2]
                sprintf(trep,"%s:%s\r\n",tbSEGCPERR[((ret-SEGCP_RET_ERR) >> 8)],(cmdnum!=SEGCP_UNKNOWN)? tbSEGCPCMD[cmdnum] : treq);
 8014c64:	2dff      	cmp	r5, #255	; 0xff
 8014c66:	ea4f 2322 	mov.w	r3, r2, asr #8
 8014c6a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8014c6e:	d002      	beq.n	8014c76 <proc_SEGCP+0x172>
 8014c70:	4b67      	ldr	r3, [pc, #412]	; (8014e10 <proc_SEGCP+0x30c>)
 8014c72:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
 8014c76:	4623      	mov	r3, r4
 8014c78:	4640      	mov	r0, r8
 8014c7a:	496b      	ldr	r1, [pc, #428]	; (8014e28 <proc_SEGCP+0x324>)
 8014c7c:	f01b faf4 	bl	8030268 <siprintf>
                SECURE_debug("ERROR : %s\r\n",trep);
 8014c80:	4641      	mov	r1, r8
 8014c82:	486a      	ldr	r0, [pc, #424]	; (8014e2c <proc_SEGCP+0x328>)
 8014c84:	f003 f8de 	bl	8017e44 <WIZ_SECURE_printf>
                uart_rx_flush(SEGCP_UART);
 8014c88:	4b69      	ldr	r3, [pc, #420]	; (8014e30 <proc_SEGCP+0x32c>)
 8014c8a:	7818      	ldrb	r0, [r3, #0]
 8014c8c:	f003 f898 	bl	8017dc0 <uart_rx_flush>
}
 8014c90:	4630      	mov	r0, r6
 8014c92:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c
 8014c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            else if(gSEGCPPRIVILEGE & (SEGCP_PRIVILEGE_SET|SEGCP_PRIVILEGE_WRITE))
 8014c9a:	4b66      	ldr	r3, [pc, #408]	; (8014e34 <proc_SEGCP+0x330>)
 8014c9c:	781b      	ldrb	r3, [r3, #0]
 8014c9e:	f013 0f88 	tst.w	r3, #136	; 0x88
 8014ca2:	d102      	bne.n	8014caa <proc_SEGCP+0x1a6>
                ret |= SEGCP_RET_ERR_NOPRIVILEGE;
 8014ca4:	f446 4606 	orr.w	r6, r6, #34304	; 0x8600
 8014ca8:	e7d4      	b.n	8014c54 <proc_SEGCP+0x150>
            param_len = strlen((const char *)param);
 8014caa:	a80a      	add	r0, sp, #40	; 0x28
 8014cac:	f7fb face 	bl	801024c <strlen>
                PRT_SEGCP("gSEGCPPRIVILEGE & (SEGCP_PRIVILEGE_SET|SEGCP_PRIVILEGE_WRITE)\r\n");
 8014cb0:	f240 22ba 	movw	r2, #698	; 0x2ba
            param_len = strlen((const char *)param);
 8014cb4:	4682      	mov	sl, r0
                PRT_SEGCP("gSEGCPPRIVILEGE & (SEGCP_PRIVILEGE_SET|SEGCP_PRIVILEGE_WRITE)\r\n");
 8014cb6:	4639      	mov	r1, r7
 8014cb8:	485f      	ldr	r0, [pc, #380]	; (8014e38 <proc_SEGCP+0x334>)
 8014cba:	f003 f8c3 	bl	8017e44 <WIZ_SECURE_printf>
                switch((teSEGCPCMDNUM)cmdnum)
 8014cbe:	2d46      	cmp	r5, #70	; 0x46
 8014cc0:	d8b0      	bhi.n	8014c24 <proc_SEGCP+0x120>
 8014cc2:	a301      	add	r3, pc, #4	; (adr r3, 8014cc8 <proc_SEGCP+0x1c4>)
 8014cc4:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 8014cc8:	0801534f 	.word	0x0801534f
 8014ccc:	0801536d 	.word	0x0801536d
 8014cd0:	0801536d 	.word	0x0801536d
 8014cd4:	08015905 	.word	0x08015905
 8014cd8:	080158b5 	.word	0x080158b5
 8014cdc:	080158e3 	.word	0x080158e3
 8014ce0:	08015827 	.word	0x08015827
 8014ce4:	08015849 	.word	0x08015849
 8014ce8:	08015889 	.word	0x08015889
 8014cec:	0801589f 	.word	0x0801589f
 8014cf0:	08015769 	.word	0x08015769
 8014cf4:	0801577f 	.word	0x0801577f
 8014cf8:	08015797 	.word	0x08015797
 8014cfc:	080157af 	.word	0x080157af
 8014d00:	080157c7 	.word	0x080157c7
 8014d04:	080157df 	.word	0x080157df
 8014d08:	080157fb 	.word	0x080157fb
 8014d0c:	08015811 	.word	0x08015811
 8014d10:	08015457 	.word	0x08015457
 8014d14:	0801547d 	.word	0x0801547d
 8014d18:	0801549b 	.word	0x0801549b
 8014d1c:	080154bd 	.word	0x080154bd
 8014d20:	080156ed 	.word	0x080156ed
 8014d24:	0801570f 	.word	0x0801570f
 8014d28:	0801573d 	.word	0x0801573d
 8014d2c:	08015753 	.word	0x08015753
 8014d30:	080153bf 	.word	0x080153bf
 8014d34:	080153dd 	.word	0x080153dd
 8014d38:	0801540d 	.word	0x0801540d
 8014d3c:	0801542f 	.word	0x0801542f
 8014d40:	08015373 	.word	0x08015373
 8014d44:	0801538d 	.word	0x0801538d
 8014d48:	08014eb3 	.word	0x08014eb3
 8014d4c:	08014eb3 	.word	0x08014eb3
 8014d50:	08014eb3 	.word	0x08014eb3
 8014d54:	08014eb3 	.word	0x08014eb3
 8014d58:	08014eb3 	.word	0x08014eb3
 8014d5c:	08014eb3 	.word	0x08014eb3
 8014d60:	08014eb3 	.word	0x08014eb3
 8014d64:	08014eb3 	.word	0x08014eb3
 8014d68:	08015927 	.word	0x08015927
 8014d6c:	08014c25 	.word	0x08014c25
 8014d70:	08014c25 	.word	0x08014c25
 8014d74:	08014c25 	.word	0x08014c25
 8014d78:	08014c25 	.word	0x08014c25
 8014d7c:	08014c25 	.word	0x08014c25
 8014d80:	08014c25 	.word	0x08014c25
 8014d84:	08014c25 	.word	0x08014c25
 8014d88:	08014c25 	.word	0x08014c25
 8014d8c:	08015949 	.word	0x08015949
 8014d90:	08014e8f 	.word	0x08014e8f
 8014d94:	08014e8f 	.word	0x08014e8f
 8014d98:	08014e8f 	.word	0x08014e8f
 8014d9c:	08014eb3 	.word	0x08014eb3
 8014da0:	080159cb 	.word	0x080159cb
 8014da4:	080159eb 	.word	0x080159eb
 8014da8:	080159ff 	.word	0x080159ff
 8014dac:	08015a11 	.word	0x08015a11
 8014db0:	08015a23 	.word	0x08015a23
 8014db4:	08015a31 	.word	0x08015a31
 8014db8:	08015a43 	.word	0x08015a43
 8014dbc:	08015a55 	.word	0x08015a55
 8014dc0:	08015a67 	.word	0x08015a67
 8014dc4:	08015a79 	.word	0x08015a79
 8014dc8:	080153a7 	.word	0x080153a7
 8014dcc:	080156d3 	.word	0x080156d3
 8014dd0:	080154df 	.word	0x080154df
 8014dd4:	080155e9 	.word	0x080155e9
 8014dd8:	08014de5 	.word	0x08014de5
 8014ddc:	08014c25 	.word	0x08014c25
 8014de0:	08015997 	.word	0x08015997
                            memset(tmp_ptr, NULL, PKEY_BUF_SIZE);
 8014de4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014de8:	2100      	movs	r1, #0
 8014dea:	4658      	mov	r0, fp
 8014dec:	f01b f83b 	bl	802fe66 <memset>
                            sprintf(tmp_ptr, "%s", treq+SEGCP_CMD_MAX);
 8014df0:	4658      	mov	r0, fp
 8014df2:	1ca1      	adds	r1, r4, #2
 8014df4:	f01b fa58 	bl	80302a8 <stpcpy>
 8014df8:	9407      	str	r4, [sp, #28]
 8014dfa:	4682      	mov	sl, r0
                            while((len = getSn_RX_RSR(SEGCP_UDP_SOCK)) > 0)
 8014dfc:	e036      	b.n	8014e6c <proc_SEGCP+0x368>
 8014dfe:	bf00      	nop
 8014e00:	08032390 	.word	0x08032390
 8014e04:	08031d30 	.word	0x08031d30
 8014e08:	08032fb8 	.word	0x08032fb8
 8014e0c:	08031d50 	.word	0x08031d50
 8014e10:	20018058 	.word	0x20018058
 8014e14:	08031dd0 	.word	0x08031dd0
 8014e18:	ffff80b0 	.word	0xffff80b0
 8014e1c:	20018214 	.word	0x20018214
 8014e20:	08032040 	.word	0x08032040
 8014e24:	20018178 	.word	0x20018178
 8014e28:	08032028 	.word	0x08032028
 8014e2c:	08032030 	.word	0x08032030
 8014e30:	20018890 	.word	0x20018890
 8014e34:	20018896 	.word	0x20018896
 8014e38:	08031df4 	.word	0x08031df4
 8014e3c:	2001bdb8 	.word	0x2001bdb8
                                PRT_SEGCP("while((len = getSn_RX_RSR(SEGCP_UDP_SOCK)) > 0)\r\n");
 8014e40:	f240 42ef 	movw	r2, #1263	; 0x4ef
 8014e44:	4639      	mov	r1, r7
 8014e46:	48cb      	ldr	r0, [pc, #812]	; (8015174 <proc_SEGCP+0x670>)
 8014e48:	f002 fffc 	bl	8017e44 <WIZ_SECURE_printf>
                                len = recvfrom(SEGCP_UDP_SOCK, tmp_ptr, len, tmp_ip, &tmp_port);
 8014e4c:	f10d 0122 	add.w	r1, sp, #34	; 0x22
 8014e50:	9100      	str	r1, [sp, #0]
 8014e52:	ab09      	add	r3, sp, #36	; 0x24
 8014e54:	4651      	mov	r1, sl
 8014e56:	4622      	mov	r2, r4
 8014e58:	2001      	movs	r0, #1
 8014e5a:	f006 fe2b 	bl	801bab4 <recvfrom>
                                tmp_ptr += len;
 8014e5e:	4482      	add	sl, r0
                                if((tmp_ptr - g_temp_buf) > PKEY_BUF_SIZE)
 8014e60:	ebaa 030b 	sub.w	r3, sl, fp
 8014e64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014e68:	f300 8694 	bgt.w	8015b94 <proc_SEGCP+0x1090>
                            while((len = getSn_RX_RSR(SEGCP_UDP_SOCK)) > 0)
 8014e6c:	2001      	movs	r0, #1
 8014e6e:	f005 ff17 	bl	801aca0 <getSn_RX_RSR>
 8014e72:	4604      	mov	r4, r0
 8014e74:	2800      	cmp	r0, #0
 8014e76:	d1e3      	bne.n	8014e40 <proc_SEGCP+0x33c>
                            if(!(ret & SEGCP_RET_ERR))
 8014e78:	0431      	lsls	r1, r6, #16
 8014e7a:	9c07      	ldr	r4, [sp, #28]
 8014e7c:	f100 868c 	bmi.w	8015b98 <proc_SEGCP+0x1094>
                                tmp_ptr = strstr(g_temp_buf, END_PKEY);
 8014e80:	4658      	mov	r0, fp
 8014e82:	49bd      	ldr	r1, [pc, #756]	; (8015178 <proc_SEGCP+0x674>)
 8014e84:	f01b fa53 	bl	803032e <strstr>
                                if (tmp_ptr == NULL)
 8014e88:	2800      	cmp	r0, #0
 8014e8a:	f040 86cf 	bne.w	8015c2c <proc_SEGCP+0x1128>
                                    ret |= SEGCP_RET_ERR_INVALIDPARAM;
 8014e8e:	f446 4605 	orr.w	r6, r6, #34048	; 0x8500
                                    break;
 8014e92:	e6df      	b.n	8014c54 <proc_SEGCP+0x150>
                    strcat(trep, SEGCP_DELIMETER);
 8014e94:	4650      	mov	r0, sl
 8014e96:	f7fb f9d9 	bl	801024c <strlen>
 8014e9a:	4bb8      	ldr	r3, [pc, #736]	; (801517c <proc_SEGCP+0x678>)
 8014e9c:	eb0a 0200 	add.w	r2, sl, r0
 8014ea0:	8819      	ldrh	r1, [r3, #0]
 8014ea2:	789b      	ldrb	r3, [r3, #2]
                    trep += strlen(trep);
 8014ea4:	f100 0802 	add.w	r8, r0, #2
                    strcat(trep, SEGCP_DELIMETER);
 8014ea8:	f82a 1000 	strh.w	r1, [sl, r0]
                    trep += strlen(trep);
 8014eac:	44d0      	add	r8, sl
                    strcat(trep, SEGCP_DELIMETER);
 8014eae:	7093      	strb	r3, [r2, #2]
        if(opmode == DEVICE_AT_MODE)
 8014eb0:	e6be      	b.n	8014c30 <proc_SEGCP+0x12c>
                        ret |= SEGCP_RET_ERR_NOTAVAIL;
 8014eb2:	f446 4601 	orr.w	r6, r6, #33024	; 0x8100
                        break;
 8014eb6:	e6cd      	b.n	8014c54 <proc_SEGCP+0x150>
                    case SEGCP_PW: ret |= SEGCP_RET_ERR_NOTAVAIL;
 8014eb8:	f446 4601 	orr.w	r6, r6, #33024	; 0x8100
                        break;
 8014ebc:	e6af      	b.n	8014c1e <proc_SEGCP+0x11a>
                        sprintf(trep, "%d", dev_config->firmware_update.current_bank);
 8014ebe:	4650      	mov	r0, sl
 8014ec0:	f899 210d 	ldrb.w	r2, [r9, #269]	; 0x10d
 8014ec4:	49ae      	ldr	r1, [pc, #696]	; (8015180 <proc_SEGCP+0x67c>)
 8014ec6:	f01b f9cf 	bl	8030268 <siprintf>
                        break;
 8014eca:	e6a4      	b.n	8014c16 <proc_SEGCP+0x112>
                        sprintf(trep, "%d", dev_config->ssl_option.root_ca_option);
 8014ecc:	4650      	mov	r0, sl
 8014ece:	f899 210e 	ldrb.w	r2, [r9, #270]	; 0x10e
 8014ed2:	49ab      	ldr	r1, [pc, #684]	; (8015180 <proc_SEGCP+0x67c>)
 8014ed4:	f01b f9c8 	bl	8030268 <siprintf>
                        break;
 8014ed8:	e69d      	b.n	8014c16 <proc_SEGCP+0x112>
                        sprintf(trep, "%d", dev_config->ssl_option.client_cert_enable);
 8014eda:	4650      	mov	r0, sl
 8014edc:	f899 210f 	ldrb.w	r2, [r9, #271]	; 0x10f
 8014ee0:	49a7      	ldr	r1, [pc, #668]	; (8015180 <proc_SEGCP+0x67c>)
 8014ee2:	f01b f9c1 	bl	8030268 <siprintf>
                        break;
 8014ee6:	e696      	b.n	8014c16 <proc_SEGCP+0x112>
                        if(dev_config->mqtt_option.sub_topic_0[0] == 0) sprintf(trep,"%c",SEGCP_NULL);
 8014ee8:	f899 319c 	ldrb.w	r3, [r9, #412]	; 0x19c
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	f43f ae8d 	beq.w	8014c0c <proc_SEGCP+0x108>
                        else sprintf(trep, "%s", dev_config->mqtt_option.sub_topic_0);
 8014ef2:	4650      	mov	r0, sl
 8014ef4:	f509 71ce 	add.w	r1, r9, #412	; 0x19c
 8014ef8:	f01b f9ec 	bl	80302d4 <strcpy>
 8014efc:	e68b      	b.n	8014c16 <proc_SEGCP+0x112>
                        if(dev_config->mqtt_option.sub_topic_1[0] == 0) sprintf(trep,"%c",SEGCP_NULL);
 8014efe:	f899 321c 	ldrb.w	r3, [r9, #540]	; 0x21c
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	f43f ae82 	beq.w	8014c0c <proc_SEGCP+0x108>
                        else sprintf(trep, "%s", dev_config->mqtt_option.sub_topic_1);
 8014f08:	4650      	mov	r0, sl
 8014f0a:	f509 7107 	add.w	r1, r9, #540	; 0x21c
 8014f0e:	f01b f9e1 	bl	80302d4 <strcpy>
 8014f12:	e680      	b.n	8014c16 <proc_SEGCP+0x112>
                        if(dev_config->mqtt_option.sub_topic_2[0] == 0) sprintf(trep,"%c",SEGCP_NULL);
 8014f14:	f899 329c 	ldrb.w	r3, [r9, #668]	; 0x29c
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	f43f ae77 	beq.w	8014c0c <proc_SEGCP+0x108>
                        else sprintf(trep, "%s", dev_config->mqtt_option.sub_topic_2);
 8014f1e:	4650      	mov	r0, sl
 8014f20:	f509 7127 	add.w	r1, r9, #668	; 0x29c
 8014f24:	f01b f9d6 	bl	80302d4 <strcpy>
 8014f28:	e675      	b.n	8014c16 <proc_SEGCP+0x112>
                        sprintf(trep, "%d", dev_config->mqtt_option.qos);
 8014f2a:	4650      	mov	r0, sl
 8014f2c:	f899 24a0 	ldrb.w	r2, [r9, #1184]	; 0x4a0
 8014f30:	4993      	ldr	r1, [pc, #588]	; (8015180 <proc_SEGCP+0x67c>)
 8014f32:	f01b f999 	bl	8030268 <siprintf>
                        break;
 8014f36:	e66e      	b.n	8014c16 <proc_SEGCP+0x112>
                        if(dev_config->tcp_option[0].pw_connect[0] == 0) sprintf(trep,"%c",SEGCP_NULL);
 8014f38:	f899 30d6 	ldrb.w	r3, [r9, #214]	; 0xd6
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	f43f ae65 	beq.w	8014c0c <proc_SEGCP+0x108>
                        else sprintf(trep, "%s", dev_config->tcp_option[0].pw_connect);
 8014f42:	4650      	mov	r0, sl
 8014f44:	f109 01d6 	add.w	r1, r9, #214	; 0xd6
 8014f48:	f01b f9c4 	bl	80302d4 <strcpy>
 8014f4c:	e663      	b.n	8014c16 <proc_SEGCP+0x112>
                        if(dev_config->config_common.pw_search[0] == 0) sprintf(trep,"%c",SEGCP_NULL);
 8014f4e:	f899 301f 	ldrb.w	r3, [r9, #31]
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	f43f ae5a 	beq.w	8014c0c <proc_SEGCP+0x108>
                        else sprintf(trep, "%s", dev_config->config_common.pw_search);
 8014f58:	4650      	mov	r0, sl
 8014f5a:	f109 011f 	add.w	r1, r9, #31
 8014f5e:	f01b f9b9 	bl	80302d4 <strcpy>
 8014f62:	e658      	b.n	8014c16 <proc_SEGCP+0x112>
                        sprintf(trep, "%d", dev_config->network_option.tcp_rcr_val);
 8014f64:	4650      	mov	r0, sl
 8014f66:	f899 20cc 	ldrb.w	r2, [r9, #204]	; 0xcc
 8014f6a:	4985      	ldr	r1, [pc, #532]	; (8015180 <proc_SEGCP+0x67c>)
 8014f6c:	f01b f97c 	bl	8030268 <siprintf>
                        break;
 8014f70:	e651      	b.n	8014c16 <proc_SEGCP+0x112>
                        if(dev_config->mqtt_option.user_name[0] == 0) sprintf(trep,"%c",SEGCP_NULL);
 8014f72:	f899 331c 	ldrb.w	r3, [r9, #796]	; 0x31c
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	f43f ae48 	beq.w	8014c0c <proc_SEGCP+0x108>
                        else sprintf(trep, "%s", dev_config->mqtt_option.user_name);
 8014f7c:	4650      	mov	r0, sl
 8014f7e:	f509 7147 	add.w	r1, r9, #796	; 0x31c
 8014f82:	f01b f9a7 	bl	80302d4 <strcpy>
 8014f86:	e646      	b.n	8014c16 <proc_SEGCP+0x112>
                        if(dev_config->mqtt_option.password[0] == 0) sprintf(trep,"%c",SEGCP_NULL);
 8014f88:	f899 341c 	ldrb.w	r3, [r9, #1052]	; 0x41c
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	f43f ae3d 	beq.w	8014c0c <proc_SEGCP+0x108>
                        else sprintf(trep, "%s", dev_config->mqtt_option.password);
 8014f92:	4650      	mov	r0, sl
 8014f94:	f209 411c 	addw	r1, r9, #1052	; 0x41c
 8014f98:	f01b f99c 	bl	80302d4 <strcpy>
 8014f9c:	e63b      	b.n	8014c16 <proc_SEGCP+0x112>
                        if(dev_config->mqtt_option.client_id[0] == 0) sprintf(trep,"%c",SEGCP_NULL);
 8014f9e:	f899 339c 	ldrb.w	r3, [r9, #924]	; 0x39c
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	f43f ae32 	beq.w	8014c0c <proc_SEGCP+0x108>
                        else sprintf(trep, "%s", dev_config->mqtt_option.client_id);
 8014fa8:	4650      	mov	r0, sl
 8014faa:	f509 7167 	add.w	r1, r9, #924	; 0x39c
 8014fae:	f01b f991 	bl	80302d4 <strcpy>
 8014fb2:	e630      	b.n	8014c16 <proc_SEGCP+0x112>
                        sprintf(trep, "%d", dev_config->mqtt_option.keepalive);
 8014fb4:	4650      	mov	r0, sl
 8014fb6:	f8d9 249c 	ldr.w	r2, [r9, #1180]	; 0x49c
 8014fba:	4971      	ldr	r1, [pc, #452]	; (8015180 <proc_SEGCP+0x67c>)
 8014fbc:	f01b f954 	bl	8030268 <siprintf>
                        break;
 8014fc0:	e629      	b.n	8014c16 <proc_SEGCP+0x112>
                        if(dev_config->mqtt_option.pub_topic[0] == 0) sprintf(trep,"%c",SEGCP_NULL);
 8014fc2:	f899 311c 	ldrb.w	r3, [r9, #284]	; 0x11c
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	f43f ae20 	beq.w	8014c0c <proc_SEGCP+0x108>
                        else sprintf(trep, "%s", dev_config->mqtt_option.pub_topic);
 8014fcc:	4650      	mov	r0, sl
 8014fce:	f509 718e 	add.w	r1, r9, #284	; 0x11c
 8014fd2:	f01b f97f 	bl	80302d4 <strcpy>
 8014fd6:	e61e      	b.n	8014c16 <proc_SEGCP+0x112>
                    case SEGCP_PS: sprintf(trep, "%d", dev_config->serial_data_packing[0].packing_size);
 8014fd8:	4650      	mov	r0, sl
 8014fda:	f8b9 20f3 	ldrh.w	r2, [r9, #243]	; 0xf3
 8014fde:	4968      	ldr	r1, [pc, #416]	; (8015180 <proc_SEGCP+0x67c>)
 8014fe0:	f01b f942 	bl	8030268 <siprintf>
                        break;
 8014fe4:	e617      	b.n	8014c16 <proc_SEGCP+0x112>
                    case SEGCP_PD: sprintf(trep, "%02X", dev_config->serial_data_packing[0].packing_delimiter[0]);
 8014fe6:	4650      	mov	r0, sl
 8014fe8:	f899 20f5 	ldrb.w	r2, [r9, #245]	; 0xf5
 8014fec:	4965      	ldr	r1, [pc, #404]	; (8015184 <proc_SEGCP+0x680>)
 8014fee:	f01b f93b 	bl	8030268 <siprintf>
                        break;
 8014ff2:	e610      	b.n	8014c16 <proc_SEGCP+0x112>
                    case SEGCP_TE: sprintf(trep, "%d", dev_config->serial_command.serial_command);
 8014ff4:	4650      	mov	r0, sl
 8014ff6:	f899 20e3 	ldrb.w	r2, [r9, #227]	; 0xe3
 8014ffa:	4961      	ldr	r1, [pc, #388]	; (8015180 <proc_SEGCP+0x67c>)
 8014ffc:	f01b f934 	bl	8030268 <siprintf>
                        break;
 8015000:	e609      	b.n	8014c16 <proc_SEGCP+0x112>
                        sprintf(trep, "%s", strDEVSTATUS[dev_config->network_connection[0].working_state]);
 8015002:	4b61      	ldr	r3, [pc, #388]	; (8015188 <proc_SEGCP+0x684>)
 8015004:	f899 203c 	ldrb.w	r2, [r9, #60]	; 0x3c
 8015008:	4650      	mov	r0, sl
 801500a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801500e:	f01b f961 	bl	80302d4 <strcpy>
                        break;
 8015012:	e600      	b.n	8014c16 <proc_SEGCP+0x112>
                        if(gSEGCPPRIVILEGE & (SEGCP_PRIVILEGE_SET|SEGCP_PRIVILEGE_WRITE)) 
 8015014:	4b5d      	ldr	r3, [pc, #372]	; (801518c <proc_SEGCP+0x688>)
 8015016:	781b      	ldrb	r3, [r3, #0]
 8015018:	f013 0f88 	tst.w	r3, #136	; 0x88
 801501c:	f000 8544 	beq.w	8015aa8 <proc_SEGCP+0xfa4>
                            if(dev_config->network_connection[0].local_port == 1)
 8015020:	f8b9 303d 	ldrh.w	r3, [r9, #61]	; 0x3d
 8015024:	2b01      	cmp	r3, #1
                                ret |= SEGCP_RET_ERASE_EEPROM | SEGCP_RET_REBOOT; // EEPROM Erase
 8015026:	bf0c      	ite	eq
 8015028:	f446 5684 	orreq.w	r6, r6, #4224	; 0x1080
                                ret |= SEGCP_RET_FACTORY | SEGCP_RET_REBOOT; // Factory Reset
 801502c:	f046 0688 	orrne.w	r6, r6, #136	; 0x88
 8015030:	e5f1      	b.n	8014c16 <proc_SEGCP+0x112>
                        sprintf(trep,"%d",dev_config->serial_command.serial_command_echo);
 8015032:	4650      	mov	r0, sl
 8015034:	f899 20e7 	ldrb.w	r2, [r9, #231]	; 0xe7
 8015038:	4951      	ldr	r1, [pc, #324]	; (8015180 <proc_SEGCP+0x67c>)
 801503a:	f01b f915 	bl	8030268 <siprintf>
                        break;
 801503e:	e5ea      	b.n	8014c16 <proc_SEGCP+0x112>
                        sprintf(trep, "%d", get_connection_status_io(STATUS_TCPCONNECT_PIN, 0)); // STATUS_TCPCONNECT_PIN (in) == DSR_PIN (in)
 8015040:	2100      	movs	r1, #0
 8015042:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8015046:	f002 fa91 	bl	801756c <get_connection_status_io>
 801504a:	494d      	ldr	r1, [pc, #308]	; (8015180 <proc_SEGCP+0x67c>)
 801504c:	4602      	mov	r2, r0
 801504e:	4650      	mov	r0, sl
 8015050:	f01b f90a 	bl	8030268 <siprintf>
                        break;
 8015054:	e5df      	b.n	8014c16 <proc_SEGCP+0x112>
                        uart_rx_flush(SEG_DATA0_UART);
 8015056:	2000      	movs	r0, #0
 8015058:	f002 feb2 	bl	8017dc0 <uart_rx_flush>
                        uart_rx_flush(SEG_DATA1_UART);
 801505c:	2001      	movs	r0, #1
 801505e:	f002 feaf 	bl	8017dc0 <uart_rx_flush>
                        sprintf(trep, "%s", "FLUSH");
 8015062:	4b4b      	ldr	r3, [pc, #300]	; (8015190 <proc_SEGCP+0x68c>)
 8015064:	6818      	ldr	r0, [r3, #0]
 8015066:	889b      	ldrh	r3, [r3, #4]
 8015068:	f8c8 0002 	str.w	r0, [r8, #2]
 801506c:	f8aa 3004 	strh.w	r3, [sl, #4]
                        break;
 8015070:	e5d1      	b.n	8014c16 <proc_SEGCP+0x112>
                        sprintf(trep, "%d", dev_config->serial_option[0].uart_interface);
 8015072:	4650      	mov	r0, sl
 8015074:	f899 20e8 	ldrb.w	r2, [r9, #232]	; 0xe8
 8015078:	4941      	ldr	r1, [pc, #260]	; (8015180 <proc_SEGCP+0x67c>)
 801507a:	f01b f8f5 	bl	8030268 <siprintf>
                        break;
 801507e:	e5ca      	b.n	8014c16 <proc_SEGCP+0x112>
                        if(gSEGCPPRIVILEGE & (SEGCP_PRIVILEGE_SET|SEGCP_PRIVILEGE_WRITE)) ret |= SEGCP_RET_SAVE;
 8015080:	4b42      	ldr	r3, [pc, #264]	; (801518c <proc_SEGCP+0x688>)
 8015082:	781b      	ldrb	r3, [r3, #0]
 8015084:	f013 0f88 	tst.w	r3, #136	; 0x88
 8015088:	f000 850e 	beq.w	8015aa8 <proc_SEGCP+0xfa4>
 801508c:	f046 0610 	orr.w	r6, r6, #16
 8015090:	e5c1      	b.n	8014c16 <proc_SEGCP+0x112>
                        if(gSEGCPPRIVILEGE & (SEGCP_PRIVILEGE_SET|SEGCP_PRIVILEGE_WRITE)) ret |= SEGCP_RET_SWITCH;
 8015092:	4b3e      	ldr	r3, [pc, #248]	; (801518c <proc_SEGCP+0x688>)
 8015094:	781b      	ldrb	r3, [r3, #0]
 8015096:	f013 0f88 	tst.w	r3, #136	; 0x88
 801509a:	f000 8505 	beq.w	8015aa8 <proc_SEGCP+0xfa4>
 801509e:	f046 0620 	orr.w	r6, r6, #32
 80150a2:	e5b8      	b.n	8014c16 <proc_SEGCP+0x112>
                        if(gSEGCPPRIVILEGE & (SEGCP_PRIVILEGE_SET|SEGCP_PRIVILEGE_WRITE)) ret |= SEGCP_RET_REBOOT;
 80150a4:	4b39      	ldr	r3, [pc, #228]	; (801518c <proc_SEGCP+0x688>)
 80150a6:	781b      	ldrb	r3, [r3, #0]
 80150a8:	f013 0f88 	tst.w	r3, #136	; 0x88
 80150ac:	f000 84fc 	beq.w	8015aa8 <proc_SEGCP+0xfa4>
 80150b0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 80150b4:	e5af      	b.n	8014c16 <proc_SEGCP+0x112>
                        sprintf(trep, "%s", uart_if_table[dev_config->serial_option[0].uart_interface]);
 80150b6:	4b37      	ldr	r3, [pc, #220]	; (8015194 <proc_SEGCP+0x690>)
 80150b8:	f899 20e8 	ldrb.w	r2, [r9, #232]	; 0xe8
 80150bc:	4650      	mov	r0, sl
 80150be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80150c2:	f01b f907 	bl	80302d4 <strcpy>
                        break;
 80150c6:	e5a6      	b.n	8014c16 <proc_SEGCP+0x112>
                    case SEGCP_SS: sprintf(trep, "%02X%02X%02X", dev_config->serial_command.serial_trigger[0],
 80150c8:	f899 10e6 	ldrb.w	r1, [r9, #230]	; 0xe6
 80150cc:	f899 30e5 	ldrb.w	r3, [r9, #229]	; 0xe5
 80150d0:	f899 20e4 	ldrb.w	r2, [r9, #228]	; 0xe4
 80150d4:	4650      	mov	r0, sl
 80150d6:	9100      	str	r1, [sp, #0]
 80150d8:	492f      	ldr	r1, [pc, #188]	; (8015198 <proc_SEGCP+0x694>)
 80150da:	f01b f8c5 	bl	8030268 <siprintf>
                        break;
 80150de:	e59a      	b.n	8014c16 <proc_SEGCP+0x112>
                        sprintf(trep, "%d%d", dev_config->serial_option[0].dtr_en, dev_config->serial_option[0].dsr_en);
 80150e0:	4650      	mov	r0, sl
 80150e2:	f899 30f0 	ldrb.w	r3, [r9, #240]	; 0xf0
 80150e6:	f899 20ef 	ldrb.w	r2, [r9, #239]	; 0xef
 80150ea:	492c      	ldr	r1, [pc, #176]	; (801519c <proc_SEGCP+0x698>)
 80150ec:	f01b f8bc 	bl	8030268 <siprintf>
                        break;
 80150f0:	e591      	b.n	8014c16 <proc_SEGCP+0x112>
                        sprintf(trep, "%d", get_connection_status_io(STATUS_PHYLINK_PIN, 0)); // STATUS_PHYLINK_PIN (in) == DTR_PIN (out)
 80150f2:	2100      	movs	r1, #0
 80150f4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80150f8:	e7a5      	b.n	8015046 <proc_SEGCP+0x542>
                    case SEGCP_MC: sprintf(trep,"%02X:%02X:%02X:%02X:%02X:%02X", 
 80150fa:	f899 102e 	ldrb.w	r1, [r9, #46]	; 0x2e
 80150fe:	f899 302a 	ldrb.w	r3, [r9, #42]	; 0x2a
 8015102:	f899 2029 	ldrb.w	r2, [r9, #41]	; 0x29
 8015106:	9103      	str	r1, [sp, #12]
 8015108:	f899 102d 	ldrb.w	r1, [r9, #45]	; 0x2d
 801510c:	9102      	str	r1, [sp, #8]
 801510e:	f899 102c 	ldrb.w	r1, [r9, #44]	; 0x2c
 8015112:	9101      	str	r1, [sp, #4]
 8015114:	f899 002b 	ldrb.w	r0, [r9, #43]	; 0x2b
 8015118:	4921      	ldr	r1, [pc, #132]	; (80151a0 <proc_SEGCP+0x69c>)
 801511a:	9000      	str	r0, [sp, #0]
 801511c:	4650      	mov	r0, sl
 801511e:	f01b f8a3 	bl	8030268 <siprintf>
                        break;
 8015122:	e578      	b.n	8014c16 <proc_SEGCP+0x112>
                            sprintf(trep,"%d.%d.%d", dev_config->device_common.fw_ver[0],
 8015124:	f899 1002 	ldrb.w	r1, [r9, #2]
 8015128:	f899 3001 	ldrb.w	r3, [r9, #1]
 801512c:	f899 2000 	ldrb.w	r2, [r9]
 8015130:	4650      	mov	r0, sl
 8015132:	9100      	str	r1, [sp, #0]
 8015134:	491b      	ldr	r1, [pc, #108]	; (80151a4 <proc_SEGCP+0x6a0>)
 8015136:	f01b f897 	bl	8030268 <siprintf>
                        break;
 801513a:	e56c      	b.n	8014c16 <proc_SEGCP+0x112>
                    case SEGCP_MN: sprintf(trep,"%s", dev_config->device_common.device_name);
 801513c:	4650      	mov	r0, sl
 801513e:	f109 0106 	add.w	r1, r9, #6
 8015142:	f01b f8c7 	bl	80302d4 <strcpy>
                        break;
 8015146:	e566      	b.n	8014c16 <proc_SEGCP+0x112>
                    case SEGCP_IM: sprintf(trep,"%d", dev_config->network_option.dhcp_use);	// 0:STATIC, 1:DHCP (PPPoE X)
 8015148:	4650      	mov	r0, sl
 801514a:	f899 20c7 	ldrb.w	r2, [r9, #199]	; 0xc7
 801514e:	490c      	ldr	r1, [pc, #48]	; (8015180 <proc_SEGCP+0x67c>)
 8015150:	f01b f88a 	bl	8030268 <siprintf>
                        break;
 8015154:	e55f      	b.n	8014c16 <proc_SEGCP+0x112>
                    case SEGCP_OP: sprintf(trep,"%d", dev_config->network_connection[0].working_mode); // opmode
 8015156:	4650      	mov	r0, sl
 8015158:	f899 203b 	ldrb.w	r2, [r9, #59]	; 0x3b
 801515c:	4908      	ldr	r1, [pc, #32]	; (8015180 <proc_SEGCP+0x67c>)
 801515e:	f01b f883 	bl	8030268 <siprintf>
                        break;
 8015162:	e558      	b.n	8014c16 <proc_SEGCP+0x112>
                    case SEGCP_CP: sprintf(trep,"%d", dev_config->tcp_option[0].pw_connect_en);
 8015164:	4650      	mov	r0, sl
 8015166:	f899 20e0 	ldrb.w	r2, [r9, #224]	; 0xe0
 801516a:	4905      	ldr	r1, [pc, #20]	; (8015180 <proc_SEGCP+0x67c>)
 801516c:	f01b f87c 	bl	8030268 <siprintf>
                        break;
 8015170:	e551      	b.n	8014c16 <proc_SEGCP+0x112>
 8015172:	bf00      	nop
 8015174:	08031e48 	.word	0x08031e48
 8015178:	08031ef4 	.word	0x08031ef4
 801517c:	08032fb8 	.word	0x08032fb8
 8015180:	08031da0 	.word	0x08031da0
 8015184:	08031ddc 	.word	0x08031ddc
 8015188:	2001803c 	.word	0x2001803c
 801518c:	20018896 	.word	0x20018896
 8015190:	08031dec 	.word	0x08031dec
 8015194:	200181f8 	.word	0x200181f8
 8015198:	08031dd4 	.word	0x08031dd4
 801519c:	08031de4 	.word	0x08031de4
 80151a0:	08031d74 	.word	0x08031d74
 80151a4:	08031d94 	.word	0x08031d94
                    case SEGCP_DG: sprintf(trep,"%d", dev_config->serial_common.serial_debug_en);
 80151a8:	f899 20e2 	ldrb.w	r2, [r9, #226]	; 0xe2
 80151ac:	4650      	mov	r0, sl
 80151ae:	49d2      	ldr	r1, [pc, #840]	; (80154f8 <proc_SEGCP+0x9f4>)
 80151b0:	f01b f85a 	bl	8030268 <siprintf>
                        PRT_SEGCP("SEGCP_DG = %s\r\n", trep);
 80151b4:	4653      	mov	r3, sl
 80151b6:	f44f 72e5 	mov.w	r2, #458	; 0x1ca
 80151ba:	4639      	mov	r1, r7
 80151bc:	48cf      	ldr	r0, [pc, #828]	; (80154fc <proc_SEGCP+0x9f8>)
 80151be:	f002 fe41 	bl	8017e44 <WIZ_SECURE_printf>
                        break;
 80151c2:	e528      	b.n	8014c16 <proc_SEGCP+0x112>
                    case SEGCP_KA: sprintf(trep,"%d", dev_config->tcp_option[0].keepalive_en);
 80151c4:	4650      	mov	r0, sl
 80151c6:	f899 20d1 	ldrb.w	r2, [r9, #209]	; 0xd1
 80151ca:	49cb      	ldr	r1, [pc, #812]	; (80154f8 <proc_SEGCP+0x9f4>)
 80151cc:	f01b f84c 	bl	8030268 <siprintf>
                        break;
 80151d0:	e521      	b.n	8014c16 <proc_SEGCP+0x112>
                    case SEGCP_KI: sprintf(trep,"%d", dev_config->tcp_option[0].keepalive_wait_time);
 80151d2:	4650      	mov	r0, sl
 80151d4:	f8b9 20d2 	ldrh.w	r2, [r9, #210]	; 0xd2
 80151d8:	49c7      	ldr	r1, [pc, #796]	; (80154f8 <proc_SEGCP+0x9f4>)
 80151da:	f01b f845 	bl	8030268 <siprintf>
                        break;
 80151de:	e51a      	b.n	8014c16 <proc_SEGCP+0x112>
                    case SEGCP_KE: sprintf(trep,"%d", dev_config->tcp_option[0].keepalive_retry_time);
 80151e0:	4650      	mov	r0, sl
 80151e2:	f8b9 20d4 	ldrh.w	r2, [r9, #212]	; 0xd4
 80151e6:	49c4      	ldr	r1, [pc, #784]	; (80154f8 <proc_SEGCP+0x9f4>)
 80151e8:	f01b f83e 	bl	8030268 <siprintf>
                        break;
 80151ec:	e513      	b.n	8014c16 <proc_SEGCP+0x112>
                    case SEGCP_RI: sprintf(trep,"%d", dev_config->tcp_option[0].reconnection);
 80151ee:	4650      	mov	r0, sl
 80151f0:	f8b9 20cf 	ldrh.w	r2, [r9, #207]	; 0xcf
 80151f4:	49c0      	ldr	r1, [pc, #768]	; (80154f8 <proc_SEGCP+0x9f4>)
 80151f6:	f01b f837 	bl	8030268 <siprintf>
                        break;
 80151fa:	e50c      	b.n	8014c16 <proc_SEGCP+0x112>
                        sprintf(trep,"%d.%d.%d.%d", dev_config->network_common.local_ip[0], dev_config->network_common.local_ip[1],
 80151fc:	f899 1032 	ldrb.w	r1, [r9, #50]	; 0x32
 8015200:	f899 3030 	ldrb.w	r3, [r9, #48]	; 0x30
 8015204:	f899 202f 	ldrb.w	r2, [r9, #47]	; 0x2f
 8015208:	9101      	str	r1, [sp, #4]
 801520a:	f899 1031 	ldrb.w	r1, [r9, #49]	; 0x31
 801520e:	4650      	mov	r0, sl
 8015210:	9100      	str	r1, [sp, #0]
 8015212:	49bb      	ldr	r1, [pc, #748]	; (8015500 <proc_SEGCP+0x9fc>)
 8015214:	f01b f828 	bl	8030268 <siprintf>
                        break;
 8015218:	e4fd      	b.n	8014c16 <proc_SEGCP+0x112>
                        sprintf(trep,"%d.%d.%d.%d", dev_config->network_common.subnet[0], dev_config->network_common.subnet[1],
 801521a:	f899 103a 	ldrb.w	r1, [r9, #58]	; 0x3a
 801521e:	f899 3038 	ldrb.w	r3, [r9, #56]	; 0x38
 8015222:	f899 2037 	ldrb.w	r2, [r9, #55]	; 0x37
 8015226:	9101      	str	r1, [sp, #4]
 8015228:	f899 1039 	ldrb.w	r1, [r9, #57]	; 0x39
 801522c:	4650      	mov	r0, sl
 801522e:	9100      	str	r1, [sp, #0]
 8015230:	49b3      	ldr	r1, [pc, #716]	; (8015500 <proc_SEGCP+0x9fc>)
 8015232:	f01b f819 	bl	8030268 <siprintf>
                        break;
 8015236:	e4ee      	b.n	8014c16 <proc_SEGCP+0x112>
                        sprintf(trep,"%d.%d.%d.%d", dev_config->network_common.gateway[0], dev_config->network_common.gateway[1],
 8015238:	f899 1036 	ldrb.w	r1, [r9, #54]	; 0x36
 801523c:	f899 3034 	ldrb.w	r3, [r9, #52]	; 0x34
 8015240:	f899 2033 	ldrb.w	r2, [r9, #51]	; 0x33
 8015244:	9101      	str	r1, [sp, #4]
 8015246:	f899 1035 	ldrb.w	r1, [r9, #53]	; 0x35
 801524a:	4650      	mov	r0, sl
 801524c:	9100      	str	r1, [sp, #0]
 801524e:	49ac      	ldr	r1, [pc, #688]	; (8015500 <proc_SEGCP+0x9fc>)
 8015250:	f01b f80a 	bl	8030268 <siprintf>
                        break;
 8015254:	e4df      	b.n	8014c16 <proc_SEGCP+0x112>
                        sprintf(trep,"%d.%d.%d.%d", dev_config->network_option.dns_server_ip[0], dev_config->network_option.dns_server_ip[1],
 8015256:	f899 10cb 	ldrb.w	r1, [r9, #203]	; 0xcb
 801525a:	f899 30c9 	ldrb.w	r3, [r9, #201]	; 0xc9
 801525e:	f899 20c8 	ldrb.w	r2, [r9, #200]	; 0xc8
 8015262:	9101      	str	r1, [sp, #4]
 8015264:	f899 10ca 	ldrb.w	r1, [r9, #202]	; 0xca
 8015268:	4650      	mov	r0, sl
 801526a:	9100      	str	r1, [sp, #0]
 801526c:	49a4      	ldr	r1, [pc, #656]	; (8015500 <proc_SEGCP+0x9fc>)
 801526e:	f01a fffb 	bl	8030268 <siprintf>
                        break;
 8015272:	e4d0      	b.n	8014c16 <proc_SEGCP+0x112>
                        if(dev_config->device_common.device_name[0] == 0)
 8015274:	f899 3006 	ldrb.w	r3, [r9, #6]
 8015278:	2b00      	cmp	r3, #0
 801527a:	f43f acc7 	beq.w	8014c0c <proc_SEGCP+0x108>
                            sprintf(trep, "%s-%02X%02X%02X%02X%02X%02X", dev_config->device_common.device_name,
 801527e:	f899 202e 	ldrb.w	r2, [r9, #46]	; 0x2e
 8015282:	f899 3029 	ldrb.w	r3, [r9, #41]	; 0x29
 8015286:	9204      	str	r2, [sp, #16]
 8015288:	f899 202d 	ldrb.w	r2, [r9, #45]	; 0x2d
 801528c:	9203      	str	r2, [sp, #12]
 801528e:	f899 102c 	ldrb.w	r1, [r9, #44]	; 0x2c
 8015292:	f109 0206 	add.w	r2, r9, #6
 8015296:	9102      	str	r1, [sp, #8]
 8015298:	f899 002b 	ldrb.w	r0, [r9, #43]	; 0x2b
 801529c:	4999      	ldr	r1, [pc, #612]	; (8015504 <proc_SEGCP+0xa00>)
 801529e:	9001      	str	r0, [sp, #4]
 80152a0:	f899 c02a 	ldrb.w	ip, [r9, #42]	; 0x2a
 80152a4:	4650      	mov	r0, sl
 80152a6:	f8cd c000 	str.w	ip, [sp]
 80152aa:	f01a ffdd 	bl	8030268 <siprintf>
 80152ae:	e4b2      	b.n	8014c16 <proc_SEGCP+0x112>
                    case SEGCP_LP: sprintf(trep, "%d", dev_config->network_connection[0].local_port);
 80152b0:	4650      	mov	r0, sl
 80152b2:	f8b9 203d 	ldrh.w	r2, [r9, #61]	; 0x3d
 80152b6:	4990      	ldr	r1, [pc, #576]	; (80154f8 <proc_SEGCP+0x9f4>)
 80152b8:	f01a ffd6 	bl	8030268 <siprintf>
                        break;
 80152bc:	e4ab      	b.n	8014c16 <proc_SEGCP+0x112>
                    case SEGCP_RP: sprintf(trep, "%d", dev_config->network_connection[0].remote_port);
 80152be:	4650      	mov	r0, sl
 80152c0:	f8b9 203f 	ldrh.w	r2, [r9, #63]	; 0x3f
 80152c4:	498c      	ldr	r1, [pc, #560]	; (80154f8 <proc_SEGCP+0x9f4>)
 80152c6:	f01a ffcf 	bl	8030268 <siprintf>
                        break;
 80152ca:	e4a4      	b.n	8014c16 <proc_SEGCP+0x112>
                        if(dev_config->network_connection[0].dns_use == SEGCP_DISABLE)
 80152cc:	f899 3046 	ldrb.w	r3, [r9, #70]	; 0x46
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	f000 83ed 	beq.w	8015ab0 <proc_SEGCP+0xfac>
                            if(dev_config->network_connection[0].dns_domain_name[0] == 0)
 80152d6:	f899 3047 	ldrb.w	r3, [r9, #71]	; 0x47
 80152da:	2b00      	cmp	r3, #0
 80152dc:	f43f ac96 	beq.w	8014c0c <proc_SEGCP+0x108>
                                sprintf(trep, "%s", dev_config->network_connection[0].dns_domain_name);
 80152e0:	4650      	mov	r0, sl
 80152e2:	f109 0147 	add.w	r1, r9, #71	; 0x47
 80152e6:	f01a fff5 	bl	80302d4 <strcpy>
 80152ea:	e494      	b.n	8014c16 <proc_SEGCP+0x112>
                    case SEGCP_BR: sprintf(trep, "%d", dev_config->serial_option[0].baud_rate);
 80152ec:	4650      	mov	r0, sl
 80152ee:	f899 20ea 	ldrb.w	r2, [r9, #234]	; 0xea
 80152f2:	4981      	ldr	r1, [pc, #516]	; (80154f8 <proc_SEGCP+0x9f4>)
 80152f4:	f01a ffb8 	bl	8030268 <siprintf>
                        break;
 80152f8:	e48d      	b.n	8014c16 <proc_SEGCP+0x112>
                    case SEGCP_DB: sprintf(trep, "%d", dev_config->serial_option[0].data_bits);
 80152fa:	4650      	mov	r0, sl
 80152fc:	f899 20eb 	ldrb.w	r2, [r9, #235]	; 0xeb
 8015300:	497d      	ldr	r1, [pc, #500]	; (80154f8 <proc_SEGCP+0x9f4>)
 8015302:	f01a ffb1 	bl	8030268 <siprintf>
                        break;
 8015306:	e486      	b.n	8014c16 <proc_SEGCP+0x112>
                    case SEGCP_PR: sprintf(trep, "%d", dev_config->serial_option[0].parity);
 8015308:	4650      	mov	r0, sl
 801530a:	f899 20ec 	ldrb.w	r2, [r9, #236]	; 0xec
 801530e:	497a      	ldr	r1, [pc, #488]	; (80154f8 <proc_SEGCP+0x9f4>)
 8015310:	f01a ffaa 	bl	8030268 <siprintf>
                        break;
 8015314:	e47f      	b.n	8014c16 <proc_SEGCP+0x112>
                    case SEGCP_SB: sprintf(trep, "%d", dev_config->serial_option[0].stop_bits);
 8015316:	4650      	mov	r0, sl
 8015318:	f899 20ed 	ldrb.w	r2, [r9, #237]	; 0xed
 801531c:	4976      	ldr	r1, [pc, #472]	; (80154f8 <proc_SEGCP+0x9f4>)
 801531e:	f01a ffa3 	bl	8030268 <siprintf>
                        break;
 8015322:	e478      	b.n	8014c16 <proc_SEGCP+0x112>
                    case SEGCP_FL: sprintf(trep, "%d", dev_config->serial_option[0].flow_control);
 8015324:	4650      	mov	r0, sl
 8015326:	f899 20ee 	ldrb.w	r2, [r9, #238]	; 0xee
 801532a:	4973      	ldr	r1, [pc, #460]	; (80154f8 <proc_SEGCP+0x9f4>)
 801532c:	f01a ff9c 	bl	8030268 <siprintf>
                        break;
 8015330:	e471      	b.n	8014c16 <proc_SEGCP+0x112>
                    case SEGCP_IT: sprintf(trep, "%d", dev_config->tcp_option[0].inactivity);
 8015332:	4650      	mov	r0, sl
 8015334:	f8b9 20cd 	ldrh.w	r2, [r9, #205]	; 0xcd
 8015338:	496f      	ldr	r1, [pc, #444]	; (80154f8 <proc_SEGCP+0x9f4>)
 801533a:	f01a ff95 	bl	8030268 <siprintf>
                        break;
 801533e:	e46a      	b.n	8014c16 <proc_SEGCP+0x112>
                    case SEGCP_PT: sprintf(trep, "%d", dev_config->serial_data_packing[0].packing_time);
 8015340:	4650      	mov	r0, sl
 8015342:	f8b9 20f1 	ldrh.w	r2, [r9, #241]	; 0xf1
 8015346:	496c      	ldr	r1, [pc, #432]	; (80154f8 <proc_SEGCP+0x9f4>)
 8015348:	f01a ff8e 	bl	8030268 <siprintf>
                        break;
 801534c:	e463      	b.n	8014c16 <proc_SEGCP+0x112>
                        if((dev_config->network_common.mac[0] == 0x00) && (dev_config->network_common.mac[1] == 0x08) && (dev_config->network_common.mac[2] == 0xDC)) ret |= SEGCP_RET_ERR_IGNORED;
 801534e:	f899 3029 	ldrb.w	r3, [r9, #41]	; 0x29
 8015352:	2b00      	cmp	r3, #0
 8015354:	f040 839d 	bne.w	8015a92 <proc_SEGCP+0xf8e>
 8015358:	f899 302a 	ldrb.w	r3, [r9, #42]	; 0x2a
 801535c:	2b08      	cmp	r3, #8
 801535e:	f040 8398 	bne.w	8015a92 <proc_SEGCP+0xf8e>
 8015362:	f899 302b 	ldrb.w	r3, [r9, #43]	; 0x2b
 8015366:	2bdc      	cmp	r3, #220	; 0xdc
 8015368:	f040 8393 	bne.w	8015a92 <proc_SEGCP+0xf8e>
                        ret |= SEGCP_RET_ERR_IGNORED;
 801536c:	f446 4603 	orr.w	r6, r6, #33536	; 0x8300
                        break;
 8015370:	e470      	b.n	8014c54 <proc_SEGCP+0x150>
                        if(param_len > sizeof(dev_config->tcp_option[0].pw_connect)-1)
 8015372:	f1ba 0f09 	cmp.w	sl, #9
 8015376:	f63f ad8a 	bhi.w	8014e8e <proc_SEGCP+0x38a>
                            if(param[0] == SEGCP_NULL) dev_config->tcp_option[0].pw_connect[0] = 0;
 801537a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 801537e:	2b20      	cmp	r3, #32
 8015380:	f040 8434 	bne.w	8015bec <proc_SEGCP+0x10e8>
 8015384:	2300      	movs	r3, #0
 8015386:	f889 30d6 	strb.w	r3, [r9, #214]	; 0xd6
 801538a:	e44b      	b.n	8014c24 <proc_SEGCP+0x120>
                        if(param_len > sizeof(dev_config->config_common.pw_search)-1)
 801538c:	f1ba 0f09 	cmp.w	sl, #9
 8015390:	f63f ad7d 	bhi.w	8014e8e <proc_SEGCP+0x38a>
                            if(param[0] == SEGCP_NULL) dev_config->config_common.pw_search[0] = 0;
 8015394:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8015398:	2b20      	cmp	r3, #32
 801539a:	f040 8420 	bne.w	8015bde <proc_SEGCP+0x10da>
 801539e:	2300      	movs	r3, #0
 80153a0:	f889 301f 	strb.w	r3, [r9, #31]
 80153a4:	e43e      	b.n	8014c24 <proc_SEGCP+0x120>
                        tmp_byte = atoi(param);
 80153a6:	a80a      	add	r0, sp, #40	; 0x28
 80153a8:	f01a fcde 	bl	802fd68 <atoi>
 80153ac:	b2c3      	uxtb	r3, r0
                        if (tmp_byte > 2) //0: Verify_none / 1: Verify_option / 2: Verify_require
 80153ae:	2b02      	cmp	r3, #2
                        tmp_byte = atoi(param);
 80153b0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                        if (tmp_byte > 2) //0: Verify_none / 1: Verify_option / 2: Verify_require
 80153b4:	f63f ad6b 	bhi.w	8014e8e <proc_SEGCP+0x38a>
                        dev_config->ssl_option.root_ca_option = tmp_byte;
 80153b8:	f889 310e 	strb.w	r3, [r9, #270]	; 0x10e
                        break;
 80153bc:	e432      	b.n	8014c24 <proc_SEGCP+0x120>
                        tmp_int = atoi(param);
 80153be:	a80a      	add	r0, sp, #40	; 0x28
 80153c0:	f01a fcd2 	bl	802fd68 <atoi>
                        if(param_len > 4 || tmp_int > (SEG_DATA_BUF_SIZE / 2)) ret |= SEGCP_RET_ERR_INVALIDPARAM;
 80153c4:	f1ba 0f04 	cmp.w	sl, #4
 80153c8:	f63f ad61 	bhi.w	8014e8e <proc_SEGCP+0x38a>
                        tmp_int = atoi(param);
 80153cc:	b283      	uxth	r3, r0
                        if(param_len > 4 || tmp_int > (SEG_DATA_BUF_SIZE / 2)) ret |= SEGCP_RET_ERR_INVALIDPARAM;
 80153ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80153d2:	f63f ad5c 	bhi.w	8014e8e <proc_SEGCP+0x38a>
                        else dev_config->serial_data_packing[0].packing_size = (uint16_t)tmp_int;
 80153d6:	f8a9 30f3 	strh.w	r3, [r9, #243]	; 0xf3
 80153da:	e423      	b.n	8014c24 <proc_SEGCP+0x120>
                        if(param_len != 2 || !is_hexstr(param))
 80153dc:	f1ba 0f02 	cmp.w	sl, #2
 80153e0:	f47f ad55 	bne.w	8014e8e <proc_SEGCP+0x38a>
 80153e4:	a80a      	add	r0, sp, #40	; 0x28
 80153e6:	f001 f83b 	bl	8016460 <is_hexstr>
 80153ea:	2800      	cmp	r0, #0
 80153ec:	f43f ad4f 	beq.w	8014e8e <proc_SEGCP+0x38a>
                            str_to_hex(param, &tmp_byte);
 80153f0:	f10d 0121 	add.w	r1, sp, #33	; 0x21
 80153f4:	a80a      	add	r0, sp, #40	; 0x28
 80153f6:	f001 f863 	bl	80164c0 <str_to_hex>
                            dev_config->serial_data_packing[0].packing_delimiter[0] = tmp_byte;
 80153fa:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80153fe:	f889 30f5 	strb.w	r3, [r9, #245]	; 0xf5
                            if(dev_config->serial_data_packing[0].packing_delimiter[0] == 0x00)
 8015402:	b103      	cbz	r3, 8015406 <proc_SEGCP+0x902>
                                dev_config->serial_data_packing[0].packing_delimiter_length = 1;
 8015404:	2301      	movs	r3, #1
 8015406:	f889 30f9 	strb.w	r3, [r9, #249]	; 0xf9
 801540a:	e40b      	b.n	8014c24 <proc_SEGCP+0x120>
                        tmp_byte = is_hex(*param);
 801540c:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 8015410:	f001 f83c 	bl	801648c <is_hex>
                        if(param_len != 1 || tmp_byte > SEGCP_ENABLE) ret |= SEGCP_RET_ERR_INVALIDPARAM;
 8015414:	f1ba 0f01 	cmp.w	sl, #1
                        tmp_byte = is_hex(*param);
 8015418:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
                        if(param_len != 1 || tmp_byte > SEGCP_ENABLE) ret |= SEGCP_RET_ERR_INVALIDPARAM;
 801541c:	f47f ad37 	bne.w	8014e8e <proc_SEGCP+0x38a>
 8015420:	2801      	cmp	r0, #1
 8015422:	f63f ad34 	bhi.w	8014e8e <proc_SEGCP+0x38a>
                        else dev_config->serial_command.serial_command = tmp_byte;
 8015426:	f889 00e3 	strb.w	r0, [r9, #227]	; 0xe3
 801542a:	f7ff bbfb 	b.w	8014c24 <proc_SEGCP+0x120>
                        if(param_len != 6 || !is_hexstr(param) || !str_to_hex(param, dev_config->serial_command.serial_trigger))
 801542e:	f1ba 0f06 	cmp.w	sl, #6
 8015432:	f47f ad2c 	bne.w	8014e8e <proc_SEGCP+0x38a>
 8015436:	a80a      	add	r0, sp, #40	; 0x28
 8015438:	f001 f812 	bl	8016460 <is_hexstr>
 801543c:	2800      	cmp	r0, #0
 801543e:	f43f ad26 	beq.w	8014e8e <proc_SEGCP+0x38a>
 8015442:	f109 01e4 	add.w	r1, r9, #228	; 0xe4
 8015446:	a80a      	add	r0, sp, #40	; 0x28
 8015448:	f001 f83a 	bl	80164c0 <str_to_hex>
 801544c:	2800      	cmp	r0, #0
 801544e:	f43f ad1e 	beq.w	8014e8e <proc_SEGCP+0x38a>
 8015452:	f7ff bbe7 	b.w	8014c24 <proc_SEGCP+0x120>
                        if(is_ipaddr(param, tmp_ip))
 8015456:	a909      	add	r1, sp, #36	; 0x24
 8015458:	a80a      	add	r0, sp, #40	; 0x28
 801545a:	f000 ff9b 	bl	8016394 <is_ipaddr>
 801545e:	2800      	cmp	r0, #0
 8015460:	f040 838b 	bne.w	8015b7a <proc_SEGCP+0x1076>
                            dev_config->network_connection[0].dns_use = SEGCP_ENABLE;
 8015464:	2301      	movs	r3, #1
 8015466:	f889 3046 	strb.w	r3, [r9, #70]	; 0x46
                            if(param[0] == SEGCP_NULL)
 801546a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 801546e:	2b20      	cmp	r3, #32
 8015470:	f040 83aa 	bne.w	8015bc8 <proc_SEGCP+0x10c4>
                                dev_config->network_connection[0].dns_domain_name[0] = 0;
 8015474:	f889 0047 	strb.w	r0, [r9, #71]	; 0x47
 8015478:	f7ff bbd4 	b.w	8014c24 <proc_SEGCP+0x120>
                        tmp_int = atoi(param);
 801547c:	a80a      	add	r0, sp, #40	; 0x28
 801547e:	f01a fc73 	bl	802fd68 <atoi>
                        if(param_len > 2 || tmp_int > baud_460800) ret |= SEGCP_RET_ERR_INVALIDPARAM; // ## 20180208 Added by Eric, Supports baudrate up to 460.8kbps 
 8015482:	f1ba 0f02 	cmp.w	sl, #2
 8015486:	f63f ad02 	bhi.w	8014e8e <proc_SEGCP+0x38a>
 801548a:	b283      	uxth	r3, r0
 801548c:	2b0e      	cmp	r3, #14
 801548e:	f63f acfe 	bhi.w	8014e8e <proc_SEGCP+0x38a>
                        else dev_config->serial_option[0].baud_rate = (uint8_t)tmp_int;
 8015492:	f889 00ea 	strb.w	r0, [r9, #234]	; 0xea
 8015496:	f7ff bbc5 	b.w	8014c24 <proc_SEGCP+0x120>
                        tmp_byte = is_hex(*param);
 801549a:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 801549e:	f000 fff5 	bl	801648c <is_hex>
                        if(param_len != 1 || tmp_byte > word_len8) ret |= SEGCP_RET_ERR_INVALIDPARAM;
 80154a2:	f1ba 0f01 	cmp.w	sl, #1
                        tmp_byte = is_hex(*param);
 80154a6:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
                        if(param_len != 1 || tmp_byte > word_len8) ret |= SEGCP_RET_ERR_INVALIDPARAM;
 80154aa:	f47f acf0 	bne.w	8014e8e <proc_SEGCP+0x38a>
 80154ae:	2801      	cmp	r0, #1
 80154b0:	f63f aced 	bhi.w	8014e8e <proc_SEGCP+0x38a>
                        else dev_config->serial_option[0].data_bits = tmp_byte;
 80154b4:	f889 00eb 	strb.w	r0, [r9, #235]	; 0xeb
 80154b8:	f7ff bbb4 	b.w	8014c24 <proc_SEGCP+0x120>
                        tmp_byte = is_hex(*param);
 80154bc:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 80154c0:	f000 ffe4 	bl	801648c <is_hex>
                        if(param_len != 1 || tmp_byte > parity_even) ret |= SEGCP_RET_ERR_INVALIDPARAM;
 80154c4:	f1ba 0f01 	cmp.w	sl, #1
                        tmp_byte = is_hex(*param);
 80154c8:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
                        if(param_len != 1 || tmp_byte > parity_even) ret |= SEGCP_RET_ERR_INVALIDPARAM;
 80154cc:	f47f acdf 	bne.w	8014e8e <proc_SEGCP+0x38a>
 80154d0:	2802      	cmp	r0, #2
 80154d2:	f63f acdc 	bhi.w	8014e8e <proc_SEGCP+0x38a>
                        else dev_config->serial_option[0].parity = tmp_byte;
 80154d6:	f889 00ec 	strb.w	r0, [r9, #236]	; 0xec
 80154da:	f7ff bba3 	b.w	8014c24 <proc_SEGCP+0x120>
                            memset(tmp_ptr, NULL, ROOTCA_BUF_SIZE);
 80154de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80154e2:	2100      	movs	r1, #0
 80154e4:	4658      	mov	r0, fp
 80154e6:	f01a fcbe 	bl	802fe66 <memset>
                            sprintf(tmp_ptr, "%s", treq+SEGCP_CMD_MAX);
 80154ea:	4658      	mov	r0, fp
 80154ec:	1ca1      	adds	r1, r4, #2
 80154ee:	f01a fedb 	bl	80302a8 <stpcpy>
 80154f2:	9407      	str	r4, [sp, #28]
 80154f4:	4682      	mov	sl, r0
                            while((len = getSn_RX_RSR(SEGCP_UDP_SOCK)) > 0)
 80154f6:	e01d      	b.n	8015534 <proc_SEGCP+0xa30>
 80154f8:	08031da0 	.word	0x08031da0
 80154fc:	08031da4 	.word	0x08031da4
 8015500:	08031dc4 	.word	0x08031dc4
 8015504:	080318b8 	.word	0x080318b8
                                PRT_SEGCP("while((len = getSn_RX_RSR(SEGCP_UDP_SOCK)) > 0)\r\n");
 8015508:	f240 4266 	movw	r2, #1126	; 0x466
 801550c:	4639      	mov	r1, r7
 801550e:	48d7      	ldr	r0, [pc, #860]	; (801586c <proc_SEGCP+0xd68>)
 8015510:	f002 fc98 	bl	8017e44 <WIZ_SECURE_printf>
                                len = recvfrom(SEGCP_UDP_SOCK, tmp_ptr, len, tmp_ip, &tmp_port);
 8015514:	f10d 0122 	add.w	r1, sp, #34	; 0x22
 8015518:	9100      	str	r1, [sp, #0]
 801551a:	ab09      	add	r3, sp, #36	; 0x24
 801551c:	4651      	mov	r1, sl
 801551e:	4622      	mov	r2, r4
 8015520:	2001      	movs	r0, #1
 8015522:	f006 fac7 	bl	801bab4 <recvfrom>
                                tmp_ptr += len;
 8015526:	4482      	add	sl, r0
                                if((tmp_ptr - g_temp_buf) > ROOTCA_BUF_SIZE)
 8015528:	ebaa 030b 	sub.w	r3, sl, fp
 801552c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015530:	f300 833b 	bgt.w	8015baa <proc_SEGCP+0x10a6>
                            while((len = getSn_RX_RSR(SEGCP_UDP_SOCK)) > 0)
 8015534:	2001      	movs	r0, #1
 8015536:	f005 fbb3 	bl	801aca0 <getSn_RX_RSR>
 801553a:	4604      	mov	r4, r0
 801553c:	2800      	cmp	r0, #0
 801553e:	d1e3      	bne.n	8015508 <proc_SEGCP+0xa04>
                            if(!(ret & SEGCP_RET_ERR))
 8015540:	0433      	lsls	r3, r6, #16
 8015542:	9c07      	ldr	r4, [sp, #28]
 8015544:	f53f ab7f 	bmi.w	8014c46 <proc_SEGCP+0x142>
                                tmp_ptr = strstr(g_temp_buf, END_CERT);
 8015548:	4658      	mov	r0, fp
 801554a:	49c9      	ldr	r1, [pc, #804]	; (8015870 <proc_SEGCP+0xd6c>)
 801554c:	f01a feef 	bl	803032e <strstr>
                                if (tmp_ptr == NULL)
 8015550:	2800      	cmp	r0, #0
 8015552:	f43f ac9c 	beq.w	8014e8e <proc_SEGCP+0x38a>
                                if (*tmp_ptr == '\n')
 8015556:	7e43      	ldrb	r3, [r0, #25]
 8015558:	2b0a      	cmp	r3, #10
 801555a:	f000 83b2 	beq.w	8015cc2 <proc_SEGCP+0x11be>
                                else if (*tmp_ptr == '\r')
 801555e:	2b0d      	cmp	r3, #13
                                    *(tmp_ptr) = '\r';
 8015560:	bf1f      	itttt	ne
 8015562:	220d      	movne	r2, #13
                                    *(tmp_ptr+1) = '\n';
 8015564:	230a      	movne	r3, #10
                                    *(tmp_ptr) = '\r';
 8015566:	7642      	strbne	r2, [r0, #25]
                                    *(tmp_ptr+1) = '\n';
 8015568:	7683      	strbne	r3, [r0, #26]
                                    tmp_ptr+=2;
 801556a:	301b      	adds	r0, #27
                                g_temp_buf[dev_config->ssl_option.rootca_len] = NULL;
 801556c:	2700      	movs	r7, #0
                                dev_config->ssl_option.rootca_len = tmp_ptr - g_temp_buf;
 801556e:	4dc1      	ldr	r5, [pc, #772]	; (8015874 <proc_SEGCP+0xd70>)
                                PRT_SEGCP("g_rootca_buf = \r\n%s\r\n", g_temp_buf);
 8015570:	f240 428b 	movw	r2, #1163	; 0x48b
                                dev_config->ssl_option.rootca_len = tmp_ptr - g_temp_buf;
 8015574:	1b44      	subs	r4, r0, r5
                                PRT_SEGCP("g_rootca_buf = \r\n%s\r\n", g_temp_buf);
 8015576:	462b      	mov	r3, r5
 8015578:	49bf      	ldr	r1, [pc, #764]	; (8015878 <proc_SEGCP+0xd74>)
 801557a:	48c0      	ldr	r0, [pc, #768]	; (801587c <proc_SEGCP+0xd78>)
                                dev_config->ssl_option.rootca_len = tmp_ptr - g_temp_buf;
 801557c:	f8c9 4110 	str.w	r4, [r9, #272]	; 0x110
                                g_temp_buf[dev_config->ssl_option.rootca_len] = NULL;
 8015580:	552f      	strb	r7, [r5, r4]
                                PRT_SEGCP("g_rootca_buf = \r\n%s\r\n", g_temp_buf);
 8015582:	f002 fc5f 	bl	8017e44 <WIZ_SECURE_printf>
                                ret_2 = check_ca(g_temp_buf, dev_config->ssl_option.rootca_len);
 8015586:	4628      	mov	r0, r5
 8015588:	f8d9 1110 	ldr.w	r1, [r9, #272]	; 0x110
 801558c:	f009 fb5c 	bl	801ec48 <check_ca>
                                if (ret_2 < 0)
 8015590:	42b8      	cmp	r0, r7
 8015592:	f2c0 830a 	blt.w	8015baa <proc_SEGCP+0x10a6>
                                    erase_storage(STORAGE_CONFIG);
 8015596:	2001      	movs	r0, #1
 8015598:	f002 f8b2 	bl	8017700 <erase_storage>
                                    write_storage(STORAGE_CONFIG, 0, (uint8_t *)dev_config, sizeof(DevConfig));
 801559c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80155a0:	464a      	mov	r2, r9
 80155a2:	4639      	mov	r1, r7
 80155a4:	2001      	movs	r0, #1
 80155a6:	f002 f87b 	bl	80176a0 <write_storage>
                                    erase_storage(STORAGE_ROOTCA);
 80155aa:	2009      	movs	r0, #9
 80155ac:	f002 f8a8 	bl	8017700 <erase_storage>
                                    write_storage(STORAGE_ROOTCA, 0, (uint8_t *)g_temp_buf, dev_config->ssl_option.rootca_len + 1);
 80155b0:	f8d9 3110 	ldr.w	r3, [r9, #272]	; 0x110
 80155b4:	462a      	mov	r2, r5
 80155b6:	3301      	adds	r3, #1
 80155b8:	4639      	mov	r1, r7
 80155ba:	b29b      	uxth	r3, r3
 80155bc:	2009      	movs	r0, #9
 80155be:	f002 f86f 	bl	80176a0 <write_storage>
                                    memcpy(trep, tbSEGCPCMD[cmdnum], SEGCP_CMD_MAX);
 80155c2:	4baf      	ldr	r3, [pc, #700]	; (8015880 <proc_SEGCP+0xd7c>)
 80155c4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80155c8:	881b      	ldrh	r3, [r3, #0]
 80155ca:	f828 3b02 	strh.w	r3, [r8], #2
                                    strcat(trep, SEGCP_DELIMETER);
 80155ce:	4640      	mov	r0, r8
 80155d0:	f7fa fe3c 	bl	801024c <strlen>
 80155d4:	4bab      	ldr	r3, [pc, #684]	; (8015884 <proc_SEGCP+0xd80>)
 80155d6:	eb08 0200 	add.w	r2, r8, r0
 80155da:	8819      	ldrh	r1, [r3, #0]
 80155dc:	789b      	ldrb	r3, [r3, #2]
 80155de:	f828 1000 	strh.w	r1, [r8, r0]
 80155e2:	7093      	strb	r3, [r2, #2]
 80155e4:	f7ff bb2f 	b.w	8014c46 <proc_SEGCP+0x142>
                            memset(tmp_ptr, NULL, CLICA_BUF_SIZE);
 80155e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80155ec:	2100      	movs	r1, #0
 80155ee:	4658      	mov	r0, fp
 80155f0:	f01a fc39 	bl	802fe66 <memset>
                            sprintf(tmp_ptr, "%s", treq+SEGCP_CMD_MAX);
 80155f4:	4658      	mov	r0, fp
 80155f6:	1ca1      	adds	r1, r4, #2
 80155f8:	f01a fe56 	bl	80302a8 <stpcpy>
 80155fc:	9407      	str	r4, [sp, #28]
 80155fe:	4682      	mov	sl, r0
                            while((len = getSn_RX_RSR(SEGCP_UDP_SOCK)) > 0)
 8015600:	e015      	b.n	801562e <proc_SEGCP+0xb2a>
                                PRT_SEGCP("while((len = getSn_RX_RSR(SEGCP_UDP_SOCK)) > 0)\r\n");
 8015602:	f240 42ab 	movw	r2, #1195	; 0x4ab
 8015606:	4639      	mov	r1, r7
 8015608:	4898      	ldr	r0, [pc, #608]	; (801586c <proc_SEGCP+0xd68>)
 801560a:	f002 fc1b 	bl	8017e44 <WIZ_SECURE_printf>
                                len = recvfrom(SEGCP_UDP_SOCK, tmp_ptr, len, tmp_ip, &tmp_port);
 801560e:	f10d 0122 	add.w	r1, sp, #34	; 0x22
 8015612:	9100      	str	r1, [sp, #0]
 8015614:	ab09      	add	r3, sp, #36	; 0x24
 8015616:	4651      	mov	r1, sl
 8015618:	4622      	mov	r2, r4
 801561a:	2001      	movs	r0, #1
 801561c:	f006 fa4a 	bl	801bab4 <recvfrom>
                                tmp_ptr += len;
 8015620:	4482      	add	sl, r0
                                if((tmp_ptr - g_temp_buf) > CLICA_BUF_SIZE)
 8015622:	ebaa 030b 	sub.w	r3, sl, fp
 8015626:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801562a:	f300 82c2 	bgt.w	8015bb2 <proc_SEGCP+0x10ae>
                            while((len = getSn_RX_RSR(SEGCP_UDP_SOCK)) > 0)
 801562e:	2001      	movs	r0, #1
 8015630:	f005 fb36 	bl	801aca0 <getSn_RX_RSR>
 8015634:	4604      	mov	r4, r0
 8015636:	2800      	cmp	r0, #0
 8015638:	d1e3      	bne.n	8015602 <proc_SEGCP+0xafe>
                            if(!(ret & SEGCP_RET_ERR))
 801563a:	0430      	lsls	r0, r6, #16
 801563c:	9c07      	ldr	r4, [sp, #28]
 801563e:	f100 82ba 	bmi.w	8015bb6 <proc_SEGCP+0x10b2>
                                tmp_ptr = strstr(g_temp_buf, END_CERT);
 8015642:	4658      	mov	r0, fp
 8015644:	498a      	ldr	r1, [pc, #552]	; (8015870 <proc_SEGCP+0xd6c>)
 8015646:	f01a fe72 	bl	803032e <strstr>
                                if (tmp_ptr == NULL)
 801564a:	2800      	cmp	r0, #0
 801564c:	f43f ac1f 	beq.w	8014e8e <proc_SEGCP+0x38a>
                                if (*tmp_ptr == '\n')
 8015650:	7e43      	ldrb	r3, [r0, #25]
 8015652:	2b0a      	cmp	r3, #10
 8015654:	f000 8339 	beq.w	8015cca <proc_SEGCP+0x11c6>
                                else if (*tmp_ptr == '\r')
 8015658:	2b0d      	cmp	r3, #13
                                    *(tmp_ptr) = '\r';
 801565a:	bf1f      	itttt	ne
 801565c:	220d      	movne	r2, #13
                                    *(tmp_ptr+1) = '\n';
 801565e:	230a      	movne	r3, #10
                                    *(tmp_ptr) = '\r';
 8015660:	7642      	strbne	r2, [r0, #25]
                                    *(tmp_ptr+1) = '\n';
 8015662:	7683      	strbne	r3, [r0, #26]
                                    tmp_ptr+=2;
 8015664:	301b      	adds	r0, #27
                                g_temp_buf[dev_config->ssl_option.clica_len] = NULL;
 8015666:	2500      	movs	r5, #0
                                dev_config->ssl_option.clica_len = tmp_ptr - g_temp_buf;
 8015668:	4c82      	ldr	r4, [pc, #520]	; (8015874 <proc_SEGCP+0xd70>)
 801566a:	1b00      	subs	r0, r0, r4
 801566c:	f8c9 0114 	str.w	r0, [r9, #276]	; 0x114
                                g_temp_buf[dev_config->ssl_option.clica_len] = NULL;
 8015670:	5425      	strb	r5, [r4, r0]
                                ret_2 = check_ca(g_temp_buf, dev_config->ssl_option.clica_len);
 8015672:	f8d9 1114 	ldr.w	r1, [r9, #276]	; 0x114
 8015676:	4620      	mov	r0, r4
 8015678:	f009 fae6 	bl	801ec48 <check_ca>
                                if (ret_2 < 0)
 801567c:	42a8      	cmp	r0, r5
 801567e:	f2c0 8298 	blt.w	8015bb2 <proc_SEGCP+0x10ae>
                                    erase_storage(STORAGE_CONFIG);
 8015682:	2001      	movs	r0, #1
 8015684:	f002 f83c 	bl	8017700 <erase_storage>
                                    write_storage(STORAGE_CONFIG, 0, (uint8_t *)dev_config, sizeof(DevConfig));
 8015688:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 801568c:	464a      	mov	r2, r9
 801568e:	4629      	mov	r1, r5
 8015690:	2001      	movs	r0, #1
 8015692:	f002 f805 	bl	80176a0 <write_storage>
                                    erase_storage(STORAGE_CLICA);
 8015696:	200a      	movs	r0, #10
 8015698:	f002 f832 	bl	8017700 <erase_storage>
                                    write_storage(STORAGE_CLICA, 0, (uint8_t *)g_temp_buf, dev_config->ssl_option.clica_len + 1);
 801569c:	f8d9 3114 	ldr.w	r3, [r9, #276]	; 0x114
 80156a0:	4622      	mov	r2, r4
 80156a2:	3301      	adds	r3, #1
 80156a4:	4629      	mov	r1, r5
 80156a6:	b29b      	uxth	r3, r3
 80156a8:	200a      	movs	r0, #10
 80156aa:	f001 fff9 	bl	80176a0 <write_storage>
                                    memcpy(trep, tbSEGCPCMD[cmdnum], SEGCP_CMD_MAX);
 80156ae:	4b74      	ldr	r3, [pc, #464]	; (8015880 <proc_SEGCP+0xd7c>)
 80156b0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80156b4:	881b      	ldrh	r3, [r3, #0]
 80156b6:	f828 3b02 	strh.w	r3, [r8], #2
                                    strcat(trep, SEGCP_DELIMETER);
 80156ba:	4640      	mov	r0, r8
 80156bc:	f7fa fdc6 	bl	801024c <strlen>
 80156c0:	4b70      	ldr	r3, [pc, #448]	; (8015884 <proc_SEGCP+0xd80>)
 80156c2:	eb08 0200 	add.w	r2, r8, r0
 80156c6:	8819      	ldrh	r1, [r3, #0]
 80156c8:	789b      	ldrb	r3, [r3, #2]
 80156ca:	f828 1000 	strh.w	r1, [r8, r0]
 80156ce:	7093      	strb	r3, [r2, #2]
 80156d0:	e271      	b.n	8015bb6 <proc_SEGCP+0x10b2>
                        tmp_byte = atoi(param);
 80156d2:	a80a      	add	r0, sp, #40	; 0x28
 80156d4:	f01a fb48 	bl	802fd68 <atoi>
 80156d8:	b2c3      	uxtb	r3, r0
                        if (tmp_byte > 1)
 80156da:	2b01      	cmp	r3, #1
                        tmp_byte = atoi(param);
 80156dc:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                        if (tmp_byte > 1)
 80156e0:	f63f abd5 	bhi.w	8014e8e <proc_SEGCP+0x38a>
                        dev_config->ssl_option.client_cert_enable = tmp_byte;
 80156e4:	f889 310f 	strb.w	r3, [r9, #271]	; 0x10f
                        break;
 80156e8:	f7ff ba9c 	b.w	8014c24 <proc_SEGCP+0x120>
                        tmp_byte = is_hex(*param);
 80156ec:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 80156f0:	f000 fecc 	bl	801648c <is_hex>
                        if(param_len != 1 || tmp_byte > stop_bit2) ret |= SEGCP_RET_ERR_INVALIDPARAM;
 80156f4:	f1ba 0f01 	cmp.w	sl, #1
                        tmp_byte = is_hex(*param);
 80156f8:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
                        if(param_len != 1 || tmp_byte > stop_bit2) ret |= SEGCP_RET_ERR_INVALIDPARAM;
 80156fc:	f47f abc7 	bne.w	8014e8e <proc_SEGCP+0x38a>
 8015700:	2801      	cmp	r0, #1
 8015702:	f63f abc4 	bhi.w	8014e8e <proc_SEGCP+0x38a>
                        else dev_config->serial_option[0].stop_bits = tmp_byte;
 8015706:	f889 00ed 	strb.w	r0, [r9, #237]	; 0xed
 801570a:	f7ff ba8b 	b.w	8014c24 <proc_SEGCP+0x120>
                        tmp_byte = is_hex(*param);
 801570e:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 8015712:	f000 febb 	bl	801648c <is_hex>
                        if(param_len != 1 || tmp_byte > flow_reverserts)
 8015716:	f1ba 0f01 	cmp.w	sl, #1
                        tmp_byte = is_hex(*param);
 801571a:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
                        if(param_len != 1 || tmp_byte > flow_reverserts)
 801571e:	f47f abb6 	bne.w	8014e8e <proc_SEGCP+0x38a>
 8015722:	2804      	cmp	r0, #4
 8015724:	f63f abb3 	bhi.w	8014e8e <proc_SEGCP+0x38a>
                            if((dev_config->serial_option[0].uart_interface == UART_IF_RS422) ||
 8015728:	f899 30e8 	ldrb.w	r3, [r9, #232]	; 0xe8
 801572c:	3b02      	subs	r3, #2
 801572e:	2b01      	cmp	r3, #1
 8015730:	f240 826a 	bls.w	8015c08 <proc_SEGCP+0x1104>
                                dev_config->serial_option[0].flow_control = tmp_byte;
 8015734:	f889 00ee 	strb.w	r0, [r9, #238]	; 0xee
 8015738:	f7ff ba74 	b.w	8014c24 <proc_SEGCP+0x120>
                        tmp_long = atol(param);
 801573c:	a80a      	add	r0, sp, #40	; 0x28
 801573e:	f01a fb17 	bl	802fd70 <atol>
                        if(tmp_long > 0xFFFF) ret |= SEGCP_RET_ERR_INVALIDPARAM;
 8015742:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8015746:	f4bf aba2 	bcs.w	8014e8e <proc_SEGCP+0x38a>
                        else dev_config->tcp_option[0].inactivity = (uint16_t)tmp_long;
 801574a:	f8a9 00cd 	strh.w	r0, [r9, #205]	; 0xcd
 801574e:	f7ff ba69 	b.w	8014c24 <proc_SEGCP+0x120>
                        tmp_long = atol(param);
 8015752:	a80a      	add	r0, sp, #40	; 0x28
 8015754:	f01a fb0c 	bl	802fd70 <atol>
                        if(tmp_long > 0xFFFF) ret |= SEGCP_RET_ERR_INVALIDPARAM;
 8015758:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801575c:	f4bf ab97 	bcs.w	8014e8e <proc_SEGCP+0x38a>
                        else dev_config->serial_data_packing[0].packing_time = (uint16_t)tmp_long;
 8015760:	f8a9 00f1 	strh.w	r0, [r9, #241]	; 0xf1
 8015764:	f7ff ba5e 	b.w	8014c24 <proc_SEGCP+0x120>
                        tmp_long = atol(param);
 8015768:	a80a      	add	r0, sp, #40	; 0x28
 801576a:	f01a fb01 	bl	802fd70 <atol>
                        if(tmp_long > 0xFFFF) ret |= SEGCP_RET_ERR_INVALIDPARAM;
 801576e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8015772:	f4bf ab8c 	bcs.w	8014e8e <proc_SEGCP+0x38a>
                        else dev_config->tcp_option[0].reconnection = (uint16_t) tmp_long;
 8015776:	f8a9 00cf 	strh.w	r0, [r9, #207]	; 0xcf
 801577a:	f7ff ba53 	b.w	8014c24 <proc_SEGCP+0x120>
                        if(is_ipaddr(param, tmp_ip))
 801577e:	a909      	add	r1, sp, #36	; 0x24
 8015780:	a80a      	add	r0, sp, #40	; 0x28
 8015782:	f000 fe07 	bl	8016394 <is_ipaddr>
 8015786:	2800      	cmp	r0, #0
 8015788:	f43f ab81 	beq.w	8014e8e <proc_SEGCP+0x38a>
                            dev_config->network_common.local_ip[0] = tmp_ip[0];
 801578c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801578e:	f8c9 302f 	str.w	r3, [r9, #47]	; 0x2f
 8015792:	f7ff ba47 	b.w	8014c24 <proc_SEGCP+0x120>
                        if(is_ipaddr(param, tmp_ip))
 8015796:	a909      	add	r1, sp, #36	; 0x24
 8015798:	a80a      	add	r0, sp, #40	; 0x28
 801579a:	f000 fdfb 	bl	8016394 <is_ipaddr>
 801579e:	2800      	cmp	r0, #0
 80157a0:	f43f ab75 	beq.w	8014e8e <proc_SEGCP+0x38a>
                            dev_config->network_common.subnet[0] = tmp_ip[0];
 80157a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157a6:	f8c9 3037 	str.w	r3, [r9, #55]	; 0x37
 80157aa:	f7ff ba3b 	b.w	8014c24 <proc_SEGCP+0x120>
                        if(is_ipaddr(param, tmp_ip))
 80157ae:	a909      	add	r1, sp, #36	; 0x24
 80157b0:	a80a      	add	r0, sp, #40	; 0x28
 80157b2:	f000 fdef 	bl	8016394 <is_ipaddr>
 80157b6:	2800      	cmp	r0, #0
 80157b8:	f43f ab69 	beq.w	8014e8e <proc_SEGCP+0x38a>
                            dev_config->network_common.gateway[0] = tmp_ip[0];
 80157bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157be:	f8c9 3033 	str.w	r3, [r9, #51]	; 0x33
 80157c2:	f7ff ba2f 	b.w	8014c24 <proc_SEGCP+0x120>
                        if(is_ipaddr(param, tmp_ip))
 80157c6:	a909      	add	r1, sp, #36	; 0x24
 80157c8:	a80a      	add	r0, sp, #40	; 0x28
 80157ca:	f000 fde3 	bl	8016394 <is_ipaddr>
 80157ce:	2800      	cmp	r0, #0
 80157d0:	f43f ab5d 	beq.w	8014e8e <proc_SEGCP+0x38a>
                            dev_config->network_option.dns_server_ip[0] = tmp_ip[0];
 80157d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157d6:	f8c9 30c8 	str.w	r3, [r9, #200]	; 0xc8
 80157da:	f7ff ba23 	b.w	8014c24 <proc_SEGCP+0x120>
                        if(param_len > sizeof(dev_config->device_common.device_name)-1) ret |= SEGCP_RET_ERR_INVALIDPARAM;
 80157de:	f1ba 0f13 	cmp.w	sl, #19
 80157e2:	f63f ab54 	bhi.w	8014e8e <proc_SEGCP+0x38a>
                            if(param[0] == SEGCP_NULL)
 80157e6:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80157ea:	2b20      	cmp	r3, #32
 80157ec:	f040 8205 	bne.w	8015bfa <proc_SEGCP+0x10f6>
                                dev_config->device_common.device_name[0] = 0;
 80157f0:	2300      	movs	r3, #0
 80157f2:	f889 3006 	strb.w	r3, [r9, #6]
 80157f6:	f7ff ba15 	b.w	8014c24 <proc_SEGCP+0x120>
                        tmp_long = atol(param);
 80157fa:	a80a      	add	r0, sp, #40	; 0x28
 80157fc:	f01a fab8 	bl	802fd70 <atol>
                        if(tmp_long > 0xFFFF) ret |= SEGCP_RET_ERR_INVALIDPARAM;
 8015800:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8015804:	f4bf ab43 	bcs.w	8014e8e <proc_SEGCP+0x38a>
                        else dev_config->network_connection[0].local_port = (uint16_t)tmp_long;
 8015808:	f8a9 003d 	strh.w	r0, [r9, #61]	; 0x3d
 801580c:	f7ff ba0a 	b.w	8014c24 <proc_SEGCP+0x120>
                        tmp_long = atol(param);
 8015810:	a80a      	add	r0, sp, #40	; 0x28
 8015812:	f01a faad 	bl	802fd70 <atol>
                        if(tmp_long > 0xFFFF) ret |= SEGCP_RET_ERR_INVALIDPARAM;
 8015816:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801581a:	f4bf ab38 	bcs.w	8014e8e <proc_SEGCP+0x38a>
                        else dev_config->network_connection[0].remote_port = (uint16_t)tmp_long;
 801581e:	f8a9 003f 	strh.w	r0, [r9, #63]	; 0x3f
 8015822:	f7ff b9ff 	b.w	8014c24 <proc_SEGCP+0x120>
                        tmp_byte = is_hex(*param);
 8015826:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 801582a:	f000 fe2f 	bl	801648c <is_hex>
                        if(param_len != 1 || tmp_byte > SEG_DEBUG_ALL) ret |= SEGCP_RET_ERR_INVALIDPARAM;
 801582e:	f1ba 0f01 	cmp.w	sl, #1
                        tmp_byte = is_hex(*param);
 8015832:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
                        if(param_len != 1 || tmp_byte > SEG_DEBUG_ALL) ret |= SEGCP_RET_ERR_INVALIDPARAM;
 8015836:	f47f ab2a 	bne.w	8014e8e <proc_SEGCP+0x38a>
 801583a:	2804      	cmp	r0, #4
 801583c:	f63f ab27 	bhi.w	8014e8e <proc_SEGCP+0x38a>
                        else dev_config->serial_common.serial_debug_en = tmp_byte;
 8015840:	f889 00e2 	strb.w	r0, [r9, #226]	; 0xe2
 8015844:	f7ff b9ee 	b.w	8014c24 <proc_SEGCP+0x120>
                        tmp_byte = is_hex(*param);
 8015848:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 801584c:	f000 fe1e 	bl	801648c <is_hex>
                        if(param_len != 1 || tmp_byte > SEGCP_ENABLE) ret |= SEGCP_RET_ERR_INVALIDPARAM;
 8015850:	f1ba 0f01 	cmp.w	sl, #1
                        tmp_byte = is_hex(*param);
 8015854:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
                        if(param_len != 1 || tmp_byte > SEGCP_ENABLE) ret |= SEGCP_RET_ERR_INVALIDPARAM;
 8015858:	f47f ab19 	bne.w	8014e8e <proc_SEGCP+0x38a>
 801585c:	2801      	cmp	r0, #1
 801585e:	f63f ab16 	bhi.w	8014e8e <proc_SEGCP+0x38a>
                        else dev_config->tcp_option[0].keepalive_en = tmp_byte;
 8015862:	f889 00d1 	strb.w	r0, [r9, #209]	; 0xd1
 8015866:	f7ff b9dd 	b.w	8014c24 <proc_SEGCP+0x120>
 801586a:	bf00      	nop
 801586c:	08031e48 	.word	0x08031e48
 8015870:	08031e8c 	.word	0x08031e8c
 8015874:	2001bdb8 	.word	0x2001bdb8
 8015878:	08032390 	.word	0x08032390
 801587c:	08031ea8 	.word	0x08031ea8
 8015880:	20018058 	.word	0x20018058
 8015884:	08032fb8 	.word	0x08032fb8
                        tmp_long = atol(param);
 8015888:	a80a      	add	r0, sp, #40	; 0x28
 801588a:	f01a fa71 	bl	802fd70 <atol>
                        if(tmp_long > 0xFFFF) ret |= SEGCP_RET_ERR_INVALIDPARAM;
 801588e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8015892:	f4bf aafc 	bcs.w	8014e8e <proc_SEGCP+0x38a>
                        else dev_config->tcp_option[0].keepalive_wait_time = (uint16_t) tmp_long;
 8015896:	f8a9 00d2 	strh.w	r0, [r9, #210]	; 0xd2
 801589a:	f7ff b9c3 	b.w	8014c24 <proc_SEGCP+0x120>
                        tmp_long = atol(param);
 801589e:	a80a      	add	r0, sp, #40	; 0x28
 80158a0:	f01a fa66 	bl	802fd70 <atol>
                        if(tmp_long > 0xFFFF) ret |= SEGCP_RET_ERR_INVALIDPARAM;
 80158a4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80158a8:	f4bf aaf1 	bcs.w	8014e8e <proc_SEGCP+0x38a>
                        else dev_config->tcp_option[0].keepalive_retry_time = (uint16_t) tmp_long;
 80158ac:	f8a9 00d4 	strh.w	r0, [r9, #212]	; 0xd4
 80158b0:	f7ff b9b8 	b.w	8014c24 <proc_SEGCP+0x120>
                        tmp_byte = is_hex(*param);
 80158b4:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 80158b8:	f000 fde8 	bl	801648c <is_hex>
                        if(param_len != 1 || tmp_byte > MQTTS_CLIENT_MODE)
 80158bc:	f1ba 0f01 	cmp.w	sl, #1
                        tmp_byte = is_hex(*param);
 80158c0:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
                        if(param_len != 1 || tmp_byte > MQTTS_CLIENT_MODE)
 80158c4:	f47f aae3 	bne.w	8014e8e <proc_SEGCP+0x38a>
 80158c8:	2806      	cmp	r0, #6
 80158ca:	f63f aae0 	bhi.w	8014e8e <proc_SEGCP+0x38a>
                            process_socket_termination(SEG_DATA0_SOCK, 100);
 80158ce:	2164      	movs	r1, #100	; 0x64
 80158d0:	2000      	movs	r0, #0
 80158d2:	f002 fc69 	bl	80181a8 <process_socket_termination>
                            dev_config->network_connection[0].working_mode = tmp_byte;
 80158d6:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80158da:	f889 303b 	strb.w	r3, [r9, #59]	; 0x3b
 80158de:	f7ff b9a1 	b.w	8014c24 <proc_SEGCP+0x120>
                        tmp_byte = is_hex(*param);
 80158e2:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 80158e6:	f000 fdd1 	bl	801648c <is_hex>
                        if(param_len != 1 || tmp_byte > SEGCP_ENABLE) ret |= SEGCP_RET_ERR_INVALIDPARAM;
 80158ea:	f1ba 0f01 	cmp.w	sl, #1
                        tmp_byte = is_hex(*param);
 80158ee:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
                        if(param_len != 1 || tmp_byte > SEGCP_ENABLE) ret |= SEGCP_RET_ERR_INVALIDPARAM;
 80158f2:	f47f aacc 	bne.w	8014e8e <proc_SEGCP+0x38a>
 80158f6:	2801      	cmp	r0, #1
 80158f8:	f63f aac9 	bhi.w	8014e8e <proc_SEGCP+0x38a>
                        else dev_config->tcp_option[0].pw_connect_en = tmp_byte;
 80158fc:	f889 00e0 	strb.w	r0, [r9, #224]	; 0xe0
 8015900:	f7ff b990 	b.w	8014c24 <proc_SEGCP+0x120>
                        tmp_byte = is_hex(*param);
 8015904:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 8015908:	f000 fdc0 	bl	801648c <is_hex>
                        if(param_len != 1 || tmp_byte > SEGCP_DHCP) ret |= SEGCP_RET_ERR_INVALIDPARAM;
 801590c:	f1ba 0f01 	cmp.w	sl, #1
                        tmp_byte = is_hex(*param);
 8015910:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
                        if(param_len != 1 || tmp_byte > SEGCP_DHCP) ret |= SEGCP_RET_ERR_INVALIDPARAM;
 8015914:	f47f aabb 	bne.w	8014e8e <proc_SEGCP+0x38a>
 8015918:	2801      	cmp	r0, #1
 801591a:	f63f aab8 	bhi.w	8014e8e <proc_SEGCP+0x38a>
                        else dev_config->network_option.dhcp_use = tmp_byte;
 801591e:	f889 00c7 	strb.w	r0, [r9, #199]	; 0xc7
 8015922:	f7ff b97f 	b.w	8014c24 <proc_SEGCP+0x120>
                        tmp_byte = is_hex(*param);
 8015926:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 801592a:	f000 fdaf 	bl	801648c <is_hex>
                        if(param_len != 1 || tmp_byte > SEGCP_ENABLE) ret |= SEGCP_RET_ERR_INVALIDPARAM;
 801592e:	f1ba 0f01 	cmp.w	sl, #1
                        tmp_byte = is_hex(*param);
 8015932:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
                        if(param_len != 1 || tmp_byte > SEGCP_ENABLE) ret |= SEGCP_RET_ERR_INVALIDPARAM;
 8015936:	f47f aaaa 	bne.w	8014e8e <proc_SEGCP+0x38a>
 801593a:	2801      	cmp	r0, #1
 801593c:	f63f aaa7 	bhi.w	8014e8e <proc_SEGCP+0x38a>
                        else dev_config->serial_command.serial_command_echo = tmp_byte;
 8015940:	f889 00e7 	strb.w	r0, [r9, #231]	; 0xe7
 8015944:	f7ff b96e 	b.w	8014c24 <proc_SEGCP+0x120>
                        str_to_hex(param, &tmp_byte);
 8015948:	f10d 0121 	add.w	r1, sp, #33	; 0x21
 801594c:	a80a      	add	r0, sp, #40	; 0x28
 801594e:	f000 fdb7 	bl	80164c0 <str_to_hex>
                        tmp_int = (tmp_byte & 0xF0) >> 4;   // [0] PHY link / [1] DTR
 8015952:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
                        if((param_len > 2) || (tmp_byte > IO_HIGH) || (tmp_int > IO_HIGH)) // Invalid parameters
 8015956:	f1ba 0f02 	cmp.w	sl, #2
                        tmp_byte = (tmp_byte & 0x0F);       // [0] TCP connection / [1] DSR
 801595a:	f003 020f 	and.w	r2, r3, #15
 801595e:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
                        if((param_len > 2) || (tmp_byte > IO_HIGH) || (tmp_int > IO_HIGH)) // Invalid parameters
 8015962:	f63f aa94 	bhi.w	8014e8e <proc_SEGCP+0x38a>
 8015966:	f013 0f0e 	tst.w	r3, #14
 801596a:	f47f aa90 	bne.w	8014e8e <proc_SEGCP+0x38a>
 801596e:	2b1f      	cmp	r3, #31
                        tmp_int = (tmp_byte & 0xF0) >> 4;   // [0] PHY link / [1] DTR
 8015970:	ea4f 1113 	mov.w	r1, r3, lsr #4
                        if((param_len > 2) || (tmp_byte > IO_HIGH) || (tmp_int > IO_HIGH)) // Invalid parameters
 8015974:	f63f aa8b 	bhi.w	8014e8e <proc_SEGCP+0x38a>
                            dev_config->serial_option[0].dtr_en = (uint8_t)tmp_int;
 8015978:	f889 10ef 	strb.w	r1, [r9, #239]	; 0xef
                            dev_config->serial_option[0].dsr_en = tmp_byte;
 801597c:	f889 20f0 	strb.w	r2, [r9, #240]	; 0xf0
                            init_connection_status_io(); 
 8015980:	f001 fdc0 	bl	8017504 <init_connection_status_io>
                            if(dev_config->serial_option[0].dtr_en == SEGCP_ENABLE) set_flowcontrol_dtr_pin(ON);
 8015984:	f899 00ef 	ldrb.w	r0, [r9, #239]	; 0xef
 8015988:	2801      	cmp	r0, #1
 801598a:	f47f a94b 	bne.w	8014c24 <proc_SEGCP+0x120>
 801598e:	f001 fe07 	bl	80175a0 <set_flowcontrol_dtr_pin>
 8015992:	f7ff b947 	b.w	8014c24 <proc_SEGCP+0x120>
                        tmp_long = atol(param);
 8015996:	a80a      	add	r0, sp, #40	; 0x28
 8015998:	f01a f9ea 	bl	802fd70 <atol>
                        if(tmp_long > (uint32_t)FLASH_USE_BANK_SIZE)
 801599c:	f5b0 3f40 	cmp.w	r0, #196608	; 0x30000
 80159a0:	f240 80c7 	bls.w	8015b32 <proc_SEGCP+0x102e>
                            dev_config->firmware_update.fwup_size = 0;
 80159a4:	2300      	movs	r3, #0
                            PRT_SEGCP("SEGCP_FW:ERROR:TOOBIG\r\n");
 80159a6:	f240 523a 	movw	r2, #1338	; 0x53a
 80159aa:	4639      	mov	r1, r7
 80159ac:	48c8      	ldr	r0, [pc, #800]	; (8015cd0 <proc_SEGCP+0x11cc>)
                            dev_config->firmware_update.fwup_size = 0;
 80159ae:	f889 3106 	strb.w	r3, [r9, #262]	; 0x106
 80159b2:	f889 3107 	strb.w	r3, [r9, #263]	; 0x107
 80159b6:	f889 3108 	strb.w	r3, [r9, #264]	; 0x108
 80159ba:	f889 3109 	strb.w	r3, [r9, #265]	; 0x109
                            ret |= SEGCP_RET_ERR_INVALIDPARAM;
 80159be:	f446 4605 	orr.w	r6, r6, #34048	; 0x8500
                            PRT_SEGCP("SEGCP_FW:ERROR:TOOBIG\r\n");
 80159c2:	f002 fa3f 	bl	8017e44 <WIZ_SECURE_printf>
 80159c6:	f7ff b945 	b.w	8014c54 <proc_SEGCP+0x150>
                        tmp_int = atoi(param);
 80159ca:	a80a      	add	r0, sp, #40	; 0x28
 80159cc:	f01a f9cc 	bl	802fd68 <atoi>
                        if((param_len > 3) || (tmp_int < 1) || (tmp_int > 0xFF)) ret |= SEGCP_RET_ERR_INVALIDPARAM;
 80159d0:	f1ba 0f03 	cmp.w	sl, #3
 80159d4:	f63f aa5b 	bhi.w	8014e8e <proc_SEGCP+0x38a>
 80159d8:	1e43      	subs	r3, r0, #1
 80159da:	b29b      	uxth	r3, r3
 80159dc:	2bfe      	cmp	r3, #254	; 0xfe
 80159de:	f63f aa56 	bhi.w	8014e8e <proc_SEGCP+0x38a>
                        else dev_config->network_option.tcp_rcr_val = (uint8_t)tmp_int;
 80159e2:	f889 00cc 	strb.w	r0, [r9, #204]	; 0xcc
 80159e6:	f7ff b91d 	b.w	8014c24 <proc_SEGCP+0x120>
                        if(param[0] == SEGCP_NULL)
 80159ea:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80159ee:	2b20      	cmp	r3, #32
 80159f0:	f040 8098 	bne.w	8015b24 <proc_SEGCP+0x1020>
                            dev_config->mqtt_option.user_name[0] = 0;
 80159f4:	2300      	movs	r3, #0
 80159f6:	f889 331c 	strb.w	r3, [r9, #796]	; 0x31c
 80159fa:	f7ff b913 	b.w	8014c24 <proc_SEGCP+0x120>
                        if(param[0] == SEGCP_NULL)
 80159fe:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8015a02:	2b20      	cmp	r3, #32
 8015a04:	d179      	bne.n	8015afa <proc_SEGCP+0xff6>
                            dev_config->mqtt_option.password[0] = 0;
 8015a06:	2300      	movs	r3, #0
 8015a08:	f889 341c 	strb.w	r3, [r9, #1052]	; 0x41c
 8015a0c:	f7ff b90a 	b.w	8014c24 <proc_SEGCP+0x120>
                        if(param[0] == SEGCP_NULL)
 8015a10:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8015a14:	2b20      	cmp	r3, #32
 8015a16:	d169      	bne.n	8015aec <proc_SEGCP+0xfe8>
                            dev_config->mqtt_option.client_id[0] = 0;
 8015a18:	2300      	movs	r3, #0
 8015a1a:	f889 339c 	strb.w	r3, [r9, #924]	; 0x39c
 8015a1e:	f7ff b901 	b.w	8014c24 <proc_SEGCP+0x120>
                        dev_config->mqtt_option.keepalive = atoi(param);
 8015a22:	a80a      	add	r0, sp, #40	; 0x28
 8015a24:	f01a f9a0 	bl	802fd68 <atoi>
 8015a28:	f8c9 049c 	str.w	r0, [r9, #1180]	; 0x49c
                        break;
 8015a2c:	f7ff b8fa 	b.w	8014c24 <proc_SEGCP+0x120>
                        if(param[0] == SEGCP_NULL)
 8015a30:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8015a34:	2b20      	cmp	r3, #32
 8015a36:	d152      	bne.n	8015ade <proc_SEGCP+0xfda>
                            dev_config->mqtt_option.pub_topic[0] = 0;
 8015a38:	2300      	movs	r3, #0
 8015a3a:	f889 311c 	strb.w	r3, [r9, #284]	; 0x11c
 8015a3e:	f7ff b8f1 	b.w	8014c24 <proc_SEGCP+0x120>
                        if(param[0] == SEGCP_NULL)
 8015a42:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8015a46:	2b20      	cmp	r3, #32
 8015a48:	d142      	bne.n	8015ad0 <proc_SEGCP+0xfcc>
                            dev_config->mqtt_option.sub_topic_0[0] = 0;
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	f889 319c 	strb.w	r3, [r9, #412]	; 0x19c
 8015a50:	f7ff b8e8 	b.w	8014c24 <proc_SEGCP+0x120>
                        if(param[0] == SEGCP_NULL)
 8015a54:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8015a58:	2b20      	cmp	r3, #32
 8015a5a:	d15c      	bne.n	8015b16 <proc_SEGCP+0x1012>
                            dev_config->mqtt_option.sub_topic_1[0] = 0;
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	f889 321c 	strb.w	r3, [r9, #540]	; 0x21c
 8015a62:	f7ff b8df 	b.w	8014c24 <proc_SEGCP+0x120>
                        if(param[0] == SEGCP_NULL)
 8015a66:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8015a6a:	2b20      	cmp	r3, #32
 8015a6c:	d14c      	bne.n	8015b08 <proc_SEGCP+0x1004>
                            dev_config->mqtt_option.sub_topic_2[0] = 0;
 8015a6e:	2300      	movs	r3, #0
 8015a70:	f889 329c 	strb.w	r3, [r9, #668]	; 0x29c
 8015a74:	f7ff b8d6 	b.w	8014c24 <proc_SEGCP+0x120>
                        tmp_byte = atoi(param);
 8015a78:	a80a      	add	r0, sp, #40	; 0x28
 8015a7a:	f01a f975 	bl	802fd68 <atoi>
 8015a7e:	b2c3      	uxtb	r3, r0
                        if (tmp_byte > 2)
 8015a80:	2b02      	cmp	r3, #2
                        tmp_byte = atoi(param);
 8015a82:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                        if (tmp_byte > 2)
 8015a86:	f63f aa02 	bhi.w	8014e8e <proc_SEGCP+0x38a>
                        dev_config->mqtt_option.qos = tmp_byte;
 8015a8a:	f889 34a0 	strb.w	r3, [r9, #1184]	; 0x4a0
                        break;
 8015a8e:	f7ff b8c9 	b.w	8014c24 <proc_SEGCP+0x120>
                        else if(!is_macaddr(param, ".:-", dev_config->network_common.mac)) ret |= SEGCP_RET_ERR_INVALIDPARAM;
 8015a92:	4990      	ldr	r1, [pc, #576]	; (8015cd4 <proc_SEGCP+0x11d0>)
 8015a94:	f109 0229 	add.w	r2, r9, #41	; 0x29
 8015a98:	a80a      	add	r0, sp, #40	; 0x28
 8015a9a:	f000 fd53 	bl	8016544 <is_macaddr>
 8015a9e:	2800      	cmp	r0, #0
 8015aa0:	f47f a8c0 	bne.w	8014c24 <proc_SEGCP+0x120>
 8015aa4:	f7ff b9f3 	b.w	8014e8e <proc_SEGCP+0x38a>
                            ret |= SEGCP_RET_ERR_NOPRIVILEGE;
 8015aa8:	f446 4606 	orr.w	r6, r6, #34304	; 0x8600
 8015aac:	f7ff b8b7 	b.w	8014c1e <proc_SEGCP+0x11a>
                            sprintf(trep, "%d.%d.%d.%d", dev_config->network_connection[0].remote_ip[0],
 8015ab0:	f899 1044 	ldrb.w	r1, [r9, #68]	; 0x44
 8015ab4:	f899 3042 	ldrb.w	r3, [r9, #66]	; 0x42
 8015ab8:	f899 2041 	ldrb.w	r2, [r9, #65]	; 0x41
 8015abc:	9101      	str	r1, [sp, #4]
 8015abe:	f899 1043 	ldrb.w	r1, [r9, #67]	; 0x43
 8015ac2:	4650      	mov	r0, sl
 8015ac4:	9100      	str	r1, [sp, #0]
 8015ac6:	4984      	ldr	r1, [pc, #528]	; (8015cd8 <proc_SEGCP+0x11d4>)
 8015ac8:	f01a fbce 	bl	8030268 <siprintf>
 8015acc:	f7ff b8a3 	b.w	8014c16 <proc_SEGCP+0x112>
                            sprintf(dev_config->mqtt_option.sub_topic_0, "%s", param);
 8015ad0:	a90a      	add	r1, sp, #40	; 0x28
 8015ad2:	f509 70ce 	add.w	r0, r9, #412	; 0x19c
 8015ad6:	f01a fbfd 	bl	80302d4 <strcpy>
 8015ada:	f7ff b8a3 	b.w	8014c24 <proc_SEGCP+0x120>
                            sprintf(dev_config->mqtt_option.pub_topic, "%s", param);
 8015ade:	a90a      	add	r1, sp, #40	; 0x28
 8015ae0:	f509 708e 	add.w	r0, r9, #284	; 0x11c
 8015ae4:	f01a fbf6 	bl	80302d4 <strcpy>
 8015ae8:	f7ff b89c 	b.w	8014c24 <proc_SEGCP+0x120>
                            sprintf(dev_config->mqtt_option.client_id, "%s", param);
 8015aec:	a90a      	add	r1, sp, #40	; 0x28
 8015aee:	f509 7067 	add.w	r0, r9, #924	; 0x39c
 8015af2:	f01a fbef 	bl	80302d4 <strcpy>
 8015af6:	f7ff b895 	b.w	8014c24 <proc_SEGCP+0x120>
                            sprintf(dev_config->mqtt_option.password, "%s", param);
 8015afa:	a90a      	add	r1, sp, #40	; 0x28
 8015afc:	f209 401c 	addw	r0, r9, #1052	; 0x41c
 8015b00:	f01a fbe8 	bl	80302d4 <strcpy>
 8015b04:	f7ff b88e 	b.w	8014c24 <proc_SEGCP+0x120>
                            sprintf(dev_config->mqtt_option.sub_topic_2, "%s", param);
 8015b08:	a90a      	add	r1, sp, #40	; 0x28
 8015b0a:	f509 7027 	add.w	r0, r9, #668	; 0x29c
 8015b0e:	f01a fbe1 	bl	80302d4 <strcpy>
 8015b12:	f7ff b887 	b.w	8014c24 <proc_SEGCP+0x120>
                            sprintf(dev_config->mqtt_option.sub_topic_1, "%s", param);
 8015b16:	a90a      	add	r1, sp, #40	; 0x28
 8015b18:	f509 7007 	add.w	r0, r9, #540	; 0x21c
 8015b1c:	f01a fbda 	bl	80302d4 <strcpy>
 8015b20:	f7ff b880 	b.w	8014c24 <proc_SEGCP+0x120>
                            sprintf(dev_config->mqtt_option.user_name, "%s", param);
 8015b24:	a90a      	add	r1, sp, #40	; 0x28
 8015b26:	f509 7047 	add.w	r0, r9, #796	; 0x31c
 8015b2a:	f01a fbd3 	bl	80302d4 <strcpy>
 8015b2e:	f7ff b879 	b.w	8014c24 <proc_SEGCP+0x120>
                            dev_config->firmware_update.fwup_flag = SEGCP_ENABLE;
 8015b32:	2301      	movs	r3, #1
                            sprintf(trep,"FW%d.%d.%d.%d:%d\r\n", dev_config->network_common.local_ip[0],
 8015b34:	f24c 3152 	movw	r1, #50002	; 0xc352
 8015b38:	f899 202f 	ldrb.w	r2, [r9, #47]	; 0x2f
                            dev_config->firmware_update.fwup_size = tmp_long;
 8015b3c:	f8c9 0106 	str.w	r0, [r9, #262]	; 0x106
                            dev_config->firmware_update.fwup_flag = SEGCP_ENABLE;
 8015b40:	f889 3103 	strb.w	r3, [r9, #259]	; 0x103
                            sprintf(trep,"FW%d.%d.%d.%d:%d\r\n", dev_config->network_common.local_ip[0],
 8015b44:	f899 3030 	ldrb.w	r3, [r9, #48]	; 0x30
 8015b48:	9102      	str	r1, [sp, #8]
 8015b4a:	f899 1032 	ldrb.w	r1, [r9, #50]	; 0x32
 8015b4e:	4640      	mov	r0, r8
 8015b50:	9101      	str	r1, [sp, #4]
 8015b52:	f899 1031 	ldrb.w	r1, [r9, #49]	; 0x31
                            ret |= SEGCP_RET_FWUP_BANK;
 8015b56:	f046 0643 	orr.w	r6, r6, #67	; 0x43
                            sprintf(trep,"FW%d.%d.%d.%d:%d\r\n", dev_config->network_common.local_ip[0],
 8015b5a:	9100      	str	r1, [sp, #0]
 8015b5c:	495f      	ldr	r1, [pc, #380]	; (8015cdc <proc_SEGCP+0x11d8>)
 8015b5e:	f01a fb83 	bl	8030268 <siprintf>
                            process_socket_termination(SEG_DATA0_SOCK, 100);
 8015b62:	2164      	movs	r1, #100	; 0x64
 8015b64:	2000      	movs	r0, #0
 8015b66:	f002 fb1f 	bl	80181a8 <process_socket_termination>
                            PRT_SEGCP("SEGCP_FW:OK\r\n");
 8015b6a:	f240 5249 	movw	r2, #1353	; 0x549
 8015b6e:	4639      	mov	r1, r7
 8015b70:	485b      	ldr	r0, [pc, #364]	; (8015ce0 <proc_SEGCP+0x11dc>)
 8015b72:	f002 f967 	bl	8017e44 <WIZ_SECURE_printf>
 8015b76:	f7ff b855 	b.w	8014c24 <proc_SEGCP+0x120>
                            dev_config->network_connection[0].dns_use = SEGCP_DISABLE;
 8015b7a:	2200      	movs	r2, #0
                            dev_config->network_connection[0].remote_ip[0] = tmp_ip[0];
 8015b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
                            dev_config->network_connection[0].dns_use = SEGCP_DISABLE;
 8015b7e:	f889 2046 	strb.w	r2, [r9, #70]	; 0x46
                            dev_config->network_connection[0].remote_ip[0] = tmp_ip[0];
 8015b82:	f8c9 3041 	str.w	r3, [r9, #65]	; 0x41
                            strcpy(dev_config->network_connection[0].dns_domain_name, param);
 8015b86:	a90a      	add	r1, sp, #40	; 0x28
 8015b88:	f109 0047 	add.w	r0, r9, #71	; 0x47
 8015b8c:	f01a fba2 	bl	80302d4 <strcpy>
 8015b90:	f7ff b848 	b.w	8014c24 <proc_SEGCP+0x120>
                                    ret |= SEGCP_RET_ERR_INVALIDPARAM;
 8015b94:	f446 4605 	orr.w	r6, r6, #34048	; 0x8500
                            PRT_SEGCP("g_pkey_buf = \r\n%s\r\n", g_temp_buf);
 8015b98:	f240 522d 	movw	r2, #1325	; 0x52d
 8015b9c:	4b51      	ldr	r3, [pc, #324]	; (8015ce4 <proc_SEGCP+0x11e0>)
 8015b9e:	4952      	ldr	r1, [pc, #328]	; (8015ce8 <proc_SEGCP+0x11e4>)
 8015ba0:	4852      	ldr	r0, [pc, #328]	; (8015cec <proc_SEGCP+0x11e8>)
 8015ba2:	f002 f94f 	bl	8017e44 <WIZ_SECURE_printf>
                            return ret;
 8015ba6:	f7ff b84e 	b.w	8014c46 <proc_SEGCP+0x142>
                                    ret |= SEGCP_RET_ERR_INVALIDPARAM;
 8015baa:	f446 4605 	orr.w	r6, r6, #34048	; 0x8500
 8015bae:	f7ff b84a 	b.w	8014c46 <proc_SEGCP+0x142>
                                    ret |= SEGCP_RET_ERR_INVALIDPARAM;
 8015bb2:	f446 4605 	orr.w	r6, r6, #34048	; 0x8500
                            PRT_SEGCP("g_clica_buf = \r\n%s\r\n", g_temp_buf);
 8015bb6:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8015bba:	4b4a      	ldr	r3, [pc, #296]	; (8015ce4 <proc_SEGCP+0x11e0>)
 8015bbc:	494a      	ldr	r1, [pc, #296]	; (8015ce8 <proc_SEGCP+0x11e4>)
 8015bbe:	484c      	ldr	r0, [pc, #304]	; (8015cf0 <proc_SEGCP+0x11ec>)
 8015bc0:	f002 f940 	bl	8017e44 <WIZ_SECURE_printf>
                            return ret;
 8015bc4:	f7ff b83f 	b.w	8014c46 <proc_SEGCP+0x142>
                                strcpy(dev_config->network_connection[0].dns_domain_name, param);
 8015bc8:	a90a      	add	r1, sp, #40	; 0x28
 8015bca:	f109 0047 	add.w	r0, r9, #71	; 0x47
 8015bce:	f01a fb81 	bl	80302d4 <strcpy>
 8015bd2:	f7ff b827 	b.w	8014c24 <proc_SEGCP+0x120>
    while(treq)
 8015bd6:	4601      	mov	r1, r0
    uint16_t ret = 0;
 8015bd8:	4606      	mov	r6, r0
 8015bda:	f7ff b831 	b.w	8014c40 <proc_SEGCP+0x13c>
                            else sprintf(dev_config->config_common.pw_search, "%s", param);
 8015bde:	a90a      	add	r1, sp, #40	; 0x28
 8015be0:	f109 001f 	add.w	r0, r9, #31
 8015be4:	f01a fb76 	bl	80302d4 <strcpy>
 8015be8:	f7ff b81c 	b.w	8014c24 <proc_SEGCP+0x120>
                            else sprintf(dev_config->tcp_option[0].pw_connect, "%s", param);
 8015bec:	a90a      	add	r1, sp, #40	; 0x28
 8015bee:	f109 00d6 	add.w	r0, r9, #214	; 0xd6
 8015bf2:	f01a fb6f 	bl	80302d4 <strcpy>
 8015bf6:	f7ff b815 	b.w	8014c24 <proc_SEGCP+0x120>
                                sprintf(dev_config->device_common.device_name, "%s", param);
 8015bfa:	a90a      	add	r1, sp, #40	; 0x28
 8015bfc:	f109 0006 	add.w	r0, r9, #6
 8015c00:	f01a fb68 	bl	80302d4 <strcpy>
 8015c04:	f7ff b80e 	b.w	8014c24 <proc_SEGCP+0x120>
                                if((tmp_byte != flow_rtsonly) && (tmp_byte != flow_reverserts))
 8015c08:	1ec3      	subs	r3, r0, #3
 8015c0a:	2b01      	cmp	r3, #1
 8015c0c:	f67f ad92 	bls.w	8015734 <proc_SEGCP+0xc30>
                                    dev_config->serial_option[0].flow_control = flow_none;
 8015c10:	2300      	movs	r3, #0
 8015c12:	f889 30ee 	strb.w	r3, [r9, #238]	; 0xee
 8015c16:	f7ff b805 	b.w	8014c24 <proc_SEGCP+0x120>
                sprintf(trep,"%s:%s\r\n",tbSEGCPERR[((ret-SEGCP_RET_ERR) >> 8)],(cmdnum!=SEGCP_UNKNOWN)? tbSEGCPCMD[cmdnum] : treq);
 8015c1a:	f5a6 4200 	sub.w	r2, r6, #32768	; 0x8000
 8015c1e:	4935      	ldr	r1, [pc, #212]	; (8015cf4 <proc_SEGCP+0x11f0>)
                treq[2] = 0;
 8015c20:	70a3      	strb	r3, [r4, #2]
                sprintf(trep,"%s:%s\r\n",tbSEGCPERR[((ret-SEGCP_RET_ERR) >> 8)],(cmdnum!=SEGCP_UNKNOWN)? tbSEGCPCMD[cmdnum] : treq);
 8015c22:	1213      	asrs	r3, r2, #8
 8015c24:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8015c28:	f7ff b822 	b.w	8014c70 <proc_SEGCP+0x16c>
                                if (*tmp_ptr == '\n')
 8015c2c:	7f43      	ldrb	r3, [r0, #29]
 8015c2e:	2b0a      	cmp	r3, #10
 8015c30:	d049      	beq.n	8015cc6 <proc_SEGCP+0x11c2>
                                else if (*tmp_ptr == '\r')
 8015c32:	2b0d      	cmp	r3, #13
                                    *(tmp_ptr) = '\r';
 8015c34:	bf1f      	itttt	ne
 8015c36:	220d      	movne	r2, #13
                                    *(tmp_ptr+1) = '\n';
 8015c38:	230a      	movne	r3, #10
                                    *(tmp_ptr) = '\r';
 8015c3a:	7742      	strbne	r2, [r0, #29]
                                    *(tmp_ptr+1) = '\n';
 8015c3c:	7783      	strbne	r3, [r0, #30]
                                    tmp_ptr+=2;
 8015c3e:	301f      	adds	r0, #31
                                g_temp_buf[dev_config->ssl_option.pkey_len] = NULL;
 8015c40:	2500      	movs	r5, #0
                                dev_config->ssl_option.pkey_len = tmp_ptr - g_temp_buf;
 8015c42:	4c28      	ldr	r4, [pc, #160]	; (8015ce4 <proc_SEGCP+0x11e0>)
 8015c44:	1b00      	subs	r0, r0, r4
 8015c46:	f8c9 0118 	str.w	r0, [r9, #280]	; 0x118
                                g_temp_buf[dev_config->ssl_option.pkey_len] = NULL;
 8015c4a:	5425      	strb	r5, [r4, r0]
                                ret_2 = check_pkey(g_temp_buf, dev_config->ssl_option.pkey_len);
 8015c4c:	f8d9 1118 	ldr.w	r1, [r9, #280]	; 0x118
 8015c50:	4620      	mov	r0, r4
 8015c52:	f009 f821 	bl	801ec98 <check_pkey>
                                if (ret_2 < 0)
 8015c56:	42a8      	cmp	r0, r5
 8015c58:	db9c      	blt.n	8015b94 <proc_SEGCP+0x1090>
                                    PRT_INFO("dev_config->ssl_option.pkey_len = %d\r\n", dev_config->ssl_option.pkey_len);
 8015c5a:	f8d9 2118 	ldr.w	r2, [r9, #280]	; 0x118
 8015c5e:	4922      	ldr	r1, [pc, #136]	; (8015ce8 <proc_SEGCP+0x11e4>)
 8015c60:	4825      	ldr	r0, [pc, #148]	; (8015cf8 <proc_SEGCP+0x11f4>)
 8015c62:	f002 f8ef 	bl	8017e44 <WIZ_SECURE_printf>
                                    erase_storage(STORAGE_CONFIG);
 8015c66:	2001      	movs	r0, #1
 8015c68:	f001 fd4a 	bl	8017700 <erase_storage>
                                    ret_2 = write_storage(STORAGE_CONFIG, 0, (uint8_t *)dev_config, sizeof(DevConfig));
 8015c6c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8015c70:	4629      	mov	r1, r5
 8015c72:	464a      	mov	r2, r9
 8015c74:	2001      	movs	r0, #1
 8015c76:	f001 fd13 	bl	80176a0 <write_storage>
                                    PRT_INFO("STORAGE_CONFIG write_storage ret = %d\r\n", ret_2);
 8015c7a:	491b      	ldr	r1, [pc, #108]	; (8015ce8 <proc_SEGCP+0x11e4>)
                                    ret_2 = write_storage(STORAGE_CONFIG, 0, (uint8_t *)dev_config, sizeof(DevConfig));
 8015c7c:	4602      	mov	r2, r0
                                    PRT_INFO("STORAGE_CONFIG write_storage ret = %d\r\n", ret_2);
 8015c7e:	481f      	ldr	r0, [pc, #124]	; (8015cfc <proc_SEGCP+0x11f8>)
 8015c80:	f002 f8e0 	bl	8017e44 <WIZ_SECURE_printf>
                                    ret_2 = SECURE_FLASH_WRITE(STORAGE_PKEY, (uint8_t *)g_temp_buf, dev_config->ssl_option.pkey_len + 1);
 8015c84:	f8d9 2118 	ldr.w	r2, [r9, #280]	; 0x118
 8015c88:	4621      	mov	r1, r4
 8015c8a:	3201      	adds	r2, #1
 8015c8c:	b292      	uxth	r2, r2
 8015c8e:	200b      	movs	r0, #11
 8015c90:	f01b fd2a 	bl	80316e8 <__SECURE_FLASH_WRITE_veneer>
                                    PRT_INFO("SECURE_FLASH_WRITE ret = %d\r\n", ret_2);
 8015c94:	4914      	ldr	r1, [pc, #80]	; (8015ce8 <proc_SEGCP+0x11e4>)
                                    ret_2 = SECURE_FLASH_WRITE(STORAGE_PKEY, (uint8_t *)g_temp_buf, dev_config->ssl_option.pkey_len + 1);
 8015c96:	4602      	mov	r2, r0
                                    PRT_INFO("SECURE_FLASH_WRITE ret = %d\r\n", ret_2);
 8015c98:	4819      	ldr	r0, [pc, #100]	; (8015d00 <proc_SEGCP+0x11fc>)
 8015c9a:	f002 f8d3 	bl	8017e44 <WIZ_SECURE_printf>
                                    memcpy(trep, tbSEGCPCMD[cmdnum], SEGCP_CMD_MAX);
 8015c9e:	4b19      	ldr	r3, [pc, #100]	; (8015d04 <proc_SEGCP+0x1200>)
 8015ca0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8015ca4:	881b      	ldrh	r3, [r3, #0]
 8015ca6:	f828 3b02 	strh.w	r3, [r8], #2
                                    strcat(trep, SEGCP_DELIMETER);
 8015caa:	4640      	mov	r0, r8
 8015cac:	f7fa face 	bl	801024c <strlen>
 8015cb0:	4b15      	ldr	r3, [pc, #84]	; (8015d08 <proc_SEGCP+0x1204>)
 8015cb2:	eb08 0200 	add.w	r2, r8, r0
 8015cb6:	8819      	ldrh	r1, [r3, #0]
 8015cb8:	789b      	ldrb	r3, [r3, #2]
 8015cba:	f828 1000 	strh.w	r1, [r8, r0]
 8015cbe:	7093      	strb	r3, [r2, #2]
 8015cc0:	e76a      	b.n	8015b98 <proc_SEGCP+0x1094>
                                    tmp_ptr++;
 8015cc2:	301a      	adds	r0, #26
 8015cc4:	e452      	b.n	801556c <proc_SEGCP+0xa68>
                                    tmp_ptr++;
 8015cc6:	301e      	adds	r0, #30
 8015cc8:	e7ba      	b.n	8015c40 <proc_SEGCP+0x113c>
                                    tmp_ptr++;
 8015cca:	301a      	adds	r0, #26
 8015ccc:	e4cb      	b.n	8015666 <proc_SEGCP+0xb62>
 8015cce:	bf00      	nop
 8015cd0:	08031fcc 	.word	0x08031fcc
 8015cd4:	08031e44 	.word	0x08031e44
 8015cd8:	08031dc4 	.word	0x08031dc4
 8015cdc:	08031ff4 	.word	0x08031ff4
 8015ce0:	08032008 	.word	0x08032008
 8015ce4:	2001bdb8 	.word	0x2001bdb8
 8015ce8:	08032390 	.word	0x08032390
 8015cec:	08031fa8 	.word	0x08031fa8
 8015cf0:	08031ed0 	.word	0x08031ed0
 8015cf4:	20018178 	.word	0x20018178
 8015cf8:	08031f14 	.word	0x08031f14
 8015cfc:	08031f48 	.word	0x08031f48
 8015d00:	08031f7c 	.word	0x08031f7c
 8015d04:	20018058 	.word	0x20018058
 8015d08:	08032fb8 	.word	0x08032fb8

08015d0c <proc_SEGCP_udp>:

uint16_t proc_SEGCP_udp(uint8_t* segcp_req, uint8_t* segcp_rep)
{
 8015d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d10:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 8015d14:	4605      	mov	r5, r0
 8015d16:	460f      	mov	r7, r1
    DevConfig *dev_config = get_DevConfig_pointer();
 8015d18:	f7fe f98c 	bl	8014034 <get_DevConfig_pointer>
    
    uint8_t tpar[SEGCP_PARAM_MAX*2];
    uint8_t* treq;
    uint8_t* trep;
    
    gSEGCPPRIVILEGE = SEGCP_PRIVILEGE_CLR;
 8015d1c:	2400      	movs	r4, #0
 8015d1e:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 8015f18 <proc_SEGCP_udp+0x20c>
    DevConfig *dev_config = get_DevConfig_pointer();
 8015d22:	4606      	mov	r6, r0
    switch(getSn_SR(SEGCP_UDP_SOCK))
 8015d24:	f240 5003 	movw	r0, #1283	; 0x503
    gSEGCPPRIVILEGE = SEGCP_PRIVILEGE_CLR;
 8015d28:	f888 4000 	strb.w	r4, [r8]
    switch(getSn_SR(SEGCP_UDP_SOCK))
 8015d2c:	f004 ff20 	bl	801ab70 <WIZCHIP_READ>
 8015d30:	b160      	cbz	r0, 8015d4c <proc_SEGCP_udp+0x40>
 8015d32:	2822      	cmp	r0, #34	; 0x22
 8015d34:	d105      	bne.n	8015d42 <proc_SEGCP_udp+0x36>
    {
        case SOCK_UDP:
            if((len = getSn_RX_RSR(SEGCP_UDP_SOCK)) > 0)
 8015d36:	2001      	movs	r0, #1
 8015d38:	f004 ffb2 	bl	801aca0 <getSn_RX_RSR>
 8015d3c:	4681      	mov	r9, r0
 8015d3e:	b990      	cbnz	r0, 8015d66 <proc_SEGCP_udp+0x5a>
    uint16_t ret = 0;
 8015d40:	2400      	movs	r4, #0
                ;//if(dev_config->serial_common.serial_debug_en) printf(" > SEGCP:UDP:STARTED\r\n");
            }
            break;
    }
    return ret;
}
 8015d42:	4620      	mov	r0, r4
 8015d44:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228
 8015d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if(socket(SEGCP_UDP_SOCK, Sn_MR_UDP, DEVICE_SEGCP_PORT, 0x00) == SEGCP_UDP_SOCK)
 8015d4c:	4603      	mov	r3, r0
    uint16_t ret = 0;
 8015d4e:	461c      	mov	r4, r3
            if(socket(SEGCP_UDP_SOCK, Sn_MR_UDP, DEVICE_SEGCP_PORT, 0x00) == SEGCP_UDP_SOCK)
 8015d50:	f24c 3251 	movw	r2, #50001	; 0xc351
 8015d54:	2102      	movs	r1, #2
 8015d56:	2001      	movs	r0, #1
 8015d58:	f005 f982 	bl	801b060 <socket>
}
 8015d5c:	4620      	mov	r0, r4
 8015d5e:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228
 8015d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                PRT_SEGCP("len = getSn_RX_RSR = %d\r\n", len);
 8015d66:	4603      	mov	r3, r0
 8015d68:	f240 5297 	movw	r2, #1431	; 0x597
 8015d6c:	4960      	ldr	r1, [pc, #384]	; (8015ef0 <proc_SEGCP_udp+0x1e4>)
 8015d6e:	4861      	ldr	r0, [pc, #388]	; (8015ef4 <proc_SEGCP_udp+0x1e8>)
                len = recvfrom(SEGCP_UDP_SOCK, treq, len, destip, &destport);
 8015d70:	f10d 0a22 	add.w	sl, sp, #34	; 0x22
                PRT_SEGCP("len = getSn_RX_RSR = %d\r\n", len);
 8015d74:	f002 f866 	bl	8017e44 <WIZ_SECURE_printf>
                len = recvfrom(SEGCP_UDP_SOCK, treq, len, destip, &destport);
 8015d78:	464a      	mov	r2, r9
 8015d7a:	4629      	mov	r1, r5
 8015d7c:	ab09      	add	r3, sp, #36	; 0x24
 8015d7e:	2001      	movs	r0, #1
 8015d80:	f8cd a000 	str.w	sl, [sp]
 8015d84:	f005 fe96 	bl	801bab4 <recvfrom>
                PRT_SEGCP("len = recvfrom = %d\r\n", len);
 8015d88:	fa1f f980 	uxth.w	r9, r0
 8015d8c:	464b      	mov	r3, r9
 8015d8e:	f240 529b 	movw	r2, #1435	; 0x59b
 8015d92:	4957      	ldr	r1, [pc, #348]	; (8015ef0 <proc_SEGCP_udp+0x1e4>)
 8015d94:	4858      	ldr	r0, [pc, #352]	; (8015ef8 <proc_SEGCP_udp+0x1ec>)
 8015d96:	f002 f855 	bl	8017e44 <WIZ_SECURE_printf>
                if(SEGCP_MA == parse_SEGCP(treq, tpar))
 8015d9a:	4628      	mov	r0, r5
                treq[len] = 0;
 8015d9c:	f805 4009 	strb.w	r4, [r5, r9]
                if(SEGCP_MA == parse_SEGCP(treq, tpar))
 8015da0:	a90a      	add	r1, sp, #40	; 0x28
 8015da2:	f7fe fdfb 	bl	801499c <parse_SEGCP>
 8015da6:	2820      	cmp	r0, #32
 8015da8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015dac:	d1c8      	bne.n	8015d40 <proc_SEGCP_udp+0x34>
                    if(!memcmp(tpar,"\xFF\xFF\xFF\xFF\xFF\xFF", 6))
 8015dae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015db0:	3201      	adds	r2, #1
 8015db2:	f000 808c 	beq.w	8015ece <proc_SEGCP_udp+0x1c2>
                    else if(!memcmp(tpar, dev_config->network_common.mac, sizeof(dev_config->network_common.mac)))
 8015db6:	2206      	movs	r2, #6
 8015db8:	f106 0129 	add.w	r1, r6, #41	; 0x29
 8015dbc:	a80a      	add	r0, sp, #40	; 0x28
 8015dbe:	f01a f81d 	bl	802fdfc <memcmp>
 8015dc2:	2800      	cmp	r0, #0
 8015dc4:	d1bc      	bne.n	8015d40 <proc_SEGCP_udp+0x34>
                        gSEGCPPRIVILEGE |= (SEGCP_PRIVILEGE_SET | SEGCP_PRIVILEGE_WRITE);
 8015dc6:	f898 3000 	ldrb.w	r3, [r8]
 8015dca:	f063 0377 	orn	r3, r3, #119	; 0x77
 8015dce:	f888 3000 	strb.w	r3, [r8]
                        sprintf(trep,"%s%c%c%c%c%c%c\r\n",tbSEGCPCMD[SEGCP_MA],
 8015dd2:	f896 202e 	ldrb.w	r2, [r6, #46]	; 0x2e
 8015dd6:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 8015dda:	9204      	str	r2, [sp, #16]
 8015ddc:	f896 102d 	ldrb.w	r1, [r6, #45]	; 0x2d
 8015de0:	4a46      	ldr	r2, [pc, #280]	; (8015efc <proc_SEGCP_udp+0x1f0>)
 8015de2:	9103      	str	r1, [sp, #12]
 8015de4:	f896 102c 	ldrb.w	r1, [r6, #44]	; 0x2c
 8015de8:	4638      	mov	r0, r7
 8015dea:	9102      	str	r1, [sp, #8]
 8015dec:	f896 102b 	ldrb.w	r1, [r6, #43]	; 0x2b
                        treq += 10;
 8015df0:	350a      	adds	r5, #10
                        sprintf(trep,"%s%c%c%c%c%c%c\r\n",tbSEGCPCMD[SEGCP_MA],
 8015df2:	9101      	str	r1, [sp, #4]
 8015df4:	f896 102a 	ldrb.w	r1, [r6, #42]	; 0x2a
 8015df8:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8015dfc:	9100      	str	r1, [sp, #0]
 8015dfe:	4940      	ldr	r1, [pc, #256]	; (8015f00 <proc_SEGCP_udp+0x1f4>)
 8015e00:	f01a fa32 	bl	8030268 <siprintf>
                        if(SEGCP_PW == parse_SEGCP(treq, tpar))
 8015e04:	4628      	mov	r0, r5
 8015e06:	a90a      	add	r1, sp, #40	; 0x28
 8015e08:	f7fe fdc8 	bl	801499c <parse_SEGCP>
 8015e0c:	2821      	cmp	r0, #33	; 0x21
 8015e0e:	d197      	bne.n	8015d40 <proc_SEGCP_udp+0x34>
                            if((tpar[0] == SEGCP_NULL && dev_config->config_common.pw_search[0] == 0) || !strcmp(tpar, dev_config->config_common.pw_search))
 8015e10:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8015e14:	2b20      	cmp	r3, #32
 8015e16:	d066      	beq.n	8015ee6 <proc_SEGCP_udp+0x1da>
 8015e18:	f106 011f 	add.w	r1, r6, #31
 8015e1c:	a80a      	add	r0, sp, #40	; 0x28
 8015e1e:	f7fa fa0b 	bl	8010238 <strcmp>
 8015e22:	2800      	cmp	r0, #0
 8015e24:	d18c      	bne.n	8015d40 <proc_SEGCP_udp+0x34>
                                memcpy(trep,treq, strlen(tpar)+4);  // "PWxxxx\r\n"
 8015e26:	a80a      	add	r0, sp, #40	; 0x28
 8015e28:	f7fa fa10 	bl	801024c <strlen>
 8015e2c:	4604      	mov	r4, r0
                        trep += 10;
 8015e2e:	f107 000a 	add.w	r0, r7, #10
                                memcpy(trep,treq, strlen(tpar)+4);  // "PWxxxx\r\n"
 8015e32:	3404      	adds	r4, #4
                                trep += (strlen(tpar) + 4);
 8015e34:	1906      	adds	r6, r0, r4
                                memcpy(trep,treq, strlen(tpar)+4);  // "PWxxxx\r\n"
 8015e36:	4622      	mov	r2, r4
 8015e38:	4629      	mov	r1, r5
 8015e3a:	f019 ffed 	bl	802fe18 <memcpy>
                                ret = proc_SEGCP(treq,trep);
 8015e3e:	4631      	mov	r1, r6
 8015e40:	1928      	adds	r0, r5, r4
 8015e42:	f7fe fe5f 	bl	8014b04 <proc_SEGCP>
 8015e46:	4604      	mov	r4, r0
                                sendto(SEGCP_UDP_SOCK, segcp_rep, 14+strlen(tpar)+strlen(trep), "\xFF\xFF\xFF\xFF", destport);
 8015e48:	a80a      	add	r0, sp, #40	; 0x28
 8015e4a:	f7fa f9ff 	bl	801024c <strlen>
 8015e4e:	4605      	mov	r5, r0
 8015e50:	4630      	mov	r0, r6
 8015e52:	f7fa f9fb 	bl	801024c <strlen>
 8015e56:	f8ba 3000 	ldrh.w	r3, [sl]
 8015e5a:	4428      	add	r0, r5
 8015e5c:	f100 020e 	add.w	r2, r0, #14
 8015e60:	4639      	mov	r1, r7
 8015e62:	b292      	uxth	r2, r2
 8015e64:	9300      	str	r3, [sp, #0]
 8015e66:	2001      	movs	r0, #1
 8015e68:	4b26      	ldr	r3, [pc, #152]	; (8015f04 <proc_SEGCP_udp+0x1f8>)
 8015e6a:	f005 fd2b 	bl	801b8c4 <sendto>
                                PRT_SEGCP("tpar_len = %d, trep_len = %d\r\n", strlen(tpar), strlen(trep));
 8015e6e:	a80a      	add	r0, sp, #40	; 0x28
 8015e70:	f7fa f9ec 	bl	801024c <strlen>
 8015e74:	4603      	mov	r3, r0
 8015e76:	4630      	mov	r0, r6
 8015e78:	9307      	str	r3, [sp, #28]
 8015e7a:	f7fa f9e7 	bl	801024c <strlen>
 8015e7e:	9b07      	ldr	r3, [sp, #28]
 8015e80:	9000      	str	r0, [sp, #0]
 8015e82:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8015e86:	491a      	ldr	r1, [pc, #104]	; (8015ef0 <proc_SEGCP_udp+0x1e4>)
 8015e88:	481f      	ldr	r0, [pc, #124]	; (8015f08 <proc_SEGCP_udp+0x1fc>)
 8015e8a:	f001 ffdb 	bl	8017e44 <WIZ_SECURE_printf>
                                PRT_SEGCP("tpar = %s, trep = %s\r\n", tpar, trep);
 8015e8e:	ab0a      	add	r3, sp, #40	; 0x28
 8015e90:	f240 52c2 	movw	r2, #1474	; 0x5c2
 8015e94:	4916      	ldr	r1, [pc, #88]	; (8015ef0 <proc_SEGCP_udp+0x1e4>)
 8015e96:	481d      	ldr	r0, [pc, #116]	; (8015f0c <proc_SEGCP_udp+0x200>)
 8015e98:	9600      	str	r6, [sp, #0]
 8015e9a:	f001 ffd3 	bl	8017e44 <WIZ_SECURE_printf>
                                PRT_SEGCP("send to len = %d\r\n", 14+strlen(tpar)+strlen(trep));
 8015e9e:	a80a      	add	r0, sp, #40	; 0x28
 8015ea0:	f7fa f9d4 	bl	801024c <strlen>
 8015ea4:	4605      	mov	r5, r0
 8015ea6:	4630      	mov	r0, r6
 8015ea8:	f7fa f9d0 	bl	801024c <strlen>
 8015eac:	4428      	add	r0, r5
 8015eae:	f100 030e 	add.w	r3, r0, #14
 8015eb2:	f240 52c3 	movw	r2, #1475	; 0x5c3
 8015eb6:	490e      	ldr	r1, [pc, #56]	; (8015ef0 <proc_SEGCP_udp+0x1e4>)
 8015eb8:	4815      	ldr	r0, [pc, #84]	; (8015f10 <proc_SEGCP_udp+0x204>)
 8015eba:	f001 ffc3 	bl	8017e44 <WIZ_SECURE_printf>
                                PRT_SEGCP(">> strtok: %s\r\n", segcp_rep);
 8015ebe:	463b      	mov	r3, r7
 8015ec0:	f240 52c4 	movw	r2, #1476	; 0x5c4
 8015ec4:	490a      	ldr	r1, [pc, #40]	; (8015ef0 <proc_SEGCP_udp+0x1e4>)
 8015ec6:	4813      	ldr	r0, [pc, #76]	; (8015f14 <proc_SEGCP_udp+0x208>)
 8015ec8:	f001 ffbc 	bl	8017e44 <WIZ_SECURE_printf>
 8015ecc:	e739      	b.n	8015d42 <proc_SEGCP_udp+0x36>
                    if(!memcmp(tpar,"\xFF\xFF\xFF\xFF\xFF\xFF", 6))
 8015ece:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8015ed2:	429a      	cmp	r2, r3
 8015ed4:	f47f af6f 	bne.w	8015db6 <proc_SEGCP_udp+0xaa>
                        gSEGCPPRIVILEGE |= (SEGCP_PRIVILEGE_SET | SEGCP_PRIVILEGE_READ);
 8015ed8:	f898 3000 	ldrb.w	r3, [r8]
 8015edc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015ee0:	f888 3000 	strb.w	r3, [r8]
 8015ee4:	e775      	b.n	8015dd2 <proc_SEGCP_udp+0xc6>
                            if((tpar[0] == SEGCP_NULL && dev_config->config_common.pw_search[0] == 0) || !strcmp(tpar, dev_config->config_common.pw_search))
 8015ee6:	7ff3      	ldrb	r3, [r6, #31]
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d09c      	beq.n	8015e26 <proc_SEGCP_udp+0x11a>
 8015eec:	e794      	b.n	8015e18 <proc_SEGCP_udp+0x10c>
 8015eee:	bf00      	nop
 8015ef0:	0803239c 	.word	0x0803239c
 8015ef4:	08032074 	.word	0x08032074
 8015ef8:	080320a0 	.word	0x080320a0
 8015efc:	20018058 	.word	0x20018058
 8015f00:	080320d0 	.word	0x080320d0
 8015f04:	080320e4 	.word	0x080320e4
 8015f08:	080320ec 	.word	0x080320ec
 8015f0c:	0803211c 	.word	0x0803211c
 8015f10:	08032144 	.word	0x08032144
 8015f14:	08032168 	.word	0x08032168
 8015f18:	20018896 	.word	0x20018896

08015f1c <proc_SEGCP_tcp>:


uint16_t proc_SEGCP_tcp(uint8_t* segcp_req, uint8_t* segcp_rep)
{
 8015f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f20:	b0c8      	sub	sp, #288	; 0x120
 8015f22:	460e      	mov	r6, r1
 8015f24:	4607      	mov	r7, r0
    DevConfig *dev_config = get_DevConfig_pointer();
 8015f26:	f7fe f885 	bl	8014034 <get_DevConfig_pointer>
 8015f2a:	4605      	mov	r5, r0
    
    uint8_t tpar[SEGCP_PARAM_MAX+1];
    uint8_t * treq;
    uint8_t * trep;
    
    uint8_t state = getSn_SR(SEGCP_TCP_SOCK);
 8015f2c:	f240 6003 	movw	r0, #1539	; 0x603
 8015f30:	f004 fe1e 	bl	801ab70 <WIZCHIP_READ>
    gSEGCPPRIVILEGE = SEGCP_PRIVILEGE_CLR;
 8015f34:	2300      	movs	r3, #0
 8015f36:	4c65      	ldr	r4, [pc, #404]	; (80160cc <proc_SEGCP_tcp+0x1b0>)
 8015f38:	7023      	strb	r3, [r4, #0]
    
    switch(state)
 8015f3a:	281c      	cmp	r0, #28
 8015f3c:	d820      	bhi.n	8015f80 <proc_SEGCP_tcp+0x64>
 8015f3e:	e8df f000 	tbb	[pc, r0]
 8015f42:	1f12      	.short	0x1f12
 8015f44:	1f1f1f1f 	.word	0x1f1f1f1f
 8015f48:	1f1f1f1f 	.word	0x1f1f1f1f
 8015f4c:	1f1f1f1f 	.word	0x1f1f1f1f
 8015f50:	1f1f1f1f 	.word	0x1f1f1f1f
 8015f54:	1f1f1f1f 	.word	0x1f1f1f1f
 8015f58:	1f12241f 	.word	0x1f12241f
 8015f5c:	1f1f      	.short	0x1f1f
 8015f5e:	0f          	.byte	0x0f
 8015f5f:	00          	.byte	0x00
                }
            }
            break;
            
        case SOCK_CLOSE_WAIT:
            disconnect(SEGCP_TCP_SOCK);
 8015f60:	2002      	movs	r0, #2
 8015f62:	f005 fa69 	bl	801b438 <disconnect>
        
        case SOCK_CLOSED:
        case SOCK_FIN_WAIT:
            close(SEGCP_TCP_SOCK);
 8015f66:	2002      	movs	r0, #2
 8015f68:	f005 f954 	bl	801b214 <close>
            
            if(socket(SEGCP_TCP_SOCK, Sn_MR_TCP, DEVICE_SEGCP_PORT, SF_TCP_NODELAY) == SEGCP_TCP_SOCK)
 8015f6c:	2320      	movs	r3, #32
 8015f6e:	f24c 3251 	movw	r2, #50001	; 0xc351
 8015f72:	2101      	movs	r1, #1
 8015f74:	2002      	movs	r0, #2
 8015f76:	f005 f873 	bl	801b060 <socket>
 8015f7a:	2802      	cmp	r0, #2
 8015f7c:	f000 8084 	beq.w	8016088 <proc_SEGCP_tcp+0x16c>
    gSEGCPPRIVILEGE = SEGCP_PRIVILEGE_CLR;
 8015f80:	2400      	movs	r4, #0
                listen(SEGCP_TCP_SOCK);
            }
            break;
    }
    return ret;
}
 8015f82:	4620      	mov	r0, r4
 8015f84:	b048      	add	sp, #288	; 0x120
 8015f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if(getSn_IR(SEGCP_TCP_SOCK) & Sn_IR_CON)
 8015f8a:	f240 6002 	movw	r0, #1538	; 0x602
 8015f8e:	f004 fdef 	bl	801ab70 <WIZCHIP_READ>
 8015f92:	07c3      	lsls	r3, r0, #31
 8015f94:	f100 8082 	bmi.w	801609c <proc_SEGCP_tcp+0x180>
            if(flag_send_configtool_keepalive == SEGCP_ENABLE) // default: 15sec
 8015f98:	4b4d      	ldr	r3, [pc, #308]	; (80160d0 <proc_SEGCP_tcp+0x1b4>)
            if((len = getSn_RX_RSR(SEGCP_TCP_SOCK)) > 0)
 8015f9a:	2002      	movs	r0, #2
            if(flag_send_configtool_keepalive == SEGCP_ENABLE) // default: 15sec
 8015f9c:	781a      	ldrb	r2, [r3, #0]
 8015f9e:	2a01      	cmp	r2, #1
                flag_send_configtool_keepalive = SEGCP_DISABLE; // flag clear
 8015fa0:	bf04      	itt	eq
 8015fa2:	2200      	moveq	r2, #0
 8015fa4:	701a      	strbeq	r2, [r3, #0]
            if((len = getSn_RX_RSR(SEGCP_TCP_SOCK)) > 0)
 8015fa6:	f004 fe7b 	bl	801aca0 <getSn_RX_RSR>
 8015faa:	2800      	cmp	r0, #0
 8015fac:	d0e8      	beq.n	8015f80 <proc_SEGCP_tcp+0x64>
                len = recv(SEGCP_TCP_SOCK, treq, len);
 8015fae:	4602      	mov	r2, r0
 8015fb0:	4639      	mov	r1, r7
 8015fb2:	2002      	movs	r0, #2
 8015fb4:	f005 fb9c 	bl	801b6f0 <recv>
                treq[len-1] = 0x00;
 8015fb8:	2300      	movs	r3, #0
 8015fba:	fa17 f080 	uxtah	r0, r7, r0
 8015fbe:	f800 3c01 	strb.w	r3, [r0, #-1]
                if(SEGCP_MA == parse_SEGCP(treq, tpar))
 8015fc2:	a907      	add	r1, sp, #28
 8015fc4:	4638      	mov	r0, r7
 8015fc6:	f7fe fce9 	bl	801499c <parse_SEGCP>
 8015fca:	2820      	cmp	r0, #32
                treq[len-1] = 0x00;
 8015fcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
                if(SEGCP_MA == parse_SEGCP(treq, tpar))
 8015fd0:	d1d6      	bne.n	8015f80 <proc_SEGCP_tcp+0x64>
                    if(!memcmp(tpar, "\xFF\xFF\xFF\xFF\xFF\xFF", 6))
 8015fd2:	9a07      	ldr	r2, [sp, #28]
 8015fd4:	3201      	adds	r2, #1
 8015fd6:	d06c      	beq.n	80160b2 <proc_SEGCP_tcp+0x196>
                    else if(!memcmp(tpar, dev_config->network_common.mac, sizeof(dev_config->network_common.mac)))
 8015fd8:	2206      	movs	r2, #6
 8015fda:	f105 0129 	add.w	r1, r5, #41	; 0x29
 8015fde:	a807      	add	r0, sp, #28
 8015fe0:	f019 ff0c 	bl	802fdfc <memcmp>
 8015fe4:	2800      	cmp	r0, #0
 8015fe6:	d1cb      	bne.n	8015f80 <proc_SEGCP_tcp+0x64>
                        gSEGCPPRIVILEGE |= (SEGCP_PRIVILEGE_SET | SEGCP_PRIVILEGE_WRITE);
 8015fe8:	7823      	ldrb	r3, [r4, #0]
 8015fea:	f063 0377 	orn	r3, r3, #119	; 0x77
 8015fee:	7023      	strb	r3, [r4, #0]
                        sprintf(trep,"%s%c%c%c%c%c%c\r\n",tbSEGCPCMD[SEGCP_MA],
 8015ff0:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
 8015ff4:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8015ff8:	9204      	str	r2, [sp, #16]
 8015ffa:	f895 102d 	ldrb.w	r1, [r5, #45]	; 0x2d
 8015ffe:	4a35      	ldr	r2, [pc, #212]	; (80160d4 <proc_SEGCP_tcp+0x1b8>)
 8016000:	9103      	str	r1, [sp, #12]
 8016002:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 8016006:	4630      	mov	r0, r6
 8016008:	9102      	str	r1, [sp, #8]
 801600a:	f895 102b 	ldrb.w	r1, [r5, #43]	; 0x2b
                        treq += 10;
 801600e:	370a      	adds	r7, #10
                        sprintf(trep,"%s%c%c%c%c%c%c\r\n",tbSEGCPCMD[SEGCP_MA],
 8016010:	9101      	str	r1, [sp, #4]
 8016012:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
 8016016:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801601a:	9100      	str	r1, [sp, #0]
 801601c:	492e      	ldr	r1, [pc, #184]	; (80160d8 <proc_SEGCP_tcp+0x1bc>)
 801601e:	f01a f923 	bl	8030268 <siprintf>
                        if(SEGCP_PW == parse_SEGCP(treq,tpar))
 8016022:	4638      	mov	r0, r7
 8016024:	a907      	add	r1, sp, #28
 8016026:	f7fe fcb9 	bl	801499c <parse_SEGCP>
 801602a:	2821      	cmp	r0, #33	; 0x21
 801602c:	d1a8      	bne.n	8015f80 <proc_SEGCP_tcp+0x64>
                            if((tpar[0] == SEGCP_NULL && dev_config->config_common.pw_search[0] == 0) || !strcmp(tpar, dev_config->config_common.pw_search))
 801602e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8016032:	2b20      	cmp	r3, #32
 8016034:	d046      	beq.n	80160c4 <proc_SEGCP_tcp+0x1a8>
 8016036:	f105 011f 	add.w	r1, r5, #31
 801603a:	a807      	add	r0, sp, #28
 801603c:	f7fa f8fc 	bl	8010238 <strcmp>
 8016040:	2800      	cmp	r0, #0
 8016042:	d19d      	bne.n	8015f80 <proc_SEGCP_tcp+0x64>
                                memcpy(trep,treq, strlen(tpar)+4);  // "PWxxxx\r\n"
 8016044:	a807      	add	r0, sp, #28
 8016046:	f7fa f901 	bl	801024c <strlen>
 801604a:	4604      	mov	r4, r0
                        trep += 10;
 801604c:	f106 000a 	add.w	r0, r6, #10
                                memcpy(trep,treq, strlen(tpar)+4);  // "PWxxxx\r\n"
 8016050:	3404      	adds	r4, #4
 8016052:	4622      	mov	r2, r4
                                trep += (strlen(tpar) + 4);
 8016054:	eb00 0804 	add.w	r8, r0, r4
                                memcpy(trep,treq, strlen(tpar)+4);  // "PWxxxx\r\n"
 8016058:	4639      	mov	r1, r7
 801605a:	f019 fedd 	bl	802fe18 <memcpy>
                                ret = proc_SEGCP(treq,trep);
 801605e:	4641      	mov	r1, r8
 8016060:	1938      	adds	r0, r7, r4
 8016062:	f7fe fd4f 	bl	8014b04 <proc_SEGCP>
 8016066:	4604      	mov	r4, r0
                                send(SEGCP_TCP_SOCK, segcp_rep, 14+strlen(tpar)+strlen(trep));
 8016068:	a807      	add	r0, sp, #28
 801606a:	f7fa f8ef 	bl	801024c <strlen>
 801606e:	4605      	mov	r5, r0
 8016070:	4640      	mov	r0, r8
 8016072:	f7fa f8eb 	bl	801024c <strlen>
 8016076:	4428      	add	r0, r5
 8016078:	f100 020e 	add.w	r2, r0, #14
 801607c:	4631      	mov	r1, r6
 801607e:	b292      	uxth	r2, r2
 8016080:	2002      	movs	r0, #2
 8016082:	f005 fa49 	bl	801b518 <send>
 8016086:	e77c      	b.n	8015f82 <proc_SEGCP_tcp+0x66>
                enable_configtool_keepalive_timer = DISABLE;
 8016088:	2300      	movs	r3, #0
    uint16_t ret = 0;
 801608a:	461c      	mov	r4, r3
                enable_configtool_keepalive_timer = DISABLE;
 801608c:	4a13      	ldr	r2, [pc, #76]	; (80160dc <proc_SEGCP_tcp+0x1c0>)
 801608e:	7013      	strb	r3, [r2, #0]
                listen(SEGCP_TCP_SOCK);
 8016090:	f005 f8fa 	bl	801b288 <listen>
}
 8016094:	4620      	mov	r0, r4
 8016096:	b048      	add	sp, #288	; 0x120
 8016098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                enable_configtool_keepalive_timer = ENABLE;
 801609c:	2101      	movs	r1, #1
                configtool_keepalive_time = 0;
 801609e:	2200      	movs	r2, #0
                enable_configtool_keepalive_timer = ENABLE;
 80160a0:	480e      	ldr	r0, [pc, #56]	; (80160dc <proc_SEGCP_tcp+0x1c0>)
                configtool_keepalive_time = 0;
 80160a2:	4b0f      	ldr	r3, [pc, #60]	; (80160e0 <proc_SEGCP_tcp+0x1c4>)
                enable_configtool_keepalive_timer = ENABLE;
 80160a4:	7001      	strb	r1, [r0, #0]
                setSn_IR(SEGCP_TCP_SOCK, Sn_IR_CON); // TCP connection interrupt clear
 80160a6:	f240 6002 	movw	r0, #1538	; 0x602
                configtool_keepalive_time = 0;
 80160aa:	801a      	strh	r2, [r3, #0]
                setSn_IR(SEGCP_TCP_SOCK, Sn_IR_CON); // TCP connection interrupt clear
 80160ac:	f004 fd42 	bl	801ab34 <WIZCHIP_WRITE>
 80160b0:	e772      	b.n	8015f98 <proc_SEGCP_tcp+0x7c>
                    if(!memcmp(tpar, "\xFF\xFF\xFF\xFF\xFF\xFF", 6))
 80160b2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80160b6:	429a      	cmp	r2, r3
 80160b8:	d18e      	bne.n	8015fd8 <proc_SEGCP_tcp+0xbc>
                        gSEGCPPRIVILEGE |= (SEGCP_PRIVILEGE_SET | SEGCP_PRIVILEGE_READ);
 80160ba:	7823      	ldrb	r3, [r4, #0]
 80160bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80160c0:	7023      	strb	r3, [r4, #0]
 80160c2:	e795      	b.n	8015ff0 <proc_SEGCP_tcp+0xd4>
                            if((tpar[0] == SEGCP_NULL && dev_config->config_common.pw_search[0] == 0) || !strcmp(tpar, dev_config->config_common.pw_search))
 80160c4:	7feb      	ldrb	r3, [r5, #31]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d0bc      	beq.n	8016044 <proc_SEGCP_tcp+0x128>
 80160ca:	e7b4      	b.n	8016036 <proc_SEGCP_tcp+0x11a>
 80160cc:	20018896 	.word	0x20018896
 80160d0:	20018895 	.word	0x20018895
 80160d4:	20018058 	.word	0x20018058
 80160d8:	080320d0 	.word	0x080320d0
 80160dc:	20018894 	.word	0x20018894
 80160e0:	20018892 	.word	0x20018892

080160e4 <proc_SEGCP_uart>:


uint16_t proc_SEGCP_uart(uint8_t uartNum, uint8_t * segcp_req, uint8_t * segcp_rep)
{
 80160e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160e8:	b083      	sub	sp, #12
 80160ea:	4605      	mov	r5, r0
 80160ec:	460e      	mov	r6, r1
 80160ee:	4690      	mov	r8, r2
    DevConfig *dev_config = get_DevConfig_pointer();
 80160f0:	f7fd ffa0 	bl	8014034 <get_DevConfig_pointer>
 80160f4:	4681      	mov	r9, r0
    
    uint16_t len = 0;
    uint16_t ret = 0;
    //uint8_t segcp_req[SEGCP_PARAM_MAX*2];
    
    if(get_uart_buffer_usedsize(uartNum))
 80160f6:	4628      	mov	r0, r5
 80160f8:	f001 fe88 	bl	8017e0c <get_uart_buffer_usedsize>
 80160fc:	b920      	cbnz	r0, 8016108 <proc_SEGCP_uart+0x24>
    uint16_t ret = 0;
 80160fe:	2400      	movs	r4, #0
                
            }
        }
    }
    return ret;
}
 8016100:	4620      	mov	r0, r4
 8016102:	b003      	add	sp, #12
 8016104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }
}

uint16_t uart_get_commandline(uint8_t uartNum, uint8_t* buf, uint16_t maxSize)
{
    DevConfig *dev_config = get_DevConfig_pointer();
 8016108:	f7fd ff94 	bl	8014034 <get_DevConfig_pointer>
 801610c:	4682      	mov	sl, r0
    
    uint16_t i;
    uint16_t len = get_uart_buffer_usedsize(uartNum);
 801610e:	4628      	mov	r0, r5
    DevConfig *dev_config = get_DevConfig_pointer();
 8016110:	f8cd a004 	str.w	sl, [sp, #4]
    uint16_t len = get_uart_buffer_usedsize(uartNum);
 8016114:	f001 fe7a 	bl	8017e0c <get_uart_buffer_usedsize>

    if(len >= 4) // Minimum of command: 4-bytes, e.g., MC\r\n (MC$0d$0a)
 8016118:	2803      	cmp	r0, #3
 801611a:	d9f0      	bls.n	80160fe <proc_SEGCP_uart+0x1a>
    {
        memset(buf, NULL, CONFIG_BUF_SIZE);
 801611c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016120:	2100      	movs	r1, #0
 8016122:	4630      	mov	r0, r6
 8016124:	f019 fe9f 	bl	802fe66 <memset>
 8016128:	2400      	movs	r4, #0
 801612a:	f106 3bff 	add.w	fp, r6, #4294967295
        for(i = 0; i < maxSize; i++)
        {
            buf[i] = uart_getc(uartNum);
 801612e:	4628      	mov	r0, r5
 8016130:	f001 fe1e 	bl	8017d70 <uart_getc>
 8016134:	b2c3      	uxtb	r3, r0
            //if(buf[i] == '\n') break;	// [\n]: end of command
            if(buf[i] == 0x0a) break;	// [0x0a]: end of command (Line feed)
 8016136:	2b0a      	cmp	r3, #10
            buf[i] = uart_getc(uartNum);
 8016138:	f80b 3f01 	strb.w	r3, [fp, #1]!
 801613c:	b2a7      	uxth	r7, r4
            if(buf[i] == 0x0a) break;	// [0x0a]: end of command (Line feed)
 801613e:	d03e      	beq.n	80161be <proc_SEGCP_uart+0xda>
 8016140:	3401      	adds	r4, #1
        for(i = 0; i < maxSize; i++)
 8016142:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 8016146:	d1f2      	bne.n	801612e <proc_SEGCP_uart+0x4a>
        }

        if ((!(memcmp(buf, "OC", SEGCP_CMD_MAX))) || (!(memcmp(buf, "LC", SEGCP_CMD_MAX))))
 8016148:	7833      	ldrb	r3, [r6, #0]
 801614a:	2b4f      	cmp	r3, #79	; 0x4f
 801614c:	f000 80ac 	beq.w	80162a8 <proc_SEGCP_uart+0x1c4>
 8016150:	2b4c      	cmp	r3, #76	; 0x4c
 8016152:	d06a      	beq.n	801622a <proc_SEGCP_uart+0x146>
                    uart_rx_flush(uartNum);
                    break;
                }
            }
        }
        else if (!(memcmp(buf, "PK", SEGCP_CMD_MAX)))
 8016154:	2b50      	cmp	r3, #80	; 0x50
 8016156:	f000 809c 	beq.w	8016292 <proc_SEGCP_uart+0x1ae>
 801615a:	f44f 6700 	mov.w	r7, #2048	; 0x800
 801615e:	3401      	adds	r4, #1
                    uart_rx_flush(uartNum);
                    break;
                }
            }
        }
        buf[i+1] = 0x00; // end of string
 8016160:	2200      	movs	r2, #0

        PRT_SEGCP("buf = %s\r\n", buf);
 8016162:	4633      	mov	r3, r6
        buf[i+1] = 0x00; // end of string
 8016164:	5532      	strb	r2, [r6, r4]
        PRT_SEGCP("buf = %s\r\n", buf);
 8016166:	4957      	ldr	r1, [pc, #348]	; (80162c4 <proc_SEGCP_uart+0x1e0>)
 8016168:	f240 62ab 	movw	r2, #1707	; 0x6ab
 801616c:	4856      	ldr	r0, [pc, #344]	; (80162c8 <proc_SEGCP_uart+0x1e4>)
 801616e:	f001 fe69 	bl	8017e44 <WIZ_SECURE_printf>
        
        if(dev_config->serial_command.serial_command_echo == SEGCP_ENABLE)
 8016172:	9b01      	ldr	r3, [sp, #4]
 8016174:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
 8016178:	2b01      	cmp	r3, #1
 801617a:	f000 808f 	beq.w	801629c <proc_SEGCP_uart+0x1b8>
    else
    {
        return 0;
    }
    
    return (uint16_t)strlen(buf);
 801617e:	4630      	mov	r0, r6
 8016180:	f7fa f864 	bl	801024c <strlen>
        if(len != 0)
 8016184:	b280      	uxth	r0, r0
 8016186:	2800      	cmp	r0, #0
 8016188:	d0b9      	beq.n	80160fe <proc_SEGCP_uart+0x1a>
            gSEGCPPRIVILEGE = SEGCP_PRIVILEGE_SET | SEGCP_PRIVILEGE_WRITE;
 801618a:	2288      	movs	r2, #136	; 0x88
 801618c:	4b4f      	ldr	r3, [pc, #316]	; (80162cc <proc_SEGCP_uart+0x1e8>)
            ret = proc_SEGCP(segcp_req, segcp_rep);
 801618e:	4630      	mov	r0, r6
 8016190:	4641      	mov	r1, r8
            gSEGCPPRIVILEGE = SEGCP_PRIVILEGE_SET | SEGCP_PRIVILEGE_WRITE;
 8016192:	701a      	strb	r2, [r3, #0]
            ret = proc_SEGCP(segcp_req, segcp_rep);
 8016194:	f7fe fcb6 	bl	8014b04 <proc_SEGCP>
            if(segcp_rep[0])
 8016198:	f898 3000 	ldrb.w	r3, [r8]
            ret = proc_SEGCP(segcp_req, segcp_rep);
 801619c:	4604      	mov	r4, r0
            if(segcp_rep[0])
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d0ae      	beq.n	8016100 <proc_SEGCP_uart+0x1c>
                if(dev_config->serial_common.serial_debug_en)
 80161a2:	f899 30e2 	ldrb.w	r3, [r9, #226]	; 0xe2
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	f040 8087 	bne.w	80162ba <proc_SEGCP_uart+0x1d6>
                uart_puts(uartNum, segcp_rep, strlen((char *)segcp_rep));
 80161ac:	4640      	mov	r0, r8
 80161ae:	f7fa f84d 	bl	801024c <strlen>
 80161b2:	4641      	mov	r1, r8
 80161b4:	b282      	uxth	r2, r0
 80161b6:	4628      	mov	r0, r5
 80161b8:	f001 fdc0 	bl	8017d3c <uart_puts>
    return ret;
 80161bc:	e7a0      	b.n	8016100 <proc_SEGCP_uart+0x1c>
        if ((!(memcmp(buf, "OC", SEGCP_CMD_MAX))) || (!(memcmp(buf, "LC", SEGCP_CMD_MAX))))
 80161be:	7833      	ldrb	r3, [r6, #0]
 80161c0:	2b4f      	cmp	r3, #79	; 0x4f
 80161c2:	d039      	beq.n	8016238 <proc_SEGCP_uart+0x154>
 80161c4:	2b4c      	cmp	r3, #76	; 0x4c
 80161c6:	d037      	beq.n	8016238 <proc_SEGCP_uart+0x154>
        else if (!(memcmp(buf, "PK", SEGCP_CMD_MAX)))
 80161c8:	2202      	movs	r2, #2
 80161ca:	4630      	mov	r0, r6
 80161cc:	4940      	ldr	r1, [pc, #256]	; (80162d0 <proc_SEGCP_uart+0x1ec>)
 80161ce:	f019 fe15 	bl	802fdfc <memcmp>
 80161d2:	2800      	cmp	r0, #0
 80161d4:	d1c3      	bne.n	801615e <proc_SEGCP_uart+0x7a>
            for(i++; i < maxSize; i++)
 80161d6:	3701      	adds	r7, #1
 80161d8:	b2bf      	uxth	r7, r7
 80161da:	f5b7 6f00 	cmp.w	r7, #2048	; 0x800
 80161de:	d229      	bcs.n	8016234 <proc_SEGCP_uart+0x150>
 80161e0:	1e7c      	subs	r4, r7, #1
 80161e2:	46bb      	mov	fp, r7
                if (strstr(buf, END_PKEY))
 80161e4:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 80162dc <proc_SEGCP_uart+0x1f8>
 80161e8:	4434      	add	r4, r6
 80161ea:	b2ba      	uxth	r2, r7
 80161ec:	e007      	b.n	80161fe <proc_SEGCP_uart+0x11a>
 80161ee:	f10b 0b01 	add.w	fp, fp, #1
            for(i++; i < maxSize; i++)
 80161f2:	fa1f f28b 	uxth.w	r2, fp
 80161f6:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80161fa:	b28f      	uxth	r7, r1
 80161fc:	d21a      	bcs.n	8016234 <proc_SEGCP_uart+0x150>
                buf[i] = uart_getc(uartNum);
 80161fe:	4628      	mov	r0, r5
 8016200:	4617      	mov	r7, r2
 8016202:	f001 fdb5 	bl	8017d70 <uart_getc>
                if (strstr(buf, END_PKEY))
 8016206:	4651      	mov	r1, sl
                buf[i] = uart_getc(uartNum);
 8016208:	f804 0f01 	strb.w	r0, [r4, #1]!
                if (strstr(buf, END_PKEY))
 801620c:	4630      	mov	r0, r6
 801620e:	f01a f88e 	bl	803032e <strstr>
            for(i++; i < maxSize; i++)
 8016212:	1c79      	adds	r1, r7, #1
                if (strstr(buf, END_PKEY))
 8016214:	2800      	cmp	r0, #0
 8016216:	d0ea      	beq.n	80161ee <proc_SEGCP_uart+0x10a>
                    delay_ms(10);
 8016218:	200a      	movs	r0, #10
 801621a:	f001 fb7f 	bl	801791c <delay_ms>
                    uart_rx_flush(uartNum);
 801621e:	4628      	mov	r0, r5
 8016220:	f001 fdce 	bl	8017dc0 <uart_rx_flush>
                    break;
 8016224:	f10b 0401 	add.w	r4, fp, #1
 8016228:	e79a      	b.n	8016160 <proc_SEGCP_uart+0x7c>
        if ((!(memcmp(buf, "OC", SEGCP_CMD_MAX))) || (!(memcmp(buf, "LC", SEGCP_CMD_MAX))))
 801622a:	7873      	ldrb	r3, [r6, #1]
 801622c:	2b43      	cmp	r3, #67	; 0x43
 801622e:	d194      	bne.n	801615a <proc_SEGCP_uart+0x76>
            for(i++; i < maxSize; i++)
 8016230:	f640 0701 	movw	r7, #2049	; 0x801
 8016234:	1c7c      	adds	r4, r7, #1
 8016236:	e793      	b.n	8016160 <proc_SEGCP_uart+0x7c>
        if ((!(memcmp(buf, "OC", SEGCP_CMD_MAX))) || (!(memcmp(buf, "LC", SEGCP_CMD_MAX))))
 8016238:	7873      	ldrb	r3, [r6, #1]
 801623a:	2b43      	cmp	r3, #67	; 0x43
 801623c:	d1c4      	bne.n	80161c8 <proc_SEGCP_uart+0xe4>
            for(i++; i < maxSize; i++)
 801623e:	3701      	adds	r7, #1
 8016240:	b2bf      	uxth	r7, r7
 8016242:	f5b7 6f00 	cmp.w	r7, #2048	; 0x800
 8016246:	d0f5      	beq.n	8016234 <proc_SEGCP_uart+0x150>
 8016248:	f107 3bff 	add.w	fp, r7, #4294967295
 801624c:	46ba      	mov	sl, r7
                if (strstr(buf, END_CERT))
 801624e:	4c21      	ldr	r4, [pc, #132]	; (80162d4 <proc_SEGCP_uart+0x1f0>)
 8016250:	44b3      	add	fp, r6
 8016252:	b2ba      	uxth	r2, r7
 8016254:	e007      	b.n	8016266 <proc_SEGCP_uart+0x182>
 8016256:	f10a 0a01 	add.w	sl, sl, #1
            for(i++; i < maxSize; i++)
 801625a:	fa1f f28a 	uxth.w	r2, sl
 801625e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8016262:	b28f      	uxth	r7, r1
 8016264:	d2e6      	bcs.n	8016234 <proc_SEGCP_uart+0x150>
                buf[i] = uart_getc(uartNum);
 8016266:	4628      	mov	r0, r5
 8016268:	4617      	mov	r7, r2
 801626a:	f001 fd81 	bl	8017d70 <uart_getc>
                if (strstr(buf, END_CERT))
 801626e:	4621      	mov	r1, r4
                buf[i] = uart_getc(uartNum);
 8016270:	f80b 0f01 	strb.w	r0, [fp, #1]!
                if (strstr(buf, END_CERT))
 8016274:	4630      	mov	r0, r6
 8016276:	f01a f85a 	bl	803032e <strstr>
            for(i++; i < maxSize; i++)
 801627a:	1c79      	adds	r1, r7, #1
                if (strstr(buf, END_CERT))
 801627c:	2800      	cmp	r0, #0
 801627e:	d0ea      	beq.n	8016256 <proc_SEGCP_uart+0x172>
                    delay_ms(10);
 8016280:	200a      	movs	r0, #10
 8016282:	f001 fb4b 	bl	801791c <delay_ms>
                    uart_rx_flush(uartNum);
 8016286:	4628      	mov	r0, r5
 8016288:	f001 fd9a 	bl	8017dc0 <uart_rx_flush>
                    break;
 801628c:	f10a 0401 	add.w	r4, sl, #1
 8016290:	e766      	b.n	8016160 <proc_SEGCP_uart+0x7c>
        else if (!(memcmp(buf, "PK", SEGCP_CMD_MAX)))
 8016292:	7873      	ldrb	r3, [r6, #1]
 8016294:	2b4b      	cmp	r3, #75	; 0x4b
 8016296:	f47f af60 	bne.w	801615a <proc_SEGCP_uart+0x76>
 801629a:	e7c9      	b.n	8016230 <proc_SEGCP_uart+0x14c>
            uart_puts(uartNum, buf, i);
 801629c:	463a      	mov	r2, r7
 801629e:	4631      	mov	r1, r6
 80162a0:	4628      	mov	r0, r5
 80162a2:	f001 fd4b 	bl	8017d3c <uart_puts>
 80162a6:	e76a      	b.n	801617e <proc_SEGCP_uart+0x9a>
        if ((!(memcmp(buf, "OC", SEGCP_CMD_MAX))) || (!(memcmp(buf, "LC", SEGCP_CMD_MAX))))
 80162a8:	7873      	ldrb	r3, [r6, #1]
 80162aa:	2b43      	cmp	r3, #67	; 0x43
 80162ac:	f47f af55 	bne.w	801615a <proc_SEGCP_uart+0x76>
 80162b0:	f640 0402 	movw	r4, #2050	; 0x802
            for(i++; i < maxSize; i++)
 80162b4:	f640 0701 	movw	r7, #2049	; 0x801
 80162b8:	e752      	b.n	8016160 <proc_SEGCP_uart+0x7c>
                    printf("%s",segcp_rep);
 80162ba:	4641      	mov	r1, r8
 80162bc:	4806      	ldr	r0, [pc, #24]	; (80162d8 <proc_SEGCP_uart+0x1f4>)
 80162be:	f019 fe93 	bl	802ffe8 <iprintf>
 80162c2:	e773      	b.n	80161ac <proc_SEGCP_uart+0xc8>
 80162c4:	080323ac 	.word	0x080323ac
 80162c8:	08032194 	.word	0x08032194
 80162cc:	20018896 	.word	0x20018896
 80162d0:	08032190 	.word	0x08032190
 80162d4:	08031e8c 	.word	0x08031e8c
 80162d8:	08031d0c 	.word	0x08031d0c
 80162dc:	08031ef4 	.word	0x08031ef4

080162e0 <do_segcp>:
{
 80162e0:	b538      	push	{r3, r4, r5, lr}
    DevConfig *dev_config = get_DevConfig_pointer();
 80162e2:	f7fd fea7 	bl	8014034 <get_DevConfig_pointer>
    if(opmode == DEVICE_AT_MODE)
 80162e6:	4b14      	ldr	r3, [pc, #80]	; (8016338 <do_segcp+0x58>)
 80162e8:	781b      	ldrb	r3, [r3, #0]
 80162ea:	b183      	cbz	r3, 801630e <do_segcp+0x2e>
    uint16_t segcp_ret = 0;
 80162ec:	2400      	movs	r4, #0
    segcp_ret |= proc_SEGCP_udp(gSEGCPREQ, gSEGCPREP);
 80162ee:	4913      	ldr	r1, [pc, #76]	; (801633c <do_segcp+0x5c>)
 80162f0:	4813      	ldr	r0, [pc, #76]	; (8016340 <do_segcp+0x60>)
 80162f2:	f7ff fd0b 	bl	8015d0c <proc_SEGCP_udp>
    segcp_ret |= proc_SEGCP_tcp(gSEGCPREQ, gSEGCPREP);
 80162f6:	4911      	ldr	r1, [pc, #68]	; (801633c <do_segcp+0x5c>)
    segcp_ret |= proc_SEGCP_udp(gSEGCPREQ, gSEGCPREP);
 80162f8:	4304      	orrs	r4, r0
    segcp_ret |= proc_SEGCP_tcp(gSEGCPREQ, gSEGCPREP);
 80162fa:	4811      	ldr	r0, [pc, #68]	; (8016340 <do_segcp+0x60>)
 80162fc:	f7ff fe0e 	bl	8015f1c <proc_SEGCP_tcp>
    segcp_ret |= proc_SEGCP_udp(gSEGCPREQ, gSEGCPREP);
 8016300:	b2a4      	uxth	r4, r4
    segcp_ret |= proc_SEGCP_tcp(gSEGCPREQ, gSEGCPREP);
 8016302:	4320      	orrs	r0, r4
    segcp_ret_handler(segcp_ret);
 8016304:	b280      	uxth	r0, r0
}
 8016306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    segcp_ret_handler(segcp_ret);
 801630a:	f7fe ba7f 	b.w	801480c <segcp_ret_handler>
        segcp_ret = proc_SEGCP_uart(SEGCP_UART, gSEGCPREQ, gSEGCPREP);
 801630e:	4b0d      	ldr	r3, [pc, #52]	; (8016344 <do_segcp+0x64>)
 8016310:	4605      	mov	r5, r0
 8016312:	4a0a      	ldr	r2, [pc, #40]	; (801633c <do_segcp+0x5c>)
 8016314:	7818      	ldrb	r0, [r3, #0]
 8016316:	490a      	ldr	r1, [pc, #40]	; (8016340 <do_segcp+0x60>)
 8016318:	f7ff fee4 	bl	80160e4 <proc_SEGCP_uart>
        if(segcp_ret & SEGCP_RET_ERR)
 801631c:	0403      	lsls	r3, r0, #16
        segcp_ret = proc_SEGCP_uart(SEGCP_UART, gSEGCPREQ, gSEGCPREP);
 801631e:	4604      	mov	r4, r0
        if(segcp_ret & SEGCP_RET_ERR)
 8016320:	d5e5      	bpl.n	80162ee <do_segcp+0xe>
            if(dev_config->serial_common.serial_debug_en) PRT_ERR(" > SEGCP:ERROR:%04X\r\n", segcp_ret);
 8016322:	f895 30e2 	ldrb.w	r3, [r5, #226]	; 0xe2
 8016326:	2b00      	cmp	r3, #0
 8016328:	d0e1      	beq.n	80162ee <do_segcp+0xe>
 801632a:	4602      	mov	r2, r0
 801632c:	4906      	ldr	r1, [pc, #24]	; (8016348 <do_segcp+0x68>)
 801632e:	4807      	ldr	r0, [pc, #28]	; (801634c <do_segcp+0x6c>)
 8016330:	f001 fd88 	bl	8017e44 <WIZ_SECURE_printf>
 8016334:	e7db      	b.n	80162ee <do_segcp+0xe>
 8016336:	bf00      	nop
 8016338:	20018214 	.word	0x20018214
 801633c:	20018898 	.word	0x20018898
 8016340:	20019098 	.word	0x20019098
 8016344:	20018890 	.word	0x20018890
 8016348:	08032364 	.word	0x08032364
 801634c:	080321b0 	.word	0x080321b0

08016350 <segcp_timer_msec>:
}

// Function for Timer
void segcp_timer_msec(void)
{
    if(enable_configtool_keepalive_timer)
 8016350:	4b0d      	ldr	r3, [pc, #52]	; (8016388 <segcp_timer_msec+0x38>)
 8016352:	781b      	ldrb	r3, [r3, #0]
 8016354:	b1bb      	cbz	r3, 8016386 <segcp_timer_msec+0x36>
    {
        if(configtool_keepalive_time < 0xFFFF) 	configtool_keepalive_time++;
 8016356:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801635a:	4b0c      	ldr	r3, [pc, #48]	; (801638c <segcp_timer_msec+0x3c>)
 801635c:	881a      	ldrh	r2, [r3, #0]
 801635e:	b292      	uxth	r2, r2
 8016360:	428a      	cmp	r2, r1
        else									configtool_keepalive_time = 0;
 8016362:	bf08      	it	eq
 8016364:	2200      	moveq	r2, #0
        
        if(configtool_keepalive_time >= CONFIGTOOL_KEEPALIVE_TIME_MS)
 8016366:	f643 2197 	movw	r1, #14999	; 0x3a97
        if(configtool_keepalive_time < 0xFFFF) 	configtool_keepalive_time++;
 801636a:	bf1e      	ittt	ne
 801636c:	881a      	ldrhne	r2, [r3, #0]
 801636e:	3201      	addne	r2, #1
 8016370:	b292      	uxthne	r2, r2
        else									configtool_keepalive_time = 0;
 8016372:	801a      	strh	r2, [r3, #0]
        if(configtool_keepalive_time >= CONFIGTOOL_KEEPALIVE_TIME_MS)
 8016374:	881a      	ldrh	r2, [r3, #0]
 8016376:	b292      	uxth	r2, r2
 8016378:	428a      	cmp	r2, r1
 801637a:	d904      	bls.n	8016386 <segcp_timer_msec+0x36>
        {
            flag_send_configtool_keepalive = SEGCP_ENABLE;
 801637c:	2101      	movs	r1, #1
            configtool_keepalive_time = 0;
 801637e:	2000      	movs	r0, #0
            flag_send_configtool_keepalive = SEGCP_ENABLE;
 8016380:	4a03      	ldr	r2, [pc, #12]	; (8016390 <segcp_timer_msec+0x40>)
            configtool_keepalive_time = 0;
 8016382:	8018      	strh	r0, [r3, #0]
            flag_send_configtool_keepalive = SEGCP_ENABLE;
 8016384:	7011      	strb	r1, [r2, #0]
        }
    }
}
 8016386:	4770      	bx	lr
 8016388:	20018894 	.word	0x20018894
 801638c:	20018892 	.word	0x20018892
 8016390:	20018895 	.word	0x20018895

08016394 <is_ipaddr>:
#include <ctype.h>
#include "util.h"


uint8_t is_ipaddr(uint8_t * ipaddr, uint8_t * ret_ip)
{
 8016394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016398:	b083      	sub	sp, #12
 801639a:	460f      	mov	r7, r1
 801639c:	4606      	mov	r6, r0
	uint8_t i = 0;
	uint8_t dotcnt = 0;
	uint16_t tval = 0;
	uint8_t len = strlen((char *)ipaddr);
 801639e:	f7f9 ff55 	bl	801024c <strlen>
	
	uint8_t tmp[3] = {0, };
 80163a2:	2200      	movs	r2, #0
 80163a4:	4b2c      	ldr	r3, [pc, #176]	; (8016458 <is_ipaddr+0xc4>)
	uint8_t len = strlen((char *)ipaddr);
 80163a6:	fa5f f980 	uxtb.w	r9, r0
	uint8_t tmp[3] = {0, };
 80163aa:	8819      	ldrh	r1, [r3, #0]
	uint8_t tmpcnt = 0;
	
	if(len > 15 || len < 7) return 0;
 80163ac:	f1a9 0307 	sub.w	r3, r9, #7
 80163b0:	2b08      	cmp	r3, #8
	uint8_t tmp[3] = {0, };
 80163b2:	f8ad 1004 	strh.w	r1, [sp, #4]
 80163b6:	f88d 2006 	strb.w	r2, [sp, #6]
	if(len > 15 || len < 7) return 0;
 80163ba:	d848      	bhi.n	801644e <is_ipaddr+0xba>
 80163bc:	f109 39ff 	add.w	r9, r9, #4294967295
 80163c0:	fa56 f989 	uxtab	r9, r6, r9
	uint16_t tval = 0;
 80163c4:	4614      	mov	r4, r2
	uint8_t dotcnt = 0;
 80163c6:	4690      	mov	r8, r2
 80163c8:	f8df a090 	ldr.w	sl, [pc, #144]	; 801645c <is_ipaddr+0xc8>
 80163cc:	3e01      	subs	r6, #1
 80163ce:	e008      	b.n	80163e2 <is_ipaddr+0x4e>
	
	for(i = 0; i < len ; i++)
	{
		if(isdigit(ipaddr[i]))
		{
			tval = (tval * 10) + ipaddr[i] - '0';
 80163d0:	b284      	uxth	r4, r0
			if(tval > 255) return 0;
 80163d2:	2cff      	cmp	r4, #255	; 0xff
 80163d4:	d83b      	bhi.n	801644e <is_ipaddr+0xba>
			
			// added for ret_ip arrary
			tmp[tmpcnt++] = ipaddr[i];
			if(tmpcnt > sizeof(tmp)) return 0;
 80163d6:	2a03      	cmp	r2, #3
			tmp[tmpcnt++] = ipaddr[i];
 80163d8:	f80e 5c04 	strb.w	r5, [lr, #-4]
			if(tmpcnt > sizeof(tmp)) return 0;
 80163dc:	d837      	bhi.n	801644e <is_ipaddr+0xba>
	for(i = 0; i < len ; i++)
 80163de:	45b1      	cmp	r9, r6
 80163e0:	d02b      	beq.n	801643a <is_ipaddr+0xa6>
		if(isdigit(ipaddr[i]))
 80163e2:	f816 5f01 	ldrb.w	r5, [r6, #1]!
			tval = (tval * 10) + ipaddr[i] - '0';
 80163e6:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 80163ea:	f81a 3005 	ldrb.w	r3, [sl, r5]
 80163ee:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
 80163f2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
			tmp[tmpcnt++] = ipaddr[i];
 80163f6:	f10d 0e08 	add.w	lr, sp, #8
 80163fa:	1c51      	adds	r1, r2, #1
		if(isdigit(ipaddr[i]))
 80163fc:	f013 0b04 	ands.w	fp, r3, #4
			tmp[tmpcnt++] = ipaddr[i];
 8016400:	4496      	add	lr, r2
		}
		else if(ipaddr[i] == '.')
		{
			if(tval > 255) return 0;
			if(++dotcnt > 4) return 0;
 8016402:	f108 0c01 	add.w	ip, r8, #1
			tmp[tmpcnt++] = ipaddr[i];
 8016406:	b2ca      	uxtb	r2, r1
		if(isdigit(ipaddr[i]))
 8016408:	d1e2      	bne.n	80163d0 <is_ipaddr+0x3c>
		else if(ipaddr[i] == '.')
 801640a:	2d2e      	cmp	r5, #46	; 0x2e
			if(++dotcnt > 4) return 0;
 801640c:	fa5f f88c 	uxtb.w	r8, ip
		else if(ipaddr[i] == '.')
 8016410:	d11d      	bne.n	801644e <is_ipaddr+0xba>
			if(tval > 255) return 0;
 8016412:	2cff      	cmp	r4, #255	; 0xff
 8016414:	d81b      	bhi.n	801644e <is_ipaddr+0xba>
			if(++dotcnt > 4) return 0;
 8016416:	f1b8 0f04 	cmp.w	r8, #4
 801641a:	d818      	bhi.n	801644e <is_ipaddr+0xba>
			tval = 0;
			
			// added for ret_ip arrary
			ret_ip[dotcnt-1] = atoi((char *)tmp);
 801641c:	a801      	add	r0, sp, #4
 801641e:	f019 fca3 	bl	802fd68 <atoi>
 8016422:	eb07 0308 	add.w	r3, r7, r8
	for(i = 0; i < len ; i++)
 8016426:	45b1      	cmp	r9, r6
			memset(tmp, 0x00, sizeof(tmp));
			tmpcnt = 0;
 8016428:	465a      	mov	r2, fp
			tval = 0;
 801642a:	465c      	mov	r4, fp
			memset(tmp, 0x00, sizeof(tmp));
 801642c:	f8ad b004 	strh.w	fp, [sp, #4]
 8016430:	f88d b006 	strb.w	fp, [sp, #6]
			ret_ip[dotcnt-1] = atoi((char *)tmp);
 8016434:	f803 0c01 	strb.w	r0, [r3, #-1]
	for(i = 0; i < len ; i++)
 8016438:	d1d3      	bne.n	80163e2 <is_ipaddr+0x4e>
		}
		else return 0;
	}
	// added for ret_ip arrary
	ret_ip[dotcnt] = atoi((char *)tmp);
 801643a:	a801      	add	r0, sp, #4
 801643c:	f019 fc94 	bl	802fd68 <atoi>
 8016440:	4603      	mov	r3, r0
	
	return 1;
 8016442:	2001      	movs	r0, #1
	ret_ip[dotcnt] = atoi((char *)tmp);
 8016444:	f807 3008 	strb.w	r3, [r7, r8]
}
 8016448:	b003      	add	sp, #12
 801644a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(len > 15 || len < 7) return 0;
 801644e:	2000      	movs	r0, #0
}
 8016450:	b003      	add	sp, #12
 8016452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016456:	bf00      	nop
 8016458:	08031708 	.word	0x08031708
 801645c:	08035eb5 	.word	0x08035eb5

08016460 <is_hexstr>:


uint8_t is_hexstr(uint8_t * hexstr)
{
 8016460:	b510      	push	{r4, lr}
 8016462:	4604      	mov	r4, r0
	uint8_t i = 0;
	
	for(i=0; i < strlen((char *)hexstr); i++)
 8016464:	f7f9 fef2 	bl	801024c <strlen>
 8016468:	2200      	movs	r2, #0
	{
		if(!isxdigit(hexstr[i])) return 0;
 801646a:	4907      	ldr	r1, [pc, #28]	; (8016488 <is_hexstr+0x28>)
	for(i=0; i < strlen((char *)hexstr); i++)
 801646c:	e004      	b.n	8016478 <is_hexstr+0x18>
		if(!isxdigit(hexstr[i])) return 0;
 801646e:	5ce3      	ldrb	r3, [r4, r3]
 8016470:	5c5b      	ldrb	r3, [r3, r1]
 8016472:	f013 0344 	ands.w	r3, r3, #68	; 0x44
 8016476:	d005      	beq.n	8016484 <is_hexstr+0x24>
	for(i=0; i < strlen((char *)hexstr); i++)
 8016478:	b2d3      	uxtb	r3, r2
 801647a:	4298      	cmp	r0, r3
 801647c:	f102 0201 	add.w	r2, r2, #1
 8016480:	d8f5      	bhi.n	801646e <is_hexstr+0xe>
	}
	return 1; 
 8016482:	2301      	movs	r3, #1
}
 8016484:	4618      	mov	r0, r3
 8016486:	bd10      	pop	{r4, pc}
 8016488:	08035eb5 	.word	0x08035eb5

0801648c <is_hex>:

uint8_t is_hex(uint8_t hex)
{
	uint8_t ret = hex;
	
	if(hex < 0x11) return 0xFF;
 801648c:	2810      	cmp	r0, #16
 801648e:	d90f      	bls.n	80164b0 <is_hex+0x24>

	if(isdigit(hex)) ret = hex - '0';
 8016490:	4b0a      	ldr	r3, [pc, #40]	; (80164bc <is_hex+0x30>)
 8016492:	5cc3      	ldrb	r3, [r0, r3]
 8016494:	075b      	lsls	r3, r3, #29
 8016496:	d502      	bpl.n	801649e <is_hex+0x12>
 8016498:	3830      	subs	r0, #48	; 0x30
 801649a:	b2c0      	uxtb	r0, r0
 801649c:	4770      	bx	lr
	else if(hex > '\'' && hex < 'g') ret = hex - 'a' + 0x10;
 801649e:	f1a0 0328 	sub.w	r3, r0, #40	; 0x28
 80164a2:	2b3e      	cmp	r3, #62	; 0x3e
 80164a4:	d906      	bls.n	80164b4 <is_hex+0x28>
	else if(hex > '@'  && hex > 'G') ret = hex - 'A' + 0x10;
 80164a6:	2847      	cmp	r0, #71	; 0x47
 80164a8:	d903      	bls.n	80164b2 <is_hex+0x26>
 80164aa:	3831      	subs	r0, #49	; 0x31
 80164ac:	b2c0      	uxtb	r0, r0
 80164ae:	4770      	bx	lr
	if(hex < 0x11) return 0xFF;
 80164b0:	20ff      	movs	r0, #255	; 0xff
	
	return ret;
}
 80164b2:	4770      	bx	lr
	else if(hex > '\'' && hex < 'g') ret = hex - 'a' + 0x10;
 80164b4:	3851      	subs	r0, #81	; 0x51
 80164b6:	b2c0      	uxtb	r0, r0
 80164b8:	4770      	bx	lr
 80164ba:	bf00      	nop
 80164bc:	08035eb5 	.word	0x08035eb5

080164c0 <str_to_hex>:
	return 1;
}


uint8_t str_to_hex(uint8_t * str, uint8_t * hex)
{
 80164c0:	b570      	push	{r4, r5, r6, lr}
 80164c2:	460e      	mov	r6, r1
 80164c4:	4604      	mov	r4, r0
	uint8_t i;
	uint8_t hexcnt = 0;
	uint8_t hn, ln;
	uint8_t str_tmp[2];
	uint8_t len = strlen((char *)str);
 80164c6:	f7f9 fec1 	bl	801024c <strlen>
	
	if((len & 0x01)  || (len > 16) || (*str == 0)) return 0;
 80164ca:	f010 0301 	ands.w	r3, r0, #1
 80164ce:	d135      	bne.n	801653c <str_to_hex+0x7c>
 80164d0:	b2c5      	uxtb	r5, r0
 80164d2:	2d10      	cmp	r5, #16
 80164d4:	d830      	bhi.n	8016538 <str_to_hex+0x78>
 80164d6:	7820      	ldrb	r0, [r4, #0]
 80164d8:	b368      	cbz	r0, 8016536 <str_to_hex+0x76>

	for(i = 0; i < len; i+=2)
 80164da:	b35d      	cbz	r5, 8016534 <str_to_hex+0x74>
 80164dc:	3d01      	subs	r5, #1
 80164de:	1ca3      	adds	r3, r4, #2
 80164e0:	4620      	mov	r0, r4
 80164e2:	f3c5 0546 	ubfx	r5, r5, #1, #7
 80164e6:	4c16      	ldr	r4, [pc, #88]	; (8016540 <str_to_hex+0x80>)
 80164e8:	1e71      	subs	r1, r6, #1
 80164ea:	eb03 0545 	add.w	r5, r3, r5, lsl #1
	{
		//Convert each character to uppercase
		str_tmp[0] = (uint8_t)toupper(str[i]);
 80164ee:	7802      	ldrb	r2, [r0, #0]
		str_tmp[1] = (uint8_t)toupper(str[i+1]);
 80164f0:	3002      	adds	r0, #2
		str_tmp[0] = (uint8_t)toupper(str[i]);
 80164f2:	5ca3      	ldrb	r3, [r4, r2]
 80164f4:	f003 0303 	and.w	r3, r3, #3
 80164f8:	2b02      	cmp	r3, #2
		str_tmp[1] = (uint8_t)toupper(str[i+1]);
 80164fa:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80164fe:	bf08      	it	eq
 8016500:	3a20      	subeq	r2, #32
 8016502:	5ce6      	ldrb	r6, [r4, r3]
 8016504:	bf08      	it	eq
 8016506:	b2d2      	uxtbeq	r2, r2
 8016508:	f006 0603 	and.w	r6, r6, #3
 801650c:	2e02      	cmp	r6, #2
 801650e:	bf04      	itt	eq
 8016510:	3b20      	subeq	r3, #32
 8016512:	b2db      	uxtbeq	r3, r3

		hn = str_tmp[0] > '9' ? (str_tmp[0] - 'A' + 10) : (str_tmp[0] - '0');
 8016514:	2a39      	cmp	r2, #57	; 0x39
 8016516:	bf8c      	ite	hi
 8016518:	3a37      	subhi	r2, #55	; 0x37
 801651a:	3a30      	subls	r2, #48	; 0x30
		ln = str_tmp[1] > '9' ? (str_tmp[1] - 'A' + 10) : (str_tmp[1] - '0');
 801651c:	2b39      	cmp	r3, #57	; 0x39
 801651e:	bf8c      	ite	hi
 8016520:	3b37      	subhi	r3, #55	; 0x37
 8016522:	3b30      	subls	r3, #48	; 0x30
		hn = str_tmp[0] > '9' ? (str_tmp[0] - 'A' + 10) : (str_tmp[0] - '0');
 8016524:	b2d2      	uxtb	r2, r2
		ln = str_tmp[1] > '9' ? (str_tmp[1] - 'A' + 10) : (str_tmp[1] - '0');
 8016526:	b2db      	uxtb	r3, r3

		hex[hexcnt++] = (hn << 4) | ln;
 8016528:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
	for(i = 0; i < len; i+=2)
 801652c:	4285      	cmp	r5, r0
		hex[hexcnt++] = (hn << 4) | ln;
 801652e:	f801 3f01 	strb.w	r3, [r1, #1]!
	for(i = 0; i < len; i+=2)
 8016532:	d1dc      	bne.n	80164ee <str_to_hex+0x2e>
	}

	return 1;
 8016534:	2001      	movs	r0, #1
}
 8016536:	bd70      	pop	{r4, r5, r6, pc}
	if((len & 0x01)  || (len > 16) || (*str == 0)) return 0;
 8016538:	4618      	mov	r0, r3
}
 801653a:	bd70      	pop	{r4, r5, r6, pc}
	if((len & 0x01)  || (len > 16) || (*str == 0)) return 0;
 801653c:	2000      	movs	r0, #0
}
 801653e:	bd70      	pop	{r4, r5, r6, pc}
 8016540:	08035eb5 	.word	0x08035eb5

08016544 <is_macaddr>:
	if(macstr[0] == 0 || len != 17) return 0;
 8016544:	7803      	ldrb	r3, [r0, #0]
 8016546:	2b00      	cmp	r3, #0
 8016548:	d048      	beq.n	80165dc <is_macaddr+0x98>
{
 801654a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801654e:	b084      	sub	sp, #16
 8016550:	4604      	mov	r4, r0
 8016552:	460e      	mov	r6, r1
 8016554:	4617      	mov	r7, r2
	uint8_t len = strlen((char *)macstr);
 8016556:	f7f9 fe79 	bl	801024c <strlen>
	if(macstr[0] == 0 || len != 17) return 0;
 801655a:	b2c0      	uxtb	r0, r0
 801655c:	2811      	cmp	r0, #17
 801655e:	d139      	bne.n	80165d4 <is_macaddr+0x90>
			tmp_hexstr[2] = 0;
 8016560:	f04f 0900 	mov.w	r9, #0
		if(!isxdigit(hexstr[i])) return 0;
 8016564:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80165e0 <is_macaddr+0x9c>
 8016568:	ad02      	add	r5, sp, #8
 801656a:	f104 0a12 	add.w	sl, r4, #18
		memcpy(tmp_hexstr,macstr+i*3,3);
 801656e:	78a3      	ldrb	r3, [r4, #2]
 8016570:	8822      	ldrh	r2, [r4, #0]
		if(tmp_hexstr[2] == 0 || strchr((char *)digitstr, tmp_hexstr[2]))
 8016572:	4619      	mov	r1, r3
		memcpy(tmp_hexstr,macstr+i*3,3);
 8016574:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016578:	f88d 3006 	strb.w	r3, [sp, #6]
		if(tmp_hexstr[2] == 0 || strchr((char *)digitstr, tmp_hexstr[2]))
 801657c:	b11b      	cbz	r3, 8016586 <is_macaddr+0x42>
 801657e:	4630      	mov	r0, r6
 8016580:	f019 fe9b 	bl	80302ba <strchr>
 8016584:	b330      	cbz	r0, 80165d4 <is_macaddr+0x90>
	for(i=0; i < strlen((char *)hexstr); i++)
 8016586:	a801      	add	r0, sp, #4
			tmp_hexstr[2] = 0;
 8016588:	f88d 9006 	strb.w	r9, [sp, #6]
	for(i=0; i < strlen((char *)hexstr); i++)
 801658c:	f7f9 fe5e 	bl	801024c <strlen>
 8016590:	2300      	movs	r3, #0
 8016592:	e006      	b.n	80165a2 <is_macaddr+0x5e>
		if(!isxdigit(hexstr[i])) return 0;
 8016594:	f811 2c0c 	ldrb.w	r2, [r1, #-12]
 8016598:	f812 2008 	ldrb.w	r2, [r2, r8]
 801659c:	f012 0f44 	tst.w	r2, #68	; 0x44
 80165a0:	d018      	beq.n	80165d4 <is_macaddr+0x90>
	for(i=0; i < strlen((char *)hexstr); i++)
 80165a2:	b2da      	uxtb	r2, r3
		if(!isxdigit(hexstr[i])) return 0;
 80165a4:	a904      	add	r1, sp, #16
	for(i=0; i < strlen((char *)hexstr); i++)
 80165a6:	4290      	cmp	r0, r2
		if(!isxdigit(hexstr[i])) return 0;
 80165a8:	4411      	add	r1, r2
 80165aa:	f103 0301 	add.w	r3, r3, #1
	for(i=0; i < strlen((char *)hexstr); i++)
 80165ae:	d8f1      	bhi.n	8016594 <is_macaddr+0x50>
				str_to_hex(tmp_hexstr, &tmp_mac[i]);
 80165b0:	4629      	mov	r1, r5
 80165b2:	3403      	adds	r4, #3
 80165b4:	a801      	add	r0, sp, #4
 80165b6:	f7ff ff83 	bl	80164c0 <str_to_hex>
	for( i = 0; i < 6; i++)
 80165ba:	45a2      	cmp	sl, r4
 80165bc:	f105 0501 	add.w	r5, r5, #1
 80165c0:	d1d5      	bne.n	801656e <is_macaddr+0x2a>
	memcpy(mac, tmp_mac, sizeof(tmp_mac));
 80165c2:	9802      	ldr	r0, [sp, #8]
 80165c4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80165c8:	6038      	str	r0, [r7, #0]
	return 1;
 80165ca:	2001      	movs	r0, #1
	memcpy(mac, tmp_mac, sizeof(tmp_mac));
 80165cc:	80bb      	strh	r3, [r7, #4]
}
 80165ce:	b004      	add	sp, #16
 80165d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if(macstr[0] == 0 || len != 17) return 0;
 80165d4:	2000      	movs	r0, #0
}
 80165d6:	b004      	add	sp, #16
 80165d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if(macstr[0] == 0 || len != 17) return 0;
 80165dc:	2000      	movs	r0, #0
}
 80165de:	4770      	bx	lr
 80165e0:	08035eb5 	.word	0x08035eb5

080165e4 <get_firmware_from_network.constprop.0>:
    if(any_port == 0) any_port = 50001;
    
    return any_port;
}

uint16_t get_firmware_from_network(uint8_t sock, uint8_t * buf)
 80165e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165e6:	b083      	sub	sp, #12
{
    struct __firmware_update *fwupdate = (struct __firmware_update *)&(get_DevConfig_pointer()->firmware_update);
 80165e8:	f7fd fd24 	bl	8014034 <get_DevConfig_pointer>
    uint8_t len_buf[2] = {0, };
 80165ec:	2300      	movs	r3, #0
    struct __firmware_update *fwupdate = (struct __firmware_update *)&(get_DevConfig_pointer()->firmware_update);
 80165ee:	4605      	mov	r5, r0
    uint16_t len = 0;
    uint8_t state = getSn_SR(sock);
 80165f0:	f240 7003 	movw	r0, #1795	; 0x703
    uint8_t len_buf[2] = {0, };
 80165f4:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint8_t state = getSn_SR(sock);
 80165f8:	f004 faba 	bl	801ab70 <WIZCHIP_READ>
 80165fc:	4604      	mov	r4, r0
    
    static uint32_t recv_fwsize;

    PRT_INFO("getSn_SR(sock) state = 0x%x\r\n", state);
 80165fe:	4602      	mov	r2, r0
 8016600:	4943      	ldr	r1, [pc, #268]	; (8016710 <get_firmware_from_network.constprop.0+0x12c>)
 8016602:	4844      	ldr	r0, [pc, #272]	; (8016714 <get_firmware_from_network.constprop.0+0x130>)
 8016604:	f001 fc1e 	bl	8017e44 <WIZ_SECURE_printf>
    
    switch(state)
 8016608:	2c1c      	cmp	r4, #28
 801660a:	d81d      	bhi.n	8016648 <get_firmware_from_network.constprop.0+0x64>
 801660c:	e8df f004 	tbb	[pc, r4]
 8016610:	1c1c1c0f 	.word	0x1c1c1c0f
 8016614:	1c1c1c1c 	.word	0x1c1c1c1c
 8016618:	1c1c1c1c 	.word	0x1c1c1c1c
 801661c:	1c1c1c1c 	.word	0x1c1c1c1c
 8016620:	181c1c1c 	.word	0x181c1c1c
 8016624:	231c1c18 	.word	0x231c1c18
 8016628:	1c1c1c0f 	.word	0x1c1c1c0f
 801662c:	6a          	.byte	0x6a
 801662d:	00          	.byte	0x00
            disconnect(sock);
            break;
        
        case SOCK_FIN_WAIT:
        case SOCK_CLOSED:
            if(socket(sock, Sn_MR_TCP, DEVICE_FWUP_PORT, SF_TCP_NODELAY) == sock)
 801662e:	2320      	movs	r3, #32
 8016630:	f24c 3252 	movw	r2, #50002	; 0xc352
 8016634:	2101      	movs	r1, #1
 8016636:	2003      	movs	r0, #3
 8016638:	f004 fd12 	bl	801b060 <socket>
 801663c:	2803      	cmp	r0, #3
 801663e:	d060      	beq.n	8016702 <get_firmware_from_network.constprop.0+0x11e>
    PRT_INFO("getSn_SR(sock) state = 0x%x\r\n", state);
 8016640:	2400      	movs	r4, #0
            close(sock);
            break;
    }
    
    return len;
}
 8016642:	4620      	mov	r0, r4
 8016644:	b003      	add	sp, #12
 8016646:	bdf0      	pop	{r4, r5, r6, r7, pc}
            close(sock);
 8016648:	2003      	movs	r0, #3
    uint16_t len = 0;
 801664a:	2400      	movs	r4, #0
            close(sock);
 801664c:	f004 fde2 	bl	801b214 <close>
}
 8016650:	4620      	mov	r0, r4
 8016652:	b003      	add	sp, #12
 8016654:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if(getSn_IR(sock) & Sn_IR_CON)
 8016656:	f240 7002 	movw	r0, #1794	; 0x702
 801665a:	f004 fa89 	bl	801ab70 <WIZCHIP_READ>
 801665e:	07c3      	lsls	r3, r0, #31
 8016660:	d447      	bmi.n	80166f2 <get_firmware_from_network.constprop.0+0x10e>
            if(flag_fw_from_network_timeout == SEGCP_ENABLE)
 8016662:	4e2d      	ldr	r6, [pc, #180]	; (8016718 <get_firmware_from_network.constprop.0+0x134>)
                close(sock);
 8016664:	2003      	movs	r0, #3
            if(flag_fw_from_network_timeout == SEGCP_ENABLE)
 8016666:	7833      	ldrb	r3, [r6, #0]
 8016668:	2b01      	cmp	r3, #1
 801666a:	d0ee      	beq.n	801664a <get_firmware_from_network.constprop.0+0x66>
            if((len = getSn_RX_RSR(sock)) > 0)
 801666c:	f004 fb18 	bl	801aca0 <getSn_RX_RSR>
 8016670:	2800      	cmp	r0, #0
 8016672:	d0e5      	beq.n	8016640 <get_firmware_from_network.constprop.0+0x5c>
                if(len > DATA_BUF_SIZE) len = DATA_BUF_SIZE;
 8016674:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8016678:	bf28      	it	cs
 801667a:	f44f 6000 	movcs.w	r0, #2048	; 0x800
                if(recv_fwsize + len > fwupdate->fwup_size) len = fwupdate->fwup_size - recv_fwsize; // remain
 801667e:	4f27      	ldr	r7, [pc, #156]	; (801671c <get_firmware_from_network.constprop.0+0x138>)
 8016680:	b282      	uxth	r2, r0
 8016682:	6839      	ldr	r1, [r7, #0]
 8016684:	f8d5 3106 	ldr.w	r3, [r5, #262]	; 0x106
 8016688:	1850      	adds	r0, r2, r1
 801668a:	4298      	cmp	r0, r3
 801668c:	bf84      	itt	hi
 801668e:	1a5a      	subhi	r2, r3, r1
 8016690:	b292      	uxthhi	r2, r2
                len = recv(sock, buf, len);
 8016692:	4923      	ldr	r1, [pc, #140]	; (8016720 <get_firmware_from_network.constprop.0+0x13c>)
 8016694:	2003      	movs	r0, #3
 8016696:	f005 f82b 	bl	801b6f0 <recv>
                recv_fwsize += len;
 801669a:	683b      	ldr	r3, [r7, #0]
                len_buf[0] = (uint8_t)((0xff00 & len) >> 8); // endian-independent code: Datatype translation, byte order regardless
 801669c:	fa90 fc90 	rev16.w	ip, r0
                recv_fwsize += len;
 80166a0:	fa13 f380 	uxtah	r3, r3, r0
                len = recv(sock, buf, len);
 80166a4:	4604      	mov	r4, r0
                send(sock, len_buf, 2);
 80166a6:	2202      	movs	r2, #2
 80166a8:	a901      	add	r1, sp, #4
 80166aa:	2003      	movs	r0, #3
                recv_fwsize += len;
 80166ac:	603b      	str	r3, [r7, #0]
                len_buf[0] = (uint8_t)((0xff00 & len) >> 8); // endian-independent code: Datatype translation, byte order regardless
 80166ae:	f8ad c004 	strh.w	ip, [sp, #4]
                send(sock, len_buf, 2);
 80166b2:	f004 ff31 	bl	801b518 <send>
                fw_from_network_time = 0;
 80166b6:	2300      	movs	r3, #0
                if(recv_fwsize >= fwupdate->fwup_size)
 80166b8:	f8d5 0106 	ldr.w	r0, [r5, #262]	; 0x106
 80166bc:	6839      	ldr	r1, [r7, #0]
                fw_from_network_time = 0;
 80166be:	4a19      	ldr	r2, [pc, #100]	; (8016724 <get_firmware_from_network.constprop.0+0x140>)
                if(recv_fwsize >= fwupdate->fwup_size)
 80166c0:	4288      	cmp	r0, r1
                len = recv(sock, buf, len);
 80166c2:	b2a4      	uxth	r4, r4
                fw_from_network_time = 0;
 80166c4:	8013      	strh	r3, [r2, #0]
                if(recv_fwsize >= fwupdate->fwup_size)
 80166c6:	d8bc      	bhi.n	8016642 <get_firmware_from_network.constprop.0+0x5e>
    fw_update_time = 0;
 80166c8:	4917      	ldr	r1, [pc, #92]	; (8016728 <get_firmware_from_network.constprop.0+0x144>)
    enable_fw_update_timer = SEGCP_DISABLE;
 80166ca:	4f18      	ldr	r7, [pc, #96]	; (801672c <get_firmware_from_network.constprop.0+0x148>)
    fw_update_time = 0;
 80166cc:	800b      	strh	r3, [r1, #0]
    enable_fw_from_network_timer = SEGCP_DISABLE;
 80166ce:	4d18      	ldr	r5, [pc, #96]	; (8016730 <get_firmware_from_network.constprop.0+0x14c>)
    flag_fw_update_timeout = SEGCP_DISABLE;
 80166d0:	4918      	ldr	r1, [pc, #96]	; (8016734 <get_firmware_from_network.constprop.0+0x150>)
                    disconnect(sock);
 80166d2:	2003      	movs	r0, #3
    flag_fw_from_network_timeout = SEGCP_DISABLE;
 80166d4:	7033      	strb	r3, [r6, #0]
    fw_from_network_time = 0;
 80166d6:	8013      	strh	r3, [r2, #0]
    enable_fw_update_timer = SEGCP_DISABLE;
 80166d8:	703b      	strb	r3, [r7, #0]
    enable_fw_from_network_timer = SEGCP_DISABLE;
 80166da:	702b      	strb	r3, [r5, #0]
    flag_fw_update_timeout = SEGCP_DISABLE;
 80166dc:	700b      	strb	r3, [r1, #0]
                    disconnect(sock);
 80166de:	f004 feab 	bl	801b438 <disconnect>
 80166e2:	e7ae      	b.n	8016642 <get_firmware_from_network.constprop.0+0x5e>
    uint16_t len = 0;
 80166e4:	2400      	movs	r4, #0
            disconnect(sock);
 80166e6:	2003      	movs	r0, #3
 80166e8:	f004 fea6 	bl	801b438 <disconnect>
}
 80166ec:	4620      	mov	r0, r4
 80166ee:	b003      	add	sp, #12
 80166f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                enable_fw_from_network_timer = SEGCP_ENABLE;
 80166f2:	2101      	movs	r1, #1
 80166f4:	4b0e      	ldr	r3, [pc, #56]	; (8016730 <get_firmware_from_network.constprop.0+0x14c>)
                setSn_IR(sock, Sn_IR_CON);
 80166f6:	f240 7002 	movw	r0, #1794	; 0x702
                enable_fw_from_network_timer = SEGCP_ENABLE;
 80166fa:	7019      	strb	r1, [r3, #0]
                setSn_IR(sock, Sn_IR_CON);
 80166fc:	f004 fa1a 	bl	801ab34 <WIZCHIP_WRITE>
 8016700:	e7af      	b.n	8016662 <get_firmware_from_network.constprop.0+0x7e>
                recv_fwsize = 0;
 8016702:	2300      	movs	r3, #0
 8016704:	4a05      	ldr	r2, [pc, #20]	; (801671c <get_firmware_from_network.constprop.0+0x138>)
    uint16_t len = 0;
 8016706:	461c      	mov	r4, r3
                recv_fwsize = 0;
 8016708:	6013      	str	r3, [r2, #0]
                listen(sock);
 801670a:	f004 fdbd 	bl	801b288 <listen>
 801670e:	e798      	b.n	8016642 <get_firmware_from_network.constprop.0+0x5e>
 8016710:	08032ea0 	.word	0x08032ea0
 8016714:	080323c4 	.word	0x080323c4
 8016718:	2001989a 	.word	0x2001989a
 801671c:	200198a0 	.word	0x200198a0
 8016720:	2001ddbc 	.word	0x2001ddbc
 8016724:	2001989c 	.word	0x2001989c
 8016728:	2001989e 	.word	0x2001989e
 801672c:	20019899 	.word	0x20019899
 8016730:	20019898 	.word	0x20019898
 8016734:	2001989b 	.word	0x2001989b

08016738 <device_set_factory_default>:
{
 8016738:	b508      	push	{r3, lr}
    set_DevConfig_to_factory_value();
 801673a:	f7fd fc7f 	bl	801403c <set_DevConfig_to_factory_value>
}
 801673e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    save_DevConfig_to_storage();
 8016742:	f7fd bded 	b.w	8014320 <save_DevConfig_to_storage>
 8016746:	bf00      	nop

08016748 <device_reboot>:
{
 8016748:	b510      	push	{r4, lr}
 801674a:	2400      	movs	r4, #0
        process_socket_termination(i, 100);
 801674c:	b2e0      	uxtb	r0, r4
 801674e:	2164      	movs	r1, #100	; 0x64
 8016750:	3401      	adds	r4, #1
 8016752:	f001 fd29 	bl	80181a8 <process_socket_termination>
    for(i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 8016756:	2c04      	cmp	r4, #4
 8016758:	d1f8      	bne.n	801674c <device_reboot+0x4>
        clear_data_transfer_bytecount(i, SEG_ALL);
 801675a:	4621      	mov	r1, r4
 801675c:	2000      	movs	r0, #0
 801675e:	f001 feaf 	bl	80184c0 <clear_data_transfer_bytecount>
        clear_data_transfer_megacount(i, SEG_ALL);
 8016762:	4621      	mov	r1, r4
 8016764:	2000      	movs	r0, #0
 8016766:	f001 fec3 	bl	80184f0 <clear_data_transfer_megacount>
  __ASM volatile ("dsb 0xF":::"memory");
 801676a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801676e:	4905      	ldr	r1, [pc, #20]	; (8016784 <device_reboot+0x3c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8016770:	4b05      	ldr	r3, [pc, #20]	; (8016788 <device_reboot+0x40>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8016772:	68ca      	ldr	r2, [r1, #12]
 8016774:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8016778:	4313      	orrs	r3, r2
 801677a:	60cb      	str	r3, [r1, #12]
 801677c:	f3bf 8f4f 	dsb	sy
    __NOP();
 8016780:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8016782:	e7fd      	b.n	8016780 <device_reboot+0x38>
 8016784:	e000ed00 	.word	0xe000ed00
 8016788:	05fa0004 	.word	0x05fa0004

0801678c <device_bank_update>:
{
 801678c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016790:	b083      	sub	sp, #12
    struct __firmware_update *fwupdate = (struct __firmware_update *)&(get_DevConfig_pointer()->firmware_update);
 8016792:	f7fd fc4f 	bl	8014034 <get_DevConfig_pointer>
 8016796:	4607      	mov	r7, r0
    struct __serial_common *serial_common = (struct __serial_common *)&(get_DevConfig_pointer()->serial_common);
 8016798:	f7fd fc4c 	bl	8014034 <get_DevConfig_pointer>
    if((fwupdate->fwup_size == 0) || (fwupdate->fwup_size > FLASH_USE_BANK_SIZE))
 801679c:	f8d7 2106 	ldr.w	r2, [r7, #262]	; 0x106
    struct __serial_common *serial_common = (struct __serial_common *)&(get_DevConfig_pointer()->serial_common);
 80167a0:	9001      	str	r0, [sp, #4]
    if((fwupdate->fwup_size == 0) || (fwupdate->fwup_size > FLASH_USE_BANK_SIZE))
 80167a2:	1e53      	subs	r3, r2, #1
 80167a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
        if(serial_common->serial_debug_en)
 80167a8:	f890 30e2 	ldrb.w	r3, [r0, #226]	; 0xe2
    if((fwupdate->fwup_size == 0) || (fwupdate->fwup_size > FLASH_USE_BANK_SIZE))
 80167ac:	f080 80b6 	bcs.w	801691c <device_bank_update+0x190>
    if(serial_common->serial_debug_en)
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d161      	bne.n	8016878 <device_bank_update+0xec>
    write_fw_len = 0;
 80167b4:	2200      	movs	r2, #0
 80167b6:	4e70      	ldr	r6, [pc, #448]	; (8016978 <device_bank_update+0x1ec>)
    if (fwupdate->current_bank == APP_BANK0)
 80167b8:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
    write_fw_len = 0;
 80167bc:	6032      	str	r2, [r6, #0]
    if (fwupdate->current_bank == APP_BANK0)
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d054      	beq.n	801686c <device_bank_update+0xe0>
        erase_storage(STORAGE_APPBANK0); // Erase flash blocks
 80167c2:	2007      	movs	r0, #7
 80167c4:	f000 ff9c 	bl	8017700 <erase_storage>
        f_addr = FLASH_START_ADDR_BANK0;
 80167c8:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 80169c4 <device_bank_update+0x238>
    enable_fw_update_timer = SEGCP_ENABLE;
 80167cc:	2301      	movs	r3, #1
 80167ce:	4a6b      	ldr	r2, [pc, #428]	; (801697c <device_bank_update+0x1f0>)
    uint32_t remain_len = 0, buf_len = 0;
 80167d0:	2500      	movs	r5, #0
                memcpy(g_temp_buf + buf_len, g_recv_buf, recv_len - remain_len);
 80167d2:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8016998 <device_bank_update+0x20c>
    enable_fw_update_timer = SEGCP_ENABLE;
 80167d6:	7013      	strb	r3, [r2, #0]
 80167d8:	e016      	b.n	8016808 <device_bank_update+0x7c>
                memcpy(g_temp_buf + buf_len, g_recv_buf, recv_len);
 80167da:	4622      	mov	r2, r4
 80167dc:	461d      	mov	r5, r3
 80167de:	f019 fb1b 	bl	802fe18 <memcpy>
            fw_update_time = 0; // Reset fw update timeout counter
 80167e2:	2300      	movs	r3, #0
            write_fw_len += recv_len;
 80167e4:	6830      	ldr	r0, [r6, #0]
            fw_update_time = 0; // Reset fw update timeout counter
 80167e6:	4a66      	ldr	r2, [pc, #408]	; (8016980 <device_bank_update+0x1f4>)
            write_fw_len += recv_len;
 80167e8:	4420      	add	r0, r4
            fw_update_time = 0; // Reset fw update timeout counter
 80167ea:	8013      	strh	r3, [r2, #0]
            write_fw_len += recv_len;
 80167ec:	6030      	str	r0, [r6, #0]
        if(flag_fw_update_timeout == SEGCP_ENABLE)
 80167ee:	4b65      	ldr	r3, [pc, #404]	; (8016984 <device_bank_update+0x1f8>)
        if(flag_fw_from_network_timeout == SEGCP_ENABLE)
 80167f0:	4a65      	ldr	r2, [pc, #404]	; (8016988 <device_bank_update+0x1fc>)
        if(flag_fw_update_timeout == SEGCP_ENABLE)
 80167f2:	781b      	ldrb	r3, [r3, #0]
 80167f4:	2b01      	cmp	r3, #1
 80167f6:	d044      	beq.n	8016882 <device_bank_update+0xf6>
        if(flag_fw_from_network_timeout == SEGCP_ENABLE)
 80167f8:	7813      	ldrb	r3, [r2, #0]
 80167fa:	2b01      	cmp	r3, #1
 80167fc:	d04b      	beq.n	8016896 <device_bank_update+0x10a>
    } while(write_fw_len < fwupdate->fwup_size);
 80167fe:	f8d7 3106 	ldr.w	r3, [r7, #262]	; 0x106
 8016802:	6832      	ldr	r2, [r6, #0]
 8016804:	4293      	cmp	r3, r2
 8016806:	d950      	bls.n	80168aa <device_bank_update+0x11e>
        recv_len = get_firmware_from_network(SOCK_FWUPDATE, g_recv_buf);
 8016808:	f7ff feec 	bl	80165e4 <get_firmware_from_network.constprop.0>
        if(recv_len > 0)
 801680c:	4604      	mov	r4, r0
            if (buf_len + recv_len < FLASH_BANK_PAGE_SIZE)
 801680e:	1943      	adds	r3, r0, r5
        if(recv_len > 0)
 8016810:	2800      	cmp	r0, #0
 8016812:	d0ec      	beq.n	80167ee <device_bank_update+0x62>
                remain_len = (buf_len + recv_len) - FLASH_BANK_PAGE_SIZE;
 8016814:	f5a3 5980 	sub.w	r9, r3, #4096	; 0x1000
            if (buf_len + recv_len < FLASH_BANK_PAGE_SIZE)
 8016818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
                memcpy(g_temp_buf + buf_len, g_recv_buf, recv_len - remain_len);
 801681c:	eba0 0b09 	sub.w	fp, r0, r9
 8016820:	495a      	ldr	r1, [pc, #360]	; (801698c <device_bank_update+0x200>)
 8016822:	eb08 0005 	add.w	r0, r8, r5
            if (buf_len + recv_len < FLASH_BANK_PAGE_SIZE)
 8016826:	d3d8      	bcc.n	80167da <device_bank_update+0x4e>
                memcpy(g_temp_buf + buf_len, g_recv_buf, recv_len - remain_len);
 8016828:	465a      	mov	r2, fp
 801682a:	f019 faf5 	bl	802fe18 <memcpy>
                PRT_INFO("Write_addr = 0x%08X\r\n", f_addr);
 801682e:	4652      	mov	r2, sl
 8016830:	4957      	ldr	r1, [pc, #348]	; (8016990 <device_bank_update+0x204>)
 8016832:	4858      	ldr	r0, [pc, #352]	; (8016994 <device_bank_update+0x208>)
 8016834:	f001 fb06 	bl	8017e44 <WIZ_SECURE_printf>
                err = write_flash(f_addr, (uint8_t *)g_temp_buf, FLASH_BANK_PAGE_SIZE);
 8016838:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801683c:	4650      	mov	r0, sl
 801683e:	4956      	ldr	r1, [pc, #344]	; (8016998 <device_bank_update+0x20c>)
 8016840:	f000 fcee 	bl	8017220 <write_flash>
                if (err < 0) {
 8016844:	2800      	cmp	r0, #0
 8016846:	f2c0 8087 	blt.w	8016958 <device_bank_update+0x1cc>
                memset(g_temp_buf, 0xFF, FLASH_BANK_PAGE_SIZE);
 801684a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801684e:	21ff      	movs	r1, #255	; 0xff
 8016850:	4640      	mov	r0, r8
 8016852:	f019 fb08 	bl	802fe66 <memset>
                memcpy(g_temp_buf, g_recv_buf + (recv_len - remain_len), remain_len);
 8016856:	4b4d      	ldr	r3, [pc, #308]	; (801698c <device_bank_update+0x200>)
 8016858:	464a      	mov	r2, r9
 801685a:	4640      	mov	r0, r8
 801685c:	eb03 010b 	add.w	r1, r3, fp
                buf_len = remain_len;                
 8016860:	464d      	mov	r5, r9
                memcpy(g_temp_buf, g_recv_buf + (recv_len - remain_len), remain_len);
 8016862:	f019 fad9 	bl	802fe18 <memcpy>
                f_addr += FLASH_BANK_PAGE_SIZE;
 8016866:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
                buf_len = remain_len;                
 801686a:	e7ba      	b.n	80167e2 <device_bank_update+0x56>
        erase_storage(STORAGE_APPBANK1); // Erase flash blocks
 801686c:	2008      	movs	r0, #8
 801686e:	f000 ff47 	bl	8017700 <erase_storage>
        f_addr = FLASH_START_ADDR_BANK1;
 8016872:	f8df a154 	ldr.w	sl, [pc, #340]	; 80169c8 <device_bank_update+0x23c>
 8016876:	e7a9      	b.n	80167cc <device_bank_update+0x40>
        PRT_INFO(" > SEGCP:BU_UPDATE:NETWORK - Firmware size: [%ld] bytes\r\n", fwupdate->fwup_size);
 8016878:	4945      	ldr	r1, [pc, #276]	; (8016990 <device_bank_update+0x204>)
 801687a:	4848      	ldr	r0, [pc, #288]	; (801699c <device_bank_update+0x210>)
 801687c:	f001 fae2 	bl	8017e44 <WIZ_SECURE_printf>
 8016880:	e798      	b.n	80167b4 <device_bank_update+0x28>
            if(serial_common->serial_debug_en)
 8016882:	9b01      	ldr	r3, [sp, #4]
 8016884:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8016888:	2b00      	cmp	r3, #0
 801688a:	d14d      	bne.n	8016928 <device_bank_update+0x19c>
            ret = DEVICE_FWUP_RET_FAILED;
 801688c:	2440      	movs	r4, #64	; 0x40
 801688e:	6832      	ldr	r2, [r6, #0]
 8016890:	f8d7 3106 	ldr.w	r3, [r7, #262]	; 0x106
 8016894:	e00a      	b.n	80168ac <device_bank_update+0x120>
            if(serial_common->serial_debug_en)
 8016896:	9b01      	ldr	r3, [sp, #4]
 8016898:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 801689c:	2b00      	cmp	r3, #0
 801689e:	d14b      	bne.n	8016938 <device_bank_update+0x1ac>
            ret = DEVICE_FWUP_RET_FAILED;
 80168a0:	2440      	movs	r4, #64	; 0x40
 80168a2:	6832      	ldr	r2, [r6, #0]
 80168a4:	f8d7 3106 	ldr.w	r3, [r7, #262]	; 0x106
 80168a8:	e000      	b.n	80168ac <device_bank_update+0x120>
    uint8_t ret = DEVICE_FWUP_RET_PROGRESS;
 80168aa:	2420      	movs	r4, #32
    PRT_INFO("write_fw_len = %ld, fwup_size = %ld bytes\r\n", write_fw_len, fwupdate->fwup_size);
 80168ac:	4938      	ldr	r1, [pc, #224]	; (8016990 <device_bank_update+0x204>)
 80168ae:	483c      	ldr	r0, [pc, #240]	; (80169a0 <device_bank_update+0x214>)
 80168b0:	f001 fac8 	bl	8017e44 <WIZ_SECURE_printf>
    if(write_fw_len == fwupdate->fwup_size)
 80168b4:	6833      	ldr	r3, [r6, #0]
 80168b6:	f8d7 2106 	ldr.w	r2, [r7, #262]	; 0x106
 80168ba:	429a      	cmp	r2, r3
 80168bc:	d010      	beq.n	80168e0 <device_bank_update+0x154>
    enable_fw_update_timer = SEGCP_DISABLE;
 80168be:	2300      	movs	r3, #0
    fw_update_time = 0;
 80168c0:	4a2f      	ldr	r2, [pc, #188]	; (8016980 <device_bank_update+0x1f4>)
    enable_fw_update_timer = SEGCP_DISABLE;
 80168c2:	492e      	ldr	r1, [pc, #184]	; (801697c <device_bank_update+0x1f0>)
    fw_update_time = 0;
 80168c4:	8013      	strh	r3, [r2, #0]
    enable_fw_update_timer = SEGCP_DISABLE;
 80168c6:	700b      	strb	r3, [r1, #0]
    enable_fw_from_network_timer = SEGCP_DISABLE;
 80168c8:	4d36      	ldr	r5, [pc, #216]	; (80169a4 <device_bank_update+0x218>)
    fw_from_network_time = 0;
 80168ca:	4837      	ldr	r0, [pc, #220]	; (80169a8 <device_bank_update+0x21c>)
    flag_fw_update_timeout = SEGCP_DISABLE;
 80168cc:	492d      	ldr	r1, [pc, #180]	; (8016984 <device_bank_update+0x1f8>)
    flag_fw_from_network_timeout = SEGCP_DISABLE;
 80168ce:	4a2e      	ldr	r2, [pc, #184]	; (8016988 <device_bank_update+0x1fc>)
    enable_fw_from_network_timer = SEGCP_DISABLE;
 80168d0:	702b      	strb	r3, [r5, #0]
    fw_from_network_time = 0;
 80168d2:	8003      	strh	r3, [r0, #0]
    flag_fw_update_timeout = SEGCP_DISABLE;
 80168d4:	700b      	strb	r3, [r1, #0]
    flag_fw_from_network_timeout = SEGCP_DISABLE;
 80168d6:	7013      	strb	r3, [r2, #0]
}
 80168d8:	4620      	mov	r0, r4
 80168da:	b003      	add	sp, #12
 80168dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (buf_len > 0)
 80168e0:	b17d      	cbz	r5, 8016902 <device_bank_update+0x176>
            PRT_INFO("buf_len > 0, Write_addr = 0x%08X\r\n", f_addr);
 80168e2:	4652      	mov	r2, sl
 80168e4:	492a      	ldr	r1, [pc, #168]	; (8016990 <device_bank_update+0x204>)
 80168e6:	4831      	ldr	r0, [pc, #196]	; (80169ac <device_bank_update+0x220>)
 80168e8:	f001 faac 	bl	8017e44 <WIZ_SECURE_printf>
            delay_ms(10);
 80168ec:	200a      	movs	r0, #10
 80168ee:	f001 f815 	bl	801791c <delay_ms>
            err = write_flash(f_addr, (uint8_t *)g_temp_buf, FLASH_BANK_PAGE_SIZE);
 80168f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80168f6:	4650      	mov	r0, sl
 80168f8:	4927      	ldr	r1, [pc, #156]	; (8016998 <device_bank_update+0x20c>)
 80168fa:	f000 fc91 	bl	8017220 <write_flash>
            if (err < 0) {
 80168fe:	1e02      	subs	r2, r0, #0
 8016900:	db34      	blt.n	801696c <device_bank_update+0x1e0>
        PRT_INFO(" > SEGCP:BU_UPDATE:SUCCESS\r\n");
 8016902:	4923      	ldr	r1, [pc, #140]	; (8016990 <device_bank_update+0x204>)
 8016904:	482a      	ldr	r0, [pc, #168]	; (80169b0 <device_bank_update+0x224>)
 8016906:	f001 fa9d 	bl	8017e44 <WIZ_SECURE_printf>
        fwupdate->current_bank = !fwupdate->current_bank;
 801690a:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
        ret = DEVICE_FWUP_RET_SUCCESS;
 801690e:	2480      	movs	r4, #128	; 0x80
        fwupdate->current_bank = !fwupdate->current_bank;
 8016910:	fab3 f383 	clz	r3, r3
 8016914:	095b      	lsrs	r3, r3, #5
 8016916:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
        ret = DEVICE_FWUP_RET_SUCCESS;
 801691a:	e7d0      	b.n	80168be <device_bank_update+0x132>
        if(serial_common->serial_debug_en)
 801691c:	b9a3      	cbnz	r3, 8016948 <device_bank_update+0x1bc>
        return DEVICE_FWUP_RET_FAILED;
 801691e:	2440      	movs	r4, #64	; 0x40
}
 8016920:	4620      	mov	r0, r4
 8016922:	b003      	add	sp, #12
 8016924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                printf(" > SEGCP:BU_UPDATE:FAILED - Firmware update timeout\r\n");
 8016928:	4822      	ldr	r0, [pc, #136]	; (80169b4 <device_bank_update+0x228>)
 801692a:	f019 fbe3 	bl	80300f4 <puts>
            ret = DEVICE_FWUP_RET_FAILED;
 801692e:	2440      	movs	r4, #64	; 0x40
 8016930:	6832      	ldr	r2, [r6, #0]
 8016932:	f8d7 3106 	ldr.w	r3, [r7, #262]	; 0x106
 8016936:	e7b9      	b.n	80168ac <device_bank_update+0x120>
                printf(" > SEGCP:BU_UPDATE:FAILED - Network download timeout\r\n");
 8016938:	481f      	ldr	r0, [pc, #124]	; (80169b8 <device_bank_update+0x22c>)
 801693a:	f019 fbdb 	bl	80300f4 <puts>
            ret = DEVICE_FWUP_RET_FAILED;
 801693e:	2440      	movs	r4, #64	; 0x40
 8016940:	6832      	ldr	r2, [r6, #0]
 8016942:	f8d7 3106 	ldr.w	r3, [r7, #262]	; 0x106
 8016946:	e7b1      	b.n	80168ac <device_bank_update+0x120>
            PRT_INFO(" > SEGCP:BU_UPDATE:FAILED - Invalid firmware size: %ld bytes (Firmware size must be within %d bytes)\r\n",
 8016948:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 801694c:	4910      	ldr	r1, [pc, #64]	; (8016990 <device_bank_update+0x204>)
 801694e:	481b      	ldr	r0, [pc, #108]	; (80169bc <device_bank_update+0x230>)
 8016950:	f001 fa78 	bl	8017e44 <WIZ_SECURE_printf>
        return DEVICE_FWUP_RET_FAILED;
 8016954:	2440      	movs	r4, #64	; 0x40
 8016956:	e7bf      	b.n	80168d8 <device_bank_update+0x14c>
                    PRT_ERR("write to flash fail(%d)!\n", err);
 8016958:	4602      	mov	r2, r0
 801695a:	490d      	ldr	r1, [pc, #52]	; (8016990 <device_bank_update+0x204>)
 801695c:	4818      	ldr	r0, [pc, #96]	; (80169c0 <device_bank_update+0x234>)
 801695e:	f001 fa71 	bl	8017e44 <WIZ_SECURE_printf>
                    ret = DEVICE_FWUP_RET_FAILED;
 8016962:	2440      	movs	r4, #64	; 0x40
 8016964:	6832      	ldr	r2, [r6, #0]
 8016966:	f8d7 3106 	ldr.w	r3, [r7, #262]	; 0x106
                    break;
 801696a:	e79f      	b.n	80168ac <device_bank_update+0x120>
                PRT_ERR("write to flash fail(%d)!\n", err);
 801696c:	4908      	ldr	r1, [pc, #32]	; (8016990 <device_bank_update+0x204>)
 801696e:	4814      	ldr	r0, [pc, #80]	; (80169c0 <device_bank_update+0x234>)
 8016970:	f001 fa68 	bl	8017e44 <WIZ_SECURE_printf>
                return ret;
 8016974:	2440      	movs	r4, #64	; 0x40
 8016976:	e7af      	b.n	80168d8 <device_bank_update+0x14c>
 8016978:	200198a4 	.word	0x200198a4
 801697c:	20019899 	.word	0x20019899
 8016980:	2001989e 	.word	0x2001989e
 8016984:	2001989b 	.word	0x2001989b
 8016988:	2001989a 	.word	0x2001989a
 801698c:	2001ddbc 	.word	0x2001ddbc
 8016990:	08032e8c 	.word	0x08032e8c
 8016994:	0803254c 	.word	0x0803254c
 8016998:	2001bdb8 	.word	0x2001bdb8
 801699c:	08032504 	.word	0x08032504
 80169a0:	08032598 	.word	0x08032598
 80169a4:	20019898 	.word	0x20019898
 80169a8:	2001989c 	.word	0x2001989c
 80169ac:	080325d0 	.word	0x080325d0
 80169b0:	08032600 	.word	0x08032600
 80169b4:	080323f0 	.word	0x080323f0
 80169b8:	08032428 	.word	0x08032428
 80169bc:	08032490 	.word	0x08032490
 80169c0:	08032570 	.word	0x08032570
 80169c4:	08010000 	.word	0x08010000
 80169c8:	08040000 	.word	0x08040000

080169cc <display_Dev_Info_header>:


void display_Dev_Info_header(void)
{
 80169cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80169ce:	b083      	sub	sp, #12
    DevConfig *dev_config = get_DevConfig_pointer();
 80169d0:	f7fd fb30 	bl	8014034 <get_DevConfig_pointer>
 80169d4:	4605      	mov	r5, r0

    printf("\r\n");
    PRT_INFO("%s\r\n", STR_BAR);
 80169d6:	4c16      	ldr	r4, [pc, #88]	; (8016a30 <display_Dev_Info_header+0x64>)
 80169d8:	4f16      	ldr	r7, [pc, #88]	; (8016a34 <display_Dev_Info_header+0x68>)
 80169da:	4e17      	ldr	r6, [pc, #92]	; (8016a38 <display_Dev_Info_header+0x6c>)
    printf("\r\n");
 80169dc:	4817      	ldr	r0, [pc, #92]	; (8016a3c <display_Dev_Info_header+0x70>)
 80169de:	f019 fb89 	bl	80300f4 <puts>
    PRT_INFO("%s\r\n", STR_BAR);
 80169e2:	463a      	mov	r2, r7
 80169e4:	4621      	mov	r1, r4
 80169e6:	4630      	mov	r0, r6
 80169e8:	f001 fa2c 	bl	8017e44 <WIZ_SECURE_printf>

    PRT_INFO(" %s \r\n", DEVICE_ID_DEFAULT); //PRT_INFO(" %s \r\n", dev_config->device_common.device_name);
 80169ec:	4621      	mov	r1, r4
 80169ee:	4a14      	ldr	r2, [pc, #80]	; (8016a40 <display_Dev_Info_header+0x74>)
 80169f0:	4814      	ldr	r0, [pc, #80]	; (8016a44 <display_Dev_Info_header+0x78>)
 80169f2:	f001 fa27 	bl	8017e44 <WIZ_SECURE_printf>
    PRT_INFO(" >> WIZnet Device Server\r\n");
 80169f6:	4621      	mov	r1, r4
 80169f8:	4813      	ldr	r0, [pc, #76]	; (8016a48 <display_Dev_Info_header+0x7c>)
 80169fa:	f001 fa23 	bl	8017e44 <WIZ_SECURE_printf>

    PRT_INFO(" >> Firmware version: %d.%d.%d %s\r\n", dev_config->device_common.fw_ver[0],
 80169fe:	4913      	ldr	r1, [pc, #76]	; (8016a4c <display_Dev_Info_header+0x80>)
 8016a00:	786b      	ldrb	r3, [r5, #1]
 8016a02:	782a      	ldrb	r2, [r5, #0]
 8016a04:	9101      	str	r1, [sp, #4]
 8016a06:	78a9      	ldrb	r1, [r5, #2]
 8016a08:	4811      	ldr	r0, [pc, #68]	; (8016a50 <display_Dev_Info_header+0x84>)
 8016a0a:	9100      	str	r1, [sp, #0]
 8016a0c:	4621      	mov	r1, r4
 8016a0e:	f001 fa19 	bl	8017e44 <WIZ_SECURE_printf>
                                                    dev_config->device_common.fw_ver[1],
                                                    dev_config->device_common.fw_ver[2],
                                                    STR_VERSION_STATUS);
    PRT_INFO(" >> Bank Num = %d\r\n", dev_config->firmware_update.current_bank);
 8016a12:	4621      	mov	r1, r4
 8016a14:	f895 210d 	ldrb.w	r2, [r5, #269]	; 0x10d
 8016a18:	480e      	ldr	r0, [pc, #56]	; (8016a54 <display_Dev_Info_header+0x88>)
 8016a1a:	f001 fa13 	bl	8017e44 <WIZ_SECURE_printf>
    PRT_INFO("%s\r\n", STR_BAR);
 8016a1e:	463a      	mov	r2, r7
 8016a20:	4621      	mov	r1, r4
 8016a22:	4630      	mov	r0, r6
}
 8016a24:	b003      	add	sp, #12
 8016a26:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    PRT_INFO("%s\r\n", STR_BAR);
 8016a2a:	f001 ba0b 	b.w	8017e44 <WIZ_SECURE_printf>
 8016a2e:	bf00      	nop
 8016a30:	08032ebc 	.word	0x08032ebc
 8016a34:	0803262c 	.word	0x0803262c
 8016a38:	08031b68 	.word	0x08031b68
 8016a3c:	08033678 	.word	0x08033678
 8016a40:	08031884 	.word	0x08031884
 8016a44:	08032660 	.word	0x08032660
 8016a48:	08032674 	.word	0x08032674
 8016a4c:	080326cc 	.word	0x080326cc
 8016a50:	0803269c 	.word	0x0803269c
 8016a54:	080326d4 	.word	0x080326d4

08016a58 <display_Dev_Info_main>:

// Only for Serial 1-channel device
void display_Dev_Info_main(void)
{
 8016a58:	b570      	push	{r4, r5, r6, lr}
 8016a5a:	b082      	sub	sp, #8
    uint8_t serial_mode;
    DevConfig *dev_config = get_DevConfig_pointer();
 8016a5c:	f7fd faea 	bl	8014034 <get_DevConfig_pointer>
 8016a60:	4604      	mov	r4, r0

    PRT_INFO(" - Device type: %s\r\n", dev_config->device_common.device_name);
 8016a62:	1d82      	adds	r2, r0, #6
 8016a64:	49ab      	ldr	r1, [pc, #684]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016a66:	48ac      	ldr	r0, [pc, #688]	; (8016d18 <display_Dev_Info_main+0x2c0>)
 8016a68:	f001 f9ec 	bl	8017e44 <WIZ_SECURE_printf>
    PRT_INFO(" - Device name: %s\r\n", dev_config->device_option.device_alias);
 8016a6c:	49a9      	ldr	r1, [pc, #676]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016a6e:	48ab      	ldr	r0, [pc, #684]	; (8016d1c <display_Dev_Info_main+0x2c4>)
 8016a70:	f204 42ac 	addw	r2, r4, #1196	; 0x4ac
 8016a74:	f001 f9e6 	bl	8017e44 <WIZ_SECURE_printf>
    PRT_INFO(" - Device group: %s\r\n", dev_config->device_option.device_group);
 8016a78:	49a6      	ldr	r1, [pc, #664]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016a7a:	48a9      	ldr	r0, [pc, #676]	; (8016d20 <display_Dev_Info_main+0x2c8>)
 8016a7c:	f204 42d4 	addw	r2, r4, #1236	; 0x4d4
 8016a80:	f001 f9e0 	bl	8017e44 <WIZ_SECURE_printf>

    PRT_INFO(" - Device mode: %s\r\n", str_working[dev_config->network_connection[0].working_mode]);
 8016a84:	4ba7      	ldr	r3, [pc, #668]	; (8016d24 <display_Dev_Info_main+0x2cc>)
 8016a86:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
 8016a8a:	49a2      	ldr	r1, [pc, #648]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016a8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8016a90:	48a5      	ldr	r0, [pc, #660]	; (8016d28 <display_Dev_Info_main+0x2d0>)
 8016a92:	f001 f9d7 	bl	8017e44 <WIZ_SECURE_printf>

    PRT_INFO(" - Data channel: [UART Port %d] %s mode\r\n", ((dev_config->serial_option[0].uart_interface == UART_IF_TTL) ||
 8016a96:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
 8016a9a:	4da4      	ldr	r5, [pc, #656]	; (8016d2c <display_Dev_Info_main+0x2d4>)
 8016a9c:	2a01      	cmp	r2, #1
 8016a9e:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
 8016aa2:	499c      	ldr	r1, [pc, #624]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016aa4:	bf94      	ite	ls
 8016aa6:	2200      	movls	r2, #0
 8016aa8:	2201      	movhi	r2, #1
 8016aaa:	48a1      	ldr	r0, [pc, #644]	; (8016d30 <display_Dev_Info_main+0x2d8>)
 8016aac:	f001 f9ca 	bl	8017e44 <WIZ_SECURE_printf>
                                                      (dev_config->serial_option[0].uart_interface == UART_IF_RS232))?0:1,
                                                       uart_if_table[dev_config->serial_option[0].uart_interface]);
    PRT_INFO(" - Network settings: \r\n");
 8016ab0:	4998      	ldr	r1, [pc, #608]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016ab2:	48a0      	ldr	r0, [pc, #640]	; (8016d34 <display_Dev_Info_main+0x2dc>)
 8016ab4:	f001 f9c6 	bl	8017e44 <WIZ_SECURE_printf>
        PRT_INFO("\t- Obtaining IP settings: [%s]\r\n", (dev_config->network_option.dhcp_use == 1)?"Automatic - DHCP":"Static");
 8016ab8:	4b9f      	ldr	r3, [pc, #636]	; (8016d38 <display_Dev_Info_main+0x2e0>)
 8016aba:	f894 00c7 	ldrb.w	r0, [r4, #199]	; 0xc7
 8016abe:	4a9f      	ldr	r2, [pc, #636]	; (8016d3c <display_Dev_Info_main+0x2e4>)
 8016ac0:	4994      	ldr	r1, [pc, #592]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016ac2:	2801      	cmp	r0, #1
 8016ac4:	bf18      	it	ne
 8016ac6:	461a      	movne	r2, r3
 8016ac8:	489d      	ldr	r0, [pc, #628]	; (8016d40 <display_Dev_Info_main+0x2e8>)
 8016aca:	f001 f9bb 	bl	8017e44 <WIZ_SECURE_printf>
        PRT_INFO("\t- TCP/UDP ports\r\n");
 8016ace:	4991      	ldr	r1, [pc, #580]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016ad0:	489c      	ldr	r0, [pc, #624]	; (8016d44 <display_Dev_Info_main+0x2ec>)
 8016ad2:	f001 f9b7 	bl	8017e44 <WIZ_SECURE_printf>
        PRT_INFO("\t   + S2E data port: [%d]\r\n", dev_config->network_connection[0].local_port);
 8016ad6:	f8b4 203d 	ldrh.w	r2, [r4, #61]	; 0x3d
 8016ada:	498e      	ldr	r1, [pc, #568]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016adc:	489a      	ldr	r0, [pc, #616]	; (8016d48 <display_Dev_Info_main+0x2f0>)
 8016ade:	f001 f9b1 	bl	8017e44 <WIZ_SECURE_printf>
        PRT_INFO("\t   + TCP/UDP setting port: [%d]\r\n", DEVICE_SEGCP_PORT);
 8016ae2:	f24c 3251 	movw	r2, #50001	; 0xc351
 8016ae6:	498b      	ldr	r1, [pc, #556]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016ae8:	4898      	ldr	r0, [pc, #608]	; (8016d4c <display_Dev_Info_main+0x2f4>)
 8016aea:	f001 f9ab 	bl	8017e44 <WIZ_SECURE_printf>
        PRT_INFO("\t   + Firmware update port: [%d]\r\n", DEVICE_FWUP_PORT);
 8016aee:	f24c 3252 	movw	r2, #50002	; 0xc352
 8016af2:	4988      	ldr	r1, [pc, #544]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016af4:	4896      	ldr	r0, [pc, #600]	; (8016d50 <display_Dev_Info_main+0x2f8>)
 8016af6:	f001 f9a5 	bl	8017e44 <WIZ_SECURE_printf>
        PRT_INFO("\t- TCP Retransmission retry: [%d]\r\n", getRCR());
 8016afa:	2019      	movs	r0, #25
 8016afc:	f004 f838 	bl	801ab70 <WIZCHIP_READ>
 8016b00:	4984      	ldr	r1, [pc, #528]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016b02:	4602      	mov	r2, r0
 8016b04:	4893      	ldr	r0, [pc, #588]	; (8016d54 <display_Dev_Info_main+0x2fc>)
 8016b06:	f001 f99d 	bl	8017e44 <WIZ_SECURE_printf>

    PRT_INFO(" - Search ID code: \r\n");
 8016b0a:	4982      	ldr	r1, [pc, #520]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016b0c:	4892      	ldr	r0, [pc, #584]	; (8016d58 <display_Dev_Info_main+0x300>)
 8016b0e:	f001 f999 	bl	8017e44 <WIZ_SECURE_printf>
        PRT_INFO("\t- %s: [%s]\r\n", (dev_config->config_common.pw_search[0] != 0)?"Enabled":"Disabled", (dev_config->config_common.pw_search[0] != 0)?dev_config->config_common.pw_search:"None");
 8016b12:	7fe3      	ldrb	r3, [r4, #31]
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	f040 80f8 	bne.w	8016d0a <display_Dev_Info_main+0x2b2>
 8016b1a:	4a90      	ldr	r2, [pc, #576]	; (8016d5c <display_Dev_Info_main+0x304>)
 8016b1c:	4b90      	ldr	r3, [pc, #576]	; (8016d60 <display_Dev_Info_main+0x308>)
 8016b1e:	497d      	ldr	r1, [pc, #500]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016b20:	4890      	ldr	r0, [pc, #576]	; (8016d64 <display_Dev_Info_main+0x30c>)
 8016b22:	f001 f98f 	bl	8017e44 <WIZ_SECURE_printf>

    PRT_INFO(" - Ethernet connection password: \r\n");
 8016b26:	497b      	ldr	r1, [pc, #492]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016b28:	488f      	ldr	r0, [pc, #572]	; (8016d68 <display_Dev_Info_main+0x310>)
 8016b2a:	f001 f98b 	bl	8017e44 <WIZ_SECURE_printf>
        PRT_INFO("\t- %s %s\r\n", (dev_config->tcp_option[0].pw_connect_en == 1)?"Enabled":"Disabled", "(TCP server / mixed mode only)");
 8016b2e:	4e8b      	ldr	r6, [pc, #556]	; (8016d5c <display_Dev_Info_main+0x304>)
 8016b30:	f894 10e0 	ldrb.w	r1, [r4, #224]	; 0xe0
 8016b34:	4a8d      	ldr	r2, [pc, #564]	; (8016d6c <display_Dev_Info_main+0x314>)
 8016b36:	4b8e      	ldr	r3, [pc, #568]	; (8016d70 <display_Dev_Info_main+0x318>)
 8016b38:	2901      	cmp	r1, #1
 8016b3a:	bf18      	it	ne
 8016b3c:	4632      	movne	r2, r6
 8016b3e:	488d      	ldr	r0, [pc, #564]	; (8016d74 <display_Dev_Info_main+0x31c>)
 8016b40:	4974      	ldr	r1, [pc, #464]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016b42:	f001 f97f 	bl	8017e44 <WIZ_SECURE_printf>

    PRT_INFO(" - Connection timer settings: \r\n");
 8016b46:	4973      	ldr	r1, [pc, #460]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016b48:	488b      	ldr	r0, [pc, #556]	; (8016d78 <display_Dev_Info_main+0x320>)
 8016b4a:	f001 f97b 	bl	8017e44 <WIZ_SECURE_printf>
        PRT_INFO("\t- Inactivity timer: ");
 8016b4e:	4971      	ldr	r1, [pc, #452]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016b50:	488a      	ldr	r0, [pc, #552]	; (8016d7c <display_Dev_Info_main+0x324>)
 8016b52:	f001 f977 	bl	8017e44 <WIZ_SECURE_printf>
            if(dev_config->tcp_option[0].inactivity) PRT_INFO("[%d] (sec)\r\n", dev_config->tcp_option[0].inactivity);
 8016b56:	f8b4 20cd 	ldrh.w	r2, [r4, #205]	; 0xcd
 8016b5a:	2a00      	cmp	r2, #0
 8016b5c:	f000 80cf 	beq.w	8016cfe <display_Dev_Info_main+0x2a6>
 8016b60:	496c      	ldr	r1, [pc, #432]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016b62:	4887      	ldr	r0, [pc, #540]	; (8016d80 <display_Dev_Info_main+0x328>)
 8016b64:	f001 f96e 	bl	8017e44 <WIZ_SECURE_printf>
            else PRT_INFO("%s\r\n", STR_DISABLED);
        PRT_INFO("\t- Reconnect interval: ");
 8016b68:	496a      	ldr	r1, [pc, #424]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016b6a:	4886      	ldr	r0, [pc, #536]	; (8016d84 <display_Dev_Info_main+0x32c>)
 8016b6c:	f001 f96a 	bl	8017e44 <WIZ_SECURE_printf>
            if(dev_config->tcp_option[0].reconnection) PRT_INFO("[%d] (msec)\r\n", dev_config->tcp_option[0].reconnection);
 8016b70:	f8b4 20cf 	ldrh.w	r2, [r4, #207]	; 0xcf
 8016b74:	2a00      	cmp	r2, #0
 8016b76:	f000 80b0 	beq.w	8016cda <display_Dev_Info_main+0x282>
 8016b7a:	4966      	ldr	r1, [pc, #408]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016b7c:	4882      	ldr	r0, [pc, #520]	; (8016d88 <display_Dev_Info_main+0x330>)
 8016b7e:	f001 f961 	bl	8017e44 <WIZ_SECURE_printf>
            else PRT_INFO("%s\r\n", STR_DISABLED);

    PRT_INFO(" - Serial settings: \r\n");
 8016b82:	4964      	ldr	r1, [pc, #400]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016b84:	4881      	ldr	r0, [pc, #516]	; (8016d8c <display_Dev_Info_main+0x334>)
 8016b86:	f001 f95d 	bl	8017e44 <WIZ_SECURE_printf>

        //todo:
        PRT_INFO("\t- Communication Protocol: ");
 8016b8a:	4881      	ldr	r0, [pc, #516]	; (8016d90 <display_Dev_Info_main+0x338>)
 8016b8c:	4961      	ldr	r1, [pc, #388]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016b8e:	f001 f959 	bl	8017e44 <WIZ_SECURE_printf>
        serial_mode = get_serial_communation_protocol(0);
 8016b92:	2000      	movs	r0, #0
 8016b94:	f001 fafe 	bl	8018194 <get_serial_communation_protocol>
        if(serial_mode)
 8016b98:	2800      	cmp	r0, #0
 8016b9a:	f000 814a 	beq.w	8016e32 <display_Dev_Info_main+0x3da>
            PRT_INFO("[%s]\r\n", (serial_mode == SEG_SERIAL_MODBUS_RTU) ? STR_MODBUS_RTU:STR_MODBUS_ASCII);
 8016b9e:	4a7d      	ldr	r2, [pc, #500]	; (8016d94 <display_Dev_Info_main+0x33c>)
 8016ba0:	4b7d      	ldr	r3, [pc, #500]	; (8016d98 <display_Dev_Info_main+0x340>)
 8016ba2:	495c      	ldr	r1, [pc, #368]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016ba4:	2801      	cmp	r0, #1
 8016ba6:	bf18      	it	ne
 8016ba8:	461a      	movne	r2, r3
 8016baa:	487c      	ldr	r0, [pc, #496]	; (8016d9c <display_Dev_Info_main+0x344>)
 8016bac:	f001 f94a 	bl	8017e44 <WIZ_SECURE_printf>
        else
            PRT_INFO("[%s]\r\n", STR_DISABLED);

        PRT_INFO("\t- Data %s port:\r\n", STR_UART);
 8016bb0:	4a7b      	ldr	r2, [pc, #492]	; (8016da0 <display_Dev_Info_main+0x348>)
 8016bb2:	4958      	ldr	r1, [pc, #352]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016bb4:	487b      	ldr	r0, [pc, #492]	; (8016da4 <display_Dev_Info_main+0x34c>)
 8016bb6:	f001 f945 	bl	8017e44 <WIZ_SECURE_printf>
        PRT_INFO("\t   + UART IF: [%s]\r\n", uart_if_table[dev_config->serial_option[0].uart_interface]);
 8016bba:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
 8016bbe:	4955      	ldr	r1, [pc, #340]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016bc0:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8016bc4:	4878      	ldr	r0, [pc, #480]	; (8016da8 <display_Dev_Info_main+0x350>)
 8016bc6:	f001 f93d 	bl	8017e44 <WIZ_SECURE_printf>
        PRT_INFO("\t   + %ld-", baud_table[dev_config->serial_option[0].baud_rate]);
 8016bca:	4b78      	ldr	r3, [pc, #480]	; (8016dac <display_Dev_Info_main+0x354>)
 8016bcc:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
 8016bd0:	4950      	ldr	r1, [pc, #320]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016bd2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8016bd6:	4876      	ldr	r0, [pc, #472]	; (8016db0 <display_Dev_Info_main+0x358>)
 8016bd8:	f001 f934 	bl	8017e44 <WIZ_SECURE_printf>
        PRT_INFO("%d-", word_len_table[dev_config->serial_option[0].data_bits]);
 8016bdc:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 8016be0:	4a74      	ldr	r2, [pc, #464]	; (8016db4 <display_Dev_Info_main+0x35c>)
 8016be2:	494c      	ldr	r1, [pc, #304]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016be4:	5cd2      	ldrb	r2, [r2, r3]
 8016be6:	4874      	ldr	r0, [pc, #464]	; (8016db8 <display_Dev_Info_main+0x360>)
 8016be8:	f001 f92c 	bl	8017e44 <WIZ_SECURE_printf>
        PRT_INFO("%s-", parity_table[dev_config->serial_option[0].parity]);
 8016bec:	4b73      	ldr	r3, [pc, #460]	; (8016dbc <display_Dev_Info_main+0x364>)
 8016bee:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
 8016bf2:	4948      	ldr	r1, [pc, #288]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016bf4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8016bf8:	4871      	ldr	r0, [pc, #452]	; (8016dc0 <display_Dev_Info_main+0x368>)
 8016bfa:	f001 f923 	bl	8017e44 <WIZ_SECURE_printf>
        PRT_INFO("%d / ", stop_bit_table[dev_config->serial_option[0].stop_bits]);
 8016bfe:	f894 30ed 	ldrb.w	r3, [r4, #237]	; 0xed
 8016c02:	4a70      	ldr	r2, [pc, #448]	; (8016dc4 <display_Dev_Info_main+0x36c>)
 8016c04:	4943      	ldr	r1, [pc, #268]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016c06:	5cd2      	ldrb	r2, [r2, r3]
 8016c08:	486f      	ldr	r0, [pc, #444]	; (8016dc8 <display_Dev_Info_main+0x370>)
 8016c0a:	f001 f91b 	bl	8017e44 <WIZ_SECURE_printf>
        if((dev_config->serial_option[0].uart_interface == UART_IF_TTL) || (dev_config->serial_option[0].uart_interface == UART_IF_RS232))
 8016c0e:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
 8016c12:	2b01      	cmp	r3, #1
 8016c14:	f240 8113 	bls.w	8016e3e <display_Dev_Info_main+0x3e6>
        {
            PRT_INFO("Flow control: %s", flow_ctrl_table[dev_config->serial_option[0].flow_control]);
        }
        else if((dev_config->serial_option[0].uart_interface == UART_IF_RS422) || (dev_config->serial_option[0].uart_interface == UART_IF_RS485))
 8016c18:	3b02      	subs	r3, #2
 8016c1a:	2b01      	cmp	r3, #1
 8016c1c:	f240 80f6 	bls.w	8016e0c <display_Dev_Info_main+0x3b4>
            else
            {
                PRT_INFO("Flow control: %s", flow_ctrl_table[0]); // RS-422/485; flow control - NONE only
            }
        }
        PRT_INFO("\r\n");
 8016c20:	493c      	ldr	r1, [pc, #240]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016c22:	486a      	ldr	r0, [pc, #424]	; (8016dcc <display_Dev_Info_main+0x374>)
 8016c24:	f001 f90e 	bl	8017e44 <WIZ_SECURE_printf>

        PRT_INFO("\t- Debug %s port:\r\n", STR_UART);
 8016c28:	4a5d      	ldr	r2, [pc, #372]	; (8016da0 <display_Dev_Info_main+0x348>)
 8016c2a:	493a      	ldr	r1, [pc, #232]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016c2c:	4868      	ldr	r0, [pc, #416]	; (8016dd0 <display_Dev_Info_main+0x378>)
 8016c2e:	f001 f909 	bl	8017e44 <WIZ_SECURE_printf>
        PRT_INFO("\t   + %s / %s %s\r\n", "115200-8-N-1", "NONE", "(fixed)");
 8016c32:	4a68      	ldr	r2, [pc, #416]	; (8016dd4 <display_Dev_Info_main+0x37c>)
 8016c34:	4b68      	ldr	r3, [pc, #416]	; (8016dd8 <display_Dev_Info_main+0x380>)
 8016c36:	4937      	ldr	r1, [pc, #220]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016c38:	4868      	ldr	r0, [pc, #416]	; (8016ddc <display_Dev_Info_main+0x384>)
 8016c3a:	9200      	str	r2, [sp, #0]
 8016c3c:	4a68      	ldr	r2, [pc, #416]	; (8016de0 <display_Dev_Info_main+0x388>)
 8016c3e:	f001 f901 	bl	8017e44 <WIZ_SECURE_printf>

    PRT_INFO(" - Serial data packing options:\r\n");
 8016c42:	4934      	ldr	r1, [pc, #208]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016c44:	4867      	ldr	r0, [pc, #412]	; (8016de4 <display_Dev_Info_main+0x38c>)
 8016c46:	f001 f8fd 	bl	8017e44 <WIZ_SECURE_printf>
        PRT_INFO("\t- Time: ");
 8016c4a:	4932      	ldr	r1, [pc, #200]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016c4c:	4866      	ldr	r0, [pc, #408]	; (8016de8 <display_Dev_Info_main+0x390>)
 8016c4e:	f001 f8f9 	bl	8017e44 <WIZ_SECURE_printf>
            if(dev_config->serial_data_packing[0].packing_time) PRT_INFO("[%d] (msec)\r\n", dev_config->serial_data_packing[0].packing_time);
 8016c52:	f8b4 20f1 	ldrh.w	r2, [r4, #241]	; 0xf1
 8016c56:	2a00      	cmp	r2, #0
 8016c58:	d04b      	beq.n	8016cf2 <display_Dev_Info_main+0x29a>
 8016c5a:	492e      	ldr	r1, [pc, #184]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016c5c:	484a      	ldr	r0, [pc, #296]	; (8016d88 <display_Dev_Info_main+0x330>)
 8016c5e:	f001 f8f1 	bl	8017e44 <WIZ_SECURE_printf>
            else PRT_INFO("%s\r\n", STR_DISABLED);
        PRT_INFO("\t- Size: ");
 8016c62:	492c      	ldr	r1, [pc, #176]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016c64:	4861      	ldr	r0, [pc, #388]	; (8016dec <display_Dev_Info_main+0x394>)
 8016c66:	f001 f8ed 	bl	8017e44 <WIZ_SECURE_printf>
            if(dev_config->serial_data_packing[0].packing_size) PRT_INFO("[%d] (bytes)\r\n", dev_config->serial_data_packing[0].packing_size);
 8016c6a:	f8b4 20f3 	ldrh.w	r2, [r4, #243]	; 0xf3
 8016c6e:	2a00      	cmp	r2, #0
 8016c70:	d039      	beq.n	8016ce6 <display_Dev_Info_main+0x28e>
 8016c72:	4928      	ldr	r1, [pc, #160]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016c74:	485e      	ldr	r0, [pc, #376]	; (8016df0 <display_Dev_Info_main+0x398>)
 8016c76:	f001 f8e5 	bl	8017e44 <WIZ_SECURE_printf>
            else PRT_INFO("%s\r\n", STR_DISABLED);
        PRT_INFO("\t- Char: ");
 8016c7a:	4926      	ldr	r1, [pc, #152]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016c7c:	485d      	ldr	r0, [pc, #372]	; (8016df4 <display_Dev_Info_main+0x39c>)
 8016c7e:	f001 f8e1 	bl	8017e44 <WIZ_SECURE_printf>
            if(dev_config->serial_data_packing[0].packing_delimiter_length == 1) PRT_INFO("[%.2X] (hex only)\r\n", dev_config->serial_data_packing[0].packing_delimiter[0]);
 8016c82:	f894 30f9 	ldrb.w	r3, [r4, #249]	; 0xf9
 8016c86:	2b01      	cmp	r3, #1
 8016c88:	f000 80cc 	beq.w	8016e24 <display_Dev_Info_main+0x3cc>
            else PRT_INFO("%s\r\n", STR_DISABLED);
 8016c8c:	4a33      	ldr	r2, [pc, #204]	; (8016d5c <display_Dev_Info_main+0x304>)
 8016c8e:	4921      	ldr	r1, [pc, #132]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016c90:	4859      	ldr	r0, [pc, #356]	; (8016df8 <display_Dev_Info_main+0x3a0>)
 8016c92:	f001 f8d7 	bl	8017e44 <WIZ_SECURE_printf>

        PRT_INFO(" - Serial command mode switch code:\r\n");
 8016c96:	491f      	ldr	r1, [pc, #124]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016c98:	4858      	ldr	r0, [pc, #352]	; (8016dfc <display_Dev_Info_main+0x3a4>)
 8016c9a:	f001 f8d3 	bl	8017e44 <WIZ_SECURE_printf>
        PRT_INFO("\t- %s\r\n", (dev_config->serial_command.serial_command == 1)?STR_ENABLED:STR_DISABLED);
 8016c9e:	f894 00e3 	ldrb.w	r0, [r4, #227]	; 0xe3
 8016ca2:	4b2e      	ldr	r3, [pc, #184]	; (8016d5c <display_Dev_Info_main+0x304>)
 8016ca4:	4a31      	ldr	r2, [pc, #196]	; (8016d6c <display_Dev_Info_main+0x314>)
 8016ca6:	491b      	ldr	r1, [pc, #108]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016ca8:	2801      	cmp	r0, #1
 8016caa:	bf18      	it	ne
 8016cac:	461a      	movne	r2, r3
 8016cae:	4854      	ldr	r0, [pc, #336]	; (8016e00 <display_Dev_Info_main+0x3a8>)
 8016cb0:	f001 f8c8 	bl	8017e44 <WIZ_SECURE_printf>
        PRT_INFO("\t- [%.2X][%.2X][%.2X] (Hex only)\r\n",
 8016cb4:	f894 10e6 	ldrb.w	r1, [r4, #230]	; 0xe6
 8016cb8:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
 8016cbc:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
 8016cc0:	4850      	ldr	r0, [pc, #320]	; (8016e04 <display_Dev_Info_main+0x3ac>)
 8016cc2:	9100      	str	r1, [sp, #0]
 8016cc4:	4913      	ldr	r1, [pc, #76]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016cc6:	f001 f8bd 	bl	8017e44 <WIZ_SECURE_printf>
        PRT_INFO("\t- UserIO B: [%s] - %s / %s\r\n", "PC_12", USER_IO_TYPE_STR[get_user_io_type(USER_IO_SEL[1])], USER_IO_DIR_STR[get_user_io_direction(USER_IO_SEL[1])]);
        PRT_INFO("\t- UserIO C: [%s] - %s / %s\r\n", "PC_09", USER_IO_TYPE_STR[get_user_io_type(USER_IO_SEL[2])], USER_IO_DIR_STR[get_user_io_direction(USER_IO_SEL[2])]);
        PRT_INFO("\t- UserIO D: [%s] - %s / %s\r\n", "PC_08", USER_IO_TYPE_STR[get_user_io_type(USER_IO_SEL[3])], USER_IO_DIR_STR[get_user_io_direction(USER_IO_SEL[3])]);
#endif

    PRT_INFO("%s\r\n", STR_BAR);
 8016cca:	4a4f      	ldr	r2, [pc, #316]	; (8016e08 <display_Dev_Info_main+0x3b0>)
 8016ccc:	4911      	ldr	r1, [pc, #68]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016cce:	484a      	ldr	r0, [pc, #296]	; (8016df8 <display_Dev_Info_main+0x3a0>)
}
 8016cd0:	b002      	add	sp, #8
 8016cd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    PRT_INFO("%s\r\n", STR_BAR);
 8016cd6:	f001 b8b5 	b.w	8017e44 <WIZ_SECURE_printf>
            else PRT_INFO("%s\r\n", STR_DISABLED);
 8016cda:	4a20      	ldr	r2, [pc, #128]	; (8016d5c <display_Dev_Info_main+0x304>)
 8016cdc:	490d      	ldr	r1, [pc, #52]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016cde:	4846      	ldr	r0, [pc, #280]	; (8016df8 <display_Dev_Info_main+0x3a0>)
 8016ce0:	f001 f8b0 	bl	8017e44 <WIZ_SECURE_printf>
 8016ce4:	e74d      	b.n	8016b82 <display_Dev_Info_main+0x12a>
            else PRT_INFO("%s\r\n", STR_DISABLED);
 8016ce6:	4a1d      	ldr	r2, [pc, #116]	; (8016d5c <display_Dev_Info_main+0x304>)
 8016ce8:	490a      	ldr	r1, [pc, #40]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016cea:	4843      	ldr	r0, [pc, #268]	; (8016df8 <display_Dev_Info_main+0x3a0>)
 8016cec:	f001 f8aa 	bl	8017e44 <WIZ_SECURE_printf>
 8016cf0:	e7c3      	b.n	8016c7a <display_Dev_Info_main+0x222>
            else PRT_INFO("%s\r\n", STR_DISABLED);
 8016cf2:	4a1a      	ldr	r2, [pc, #104]	; (8016d5c <display_Dev_Info_main+0x304>)
 8016cf4:	4907      	ldr	r1, [pc, #28]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016cf6:	4840      	ldr	r0, [pc, #256]	; (8016df8 <display_Dev_Info_main+0x3a0>)
 8016cf8:	f001 f8a4 	bl	8017e44 <WIZ_SECURE_printf>
 8016cfc:	e7b1      	b.n	8016c62 <display_Dev_Info_main+0x20a>
            else PRT_INFO("%s\r\n", STR_DISABLED);
 8016cfe:	4632      	mov	r2, r6
 8016d00:	4904      	ldr	r1, [pc, #16]	; (8016d14 <display_Dev_Info_main+0x2bc>)
 8016d02:	483d      	ldr	r0, [pc, #244]	; (8016df8 <display_Dev_Info_main+0x3a0>)
 8016d04:	f001 f89e 	bl	8017e44 <WIZ_SECURE_printf>
 8016d08:	e72e      	b.n	8016b68 <display_Dev_Info_main+0x110>
        PRT_INFO("\t- %s: [%s]\r\n", (dev_config->config_common.pw_search[0] != 0)?"Enabled":"Disabled", (dev_config->config_common.pw_search[0] != 0)?dev_config->config_common.pw_search:"None");
 8016d0a:	4a18      	ldr	r2, [pc, #96]	; (8016d6c <display_Dev_Info_main+0x314>)
 8016d0c:	f104 031f 	add.w	r3, r4, #31
 8016d10:	e705      	b.n	8016b1e <display_Dev_Info_main+0xc6>
 8016d12:	bf00      	nop
 8016d14:	08032ed4 	.word	0x08032ed4
 8016d18:	08032744 	.word	0x08032744
 8016d1c:	08032768 	.word	0x08032768
 8016d20:	0803278c 	.word	0x0803278c
 8016d24:	2001821c 	.word	0x2001821c
 8016d28:	080327b0 	.word	0x080327b0
 8016d2c:	200181f8 	.word	0x200181f8
 8016d30:	080327d4 	.word	0x080327d4
 8016d34:	0803280c 	.word	0x0803280c
 8016d38:	08032708 	.word	0x08032708
 8016d3c:	080326f4 	.word	0x080326f4
 8016d40:	08032830 	.word	0x08032830
 8016d44:	08032860 	.word	0x08032860
 8016d48:	08032880 	.word	0x08032880
 8016d4c:	080328a8 	.word	0x080328a8
 8016d50:	080328d8 	.word	0x080328d8
 8016d54:	08032908 	.word	0x08032908
 8016d58:	08032938 	.word	0x08032938
 8016d5c:	08032718 	.word	0x08032718
 8016d60:	08032724 	.word	0x08032724
 8016d64:	0803295c 	.word	0x0803295c
 8016d68:	08032978 	.word	0x08032978
 8016d6c:	08032710 	.word	0x08032710
 8016d70:	080329a8 	.word	0x080329a8
 8016d74:	080329c8 	.word	0x080329c8
 8016d78:	080329e0 	.word	0x080329e0
 8016d7c:	08032a10 	.word	0x08032a10
 8016d80:	08032a34 	.word	0x08032a34
 8016d84:	08032a50 	.word	0x08032a50
 8016d88:	08032a74 	.word	0x08032a74
 8016d8c:	08032a90 	.word	0x08032a90
 8016d90:	08032ab4 	.word	0x08032ab4
 8016d94:	0803272c 	.word	0x0803272c
 8016d98:	08032738 	.word	0x08032738
 8016d9c:	08032adc 	.word	0x08032adc
 8016da0:	08032af0 	.word	0x08032af0
 8016da4:	08032af8 	.word	0x08032af8
 8016da8:	08032b18 	.word	0x08032b18
 8016dac:	20018198 	.word	0x20018198
 8016db0:	08032b3c 	.word	0x08032b3c
 8016db4:	20018208 	.word	0x20018208
 8016db8:	08032b54 	.word	0x08032b54
 8016dbc:	200181e8 	.word	0x200181e8
 8016dc0:	08032b64 	.word	0x08032b64
 8016dc4:	200181f4 	.word	0x200181f4
 8016dc8:	08032b74 	.word	0x08032b74
 8016dcc:	08031a40 	.word	0x08031a40
 8016dd0:	08032ba8 	.word	0x08032ba8
 8016dd4:	08032c00 	.word	0x08032c00
 8016dd8:	08032bc8 	.word	0x08032bc8
 8016ddc:	08032be0 	.word	0x08032be0
 8016de0:	08032bd0 	.word	0x08032bd0
 8016de4:	08032c08 	.word	0x08032c08
 8016de8:	08032c38 	.word	0x08032c38
 8016dec:	08032c50 	.word	0x08032c50
 8016df0:	08032c68 	.word	0x08032c68
 8016df4:	08032c84 	.word	0x08032c84
 8016df8:	08031b68 	.word	0x08031b68
 8016dfc:	08032cbc 	.word	0x08032cbc
 8016e00:	08032cf0 	.word	0x08032cf0
 8016e04:	08032d04 	.word	0x08032d04
 8016e08:	0803262c 	.word	0x0803262c
            if((dev_config->serial_option[0].flow_control == flow_rtsonly) || (dev_config->serial_option[0].flow_control == flow_reverserts))
 8016e0c:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
 8016e10:	1eda      	subs	r2, r3, #3
 8016e12:	2a01      	cmp	r2, #1
 8016e14:	d91d      	bls.n	8016e52 <display_Dev_Info_main+0x3fa>
                PRT_INFO("Flow control: %s", flow_ctrl_table[0]); // RS-422/485; flow control - NONE only
 8016e16:	4b13      	ldr	r3, [pc, #76]	; (8016e64 <display_Dev_Info_main+0x40c>)
 8016e18:	4913      	ldr	r1, [pc, #76]	; (8016e68 <display_Dev_Info_main+0x410>)
 8016e1a:	681a      	ldr	r2, [r3, #0]
 8016e1c:	4813      	ldr	r0, [pc, #76]	; (8016e6c <display_Dev_Info_main+0x414>)
 8016e1e:	f001 f811 	bl	8017e44 <WIZ_SECURE_printf>
 8016e22:	e6fd      	b.n	8016c20 <display_Dev_Info_main+0x1c8>
            if(dev_config->serial_data_packing[0].packing_delimiter_length == 1) PRT_INFO("[%.2X] (hex only)\r\n", dev_config->serial_data_packing[0].packing_delimiter[0]);
 8016e24:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
 8016e28:	490f      	ldr	r1, [pc, #60]	; (8016e68 <display_Dev_Info_main+0x410>)
 8016e2a:	4811      	ldr	r0, [pc, #68]	; (8016e70 <display_Dev_Info_main+0x418>)
 8016e2c:	f001 f80a 	bl	8017e44 <WIZ_SECURE_printf>
 8016e30:	e731      	b.n	8016c96 <display_Dev_Info_main+0x23e>
            PRT_INFO("[%s]\r\n", STR_DISABLED);
 8016e32:	4a10      	ldr	r2, [pc, #64]	; (8016e74 <display_Dev_Info_main+0x41c>)
 8016e34:	490c      	ldr	r1, [pc, #48]	; (8016e68 <display_Dev_Info_main+0x410>)
 8016e36:	4810      	ldr	r0, [pc, #64]	; (8016e78 <display_Dev_Info_main+0x420>)
 8016e38:	f001 f804 	bl	8017e44 <WIZ_SECURE_printf>
 8016e3c:	e6b8      	b.n	8016bb0 <display_Dev_Info_main+0x158>
            PRT_INFO("Flow control: %s", flow_ctrl_table[dev_config->serial_option[0].flow_control]);
 8016e3e:	4b09      	ldr	r3, [pc, #36]	; (8016e64 <display_Dev_Info_main+0x40c>)
 8016e40:	f894 20ee 	ldrb.w	r2, [r4, #238]	; 0xee
 8016e44:	4908      	ldr	r1, [pc, #32]	; (8016e68 <display_Dev_Info_main+0x410>)
 8016e46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8016e4a:	4808      	ldr	r0, [pc, #32]	; (8016e6c <display_Dev_Info_main+0x414>)
 8016e4c:	f000 fffa 	bl	8017e44 <WIZ_SECURE_printf>
 8016e50:	e6e6      	b.n	8016c20 <display_Dev_Info_main+0x1c8>
                PRT_INFO("Flow control: %s", flow_ctrl_table[dev_config->serial_option[0].flow_control]);
 8016e52:	4a04      	ldr	r2, [pc, #16]	; (8016e64 <display_Dev_Info_main+0x40c>)
 8016e54:	4904      	ldr	r1, [pc, #16]	; (8016e68 <display_Dev_Info_main+0x410>)
 8016e56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8016e5a:	4804      	ldr	r0, [pc, #16]	; (8016e6c <display_Dev_Info_main+0x414>)
 8016e5c:	f000 fff2 	bl	8017e44 <WIZ_SECURE_printf>
 8016e60:	e6de      	b.n	8016c20 <display_Dev_Info_main+0x1c8>
 8016e62:	bf00      	nop
 8016e64:	200181d8 	.word	0x200181d8
 8016e68:	08032ed4 	.word	0x08032ed4
 8016e6c:	08032b88 	.word	0x08032b88
 8016e70:	08032c9c 	.word	0x08032c9c
 8016e74:	08032718 	.word	0x08032718
 8016e78:	08032adc 	.word	0x08032adc

08016e7c <display_Dev_Info_dhcp>:


void display_Dev_Info_dhcp(void)
{
 8016e7c:	b508      	push	{r3, lr}
    DevConfig *dev_config = get_DevConfig_pointer();
 8016e7e:	f7fd f8d9 	bl	8014034 <get_DevConfig_pointer>

    if(dev_config->network_option.dhcp_use)
 8016e82:	f890 30c7 	ldrb.w	r3, [r0, #199]	; 0xc7
 8016e86:	b14b      	cbz	r3, 8016e9c <display_Dev_Info_dhcp+0x20>
    {
        if(flag_process_dhcp_success == ON) PRT_INFO(" # DHCP IP Leased time : %ld seconds\r\n", getDHCPLeasetime());
 8016e88:	4b09      	ldr	r3, [pc, #36]	; (8016eb0 <display_Dev_Info_dhcp+0x34>)
 8016e8a:	781b      	ldrb	r3, [r3, #0]
 8016e8c:	2b01      	cmp	r3, #1
 8016e8e:	d006      	beq.n	8016e9e <display_Dev_Info_dhcp+0x22>
        else PRT_INFO(" # DHCP Failed\r\n");
    }
}
 8016e90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        else PRT_INFO(" # DHCP Failed\r\n");
 8016e94:	4907      	ldr	r1, [pc, #28]	; (8016eb4 <display_Dev_Info_dhcp+0x38>)
 8016e96:	4808      	ldr	r0, [pc, #32]	; (8016eb8 <display_Dev_Info_dhcp+0x3c>)
 8016e98:	f000 bfd4 	b.w	8017e44 <WIZ_SECURE_printf>
}
 8016e9c:	bd08      	pop	{r3, pc}
        if(flag_process_dhcp_success == ON) PRT_INFO(" # DHCP IP Leased time : %ld seconds\r\n", getDHCPLeasetime());
 8016e9e:	f006 f8bb 	bl	801d018 <getDHCPLeasetime>
}
 8016ea2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        if(flag_process_dhcp_success == ON) PRT_INFO(" # DHCP IP Leased time : %ld seconds\r\n", getDHCPLeasetime());
 8016ea6:	4602      	mov	r2, r0
 8016ea8:	4902      	ldr	r1, [pc, #8]	; (8016eb4 <display_Dev_Info_dhcp+0x38>)
 8016eaa:	4804      	ldr	r0, [pc, #16]	; (8016ebc <display_Dev_Info_dhcp+0x40>)
 8016eac:	f000 bfca 	b.w	8017e44 <WIZ_SECURE_printf>
 8016eb0:	20019905 	.word	0x20019905
 8016eb4:	08032eec 	.word	0x08032eec
 8016eb8:	08032d68 	.word	0x08032d68
 8016ebc:	08032d34 	.word	0x08032d34

08016ec0 <display_Dev_Info_dns>:


void display_Dev_Info_dns(uint8_t idx)
{
 8016ec0:	b530      	push	{r4, r5, lr}
 8016ec2:	4605      	mov	r5, r0
 8016ec4:	b087      	sub	sp, #28
    DevConfig *dev_config = get_DevConfig_pointer();
 8016ec6:	f7fd f8b5 	bl	8014034 <get_DevConfig_pointer>

   if(idx >= DEVICE_UART_CNT) return;
 8016eca:	b99d      	cbnz	r5, 8016ef4 <display_Dev_Info_dns+0x34>

    if(dev_config->network_connection[idx].dns_use)
 8016ecc:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 8016ed0:	4604      	mov	r4, r0
 8016ed2:	b143      	cbz	r3, 8016ee6 <display_Dev_Info_dns+0x26>
    {
        if(flag_process_dns_success[idx] == ON)
 8016ed4:	4b14      	ldr	r3, [pc, #80]	; (8016f28 <display_Dev_Info_dns+0x68>)
 8016ed6:	781b      	ldrb	r3, [r3, #0]
 8016ed8:	2b01      	cmp	r3, #1
 8016eda:	d00d      	beq.n	8016ef8 <display_Dev_Info_dns+0x38>
                                                                  dev_config->network_connection[idx].remote_ip[2],
                                                                  dev_config->network_connection[idx].remote_ip[3],
                                                                  dev_config->network_connection[idx].remote_port);
        }
        else
            PRT_INFO(" # DNS[%d] Failed\r\n", idx);
 8016edc:	462a      	mov	r2, r5
 8016ede:	4913      	ldr	r1, [pc, #76]	; (8016f2c <display_Dev_Info_dns+0x6c>)
 8016ee0:	4813      	ldr	r0, [pc, #76]	; (8016f30 <display_Dev_Info_dns+0x70>)
 8016ee2:	f000 ffaf 	bl	8017e44 <WIZ_SECURE_printf>
    }
    PRT_INFO("\r\n");
 8016ee6:	4911      	ldr	r1, [pc, #68]	; (8016f2c <display_Dev_Info_dns+0x6c>)
 8016ee8:	4812      	ldr	r0, [pc, #72]	; (8016f34 <display_Dev_Info_dns+0x74>)
}
 8016eea:	b007      	add	sp, #28
 8016eec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    PRT_INFO("\r\n");
 8016ef0:	f000 bfa8 	b.w	8017e44 <WIZ_SECURE_printf>
}
 8016ef4:	b007      	add	sp, #28
 8016ef6:	bd30      	pop	{r4, r5, pc}
            PRT_INFO(" # DNS[%d]: %s => %d.%d.%d.%d : %d\r\n", idx, dev_config->network_connection[idx].dns_domain_name,
 8016ef8:	f8b0 303f 	ldrh.w	r3, [r0, #63]	; 0x3f
 8016efc:	462a      	mov	r2, r5
 8016efe:	9304      	str	r3, [sp, #16]
 8016f00:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
 8016f04:	f100 0347 	add.w	r3, r0, #71	; 0x47
 8016f08:	9103      	str	r1, [sp, #12]
 8016f0a:	f890 0043 	ldrb.w	r0, [r0, #67]	; 0x43
 8016f0e:	4907      	ldr	r1, [pc, #28]	; (8016f2c <display_Dev_Info_dns+0x6c>)
 8016f10:	9002      	str	r0, [sp, #8]
 8016f12:	f894 5042 	ldrb.w	r5, [r4, #66]	; 0x42
 8016f16:	4808      	ldr	r0, [pc, #32]	; (8016f38 <display_Dev_Info_dns+0x78>)
 8016f18:	9501      	str	r5, [sp, #4]
 8016f1a:	f894 4041 	ldrb.w	r4, [r4, #65]	; 0x41
 8016f1e:	9400      	str	r4, [sp, #0]
 8016f20:	f000 ff90 	bl	8017e44 <WIZ_SECURE_printf>
 8016f24:	e7df      	b.n	8016ee6 <display_Dev_Info_dns+0x26>
 8016f26:	bf00      	nop
 8016f28:	20019908 	.word	0x20019908
 8016f2c:	08032f04 	.word	0x08032f04
 8016f30:	08032dbc 	.word	0x08032dbc
 8016f34:	08031a40 	.word	0x08031a40
 8016f38:	08032d88 	.word	0x08032d88

08016f3c <process_dhcp>:

int8_t process_dhcp(void)
{
 8016f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t ret = 0;
    uint8_t dhcp_retry = 0;

    PRT_DHCP(" - DHCP Client running\r\n");
 8016f40:	4921      	ldr	r1, [pc, #132]	; (8016fc8 <process_dhcp+0x8c>)
 8016f42:	4822      	ldr	r0, [pc, #136]	; (8016fcc <process_dhcp+0x90>)
 8016f44:	f000 ff7e 	bl	8017e44 <WIZ_SECURE_printf>
    
    DHCP_init(SOCK_DHCP, g_send_buf);
 8016f48:	2003      	movs	r0, #3
 8016f4a:	4921      	ldr	r1, [pc, #132]	; (8016fd0 <process_dhcp+0x94>)
 8016f4c:	f005 ffd4 	bl	801cef8 <DHCP_init>
    reg_dhcp_cbfunc(wizchip_dhcp_assign, wizchip_dhcp_assign, wizchip_dhcp_conflict);
 8016f50:	4920      	ldr	r1, [pc, #128]	; (8016fd4 <process_dhcp+0x98>)
 8016f52:	4a21      	ldr	r2, [pc, #132]	; (8016fd8 <process_dhcp+0x9c>)
 8016f54:	4608      	mov	r0, r1
 8016f56:	f005 fa3b 	bl	801c3d0 <reg_dhcp_cbfunc>
    set_device_status_all(ST_UPGRADE);
 8016f5a:	2003      	movs	r0, #3
 8016f5c:	f001 f822 	bl	8017fa4 <set_device_status_all>
    uint8_t dhcp_retry = 0;
 8016f60:	2500      	movs	r5, #0
#ifndef __USE_DHCP_INFINITE_LOOP__
            PRT_DHCP(" - DHCP Failed\r\n\r\n");
            DHCP_stop();
            break;
#else // If DHCP allocation failed, process_dhcp() function will try to DHCP steps again.
            PRT_DHCP(" - DHCP Failed, Try again...\r\n\r\n");
 8016f62:	4e19      	ldr	r6, [pc, #100]	; (8016fc8 <process_dhcp+0x8c>)
 8016f64:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8016fe4 <process_dhcp+0xa8>
            DHCP_init(SOCK_DHCP, g_send_buf);
 8016f68:	4f19      	ldr	r7, [pc, #100]	; (8016fd0 <process_dhcp+0x94>)
 8016f6a:	e00d      	b.n	8016f88 <process_dhcp+0x4c>
            dhcp_retry++;
 8016f6c:	b2dd      	uxtb	r5, r3
            if(dhcp_retry <= 3) PRT_DHCP(" - DHCP Timeout occurred and retry [%d]\r\n", dhcp_retry);
 8016f6e:	2d03      	cmp	r5, #3
 8016f70:	d91a      	bls.n	8016fa8 <process_dhcp+0x6c>
            PRT_DHCP(" - DHCP Failed, Try again...\r\n\r\n");
 8016f72:	4631      	mov	r1, r6
 8016f74:	4640      	mov	r0, r8
 8016f76:	f000 ff65 	bl	8017e44 <WIZ_SECURE_printf>
            DHCP_init(SOCK_DHCP, g_send_buf);
 8016f7a:	4639      	mov	r1, r7
 8016f7c:	2003      	movs	r0, #3
 8016f7e:	f005 ffbb 	bl	801cef8 <DHCP_init>
            dhcp_retry = 0;
 8016f82:	2500      	movs	r5, #0
#endif
        }

        do_segcp(); // Process the requests of configuration tool during the DHCP client run.
 8016f84:	f7ff f9ac 	bl	80162e0 <do_segcp>
        ret = DHCP_run();
 8016f88:	f005 fe8a 	bl	801cca0 <DHCP_run>
 8016f8c:	4604      	mov	r4, r0
        HAL_Delay(1000);
 8016f8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016f92:	f7f9 fecf 	bl	8010d34 <HAL_Delay>
        if(ret == DHCP_IP_LEASED)
 8016f96:	2c04      	cmp	r4, #4
            dhcp_retry++;
 8016f98:	f105 0301 	add.w	r3, r5, #1
        if(ret == DHCP_IP_LEASED)
 8016f9c:	d00a      	beq.n	8016fb4 <process_dhcp+0x78>
        else if(ret == DHCP_FAILED)
 8016f9e:	2c00      	cmp	r4, #0
 8016fa0:	d0e4      	beq.n	8016f6c <process_dhcp+0x30>
        if(dhcp_retry > 3)
 8016fa2:	2d03      	cmp	r5, #3
 8016fa4:	d9ee      	bls.n	8016f84 <process_dhcp+0x48>
 8016fa6:	e7e4      	b.n	8016f72 <process_dhcp+0x36>
            if(dhcp_retry <= 3) PRT_DHCP(" - DHCP Timeout occurred and retry [%d]\r\n", dhcp_retry);
 8016fa8:	462a      	mov	r2, r5
 8016faa:	4631      	mov	r1, r6
 8016fac:	480b      	ldr	r0, [pc, #44]	; (8016fdc <process_dhcp+0xa0>)
 8016fae:	f000 ff49 	bl	8017e44 <WIZ_SECURE_printf>
        if(dhcp_retry > 3)
 8016fb2:	e7e7      	b.n	8016f84 <process_dhcp+0x48>
            PRT_DHCP(" - DHCP Success\r\n");
 8016fb4:	4904      	ldr	r1, [pc, #16]	; (8016fc8 <process_dhcp+0x8c>)
 8016fb6:	480a      	ldr	r0, [pc, #40]	; (8016fe0 <process_dhcp+0xa4>)
 8016fb8:	f000 ff44 	bl	8017e44 <WIZ_SECURE_printf>
    }

    set_device_status_all(ST_OPEN);
 8016fbc:	2001      	movs	r0, #1
 8016fbe:	f000 fff1 	bl	8017fa4 <set_device_status_all>

    return ret;
}
 8016fc2:	4620      	mov	r0, r4
 8016fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fc8:	08032f1c 	.word	0x08032f1c
 8016fcc:	08032ddc 	.word	0x08032ddc
 8016fd0:	2001d5b8 	.word	0x2001d5b8
 8016fd4:	08013fa5 	.word	0x08013fa5
 8016fd8:	08014031 	.word	0x08014031
 8016fdc:	08032e24 	.word	0x08032e24
 8016fe0:	08032e04 	.word	0x08032e04
 8016fe4:	08032e5c 	.word	0x08032e5c

08016fe8 <wdt_reset>:

#ifdef __USE_WATCHDOG__
void wdt_reset(void)
{
    //Reload the Watchdog time counter
    __HAL_IWDG_RELOAD_COUNTER(&hiwdg);
 8016fe8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8016fec:	4b01      	ldr	r3, [pc, #4]	; (8016ff4 <wdt_reset+0xc>)
 8016fee:	681b      	ldr	r3, [r3, #0]
 8016ff0:	601a      	str	r2, [r3, #0]
}
 8016ff2:	4770      	bx	lr
 8016ff4:	2001bc50 	.word	0x2001bc50

08016ff8 <get_ipaddr_from_dns>:
    return ret;
}


int8_t get_ipaddr_from_dns(uint8_t * domain, uint8_t * ip_from_dns, uint32_t timeout)
{
 8016ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ffc:	f2ad 4d3c 	subw	sp, sp, #1084	; 0x43c
 8017000:	9205      	str	r2, [sp, #20]
 8017002:	4688      	mov	r8, r1
 8017004:	4607      	mov	r7, r0
    int8_t ret;
    uint8_t msgbuf[1024];

    DevConfig *dev_config = get_DevConfig_pointer();
 8017006:	f7fd f815 	bl	8014034 <get_DevConfig_pointer>
    DNS_init(s, buf);
 801700a:	a90e      	add	r1, sp, #56	; 0x38
    DevConfig *dev_config = get_DevConfig_pointer();
 801700c:	4606      	mov	r6, r0
    DNS_init(s, buf);
 801700e:	2003      	movs	r0, #3
 8017010:	f006 f9e6 	bl	801d3e0 <DNS_init>
    dns_state = STATE_DNS_INIT;
 8017014:	2300      	movs	r3, #0
 8017016:	4c55      	ldr	r4, [pc, #340]	; (801716c <get_ipaddr_from_dns+0x174>)
    getTick = tickFunc;
 8017018:	f8df a170 	ldr.w	sl, [pc, #368]	; 801718c <get_ipaddr_from_dns+0x194>
 801701c:	4a54      	ldr	r2, [pc, #336]	; (8017170 <get_ipaddr_from_dns+0x178>)
            tickStart = 0;
 801701e:	f8df 9164 	ldr.w	r9, [pc, #356]	; 8017184 <get_ipaddr_from_dns+0x18c>
            close(DNS_SOCKET);
 8017022:	4d54      	ldr	r5, [pc, #336]	; (8017174 <get_ipaddr_from_dns+0x17c>)
            len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 8017024:	f8df b158 	ldr.w	fp, [pc, #344]	; 8017180 <get_ipaddr_from_dns+0x188>

    DNS_init_handler(SOCK_DNS, msgbuf, HAL_GetTick);

    do {
        ret = DNS_run_handler(dev_config->network_option.dns_server_ip, domain, ip_from_dns, timeout);
 8017028:	36c8      	adds	r6, #200	; 0xc8
    dns_state = STATE_DNS_INIT;
 801702a:	7023      	strb	r3, [r4, #0]
    getTick = tickFunc;
 801702c:	f8ca 2000 	str.w	r2, [sl]
    switch(dns_state)
 8017030:	2b03      	cmp	r3, #3
 8017032:	d82c      	bhi.n	801708e <get_ipaddr_from_dns+0x96>
 8017034:	e8df f003 	tbb	[pc, r3]
 8017038:	021e392e 	.word	0x021e392e
            tickStart = 0;
 801703c:	2300      	movs	r3, #0
            close(DNS_SOCKET);
 801703e:	7828      	ldrb	r0, [r5, #0]
            tickStart = 0;
 8017040:	f8c9 3000 	str.w	r3, [r9]
            close(DNS_SOCKET);
 8017044:	f004 f8e6 	bl	801b214 <close>
            dns_state = STATE_DNS_STOP;
 8017048:	2304      	movs	r3, #4
 801704a:	7023      	strb	r3, [r4, #0]

        // Process the requests of configuration tool during the DNS client run
        do_segcp();
 801704c:	f7ff f948 	bl	80162e0 <do_segcp>
    if(dns_state == STATE_DNS_STOP) return DNS_RET_STOPPED;
 8017050:	7823      	ldrb	r3, [r4, #0]
 8017052:	2b04      	cmp	r3, #4
 8017054:	d1ec      	bne.n	8017030 <get_ipaddr_from_dns+0x38>
        do_segcp();
 8017056:	f7ff f943 	bl	80162e0 <do_segcp>
 801705a:	2502      	movs	r5, #2
        PRT_INFO(" - DNS: [%s] Get Server IP - %d.%d.%d.%d\r\n", domain, ip_from_dns[0], ip_from_dns[1], ip_from_dns[2], ip_from_dns[3]);
    }
    else
    {
        PRT_ERR(" - DNS: [%s] DNS failed (%d)\r\n", domain, ret);
        return FALSE; // DNS failed
 801705c:	2600      	movs	r6, #0
        PRT_ERR(" - DNS: [%s] DNS failed (%d)\r\n", domain, ret);
 801705e:	462b      	mov	r3, r5
 8017060:	463a      	mov	r2, r7
 8017062:	4945      	ldr	r1, [pc, #276]	; (8017178 <get_ipaddr_from_dns+0x180>)
 8017064:	4845      	ldr	r0, [pc, #276]	; (801717c <get_ipaddr_from_dns+0x184>)
 8017066:	f000 feed 	bl	8017e44 <WIZ_SECURE_printf>
    }
    return ret;
}
 801706a:	4630      	mov	r0, r6
 801706c:	f20d 4d3c 	addw	sp, sp, #1084	; 0x43c
 8017070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0) {
 8017074:	7828      	ldrb	r0, [r5, #0]
 8017076:	f003 fe13 	bl	801aca0 <getSn_RX_RSR>
 801707a:	bb88      	cbnz	r0, 80170e0 <get_ipaddr_from_dns+0xe8>
            if((getTick() - tickStart) >= timeout) {
 801707c:	f8da 3000 	ldr.w	r3, [sl]
 8017080:	4798      	blx	r3
 8017082:	f8d9 3000 	ldr.w	r3, [r9]
 8017086:	1ac0      	subs	r0, r0, r3
 8017088:	9b05      	ldr	r3, [sp, #20]
 801708a:	4283      	cmp	r3, r0
 801708c:	d967      	bls.n	801715e <get_ipaddr_from_dns+0x166>
        do_segcp();
 801708e:	f7ff f927 	bl	80162e0 <do_segcp>
    } while(ret == DNS_RET_RUNNING);
 8017092:	e7dd      	b.n	8017050 <get_ipaddr_from_dns+0x58>
            socket(DNS_SOCKET, Sn_MR_UDP, 0, 0x00);
 8017094:	2300      	movs	r3, #0
 8017096:	2102      	movs	r1, #2
 8017098:	461a      	mov	r2, r3
 801709a:	7828      	ldrb	r0, [r5, #0]
 801709c:	f003 ffe0 	bl	801b060 <socket>
            dns_state = STATE_DNS_SEND_QUERY;
 80170a0:	2301      	movs	r3, #1
 80170a2:	7023      	strb	r3, [r4, #0]
        do_segcp();
 80170a4:	f7ff f91c 	bl	80162e0 <do_segcp>
    } while(ret == DNS_RET_RUNNING);
 80170a8:	e7d2      	b.n	8017050 <get_ipaddr_from_dns+0x58>
            len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 80170aa:	4639      	mov	r1, r7
 80170ac:	f8db 2000 	ldr.w	r2, [fp]
 80170b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80170b4:	2000      	movs	r0, #0
 80170b6:	f006 f92b 	bl	801d310 <dns_makequery>
            sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 80170ba:	2335      	movs	r3, #53	; 0x35
 80170bc:	9300      	str	r3, [sp, #0]
 80170be:	b282      	uxth	r2, r0
 80170c0:	4633      	mov	r3, r6
 80170c2:	f8db 1000 	ldr.w	r1, [fp]
 80170c6:	7828      	ldrb	r0, [r5, #0]
 80170c8:	f004 fbfc 	bl	801b8c4 <sendto>
            tickStart = getTick();
 80170cc:	f8da 3000 	ldr.w	r3, [sl]
 80170d0:	4798      	blx	r3
            dns_state = STATE_DNS_RECV_RESPONSE;
 80170d2:	2302      	movs	r3, #2
            tickStart = getTick();
 80170d4:	f8c9 0000 	str.w	r0, [r9]
            dns_state = STATE_DNS_RECV_RESPONSE;
 80170d8:	7023      	strb	r3, [r4, #0]
        do_segcp();
 80170da:	f7ff f901 	bl	80162e0 <do_segcp>
    } while(ret == DNS_RET_RUNNING);
 80170de:	e7b7      	b.n	8017050 <get_ipaddr_from_dns+0x58>
                len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 80170e0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80170e4:	bf28      	it	cs
 80170e6:	f44f 7080 	movcs.w	r0, #256	; 0x100
 80170ea:	4e25      	ldr	r6, [pc, #148]	; (8017180 <get_ipaddr_from_dns+0x188>)
 80170ec:	f10d 031e 	add.w	r3, sp, #30
 80170f0:	6831      	ldr	r1, [r6, #0]
 80170f2:	b282      	uxth	r2, r0
 80170f4:	7828      	ldrb	r0, [r5, #0]
 80170f6:	9300      	str	r3, [sp, #0]
 80170f8:	ab08      	add	r3, sp, #32
 80170fa:	f004 fcdb 	bl	801bab4 <recvfrom>
                ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 80170fe:	6831      	ldr	r1, [r6, #0]
 8017100:	4642      	mov	r2, r8
 8017102:	a809      	add	r0, sp, #36	; 0x24
 8017104:	f006 f88c 	bl	801d220 <parseDNSMSG>
                dns_state = STATE_DNS_DONE;
 8017108:	2203      	movs	r2, #3
                if(ret) {
 801710a:	f010 0fff 	tst.w	r0, #255	; 0xff
            if((getTick() - tickStart) >= timeout) {
 801710e:	f8da 3000 	ldr.w	r3, [sl]
                if(ret) {
 8017112:	bf0c      	ite	eq
 8017114:	f04f 35ff 	moveq.w	r5, #4294967295
 8017118:	2501      	movne	r5, #1
                dns_state = STATE_DNS_DONE;
 801711a:	7022      	strb	r2, [r4, #0]
            if((getTick() - tickStart) >= timeout) {
 801711c:	4798      	blx	r3
 801711e:	4b19      	ldr	r3, [pc, #100]	; (8017184 <get_ipaddr_from_dns+0x18c>)
                    ret = DNS_RET_SUCCESS;
 8017120:	462e      	mov	r6, r5
            if((getTick() - tickStart) >= timeout) {
 8017122:	681b      	ldr	r3, [r3, #0]
 8017124:	1ac0      	subs	r0, r0, r3
 8017126:	9b05      	ldr	r3, [sp, #20]
 8017128:	4283      	cmp	r3, r0
 801712a:	d918      	bls.n	801715e <get_ipaddr_from_dns+0x166>
        do_segcp();
 801712c:	f7ff f8d8 	bl	80162e0 <do_segcp>
    if(ret == DNS_RET_SUCCESS)
 8017130:	2d01      	cmp	r5, #1
 8017132:	d193      	bne.n	801705c <get_ipaddr_from_dns+0x64>
        PRT_INFO(" - DNS: [%s] Get Server IP - %d.%d.%d.%d\r\n", domain, ip_from_dns[0], ip_from_dns[1], ip_from_dns[2], ip_from_dns[3]);
 8017134:	f898 0003 	ldrb.w	r0, [r8, #3]
 8017138:	f898 1002 	ldrb.w	r1, [r8, #2]
 801713c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017140:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8017144:	9300      	str	r3, [sp, #0]
 8017146:	463a      	mov	r2, r7
 8017148:	f898 3000 	ldrb.w	r3, [r8]
 801714c:	490a      	ldr	r1, [pc, #40]	; (8017178 <get_ipaddr_from_dns+0x180>)
 801714e:	480e      	ldr	r0, [pc, #56]	; (8017188 <get_ipaddr_from_dns+0x190>)
 8017150:	f000 fe78 	bl	8017e44 <WIZ_SECURE_printf>
}
 8017154:	4630      	mov	r0, r6
 8017156:	f20d 4d3c 	addw	sp, sp, #1084	; 0x43c
 801715a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                dns_state = STATE_DNS_DONE;
 801715e:	2303      	movs	r3, #3
        do_segcp();
 8017160:	f06f 0501 	mvn.w	r5, #1
                dns_state = STATE_DNS_DONE;
 8017164:	7023      	strb	r3, [r4, #0]
        do_segcp();
 8017166:	f7ff f8bb 	bl	80162e0 <do_segcp>
    } while(ret == DNS_RET_RUNNING);
 801716a:	e777      	b.n	801705c <get_ipaddr_from_dns+0x64>
 801716c:	20018194 	.word	0x20018194
 8017170:	08010d29 	.word	0x08010d29
 8017174:	2001fe8c 	.word	0x2001fe8c
 8017178:	08032fc8 	.word	0x08032fc8
 801717c:	08032f64 	.word	0x08032f64
 8017180:	2001fe94 	.word	0x2001fe94
 8017184:	200198a8 	.word	0x200198a8
 8017188:	08032f2c 	.word	0x08032f2c
 801718c:	2001edc0 	.word	0x2001edc0

08017190 <process_dns>:
{
 8017190:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017194:	4681      	mov	r9, r0
    DevConfig *dev_config = get_DevConfig_pointer();
 8017196:	f7fc ff4d 	bl	8014034 <get_DevConfig_pointer>
 801719a:	4607      	mov	r7, r0
    set_device_status(channel, ST_UPGRADE);
 801719c:	eb09 0689 	add.w	r6, r9, r9, lsl #2
 80171a0:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 80171a4:	00b6      	lsls	r6, r6, #2
        ret = get_ipaddr_from_dns((uint8_t *)dev_config->network_connection[channel].dns_domain_name,
 80171a6:	f106 0847 	add.w	r8, r6, #71	; 0x47
                                             dev_config->network_connection[channel].remote_ip,
 80171aa:	3641      	adds	r6, #65	; 0x41
    set_device_status(channel, ST_UPGRADE);
 80171ac:	2103      	movs	r1, #3
 80171ae:	4648      	mov	r0, r9
        ret = get_ipaddr_from_dns((uint8_t *)dev_config->network_connection[channel].dns_domain_name,
 80171b0:	44b8      	add	r8, r7
                                             dev_config->network_connection[channel].remote_ip,
 80171b2:	443e      	add	r6, r7
    set_device_status(channel, ST_UPGRADE);
 80171b4:	f000 ff2a 	bl	801800c <set_device_status>
        ret = get_ipaddr_from_dns((uint8_t *)dev_config->network_connection[channel].dns_domain_name,
 80171b8:	4631      	mov	r1, r6
 80171ba:	4640      	mov	r0, r8
 80171bc:	f44f 7261 	mov.w	r2, #900	; 0x384
 80171c0:	f7ff ff1a 	bl	8016ff8 <get_ipaddr_from_dns>
        dns_retry++;
 80171c4:	2401      	movs	r4, #1
        ret = get_ipaddr_from_dns((uint8_t *)dev_config->network_connection[channel].dns_domain_name,
 80171c6:	4605      	mov	r5, r0
            PRT_ERR(" - DNS Failed, Try again...\r\n\r\n");
 80171c8:	f8df b04c 	ldr.w	fp, [pc, #76]	; 8017218 <process_dns+0x88>
 80171cc:	f8df a04c 	ldr.w	sl, [pc, #76]	; 801721c <process_dns+0x8c>
        if(dev_config->network_option.dhcp_use) DHCP_run();
 80171d0:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80171d4:	b9ab      	cbnz	r3, 8017202 <process_dns+0x72>
    } while(ret != TRUE);
 80171d6:	2d01      	cmp	r5, #1
 80171d8:	d017      	beq.n	801720a <process_dns+0x7a>
        ret = get_ipaddr_from_dns((uint8_t *)dev_config->network_connection[channel].dns_domain_name,
 80171da:	f44f 7261 	mov.w	r2, #900	; 0x384
 80171de:	4631      	mov	r1, r6
 80171e0:	4640      	mov	r0, r8
 80171e2:	f7ff ff09 	bl	8016ff8 <get_ipaddr_from_dns>
        dns_retry++;
 80171e6:	3401      	adds	r4, #1
 80171e8:	b2e4      	uxtb	r4, r4
        if(dns_retry > 2) {
 80171ea:	2c03      	cmp	r4, #3
        ret = get_ipaddr_from_dns((uint8_t *)dev_config->network_connection[channel].dns_domain_name,
 80171ec:	4605      	mov	r5, r0
        if(dns_retry > 2) {
 80171ee:	d1ef      	bne.n	80171d0 <process_dns+0x40>
            PRT_ERR(" - DNS Failed, Try again...\r\n\r\n");
 80171f0:	4659      	mov	r1, fp
 80171f2:	4650      	mov	r0, sl
 80171f4:	f000 fe26 	bl	8017e44 <WIZ_SECURE_printf>
        if(dev_config->network_option.dhcp_use) DHCP_run();
 80171f8:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
            dns_retry = 0;
 80171fc:	2400      	movs	r4, #0
        if(dev_config->network_option.dhcp_use) DHCP_run();
 80171fe:	2b00      	cmp	r3, #0
 8017200:	d0e9      	beq.n	80171d6 <process_dns+0x46>
 8017202:	f005 fd4d 	bl	801cca0 <DHCP_run>
    } while(ret != TRUE);
 8017206:	2d01      	cmp	r5, #1
 8017208:	d1e7      	bne.n	80171da <process_dns+0x4a>
    set_device_status(channel, ST_OPEN);
 801720a:	4648      	mov	r0, r9
 801720c:	4629      	mov	r1, r5
 801720e:	f000 fefd 	bl	801800c <set_device_status>
}
 8017212:	4628      	mov	r0, r5
 8017214:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017218:	08032fbc 	.word	0x08032fbc
 801721c:	08032f90 	.word	0x08032f90

08017220 <write_flash>:
static uint32_t GetSectorSize(uint32_t Sector);
static uint32_t GetSectorStartAddr(uint32_t Sector);


uint32_t write_flash(uint32_t addr, uint8_t * data, uint32_t data_len)
{
 8017220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017224:	4617      	mov	r7, r2
  __ASM volatile ("cpsid i" : : : "memory");
 8017226:	b672      	cpsid	i
    uint8_t byte_data;
    uint64_t double_word_data;
#if 1
    __disable_irq();

    if(data_len)
 8017228:	b97a      	cbnz	r2, 801724a <write_flash+0x2a>
        rep_word = (data_len / 8);
        rep_byte = (data_len % 8);
    }

    /* Enable the flash control register access */
    HAL_FLASH_Unlock();
 801722a:	f7f9 ff07 	bl	801103c <HAL_FLASH_Unlock>

    /* Clear pending flags (if any) */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ECCR_ERRORS | FLASH_FLAG_OPTWERR | FLASH_FLAG_ECCR_ERRORS | FLASH_FLAG_OPTWERR);
 801722e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8017232:	4b2a      	ldr	r3, [pc, #168]	; (80172dc <write_flash+0xbc>)
 8017234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017236:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 801723a:	631a      	str	r2, [r3, #48]	; 0x30
 801723c:	6219      	str	r1, [r3, #32]
        {
            return -1; // flash write failed
        }
        addr += rep_byte;
    }
    HAL_FLASH_Lock();
 801723e:	f7f9 ff11 	bl	8011064 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8017242:	b662      	cpsie	i

    __enable_irq();
#endif
    return data_len;
 8017244:	4638      	mov	r0, r7
}
 8017246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        rep_word = (data_len / 8);
 801724a:	4688      	mov	r8, r1
 801724c:	4604      	mov	r4, r0
    HAL_FLASH_Unlock();
 801724e:	f7f9 fef5 	bl	801103c <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ECCR_ERRORS | FLASH_FLAG_OPTWERR | FLASH_FLAG_ECCR_ERRORS | FLASH_FLAG_OPTWERR);
 8017252:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8017256:	4b21      	ldr	r3, [pc, #132]	; (80172dc <write_flash+0xbc>)
        rep_word = (data_len / 8);
 8017258:	ea4f 09d7 	mov.w	r9, r7, lsr #3
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ECCR_ERRORS | FLASH_FLAG_OPTWERR | FLASH_FLAG_ECCR_ERRORS | FLASH_FLAG_OPTWERR);
 801725c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801725e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8017262:	631a      	str	r2, [r3, #48]	; 0x30
 8017264:	6219      	str	r1, [r3, #32]
    for(i = 0 ; i < rep_word ; i++)
 8017266:	f1b9 0f00 	cmp.w	r9, #0
 801726a:	d013      	beq.n	8017294 <write_flash+0x74>
 801726c:	f1a8 0508 	sub.w	r5, r8, #8
 8017270:	eb04 06c9 	add.w	r6, r4, r9, lsl #3
 8017274:	e001      	b.n	801727a <write_flash+0x5a>
 8017276:	42a6      	cmp	r6, r4
 8017278:	d00d      	beq.n	8017296 <write_flash+0x76>
        if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, addr, double_word_data) == HAL_OK)
 801727a:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 801727e:	4621      	mov	r1, r4
 8017280:	2001      	movs	r0, #1
 8017282:	f7f9 fe61 	bl	8010f48 <HAL_FLASH_Program>
        addr += 8;
 8017286:	3408      	adds	r4, #8
        if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, addr, double_word_data) == HAL_OK)
 8017288:	2800      	cmp	r0, #0
 801728a:	d0f4      	beq.n	8017276 <write_flash+0x56>
            return -1; // flash write failed
 801728c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8017290:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    for(i = 0 ; i < rep_word ; i++)
 8017294:	4626      	mov	r6, r4
    if(rep_byte)
 8017296:	f017 0207 	ands.w	r2, r7, #7
 801729a:	d0d0      	beq.n	801723e <write_flash+0x1e>
        double_word_data |= (0xffffffffffffffff << (8 * rep_byte)); // padding remain bytes to 0xff
 801729c:	f04f 31ff 	mov.w	r1, #4294967295
 80172a0:	00d2      	lsls	r2, r2, #3
 80172a2:	f1a2 0420 	sub.w	r4, r2, #32
 80172a6:	fa01 f404 	lsl.w	r4, r1, r4
 80172aa:	fa01 f302 	lsl.w	r3, r1, r2
 80172ae:	f1c2 0020 	rsb	r0, r2, #32
 80172b2:	4323      	orrs	r3, r4
        double_word_data = *((uint64_t *)data + rep_word);
 80172b4:	eb08 04c9 	add.w	r4, r8, r9, lsl #3
        double_word_data |= (0xffffffffffffffff << (8 * rep_byte)); // padding remain bytes to 0xff
 80172b8:	fa21 f000 	lsr.w	r0, r1, r0
        double_word_data = *((uint64_t *)data + rep_word);
 80172bc:	6865      	ldr	r5, [r4, #4]
 80172be:	f858 4039 	ldr.w	r4, [r8, r9, lsl #3]
        double_word_data |= (0xffffffffffffffff << (8 * rep_byte)); // padding remain bytes to 0xff
 80172c2:	4303      	orrs	r3, r0
 80172c4:	fa01 f202 	lsl.w	r2, r1, r2
        if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, addr, double_word_data) != HAL_OK)
 80172c8:	2001      	movs	r0, #1
 80172ca:	4631      	mov	r1, r6
 80172cc:	432b      	orrs	r3, r5
 80172ce:	4322      	orrs	r2, r4
 80172d0:	f7f9 fe3a 	bl	8010f48 <HAL_FLASH_Program>
 80172d4:	2800      	cmp	r0, #0
 80172d6:	d0b2      	beq.n	801723e <write_flash+0x1e>
 80172d8:	e7d8      	b.n	801728c <write_flash+0x6c>
 80172da:	bf00      	nop
 80172dc:	40022000 	.word	0x40022000

080172e0 <read_flash>:
    uint32_t i = 0;
    uint32_t read_len = 0;

//    if((addr + data_len) > FLASH_END_ADDR) return 0;

    for(i = 0; i < data_len; i++)
 80172e0:	2a00      	cmp	r2, #0
 80172e2:	d039      	beq.n	8017358 <read_flash+0x78>
 80172e4:	1d0b      	adds	r3, r1, #4
 80172e6:	4283      	cmp	r3, r0
 80172e8:	bf8c      	ite	hi
 80172ea:	2300      	movhi	r3, #0
 80172ec:	2301      	movls	r3, #1
{
 80172ee:	b470      	push	{r4, r5, r6}
 80172f0:	1d04      	adds	r4, r0, #4
 80172f2:	42a1      	cmp	r1, r4
 80172f4:	bf28      	it	cs
 80172f6:	f043 0301 	orrcs.w	r3, r3, #1
 80172fa:	b303      	cbz	r3, 801733e <read_flash+0x5e>
 80172fc:	1e53      	subs	r3, r2, #1
 80172fe:	2b07      	cmp	r3, #7
 8017300:	d91d      	bls.n	801733e <read_flash+0x5e>
    for(i = 0; i < data_len; i++)
 8017302:	4603      	mov	r3, r0
 8017304:	f022 0503 	bic.w	r5, r2, #3
 8017308:	4405      	add	r5, r0
 801730a:	1a0e      	subs	r6, r1, r0
    {
        data[i] = *(uint8_t *) (addr + i);
 801730c:	681c      	ldr	r4, [r3, #0]
 801730e:	50f4      	str	r4, [r6, r3]
    for(i = 0; i < data_len; i++)
 8017310:	3304      	adds	r3, #4
 8017312:	42ab      	cmp	r3, r5
 8017314:	d1fa      	bne.n	801730c <read_flash+0x2c>
 8017316:	0794      	lsls	r4, r2, #30
 8017318:	f022 0303 	bic.w	r3, r2, #3
 801731c:	d00c      	beq.n	8017338 <read_flash+0x58>
        data[i] = *(uint8_t *) (addr + i);
 801731e:	5cc5      	ldrb	r5, [r0, r3]
        read_len++;
 8017320:	1c5c      	adds	r4, r3, #1
    for(i = 0; i < data_len; i++)
 8017322:	42a2      	cmp	r2, r4
        data[i] = *(uint8_t *) (addr + i);
 8017324:	54cd      	strb	r5, [r1, r3]
    for(i = 0; i < data_len; i++)
 8017326:	d913      	bls.n	8017350 <read_flash+0x70>
        data[i] = *(uint8_t *) (addr + i);
 8017328:	5d06      	ldrb	r6, [r0, r4]
        read_len++;
 801732a:	1c9d      	adds	r5, r3, #2
    for(i = 0; i < data_len; i++)
 801732c:	42aa      	cmp	r2, r5
        data[i] = *(uint8_t *) (addr + i);
 801732e:	550e      	strb	r6, [r1, r4]
    for(i = 0; i < data_len; i++)
 8017330:	d90e      	bls.n	8017350 <read_flash+0x70>
        data[i] = *(uint8_t *) (addr + i);
 8017332:	4613      	mov	r3, r2
 8017334:	5d40      	ldrb	r0, [r0, r5]
 8017336:	5548      	strb	r0, [r1, r5]
    }

    return read_len;
}
 8017338:	4618      	mov	r0, r3
 801733a:	bc70      	pop	{r4, r5, r6}
 801733c:	4770      	bx	lr
 801733e:	1c43      	adds	r3, r0, #1
 8017340:	1e4c      	subs	r4, r1, #1
        data[i] = *(uint8_t *) (addr + i);
 8017342:	1a58      	subs	r0, r3, r1
 8017344:	18a1      	adds	r1, r4, r2
 8017346:	5d03      	ldrb	r3, [r0, r4]
 8017348:	f804 3f01 	strb.w	r3, [r4, #1]!
    for(i = 0; i < data_len; i++)
 801734c:	428c      	cmp	r4, r1
 801734e:	d1fa      	bne.n	8017346 <read_flash+0x66>
}
 8017350:	bc70      	pop	{r4, r5, r6}
    for(i = 0; i < data_len; i++)
 8017352:	4613      	mov	r3, r2
}
 8017354:	4618      	mov	r0, r3
 8017356:	4770      	bx	lr
 8017358:	4610      	mov	r0, r2
 801735a:	4770      	bx	lr

0801735c <erase_flash_page>:


int8_t erase_flash_page(uint32_t addr)
{
 801735c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801735e:	4604      	mov	r4, r0
 8017360:	b087      	sub	sp, #28
  __ASM volatile ("cpsid i" : : : "memory");
 8017362:	b672      	cpsid	i
    /* Enable the flash control register access */
    HAL_FLASH_Unlock();

    pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
    pEraseInit.Banks = GetBank(addr);
    pEraseInit.NbPages = 1;
 8017364:	2501      	movs	r5, #1
    pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8017366:	2602      	movs	r6, #2
 8017368:	2701      	movs	r7, #1
uint32_t GetPage(uint32_t Addr)
{
    uint32_t page = 0;

#if USE_SINGLE_BANK
    page = (Addr - FLASH_BASE) / FLASH_BANK_PAGE_SIZE;
 801736a:	f104 4478 	add.w	r4, r4, #4160749568	; 0xf8000000
 801736e:	0b24      	lsrs	r4, r4, #12
    HAL_FLASH_Unlock();
 8017370:	f7f9 fe64 	bl	801103c <HAL_FLASH_Unlock>
    {
    /* Bank 2 */
    page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
    }
#endif
    PRT_INFO("page = %d\r\n", page);
 8017374:	4910      	ldr	r1, [pc, #64]	; (80173b8 <erase_flash_page+0x5c>)
 8017376:	4811      	ldr	r0, [pc, #68]	; (80173bc <erase_flash_page+0x60>)
 8017378:	4622      	mov	r2, r4
    pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 801737a:	e9cd 6702 	strd	r6, r7, [sp, #8]
    pEraseInit.NbPages = 1;
 801737e:	9505      	str	r5, [sp, #20]
    PRT_INFO("page = %d\r\n", page);
 8017380:	f000 fd60 	bl	8017e44 <WIZ_SECURE_printf>
    ret = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 8017384:	a901      	add	r1, sp, #4
 8017386:	a802      	add	r0, sp, #8
    pEraseInit.Page = GetPage(addr);// (addr - FLASH_START_ADDR_BANK2) / FLASH_PAGE_SIZE;
 8017388:	9404      	str	r4, [sp, #16]
    ret = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 801738a:	f7f9 fea7 	bl	80110dc <HAL_FLASHEx_Erase>
    if(ret != HAL_OK )
 801738e:	b928      	cbnz	r0, 801739c <erase_flash_page+0x40>
    HAL_FLASH_Lock();
 8017390:	f7f9 fe68 	bl	8011064 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8017394:	b662      	cpsie	i
    return 1;
 8017396:	4628      	mov	r0, r5
}
 8017398:	b007      	add	sp, #28
 801739a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801739c:	4604      	mov	r4, r0
        HAL_FLASH_Lock();
 801739e:	f7f9 fe61 	bl	8011064 <HAL_FLASH_Lock>
 80173a2:	b662      	cpsie	i
        PRT_ERR("ret = %d\r\n", ret);
 80173a4:	4906      	ldr	r1, [pc, #24]	; (80173c0 <erase_flash_page+0x64>)
 80173a6:	4622      	mov	r2, r4
 80173a8:	4806      	ldr	r0, [pc, #24]	; (80173c4 <erase_flash_page+0x68>)
 80173aa:	f000 fd4b 	bl	8017e44 <WIZ_SECURE_printf>
        return -1;
 80173ae:	f04f 30ff 	mov.w	r0, #4294967295
}
 80173b2:	b007      	add	sp, #28
 80173b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80173b6:	bf00      	nop
 80173b8:	08033020 	.word	0x08033020
 80173bc:	08032fdc 	.word	0x08032fdc
 80173c0:	0803300c 	.word	0x0803300c
 80173c4:	08032ff4 	.word	0x08032ff4

080173c8 <GPIO_Configuration>:
/**
  * @brief  STM32 GPIO Initialize Function
  */
 
void GPIO_Configuration(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint16_t GPIO_Mode, uint16_t GPIO_Pull)
{
 80173c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    GPIO_InitTypeDef GPIO_InitStruct;
    
    /* Enable the GPIO Clock */
    if (GPIOx == GPIOA)
 80173ca:	4d3d      	ldr	r5, [pc, #244]	; (80174c0 <GPIO_Configuration+0xf8>)
{
 80173cc:	460e      	mov	r6, r1
    if (GPIOx == GPIOA)
 80173ce:	42a8      	cmp	r0, r5
{
 80173d0:	4614      	mov	r4, r2
 80173d2:	461f      	mov	r7, r3
 80173d4:	b08f      	sub	sp, #60	; 0x3c
    if (GPIOx == GPIOA)
 80173d6:	d036      	beq.n	8017446 <GPIO_Configuration+0x7e>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
    }
    else if (GPIOx == GPIOB)
 80173d8:	4a3a      	ldr	r2, [pc, #232]	; (80174c4 <GPIO_Configuration+0xfc>)
 80173da:	4290      	cmp	r0, r2
 80173dc:	d019      	beq.n	8017412 <GPIO_Configuration+0x4a>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
    }
    else if (GPIOx == GPIOC)
 80173de:	4a3a      	ldr	r2, [pc, #232]	; (80174c8 <GPIO_Configuration+0x100>)
 80173e0:	4290      	cmp	r0, r2
 80173e2:	d04f      	beq.n	8017484 <GPIO_Configuration+0xbc>
    {
    	__HAL_RCC_GPIOC_CLK_ENABLE();
    }
    else if (GPIOx == GPIOD)
 80173e4:	4a39      	ldr	r2, [pc, #228]	; (80174cc <GPIO_Configuration+0x104>)
 80173e6:	4290      	cmp	r0, r2
 80173e8:	d05b      	beq.n	80174a2 <GPIO_Configuration+0xda>
    {
    	__HAL_RCC_GPIOD_CLK_ENABLE();
    }    
    else if (GPIOx == GPIOE)
 80173ea:	4a39      	ldr	r2, [pc, #228]	; (80174d0 <GPIO_Configuration+0x108>)
 80173ec:	4290      	cmp	r0, r2
 80173ee:	d03d      	beq.n	801746c <GPIO_Configuration+0xa4>
    	__HAL_RCC_GPIOG_CLK_ENABLE();
    }
    */
    else
    {
        if (GPIOx == GPIOH)
 80173f0:	4a38      	ldr	r2, [pc, #224]	; (80174d4 <GPIO_Configuration+0x10c>)
 80173f2:	4290      	cmp	r0, r2
 80173f4:	d11b      	bne.n	801742e <GPIO_Configuration+0x66>
        {
        	__HAL_RCC_GPIOH_CLK_ENABLE();
 80173f6:	f102 427e 	add.w	r2, r2, #4261412864	; 0xfe000000
 80173fa:	f5a2 6240 	sub.w	r2, r2, #3072	; 0xc00
 80173fe:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8017400:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8017404:	64d1      	str	r1, [r2, #76]	; 0x4c
 8017406:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8017408:	f002 0280 	and.w	r2, r2, #128	; 0x80
 801740c:	9208      	str	r2, [sp, #32]
 801740e:	9a08      	ldr	r2, [sp, #32]
 8017410:	e00d      	b.n	801742e <GPIO_Configuration+0x66>
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8017412:	f102 427e 	add.w	r2, r2, #4261412864	; 0xfe000000
 8017416:	f8d2 1c4c 	ldr.w	r1, [r2, #3148]	; 0xc4c
 801741a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 801741e:	f041 0102 	orr.w	r1, r1, #2
 8017422:	64d1      	str	r1, [r2, #76]	; 0x4c
 8017424:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8017426:	f002 0202 	and.w	r2, r2, #2
 801742a:	9204      	str	r2, [sp, #16]
 801742c:	9a04      	ldr	r2, [sp, #16]
        }
    }

	/*Configure GPIO pin Output Level */
    if(GPIO_Mode == GPIO_MODE_OUTPUT_PP)
 801742e:	2c01      	cmp	r4, #1
 8017430:	d015      	beq.n	801745e <GPIO_Configuration+0x96>

	/*Configure GPIO pin */
	GPIO_InitStruct.Pin = GPIO_Pin;
	GPIO_InitStruct.Mode = GPIO_Mode;
	GPIO_InitStruct.Pull = GPIO_Pull;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017432:	2203      	movs	r2, #3

	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8017434:	a909      	add	r1, sp, #36	; 0x24
	GPIO_InitStruct.Mode = GPIO_Mode;
 8017436:	e9cd 6409 	strd	r6, r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801743a:	e9cd 720b 	strd	r7, r2, [sp, #44]	; 0x2c
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 801743e:	f7f9 fee5 	bl	801120c <HAL_GPIO_Init>
}
 8017442:	b00f      	add	sp, #60	; 0x3c
 8017444:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8017446:	4a24      	ldr	r2, [pc, #144]	; (80174d8 <GPIO_Configuration+0x110>)
    if(GPIO_Mode == GPIO_MODE_OUTPUT_PP)
 8017448:	2c01      	cmp	r4, #1
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 801744a:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 801744c:	f041 0101 	orr.w	r1, r1, #1
 8017450:	64d1      	str	r1, [r2, #76]	; 0x4c
 8017452:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8017454:	f002 0201 	and.w	r2, r2, #1
 8017458:	9203      	str	r2, [sp, #12]
 801745a:	9a03      	ldr	r2, [sp, #12]
    if(GPIO_Mode == GPIO_MODE_OUTPUT_PP)
 801745c:	d1e9      	bne.n	8017432 <GPIO_Configuration+0x6a>
    	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 801745e:	2200      	movs	r2, #0
 8017460:	4631      	mov	r1, r6
 8017462:	9001      	str	r0, [sp, #4]
 8017464:	f7fa f87e 	bl	8011564 <HAL_GPIO_WritePin>
 8017468:	9801      	ldr	r0, [sp, #4]
 801746a:	e7e2      	b.n	8017432 <GPIO_Configuration+0x6a>
    	__HAL_RCC_GPIOE_CLK_ENABLE();
 801746c:	f102 427e 	add.w	r2, r2, #4261412864	; 0xfe000000
 8017470:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8017472:	f041 0110 	orr.w	r1, r1, #16
 8017476:	64d1      	str	r1, [r2, #76]	; 0x4c
 8017478:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 801747a:	f002 0210 	and.w	r2, r2, #16
 801747e:	9207      	str	r2, [sp, #28]
 8017480:	9a07      	ldr	r2, [sp, #28]
 8017482:	e7d4      	b.n	801742e <GPIO_Configuration+0x66>
    	__HAL_RCC_GPIOC_CLK_ENABLE();
 8017484:	f102 427e 	add.w	r2, r2, #4261412864	; 0xfe000000
 8017488:	f8d2 184c 	ldr.w	r1, [r2, #2124]	; 0x84c
 801748c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8017490:	f041 0104 	orr.w	r1, r1, #4
 8017494:	64d1      	str	r1, [r2, #76]	; 0x4c
 8017496:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8017498:	f002 0204 	and.w	r2, r2, #4
 801749c:	9205      	str	r2, [sp, #20]
 801749e:	9a05      	ldr	r2, [sp, #20]
 80174a0:	e7c5      	b.n	801742e <GPIO_Configuration+0x66>
    	__HAL_RCC_GPIOD_CLK_ENABLE();
 80174a2:	f102 427e 	add.w	r2, r2, #4261412864	; 0xfe000000
 80174a6:	f8d2 144c 	ldr.w	r1, [r2, #1100]	; 0x44c
 80174aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80174ae:	f041 0108 	orr.w	r1, r1, #8
 80174b2:	64d1      	str	r1, [r2, #76]	; 0x4c
 80174b4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80174b6:	f002 0208 	and.w	r2, r2, #8
 80174ba:	9206      	str	r2, [sp, #24]
 80174bc:	9a06      	ldr	r2, [sp, #24]
 80174be:	e7b6      	b.n	801742e <GPIO_Configuration+0x66>
 80174c0:	42020000 	.word	0x42020000
 80174c4:	42020400 	.word	0x42020400
 80174c8:	42020800 	.word	0x42020800
 80174cc:	42020c00 	.word	0x42020c00
 80174d0:	42021000 	.word	0x42021000
 80174d4:	42021c00 	.word	0x42021c00
 80174d8:	40021000 	.word	0x40021000

080174dc <GPIO_Input_Read>:
}


uint8_t GPIO_Input_Read(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 80174dc:	f7fa b83c 	b.w	8011558 <HAL_GPIO_ReadPin>

080174e0 <Device_IO_Init>:

/**
  * @brief  Device I/O Initialize Function
  */
void Device_IO_Init(void)
{
 80174e0:	b508      	push	{r3, lr}
    struct __serial_option *serial_option = (struct __serial_option *)&(get_DevConfig_pointer()->serial_option);
 80174e2:	f7fc fda7 	bl	8014034 <get_DevConfig_pointer>
    // Status I/O - Shared pin init: Connection status pins or DTR/DSR pins
    //init_connection_status_io();


    // Set the DTR pin to high when the DTR signal enabled (== PHY link status disabled)
    if(serial_option->dtr_en == 1) set_flowcontrol_dtr_pin(ON);
 80174e6:	f890 20ef 	ldrb.w	r2, [r0, #239]	; 0xef
 80174ea:	2a01      	cmp	r2, #1
 80174ec:	d000      	beq.n	80174f0 <Device_IO_Init+0x10>
    get_user_io_val(USER_IO_C, &val);
    printf("USER_IO_C: [val] %d, [enable] %s, [type] %s, [direction] %s\r\n", val, get_user_io_enabled(USER_IO_C)?"enabled":"disabled", get_user_io_type(USER_IO_C)?"analog":"digital", get_user_io_direction(USER_IO_C)?"output":"input");
    get_user_io_val(USER_IO_D, &val);
    printf("USER_IO_D: [val] %d, [enable] %s, [type] %s, [direction] %s\r\n", val, get_user_io_enabled(USER_IO_D)?"enabled":"disabled", get_user_io_type(USER_IO_D)?"analog":"digital", get_user_io_direction(USER_IO_D)?"output":"input");
    */
}
 80174ee:	bd08      	pop	{r3, pc}
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80174f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
}
 80174f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80174f8:	4801      	ldr	r0, [pc, #4]	; (8017500 <Device_IO_Init+0x20>)
 80174fa:	f7fa b833 	b.w	8011564 <HAL_GPIO_WritePin>
 80174fe:	bf00      	nop
 8017500:	42020400 	.word	0x42020400

08017504 <init_connection_status_io>:
    if(serial->dsr_en == 0)
        init_tcpconnection_status_pin();
    else
        init_flowcontrol_dsr_pin();
    */
}
 8017504:	4770      	bx	lr
 8017506:	bf00      	nop

08017508 <set_connection_status_io>:

// This function is intended only for output connection status pins; PHYlink, TCPconnection
void set_connection_status_io(uint16_t pin, uint8_t channel, uint8_t set)
{
 8017508:	b570      	push	{r4, r5, r6, lr}
 801750a:	460d      	mov	r5, r1
 801750c:	4604      	mov	r4, r0
 801750e:	4616      	mov	r6, r2
    struct __serial_option *serial_option = (struct __serial_option *)&(get_DevConfig_pointer()->serial_option);
 8017510:	f7fc fd90 	bl	8014034 <get_DevConfig_pointer>

    if(channel >= DEVICE_UART_CNT) return;
 8017514:	b92d      	cbnz	r5, 8017522 <set_connection_status_io+0x1a>

    if(pin == STATUS_PHYLINK_PIN)
 8017516:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801751a:	d011      	beq.n	8017540 <set_connection_status_io+0x38>
        {
            GPIO_Output_Set(STATUS_PHYLINK_PORT, STATUS_PHYLINK_PIN);
            //LED_Off(LED_0);
        }
    }
    else if(pin == STATUS_TCPCONNECT_PIN)
 801751c:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 8017520:	d000      	beq.n	8017524 <set_connection_status_io+0x1c>
            GPIO_Output_Set(STATUS_TCPCONNECT_PORT, STATUS_TCPCONNECT_PIN);
            //LED_Off(LED_1);
        }
    }
    
}
 8017522:	bd70      	pop	{r4, r5, r6, pc}
        PRT_INFO("pin = TCP, set = %d\r\n", set);
 8017524:	4632      	mov	r2, r6
 8017526:	490d      	ldr	r1, [pc, #52]	; (801755c <set_connection_status_io+0x54>)
 8017528:	480d      	ldr	r0, [pc, #52]	; (8017560 <set_connection_status_io+0x58>)
 801752a:	f000 fc8b 	bl	8017e44 <WIZ_SECURE_printf>
        if(set == ON)
 801752e:	2e01      	cmp	r6, #1
 8017530:	d00d      	beq.n	801754e <set_connection_status_io+0x46>
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8017532:	4621      	mov	r1, r4
}
 8017534:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8017538:	2201      	movs	r2, #1
 801753a:	480a      	ldr	r0, [pc, #40]	; (8017564 <set_connection_status_io+0x5c>)
 801753c:	f7fa b812 	b.w	8011564 <HAL_GPIO_WritePin>
        PRT_INFO("pin = PHY, set = %d\r\n", set);
 8017540:	4632      	mov	r2, r6
 8017542:	4906      	ldr	r1, [pc, #24]	; (801755c <set_connection_status_io+0x54>)
 8017544:	4808      	ldr	r0, [pc, #32]	; (8017568 <set_connection_status_io+0x60>)
 8017546:	f000 fc7d 	bl	8017e44 <WIZ_SECURE_printf>
        if(set == ON)
 801754a:	2e01      	cmp	r6, #1
 801754c:	d1f1      	bne.n	8017532 <set_connection_status_io+0x2a>
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 801754e:	462a      	mov	r2, r5
 8017550:	4621      	mov	r1, r4
}
 8017552:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8017556:	4803      	ldr	r0, [pc, #12]	; (8017564 <set_connection_status_io+0x5c>)
 8017558:	f7fa b804 	b.w	8011564 <HAL_GPIO_WritePin>
 801755c:	08033070 	.word	0x08033070
 8017560:	0803304c 	.word	0x0803304c
 8017564:	42020400 	.word	0x42020400
 8017568:	08033028 	.word	0x08033028

0801756c <get_connection_status_io>:

uint8_t get_connection_status_io(uint16_t pin, uint8_t channel)
{
    uint8_t status = IO_LOW;

    if(pin == STATUS_PHYLINK_PIN)
 801756c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
{
 8017570:	b508      	push	{r3, lr}
    if(pin == STATUS_PHYLINK_PIN)
 8017572:	d004      	beq.n	801757e <get_connection_status_io+0x12>
    {
        if(get_phylink() == PHY_LINK_ON)
            status = IO_HIGH;
    }
    else if(pin == STATUS_TCPCONNECT_PIN)
 8017574:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8017578:	d009      	beq.n	801758e <get_connection_status_io+0x22>
    uint8_t status = IO_LOW;
 801757a:	2000      	movs	r0, #0
                status = GPIO_Input_Read(DSR_PORT, DSR_PIN);
    }
#endif
    
    return status;
}
 801757c:	bd08      	pop	{r3, pc}
        if(get_phylink() == PHY_LINK_ON)
 801757e:	f7fc fcf7 	bl	8013f70 <get_phylink>
            status = IO_HIGH;
 8017582:	f1a0 0001 	sub.w	r0, r0, #1
 8017586:	fab0 f080 	clz	r0, r0
 801758a:	0940      	lsrs	r0, r0, #5
}
 801758c:	bd08      	pop	{r3, pc}
        if(get_device_status(channel) == ST_CONNECT)
 801758e:	4608      	mov	r0, r1
 8017590:	f000 fd70 	bl	8018074 <get_device_status>
            status = IO_HIGH;
 8017594:	f1a0 0002 	sub.w	r0, r0, #2
 8017598:	fab0 f080 	clz	r0, r0
 801759c:	0940      	lsrs	r0, r0, #5
}
 801759e:	bd08      	pop	{r3, pc}

080175a0 <set_flowcontrol_dtr_pin>:
     */
}

void set_flowcontrol_dtr_pin(uint8_t set)
{
    if(set == ON)
 80175a0:	2801      	cmp	r0, #1
 80175a2:	d005      	beq.n	80175b0 <set_flowcontrol_dtr_pin+0x10>
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80175a4:	2200      	movs	r2, #0
 80175a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80175aa:	4804      	ldr	r0, [pc, #16]	; (80175bc <set_flowcontrol_dtr_pin+0x1c>)
 80175ac:	f7f9 bfda 	b.w	8011564 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80175b0:	4602      	mov	r2, r0
 80175b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80175b6:	4801      	ldr	r0, [pc, #4]	; (80175bc <set_flowcontrol_dtr_pin+0x1c>)
 80175b8:	f7f9 bfd4 	b.w	8011564 <HAL_GPIO_WritePin>
 80175bc:	42020400 	.word	0x42020400

080175c0 <get_flowcontrol_dsr_pin>:
    return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 80175c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80175c4:	4801      	ldr	r0, [pc, #4]	; (80175cc <get_flowcontrol_dsr_pin+0xc>)
 80175c6:	f7f9 bfc7 	b.w	8011558 <HAL_GPIO_ReadPin>
 80175ca:	bf00      	nop
 80175cc:	42020400 	.word	0x42020400

080175d0 <check_phylink_status>:
}


// Check the PHY link status
uint8_t check_phylink_status(void)
{
 80175d0:	b538      	push	{r3, r4, r5, lr}
    static uint8_t prev_link_status;
    uint8_t link_status;

    link_status = get_phylink();
 80175d2:	f7fc fccd 	bl	8013f70 <get_phylink>

    //PRT_INFO("link_status = %d\r\n", link_status);
    
    if(prev_link_status != link_status)
 80175d6:	4d13      	ldr	r5, [pc, #76]	; (8017624 <check_phylink_status+0x54>)
    link_status = get_phylink();
 80175d8:	4604      	mov	r4, r0
    if(prev_link_status != link_status)
 80175da:	782b      	ldrb	r3, [r5, #0]
 80175dc:	4283      	cmp	r3, r0
 80175de:	d00f      	beq.n	8017600 <check_phylink_status+0x30>
    {
        if(link_status == PHY_LINK_ON)
 80175e0:	2801      	cmp	r0, #1
 80175e2:	d00f      	beq.n	8017604 <check_phylink_status+0x34>
    struct __serial_option *serial_option = (struct __serial_option *)&(get_DevConfig_pointer()->serial_option);
 80175e4:	f7fc fd26 	bl	8014034 <get_DevConfig_pointer>
        PRT_INFO("pin = PHY, set = %d\r\n", set);
 80175e8:	2200      	movs	r2, #0
 80175ea:	490f      	ldr	r1, [pc, #60]	; (8017628 <check_phylink_status+0x58>)
 80175ec:	480f      	ldr	r0, [pc, #60]	; (801762c <check_phylink_status+0x5c>)
 80175ee:	f000 fc29 	bl	8017e44 <WIZ_SECURE_printf>
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80175f2:	2201      	movs	r2, #1
 80175f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80175f8:	480d      	ldr	r0, [pc, #52]	; (8017630 <check_phylink_status+0x60>)
 80175fa:	f7f9 ffb3 	bl	8011564 <HAL_GPIO_WritePin>
            set_connection_status_io(STATUS_PHYLINK_PIN, 0, ON); 	// PHY Link up
        else
            set_connection_status_io(STATUS_PHYLINK_PIN, 0, OFF); 	// PHY Link down
        
        prev_link_status = link_status;
 80175fe:	702c      	strb	r4, [r5, #0]
    }
    return link_status;
}
 8017600:	4620      	mov	r0, r4
 8017602:	bd38      	pop	{r3, r4, r5, pc}
    struct __serial_option *serial_option = (struct __serial_option *)&(get_DevConfig_pointer()->serial_option);
 8017604:	f7fc fd16 	bl	8014034 <get_DevConfig_pointer>
        PRT_INFO("pin = PHY, set = %d\r\n", set);
 8017608:	4622      	mov	r2, r4
 801760a:	4907      	ldr	r1, [pc, #28]	; (8017628 <check_phylink_status+0x58>)
 801760c:	4807      	ldr	r0, [pc, #28]	; (801762c <check_phylink_status+0x5c>)
 801760e:	f000 fc19 	bl	8017e44 <WIZ_SECURE_printf>
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8017612:	2200      	movs	r2, #0
 8017614:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017618:	4805      	ldr	r0, [pc, #20]	; (8017630 <check_phylink_status+0x60>)
 801761a:	f7f9 ffa3 	bl	8011564 <HAL_GPIO_WritePin>
        prev_link_status = link_status;
 801761e:	702c      	strb	r4, [r5, #0]
 8017620:	e7ee      	b.n	8017600 <check_phylink_status+0x30>
 8017622:	bf00      	nop
 8017624:	200198ac 	.word	0x200198ac
 8017628:	08033070 	.word	0x08033070
 801762c:	08033028 	.word	0x08033028
 8017630:	42020400 	.word	0x42020400

08017634 <gpio_handler_timer_msec>:

// This function have to call every 1 millisecond by Timer IRQ handler routine.
void gpio_handler_timer_msec(void)
{
    // PHY link check
    if(++phylink_check_time_msec >= PHYLINK_CHECK_CYCLE_MSEC)
 8017634:	4a06      	ldr	r2, [pc, #24]	; (8017650 <gpio_handler_timer_msec+0x1c>)
 8017636:	8813      	ldrh	r3, [r2, #0]
 8017638:	3301      	adds	r3, #1
 801763a:	b29b      	uxth	r3, r3
 801763c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017640:	8013      	strh	r3, [r2, #0]
 8017642:	d304      	bcc.n	801764e <gpio_handler_timer_msec+0x1a>
    {
        phylink_check_time_msec = 0;
 8017644:	2000      	movs	r0, #0
        //check_phylink_status();
        
        flag_check_phylink = 1;
 8017646:	2101      	movs	r1, #1
 8017648:	4b02      	ldr	r3, [pc, #8]	; (8017654 <gpio_handler_timer_msec+0x20>)
        phylink_check_time_msec = 0;
 801764a:	8010      	strh	r0, [r2, #0]
        flag_check_phylink = 1;
 801764c:	7019      	strb	r1, [r3, #0]
    }
}
 801764e:	4770      	bx	lr
 8017650:	2001838c 	.word	0x2001838c
 8017654:	2001838b 	.word	0x2001838b

08017658 <HAL_GPIO_EXTI_Falling_Callback>:

uint8_t factory_flag;
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
    factory_flag = 1;
 8017658:	2201      	movs	r2, #1
 801765a:	4b01      	ldr	r3, [pc, #4]	; (8017660 <HAL_GPIO_EXTI_Falling_Callback+0x8>)
 801765c:	701a      	strb	r2, [r3, #0]
}
 801765e:	4770      	bx	lr
 8017660:	2001edc4 	.word	0x2001edc4

08017664 <read_storage>:

uint32_t read_storage(teDATASTORAGE stype, uint32_t addr, void *data, uint16_t size)
{
    uint32_t ret_len;
    
    switch(stype)
 8017664:	2803      	cmp	r0, #3
 8017666:	d810      	bhi.n	801768a <read_storage+0x26>
 8017668:	2801      	cmp	r0, #1
{
 801766a:	b420      	push	{r5}
 801766c:	460d      	mov	r5, r1
 801766e:	4611      	mov	r1, r2
 8017670:	461a      	mov	r2, r3
    switch(stype)
 8017672:	d805      	bhi.n	8017680 <read_storage+0x1c>
 8017674:	b158      	cbz	r0, 801768e <read_storage+0x2a>
            //ret_len = read_flash(OTP_BASE, data, size);
            ret_len = read_flash(FLASH_MAC_ADDR, data, size);
            break;
        
        case STORAGE_CONFIG:
            ret_len = read_flash(FLASH_DEV_INFO_ADDR, data, size);
 8017676:	4808      	ldr	r0, [pc, #32]	; (8017698 <read_storage+0x34>)
        default:
            break;
    }
    
    return ret_len;
}
 8017678:	f85d 5b04 	ldr.w	r5, [sp], #4
            ret_len = read_flash(FLASH_DEV_INFO_ADDR, data, size);
 801767c:	f7ff be30 	b.w	80172e0 <read_flash>
            ret_len = read_flash(addr, data, size);
 8017680:	4628      	mov	r0, r5
}
 8017682:	f85d 5b04 	ldr.w	r5, [sp], #4
            ret_len = read_flash(addr, data, size);
 8017686:	f7ff be2b 	b.w	80172e0 <read_flash>
}
 801768a:	2000      	movs	r0, #0
 801768c:	4770      	bx	lr
            ret_len = read_flash(FLASH_MAC_ADDR, data, size);
 801768e:	4803      	ldr	r0, [pc, #12]	; (801769c <read_storage+0x38>)
}
 8017690:	f85d 5b04 	ldr.w	r5, [sp], #4
            ret_len = read_flash(FLASH_MAC_ADDR, data, size);
 8017694:	f7ff be24 	b.w	80172e0 <read_flash>
 8017698:	08070000 	.word	0x08070000
 801769c:	08074000 	.word	0x08074000

080176a0 <write_storage>:


uint32_t write_storage(teDATASTORAGE stype, uint32_t addr, void *data, uint16_t size)
{
 80176a0:	4611      	mov	r1, r2
 80176a2:	b508      	push	{r3, lr}
 80176a4:	461a      	mov	r2, r3
 80176a6:	280b      	cmp	r0, #11
 80176a8:	d80a      	bhi.n	80176c0 <write_storage+0x20>
 80176aa:	e8df f000 	tbb	[pc, r0]
 80176ae:	100b      	.short	0x100b
 80176b0:	09090909 	.word	0x09090909
 80176b4:	15090909 	.word	0x15090909
 80176b8:	061a      	.short	0x061a
        
        case STORAGE_CLICA:
            write_flash(FLASH_CLICA_ADDR, data, size);
            break;
        case STORAGE_PKEY:
            write_flash(FLASH_PRIKEY_ADDR, data, size);
 80176ba:	480c      	ldr	r0, [pc, #48]	; (80176ec <write_storage+0x4c>)
 80176bc:	f7ff fdb0 	bl	8017220 <write_flash>
        default:
            break;
    }
    
    return ret_len;
}
 80176c0:	2000      	movs	r0, #0
 80176c2:	bd08      	pop	{r3, pc}
            write_flash(FLASH_MAC_ADDR, data, size);
 80176c4:	480a      	ldr	r0, [pc, #40]	; (80176f0 <write_storage+0x50>)
 80176c6:	f7ff fdab 	bl	8017220 <write_flash>
}
 80176ca:	2000      	movs	r0, #0
 80176cc:	bd08      	pop	{r3, pc}
            write_flash(FLASH_DEV_INFO_ADDR, data, size);
 80176ce:	4809      	ldr	r0, [pc, #36]	; (80176f4 <write_storage+0x54>)
 80176d0:	f7ff fda6 	bl	8017220 <write_flash>
}
 80176d4:	2000      	movs	r0, #0
 80176d6:	bd08      	pop	{r3, pc}
            write_flash(FLASH_ROOTCA_ADDR, data, size);            
 80176d8:	4807      	ldr	r0, [pc, #28]	; (80176f8 <write_storage+0x58>)
 80176da:	f7ff fda1 	bl	8017220 <write_flash>
}
 80176de:	2000      	movs	r0, #0
 80176e0:	bd08      	pop	{r3, pc}
            write_flash(FLASH_CLICA_ADDR, data, size);
 80176e2:	4806      	ldr	r0, [pc, #24]	; (80176fc <write_storage+0x5c>)
 80176e4:	f7ff fd9c 	bl	8017220 <write_flash>
}
 80176e8:	2000      	movs	r0, #0
 80176ea:	bd08      	pop	{r3, pc}
 80176ec:	08073000 	.word	0x08073000
 80176f0:	08074000 	.word	0x08074000
 80176f4:	08070000 	.word	0x08070000
 80176f8:	08071000 	.word	0x08071000
 80176fc:	08072000 	.word	0x08072000

08017700 <erase_storage>:

void erase_storage(teDATASTORAGE stype)
{
 8017700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017704:	280a      	cmp	r0, #10
 8017706:	d807      	bhi.n	8017718 <erase_storage+0x18>
 8017708:	e8df f000 	tbb	[pc, r0]
 801770c:	0606312c 	.word	0x0606312c
 8017710:	06060606 	.word	0x06060606
 8017714:	363b      	.short	0x363b
 8017716:	27          	.byte	0x27
 8017717:	00          	.byte	0x00
        case STORAGE_CLICA:
            erase_flash_page(FLASH_CLICA_ADDR);
        default:
            break;
    }
    if((stype == STORAGE_APPBANK0) || (stype == STORAGE_APPBANK1))
 8017718:	3807      	subs	r0, #7
 801771a:	2801      	cmp	r0, #1
 801771c:	d834      	bhi.n	8017788 <erase_storage+0x88>
 801771e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80177a8 <erase_storage+0xa8>
 8017722:	4644      	mov	r4, r8
        sectors = FLASH_USE_BANK_SIZE / FLASH_BANK_PAGE_SIZE;

        for(i = 0; i < sectors; i++)
        {
            ret = erase_flash_page(working_address);
            PRT_INFO(" > STORAGE:SECTOR_ERASE:ADDR - 0x%x\r\n", working_address);
 8017724:	4f19      	ldr	r7, [pc, #100]	; (801778c <erase_storage+0x8c>)
 8017726:	4e1a      	ldr	r6, [pc, #104]	; (8017790 <erase_storage+0x90>)
 8017728:	f508 3540 	add.w	r5, r8, #196608	; 0x30000
            ret = erase_flash_page(working_address);
 801772c:	4620      	mov	r0, r4
 801772e:	f7ff fe15 	bl	801735c <erase_flash_page>
            PRT_INFO(" > STORAGE:SECTOR_ERASE:ADDR - 0x%x\r\n", working_address);
 8017732:	4622      	mov	r2, r4
 8017734:	4639      	mov	r1, r7
 8017736:	4630      	mov	r0, r6
            working_address += FLASH_BANK_PAGE_SIZE;
 8017738:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
            PRT_INFO(" > STORAGE:SECTOR_ERASE:ADDR - 0x%x\r\n", working_address);
 801773c:	f000 fb82 	bl	8017e44 <WIZ_SECURE_printf>
        for(i = 0; i < sectors; i++)
 8017740:	42ac      	cmp	r4, r5
 8017742:	d1f3      	bne.n	801772c <erase_storage+0x2c>
        }
        //working_address += (sectors * SECT_SIZE);
        PRT_INFO(" > STORAGE:ERASE_END:ADDR_RANGE - [0x%x ~ 0x%x]\r\n", address, working_address-1);
 8017744:	f508 333f 	add.w	r3, r8, #195584	; 0x2fc00
 8017748:	4642      	mov	r2, r8
    }
}
 801774a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        PRT_INFO(" > STORAGE:ERASE_END:ADDR_RANGE - [0x%x ~ 0x%x]\r\n", address, working_address-1);
 801774e:	490f      	ldr	r1, [pc, #60]	; (801778c <erase_storage+0x8c>)
 8017750:	4810      	ldr	r0, [pc, #64]	; (8017794 <erase_storage+0x94>)
 8017752:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8017756:	f000 bb75 	b.w	8017e44 <WIZ_SECURE_printf>
            erase_flash_page(FLASH_CLICA_ADDR);
 801775a:	480f      	ldr	r0, [pc, #60]	; (8017798 <erase_storage+0x98>)
}
 801775c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            erase_flash_page(FLASH_CLICA_ADDR);
 8017760:	f7ff bdfc 	b.w	801735c <erase_flash_page>
            printf("can't erase MAC in f/w, use stm32cube programmer\r\n");
 8017764:	480d      	ldr	r0, [pc, #52]	; (801779c <erase_storage+0x9c>)
}
 8017766:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            printf("can't erase MAC in f/w, use stm32cube programmer\r\n");
 801776a:	f018 bcc3 	b.w	80300f4 <puts>
            erase_flash_page(FLASH_DEV_INFO_ADDR);
 801776e:	480c      	ldr	r0, [pc, #48]	; (80177a0 <erase_storage+0xa0>)
}
 8017770:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            erase_flash_page(FLASH_DEV_INFO_ADDR);
 8017774:	f7ff bdf2 	b.w	801735c <erase_flash_page>
            erase_flash_page(FLASH_ROOTCA_ADDR);
 8017778:	480a      	ldr	r0, [pc, #40]	; (80177a4 <erase_storage+0xa4>)
}
 801777a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            erase_flash_page(FLASH_ROOTCA_ADDR);
 801777e:	f7ff bded 	b.w	801735c <erase_flash_page>
{
 8017782:	f8df 8028 	ldr.w	r8, [pc, #40]	; 80177ac <erase_storage+0xac>
 8017786:	e7cc      	b.n	8017722 <erase_storage+0x22>
}
 8017788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801778c:	08033134 	.word	0x08033134
 8017790:	080330c0 	.word	0x080330c0
 8017794:	080330f4 	.word	0x080330f4
 8017798:	08072000 	.word	0x08072000
 801779c:	0803308c 	.word	0x0803308c
 80177a0:	08070000 	.word	0x08070000
 80177a4:	08071000 	.word	0x08071000
 80177a8:	08010000 	.word	0x08010000
 80177ac:	08040000 	.word	0x08040000

080177b0 <HAL_TIM_PeriodElapsedCallback>:
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
    if(htim->Instance == TIM2)
 80177b0:	6803      	ldr	r3, [r0, #0]
 80177b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80177b6:	d000      	beq.n	80177ba <HAL_TIM_PeriodElapsedCallback+0xa>
 80177b8:	4770      	bx	lr
    {
        delaytime_msec++;
 80177ba:	4a4a      	ldr	r2, [pc, #296]	; (80178e4 <HAL_TIM_PeriodElapsedCallback+0x134>)
{
 80177bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        delaytime_msec++;
 80177c0:	6813      	ldr	r3, [r2, #0]
        msec_cnt++; // millisecond counter
 80177c2:	f8df a150 	ldr.w	sl, [pc, #336]	; 8017914 <HAL_TIM_PeriodElapsedCallback+0x164>
        delaytime_msec++;
 80177c6:	3301      	adds	r3, #1
 80177c8:	6013      	str	r3, [r2, #0]
        msec_cnt++; // millisecond counter
 80177ca:	f8ba 3000 	ldrh.w	r3, [sl]

        devtime_msec++;
 80177ce:	4946      	ldr	r1, [pc, #280]	; (80178e8 <HAL_TIM_PeriodElapsedCallback+0x138>)
        msec_cnt++; // millisecond counter
 80177d0:	3301      	adds	r3, #1
 80177d2:	b29b      	uxth	r3, r3
 80177d4:	f8aa 3000 	strh.w	r3, [sl]
        devtime_msec++;
 80177d8:	e9d1 2300 	ldrd	r2, r3, [r1]
 80177dc:	f112 0801 	adds.w	r8, r2, #1
 80177e0:	f143 0900 	adc.w	r9, r3, #0
 80177e4:	e9c1 8900 	strd	r8, r9, [r1]

        seg_timer_msec();		        // [msec] time counter for SEG (S2E)
 80177e8:	f003 f8b8 	bl	801a95c <seg_timer_msec>
        segcp_timer_msec();		        // [msec] time counter for SEGCP (Config)
 80177ec:	f7fe fdb0 	bl	8016350 <segcp_timer_msec>
        //device_timer_msec();	        // [msec] time counter for DeviceHandler (fw update)
        MilliTimer_Handler();           // [msec] time counter for MQTT client
 80177f0:	f006 fa38 	bl	801dc64 <MilliTimer_Handler>

//        if(flag_s2e_application_running)
        {
            gpio_handler_timer_msec();
 80177f4:	f7ff ff1e 	bl	8017634 <gpio_handler_timer_msec>
        }

        /* Second Process */
        if(msec_cnt >= 1000 - 1)
 80177f8:	f240 32e6 	movw	r2, #998	; 0x3e6
 80177fc:	f8ba 3000 	ldrh.w	r3, [sl]
 8017800:	b29b      	uxth	r3, r3
 8017802:	4293      	cmp	r3, r2
 8017804:	d848      	bhi.n	8017898 <HAL_TIM_PeriodElapsedCallback+0xe8>
 8017806:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8017918 <HAL_TIM_PeriodElapsedCallback+0x168>
            devtime_sec++;              // device time counter,
            currenttime_sec++;          // Can be updated this counter value by time protocol like NTP.
        }

        /* Minute Process */
        if(sec_cnt >= 60)
 801780a:	f898 3000 	ldrb.w	r3, [r8]
 801780e:	2b3b      	cmp	r3, #59	; 0x3b
 8017810:	d81b      	bhi.n	801784a <HAL_TIM_PeriodElapsedCallback+0x9a>
 8017812:	4a36      	ldr	r2, [pc, #216]	; (80178ec <HAL_TIM_PeriodElapsedCallback+0x13c>)
            sec_cnt = 0;
            min_cnt++;                  // minute counter
        }

        /* Hour Process */
        if(min_cnt >= 60)
 8017814:	7813      	ldrb	r3, [r2, #0]
 8017816:	2b3b      	cmp	r3, #59	; 0x3b
 8017818:	d80f      	bhi.n	801783a <HAL_TIM_PeriodElapsedCallback+0x8a>
 801781a:	4b35      	ldr	r3, [pc, #212]	; (80178f0 <HAL_TIM_PeriodElapsedCallback+0x140>)
            min_cnt = 0;
            hour_cnt++;                 // hour counter
        }

        /* Day Process */
        if(hour_cnt >= 24)
 801781c:	781a      	ldrb	r2, [r3, #0]
 801781e:	2a17      	cmp	r2, #23
 8017820:	d906      	bls.n	8017830 <HAL_TIM_PeriodElapsedCallback+0x80>
        {
            hour_cnt = 0;
 8017822:	2100      	movs	r1, #0
            day_cnt++;                  // day counter
 8017824:	4a33      	ldr	r2, [pc, #204]	; (80178f4 <HAL_TIM_PeriodElapsedCallback+0x144>)
            hour_cnt = 0;
 8017826:	7019      	strb	r1, [r3, #0]
            day_cnt++;                  // day counter
 8017828:	8813      	ldrh	r3, [r2, #0]
 801782a:	3301      	adds	r3, #1
 801782c:	b29b      	uxth	r3, r3
 801782e:	8013      	strh	r3, [r2, #0]
        }

#ifdef __USE_HW_FACTORY_RESET__
    	/* Factory Reset Process */
    	if(factory_flag) {
 8017830:	4c31      	ldr	r4, [pc, #196]	; (80178f8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8017832:	7823      	ldrb	r3, [r4, #0]
 8017834:	b993      	cbnz	r3, 801785c <HAL_TIM_PeriodElapsedCallback+0xac>
    			NVIC_SystemReset();
    		}
    	}
#endif        
    }
}
 8017836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            min_cnt = 0;
 801783a:	2100      	movs	r1, #0
            hour_cnt++;                 // hour counter
 801783c:	4b2c      	ldr	r3, [pc, #176]	; (80178f0 <HAL_TIM_PeriodElapsedCallback+0x140>)
            min_cnt = 0;
 801783e:	7011      	strb	r1, [r2, #0]
            hour_cnt++;                 // hour counter
 8017840:	781a      	ldrb	r2, [r3, #0]
 8017842:	3201      	adds	r2, #1
 8017844:	b2d2      	uxtb	r2, r2
 8017846:	701a      	strb	r2, [r3, #0]
 8017848:	e7e8      	b.n	801781c <HAL_TIM_PeriodElapsedCallback+0x6c>
            sec_cnt = 0;
 801784a:	2300      	movs	r3, #0
            min_cnt++;                  // minute counter
 801784c:	4a27      	ldr	r2, [pc, #156]	; (80178ec <HAL_TIM_PeriodElapsedCallback+0x13c>)
            sec_cnt = 0;
 801784e:	f888 3000 	strb.w	r3, [r8]
            min_cnt++;                  // minute counter
 8017852:	7813      	ldrb	r3, [r2, #0]
 8017854:	3301      	adds	r3, #1
 8017856:	b2db      	uxtb	r3, r3
 8017858:	7013      	strb	r3, [r2, #0]
 801785a:	e7db      	b.n	8017814 <HAL_TIM_PeriodElapsedCallback+0x64>
    		factory_time++;
 801785c:	4d27      	ldr	r5, [pc, #156]	; (80178fc <HAL_TIM_PeriodElapsedCallback+0x14c>)
            if (GPIO_Input_Read(FAC_RSTn_PORT, FAC_RSTn_PIN))
 801785e:	2110      	movs	r1, #16
    		factory_time++;
 8017860:	682b      	ldr	r3, [r5, #0]
            if (GPIO_Input_Read(FAC_RSTn_PORT, FAC_RSTn_PIN))
 8017862:	4827      	ldr	r0, [pc, #156]	; (8017900 <HAL_TIM_PeriodElapsedCallback+0x150>)
    		factory_time++;
 8017864:	3301      	adds	r3, #1
 8017866:	602b      	str	r3, [r5, #0]
            if (GPIO_Input_Read(FAC_RSTn_PORT, FAC_RSTn_PIN))
 8017868:	f7ff fe38 	bl	80174dc <GPIO_Input_Read>
 801786c:	2800      	cmp	r0, #0
 801786e:	d135      	bne.n	80178dc <HAL_TIM_PeriodElapsedCallback+0x12c>
            else if (factory_time >= FACTORY_RESET_TIME_MS) 
 8017870:	f241 3387 	movw	r3, #4999	; 0x1387
 8017874:	682a      	ldr	r2, [r5, #0]
 8017876:	429a      	cmp	r2, r3
 8017878:	d9dd      	bls.n	8017836 <HAL_TIM_PeriodElapsedCallback+0x86>
    			device_set_factory_default();
 801787a:	f7fe ff5d 	bl	8016738 <device_set_factory_default>
  __ASM volatile ("dsb 0xF":::"memory");
 801787e:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8017882:	4920      	ldr	r1, [pc, #128]	; (8017904 <HAL_TIM_PeriodElapsedCallback+0x154>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8017884:	4b20      	ldr	r3, [pc, #128]	; (8017908 <HAL_TIM_PeriodElapsedCallback+0x158>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8017886:	68ca      	ldr	r2, [r1, #12]
 8017888:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801788c:	4313      	orrs	r3, r2
 801788e:	60cb      	str	r3, [r1, #12]
 8017890:	f3bf 8f4f 	dsb	sy
    __NOP();
 8017894:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8017896:	e7fd      	b.n	8017894 <HAL_TIM_PeriodElapsedCallback+0xe4>
            msec_cnt = 0;
 8017898:	2300      	movs	r3, #0
            sec_cnt++;                  // second counter
 801789a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8017918 <HAL_TIM_PeriodElapsedCallback+0x168>
            msec_cnt = 0;
 801789e:	f8aa 3000 	strh.w	r3, [sl]
            sec_cnt++;                  // second counter
 80178a2:	f898 3000 	ldrb.w	r3, [r8]
 80178a6:	3301      	adds	r3, #1
 80178a8:	b2db      	uxtb	r3, r3
 80178aa:	f888 3000 	strb.w	r3, [r8]
            seg_timer_sec();            // [sec] time counter for SEG (S2E)
 80178ae:	f003 f8ed 	bl	801aa8c <seg_timer_sec>
            DHCP_time_handler();	    // [sec] time counter for DHCP timeout
 80178b2:	f005 fb79 	bl	801cfa8 <DHCP_time_handler>
            DNS_time_handler();		    // [sec] time counter for DNS timeout
 80178b6:	f005 fda5 	bl	801d404 <DNS_time_handler>
            devtime_sec++;              // device time counter,
 80178ba:	4814      	ldr	r0, [pc, #80]	; (801790c <HAL_TIM_PeriodElapsedCallback+0x15c>)
            currenttime_sec++;          // Can be updated this counter value by time protocol like NTP.
 80178bc:	4914      	ldr	r1, [pc, #80]	; (8017910 <HAL_TIM_PeriodElapsedCallback+0x160>)
            devtime_sec++;              // device time counter,
 80178be:	e9d0 2300 	ldrd	r2, r3, [r0]
 80178c2:	1c56      	adds	r6, r2, #1
 80178c4:	f143 0700 	adc.w	r7, r3, #0
 80178c8:	e9c0 6700 	strd	r6, r7, [r0]
            currenttime_sec++;          // Can be updated this counter value by time protocol like NTP.
 80178cc:	e9d1 2300 	ldrd	r2, r3, [r1]
 80178d0:	1c54      	adds	r4, r2, #1
 80178d2:	f143 0500 	adc.w	r5, r3, #0
 80178d6:	e9c1 4500 	strd	r4, r5, [r1]
 80178da:	e796      	b.n	801780a <HAL_TIM_PeriodElapsedCallback+0x5a>
                factory_flag = 0;
 80178dc:	2300      	movs	r3, #0
 80178de:	7023      	strb	r3, [r4, #0]
                factory_time = 0;
 80178e0:	602b      	str	r3, [r5, #0]
 80178e2:	e7a8      	b.n	8017836 <HAL_TIM_PeriodElapsedCallback+0x86>
 80178e4:	200198bc 	.word	0x200198bc
 80178e8:	200198c0 	.word	0x200198c0
 80178ec:	200198d5 	.word	0x200198d5
 80178f0:	200198d4 	.word	0x200198d4
 80178f4:	200198b8 	.word	0x200198b8
 80178f8:	2001edc4 	.word	0x2001edc4
 80178fc:	200198d0 	.word	0x200198d0
 8017900:	42020400 	.word	0x42020400
 8017904:	e000ed00 	.word	0xe000ed00
 8017908:	05fa0004 	.word	0x05fa0004
 801790c:	200198c8 	.word	0x200198c8
 8017910:	200198b0 	.word	0x200198b0
 8017914:	200198d6 	.word	0x200198d6
 8017918:	200198d8 	.word	0x200198d8

0801791c <delay_ms>:

void delay_ms(uint32_t ms)
{
    uint32_t wakeuptime_msec = delaytime_msec + ms;
 801791c:	4a03      	ldr	r2, [pc, #12]	; (801792c <delay_ms+0x10>)
 801791e:	6813      	ldr	r3, [r2, #0]
 8017920:	4418      	add	r0, r3
    while(wakeuptime_msec > delaytime_msec){}
 8017922:	6813      	ldr	r3, [r2, #0]
 8017924:	4283      	cmp	r3, r0
 8017926:	d3fc      	bcc.n	8017922 <delay_ms+0x6>
}
 8017928:	4770      	bx	lr
 801792a:	bf00      	nop
 801792c:	200198bc 	.word	0x200198bc

08017930 <millis>:
    devtime_sec = timeval_sec;
}

time_t millis(void)
{
    return devtime_msec;
 8017930:	4b01      	ldr	r3, [pc, #4]	; (8017938 <millis+0x8>)
}
 8017932:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017936:	4770      	bx	lr
 8017938:	200198c0 	.word	0x200198c0

0801793c <getDeviceUptime_day>:
    currenttime_sec = timeval_sec;
}

uint32_t getDeviceUptime_day(void)
{
    return day_cnt;
 801793c:	4b01      	ldr	r3, [pc, #4]	; (8017944 <getDeviceUptime_day+0x8>)
 801793e:	8818      	ldrh	r0, [r3, #0]
}
 8017940:	b280      	uxth	r0, r0
 8017942:	4770      	bx	lr
 8017944:	200198b8 	.word	0x200198b8

08017948 <getDeviceUptime_hour>:

uint8_t getDeviceUptime_hour(void)
{
    return hour_cnt;
 8017948:	4b01      	ldr	r3, [pc, #4]	; (8017950 <getDeviceUptime_hour+0x8>)
 801794a:	7818      	ldrb	r0, [r3, #0]
}
 801794c:	4770      	bx	lr
 801794e:	bf00      	nop
 8017950:	200198d4 	.word	0x200198d4

08017954 <getDeviceUptime_min>:

uint8_t getDeviceUptime_min(void)
{
    return min_cnt;
 8017954:	4b01      	ldr	r3, [pc, #4]	; (801795c <getDeviceUptime_min+0x8>)
 8017956:	7818      	ldrb	r0, [r3, #0]
}
 8017958:	4770      	bx	lr
 801795a:	bf00      	nop
 801795c:	200198d5 	.word	0x200198d5

08017960 <getDeviceUptime_sec>:

uint8_t getDeviceUptime_sec(void)
{
    return sec_cnt;
 8017960:	4b01      	ldr	r3, [pc, #4]	; (8017968 <getDeviceUptime_sec+0x8>)
 8017962:	7818      	ldrb	r0, [r3, #0]
}
 8017964:	4770      	bx	lr
 8017966:	bf00      	nop
 8017968:	200198d8 	.word	0x200198d8

0801796c <HAL_UART_TxCpltCallback>:
        //{
        //    HAL_NVIC_DisableIRQ(DATA1_UART_IRQn); // Disable the UART Transmit interrupt
        //}
    }
#endif
}
 801796c:	4770      	bx	lr
 801796e:	bf00      	nop

08017970 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8017970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //uartRxByte: // 1-byte character variable for UART Interrupt request handler

    uint8_t channel, serial_protocol;

    if(huart->Instance == DATA0_UART) // USART1
 8017972:	6802      	ldr	r2, [r0, #0]
 8017974:	4b25      	ldr	r3, [pc, #148]	; (8017a0c <HAL_UART_RxCpltCallback+0x9c>)
 8017976:	429a      	cmp	r2, r3
 8017978:	d000      	beq.n	801797c <HAL_UART_RxCpltCallback+0xc>
        }

        get_byte_from_uart_it(DATA1_UART_PORTNUM);
    }
#endif
}
 801797a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        channel = get_seg_channel(DATA0_UART_PORTNUM);
 801797c:	2000      	movs	r0, #0
 801797e:	f000 fb0f 	bl	8017fa0 <get_seg_channel>
 8017982:	4605      	mov	r5, r0
        serial_protocol = get_serial_communation_protocol(channel);
 8017984:	f000 fc06 	bl	8018194 <get_serial_communation_protocol>
        if(!(check_modeswitch_trigger(uartRxByte))) // ret: [0] data / [!0] trigger code
 8017988:	4e21      	ldr	r6, [pc, #132]	; (8017a10 <HAL_UART_RxCpltCallback+0xa0>)
        serial_protocol = get_serial_communation_protocol(channel);
 801798a:	4604      	mov	r4, r0
        if(!(check_modeswitch_trigger(uartRxByte))) // ret: [0] data / [!0] trigger code
 801798c:	7830      	ldrb	r0, [r6, #0]
 801798e:	f000 fcd1 	bl	8018334 <check_modeswitch_trigger>
 8017992:	ea40 0304 	orr.w	r3, r0, r4
 8017996:	f013 0fff 	tst.w	r3, #255	; 0xff
 801799a:	d118      	bne.n	80179ce <HAL_UART_RxCpltCallback+0x5e>
{
    int8_t ret = 0;

    if(uartNum == DATA0_UART_PORTNUM)
    {
        ret = IS_BUFFER_FULL(data0_rx);
 801799c:	4c1d      	ldr	r4, [pc, #116]	; (8017a14 <HAL_UART_RxCpltCallback+0xa4>)
 801799e:	4a1e      	ldr	r2, [pc, #120]	; (8017a18 <HAL_UART_RxCpltCallback+0xa8>)
 80179a0:	4f1e      	ldr	r7, [pc, #120]	; (8017a1c <HAL_UART_RxCpltCallback+0xac>)
 80179a2:	8823      	ldrh	r3, [r4, #0]
 80179a4:	8812      	ldrh	r2, [r2, #0]
 80179a6:	8839      	ldrh	r1, [r7, #0]
 80179a8:	b292      	uxth	r2, r2
 80179aa:	fa12 f383 	uxtah	r3, r2, r3
 80179ae:	b289      	uxth	r1, r1
 80179b0:	8822      	ldrh	r2, [r4, #0]
 80179b2:	1a5b      	subs	r3, r3, r1
 80179b4:	3b01      	subs	r3, #1
 80179b6:	b292      	uxth	r2, r2
 80179b8:	fb93 f1f2 	sdiv	r1, r3, r2
 80179bc:	fb02 3311 	mls	r3, r2, r1, r3
                if(is_uart_buffer_full(DATA0_UART_PORTNUM) == FALSE)
 80179c0:	b963      	cbnz	r3, 80179dc <HAL_UART_RxCpltCallback+0x6c>
                    flag_ringbuf_full = ON;
 80179c2:	2201      	movs	r2, #1
 80179c4:	4b16      	ldr	r3, [pc, #88]	; (8017a20 <HAL_UART_RxCpltCallback+0xb0>)
 80179c6:	701a      	strb	r2, [r3, #0]
                init_time_delimiter_timer(channel);
 80179c8:	4628      	mov	r0, r5
 80179ca:	f000 fd59 	bl	8018480 <init_time_delimiter_timer>
}
 80179ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        HAL_UART_Receive_IT(&huart1, &uartRxByte, 1);
 80179d2:	2201      	movs	r2, #1
 80179d4:	490e      	ldr	r1, [pc, #56]	; (8017a10 <HAL_UART_RxCpltCallback+0xa0>)
 80179d6:	4813      	ldr	r0, [pc, #76]	; (8017a24 <HAL_UART_RxCpltCallback+0xb4>)
 80179d8:	f7fb ba5c 	b.w	8012e94 <HAL_UART_Receive_IT>
                    if(check_serial_store_permitted(channel, uartRxByte)) // ret: [0] not permitted / [1] permitted
 80179dc:	4628      	mov	r0, r5
 80179de:	7831      	ldrb	r1, [r6, #0]
 80179e0:	f000 fd1a 	bl	8018418 <check_serial_store_permitted>
 80179e4:	2800      	cmp	r0, #0
 80179e6:	d0ef      	beq.n	80179c8 <HAL_UART_RxCpltCallback+0x58>
        BUFFER_IN(data0_rx) = ch;
 80179e8:	8838      	ldrh	r0, [r7, #0]
        BUFFER_IN_MOVE(data0_rx, 1);
 80179ea:	883b      	ldrh	r3, [r7, #0]
 80179ec:	8821      	ldrh	r1, [r4, #0]
 80179ee:	b29b      	uxth	r3, r3
 80179f0:	b289      	uxth	r1, r1
 80179f2:	3301      	adds	r3, #1
 80179f4:	fbb3 f2f1 	udiv	r2, r3, r1
 80179f8:	fb01 3312 	mls	r3, r1, r2, r3
        BUFFER_IN(data0_rx) = ch;
 80179fc:	7834      	ldrb	r4, [r6, #0]
 80179fe:	490a      	ldr	r1, [pc, #40]	; (8017a28 <HAL_UART_RxCpltCallback+0xb8>)
 8017a00:	b282      	uxth	r2, r0
        BUFFER_IN_MOVE(data0_rx, 1);
 8017a02:	b29b      	uxth	r3, r3
        BUFFER_IN(data0_rx) = ch;
 8017a04:	548c      	strb	r4, [r1, r2]
        BUFFER_IN_MOVE(data0_rx, 1);
 8017a06:	803b      	strh	r3, [r7, #0]
 8017a08:	e7de      	b.n	80179c8 <HAL_UART_RxCpltCallback+0x58>
 8017a0a:	bf00      	nop
 8017a0c:	40013800 	.word	0x40013800
 8017a10:	200198df 	.word	0x200198df
 8017a14:	200181d4 	.word	0x200181d4
 8017a18:	200198da 	.word	0x200198da
 8017a1c:	200198dc 	.word	0x200198dc
 8017a20:	200198de 	.word	0x200198de
 8017a24:	2001bc60 	.word	0x2001bc60
 8017a28:	2001ee58 	.word	0x2001ee58

08017a2c <DATA0_UART_Configuration>:
{
 8017a2c:	b508      	push	{r3, lr}
    get_seg_channel(DATA0_UART_PORTNUM);
 8017a2e:	2000      	movs	r0, #0
 8017a30:	f000 fab6 	bl	8017fa0 <get_seg_channel>
    HAL_NVIC_SetPriority(DATA0_UART_IRQn, 0, 0);
 8017a34:	2200      	movs	r2, #0
 8017a36:	203d      	movs	r0, #61	; 0x3d
 8017a38:	4611      	mov	r1, r2
 8017a3a:	f7f9 f9a3 	bl	8010d84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DATA0_UART_IRQn);
 8017a3e:	203d      	movs	r0, #61	; 0x3d
 8017a40:	f7f9 f9d8 	bl	8010df4 <HAL_NVIC_EnableIRQ>
}
 8017a44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        HAL_UART_Receive_IT(&huart1, &uartRxByte, 1);
 8017a48:	2201      	movs	r2, #1
 8017a4a:	4902      	ldr	r1, [pc, #8]	; (8017a54 <DATA0_UART_Configuration+0x28>)
 8017a4c:	4802      	ldr	r0, [pc, #8]	; (8017a58 <DATA0_UART_Configuration+0x2c>)
 8017a4e:	f7fb ba21 	b.w	8012e94 <HAL_UART_Receive_IT>
 8017a52:	bf00      	nop
 8017a54:	200198df 	.word	0x200198df
 8017a58:	2001bc60 	.word	0x2001bc60

08017a5c <init_serial_settings>:
{
 8017a5c:	b570      	push	{r4, r5, r6, lr}
 8017a5e:	460d      	mov	r5, r1
 8017a60:	4604      	mov	r4, r0
    struct __serial_option *serial_option = (struct __serial_option *)(get_DevConfig_pointer()->serial_option);
 8017a62:	f7fc fae7 	bl	8014034 <get_DevConfig_pointer>
 8017a66:	4606      	mov	r6, r0
    uint8_t channel = get_seg_channel(uartNum);
 8017a68:	4628      	mov	r0, r5
 8017a6a:	f000 fa99 	bl	8017fa0 <get_seg_channel>
 8017a6e:	4605      	mov	r5, r0
    HAL_UART_DeInit(huart);
 8017a70:	4620      	mov	r0, r4
 8017a72:	f7fb f927 	bl	8012cc4 <HAL_UART_DeInit>
    if(serial_option[channel].baud_rate < (sizeof(baud_table) / sizeof(baud_table[0])))
 8017a76:	b22b      	sxth	r3, r5
 8017a78:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    struct __serial_option *serial_option = (struct __serial_option *)(get_DevConfig_pointer()->serial_option);
 8017a7c:	f106 00e8 	add.w	r0, r6, #232	; 0xe8
    if(serial_option[channel].baud_rate < (sizeof(baud_table) / sizeof(baud_table[0])))
 8017a80:	18c2      	adds	r2, r0, r3
 8017a82:	7891      	ldrb	r1, [r2, #2]
 8017a84:	290e      	cmp	r1, #14
        huart->Init.BaudRate = baud_table[serial_option->baud_rate];
 8017a86:	bf98      	it	ls
 8017a88:	f896 50ea 	ldrbls.w	r5, [r6, #234]	; 0xea
 8017a8c:	493d      	ldr	r1, [pc, #244]	; (8017b84 <init_serial_settings+0x128>)
        huart->Init.BaudRate = baud_table[baud_115200]; // Baud rate default: 115200bps
 8017a8e:	bf8c      	ite	hi
 8017a90:	6b09      	ldrhi	r1, [r1, #48]	; 0x30
        huart->Init.BaudRate = baud_table[serial_option->baud_rate];
 8017a92:	f851 1025 	ldrls.w	r1, [r1, r5, lsl #2]
    if(!valid_arg)
 8017a96:	6061      	str	r1, [r4, #4]
    switch(serial_option[channel].data_bits) {
 8017a98:	78d1      	ldrb	r1, [r2, #3]
 8017a9a:	2901      	cmp	r1, #1
 8017a9c:	d827      	bhi.n	8017aee <init_serial_settings+0x92>
            huart->Init.WordLength = UART_WORDLENGTH_8B;
 8017a9e:	2100      	movs	r1, #0
 8017aa0:	60a1      	str	r1, [r4, #8]
    switch(serial_option[channel].stop_bits) {
 8017aa2:	7951      	ldrb	r1, [r2, #5]
 8017aa4:	b119      	cbz	r1, 8017aae <init_serial_settings+0x52>
 8017aa6:	2901      	cmp	r1, #1
 8017aa8:	d159      	bne.n	8017b5e <init_serial_settings+0x102>
            huart->Init.StopBits = UART_STOPBITS_2;
 8017aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8017aae:	60e1      	str	r1, [r4, #12]
    switch(serial_option[channel].parity) {
 8017ab0:	7911      	ldrb	r1, [r2, #4]
 8017ab2:	2901      	cmp	r1, #1
 8017ab4:	d021      	beq.n	8017afa <init_serial_settings+0x9e>
 8017ab6:	2902      	cmp	r1, #2
 8017ab8:	d056      	beq.n	8017b68 <init_serial_settings+0x10c>
 8017aba:	b301      	cbz	r1, 8017afe <init_serial_settings+0xa2>
            huart->Init.Parity = UART_PARITY_NONE;
 8017abc:	2100      	movs	r1, #0
 8017abe:	6121      	str	r1, [r4, #16]
            serial_option[channel].parity = parity_none;
 8017ac0:	7111      	strb	r1, [r2, #4]
    if((serial_option[channel].uart_interface == UART_IF_TTL) || (serial_option[channel].uart_interface == UART_IF_RS232))
 8017ac2:	5cc3      	ldrb	r3, [r0, r3]
 8017ac4:	2b01      	cmp	r3, #1
 8017ac6:	d91e      	bls.n	8017b06 <init_serial_settings+0xaa>
  if (HAL_UART_Init(huart) != HAL_OK)
 8017ac8:	4620      	mov	r0, r4
 8017aca:	f7fb fea9 	bl	8013820 <HAL_UART_Init>
 8017ace:	bb28      	cbnz	r0, 8017b1c <init_serial_settings+0xc0>
  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8017ad0:	2100      	movs	r1, #0
 8017ad2:	4620      	mov	r0, r4
 8017ad4:	f7fc f9a2 	bl	8013e1c <HAL_UARTEx_SetTxFifoThreshold>
 8017ad8:	bb40      	cbnz	r0, 8017b2c <init_serial_settings+0xd0>
  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8017ada:	2100      	movs	r1, #0
 8017adc:	4620      	mov	r0, r4
 8017ade:	f7fc f9db 	bl	8013e98 <HAL_UARTEx_SetRxFifoThreshold>
 8017ae2:	bb58      	cbnz	r0, 8017b3c <init_serial_settings+0xe0>
  if (HAL_UARTEx_DisableFifoMode(huart) != HAL_OK)
 8017ae4:	4620      	mov	r0, r4
 8017ae6:	f7fc f97b 	bl	8013de0 <HAL_UARTEx_DisableFifoMode>
 8017aea:	bb70      	cbnz	r0, 8017b4a <init_serial_settings+0xee>
}
 8017aec:	bd70      	pop	{r4, r5, r6, pc}
    switch(serial_option[channel].data_bits) {
 8017aee:	2902      	cmp	r1, #2
 8017af0:	d13e      	bne.n	8017b70 <init_serial_settings+0x114>
            huart->Init.WordLength = UART_WORDLENGTH_9B; // ## todo
 8017af2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017af6:	60a1      	str	r1, [r4, #8]
            break;
 8017af8:	e7d3      	b.n	8017aa2 <init_serial_settings+0x46>
            huart->Init.Parity = UART_PARITY_ODD;
 8017afa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8017afe:	6121      	str	r1, [r4, #16]
    if((serial_option[channel].uart_interface == UART_IF_TTL) || (serial_option[channel].uart_interface == UART_IF_RS232))
 8017b00:	5cc3      	ldrb	r3, [r0, r3]
 8017b02:	2b01      	cmp	r3, #1
 8017b04:	d8e0      	bhi.n	8017ac8 <init_serial_settings+0x6c>
        switch(serial_option->flow_control) {
 8017b06:	f896 30ee 	ldrb.w	r3, [r6, #238]	; 0xee
 8017b0a:	2b01      	cmp	r3, #1
 8017b0c:	d821      	bhi.n	8017b52 <init_serial_settings+0xf6>
                huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8017b0e:	2300      	movs	r3, #0
  if (HAL_UART_Init(huart) != HAL_OK)
 8017b10:	4620      	mov	r0, r4
                huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8017b12:	61a3      	str	r3, [r4, #24]
  if (HAL_UART_Init(huart) != HAL_OK)
 8017b14:	f7fb fe84 	bl	8013820 <HAL_UART_Init>
 8017b18:	2800      	cmp	r0, #0
 8017b1a:	d0d9      	beq.n	8017ad0 <init_serial_settings+0x74>
    Error_Handler();
 8017b1c:	f7f8 fef4 	bl	8010908 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8017b20:	2100      	movs	r1, #0
 8017b22:	4620      	mov	r0, r4
 8017b24:	f7fc f97a 	bl	8013e1c <HAL_UARTEx_SetTxFifoThreshold>
 8017b28:	2800      	cmp	r0, #0
 8017b2a:	d0d6      	beq.n	8017ada <init_serial_settings+0x7e>
    Error_Handler();
 8017b2c:	f7f8 feec 	bl	8010908 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8017b30:	2100      	movs	r1, #0
 8017b32:	4620      	mov	r0, r4
 8017b34:	f7fc f9b0 	bl	8013e98 <HAL_UARTEx_SetRxFifoThreshold>
 8017b38:	2800      	cmp	r0, #0
 8017b3a:	d0d3      	beq.n	8017ae4 <init_serial_settings+0x88>
    Error_Handler();
 8017b3c:	f7f8 fee4 	bl	8010908 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(huart) != HAL_OK)
 8017b40:	4620      	mov	r0, r4
 8017b42:	f7fc f94d 	bl	8013de0 <HAL_UARTEx_DisableFifoMode>
 8017b46:	2800      	cmp	r0, #0
 8017b48:	d0d0      	beq.n	8017aec <init_serial_settings+0x90>
}
 8017b4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Error_Handler();
 8017b4e:	f7f8 bedb 	b.w	8010908 <Error_Handler>
        switch(serial_option->flow_control) {
 8017b52:	2b02      	cmp	r3, #2
 8017b54:	d111      	bne.n	8017b7a <init_serial_settings+0x11e>
                huart->Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8017b56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8017b5a:	61a3      	str	r3, [r4, #24]
                break;
 8017b5c:	e7b4      	b.n	8017ac8 <init_serial_settings+0x6c>
            huart->Init.StopBits = UART_STOPBITS_1;
 8017b5e:	2100      	movs	r1, #0
 8017b60:	60e1      	str	r1, [r4, #12]
            serial_option->stop_bits = stop_bit1;
 8017b62:	f886 10ed 	strb.w	r1, [r6, #237]	; 0xed
            break;
 8017b66:	e7a3      	b.n	8017ab0 <init_serial_settings+0x54>
            huart->Init.Parity = UART_PARITY_EVEN;
 8017b68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017b6c:	6121      	str	r1, [r4, #16]
            break;
 8017b6e:	e7a8      	b.n	8017ac2 <init_serial_settings+0x66>
            huart->Init.WordLength = UART_WORDLENGTH_8B;
 8017b70:	2500      	movs	r5, #0
            serial_option[channel].data_bits = word_len8;
 8017b72:	2101      	movs	r1, #1
            huart->Init.WordLength = UART_WORDLENGTH_8B;
 8017b74:	60a5      	str	r5, [r4, #8]
            serial_option[channel].data_bits = word_len8;
 8017b76:	70d1      	strb	r1, [r2, #3]
            break;
 8017b78:	e793      	b.n	8017aa2 <init_serial_settings+0x46>
                huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8017b7a:	2300      	movs	r3, #0
 8017b7c:	61a3      	str	r3, [r4, #24]
                serial_option[channel].flow_control = flow_none;
 8017b7e:	7193      	strb	r3, [r2, #6]
                break;
 8017b80:	e7a2      	b.n	8017ac8 <init_serial_settings+0x6c>
 8017b82:	bf00      	nop
 8017b84:	20018198 	.word	0x20018198

08017b88 <check_uart_flow_control>:
{
 8017b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b8a:	460c      	mov	r4, r1
 8017b8c:	b083      	sub	sp, #12
 8017b8e:	4606      	mov	r6, r0
    uint8_t channel = get_seg_channel(uartNum);
 8017b90:	f000 fa06 	bl	8017fa0 <get_seg_channel>
    if(flow_ctrl == flow_xon_xoff)
 8017b94:	2c01      	cmp	r4, #1
 8017b96:	d001      	beq.n	8017b9c <check_uart_flow_control+0x14>
}
 8017b98:	b003      	add	sp, #12
 8017b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((xonoff_status[channel] == UART_XON) && (get_uart_buffer_usedsize(uartNum) > UART_OFF_THRESHOLD)) // Send the transmit stop command to peer - go XOFF
 8017b9c:	4c45      	ldr	r4, [pc, #276]	; (8017cb4 <check_uart_flow_control+0x12c>)
 8017b9e:	4605      	mov	r5, r0
 8017ba0:	5c23      	ldrb	r3, [r4, r0]
 8017ba2:	2b11      	cmp	r3, #17
 8017ba4:	d032      	beq.n	8017c0c <check_uart_flow_control+0x84>
        else if((xonoff_status[channel] == UART_XOFF) && (get_uart_buffer_usedsize(uartNum) < UART_ON_THRESHOLD)) // Send the transmit start command to peer. -go XON
 8017ba6:	2b13      	cmp	r3, #19
 8017ba8:	d1f6      	bne.n	8017b98 <check_uart_flow_control+0x10>
    if(uartNum == DATA0_UART_PORTNUM)
 8017baa:	2e00      	cmp	r6, #0
 8017bac:	d163      	bne.n	8017c76 <check_uart_flow_control+0xee>
        len = BUFFER_USED_SIZE(data0_rx);
 8017bae:	4942      	ldr	r1, [pc, #264]	; (8017cb8 <check_uart_flow_control+0x130>)
 8017bb0:	4842      	ldr	r0, [pc, #264]	; (8017cbc <check_uart_flow_control+0x134>)
 8017bb2:	4a43      	ldr	r2, [pc, #268]	; (8017cc0 <check_uart_flow_control+0x138>)
 8017bb4:	880b      	ldrh	r3, [r1, #0]
 8017bb6:	8800      	ldrh	r0, [r0, #0]
 8017bb8:	8812      	ldrh	r2, [r2, #0]
 8017bba:	b280      	uxth	r0, r0
 8017bbc:	8809      	ldrh	r1, [r1, #0]
 8017bbe:	b292      	uxth	r2, r2
 8017bc0:	fa10 f383 	uxtah	r3, r0, r3
 8017bc4:	1a9b      	subs	r3, r3, r2
 8017bc6:	b289      	uxth	r1, r1
 8017bc8:	fb93 f2f1 	sdiv	r2, r3, r1
 8017bcc:	fb01 3312 	mls	r3, r1, r2, r3
        else if((xonoff_status[channel] == UART_XOFF) && (get_uart_buffer_usedsize(uartNum) < UART_ON_THRESHOLD)) // Send the transmit start command to peer. -go XON
 8017bd0:	b29b      	uxth	r3, r3
 8017bd2:	f5b3 7fcc 	cmp.w	r3, #408	; 0x198
 8017bd6:	d8df      	bhi.n	8017b98 <check_uart_flow_control+0x10>
    struct __serial_option *serial_option = (struct __serial_option *)&(get_DevConfig_pointer()->serial_option);
 8017bd8:	f7fc fa2c 	bl	8014034 <get_DevConfig_pointer>
 8017bdc:	4603      	mov	r3, r0
    uint8_t channel = get_seg_channel(uartNum);
 8017bde:	4630      	mov	r0, r6
    struct __serial_option *serial_option = (struct __serial_option *)&(get_DevConfig_pointer()->serial_option);
 8017be0:	461e      	mov	r6, r3
    uint8_t channel = get_seg_channel(uartNum);
 8017be2:	f000 f9dd 	bl	8017fa0 <get_seg_channel>
    if(serial_option[channel].data_bits == word_len8)
 8017be6:	b203      	sxth	r3, r0
 8017be8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8017bec:	4433      	add	r3, r6
    else if (serial_option[channel].data_bits == word_len7)
 8017bee:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8017bf2:	2b01      	cmp	r3, #1
 8017bf4:	d802      	bhi.n	8017bfc <check_uart_flow_control+0x74>
        c[0] = ch & 0x00FF;
 8017bf6:	2311      	movs	r3, #17
 8017bf8:	f88d 3004 	strb.w	r3, [sp, #4]
        HAL_UART_Transmit(&huart1, &c[0], 1, 1000);
 8017bfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017c00:	2201      	movs	r2, #1
 8017c02:	a901      	add	r1, sp, #4
 8017c04:	482f      	ldr	r0, [pc, #188]	; (8017cc4 <check_uart_flow_control+0x13c>)
 8017c06:	f7fc f83f 	bl	8013c88 <HAL_UART_Transmit>
 8017c0a:	e04b      	b.n	8017ca4 <check_uart_flow_control+0x11c>
    if(uartNum == DATA0_UART_PORTNUM)
 8017c0c:	2e00      	cmp	r6, #0
 8017c0e:	d1c3      	bne.n	8017b98 <check_uart_flow_control+0x10>
        len = BUFFER_USED_SIZE(data0_rx);
 8017c10:	4929      	ldr	r1, [pc, #164]	; (8017cb8 <check_uart_flow_control+0x130>)
 8017c12:	482a      	ldr	r0, [pc, #168]	; (8017cbc <check_uart_flow_control+0x134>)
 8017c14:	4a2a      	ldr	r2, [pc, #168]	; (8017cc0 <check_uart_flow_control+0x138>)
 8017c16:	880b      	ldrh	r3, [r1, #0]
 8017c18:	8800      	ldrh	r0, [r0, #0]
 8017c1a:	8812      	ldrh	r2, [r2, #0]
 8017c1c:	b280      	uxth	r0, r0
 8017c1e:	8809      	ldrh	r1, [r1, #0]
 8017c20:	fa10 f383 	uxtah	r3, r0, r3
 8017c24:	b292      	uxth	r2, r2
 8017c26:	1a9b      	subs	r3, r3, r2
 8017c28:	b289      	uxth	r1, r1
 8017c2a:	fb93 f2f1 	sdiv	r2, r3, r1
        if((xonoff_status[channel] == UART_XON) && (get_uart_buffer_usedsize(uartNum) > UART_OFF_THRESHOLD)) // Send the transmit stop command to peer - go XOFF
 8017c2e:	f640 6067 	movw	r0, #3687	; 0xe67
        len = BUFFER_USED_SIZE(data0_rx);
 8017c32:	fb01 3312 	mls	r3, r1, r2, r3
        if((xonoff_status[channel] == UART_XON) && (get_uart_buffer_usedsize(uartNum) > UART_OFF_THRESHOLD)) // Send the transmit stop command to peer - go XOFF
 8017c36:	b29b      	uxth	r3, r3
 8017c38:	4283      	cmp	r3, r0
 8017c3a:	d9ad      	bls.n	8017b98 <check_uart_flow_control+0x10>
    struct __serial_option *serial_option = (struct __serial_option *)&(get_DevConfig_pointer()->serial_option);
 8017c3c:	f7fc f9fa 	bl	8014034 <get_DevConfig_pointer>
 8017c40:	4603      	mov	r3, r0
    uint8_t channel = get_seg_channel(uartNum);
 8017c42:	4630      	mov	r0, r6
    struct __serial_option *serial_option = (struct __serial_option *)&(get_DevConfig_pointer()->serial_option);
 8017c44:	461e      	mov	r6, r3
    uint8_t channel = get_seg_channel(uartNum);
 8017c46:	f000 f9ab 	bl	8017fa0 <get_seg_channel>
    if(serial_option[channel].data_bits == word_len8)
 8017c4a:	b203      	sxth	r3, r0
 8017c4c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8017c50:	4433      	add	r3, r6
    else if (serial_option[channel].data_bits == word_len7)
 8017c52:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
        HAL_UART_Transmit(&huart1, &c[0], 1, 1000);
 8017c56:	2201      	movs	r2, #1
    else if (serial_option[channel].data_bits == word_len7)
 8017c58:	2b01      	cmp	r3, #1
        c[0] = ch & 0x00FF;
 8017c5a:	bf98      	it	ls
 8017c5c:	2313      	movls	r3, #19
        HAL_UART_Transmit(&huart1, &c[0], 1, 1000);
 8017c5e:	4819      	ldr	r0, [pc, #100]	; (8017cc4 <check_uart_flow_control+0x13c>)
        c[0] = ch & 0x00FF;
 8017c60:	bf98      	it	ls
 8017c62:	f88d 3004 	strbls.w	r3, [sp, #4]
        HAL_UART_Transmit(&huart1, &c[0], 1, 1000);
 8017c66:	a901      	add	r1, sp, #4
 8017c68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017c6c:	f7fc f80c 	bl	8013c88 <HAL_UART_Transmit>
            xonoff_status[channel] = UART_XOFF;
 8017c70:	2313      	movs	r3, #19
 8017c72:	5563      	strb	r3, [r4, r5]
 8017c74:	e790      	b.n	8017b98 <check_uart_flow_control+0x10>
    struct __serial_option *serial_option = (struct __serial_option *)&(get_DevConfig_pointer()->serial_option);
 8017c76:	f7fc f9dd 	bl	8014034 <get_DevConfig_pointer>
 8017c7a:	4607      	mov	r7, r0
    uint8_t channel = get_seg_channel(uartNum);
 8017c7c:	4630      	mov	r0, r6
 8017c7e:	f000 f98f 	bl	8017fa0 <get_seg_channel>
    if(serial_option[channel].data_bits == word_len8)
 8017c82:	b203      	sxth	r3, r0
 8017c84:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8017c88:	443b      	add	r3, r7
    else if (serial_option[channel].data_bits == word_len7)
 8017c8a:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8017c8e:	2b01      	cmp	r3, #1
 8017c90:	d90b      	bls.n	8017caa <check_uart_flow_control+0x122>
    else if(uartNum == DATA1_UART_PORTNUM)
 8017c92:	2e01      	cmp	r6, #1
 8017c94:	d106      	bne.n	8017ca4 <check_uart_flow_control+0x11c>
        HAL_UART_Transmit(&huart6, &c[0], 1, 1000);
 8017c96:	4632      	mov	r2, r6
 8017c98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017c9c:	480a      	ldr	r0, [pc, #40]	; (8017cc8 <check_uart_flow_control+0x140>)
 8017c9e:	a901      	add	r1, sp, #4
 8017ca0:	f7fb fff2 	bl	8013c88 <HAL_UART_Transmit>
            xonoff_status[channel] = UART_XON;
 8017ca4:	2311      	movs	r3, #17
 8017ca6:	5563      	strb	r3, [r4, r5]
}
 8017ca8:	e776      	b.n	8017b98 <check_uart_flow_control+0x10>
        c[0] = ch & 0x00FF;
 8017caa:	2311      	movs	r3, #17
 8017cac:	f88d 3004 	strb.w	r3, [sp, #4]
    if(uartNum == DATA0_UART_PORTNUM)
 8017cb0:	e7ef      	b.n	8017c92 <check_uart_flow_control+0x10a>
 8017cb2:	bf00      	nop
 8017cb4:	2001820c 	.word	0x2001820c
 8017cb8:	200181d4 	.word	0x200181d4
 8017cbc:	200198dc 	.word	0x200198dc
 8017cc0:	200198da 	.word	0x200198da
 8017cc4:	2001bc60 	.word	0x2001bc60
 8017cc8:	2001edc8 	.word	0x2001edc8

08017ccc <uart_putc>:
{
 8017ccc:	b570      	push	{r4, r5, r6, lr}
 8017cce:	b082      	sub	sp, #8
 8017cd0:	4604      	mov	r4, r0
 8017cd2:	460e      	mov	r6, r1
    struct __serial_option *serial_option = (struct __serial_option *)&(get_DevConfig_pointer()->serial_option);
 8017cd4:	f7fc f9ae 	bl	8014034 <get_DevConfig_pointer>
 8017cd8:	4605      	mov	r5, r0
    uint8_t channel = get_seg_channel(uartNum);
 8017cda:	4620      	mov	r0, r4
 8017cdc:	f000 f960 	bl	8017fa0 <get_seg_channel>
    if(serial_option[channel].data_bits == word_len8)
 8017ce0:	b203      	sxth	r3, r0
 8017ce2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8017ce6:	442b      	add	r3, r5
 8017ce8:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8017cec:	2b01      	cmp	r3, #1
 8017cee:	d00f      	beq.n	8017d10 <uart_putc+0x44>
    else if (serial_option[channel].data_bits == word_len7)
 8017cf0:	b163      	cbz	r3, 8017d0c <uart_putc+0x40>
    if(uartNum == DATA0_UART_PORTNUM)
 8017cf2:	b18c      	cbz	r4, 8017d18 <uart_putc+0x4c>
    else if(uartNum == DATA1_UART_PORTNUM)
 8017cf4:	2c01      	cmp	r4, #1
 8017cf6:	d119      	bne.n	8017d2c <uart_putc+0x60>
        HAL_UART_Transmit(&huart6, &c[0], 1, 1000);
 8017cf8:	4622      	mov	r2, r4
 8017cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017cfe:	480d      	ldr	r0, [pc, #52]	; (8017d34 <uart_putc+0x68>)
 8017d00:	a901      	add	r1, sp, #4
 8017d02:	f7fb ffc1 	bl	8013c88 <HAL_UART_Transmit>
    return RET_OK;
 8017d06:	2000      	movs	r0, #0
}
 8017d08:	b002      	add	sp, #8
 8017d0a:	bd70      	pop	{r4, r5, r6, pc}
        c[0] = ch & 0x007F; // word_len7
 8017d0c:	f006 067f 	and.w	r6, r6, #127	; 0x7f
 8017d10:	f88d 6004 	strb.w	r6, [sp, #4]
    if(uartNum == DATA0_UART_PORTNUM)
 8017d14:	2c00      	cmp	r4, #0
 8017d16:	d1ed      	bne.n	8017cf4 <uart_putc+0x28>
        HAL_UART_Transmit(&huart1, &c[0], 1, 1000);
 8017d18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017d1c:	2201      	movs	r2, #1
 8017d1e:	a901      	add	r1, sp, #4
 8017d20:	4805      	ldr	r0, [pc, #20]	; (8017d38 <uart_putc+0x6c>)
 8017d22:	f7fb ffb1 	bl	8013c88 <HAL_UART_Transmit>
    return RET_OK;
 8017d26:	4620      	mov	r0, r4
}
 8017d28:	b002      	add	sp, #8
 8017d2a:	bd70      	pop	{r4, r5, r6, pc}
        return RET_NOK;
 8017d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8017d30:	e7ea      	b.n	8017d08 <uart_putc+0x3c>
 8017d32:	bf00      	nop
 8017d34:	2001edc8 	.word	0x2001edc8
 8017d38:	2001bc60 	.word	0x2001bc60

08017d3c <uart_puts>:
{
 8017d3c:	b510      	push	{r4, lr}
 8017d3e:	4614      	mov	r4, r2
    if(uartNum == DATA0_UART_PORTNUM)
 8017d40:	b140      	cbz	r0, 8017d54 <uart_puts+0x18>
    else if(uartNum == DATA1_UART_PORTNUM)
 8017d42:	2801      	cmp	r0, #1
 8017d44:	d10d      	bne.n	8017d62 <uart_puts+0x26>
        HAL_UART_Transmit(&huart6, (uint8_t *)buf, bytes, 1000);
 8017d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017d4a:	4807      	ldr	r0, [pc, #28]	; (8017d68 <uart_puts+0x2c>)
 8017d4c:	f7fb ff9c 	bl	8013c88 <HAL_UART_Transmit>
    return bytes;
 8017d50:	4620      	mov	r0, r4
}
 8017d52:	bd10      	pop	{r4, pc}
        HAL_UART_Transmit(&huart1, (uint8_t *)buf, bytes, 1000);
 8017d54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017d58:	4804      	ldr	r0, [pc, #16]	; (8017d6c <uart_puts+0x30>)
 8017d5a:	f7fb ff95 	bl	8013c88 <HAL_UART_Transmit>
    return bytes;
 8017d5e:	4620      	mov	r0, r4
 8017d60:	e7f7      	b.n	8017d52 <uart_puts+0x16>
        return RET_NOK;
 8017d62:	f04f 30ff 	mov.w	r0, #4294967295
}
 8017d66:	bd10      	pop	{r4, pc}
 8017d68:	2001edc8 	.word	0x2001edc8
 8017d6c:	2001bc60 	.word	0x2001bc60

08017d70 <uart_getc>:
    if(uartNum == DATA0_UART_PORTNUM)
 8017d70:	b9d8      	cbnz	r0, 8017daa <uart_getc+0x3a>
{
 8017d72:	b410      	push	{r4}
 8017d74:	490e      	ldr	r1, [pc, #56]	; (8017db0 <uart_getc+0x40>)
 8017d76:	480f      	ldr	r0, [pc, #60]	; (8017db4 <uart_getc+0x44>)
        while(IS_BUFFER_EMPTY(data0_rx));
 8017d78:	880a      	ldrh	r2, [r1, #0]
 8017d7a:	8803      	ldrh	r3, [r0, #0]
 8017d7c:	b292      	uxth	r2, r2
 8017d7e:	b29b      	uxth	r3, r3
 8017d80:	429a      	cmp	r2, r3
 8017d82:	d0f9      	beq.n	8017d78 <uart_getc+0x8>
        BUFFER_OUT_MOVE(data0_rx, 1);
 8017d84:	4a0c      	ldr	r2, [pc, #48]	; (8017db8 <uart_getc+0x48>)
        ch = (int32_t)BUFFER_OUT(data0_rx);
 8017d86:	880c      	ldrh	r4, [r1, #0]
        BUFFER_OUT_MOVE(data0_rx, 1);
 8017d88:	880b      	ldrh	r3, [r1, #0]
 8017d8a:	8810      	ldrh	r0, [r2, #0]
 8017d8c:	b29b      	uxth	r3, r3
 8017d8e:	b280      	uxth	r0, r0
 8017d90:	3301      	adds	r3, #1
 8017d92:	fbb3 f2f0 	udiv	r2, r3, r0
 8017d96:	fb00 3312 	mls	r3, r0, r2, r3
        ch = (int32_t)BUFFER_OUT(data0_rx);
 8017d9a:	4808      	ldr	r0, [pc, #32]	; (8017dbc <uart_getc+0x4c>)
 8017d9c:	b2a2      	uxth	r2, r4
        BUFFER_OUT_MOVE(data0_rx, 1);
 8017d9e:	b29b      	uxth	r3, r3
        ch = (int32_t)BUFFER_OUT(data0_rx);
 8017da0:	5c80      	ldrb	r0, [r0, r2]
}
 8017da2:	f85d 4b04 	ldr.w	r4, [sp], #4
        BUFFER_OUT_MOVE(data0_rx, 1);
 8017da6:	800b      	strh	r3, [r1, #0]
}
 8017da8:	4770      	bx	lr
        return RET_NOK;
 8017daa:	f04f 30ff 	mov.w	r0, #4294967295
}
 8017dae:	4770      	bx	lr
 8017db0:	200198da 	.word	0x200198da
 8017db4:	200198dc 	.word	0x200198dc
 8017db8:	200181d4 	.word	0x200181d4
 8017dbc:	2001ee58 	.word	0x2001ee58

08017dc0 <uart_rx_flush>:
    if(uartNum == DATA0_UART_PORTNUM)
 8017dc0:	b918      	cbnz	r0, 8017dca <uart_rx_flush+0xa>
        BUFFER_CLEAR(data0_rx);
 8017dc2:	4a02      	ldr	r2, [pc, #8]	; (8017dcc <uart_rx_flush+0xc>)
 8017dc4:	4b02      	ldr	r3, [pc, #8]	; (8017dd0 <uart_rx_flush+0x10>)
 8017dc6:	8010      	strh	r0, [r2, #0]
 8017dc8:	8018      	strh	r0, [r3, #0]
}
 8017dca:	4770      	bx	lr
 8017dcc:	200198dc 	.word	0x200198dc
 8017dd0:	200198da 	.word	0x200198da

08017dd4 <put_byte_to_uart_buffer>:
    if(uartNum == DATA0_UART_PORTNUM)
 8017dd4:	b998      	cbnz	r0, 8017dfe <put_byte_to_uart_buffer+0x2a>
{
 8017dd6:	b430      	push	{r4, r5}
        BUFFER_IN(data0_rx) = ch;
 8017dd8:	4d09      	ldr	r5, [pc, #36]	; (8017e00 <put_byte_to_uart_buffer+0x2c>)
        BUFFER_IN_MOVE(data0_rx, 1);
 8017dda:	4a0a      	ldr	r2, [pc, #40]	; (8017e04 <put_byte_to_uart_buffer+0x30>)
        BUFFER_IN(data0_rx) = ch;
 8017ddc:	882c      	ldrh	r4, [r5, #0]
        BUFFER_IN_MOVE(data0_rx, 1);
 8017dde:	882b      	ldrh	r3, [r5, #0]
 8017de0:	8810      	ldrh	r0, [r2, #0]
 8017de2:	b29b      	uxth	r3, r3
 8017de4:	b280      	uxth	r0, r0
 8017de6:	3301      	adds	r3, #1
 8017de8:	fbb3 f2f0 	udiv	r2, r3, r0
 8017dec:	fb00 3312 	mls	r3, r0, r2, r3
        BUFFER_IN(data0_rx) = ch;
 8017df0:	4805      	ldr	r0, [pc, #20]	; (8017e08 <put_byte_to_uart_buffer+0x34>)
 8017df2:	b2a2      	uxth	r2, r4
        BUFFER_IN_MOVE(data0_rx, 1);
 8017df4:	b29b      	uxth	r3, r3
        BUFFER_IN(data0_rx) = ch;
 8017df6:	5481      	strb	r1, [r0, r2]
        BUFFER_IN_MOVE(data0_rx, 1);
 8017df8:	802b      	strh	r3, [r5, #0]
}
 8017dfa:	bc30      	pop	{r4, r5}
 8017dfc:	4770      	bx	lr
 8017dfe:	4770      	bx	lr
 8017e00:	200198dc 	.word	0x200198dc
 8017e04:	200181d4 	.word	0x200181d4
 8017e08:	2001ee58 	.word	0x2001ee58

08017e0c <get_uart_buffer_usedsize>:
    if(uartNum == DATA0_UART_PORTNUM)
 8017e0c:	b990      	cbnz	r0, 8017e34 <get_uart_buffer_usedsize+0x28>
        len = BUFFER_USED_SIZE(data0_rx);
 8017e0e:	4a0a      	ldr	r2, [pc, #40]	; (8017e38 <get_uart_buffer_usedsize+0x2c>)
 8017e10:	480a      	ldr	r0, [pc, #40]	; (8017e3c <get_uart_buffer_usedsize+0x30>)
 8017e12:	490b      	ldr	r1, [pc, #44]	; (8017e40 <get_uart_buffer_usedsize+0x34>)
 8017e14:	8813      	ldrh	r3, [r2, #0]
 8017e16:	8800      	ldrh	r0, [r0, #0]
 8017e18:	8809      	ldrh	r1, [r1, #0]
 8017e1a:	b280      	uxth	r0, r0
 8017e1c:	8812      	ldrh	r2, [r2, #0]
 8017e1e:	fa10 f083 	uxtah	r0, r0, r3
 8017e22:	b28b      	uxth	r3, r1
 8017e24:	1ac3      	subs	r3, r0, r3
 8017e26:	b292      	uxth	r2, r2
 8017e28:	fb93 f0f2 	sdiv	r0, r3, r2
 8017e2c:	fb02 3010 	mls	r0, r2, r0, r3
 8017e30:	b280      	uxth	r0, r0
    return len;
 8017e32:	4770      	bx	lr
    uint16_t len = 0;
 8017e34:	2000      	movs	r0, #0
}
 8017e36:	4770      	bx	lr
 8017e38:	200181d4 	.word	0x200181d4
 8017e3c:	200198dc 	.word	0x200198dc
 8017e40:	200198da 	.word	0x200198da

08017e44 <WIZ_SECURE_printf>:

#endif

#if USE_SECURE_PRINTF
void WIZ_SECURE_printf(const char *format, ...)
{
 8017e44:	b40f      	push	{r0, r1, r2, r3}
	char va_buf[2048] = {0, };
 8017e46:	2100      	movs	r1, #0
{
 8017e48:	b530      	push	{r4, r5, lr}
 8017e4a:	f6ad 0d0c 	subw	sp, sp, #2060	; 0x80c
 8017e4e:	f60d 0418 	addw	r4, sp, #2072	; 0x818
 8017e52:	f854 5b04 	ldr.w	r5, [r4], #4
	char va_buf[2048] = {0, };
 8017e56:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8017e5a:	a803      	add	r0, sp, #12
 8017e5c:	9102      	str	r1, [sp, #8]
 8017e5e:	f018 f802 	bl	802fe66 <memset>
	va_list ap;
	va_start(ap, format);
	//vprintf(format, ap);
	//printf(format, ##__VA_ARGS__);

	vsprintf(va_buf, format, ap);
 8017e62:	4629      	mov	r1, r5
 8017e64:	4622      	mov	r2, r4
 8017e66:	a802      	add	r0, sp, #8
	va_start(ap, format);
 8017e68:	9401      	str	r4, [sp, #4]
	vsprintf(va_buf, format, ap);
 8017e6a:	f018 fb75 	bl	8030558 <vsiprintf>
	SECURE_printf(va_buf);
 8017e6e:	a802      	add	r0, sp, #8
 8017e70:	f019 fc32 	bl	80316d8 <__SECURE_printf_veneer>
	va_end(ap);
}
 8017e74:	f60d 0d0c 	addw	sp, sp, #2060	; 0x80c
 8017e78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017e7c:	b004      	add	sp, #16
 8017e7e:	4770      	bx	lr

08017e80 <wizchip_spi_write>:
{
    HAL_GPIO_WritePin(WIZCHIP_CS_PORT, WIZCHIP_CS_PIN, GPIO_PIN_SET);
}

static void  wizchip_spi_write(uint8_t wb)
{
 8017e80:	b510      	push	{r4, lr}
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8017e82:	4c0a      	ldr	r4, [pc, #40]	; (8017eac <wizchip_spi_write+0x2c>)
{
 8017e84:	b084      	sub	sp, #16
 8017e86:	f88d 000e 	strb.w	r0, [sp, #14]
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8017e8a:	4620      	mov	r0, r4
 8017e8c:	f7fa fca0 	bl	80127d0 <HAL_SPI_GetState>
 8017e90:	2801      	cmp	r0, #1
 8017e92:	4603      	mov	r3, r0
 8017e94:	d1f9      	bne.n	8017e8a <wizchip_spi_write+0xa>
    HAL_SPI_TransmitReceive(&hspi1, &byte, &rtnByte, 1, 10);
 8017e96:	220a      	movs	r2, #10
 8017e98:	f10d 010e 	add.w	r1, sp, #14
 8017e9c:	9200      	str	r2, [sp, #0]
 8017e9e:	4803      	ldr	r0, [pc, #12]	; (8017eac <wizchip_spi_write+0x2c>)
 8017ea0:	f10d 020f 	add.w	r2, sp, #15
 8017ea4:	f7fa fb08 	bl	80124b8 <HAL_SPI_TransmitReceive>
    wizchip_spi_rw(wb);
}
 8017ea8:	b004      	add	sp, #16
 8017eaa:	bd10      	pop	{r4, pc}
 8017eac:	2001bd04 	.word	0x2001bd04

08017eb0 <wizchip_spi_select>:
    HAL_GPIO_WritePin(WIZCHIP_CS_PORT, WIZCHIP_CS_PIN, GPIO_PIN_RESET);
 8017eb0:	2200      	movs	r2, #0
 8017eb2:	2110      	movs	r1, #16
 8017eb4:	4801      	ldr	r0, [pc, #4]	; (8017ebc <wizchip_spi_select+0xc>)
 8017eb6:	f7f9 bb55 	b.w	8011564 <HAL_GPIO_WritePin>
 8017eba:	bf00      	nop
 8017ebc:	42020000 	.word	0x42020000

08017ec0 <wizchip_spi_deselect>:
    HAL_GPIO_WritePin(WIZCHIP_CS_PORT, WIZCHIP_CS_PIN, GPIO_PIN_SET);
 8017ec0:	2201      	movs	r2, #1
 8017ec2:	2110      	movs	r1, #16
 8017ec4:	4801      	ldr	r0, [pc, #4]	; (8017ecc <wizchip_spi_deselect+0xc>)
 8017ec6:	f7f9 bb4d 	b.w	8011564 <HAL_GPIO_WritePin>
 8017eca:	bf00      	nop
 8017ecc:	42020000 	.word	0x42020000

08017ed0 <wizchip_spi_read>:

static uint8_t wizchip_spi_read(void)
{
    return wizchip_spi_rw(0xFF);
 8017ed0:	23ff      	movs	r3, #255	; 0xff
{
 8017ed2:	b510      	push	{r4, lr}
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8017ed4:	4c0b      	ldr	r4, [pc, #44]	; (8017f04 <wizchip_spi_read+0x34>)
{
 8017ed6:	b084      	sub	sp, #16
 8017ed8:	f88d 300e 	strb.w	r3, [sp, #14]
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8017edc:	4620      	mov	r0, r4
 8017ede:	f7fa fc77 	bl	80127d0 <HAL_SPI_GetState>
 8017ee2:	2801      	cmp	r0, #1
 8017ee4:	4603      	mov	r3, r0
 8017ee6:	d1f9      	bne.n	8017edc <wizchip_spi_read+0xc>
    HAL_SPI_TransmitReceive(&hspi1, &byte, &rtnByte, 1, 10);
 8017ee8:	220a      	movs	r2, #10
 8017eea:	f10d 010e 	add.w	r1, sp, #14
 8017eee:	9200      	str	r2, [sp, #0]
 8017ef0:	4804      	ldr	r0, [pc, #16]	; (8017f04 <wizchip_spi_read+0x34>)
 8017ef2:	f10d 020f 	add.w	r2, sp, #15
 8017ef6:	f7fa fadf 	bl	80124b8 <HAL_SPI_TransmitReceive>
}
 8017efa:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8017efe:	b004      	add	sp, #16
 8017f00:	bd10      	pop	{r4, pc}
 8017f02:	bf00      	nop
 8017f04:	2001bd04 	.word	0x2001bd04

08017f08 <WIZnet_Chip_Init>:
{
 8017f08:	b510      	push	{r4, lr}
 8017f0a:	b082      	sub	sp, #8
    uint8_t W5100S_SocketBuf[2][4] = {{2,2,2,2},{2,2,2,2}}; // WIZCHIP socket buffers size
 8017f0c:	466c      	mov	r4, sp
 8017f0e:	4b19      	ldr	r3, [pc, #100]	; (8017f74 <WIZnet_Chip_Init+0x6c>)
 8017f10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017f14:	e884 0003 	stmia.w	r4, {r0, r1}
    printf(" W5100S SPI Init\r\n");
 8017f18:	4817      	ldr	r0, [pc, #92]	; (8017f78 <WIZnet_Chip_Init+0x70>)
 8017f1a:	f018 f8eb 	bl	80300f4 <puts>
    HAL_GPIO_WritePin(WIZCHIP_CS_PORT, WIZCHIP_CS_PIN, GPIO_PIN_SET);
 8017f1e:	2201      	movs	r2, #1
 8017f20:	2110      	movs	r1, #16
 8017f22:	4816      	ldr	r0, [pc, #88]	; (8017f7c <WIZnet_Chip_Init+0x74>)
 8017f24:	f7f9 fb1e 	bl	8011564 <HAL_GPIO_WritePin>
    reg_wizchip_cs_cbfunc(wizchip_spi_select, wizchip_spi_deselect);
 8017f28:	4915      	ldr	r1, [pc, #84]	; (8017f80 <WIZnet_Chip_Init+0x78>)
 8017f2a:	4816      	ldr	r0, [pc, #88]	; (8017f84 <WIZnet_Chip_Init+0x7c>)
 8017f2c:	f004 f826 	bl	801bf7c <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(wizchip_spi_read, wizchip_spi_write);
 8017f30:	4915      	ldr	r1, [pc, #84]	; (8017f88 <WIZnet_Chip_Init+0x80>)
 8017f32:	4816      	ldr	r0, [pc, #88]	; (8017f8c <WIZnet_Chip_Init+0x84>)
 8017f34:	f004 f834 	bl	801bfa0 <reg_wizchip_spi_cbfunc>
    HAL_GPIO_WritePin(WIZCHIP_RSTn_PORT, WIZCHIP_RSTn_PIN, GPIO_PIN_RESET);
 8017f38:	2200      	movs	r2, #0
 8017f3a:	2102      	movs	r1, #2
 8017f3c:	4814      	ldr	r0, [pc, #80]	; (8017f90 <WIZnet_Chip_Init+0x88>)
 8017f3e:	f7f9 fb11 	bl	8011564 <HAL_GPIO_WritePin>
    delay_ms(20);
 8017f42:	2014      	movs	r0, #20
 8017f44:	f7ff fcea 	bl	801791c <delay_ms>
    HAL_GPIO_WritePin(WIZCHIP_RSTn_PORT, WIZCHIP_RSTn_PIN, GPIO_PIN_SET);
 8017f48:	2201      	movs	r2, #1
 8017f4a:	2102      	movs	r1, #2
 8017f4c:	4810      	ldr	r0, [pc, #64]	; (8017f90 <WIZnet_Chip_Init+0x88>)
 8017f4e:	f7f9 fb09 	bl	8011564 <HAL_GPIO_WritePin>
    delay_ms(150);
 8017f52:	2096      	movs	r0, #150	; 0x96
 8017f54:	f7ff fce2 	bl	801791c <delay_ms>
    if(ctlwizchip(CW_INIT_WIZCHIP,(void*)W5100S_SocketBuf) == -1)
 8017f58:	4621      	mov	r1, r4
 8017f5a:	2001      	movs	r0, #1
 8017f5c:	f004 f8f0 	bl	801c140 <ctlwizchip>
 8017f60:	3001      	adds	r0, #1
        PRT_INFO(" W5100S Initialize failed\r\n");
 8017f62:	490c      	ldr	r1, [pc, #48]	; (8017f94 <WIZnet_Chip_Init+0x8c>)
 8017f64:	bf0c      	ite	eq
 8017f66:	480c      	ldreq	r0, [pc, #48]	; (8017f98 <WIZnet_Chip_Init+0x90>)
        PRT_INFO(" W5100S Initialized\r\n");
 8017f68:	480c      	ldrne	r0, [pc, #48]	; (8017f9c <WIZnet_Chip_Init+0x94>)
 8017f6a:	f7ff ff6b 	bl	8017e44 <WIZ_SECURE_printf>
}
 8017f6e:	b002      	add	sp, #8
 8017f70:	bd10      	pop	{r4, pc}
 8017f72:	bf00      	nop
 8017f74:	0803170c 	.word	0x0803170c
 8017f78:	0803318c 	.word	0x0803318c
 8017f7c:	42020000 	.word	0x42020000
 8017f80:	08017ec1 	.word	0x08017ec1
 8017f84:	08017eb1 	.word	0x08017eb1
 8017f88:	08017e81 	.word	0x08017e81
 8017f8c:	08017ed1 	.word	0x08017ed1
 8017f90:	42020400 	.word	0x42020400
 8017f94:	080331ec 	.word	0x080331ec
 8017f98:	080331a0 	.word	0x080331a0
 8017f9c:	080331c8 	.word	0x080331c8

08017fa0 <get_seg_channel>:
    {
        channel = 0;
    }

    return channel;
}
 8017fa0:	2000      	movs	r0, #0
 8017fa2:	4770      	bx	lr

08017fa4 <set_device_status_all>:
        }
    }
}

void set_device_status_all(teDEVSTATUS status)
{
 8017fa4:	b510      	push	{r4, lr}
 8017fa6:	4604      	mov	r4, r0
    }
}

void set_device_status(uint8_t channel, teDEVSTATUS status)
{
    struct __network_connection *network_connection = (struct __network_connection *)get_DevConfig_pointer()->network_connection;
 8017fa8:	f7fc f844 	bl	8014034 <get_DevConfig_pointer>
 8017fac:	1e63      	subs	r3, r4, #1
    
    if(channel >= DEVICE_UART_CNT) channel = 0;

    switch(status)
 8017fae:	2b04      	cmp	r3, #4
 8017fb0:	d826      	bhi.n	8018000 <set_device_status_all+0x5c>
 8017fb2:	e8df f003 	tbb	[pc, r3]
 8017fb6:	120e      	.short	0x120e
 8017fb8:	211d      	.short	0x211d
 8017fba:	03          	.byte	0x03
 8017fbb:	00          	.byte	0x00
        case ST_ATMODE:     // TCP connection state: disconnected
            network_connection[channel].working_state = ST_ATMODE;
            break;
        
        case ST_UDP:        // UDP mode
            network_connection[channel].working_state = ST_UDP;
 8017fbc:	2305      	movs	r3, #5
 8017fbe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    // Status indicator pins
    if(network_connection[channel].working_state == ST_CONNECT)
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, ON); // Status I/O pin to low
    else
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, OFF); // Status I/O pin to high
 8017fc2:	2200      	movs	r2, #0
}
 8017fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, OFF); // Status I/O pin to high
 8017fc8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8017fcc:	4611      	mov	r1, r2
 8017fce:	f7ff ba9b 	b.w	8017508 <set_connection_status_io>
            network_connection[channel].working_state = ST_OPEN;
 8017fd2:	2301      	movs	r3, #1
 8017fd4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
            break;
 8017fd8:	e7f3      	b.n	8017fc2 <set_device_status_all+0x1e>
            network_connection[channel].working_state = ST_CONNECT;
 8017fda:	2302      	movs	r3, #2
 8017fdc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, ON); // Status I/O pin to low
 8017fe0:	2201      	movs	r2, #1
}
 8017fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, ON); // Status I/O pin to low
 8017fe6:	2100      	movs	r1, #0
 8017fe8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8017fec:	f7ff ba8c 	b.w	8017508 <set_connection_status_io>
            network_connection[channel].working_state = ST_UPGRADE;
 8017ff0:	2303      	movs	r3, #3
 8017ff2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
            break;
 8017ff6:	e7e4      	b.n	8017fc2 <set_device_status_all+0x1e>
            network_connection[channel].working_state = ST_ATMODE;
 8017ff8:	2304      	movs	r3, #4
 8017ffa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
            break;
 8017ffe:	e7e0      	b.n	8017fc2 <set_device_status_all+0x1e>
    if(network_connection[channel].working_state == ST_CONNECT)
 8018000:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8018004:	2b02      	cmp	r3, #2
 8018006:	d0eb      	beq.n	8017fe0 <set_device_status_all+0x3c>
 8018008:	e7db      	b.n	8017fc2 <set_device_status_all+0x1e>
 801800a:	bf00      	nop

0801800c <set_device_status>:
{
 801800c:	b510      	push	{r4, lr}
 801800e:	460c      	mov	r4, r1
    struct __network_connection *network_connection = (struct __network_connection *)get_DevConfig_pointer()->network_connection;
 8018010:	f7fc f810 	bl	8014034 <get_DevConfig_pointer>
 8018014:	1e61      	subs	r1, r4, #1
    switch(status)
 8018016:	2904      	cmp	r1, #4
 8018018:	d826      	bhi.n	8018068 <set_device_status+0x5c>
 801801a:	e8df f001 	tbb	[pc, r1]
 801801e:	120e      	.short	0x120e
 8018020:	211d      	.short	0x211d
 8018022:	03          	.byte	0x03
 8018023:	00          	.byte	0x00
            network_connection[channel].working_state = ST_UDP;
 8018024:	2305      	movs	r3, #5
 8018026:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, OFF); // Status I/O pin to high
 801802a:	2200      	movs	r2, #0
}
 801802c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, OFF); // Status I/O pin to high
 8018030:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8018034:	4611      	mov	r1, r2
 8018036:	f7ff ba67 	b.w	8017508 <set_connection_status_io>
            network_connection[channel].working_state = ST_OPEN;
 801803a:	2301      	movs	r3, #1
 801803c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
            break;
 8018040:	e7f3      	b.n	801802a <set_device_status+0x1e>
            network_connection[channel].working_state = ST_CONNECT;
 8018042:	2302      	movs	r3, #2
 8018044:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, ON); // Status I/O pin to low
 8018048:	2201      	movs	r2, #1
}
 801804a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, ON); // Status I/O pin to low
 801804e:	2100      	movs	r1, #0
 8018050:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8018054:	f7ff ba58 	b.w	8017508 <set_connection_status_io>
            network_connection[channel].working_state = ST_UPGRADE;
 8018058:	2303      	movs	r3, #3
 801805a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
            break;
 801805e:	e7e4      	b.n	801802a <set_device_status+0x1e>
            network_connection[channel].working_state = ST_ATMODE;
 8018060:	2304      	movs	r3, #4
 8018062:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
            break;
 8018066:	e7e0      	b.n	801802a <set_device_status+0x1e>
    if(network_connection[channel].working_state == ST_CONNECT)
 8018068:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 801806c:	2b02      	cmp	r3, #2
 801806e:	d0eb      	beq.n	8018048 <set_device_status+0x3c>
 8018070:	e7db      	b.n	801802a <set_device_status+0x1e>
 8018072:	bf00      	nop

08018074 <get_device_status>:

uint8_t get_device_status(uint8_t channel)
{
 8018074:	b508      	push	{r3, lr}
    struct __network_connection *network_connection = (struct __network_connection *)get_DevConfig_pointer()->network_connection;
 8018076:	f7fb ffdd 	bl	8014034 <get_DevConfig_pointer>
    if(channel >= DEVICE_UART_CNT) channel = 0;

    return network_connection[channel].working_state;
}
 801807a:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 801807e:	bd08      	pop	{r3, pc}

08018080 <get_serial_data>:
    inactivity_time[channel] = 0;
    //flag_serial_input_time_elapse = SEG_DISABLE; // this flag is cleared in the 'Data packing delimiter:time' checker routine
}

uint16_t get_serial_data(uint8_t uartNum)
{
 8018080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018084:	4605      	mov	r5, r0
    struct __serial_data_packing *serial_data_packing = (struct __serial_data_packing *)get_DevConfig_pointer()->serial_data_packing;
 8018086:	f7fb ffd5 	bl	8014034 <get_DevConfig_pointer>
 801808a:	4607      	mov	r7, r0
    //int32_t chch;

    // Serial channel
    uint8_t channel = get_seg_channel(uartNum);

    len = get_uart_buffer_usedsize(uartNum);
 801808c:	4628      	mov	r0, r5
 801808e:	f7ff febd 	bl	8017e0c <get_uart_buffer_usedsize>
    
    if((len + u2e_size[channel]) >= DATA_BUF_SIZE) // Avoiding u2e buffer (g_send_buf) overflow
 8018092:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 801818c <get_serial_data+0x10c>
 8018096:	f8b8 3000 	ldrh.w	r3, [r8]
 801809a:	18c2      	adds	r2, r0, r3
 801809c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80180a0:	db32      	blt.n	8018108 <get_serial_data+0x88>
    {
        /* Checking Data packing option: character delimiter */
        if((serial_data_packing[channel].packing_delimiter[0] != 0x00) && (len == 1))
 80180a2:	f897 20f5 	ldrb.w	r2, [r7, #245]	; 0xf5
 80180a6:	b10a      	cbz	r2, 80180ac <get_serial_data+0x2c>
 80180a8:	2801      	cmp	r0, #1
 80180aa:	d05d      	beq.n	8018168 <get_serial_data+0xe8>
        
        // serial data length value update for avoiding u2e buffer overflow
        len = DATA_BUF_SIZE - u2e_size[channel];
    }
    
    if((!serial_data_packing[channel].packing_time) &&
 80180ac:	f8b7 20f1 	ldrh.w	r2, [r7, #241]	; 0xf1
        len = DATA_BUF_SIZE - u2e_size[channel];
 80180b0:	f5c3 6600 	rsb	r6, r3, #2048	; 0x800
 80180b4:	b2b6      	uxth	r6, r6
    if((!serial_data_packing[channel].packing_time) &&
 80180b6:	b362      	cbz	r2, 8018112 <get_serial_data+0x92>
        return u2e_size[channel];
    }
    else
    {
        /* Checking Data packing options */
        for(i = 0; i < len; i++)
 80180b8:	b3a6      	cbz	r6, 8018124 <get_serial_data+0xa4>
 80180ba:	2400      	movs	r4, #0
 80180bc:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8018190 <get_serial_data+0x110>
        {
            g_send_buf[u2e_size[channel]++] = (uint8_t)uart_getc(uartNum);
 80180c0:	4628      	mov	r0, r5
 80180c2:	f7ff fe55 	bl	8017d70 <uart_getc>
 80180c6:	f8b8 3000 	ldrh.w	r3, [r8]
 80180ca:	3401      	adds	r4, #1
 80180cc:	f809 0003 	strb.w	r0, [r9, r3]
            
            // Packing delimiter: character option
            if((serial_data_packing[channel].packing_delimiter[0] != 0x00) &&
 80180d0:	f897 20f5 	ldrb.w	r2, [r7, #245]	; 0xf5
            g_send_buf[u2e_size[channel]++] = (uint8_t)uart_getc(uartNum);
 80180d4:	3301      	adds	r3, #1
 80180d6:	b29b      	uxth	r3, r3
        for(i = 0; i < len; i++)
 80180d8:	b2a1      	uxth	r1, r4
               (serial_data_packing[channel].packing_delimiter[0] == g_send_buf[u2e_size[channel] - 1]))
 80180da:	eb09 0003 	add.w	r0, r9, r3
            g_send_buf[u2e_size[channel]++] = (uint8_t)uart_getc(uartNum);
 80180de:	f8a8 3000 	strh.w	r3, [r8]
            if((serial_data_packing[channel].packing_delimiter[0] != 0x00) &&
 80180e2:	b11a      	cbz	r2, 80180ec <get_serial_data+0x6c>
 80180e4:	f810 0c01 	ldrb.w	r0, [r0, #-1]
 80180e8:	4290      	cmp	r0, r2
 80180ea:	d00a      	beq.n	8018102 <get_serial_data+0x82>
            {
                return u2e_size[channel];
            }
            
            // Packing delimiter: size option
            if((serial_data_packing[channel].packing_size != 0) && (serial_data_packing[channel].packing_size == u2e_size[channel]))
 80180ec:	f8b7 20f3 	ldrh.w	r2, [r7, #243]	; 0xf3
 80180f0:	b10a      	cbz	r2, 80180f6 <get_serial_data+0x76>
 80180f2:	4293      	cmp	r3, r2
 80180f4:	d005      	beq.n	8018102 <get_serial_data+0x82>
        for(i = 0; i < len; i++)
 80180f6:	428e      	cmp	r6, r1
 80180f8:	d8e2      	bhi.n	80180c0 <get_serial_data+0x40>
            }
        }
    }
    
    // Packing delimiter: time option
    if((serial_data_packing->packing_time != 0) && (u2e_size[channel] != 0) && (flag_serial_input_time_elapse[channel]))
 80180fa:	f8b7 20f1 	ldrh.w	r2, [r7, #241]	; 0xf1
 80180fe:	b98a      	cbnz	r2, 8018124 <get_serial_data+0xa4>
            flag_serial_input_time_elapse[channel] = SEG_DISABLE; // ##
        
        return u2e_size[channel];
    }
    
    return 0;
 8018100:	2300      	movs	r3, #0
}
 8018102:	4618      	mov	r0, r3
 8018104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if((!serial_data_packing[channel].packing_time) &&
 8018108:	f8b7 20f1 	ldrh.w	r2, [r7, #241]	; 0xf1
 801810c:	4606      	mov	r6, r0
 801810e:	2a00      	cmp	r2, #0
 8018110:	d1d2      	bne.n	80180b8 <get_serial_data+0x38>
 8018112:	f8b7 20f3 	ldrh.w	r2, [r7, #243]	; 0xf3
 8018116:	b912      	cbnz	r2, 801811e <get_serial_data+0x9e>
       (!serial_data_packing[channel].packing_size) &&
 8018118:	f897 40f5 	ldrb.w	r4, [r7, #245]	; 0xf5
 801811c:	b184      	cbz	r4, 8018140 <get_serial_data+0xc0>
        for(i = 0; i < len; i++)
 801811e:	2e00      	cmp	r6, #0
 8018120:	d1cb      	bne.n	80180ba <get_serial_data+0x3a>
 8018122:	e7ed      	b.n	8018100 <get_serial_data+0x80>
    if((serial_data_packing->packing_time != 0) && (u2e_size[channel] != 0) && (flag_serial_input_time_elapse[channel]))
 8018124:	2b00      	cmp	r3, #0
 8018126:	d0eb      	beq.n	8018100 <get_serial_data+0x80>
 8018128:	4c17      	ldr	r4, [pc, #92]	; (8018188 <get_serial_data+0x108>)
 801812a:	7823      	ldrb	r3, [r4, #0]
 801812c:	2b00      	cmp	r3, #0
 801812e:	d0e7      	beq.n	8018100 <get_serial_data+0x80>
        if(get_uart_buffer_usedsize(uartNum) == 0)
 8018130:	4628      	mov	r0, r5
 8018132:	f7ff fe6b 	bl	8017e0c <get_uart_buffer_usedsize>
 8018136:	b900      	cbnz	r0, 801813a <get_serial_data+0xba>
            flag_serial_input_time_elapse[channel] = SEG_DISABLE; // ##
 8018138:	7020      	strb	r0, [r4, #0]
        return u2e_size[channel];
 801813a:	f8b8 3000 	ldrh.w	r3, [r8]
 801813e:	e7e0      	b.n	8018102 <get_serial_data+0x82>
        for(i = 0; i < len; i++)
 8018140:	2e00      	cmp	r6, #0
 8018142:	d0de      	beq.n	8018102 <get_serial_data+0x82>
 8018144:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8018190 <get_serial_data+0x110>
            g_send_buf[u2e_size[channel]++] = (uint8_t)uart_getc(uartNum);
 8018148:	4628      	mov	r0, r5
 801814a:	f7ff fe11 	bl	8017d70 <uart_getc>
 801814e:	f8b8 2000 	ldrh.w	r2, [r8]
 8018152:	3401      	adds	r4, #1
 8018154:	1c53      	adds	r3, r2, #1
 8018156:	f809 0002 	strb.w	r0, [r9, r2]
        for(i = 0; i < len; i++)
 801815a:	b2a2      	uxth	r2, r4
            g_send_buf[u2e_size[channel]++] = (uint8_t)uart_getc(uartNum);
 801815c:	b29b      	uxth	r3, r3
        for(i = 0; i < len; i++)
 801815e:	4296      	cmp	r6, r2
            g_send_buf[u2e_size[channel]++] = (uint8_t)uart_getc(uartNum);
 8018160:	f8a8 3000 	strh.w	r3, [r8]
        for(i = 0; i < len; i++)
 8018164:	d8f0      	bhi.n	8018148 <get_serial_data+0xc8>
 8018166:	e7cc      	b.n	8018102 <get_serial_data+0x82>
            g_send_buf[u2e_size[channel]] = (uint8_t)uart_getc(uartNum);
 8018168:	4628      	mov	r0, r5
 801816a:	f7ff fe01 	bl	8017d70 <uart_getc>
 801816e:	f8df 9020 	ldr.w	r9, [pc, #32]	; 8018190 <get_serial_data+0x110>
 8018172:	f8b8 3000 	ldrh.w	r3, [r8]
 8018176:	b2c2      	uxtb	r2, r0
 8018178:	f809 2003 	strb.w	r2, [r9, r3]
            if(serial_data_packing[channel].packing_delimiter[0] == g_send_buf[u2e_size[channel]])
 801817c:	f897 10f5 	ldrb.w	r1, [r7, #245]	; 0xf5
 8018180:	4291      	cmp	r1, r2
 8018182:	d193      	bne.n	80180ac <get_serial_data+0x2c>
 8018184:	e7bd      	b.n	8018102 <get_serial_data+0x82>
 8018186:	bf00      	nop
 8018188:	20019914 	.word	0x20019914
 801818c:	20019960 	.word	0x20019960
 8018190:	2001d5b8 	.word	0x2001d5b8

08018194 <get_serial_communation_protocol>:
    return client_any_port[channel];
}


uint8_t get_serial_communation_protocol(uint8_t channel)
{
 8018194:	b510      	push	{r4, lr}
 8018196:	4604      	mov	r4, r0
    struct __serial_option *serial_option = (struct __serial_option *)&(get_DevConfig_pointer()->serial_option);
 8018198:	f7fb ff4c 	bl	8014034 <get_DevConfig_pointer>

    // SEG_SERIAL_PROTOCOL_NONE
    // SEG_SERIAL_MODBUS_RTU
    // SEG_SERIAL_MODBUS_ASCII

    return serial_option[channel].protocol;
 801819c:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 80181a0:	4420      	add	r0, r4
}
 80181a2:	f890 00e9 	ldrb.w	r0, [r0, #233]	; 0xe9
 80181a6:	bd10      	pop	{r4, pc}

080181a8 <process_socket_termination>:
#endif 
}


uint8_t process_socket_termination(uint8_t sock, uint32_t timeout)
{
 80181a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80181ac:	4680      	mov	r8, r0
 80181ae:	460e      	mov	r6, r1
    struct __network_connection *network_connection = (struct __network_connection *)get_DevConfig_pointer()->network_connection;
 80181b0:	f7fb ff40 	bl	8014034 <get_DevConfig_pointer>
 80181b4:	4682      	mov	sl, r0

    int8_t ret;
    uint8_t sock_status = getSn_SR(sock);
 80181b6:	ea4f 2008 	mov.w	r0, r8, lsl #8
 80181ba:	f200 4003 	addw	r0, r0, #1027	; 0x403
 80181be:	f002 fcd7 	bl	801ab70 <WIZCHIP_READ>
 80181c2:	4607      	mov	r7, r0
    uint32_t tickStart = millis();
 80181c4:	f7ff fbb4 	bl	8017930 <millis>

    if(sock_status == SOCK_CLOSED) return sock;
 80181c8:	b15f      	cbz	r7, 80181e2 <process_socket_termination+0x3a>
    
    if(network_connection->working_mode != UDP_MODE) // TCP_SERVER_MODE / TCP_CLIENT_MODE / TCP_MIXED_MODE
 80181ca:	f89a 303b 	ldrb.w	r3, [sl, #59]	; 0x3b
 80181ce:	2b03      	cmp	r3, #3
 80181d0:	d004      	beq.n	80181dc <process_socket_termination+0x34>
    {
        if((sock_status == SOCK_ESTABLISHED) || (sock_status == SOCK_CLOSE_WAIT))
 80181d2:	2f17      	cmp	r7, #23
 80181d4:	4681      	mov	r9, r0
 80181d6:	d007      	beq.n	80181e8 <process_socket_termination+0x40>
 80181d8:	2f1c      	cmp	r7, #28
 80181da:	d005      	beq.n	80181e8 <process_socket_termination+0x40>
                if((ret == SOCK_OK) || (ret == SOCKERR_TIMEOUT)) break;
            } while ((millis() - tickStart) < timeout);
        }
    }
    
    close(sock);
 80181dc:	4640      	mov	r0, r8
 80181de:	f003 f819 	bl	801b214 <close>
    
    return sock;
}
 80181e2:	4640      	mov	r0, r8
 80181e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            } while ((millis() - tickStart) < timeout);
 80181e8:	f04f 0a00 	mov.w	sl, #0
 80181ec:	2700      	movs	r7, #0
 80181ee:	e00b      	b.n	8018208 <process_socket_termination+0x60>
                if((ret == SOCK_OK) || (ret == SOCKERR_TIMEOUT)) break;
 80181f0:	300d      	adds	r0, #13
 80181f2:	d0f3      	beq.n	80181dc <process_socket_termination+0x34>
            } while ((millis() - tickStart) < timeout);
 80181f4:	f7ff fb9c 	bl	8017930 <millis>
 80181f8:	ebb0 0409 	subs.w	r4, r0, r9
 80181fc:	eb61 050a 	sbc.w	r5, r1, sl
 8018200:	42b4      	cmp	r4, r6
 8018202:	eb75 0307 	sbcs.w	r3, r5, r7
 8018206:	dae9      	bge.n	80181dc <process_socket_termination+0x34>
            	ret = disconnect(sock);
 8018208:	4640      	mov	r0, r8
 801820a:	f003 f915 	bl	801b438 <disconnect>
                if((ret == SOCK_OK) || (ret == SOCKERR_TIMEOUT)) break;
 801820e:	2801      	cmp	r0, #1
 8018210:	d1ee      	bne.n	80181f0 <process_socket_termination+0x48>
 8018212:	e7e3      	b.n	80181dc <process_socket_termination+0x34>

08018214 <init_trigger_modeswitch>:
    return ret;
}


void init_trigger_modeswitch(uint8_t channel, uint8_t uartNum, uint8_t mode)
{
 8018214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018218:	4615      	mov	r5, r2
 801821a:	4604      	mov	r4, r0
 801821c:	460e      	mov	r6, r1
    struct __serial_common *serial_common = (struct __serial_common *)&(get_DevConfig_pointer()->serial_common);
 801821e:	f7fb ff09 	bl	8014034 <get_DevConfig_pointer>
 8018222:	4607      	mov	r7, r0
    struct __network_connection *network_connection = (struct __network_connection *)(get_DevConfig_pointer()->network_connection);
 8018224:	f7fb ff06 	bl	8014034 <get_DevConfig_pointer>
    
    if(mode == DEVICE_AT_MODE)
 8018228:	bb75      	cbnz	r5, 8018288 <init_trigger_modeswitch+0x74>
    {
        opmode = DEVICE_AT_MODE;
 801822a:	4b32      	ldr	r3, [pc, #200]	; (80182f4 <init_trigger_modeswitch+0xe0>)
 801822c:	701d      	strb	r5, [r3, #0]
    struct __network_connection *network_connection = (struct __network_connection *)get_DevConfig_pointer()->network_connection;
 801822e:	f7fb ff01 	bl	8014034 <get_DevConfig_pointer>
            network_connection[channel].working_state = ST_ATMODE;
 8018232:	2304      	movs	r3, #4
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, OFF); // Status I/O pin to high
 8018234:	462a      	mov	r2, r5
            network_connection[channel].working_state = ST_ATMODE;
 8018236:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, OFF); // Status I/O pin to high
 801823a:	4629      	mov	r1, r5
 801823c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8018240:	f7ff f962 	bl	8017508 <set_connection_status_io>
        set_device_status(channel, ST_ATMODE);
        
        if(serial_common->serial_debug_en)
 8018244:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 8018248:	2b00      	cmp	r3, #0
 801824a:	d14a      	bne.n	80182e2 <init_trigger_modeswitch+0xce>
            printf(" > SEG:GW Mode\r\n");
            uart_puts(uartNum, (uint8_t *)"SEG:GW Mode\r\n", sizeof("SEG:GW Mode\r\n"));
        }
    }
    
    u2e_size[channel] = 0;
 801824c:	2500      	movs	r5, #0
 801824e:	4b2a      	ldr	r3, [pc, #168]	; (80182f8 <init_trigger_modeswitch+0xe4>)
    uart_rx_flush(uartNum);
 8018250:	4630      	mov	r0, r6
    u2e_size[channel] = 0;
 8018252:	f823 5014 	strh.w	r5, [r3, r4, lsl #1]
    uart_rx_flush(uartNum);
 8018256:	f7ff fdb3 	bl	8017dc0 <uart_rx_flush>
    
    enable_inactivity_timer[channel] = SEG_DISABLE;
    enable_keepalive_timer[channel] = SEG_DISABLE;
    enable_serial_input_timer[channel] = SEG_DISABLE;
    
    inactivity_time[channel] = 0;
 801825a:	4b28      	ldr	r3, [pc, #160]	; (80182fc <init_trigger_modeswitch+0xe8>)
    keepalive_time[channel] = 0;
 801825c:	4828      	ldr	r0, [pc, #160]	; (8018300 <init_trigger_modeswitch+0xec>)
    serial_input_time[channel] = 0;
 801825e:	4929      	ldr	r1, [pc, #164]	; (8018304 <init_trigger_modeswitch+0xf0>)
    enable_inactivity_timer[channel] = SEG_DISABLE;
 8018260:	4a29      	ldr	r2, [pc, #164]	; (8018308 <init_trigger_modeswitch+0xf4>)
    inactivity_time[channel] = 0;
 8018262:	f823 5014 	strh.w	r5, [r3, r4, lsl #1]
    enable_keepalive_timer[channel] = SEG_DISABLE;
 8018266:	4b29      	ldr	r3, [pc, #164]	; (801830c <init_trigger_modeswitch+0xf8>)
    keepalive_time[channel] = 0;
 8018268:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    enable_inactivity_timer[channel] = SEG_DISABLE;
 801826c:	5515      	strb	r5, [r2, r4]
    serial_input_time[channel] = 0;
 801826e:	f821 5014 	strh.w	r5, [r1, r4, lsl #1]
    enable_serial_input_timer[channel] = SEG_DISABLE;
 8018272:	4827      	ldr	r0, [pc, #156]	; (8018310 <init_trigger_modeswitch+0xfc>)

    flag_serial_input_time_elapse[channel] = 0;
 8018274:	4927      	ldr	r1, [pc, #156]	; (8018314 <init_trigger_modeswitch+0x100>)

    enable_modeswitch_timer = SEG_DISABLE;
 8018276:	4a28      	ldr	r2, [pc, #160]	; (8018318 <init_trigger_modeswitch+0x104>)
    enable_keepalive_timer[channel] = SEG_DISABLE;
 8018278:	551d      	strb	r5, [r3, r4]
    modeswitch_time = 0;
 801827a:	4b28      	ldr	r3, [pc, #160]	; (801831c <init_trigger_modeswitch+0x108>)
    enable_serial_input_timer[channel] = SEG_DISABLE;
 801827c:	5505      	strb	r5, [r0, r4]
    flag_serial_input_time_elapse[channel] = 0;
 801827e:	550d      	strb	r5, [r1, r4]
    enable_modeswitch_timer = SEG_DISABLE;
 8018280:	7015      	strb	r5, [r2, #0]
    modeswitch_time = 0;
 8018282:	801d      	strh	r5, [r3, #0]
}
 8018284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        opmode = DEVICE_GW_MODE;
 8018288:	2501      	movs	r5, #1
 801828a:	4b1a      	ldr	r3, [pc, #104]	; (80182f4 <init_trigger_modeswitch+0xe0>)
 801828c:	4680      	mov	r8, r0
 801828e:	701d      	strb	r5, [r3, #0]
    struct __network_connection *network_connection = (struct __network_connection *)get_DevConfig_pointer()->network_connection;
 8018290:	f7fb fed0 	bl	8014034 <get_DevConfig_pointer>
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, OFF); // Status I/O pin to high
 8018294:	2200      	movs	r2, #0
            network_connection[channel].working_state = ST_OPEN;
 8018296:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, OFF); // Status I/O pin to high
 801829a:	4611      	mov	r1, r2
 801829c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80182a0:	f7ff f932 	bl	8017508 <set_connection_status_io>
        if(network_connection[channel].working_mode == TCP_MIXED_MODE)
 80182a4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80182a8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80182ac:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 80182b0:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80182b4:	2b02      	cmp	r3, #2
 80182b6:	d00c      	beq.n	80182d2 <init_trigger_modeswitch+0xbe>
        if(serial_common->serial_debug_en)
 80182b8:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 80182bc:	2b00      	cmp	r3, #0
 80182be:	d0c5      	beq.n	801824c <init_trigger_modeswitch+0x38>
            printf(" > SEG:GW Mode\r\n");
 80182c0:	4817      	ldr	r0, [pc, #92]	; (8018320 <init_trigger_modeswitch+0x10c>)
 80182c2:	f017 ff17 	bl	80300f4 <puts>
            uart_puts(uartNum, (uint8_t *)"SEG:GW Mode\r\n", sizeof("SEG:GW Mode\r\n"));
 80182c6:	220e      	movs	r2, #14
 80182c8:	4630      	mov	r0, r6
 80182ca:	4916      	ldr	r1, [pc, #88]	; (8018324 <init_trigger_modeswitch+0x110>)
 80182cc:	f7ff fd36 	bl	8017d3c <uart_puts>
 80182d0:	e7bc      	b.n	801824c <init_trigger_modeswitch+0x38>
            mixed_state[channel] = MIXED_SERVER;
 80182d2:	2200      	movs	r2, #0
 80182d4:	4b14      	ldr	r3, [pc, #80]	; (8018328 <init_trigger_modeswitch+0x114>)
 80182d6:	551a      	strb	r2, [r3, r4]
        if(serial_common->serial_debug_en)
 80182d8:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 80182dc:	2b00      	cmp	r3, #0
 80182de:	d0b5      	beq.n	801824c <init_trigger_modeswitch+0x38>
 80182e0:	e7ee      	b.n	80182c0 <init_trigger_modeswitch+0xac>
            printf(" > SEG:AT Mode\r\n");
 80182e2:	4812      	ldr	r0, [pc, #72]	; (801832c <init_trigger_modeswitch+0x118>)
 80182e4:	f017 ff06 	bl	80300f4 <puts>
            uart_puts(uartNum, (uint8_t *)"SEG:AT Mode\r\n", sizeof("SEG:AT Mode\r\n"));
 80182e8:	220e      	movs	r2, #14
 80182ea:	4630      	mov	r0, r6
 80182ec:	4910      	ldr	r1, [pc, #64]	; (8018330 <init_trigger_modeswitch+0x11c>)
 80182ee:	f7ff fd25 	bl	8017d3c <uart_puts>
 80182f2:	e7ab      	b.n	801824c <init_trigger_modeswitch+0x38>
 80182f4:	20018214 	.word	0x20018214
 80182f8:	20019960 	.word	0x20019960
 80182fc:	2001991c 	.word	0x2001991c
 8018300:	20019924 	.word	0x20019924
 8018304:	20019958 	.word	0x20019958
 8018308:	200198f4 	.word	0x200198f4
 801830c:	200198f8 	.word	0x200198f8
 8018310:	20019900 	.word	0x20019900
 8018314:	20019914 	.word	0x20019914
 8018318:	200198f9 	.word	0x200198f9
 801831c:	2001992a 	.word	0x2001992a
 8018320:	08033220 	.word	0x08033220
 8018324:	08033230 	.word	0x08033230
 8018328:	20019928 	.word	0x20019928
 801832c:	08033200 	.word	0x08033200
 8018330:	08033210 	.word	0x08033210

08018334 <check_modeswitch_trigger>:

uint8_t check_modeswitch_trigger(uint8_t ch)
{
 8018334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018338:	4605      	mov	r5, r0
    struct __serial_command *serial_command = (struct __serial_command *)&(get_DevConfig_pointer()->serial_command);
 801833a:	f7fb fe7b 	bl	8014034 <get_DevConfig_pointer>
    
    uint8_t modeswitch_failed = SEG_DISABLE;
    uint8_t ret = 0;
    
    if(opmode != DEVICE_GW_MODE) 				        return 0;
 801833e:	4a30      	ldr	r2, [pc, #192]	; (8018400 <check_modeswitch_trigger+0xcc>)
 8018340:	7812      	ldrb	r2, [r2, #0]
 8018342:	2a01      	cmp	r2, #1
 8018344:	d114      	bne.n	8018370 <check_modeswitch_trigger+0x3c>
    if(serial_command->serial_command == SEG_DISABLE) 	return 0;
 8018346:	f890 40e3 	ldrb.w	r4, [r0, #227]	; 0xe3
 801834a:	4603      	mov	r3, r0
 801834c:	b16c      	cbz	r4, 801836a <check_modeswitch_trigger+0x36>
    
    switch(triggercode_idx)
 801834e:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8018414 <check_modeswitch_trigger+0xe0>
 8018352:	f898 4000 	ldrb.w	r4, [r8]
 8018356:	2c02      	cmp	r4, #2
 8018358:	d80e      	bhi.n	8018378 <check_modeswitch_trigger+0x44>
 801835a:	bb6c      	cbnz	r4, 80183b8 <check_modeswitch_trigger+0x84>
    {
        case 0:
            if((ch == serial_command->serial_trigger[triggercode_idx]) && (modeswitch_time == modeswitch_gap_time)) // comparison succeed
 801835c:	f890 30e4 	ldrb.w	r3, [r0, #228]	; 0xe4
 8018360:	4f28      	ldr	r7, [pc, #160]	; (8018404 <check_modeswitch_trigger+0xd0>)
 8018362:	42ab      	cmp	r3, r5
 8018364:	d03c      	beq.n	80183e0 <check_modeswitch_trigger+0xac>
    if(modeswitch_failed == SEG_ENABLE)
    {
        restore_serial_data(triggercode_idx);
    }
    
    modeswitch_time = 0; // reset the inter-gap time count for each trigger code recognition (Allowable interval)
 8018366:	2300      	movs	r3, #0
 8018368:	803b      	strh	r3, [r7, #0]
    ret = triggercode_idx;
    
    return ret;
}
 801836a:	4620      	mov	r0, r4
 801836c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(opmode != DEVICE_GW_MODE) 				        return 0;
 8018370:	2400      	movs	r4, #0
}
 8018372:	4620      	mov	r0, r4
 8018374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(triggercode_idx)
 8018378:	2c03      	cmp	r4, #3
 801837a:	4f22      	ldr	r7, [pc, #136]	; (8018404 <check_modeswitch_trigger+0xd0>)
 801837c:	d1f3      	bne.n	8018366 <check_modeswitch_trigger+0x32>
            if(modeswitch_time < modeswitch_gap_time) // comparison failed: end gap
 801837e:	4b22      	ldr	r3, [pc, #136]	; (8018408 <check_modeswitch_trigger+0xd4>)
 8018380:	883a      	ldrh	r2, [r7, #0]
 8018382:	881b      	ldrh	r3, [r3, #0]
 8018384:	b292      	uxth	r2, r2
 8018386:	b29b      	uxth	r3, r3
 8018388:	429a      	cmp	r2, r3
 801838a:	d2ec      	bcs.n	8018366 <check_modeswitch_trigger+0x32>
{
 801838c:	2500      	movs	r5, #0
{
    uint8_t i;
    
    for(i = 0; i < idx; i++)
    {
        put_byte_to_uart_buffer(SEG_DATA0_UART, ch_tmp[i]);
 801838e:	46a9      	mov	r9, r5
 8018390:	4e1e      	ldr	r6, [pc, #120]	; (801840c <check_modeswitch_trigger+0xd8>)
    for(i = 0; i < idx; i++)
 8018392:	3501      	adds	r5, #1
        put_byte_to_uart_buffer(SEG_DATA0_UART, ch_tmp[i]);
 8018394:	7831      	ldrb	r1, [r6, #0]
 8018396:	2000      	movs	r0, #0
    for(i = 0; i < idx; i++)
 8018398:	b2ed      	uxtb	r5, r5
        put_byte_to_uart_buffer(SEG_DATA0_UART, ch_tmp[i]);
 801839a:	f7ff fd1b 	bl	8017dd4 <put_byte_to_uart_buffer>
    for(i = 0; i < idx; i++)
 801839e:	42ac      	cmp	r4, r5
        ch_tmp[i] = 0x00;
 80183a0:	f806 9b01 	strb.w	r9, [r6], #1
    for(i = 0; i < idx; i++)
 80183a4:	d8f5      	bhi.n	8018392 <check_modeswitch_trigger+0x5e>
    }
    
    enable_modeswitch_timer = SEG_DISABLE;
 80183a6:	4b1a      	ldr	r3, [pc, #104]	; (8018410 <check_modeswitch_trigger+0xdc>)
    triggercode_idx = 0;
}
 80183a8:	2400      	movs	r4, #0
    enable_modeswitch_timer = SEG_DISABLE;
 80183aa:	f883 9000 	strb.w	r9, [r3]
    modeswitch_time = 0; // reset the inter-gap time count for each trigger code recognition (Allowable interval)
 80183ae:	2300      	movs	r3, #0
    triggercode_idx = 0;
 80183b0:	f888 9000 	strb.w	r9, [r8]
    modeswitch_time = 0; // reset the inter-gap time count for each trigger code recognition (Allowable interval)
 80183b4:	803b      	strh	r3, [r7, #0]
    return ret;
 80183b6:	e7d8      	b.n	801836a <check_modeswitch_trigger+0x36>
            if((ch == serial_command->serial_trigger[triggercode_idx]) && (modeswitch_time < modeswitch_gap_time)) // comparison succeed
 80183b8:	4423      	add	r3, r4
 80183ba:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 80183be:	4f11      	ldr	r7, [pc, #68]	; (8018404 <check_modeswitch_trigger+0xd0>)
 80183c0:	42ab      	cmp	r3, r5
 80183c2:	d1e3      	bne.n	801838c <check_modeswitch_trigger+0x58>
 80183c4:	4a10      	ldr	r2, [pc, #64]	; (8018408 <check_modeswitch_trigger+0xd4>)
 80183c6:	8839      	ldrh	r1, [r7, #0]
 80183c8:	8812      	ldrh	r2, [r2, #0]
 80183ca:	b289      	uxth	r1, r1
 80183cc:	b292      	uxth	r2, r2
 80183ce:	4291      	cmp	r1, r2
 80183d0:	d2dc      	bcs.n	801838c <check_modeswitch_trigger+0x58>
                ch_tmp[triggercode_idx] = ch;
 80183d2:	490e      	ldr	r1, [pc, #56]	; (801840c <check_modeswitch_trigger+0xd8>)
                triggercode_idx++;
 80183d4:	1c62      	adds	r2, r4, #1
                ch_tmp[triggercode_idx] = ch;
 80183d6:	550b      	strb	r3, [r1, r4]
                triggercode_idx++;
 80183d8:	b2d4      	uxtb	r4, r2
 80183da:	f888 4000 	strb.w	r4, [r8]
    if(modeswitch_failed == SEG_ENABLE)
 80183de:	e7c2      	b.n	8018366 <check_modeswitch_trigger+0x32>
            if((ch == serial_command->serial_trigger[triggercode_idx]) && (modeswitch_time == modeswitch_gap_time)) // comparison succeed
 80183e0:	4909      	ldr	r1, [pc, #36]	; (8018408 <check_modeswitch_trigger+0xd4>)
 80183e2:	8838      	ldrh	r0, [r7, #0]
 80183e4:	8809      	ldrh	r1, [r1, #0]
 80183e6:	b280      	uxth	r0, r0
 80183e8:	b289      	uxth	r1, r1
 80183ea:	4288      	cmp	r0, r1
 80183ec:	d1bb      	bne.n	8018366 <check_modeswitch_trigger+0x32>
                ch_tmp[triggercode_idx] = ch;
 80183ee:	4807      	ldr	r0, [pc, #28]	; (801840c <check_modeswitch_trigger+0xd8>)
                enable_modeswitch_timer = SEG_ENABLE;
 80183f0:	4907      	ldr	r1, [pc, #28]	; (8018410 <check_modeswitch_trigger+0xdc>)
 80183f2:	4614      	mov	r4, r2
                triggercode_idx++;
 80183f4:	f888 2000 	strb.w	r2, [r8]
                ch_tmp[triggercode_idx] = ch;
 80183f8:	7003      	strb	r3, [r0, #0]
                enable_modeswitch_timer = SEG_ENABLE;
 80183fa:	700a      	strb	r2, [r1, #0]
    if(modeswitch_failed == SEG_ENABLE)
 80183fc:	e7b3      	b.n	8018366 <check_modeswitch_trigger+0x32>
 80183fe:	bf00      	nop
 8018400:	20018214 	.word	0x20018214
 8018404:	2001992a 	.word	0x2001992a
 8018408:	20018212 	.word	0x20018212
 801840c:	200198e0 	.word	0x200198e0
 8018410:	200198f9 	.word	0x200198f9
 8018414:	2001995c 	.word	0x2001995c

08018418 <check_serial_store_permitted>:

uint8_t check_serial_store_permitted(uint8_t channel, uint8_t ch)
{
 8018418:	b570      	push	{r4, r5, r6, lr}
 801841a:	460d      	mov	r5, r1
 801841c:	4606      	mov	r6, r0
    struct __network_connection *network_connection = (struct __network_connection *)&(get_DevConfig_pointer()->network_connection);
 801841e:	f7fb fe09 	bl	8014034 <get_DevConfig_pointer>
 8018422:	4604      	mov	r4, r0
    struct __serial_option *serial_option = (struct __serial_option *)(get_DevConfig_pointer()->serial_option);
 8018424:	f7fb fe06 	bl	8014034 <get_DevConfig_pointer>
    
    uint8_t ret = SEG_DISABLE; // SEG_DISABLE: Doesn't put the serial data in a ring buffer
    
    switch(network_connection[channel].working_state)
 8018428:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    struct __network_connection *network_connection = (struct __network_connection *)&(get_DevConfig_pointer()->network_connection);
 801842c:	f104 023b 	add.w	r2, r4, #59	; 0x3b
    switch(network_connection[channel].working_state)
 8018430:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8018434:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8018438:	784c      	ldrb	r4, [r1, #1]
 801843a:	2c02      	cmp	r4, #2
 801843c:	d00b      	beq.n	8018456 <check_serial_store_permitted+0x3e>
 801843e:	d807      	bhi.n	8018450 <check_serial_store_permitted+0x38>
 8018440:	2c01      	cmp	r4, #1
 8018442:	d103      	bne.n	801844c <check_serial_store_permitted+0x34>
 8018444:	009b      	lsls	r3, r3, #2
    {
        case ST_OPEN:
            if(network_connection[channel].working_mode != TCP_MIXED_MODE) break;
 8018446:	5cd3      	ldrb	r3, [r2, r3]
 8018448:	2b02      	cmp	r3, #2
 801844a:	d004      	beq.n	8018456 <check_serial_store_permitted+0x3e>
    if((ret == SEG_ENABLE) && (serial_option->flow_control == flow_xon_xoff))
    {
        if(ch == UART_XON)
        {
            isXON[channel] = SEG_ENABLE;
            ret = SEG_DISABLE; 
 801844c:	2000      	movs	r0, #0
            isXON[channel] = SEG_DISABLE;
            ret = SEG_DISABLE;
        }
    }
    return ret;
}
 801844e:	bd70      	pop	{r4, r5, r6, pc}
    switch(network_connection[channel].working_state)
 8018450:	3c04      	subs	r4, #4
 8018452:	2c01      	cmp	r4, #1
 8018454:	d8fa      	bhi.n	801844c <check_serial_store_permitted+0x34>
    if((ret == SEG_ENABLE) && (serial_option->flow_control == flow_xon_xoff))
 8018456:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
 801845a:	2801      	cmp	r0, #1
 801845c:	d001      	beq.n	8018462 <check_serial_store_permitted+0x4a>
            ret = SEG_ENABLE;
 801845e:	2001      	movs	r0, #1
}
 8018460:	bd70      	pop	{r4, r5, r6, pc}
        if(ch == UART_XON)
 8018462:	2d11      	cmp	r5, #17
 8018464:	d006      	beq.n	8018474 <check_serial_store_permitted+0x5c>
        else if(ch == UART_XOFF)
 8018466:	2d13      	cmp	r5, #19
 8018468:	d1f1      	bne.n	801844e <check_serial_store_permitted+0x36>
            isXON[channel] = SEG_DISABLE;
 801846a:	2300      	movs	r3, #0
 801846c:	4a03      	ldr	r2, [pc, #12]	; (801847c <check_serial_store_permitted+0x64>)
            ret = SEG_DISABLE;
 801846e:	4618      	mov	r0, r3
            isXON[channel] = SEG_DISABLE;
 8018470:	5593      	strb	r3, [r2, r6]
}
 8018472:	bd70      	pop	{r4, r5, r6, pc}
            isXON[channel] = SEG_ENABLE;
 8018474:	4b01      	ldr	r3, [pc, #4]	; (801847c <check_serial_store_permitted+0x64>)
 8018476:	5598      	strb	r0, [r3, r6]
 8018478:	e7e8      	b.n	801844c <check_serial_store_permitted+0x34>
 801847a:	bf00      	nop
 801847c:	20018210 	.word	0x20018210

08018480 <init_time_delimiter_timer>:
    keepalive_time[channel] = 0;
    connection_auth_time[channel] = 0;
}

void init_time_delimiter_timer(uint8_t channel)
{
 8018480:	b510      	push	{r4, lr}
 8018482:	4604      	mov	r4, r0
    struct __serial_data_packing *serial_data_packing = (struct __serial_data_packing *)get_DevConfig_pointer()->serial_data_packing;
 8018484:	f7fb fdd6 	bl	8014034 <get_DevConfig_pointer>
    
    if(opmode == DEVICE_GW_MODE)
 8018488:	4b0a      	ldr	r3, [pc, #40]	; (80184b4 <init_time_delimiter_timer+0x34>)
 801848a:	781b      	ldrb	r3, [r3, #0]
 801848c:	2b01      	cmp	r3, #1
 801848e:	d000      	beq.n	8018492 <init_time_delimiter_timer+0x12>
                enable_serial_input_timer[channel] = SEG_ENABLE;
            }
            serial_input_time[channel] = 0;
        }
    }
}
 8018490:	bd10      	pop	{r4, pc}
        if(serial_data_packing[channel].packing_time != 0)
 8018492:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8018496:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801849a:	f8b0 20f1 	ldrh.w	r2, [r0, #241]	; 0xf1
 801849e:	2a00      	cmp	r2, #0
 80184a0:	d0f6      	beq.n	8018490 <init_time_delimiter_timer+0x10>
            if(enable_serial_input_timer[channel] == SEG_DISABLE)
 80184a2:	4a05      	ldr	r2, [pc, #20]	; (80184b8 <init_time_delimiter_timer+0x38>)
 80184a4:	5d11      	ldrb	r1, [r2, r4]
 80184a6:	b901      	cbnz	r1, 80184aa <init_time_delimiter_timer+0x2a>
                enable_serial_input_timer[channel] = SEG_ENABLE;
 80184a8:	5513      	strb	r3, [r2, r4]
            serial_input_time[channel] = 0;
 80184aa:	2200      	movs	r2, #0
 80184ac:	4b03      	ldr	r3, [pc, #12]	; (80184bc <init_time_delimiter_timer+0x3c>)
 80184ae:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
 80184b2:	bd10      	pop	{r4, pc}
 80184b4:	20018214 	.word	0x20018214
 80184b8:	20019900 	.word	0x20019900
 80184bc:	20019958 	.word	0x20019958

080184c0 <clear_data_transfer_bytecount>:
}
    

void clear_data_transfer_bytecount(uint8_t channel, teDATADIR dir)
{
    switch(dir)
 80184c0:	2903      	cmp	r1, #3
 80184c2:	d90b      	bls.n	80184dc <clear_data_transfer_bytecount+0x1c>
 80184c4:	2904      	cmp	r1, #4
 80184c6:	d10f      	bne.n	80184e8 <clear_data_transfer_bytecount+0x28>
    {
        case SEG_ALL:
            seg_byte_cnt[channel][SEG_UART_RX] = 0;
 80184c8:	2300      	movs	r3, #0
 80184ca:	4a08      	ldr	r2, [pc, #32]	; (80184ec <clear_data_transfer_bytecount+0x2c>)
 80184cc:	0101      	lsls	r1, r0, #4
 80184ce:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 80184d2:	5053      	str	r3, [r2, r1]
            seg_byte_cnt[channel][SEG_UART_TX] = 0;
 80184d4:	6043      	str	r3, [r0, #4]
            seg_byte_cnt[channel][SEG_ETHER_RX] = 0;
 80184d6:	6083      	str	r3, [r0, #8]
            seg_byte_cnt[channel][SEG_ETHER_TX] = 0;
 80184d8:	60c3      	str	r3, [r0, #12]
            break;
 80184da:	4770      	bx	lr
        
        case SEG_UART_RX:
        case SEG_UART_TX:
        case SEG_ETHER_RX:
        case SEG_ETHER_TX:
            seg_byte_cnt[channel][dir] = 0;
 80184dc:	2200      	movs	r2, #0
 80184de:	4b03      	ldr	r3, [pc, #12]	; (80184ec <clear_data_transfer_bytecount+0x2c>)
 80184e0:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80184e4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            break;

        default:
            break;
    }
}
 80184e8:	4770      	bx	lr
 80184ea:	bf00      	nop
 80184ec:	20019938 	.word	0x20019938

080184f0 <clear_data_transfer_megacount>:


void clear_data_transfer_megacount(uint8_t channel, teDATADIR dir)
{
    switch(dir)
 80184f0:	2903      	cmp	r1, #3
 80184f2:	d90b      	bls.n	801850c <clear_data_transfer_megacount+0x1c>
 80184f4:	2904      	cmp	r1, #4
 80184f6:	d10f      	bne.n	8018518 <clear_data_transfer_megacount+0x28>
    {
        case SEG_ALL:
            seg_mega_cnt[channel][SEG_UART_RX] = 0;
 80184f8:	2300      	movs	r3, #0
 80184fa:	4a08      	ldr	r2, [pc, #32]	; (801851c <clear_data_transfer_megacount+0x2c>)
 80184fc:	0101      	lsls	r1, r0, #4
 80184fe:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 8018502:	5053      	str	r3, [r2, r1]
            seg_mega_cnt[channel][SEG_UART_TX] = 0;
 8018504:	6043      	str	r3, [r0, #4]
            seg_mega_cnt[channel][SEG_ETHER_RX] = 0;
 8018506:	6083      	str	r3, [r0, #8]
            seg_mega_cnt[channel][SEG_ETHER_TX] = 0;
 8018508:	60c3      	str	r3, [r0, #12]
            break;
 801850a:	4770      	bx	lr
        
        case SEG_UART_RX:
        case SEG_UART_TX:
        case SEG_ETHER_RX:
        case SEG_ETHER_TX:
            seg_mega_cnt[channel][dir] = 0;
 801850c:	2200      	movs	r2, #0
 801850e:	4b03      	ldr	r3, [pc, #12]	; (801851c <clear_data_transfer_megacount+0x2c>)
 8018510:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8018514:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            break;

        default:
            break;
    }
}
 8018518:	4770      	bx	lr
 801851a:	bf00      	nop
 801851c:	20019948 	.word	0x20019948

08018520 <debugSerial_dataTransfer>:
    return seg_mega_cnt[channel][dir];
}


uint16_t debugSerial_dataTransfer(uint8_t * buf, uint16_t size, teDEBUGTYPE type)
{
 8018520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018522:	b087      	sub	sp, #28
 8018524:	4604      	mov	r4, r0
 8018526:	460d      	mov	r5, r1
 8018528:	4616      	mov	r6, r2
    uint16_t bytecnt = 0;
    
//#ifdef __USE_DEBUG_UPTIME__
    if(getDeviceUptime_day() > 0)
 801852a:	f7ff fa07 	bl	801793c <getDeviceUptime_day>
 801852e:	b1b8      	cbz	r0, 8018560 <debugSerial_dataTransfer+0x40>
        printf(" [%ldd/%02d:%02d:%02d]", getDeviceUptime_day(), getDeviceUptime_hour(), getDeviceUptime_min(), getDeviceUptime_sec());
 8018530:	f7ff fa04 	bl	801793c <getDeviceUptime_day>
 8018534:	9005      	str	r0, [sp, #20]
 8018536:	f7ff fa07 	bl	8017948 <getDeviceUptime_hour>
 801853a:	9004      	str	r0, [sp, #16]
 801853c:	f7ff fa0a 	bl	8017954 <getDeviceUptime_min>
 8018540:	9003      	str	r0, [sp, #12]
 8018542:	f7ff fa0d 	bl	8017960 <getDeviceUptime_sec>
 8018546:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 801854a:	9000      	str	r0, [sp, #0]
 801854c:	9905      	ldr	r1, [sp, #20]
 801854e:	481b      	ldr	r0, [pc, #108]	; (80185bc <debugSerial_dataTransfer+0x9c>)
 8018550:	f017 fd4a 	bl	802ffe8 <iprintf>
    else
        printf(" [%02d:%02d:%02d]", getDeviceUptime_hour(), getDeviceUptime_min(), getDeviceUptime_sec());
//#endif
    
    if((type == SEG_DEBUG_S2E) || (type == SEG_DEBUG_E2S))
 8018554:	1eb3      	subs	r3, r6, #2
 8018556:	2b01      	cmp	r3, #1
 8018558:	d913      	bls.n	8018582 <debugSerial_dataTransfer+0x62>
    uint16_t bytecnt = 0;
 801855a:	2000      	movs	r0, #0
        for(bytecnt = 0; bytecnt < size; bytecnt++) printf("%02X ", buf[bytecnt]);
        printf("\r\n");
    }
    
    return bytecnt;
}
 801855c:	b007      	add	sp, #28
 801855e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        printf(" [%02d:%02d:%02d]", getDeviceUptime_hour(), getDeviceUptime_min(), getDeviceUptime_sec());
 8018560:	f7ff f9f2 	bl	8017948 <getDeviceUptime_hour>
 8018564:	9004      	str	r0, [sp, #16]
 8018566:	f7ff f9f5 	bl	8017954 <getDeviceUptime_min>
 801856a:	9003      	str	r0, [sp, #12]
 801856c:	f7ff f9f8 	bl	8017960 <getDeviceUptime_sec>
 8018570:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8018574:	4603      	mov	r3, r0
 8018576:	4812      	ldr	r0, [pc, #72]	; (80185c0 <debugSerial_dataTransfer+0xa0>)
 8018578:	f017 fd36 	bl	802ffe8 <iprintf>
    if((type == SEG_DEBUG_S2E) || (type == SEG_DEBUG_E2S))
 801857c:	1eb3      	subs	r3, r6, #2
 801857e:	2b01      	cmp	r3, #1
 8018580:	d8eb      	bhi.n	801855a <debugSerial_dataTransfer+0x3a>
        printf("[%s][%04d] ", (type == SEG_DEBUG_S2E)?"S2E":"E2S", size);
 8018582:	4910      	ldr	r1, [pc, #64]	; (80185c4 <debugSerial_dataTransfer+0xa4>)
 8018584:	4b10      	ldr	r3, [pc, #64]	; (80185c8 <debugSerial_dataTransfer+0xa8>)
 8018586:	462a      	mov	r2, r5
 8018588:	2e02      	cmp	r6, #2
 801858a:	bf18      	it	ne
 801858c:	4619      	movne	r1, r3
 801858e:	480f      	ldr	r0, [pc, #60]	; (80185cc <debugSerial_dataTransfer+0xac>)
 8018590:	f017 fd2a 	bl	802ffe8 <iprintf>
        for(bytecnt = 0; bytecnt < size; bytecnt++) printf("%02X ", buf[bytecnt]);
 8018594:	b15d      	cbz	r5, 80185ae <debugSerial_dataTransfer+0x8e>
 8018596:	1e6e      	subs	r6, r5, #1
 8018598:	4f0d      	ldr	r7, [pc, #52]	; (80185d0 <debugSerial_dataTransfer+0xb0>)
 801859a:	fa14 f686 	uxtah	r6, r4, r6
 801859e:	3c01      	subs	r4, #1
 80185a0:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80185a4:	4638      	mov	r0, r7
 80185a6:	f017 fd1f 	bl	802ffe8 <iprintf>
 80185aa:	42b4      	cmp	r4, r6
 80185ac:	d1f8      	bne.n	80185a0 <debugSerial_dataTransfer+0x80>
        printf("\r\n");
 80185ae:	4809      	ldr	r0, [pc, #36]	; (80185d4 <debugSerial_dataTransfer+0xb4>)
 80185b0:	f017 fda0 	bl	80300f4 <puts>
 80185b4:	4628      	mov	r0, r5
}
 80185b6:	b007      	add	sp, #28
 80185b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80185ba:	bf00      	nop
 80185bc:	080333cc 	.word	0x080333cc
 80185c0:	080333e4 	.word	0x080333e4
 80185c4:	080333c4 	.word	0x080333c4
 80185c8:	080333c8 	.word	0x080333c8
 80185cc:	080333f8 	.word	0x080333f8
 80185d0:	08033404 	.word	0x08033404
 80185d4:	08033678 	.word	0x08033678

080185d8 <uart_to_ether>:
{
 80185d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185dc:	b086      	sub	sp, #24
 80185de:	460d      	mov	r5, r1
 80185e0:	4604      	mov	r4, r0
    struct __network_connection *network_connection = (struct __network_connection *)get_DevConfig_pointer()->network_connection;
 80185e2:	f7fb fd27 	bl	8014034 <get_DevConfig_pointer>
 80185e6:	4606      	mov	r6, r0
    struct __serial_common *serial_common = (struct __serial_common *)&get_DevConfig_pointer()->serial_common;
 80185e8:	f7fb fd24 	bl	8014034 <get_DevConfig_pointer>
 80185ec:	4607      	mov	r7, r0
    struct __tcp_option *tcp_option = (struct __tcp_option *)get_DevConfig_pointer()->tcp_option;
 80185ee:	f7fb fd21 	bl	8014034 <get_DevConfig_pointer>
 80185f2:	4680      	mov	r8, r0
    struct __device_option *device_option = (struct __device_option *)&(get_DevConfig_pointer()->device_option);
 80185f4:	f7fb fd1e 	bl	8014034 <get_DevConfig_pointer>
    struct __mqtt_option *mqtt_option = (struct __mqtt_option *)&(get_DevConfig_pointer()->mqtt_option);
 80185f8:	f7fb fd1c 	bl	8014034 <get_DevConfig_pointer>
 80185fc:	4681      	mov	r9, r0
    len = get_serial_data(uartNum);
 80185fe:	4620      	mov	r0, r4
 8018600:	f7ff fd3e 	bl	8018080 <get_serial_data>
    if(len > 0)
 8018604:	b928      	cbnz	r0, 8018612 <uart_to_ether+0x3a>
    inactivity_time[channel] = 0;
 8018606:	2200      	movs	r2, #0
 8018608:	4b7d      	ldr	r3, [pc, #500]	; (8018800 <uart_to_ether+0x228>)
 801860a:	801a      	strh	r2, [r3, #0]
}
 801860c:	b006      	add	sp, #24
 801860e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(seg_byte_cnt[channel][dir] < SEG_MEGABYTE)
 8018612:	f8df a230 	ldr.w	sl, [pc, #560]	; 8018844 <uart_to_ether+0x26c>
 8018616:	4604      	mov	r4, r0
 8018618:	f8da 3000 	ldr.w	r3, [sl]
 801861c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8018620:	f080 80a3 	bcs.w	801876a <uart_to_ether+0x192>
            seg_byte_cnt[channel][dir] += len;
 8018624:	f8da 3000 	ldr.w	r3, [sl]
 8018628:	4403      	add	r3, r0
 801862a:	f8ca 3000 	str.w	r3, [sl]
        if((serial_common->serial_debug_en == SEG_DEBUG_S2E) || (serial_common->serial_debug_en == SEG_DEBUG_ALL))
 801862e:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 8018632:	2b02      	cmp	r3, #2
 8018634:	f000 8093 	beq.w	801875e <uart_to_ether+0x186>
 8018638:	2b04      	cmp	r3, #4
 801863a:	f000 8090 	beq.w	801875e <uart_to_ether+0x186>
        switch(getSn_SR(sock))
 801863e:	0228      	lsls	r0, r5, #8
 8018640:	f200 4003 	addw	r0, r0, #1027	; 0x403
 8018644:	f002 fa94 	bl	801ab70 <WIZCHIP_READ>
 8018648:	3814      	subs	r0, #20
 801864a:	280e      	cmp	r0, #14
 801864c:	d8db      	bhi.n	8018606 <uart_to_ether+0x2e>
 801864e:	a301      	add	r3, pc, #4	; (adr r3, 8018654 <uart_to_ether+0x7c>)
 8018650:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8018654:	080186f3 	.word	0x080186f3
 8018658:	08018607 	.word	0x08018607
 801865c:	08018607 	.word	0x08018607
 8018660:	08018691 	.word	0x08018691
 8018664:	08018607 	.word	0x08018607
 8018668:	08018607 	.word	0x08018607
 801866c:	08018607 	.word	0x08018607
 8018670:	08018607 	.word	0x08018607
 8018674:	08018691 	.word	0x08018691
 8018678:	08018607 	.word	0x08018607
 801867c:	08018607 	.word	0x08018607
 8018680:	08018607 	.word	0x08018607
 8018684:	08018607 	.word	0x08018607
 8018688:	08018607 	.word	0x08018607
 801868c:	080186fb 	.word	0x080186fb
                if(flag_connect_pw_auth[channel] == SEG_ENABLE)
 8018690:	4b5c      	ldr	r3, [pc, #368]	; (8018804 <uart_to_ether+0x22c>)
 8018692:	781b      	ldrb	r3, [r3, #0]
 8018694:	2b01      	cmp	r3, #1
 8018696:	d1b6      	bne.n	8018606 <uart_to_ether+0x2e>
                    if (network_connection->working_mode == SSL_TCP_CLIENT_MODE)
 8018698:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
 801869c:	2b04      	cmp	r3, #4
 801869e:	f000 80a5 	beq.w	80187ec <uart_to_ether+0x214>
                    else if (network_connection->working_mode == MQTT_CLIENT_MODE || network_connection->working_mode == MQTTS_CLIENT_MODE)
 80186a2:	3b05      	subs	r3, #5
 80186a4:	2b01      	cmp	r3, #1
 80186a6:	d968      	bls.n	801877a <uart_to_ether+0x1a2>
                        sent_len = (int16_t)send(sock, g_send_buf, len);
 80186a8:	4628      	mov	r0, r5
 80186aa:	4622      	mov	r2, r4
 80186ac:	4956      	ldr	r1, [pc, #344]	; (8018808 <uart_to_ether+0x230>)
 80186ae:	f002 ff33 	bl	801b518 <send>
 80186b2:	b200      	sxth	r0, r0
                    if(sent_len > 0) u2e_size[channel]-=sent_len;
 80186b4:	2800      	cmp	r0, #0
 80186b6:	dd03      	ble.n	80186c0 <uart_to_ether+0xe8>
 80186b8:	4a54      	ldr	r2, [pc, #336]	; (801880c <uart_to_ether+0x234>)
 80186ba:	8813      	ldrh	r3, [r2, #0]
 80186bc:	1a18      	subs	r0, r3, r0
 80186be:	8010      	strh	r0, [r2, #0]
        if(seg_byte_cnt[channel][dir] < SEG_MEGABYTE)
 80186c0:	f8da 3004 	ldr.w	r3, [sl, #4]
 80186c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80186c8:	d27e      	bcs.n	80187c8 <uart_to_ether+0x1f0>
            seg_byte_cnt[channel][dir] += len;
 80186ca:	f8da 3004 	ldr.w	r3, [sl, #4]
 80186ce:	441c      	add	r4, r3
 80186d0:	f8ca 4004 	str.w	r4, [sl, #4]
                    if(tcp_option->keepalive_en == ENABLE)
 80186d4:	f898 30d1 	ldrb.w	r3, [r8, #209]	; 0xd1
 80186d8:	2b01      	cmp	r3, #1
 80186da:	d194      	bne.n	8018606 <uart_to_ether+0x2e>
                        if(flag_sent_first_keepalive[channel] == DISABLE)
 80186dc:	4a4c      	ldr	r2, [pc, #304]	; (8018810 <uart_to_ether+0x238>)
 80186de:	7811      	ldrb	r1, [r2, #0]
 80186e0:	2900      	cmp	r1, #0
 80186e2:	f040 808a 	bne.w	80187fa <uart_to_ether+0x222>
                            enable_keepalive_timer[channel] = SEG_ENABLE;
 80186e6:	4a4b      	ldr	r2, [pc, #300]	; (8018814 <uart_to_ether+0x23c>)
 80186e8:	7013      	strb	r3, [r2, #0]
                        keepalive_time[channel] = 0;
 80186ea:	2200      	movs	r2, #0
 80186ec:	4b4a      	ldr	r3, [pc, #296]	; (8018818 <uart_to_ether+0x240>)
 80186ee:	801a      	strh	r2, [r3, #0]
 80186f0:	e789      	b.n	8018606 <uart_to_ether+0x2e>
                u2e_size[channel] = 0;
 80186f2:	2200      	movs	r2, #0
 80186f4:	4b45      	ldr	r3, [pc, #276]	; (801880c <uart_to_ether+0x234>)
 80186f6:	801a      	strh	r2, [r3, #0]
                return;
 80186f8:	e788      	b.n	801860c <uart_to_ether+0x34>
                if((network_connection[channel].remote_ip[0] == 0x00) &&
 80186fa:	f896 3041 	ldrb.w	r3, [r6, #65]	; 0x41
 80186fe:	b9db      	cbnz	r3, 8018738 <uart_to_ether+0x160>
 8018700:	f896 3042 	ldrb.w	r3, [r6, #66]	; 0x42
 8018704:	b9c3      	cbnz	r3, 8018738 <uart_to_ether+0x160>
                   (network_connection[channel].remote_ip[1] == 0x00) &&
 8018706:	f896 3043 	ldrb.w	r3, [r6, #67]	; 0x43
 801870a:	b9ab      	cbnz	r3, 8018738 <uart_to_ether+0x160>
                   (network_connection[channel].remote_ip[2] == 0x00) &&
 801870c:	f896 3044 	ldrb.w	r3, [r6, #68]	; 0x44
 8018710:	b993      	cbnz	r3, 8018738 <uart_to_ether+0x160>
                    if((peerip[channel][0] == 0x00) && (peerip[channel][1] == 0x00) && (peerip[channel][2] == 0x00) && (peerip[channel][3] == 0x00))
 8018712:	4b42      	ldr	r3, [pc, #264]	; (801881c <uart_to_ether+0x244>)
 8018714:	7859      	ldrb	r1, [r3, #1]
 8018716:	781a      	ldrb	r2, [r3, #0]
 8018718:	7898      	ldrb	r0, [r3, #2]
 801871a:	430a      	orrs	r2, r1
 801871c:	78d9      	ldrb	r1, [r3, #3]
 801871e:	4302      	orrs	r2, r0
 8018720:	430a      	orrs	r2, r1
 8018722:	d159      	bne.n	80187d8 <uart_to_ether+0x200>
                        if(serial_common->serial_debug_en)
 8018724:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 8018728:	2b00      	cmp	r3, #0
 801872a:	f43f af6c 	beq.w	8018606 <uart_to_ether+0x2e>
                            PRT_SEG(" > SEG:UDP_MODE:DATA SEND FAILED - UDP Peer IP/Port required (0.0.0.0)\r\n");
 801872e:	493c      	ldr	r1, [pc, #240]	; (8018820 <uart_to_ether+0x248>)
 8018730:	483c      	ldr	r0, [pc, #240]	; (8018824 <uart_to_ether+0x24c>)
 8018732:	f7ff fb87 	bl	8017e44 <WIZ_SECURE_printf>
                if(sent_len > 0) u2e_size[channel]-=sent_len;
 8018736:	e766      	b.n	8018606 <uart_to_ether+0x2e>
                    sent_len = (int16_t)sendto(sock, g_send_buf, len, network_connection[channel].remote_ip, network_connection[channel].remote_port);
 8018738:	f8b6 303f 	ldrh.w	r3, [r6, #63]	; 0x3f
 801873c:	4622      	mov	r2, r4
 801873e:	9300      	str	r3, [sp, #0]
 8018740:	4628      	mov	r0, r5
 8018742:	4931      	ldr	r1, [pc, #196]	; (8018808 <uart_to_ether+0x230>)
 8018744:	f106 0341 	add.w	r3, r6, #65	; 0x41
 8018748:	f003 f8bc 	bl	801b8c4 <sendto>
 801874c:	b200      	sxth	r0, r0
                if(sent_len > 0) u2e_size[channel]-=sent_len;
 801874e:	2800      	cmp	r0, #0
 8018750:	f77f af59 	ble.w	8018606 <uart_to_ether+0x2e>
 8018754:	4a2d      	ldr	r2, [pc, #180]	; (801880c <uart_to_ether+0x234>)
 8018756:	8813      	ldrh	r3, [r2, #0]
 8018758:	1a18      	subs	r0, r3, r0
 801875a:	8010      	strh	r0, [r2, #0]
 801875c:	e753      	b.n	8018606 <uart_to_ether+0x2e>
            debugSerial_dataTransfer(g_send_buf, len, SEG_DEBUG_S2E);
 801875e:	2202      	movs	r2, #2
 8018760:	4621      	mov	r1, r4
 8018762:	4829      	ldr	r0, [pc, #164]	; (8018808 <uart_to_ether+0x230>)
 8018764:	f7ff fedc 	bl	8018520 <debugSerial_dataTransfer>
 8018768:	e769      	b.n	801863e <uart_to_ether+0x66>
            seg_byte_cnt[channel][dir] = 0;
 801876a:	2100      	movs	r1, #0
            seg_mega_cnt[channel][dir]++;
 801876c:	4a2e      	ldr	r2, [pc, #184]	; (8018828 <uart_to_ether+0x250>)
 801876e:	6813      	ldr	r3, [r2, #0]
 8018770:	3301      	adds	r3, #1
 8018772:	6013      	str	r3, [r2, #0]
            seg_byte_cnt[channel][dir] = 0;
 8018774:	f8ca 1000 	str.w	r1, [sl]
 8018778:	e759      	b.n	801862e <uart_to_ether+0x56>
    MQTTMessage msg = {qos, 0, 0, 0, NULL, 0};
 801877a:	2300      	movs	r3, #0
 801877c:	f899 64a0 	ldrb.w	r6, [r9, #1184]	; 0x4a0
    msg.payload = (char *)pub_data;
 8018780:	4d21      	ldr	r5, [pc, #132]	; (8018808 <uart_to_ether+0x230>)
    PRT_SEG("MQTT PUB Len = %d\r\n", msg.payloadlen);
 8018782:	4622      	mov	r2, r4
 8018784:	4929      	ldr	r1, [pc, #164]	; (801882c <uart_to_ether+0x254>)
 8018786:	482a      	ldr	r0, [pc, #168]	; (8018830 <uart_to_ether+0x258>)
    MQTTMessage msg = {qos, 0, 0, 0, NULL, 0};
 8018788:	f88d 3009 	strb.w	r3, [sp, #9]
 801878c:	f88d 300a 	strb.w	r3, [sp, #10]
 8018790:	f8ad 300c 	strh.w	r3, [sp, #12]
    msg.payloadlen = pub_data_len;
 8018794:	9405      	str	r4, [sp, #20]
    MQTTMessage msg = {qos, 0, 0, 0, NULL, 0};
 8018796:	f88d 6008 	strb.w	r6, [sp, #8]
    msg.payload = (char *)pub_data;
 801879a:	9504      	str	r5, [sp, #16]
    PRT_SEG("MQTT PUB Len = %d\r\n", msg.payloadlen);
 801879c:	f7ff fb52 	bl	8017e44 <WIZ_SECURE_printf>
    PRT_SEG("MQTT PUB Data = %.*s\r\n", msg.payloadlen, (char *)msg.payload);
 80187a0:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80187a4:	4921      	ldr	r1, [pc, #132]	; (801882c <uart_to_ether+0x254>)
 80187a6:	4823      	ldr	r0, [pc, #140]	; (8018834 <uart_to_ether+0x25c>)
 80187a8:	f7ff fb4c 	bl	8017e44 <WIZ_SECURE_printf>
    if(MQTTPublish(mqtt_c, (char *)pub_topic, &msg) == FAILURE)
 80187ac:	4822      	ldr	r0, [pc, #136]	; (8018838 <uart_to_ether+0x260>)
 80187ae:	f509 718e 	add.w	r1, r9, #284	; 0x11c
 80187b2:	aa02      	add	r2, sp, #8
 80187b4:	f005 f930 	bl	801da18 <MQTTPublish>
    return pub_data_len;
 80187b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80187bc:	bf14      	ite	ne
 80187be:	4620      	movne	r0, r4
 80187c0:	f04f 30ff 	moveq.w	r0, #4294967295
                        sent_len = wizchip_mqtt_publish(&mqtt_c, mqtt_option->pub_topic, mqtt_option->qos, g_send_buf, len);
 80187c4:	b200      	sxth	r0, r0
 80187c6:	e775      	b.n	80186b4 <uart_to_ether+0xdc>
            seg_byte_cnt[channel][dir] = 0;
 80187c8:	2100      	movs	r1, #0
            seg_mega_cnt[channel][dir]++;
 80187ca:	4a17      	ldr	r2, [pc, #92]	; (8018828 <uart_to_ether+0x250>)
 80187cc:	6853      	ldr	r3, [r2, #4]
 80187ce:	3301      	adds	r3, #1
 80187d0:	6053      	str	r3, [r2, #4]
            seg_byte_cnt[channel][dir] = 0;
 80187d2:	f8ca 1004 	str.w	r1, [sl, #4]
 80187d6:	e77d      	b.n	80186d4 <uart_to_ether+0xfc>
                        sent_len = (int16_t)sendto(sock, g_send_buf, len, peerip[channel], peerport[channel]);
 80187d8:	4a18      	ldr	r2, [pc, #96]	; (801883c <uart_to_ether+0x264>)
 80187da:	4628      	mov	r0, r5
 80187dc:	8811      	ldrh	r1, [r2, #0]
 80187de:	4622      	mov	r2, r4
 80187e0:	9100      	str	r1, [sp, #0]
 80187e2:	4909      	ldr	r1, [pc, #36]	; (8018808 <uart_to_ether+0x230>)
 80187e4:	f003 f86e 	bl	801b8c4 <sendto>
 80187e8:	b200      	sxth	r0, r0
 80187ea:	e7b0      	b.n	801874e <uart_to_ether+0x176>
                        sent_len = wiz_tls_write(&s2e_tlsContext, g_send_buf, len);
 80187ec:	4622      	mov	r2, r4
 80187ee:	4906      	ldr	r1, [pc, #24]	; (8018808 <uart_to_ether+0x230>)
 80187f0:	4813      	ldr	r0, [pc, #76]	; (8018840 <uart_to_ether+0x268>)
 80187f2:	f006 f9fd 	bl	801ebf0 <wiz_tls_write>
 80187f6:	b200      	sxth	r0, r0
 80187f8:	e75c      	b.n	80186b4 <uart_to_ether+0xdc>
                            flag_sent_first_keepalive[channel] = SEG_DISABLE;
 80187fa:	2300      	movs	r3, #0
 80187fc:	7013      	strb	r3, [r2, #0]
 80187fe:	e774      	b.n	80186ea <uart_to_ether+0x112>
 8018800:	2001991c 	.word	0x2001991c
 8018804:	20019904 	.word	0x20019904
 8018808:	2001d5b8 	.word	0x2001d5b8
 801880c:	20019960 	.word	0x20019960
 8018810:	2001990c 	.word	0x2001990c
 8018814:	200198f8 	.word	0x200198f8
 8018818:	20019924 	.word	0x20019924
 801881c:	2001992c 	.word	0x2001992c
 8018820:	080339ec 	.word	0x080339ec
 8018824:	0803340c 	.word	0x0803340c
 8018828:	20019948 	.word	0x20019948
 801882c:	080339fc 	.word	0x080339fc
 8018830:	08033380 	.word	0x08033380
 8018834:	080333a0 	.word	0x080333a0
 8018838:	200199a8 	.word	0x200199a8
 801883c:	20019930 	.word	0x20019930
 8018840:	2001fe58 	.word	0x2001fe58
 8018844:	20019938 	.word	0x20019938

08018848 <proc_SEG_mqtt_client>:
{
 8018848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801884c:	b08d      	sub	sp, #52	; 0x34
 801884e:	460c      	mov	r4, r1
 8018850:	4681      	mov	r9, r0
    struct __tcp_option *tcp_option = (struct __tcp_option *)get_DevConfig_pointer()->tcp_option;
 8018852:	f7fb fbef 	bl	8014034 <get_DevConfig_pointer>
 8018856:	4605      	mov	r5, r0
    struct __network_connection *network_connection = (struct __network_connection *)get_DevConfig_pointer()->network_connection;
 8018858:	f7fb fbec 	bl	8014034 <get_DevConfig_pointer>
 801885c:	4606      	mov	r6, r0
    struct __serial_data_packing *serial_data_packing = (struct __serial_data_packing *)get_DevConfig_pointer()->serial_data_packing;
 801885e:	f7fb fbe9 	bl	8014034 <get_DevConfig_pointer>
 8018862:	9006      	str	r0, [sp, #24]
    struct __serial_common *serial_common = (struct __serial_common *)&get_DevConfig_pointer()->serial_common;
 8018864:	f7fb fbe6 	bl	8014034 <get_DevConfig_pointer>
 8018868:	4680      	mov	r8, r0
    struct __serial_command *serial_command = (struct __serial_command *)&get_DevConfig_pointer()->serial_command;
 801886a:	f7fb fbe3 	bl	8014034 <get_DevConfig_pointer>
 801886e:	9005      	str	r0, [sp, #20]
    struct __device_option *device_option = (struct __device_option *)&(get_DevConfig_pointer()->device_option);
 8018870:	f7fb fbe0 	bl	8014034 <get_DevConfig_pointer>
    struct __mqtt_option *mqtt_option = (struct __mqtt_option *)&(get_DevConfig_pointer()->mqtt_option);
 8018874:	f7fb fbde 	bl	8014034 <get_DevConfig_pointer>
 8018878:	4607      	mov	r7, r0
    struct __ssl_option *ssl_option = (struct __ssl_option *)&(get_DevConfig_pointer()->ssl_option);
 801887a:	f7fb fbdb 	bl	8014034 <get_DevConfig_pointer>
    uint8_t destip[4] = {0, };
 801887e:	2300      	movs	r3, #0
    struct __ssl_option *ssl_option = (struct __ssl_option *)&(get_DevConfig_pointer()->ssl_option);
 8018880:	9007      	str	r0, [sp, #28]
    uint8_t destip[4] = {0, };
 8018882:	930a      	str	r3, [sp, #40]	; 0x28
    uint16_t destport = 0;
 8018884:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    struct __serial_option *serial_option = (struct __serial_option *)&(get_DevConfig_pointer()->serial_option);
 8018888:	f7fb fbd4 	bl	8014034 <get_DevConfig_pointer>
 801888c:	4602      	mov	r2, r0
    uint8_t state = getSn_SR(sock);
 801888e:	1d23      	adds	r3, r4, #4
 8018890:	ea4f 2a03 	mov.w	sl, r3, lsl #8
 8018894:	f10a 0003 	add.w	r0, sl, #3
    return serial_option[channel].protocol;
 8018898:	f892 b0e9 	ldrb.w	fp, [r2, #233]	; 0xe9
    uint8_t state = getSn_SR(sock);
 801889c:	f002 f968 	bl	801ab70 <WIZCHIP_READ>
    switch(state)
 80188a0:	281c      	cmp	r0, #28
 80188a2:	d87e      	bhi.n	80189a2 <proc_SEG_mqtt_client+0x15a>
 80188a4:	e8df f010 	tbh	[pc, r0, lsl #1]
 80188a8:	007d0080 	.word	0x007d0080
 80188ac:	007d007d 	.word	0x007d007d
 80188b0:	007d007d 	.word	0x007d007d
 80188b4:	007d007d 	.word	0x007d007d
 80188b8:	007d007d 	.word	0x007d007d
 80188bc:	007d007d 	.word	0x007d007d
 80188c0:	007d007d 	.word	0x007d007d
 80188c4:	007d007d 	.word	0x007d007d
 80188c8:	007d007d 	.word	0x007d007d
 80188cc:	0134007d 	.word	0x0134007d
 80188d0:	007d007d 	.word	0x007d007d
 80188d4:	00e2007d 	.word	0x00e2007d
 80188d8:	007d0080 	.word	0x007d0080
 80188dc:	007d007d 	.word	0x007d007d
 80188e0:	00d8      	.short	0x00d8
    else if((srcip[0] == 192) && (srcip[1] == 168)) // local IP address == Class C private IP
 80188e2:	2bc0      	cmp	r3, #192	; 0xc0
 80188e4:	f000 82b1 	beq.w	8018e4a <proc_SEG_mqtt_client+0x602>
                if (network_connection->working_mode == MQTTS_CLIENT_MODE)
 80188e8:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
 80188ec:	2b06      	cmp	r3, #6
 80188ee:	f000 8293 	beq.w	8018e18 <proc_SEG_mqtt_client+0x5d0>
                    wizchip_mqtt_tls_enable(WIZ_TLS_DISABLED);
 80188f2:	2000      	movs	r0, #0
 80188f4:	f005 f9ac 	bl	801dc50 <wizchip_mqtt_tls_enable>
                    NewNetwork(&mqtt_n, sock, channel);
 80188f8:	4621      	mov	r1, r4
 80188fa:	2200      	movs	r2, #0
 80188fc:	48a6      	ldr	r0, [pc, #664]	; (8018b98 <proc_SEG_mqtt_client+0x350>)
 80188fe:	f005 f9e1 	bl	801dcc4 <NewNetwork>
 8018902:	f106 0541 	add.w	r5, r6, #65	; 0x41
                MQTTClientInit(&mqtt_c, &mqtt_n, MQTT_TIMEOUT_MS, g_send_mqtt_buf, DATA_BUF_SIZE, g_recv_buf, DATA_BUF_SIZE);
 8018906:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801890a:	4aa4      	ldr	r2, [pc, #656]	; (8018b9c <proc_SEG_mqtt_client+0x354>)
                mqtt_data.username.cstring = mqtt_option->user_name;
 801890c:	4ca4      	ldr	r4, [pc, #656]	; (8018ba0 <proc_SEG_mqtt_client+0x358>)
                MQTTClientInit(&mqtt_c, &mqtt_n, MQTT_TIMEOUT_MS, g_send_mqtt_buf, DATA_BUF_SIZE, g_recv_buf, DATA_BUF_SIZE);
 801890e:	e9cd 3200 	strd	r3, r2, [sp]
 8018912:	49a1      	ldr	r1, [pc, #644]	; (8018b98 <proc_SEG_mqtt_client+0x350>)
 8018914:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8018918:	48a2      	ldr	r0, [pc, #648]	; (8018ba4 <proc_SEG_mqtt_client+0x35c>)
 801891a:	9302      	str	r3, [sp, #8]
 801891c:	4ba2      	ldr	r3, [pc, #648]	; (8018ba8 <proc_SEG_mqtt_client+0x360>)
 801891e:	f004 fd79 	bl	801d414 <MQTTClientInit>
                mqtt_data.username.cstring = mqtt_option->user_name;
 8018922:	f507 7147 	add.w	r1, r7, #796	; 0x31c
                mqtt_data.clientID.cstring = mqtt_option->client_id;
 8018926:	f507 7267 	add.w	r2, r7, #924	; 0x39c
                mqtt_data.password.cstring = mqtt_option->password;
 801892a:	f207 431c 	addw	r3, r7, #1052	; 0x41c
                mqtt_data.username.cstring = mqtt_option->user_name;
 801892e:	6421      	str	r1, [r4, #64]	; 0x40
                mqtt_data.clientID.cstring = mqtt_option->client_id;
 8018930:	60e2      	str	r2, [r4, #12]
                mqtt_data.password.cstring = mqtt_option->password;
 8018932:	64e3      	str	r3, [r4, #76]	; 0x4c
                ret = ConnectNetwork(&mqtt_n, network_connection[channel].remote_ip, network_connection[channel].remote_port);
 8018934:	f8b6 203f 	ldrh.w	r2, [r6, #63]	; 0x3f
 8018938:	4629      	mov	r1, r5
 801893a:	4897      	ldr	r0, [pc, #604]	; (8018b98 <proc_SEG_mqtt_client+0x350>)
 801893c:	f005 f9fe 	bl	801dd3c <ConnectNetwork>
                if (ret < 0)
 8018940:	1e02      	subs	r2, r0, #0
 8018942:	f2c0 8261 	blt.w	8018e08 <proc_SEG_mqtt_client+0x5c0>
                ret = MQTTConnect(&mqtt_c, &mqtt_data); 
 8018946:	4621      	mov	r1, r4
 8018948:	4896      	ldr	r0, [pc, #600]	; (8018ba4 <proc_SEG_mqtt_client+0x35c>)
 801894a:	f004 ff49 	bl	801d7e0 <MQTTConnect>
                if (ret < 0)
 801894e:	1e02      	subs	r2, r0, #0
                    PRT_SEG(" > SEG:MQTT_CLIENT_MODE:MQTTConnect Err %d\r\n", ret);
 8018950:	4996      	ldr	r1, [pc, #600]	; (8018bac <proc_SEG_mqtt_client+0x364>)
                if (ret < 0)
 8018952:	f2c0 829f 	blt.w	8018e94 <proc_SEG_mqtt_client+0x64c>
                PRT_SEG(" > SEG:MQTT_CLIENT_MODE:MQTT_CONNECTION\r\n");
 8018956:	4896      	ldr	r0, [pc, #600]	; (8018bb0 <proc_SEG_mqtt_client+0x368>)
 8018958:	f7ff fa74 	bl	8017e44 <WIZ_SECURE_printf>
                if (mqtt_option->sub_topic_0[0] != 0 && mqtt_option->sub_topic_0[0] != 0xFF)
 801895c:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 8018960:	3b01      	subs	r3, #1
 8018962:	b2db      	uxtb	r3, r3
 8018964:	2bfd      	cmp	r3, #253	; 0xfd
 8018966:	f240 82ab 	bls.w	8018ec0 <proc_SEG_mqtt_client+0x678>
                if (mqtt_option->sub_topic_1[0] != 0 && mqtt_option->sub_topic_1[0] != 0xFF)
 801896a:	f897 321c 	ldrb.w	r3, [r7, #540]	; 0x21c
 801896e:	3b01      	subs	r3, #1
 8018970:	b2db      	uxtb	r3, r3
 8018972:	2bfd      	cmp	r3, #253	; 0xfd
 8018974:	f240 82b7 	bls.w	8018ee6 <proc_SEG_mqtt_client+0x69e>
                if (mqtt_option->sub_topic_2[0] != 0 && mqtt_option->sub_topic_2[0] != 0xFF)
 8018978:	f897 329c 	ldrb.w	r3, [r7, #668]	; 0x29c
 801897c:	3b01      	subs	r3, #1
 801897e:	b2db      	uxtb	r3, r3
 8018980:	2bfd      	cmp	r3, #253	; 0xfd
 8018982:	d80a      	bhi.n	801899a <proc_SEG_mqtt_client+0x152>
					ret = MQTTSubscribe(&mqtt_c, (char *)mqtt_option->sub_topic_2, mqtt_option->qos, mqtt_subscribeMessageHandler);
 8018984:	f897 24a0 	ldrb.w	r2, [r7, #1184]	; 0x4a0
 8018988:	4b8a      	ldr	r3, [pc, #552]	; (8018bb4 <proc_SEG_mqtt_client+0x36c>)
 801898a:	4886      	ldr	r0, [pc, #536]	; (8018ba4 <proc_SEG_mqtt_client+0x35c>)
 801898c:	f507 7127 	add.w	r1, r7, #668	; 0x29c
 8018990:	f004 ff96 	bl	801d8c0 <MQTTSubscribe>
					if (ret < 0)
 8018994:	1e02      	subs	r2, r0, #0
 8018996:	f2c0 829e 	blt.w	8018ed6 <proc_SEG_mqtt_client+0x68e>
                PRT_SEG(" > SEG:MQTT_CLIENT_MODE:MQTTSubscribed\r\n");
 801899a:	4984      	ldr	r1, [pc, #528]	; (8018bac <proc_SEG_mqtt_client+0x364>)
 801899c:	4886      	ldr	r0, [pc, #536]	; (8018bb8 <proc_SEG_mqtt_client+0x370>)
 801899e:	f7ff fa51 	bl	8017e44 <WIZ_SECURE_printf>
}
 80189a2:	b00d      	add	sp, #52	; 0x34
 80189a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    struct __network_connection *network_connection = (struct __network_connection *)get_DevConfig_pointer()->network_connection;
 80189a8:	f7fb fb44 	bl	8014034 <get_DevConfig_pointer>
            network_connection[channel].working_state = ST_OPEN;
 80189ac:	2301      	movs	r3, #1
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, OFF); // Status I/O pin to high
 80189ae:	2200      	movs	r2, #0
            network_connection[channel].working_state = ST_OPEN;
 80189b0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, OFF); // Status I/O pin to high
 80189b4:	4611      	mov	r1, r2
 80189b6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80189ba:	f7fe fda5 	bl	8017508 <set_connection_status_io>
    enable_inactivity_timer[channel] = SEG_DISABLE;
 80189be:	2300      	movs	r3, #0
    inactivity_time[channel] = 0;
 80189c0:	497e      	ldr	r1, [pc, #504]	; (8018bbc <proc_SEG_mqtt_client+0x374>)
    serial_input_time[channel] = 0;
 80189c2:	4a7f      	ldr	r2, [pc, #508]	; (8018bc0 <proc_SEG_mqtt_client+0x378>)
    inactivity_time[channel] = 0;
 80189c4:	800b      	strh	r3, [r1, #0]
    keepalive_time[channel] = 0;
 80189c6:	487f      	ldr	r0, [pc, #508]	; (8018bc4 <proc_SEG_mqtt_client+0x37c>)
    serial_input_time[channel] = 0;
 80189c8:	8013      	strh	r3, [r2, #0]
    enable_inactivity_timer[channel] = SEG_DISABLE;
 80189ca:	497f      	ldr	r1, [pc, #508]	; (8018bc8 <proc_SEG_mqtt_client+0x380>)
    enable_serial_input_timer[channel] = SEG_DISABLE;
 80189cc:	4a7f      	ldr	r2, [pc, #508]	; (8018bcc <proc_SEG_mqtt_client+0x384>)
    keepalive_time[channel] = 0;
 80189ce:	8003      	strh	r3, [r0, #0]
    enable_inactivity_timer[channel] = SEG_DISABLE;
 80189d0:	700b      	strb	r3, [r1, #0]
    enable_serial_input_timer[channel] = SEG_DISABLE;
 80189d2:	7013      	strb	r3, [r2, #0]
    enable_keepalive_timer[channel] = SEG_DISABLE;
 80189d4:	487e      	ldr	r0, [pc, #504]	; (8018bd0 <proc_SEG_mqtt_client+0x388>)
    enable_connection_auth_timer[channel] = SEG_DISABLE;
 80189d6:	497f      	ldr	r1, [pc, #508]	; (8018bd4 <proc_SEG_mqtt_client+0x38c>)
    flag_serial_input_time_elapse[channel] = SEG_DISABLE;
 80189d8:	4a7f      	ldr	r2, [pc, #508]	; (8018bd8 <proc_SEG_mqtt_client+0x390>)
    enable_keepalive_timer[channel] = SEG_DISABLE;
 80189da:	7003      	strb	r3, [r0, #0]
    enable_connection_auth_timer[channel] = SEG_DISABLE;
 80189dc:	700b      	strb	r3, [r1, #0]
    flag_sent_keepalive[channel] = SEG_DISABLE;
 80189de:	487f      	ldr	r0, [pc, #508]	; (8018bdc <proc_SEG_mqtt_client+0x394>)
    flag_connect_pw_auth[channel] = SEG_DISABLE; // TCP_SERVER_MODE only (+ MIXED_SERVER)
 80189e0:	497f      	ldr	r1, [pc, #508]	; (8018be0 <proc_SEG_mqtt_client+0x398>)
    flag_serial_input_time_elapse[channel] = SEG_DISABLE;
 80189e2:	7013      	strb	r3, [r2, #0]
    connection_auth_time[channel] = 0;
 80189e4:	4a7f      	ldr	r2, [pc, #508]	; (8018be4 <proc_SEG_mqtt_client+0x39c>)
    flag_sent_keepalive[channel] = SEG_DISABLE;
 80189e6:	7003      	strb	r3, [r0, #0]
    flag_connect_pw_auth[channel] = SEG_DISABLE; // TCP_SERVER_MODE only (+ MIXED_SERVER)
 80189e8:	700b      	strb	r3, [r1, #0]
            u2e_size[channel] = 0;
 80189ea:	487f      	ldr	r0, [pc, #508]	; (8018be8 <proc_SEG_mqtt_client+0x3a0>)
            e2u_size[channel] = 0;
 80189ec:	497f      	ldr	r1, [pc, #508]	; (8018bec <proc_SEG_mqtt_client+0x3a4>)
    connection_auth_time[channel] = 0;
 80189ee:	8013      	strh	r3, [r2, #0]
            if(network_connection[channel].fixed_local_port)
 80189f0:	f896 2045 	ldrb.w	r2, [r6, #69]	; 0x45
            u2e_size[channel] = 0;
 80189f4:	8003      	strh	r3, [r0, #0]
            e2u_size[channel] = 0;
 80189f6:	800b      	strh	r3, [r1, #0]
            if(network_connection[channel].fixed_local_port)
 80189f8:	2a00      	cmp	r2, #0
 80189fa:	f000 8141 	beq.w	8018c80 <proc_SEG_mqtt_client+0x438>
                source_port = network_connection[channel].local_port;
 80189fe:	4b7c      	ldr	r3, [pc, #496]	; (8018bf0 <proc_SEG_mqtt_client+0x3a8>)
 8018a00:	f8b6 603d 	ldrh.w	r6, [r6, #61]	; 0x3d
 8018a04:	881a      	ldrh	r2, [r3, #0]
            PRT_SEG(" > TCP CLIENT: client_any_port = %d\r\n", client_any_port[channel]);
 8018a06:	4969      	ldr	r1, [pc, #420]	; (8018bac <proc_SEG_mqtt_client+0x364>)
 8018a08:	487a      	ldr	r0, [pc, #488]	; (8018bf4 <proc_SEG_mqtt_client+0x3ac>)
 8018a0a:	f7ff fa1b 	bl	8017e44 <WIZ_SECURE_printf>
            if(socket(sock, Sn_MR_TCP, source_port, (SF_TCP_NODELAY | SF_IO_NONBLOCK)) == sock)
 8018a0e:	4632      	mov	r2, r6
 8018a10:	2321      	movs	r3, #33	; 0x21
 8018a12:	2101      	movs	r1, #1
 8018a14:	4620      	mov	r0, r4
 8018a16:	f002 fb23 	bl	801b060 <socket>
 8018a1a:	4284      	cmp	r4, r0
 8018a1c:	d1c1      	bne.n	80189a2 <proc_SEG_mqtt_client+0x15a>
                if((serial_command->serial_command == SEG_ENABLE) && serial_data_packing[channel].packing_time)
 8018a1e:	9b05      	ldr	r3, [sp, #20]
 8018a20:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 8018a24:	2b01      	cmp	r3, #1
 8018a26:	f000 8190 	beq.w	8018d4a <proc_SEG_mqtt_client+0x502>
                if((enable_reconnection_timer[channel] == SEG_DISABLE) && tcp_option[channel].reconnection)
 8018a2a:	4b73      	ldr	r3, [pc, #460]	; (8018bf8 <proc_SEG_mqtt_client+0x3b0>)
 8018a2c:	781a      	ldrb	r2, [r3, #0]
 8018a2e:	b922      	cbnz	r2, 8018a3a <proc_SEG_mqtt_client+0x1f2>
 8018a30:	f8b5 20cf 	ldrh.w	r2, [r5, #207]	; 0xcf
 8018a34:	b10a      	cbz	r2, 8018a3a <proc_SEG_mqtt_client+0x1f2>
                    enable_reconnection_timer[channel] = SEG_ENABLE;
 8018a36:	2201      	movs	r2, #1
 8018a38:	701a      	strb	r2, [r3, #0]
                if(serial_common->serial_debug_en)
 8018a3a:	f898 30e2 	ldrb.w	r3, [r8, #226]	; 0xe2
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d0af      	beq.n	80189a2 <proc_SEG_mqtt_client+0x15a>
                    if(isSocketOpen_TCPclient[channel] == OFF)
 8018a42:	4c6e      	ldr	r4, [pc, #440]	; (8018bfc <proc_SEG_mqtt_client+0x3b4>)
 8018a44:	7823      	ldrb	r3, [r4, #0]
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d1ab      	bne.n	80189a2 <proc_SEG_mqtt_client+0x15a>
                        PRT_SEG(" > SEG:TCP_CLIENT_MODE:SOCKOPEN\r\n");
 8018a4a:	4958      	ldr	r1, [pc, #352]	; (8018bac <proc_SEG_mqtt_client+0x364>)
 8018a4c:	486c      	ldr	r0, [pc, #432]	; (8018c00 <proc_SEG_mqtt_client+0x3b8>)
 8018a4e:	f7ff f9f9 	bl	8017e44 <WIZ_SECURE_printf>
                        isSocketOpen_TCPclient[channel] = ON;
 8018a52:	2301      	movs	r3, #1
 8018a54:	7023      	strb	r3, [r4, #0]
 8018a56:	e7a4      	b.n	80189a2 <proc_SEG_mqtt_client+0x15a>
            wizchip_mqtt_network_disconnect(&mqtt_n);
 8018a58:	484f      	ldr	r0, [pc, #316]	; (8018b98 <proc_SEG_mqtt_client+0x350>)
 8018a5a:	f005 f8dd 	bl	801dc18 <wizchip_mqtt_network_disconnect>
            process_socket_termination(sock, 100);
 8018a5e:	4620      	mov	r0, r4
 8018a60:	2164      	movs	r1, #100	; 0x64
 8018a62:	f7ff fba1 	bl	80181a8 <process_socket_termination>
}
 8018a66:	b00d      	add	sp, #52	; 0x34
 8018a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(getSn_IR(sock) & Sn_IR_CON)
 8018a6c:	f10a 0602 	add.w	r6, sl, #2
 8018a70:	4630      	mov	r0, r6
 8018a72:	f002 f87d 	bl	801ab70 <WIZCHIP_READ>
 8018a76:	07c3      	lsls	r3, r0, #31
 8018a78:	f100 80ca 	bmi.w	8018c10 <proc_SEG_mqtt_client+0x3c8>
 8018a7c:	f8df a148 	ldr.w	sl, [pc, #328]	; 8018bc8 <proc_SEG_mqtt_client+0x380>
            MQTTYield(&mqtt_c, mqtt_option->keepalive);
 8018a80:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 8018a84:	4847      	ldr	r0, [pc, #284]	; (8018ba4 <proc_SEG_mqtt_client+0x35c>)
 8018a86:	f004 fe95 	bl	801d7b4 <MQTTYield>
            if(serial_mode == SEG_SERIAL_PROTOCOL_NONE)
 8018a8a:	f1bb 0f00 	cmp.w	fp, #0
 8018a8e:	f000 811d 	beq.w	8018ccc <proc_SEG_mqtt_client+0x484>
            if((enable_inactivity_timer[channel] == SEG_ENABLE) && (inactivity_time[channel] >= tcp_option[channel].inactivity))
 8018a92:	f89a 3000 	ldrb.w	r3, [sl]
 8018a96:	2b01      	cmp	r3, #1
 8018a98:	f000 80ff 	beq.w	8018c9a <proc_SEG_mqtt_client+0x452>
            if((tcp_option[channel].keepalive_en == SEG_ENABLE) && (enable_keepalive_timer[channel] == SEG_ENABLE))
 8018a9c:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
 8018aa0:	2b01      	cmp	r3, #1
 8018aa2:	f47f af7e 	bne.w	80189a2 <proc_SEG_mqtt_client+0x15a>
 8018aa6:	4b4a      	ldr	r3, [pc, #296]	; (8018bd0 <proc_SEG_mqtt_client+0x388>)
 8018aa8:	781e      	ldrb	r6, [r3, #0]
 8018aaa:	2e01      	cmp	r6, #1
 8018aac:	f47f af79 	bne.w	80189a2 <proc_SEG_mqtt_client+0x15a>
                if((flag_sent_first_keepalive[channel] == SEG_DISABLE) &&
 8018ab0:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8018c0c <proc_SEG_mqtt_client+0x3c4>
 8018ab4:	f898 7000 	ldrb.w	r7, [r8]
 8018ab8:	2f00      	cmp	r7, #0
 8018aba:	f040 81f2 	bne.w	8018ea2 <proc_SEG_mqtt_client+0x65a>
                   (keepalive_time[channel] >= tcp_option[channel].keepalive_wait_time) &&
 8018abe:	4b41      	ldr	r3, [pc, #260]	; (8018bc4 <proc_SEG_mqtt_client+0x37c>)
 8018ac0:	f8b5 10d2 	ldrh.w	r1, [r5, #210]	; 0xd2
 8018ac4:	881a      	ldrh	r2, [r3, #0]
 8018ac6:	b292      	uxth	r2, r2
                if((flag_sent_first_keepalive[channel] == SEG_DISABLE) &&
 8018ac8:	428a      	cmp	r2, r1
 8018aca:	f4ff af6a 	bcc.w	80189a2 <proc_SEG_mqtt_client+0x15a>
                   (keepalive_time[channel] >= tcp_option[channel].keepalive_wait_time) &&
 8018ace:	2900      	cmp	r1, #0
 8018ad0:	f43f af67 	beq.w	80189a2 <proc_SEG_mqtt_client+0x15a>
    setsockopt(sock, SO_KEEPALIVESEND, 0);
 8018ad4:	463a      	mov	r2, r7
 8018ad6:	2106      	movs	r1, #6
 8018ad8:	4620      	mov	r0, r4
 8018ada:	9305      	str	r3, [sp, #20]
 8018adc:	f003 f932 	bl	801bd44 <setsockopt>
                    keepalive_time[channel] = 0;
 8018ae0:	9b05      	ldr	r3, [sp, #20]
                    flag_sent_first_keepalive[channel] = SEG_ENABLE;
 8018ae2:	f888 6000 	strb.w	r6, [r8]
                    keepalive_time[channel] = 0;
 8018ae6:	801f      	strh	r7, [r3, #0]
                   (keepalive_time[channel] >= tcp_option[channel].keepalive_retry_time) &&
 8018ae8:	881a      	ldrh	r2, [r3, #0]
 8018aea:	f8b5 10d4 	ldrh.w	r1, [r5, #212]	; 0xd4
 8018aee:	b292      	uxth	r2, r2
                if((flag_sent_first_keepalive[channel] == SEG_ENABLE) &&
 8018af0:	428a      	cmp	r2, r1
 8018af2:	f4ff af56 	bcc.w	80189a2 <proc_SEG_mqtt_client+0x15a>
                   (keepalive_time[channel] >= tcp_option[channel].keepalive_retry_time) &&
 8018af6:	2900      	cmp	r1, #0
 8018af8:	f43f af53 	beq.w	80189a2 <proc_SEG_mqtt_client+0x15a>
    setsockopt(sock, SO_KEEPALIVESEND, 0);
 8018afc:	2200      	movs	r2, #0
 8018afe:	4620      	mov	r0, r4
 8018b00:	2106      	movs	r1, #6
 8018b02:	9305      	str	r3, [sp, #20]
 8018b04:	f003 f91e 	bl	801bd44 <setsockopt>
                    keepalive_time[channel] = 0;
 8018b08:	2200      	movs	r2, #0
 8018b0a:	9b05      	ldr	r3, [sp, #20]
 8018b0c:	801a      	strh	r2, [r3, #0]
 8018b0e:	e748      	b.n	80189a2 <proc_SEG_mqtt_client+0x15a>
            if(reconnection_time[channel] >= tcp_option[channel].reconnection)
 8018b10:	4a3c      	ldr	r2, [pc, #240]	; (8018c04 <proc_SEG_mqtt_client+0x3bc>)
 8018b12:	f8b5 10cf 	ldrh.w	r1, [r5, #207]	; 0xcf
 8018b16:	8813      	ldrh	r3, [r2, #0]
 8018b18:	b29b      	uxth	r3, r3
 8018b1a:	4299      	cmp	r1, r3
 8018b1c:	f63f af41 	bhi.w	80189a2 <proc_SEG_mqtt_client+0x15a>
                reconnection_time[channel] = 0; // reconnection time variable clear
 8018b20:	f04f 0a00 	mov.w	sl, #0
 8018b24:	f8a2 a000 	strh.w	sl, [r2]
    struct __network_option *network_option = (struct __network_option *)&get_DevConfig_pointer()->network_option;
 8018b28:	f7fb fa84 	bl	8014034 <get_DevConfig_pointer>
 8018b2c:	4681      	mov	r9, r0
    struct __serial_common *serial_common = (struct __serial_common *)&get_DevConfig_pointer()->serial_common;
 8018b2e:	f7fb fa81 	bl	8014034 <get_DevConfig_pointer>
 8018b32:	4680      	mov	r8, r0
    struct __network_connection *network_connection = (struct __network_connection *)get_DevConfig_pointer()->network_connection;
 8018b34:	f7fb fa7e 	bl	8014034 <get_DevConfig_pointer>
 8018b38:	4605      	mov	r5, r0
    getSIPR(srcip);
 8018b3a:	2204      	movs	r2, #4
 8018b3c:	200f      	movs	r0, #15
 8018b3e:	a90b      	add	r1, sp, #44	; 0x2c
    uint8_t srcip[4] = {0, };
 8018b40:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
    getSIPR(srcip);
 8018b44:	f002 f85a 	bl	801abfc <WIZCHIP_READ_BUF>
    if((network_connection[channel].dns_use == SEG_ENABLE) && (flag_process_dns_success[channel] != ON))
 8018b48:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 8018b4c:	2b01      	cmp	r3, #1
 8018b4e:	f000 8106 	beq.w	8018d5e <proc_SEG_mqtt_client+0x516>
    else if((srcip[0] == 0x00) && (srcip[1] == 0x00) && (srcip[2] == 0x00) && (srcip[3] == 0x00))
 8018b52:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	f000 80e5 	beq.w	8018d26 <proc_SEG_mqtt_client+0x4de>
    else if((network_connection[channel].remote_ip[0] == 0x00) &&
 8018b5c:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
 8018b60:	2900      	cmp	r1, #0
 8018b62:	f040 816a 	bne.w	8018e3a <proc_SEG_mqtt_client+0x5f2>
            (network_connection[channel].remote_ip[1] == 0x00) &&
 8018b66:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
    else if((network_connection[channel].remote_ip[0] == 0x00) &&
 8018b6a:	2a00      	cmp	r2, #0
 8018b6c:	f47f aeb9 	bne.w	80188e2 <proc_SEG_mqtt_client+0x9a>
            (network_connection[channel].remote_ip[1] == 0x00) &&
 8018b70:	f895 2043 	ldrb.w	r2, [r5, #67]	; 0x43
 8018b74:	2a00      	cmp	r2, #0
 8018b76:	f47f aeb4 	bne.w	80188e2 <proc_SEG_mqtt_client+0x9a>
            (network_connection[channel].remote_ip[2] == 0x00) &&
 8018b7a:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
 8018b7e:	2a00      	cmp	r2, #0
 8018b80:	f040 815a 	bne.w	8018e38 <proc_SEG_mqtt_client+0x5f0>
        if(serial_common->serial_debug_en) printf(" > SEG:CONNECTION FAILED - Invalid Destination IP address: Zero IP\r\n");
 8018b84:	f898 30e2 	ldrb.w	r3, [r8, #226]	; 0xe2
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	f43f af0a 	beq.w	80189a2 <proc_SEG_mqtt_client+0x15a>
 8018b8e:	481e      	ldr	r0, [pc, #120]	; (8018c08 <proc_SEG_mqtt_client+0x3c0>)
 8018b90:	f017 fab0 	bl	80300f4 <puts>
    return ret;
 8018b94:	e705      	b.n	80189a2 <proc_SEG_mqtt_client+0x15a>
 8018b96:	bf00      	nop
 8018b98:	2001feb8 	.word	0x2001feb8
 8018b9c:	2001ddbc 	.word	0x2001ddbc
 8018ba0:	20018280 	.word	0x20018280
 8018ba4:	200199a8 	.word	0x200199a8
 8018ba8:	2001cdb8 	.word	0x2001cdb8
 8018bac:	080339d4 	.word	0x080339d4
 8018bb0:	080334d4 	.word	0x080334d4
 8018bb4:	0801a929 	.word	0x0801a929
 8018bb8:	08033548 	.word	0x08033548
 8018bbc:	2001991c 	.word	0x2001991c
 8018bc0:	20019958 	.word	0x20019958
 8018bc4:	20019924 	.word	0x20019924
 8018bc8:	200198f4 	.word	0x200198f4
 8018bcc:	20019900 	.word	0x20019900
 8018bd0:	200198f8 	.word	0x200198f8
 8018bd4:	200198f0 	.word	0x200198f0
 8018bd8:	20019914 	.word	0x20019914
 8018bdc:	20019910 	.word	0x20019910
 8018be0:	20019904 	.word	0x20019904
 8018be4:	200198e8 	.word	0x200198e8
 8018be8:	20019960 	.word	0x20019960
 8018bec:	200198ec 	.word	0x200198ec
 8018bf0:	200198e4 	.word	0x200198e4
 8018bf4:	080335d4 	.word	0x080335d4
 8018bf8:	200198fc 	.word	0x200198fc
 8018bfc:	20019920 	.word	0x20019920
 8018c00:	08033608 	.word	0x08033608
 8018c04:	20019934 	.word	0x20019934
 8018c08:	080332c0 	.word	0x080332c0
 8018c0c:	2001990c 	.word	0x2001990c
    struct __network_connection *network_connection = (struct __network_connection *)get_DevConfig_pointer()->network_connection;
 8018c10:	f7fb fa10 	bl	8014034 <get_DevConfig_pointer>
            network_connection[channel].working_state = ST_CONNECT;
 8018c14:	2302      	movs	r3, #2
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, ON); // Status I/O pin to low
 8018c16:	2201      	movs	r2, #1
            network_connection[channel].working_state = ST_CONNECT;
 8018c18:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, ON); // Status I/O pin to low
 8018c1c:	2100      	movs	r1, #0
 8018c1e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8018c22:	f7fe fc71 	bl	8017508 <set_connection_status_io>
                if(!inactivity_time[channel] && tcp_option[channel].inactivity)     enable_inactivity_timer[channel] = SEG_ENABLE;
 8018c26:	4bb6      	ldr	r3, [pc, #728]	; (8018f00 <proc_SEG_mqtt_client+0x6b8>)
 8018c28:	881b      	ldrh	r3, [r3, #0]
 8018c2a:	b29b      	uxth	r3, r3
 8018c2c:	2b00      	cmp	r3, #0
 8018c2e:	d05c      	beq.n	8018cea <proc_SEG_mqtt_client+0x4a2>
 8018c30:	f8df a330 	ldr.w	sl, [pc, #816]	; 8018f64 <proc_SEG_mqtt_client+0x71c>
                if(!keepalive_time[channel] && tcp_option[channel].keepalive_en)    enable_keepalive_timer[channel] = SEG_ENABLE;
 8018c34:	4bb3      	ldr	r3, [pc, #716]	; (8018f04 <proc_SEG_mqtt_client+0x6bc>)
 8018c36:	881b      	ldrh	r3, [r3, #0]
 8018c38:	b29b      	uxth	r3, r3
 8018c3a:	b92b      	cbnz	r3, 8018c48 <proc_SEG_mqtt_client+0x400>
 8018c3c:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
 8018c40:	b113      	cbz	r3, 8018c48 <proc_SEG_mqtt_client+0x400>
 8018c42:	2201      	movs	r2, #1
 8018c44:	4bb0      	ldr	r3, [pc, #704]	; (8018f08 <proc_SEG_mqtt_client+0x6c0>)
 8018c46:	701a      	strb	r2, [r3, #0]
                flag_connect_pw_auth[channel] = SEG_ENABLE;
 8018c48:	2001      	movs	r0, #1
                if(enable_reconnection_timer[channel] == SEG_ENABLE)
 8018c4a:	4bb0      	ldr	r3, [pc, #704]	; (8018f0c <proc_SEG_mqtt_client+0x6c4>)
                flag_connect_pw_auth[channel] = SEG_ENABLE;
 8018c4c:	49b0      	ldr	r1, [pc, #704]	; (8018f10 <proc_SEG_mqtt_client+0x6c8>)
                if(enable_reconnection_timer[channel] == SEG_ENABLE)
 8018c4e:	781a      	ldrb	r2, [r3, #0]
                flag_connect_pw_auth[channel] = SEG_ENABLE;
 8018c50:	7008      	strb	r0, [r1, #0]
                if(enable_reconnection_timer[channel] == SEG_ENABLE)
 8018c52:	4282      	cmp	r2, r0
 8018c54:	d103      	bne.n	8018c5e <proc_SEG_mqtt_client+0x416>
                    enable_reconnection_timer[channel] = SEG_DISABLE;
 8018c56:	2200      	movs	r2, #0
                    reconnection_time[channel] = 0;
 8018c58:	49ae      	ldr	r1, [pc, #696]	; (8018f14 <proc_SEG_mqtt_client+0x6cc>)
                    enable_reconnection_timer[channel] = SEG_DISABLE;
 8018c5a:	701a      	strb	r2, [r3, #0]
                    reconnection_time[channel] = 0;
 8018c5c:	800a      	strh	r2, [r1, #0]
                if(serial_common->serial_debug_en)
 8018c5e:	f898 30e2 	ldrb.w	r3, [r8, #226]	; 0xe2
 8018c62:	2b00      	cmp	r3, #0
 8018c64:	f040 8089 	bne.w	8018d7a <proc_SEG_mqtt_client+0x532>
                if(serial_mode == SEG_SERIAL_PROTOCOL_NONE)
 8018c68:	f1bb 0f00 	cmp.w	fp, #0
 8018c6c:	f000 80c8 	beq.w	8018e00 <proc_SEG_mqtt_client+0x5b8>
                isSocketOpen_TCPclient[channel] = OFF;
 8018c70:	2200      	movs	r2, #0
 8018c72:	4ba9      	ldr	r3, [pc, #676]	; (8018f18 <proc_SEG_mqtt_client+0x6d0>)
                setSn_IR(sock, Sn_IR_CON);
 8018c74:	4630      	mov	r0, r6
 8018c76:	2101      	movs	r1, #1
                isSocketOpen_TCPclient[channel] = OFF;
 8018c78:	701a      	strb	r2, [r3, #0]
                setSn_IR(sock, Sn_IR_CON);
 8018c7a:	f001 ff5b 	bl	801ab34 <WIZCHIP_WRITE>
 8018c7e:	e6ff      	b.n	8018a80 <proc_SEG_mqtt_client+0x238>
    if(client_any_port[channel])
 8018c80:	4fa6      	ldr	r7, [pc, #664]	; (8018f1c <proc_SEG_mqtt_client+0x6d4>)
 8018c82:	883e      	ldrh	r6, [r7, #0]
 8018c84:	2e00      	cmp	r6, #0
 8018c86:	d03b      	beq.n	8018d00 <proc_SEG_mqtt_client+0x4b8>
        if(client_any_port[channel] < 0xffff)
 8018c88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018c8c:	429e      	cmp	r6, r3
 8018c8e:	d036      	beq.n	8018cfe <proc_SEG_mqtt_client+0x4b6>
            client_any_port[channel]++;
 8018c90:	3601      	adds	r6, #1
 8018c92:	b2b6      	uxth	r6, r6
            (network_connection[channel].remote_ip[1] == 0x00) &&
 8018c94:	4632      	mov	r2, r6
            client_any_port[channel]++;
 8018c96:	803e      	strh	r6, [r7, #0]
    return client_any_port[channel];
 8018c98:	e6b5      	b.n	8018a06 <proc_SEG_mqtt_client+0x1be>
            if((enable_inactivity_timer[channel] == SEG_ENABLE) && (inactivity_time[channel] >= tcp_option[channel].inactivity))
 8018c9a:	4b99      	ldr	r3, [pc, #612]	; (8018f00 <proc_SEG_mqtt_client+0x6b8>)
 8018c9c:	f8b5 20cd 	ldrh.w	r2, [r5, #205]	; 0xcd
 8018ca0:	881b      	ldrh	r3, [r3, #0]
 8018ca2:	b29b      	uxth	r3, r3
 8018ca4:	429a      	cmp	r2, r3
 8018ca6:	f63f aef9 	bhi.w	8018a9c <proc_SEG_mqtt_client+0x254>
                wizchip_mqtt_network_disconnect(&mqtt_n);
 8018caa:	489d      	ldr	r0, [pc, #628]	; (8018f20 <proc_SEG_mqtt_client+0x6d8>)
 8018cac:	f004 ffb4 	bl	801dc18 <wizchip_mqtt_network_disconnect>
                process_socket_termination(sock, 100);
 8018cb0:	2164      	movs	r1, #100	; 0x64
 8018cb2:	4620      	mov	r0, r4
 8018cb4:	f7ff fa78 	bl	80181a8 <process_socket_termination>
                enable_keepalive_timer[channel] = DISABLE;
 8018cb8:	2200      	movs	r2, #0
 8018cba:	4893      	ldr	r0, [pc, #588]	; (8018f08 <proc_SEG_mqtt_client+0x6c0>)
                keepalive_time[channel] = 0;
 8018cbc:	4b91      	ldr	r3, [pc, #580]	; (8018f04 <proc_SEG_mqtt_client+0x6bc>)
                enable_keepalive_timer[channel] = DISABLE;
 8018cbe:	7002      	strb	r2, [r0, #0]
                PRT_SEG(" > INACTIVITY TIMER: TIMEOUT\r\n");
 8018cc0:	4998      	ldr	r1, [pc, #608]	; (8018f24 <proc_SEG_mqtt_client+0x6dc>)
 8018cc2:	4899      	ldr	r0, [pc, #612]	; (8018f28 <proc_SEG_mqtt_client+0x6e0>)
                keepalive_time[channel] = 0;
 8018cc4:	801a      	strh	r2, [r3, #0]
                PRT_SEG(" > INACTIVITY TIMER: TIMEOUT\r\n");
 8018cc6:	f7ff f8bd 	bl	8017e44 <WIZ_SECURE_printf>
 8018cca:	e6e7      	b.n	8018a9c <proc_SEG_mqtt_client+0x254>
                if(get_uart_buffer_usedsize(uartNum) || u2e_size[channel])
 8018ccc:	4648      	mov	r0, r9
 8018cce:	f7ff f89d 	bl	8017e0c <get_uart_buffer_usedsize>
 8018cd2:	4b96      	ldr	r3, [pc, #600]	; (8018f2c <proc_SEG_mqtt_client+0x6e4>)
 8018cd4:	881b      	ldrh	r3, [r3, #0]
 8018cd6:	4318      	orrs	r0, r3
 8018cd8:	b280      	uxth	r0, r0
 8018cda:	2800      	cmp	r0, #0
 8018cdc:	f43f aed9 	beq.w	8018a92 <proc_SEG_mqtt_client+0x24a>
                    uart_to_ether(uartNum, sock);
 8018ce0:	4648      	mov	r0, r9
 8018ce2:	4621      	mov	r1, r4
 8018ce4:	f7ff fc78 	bl	80185d8 <uart_to_ether>
 8018ce8:	e6d3      	b.n	8018a92 <proc_SEG_mqtt_client+0x24a>
                if(!inactivity_time[channel] && tcp_option[channel].inactivity)     enable_inactivity_timer[channel] = SEG_ENABLE;
 8018cea:	f8b5 30cd 	ldrh.w	r3, [r5, #205]	; 0xcd
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	d09e      	beq.n	8018c30 <proc_SEG_mqtt_client+0x3e8>
 8018cf2:	2301      	movs	r3, #1
 8018cf4:	f8df a26c 	ldr.w	sl, [pc, #620]	; 8018f64 <proc_SEG_mqtt_client+0x71c>
 8018cf8:	f88a 3000 	strb.w	r3, [sl]
 8018cfc:	e79a      	b.n	8018c34 <proc_SEG_mqtt_client+0x3ec>
            client_any_port[channel] = 0;
 8018cfe:	803a      	strh	r2, [r7, #0]
        client_any_port[channel] = (rand() % 10000) + 35000; // 35000 ~ 44999
 8018d00:	f017 fa2e 	bl	8030160 <rand>
 8018d04:	f242 7210 	movw	r2, #10000	; 0x2710
 8018d08:	4e89      	ldr	r6, [pc, #548]	; (8018f30 <proc_SEG_mqtt_client+0x6e8>)
 8018d0a:	17c3      	asrs	r3, r0, #31
 8018d0c:	fb86 1600 	smull	r1, r6, r6, r0
 8018d10:	ebc3 3326 	rsb	r3, r3, r6, asr #12
 8018d14:	fb02 0613 	mls	r6, r2, r3, r0
 8018d18:	f5a6 46ee 	sub.w	r6, r6, #30464	; 0x7700
 8018d1c:	3e48      	subs	r6, #72	; 0x48
 8018d1e:	b2b6      	uxth	r6, r6
            (network_connection[channel].remote_ip[1] == 0x00) &&
 8018d20:	4632      	mov	r2, r6
        client_any_port[channel] = (rand() % 10000) + 35000; // 35000 ~ 44999
 8018d22:	803e      	strh	r6, [r7, #0]
    return client_any_port[channel];
 8018d24:	e66f      	b.n	8018a06 <proc_SEG_mqtt_client+0x1be>
    else if((srcip[0] == 0x00) && (srcip[1] == 0x00) && (srcip[2] == 0x00) && (srcip[3] == 0x00))
 8018d26:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 8018d2a:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8018d2e:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
 8018d32:	4302      	orrs	r2, r0
 8018d34:	430a      	orrs	r2, r1
 8018d36:	d13b      	bne.n	8018db0 <proc_SEG_mqtt_client+0x568>
        if(serial_common->serial_debug_en) printf(" > SEG:CONNECTION FAILED - Invalid IP address: Zero IP\r\n");
 8018d38:	f898 30e2 	ldrb.w	r3, [r8, #226]	; 0xe2
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	f43f ae30 	beq.w	80189a2 <proc_SEG_mqtt_client+0x15a>
 8018d42:	487c      	ldr	r0, [pc, #496]	; (8018f34 <proc_SEG_mqtt_client+0x6ec>)
 8018d44:	f017 f9d6 	bl	80300f4 <puts>
    return ret;
 8018d48:	e62b      	b.n	80189a2 <proc_SEG_mqtt_client+0x15a>
                if((serial_command->serial_command == SEG_ENABLE) && serial_data_packing[channel].packing_time)
 8018d4a:	9b06      	ldr	r3, [sp, #24]
 8018d4c:	f8b3 30f1 	ldrh.w	r3, [r3, #241]	; 0xf1
 8018d50:	b29a      	uxth	r2, r3
 8018d52:	2a00      	cmp	r2, #0
 8018d54:	f43f ae69 	beq.w	8018a2a <proc_SEG_mqtt_client+0x1e2>
                    modeswitch_gap_time = serial_data_packing[channel].packing_time;
 8018d58:	4a77      	ldr	r2, [pc, #476]	; (8018f38 <proc_SEG_mqtt_client+0x6f0>)
 8018d5a:	8013      	strh	r3, [r2, #0]
 8018d5c:	e665      	b.n	8018a2a <proc_SEG_mqtt_client+0x1e2>
    if((network_connection[channel].dns_use == SEG_ENABLE) && (flag_process_dns_success[channel] != ON))
 8018d5e:	4b77      	ldr	r3, [pc, #476]	; (8018f3c <proc_SEG_mqtt_client+0x6f4>)
 8018d60:	7819      	ldrb	r1, [r3, #0]
 8018d62:	2901      	cmp	r1, #1
 8018d64:	f43f aef5 	beq.w	8018b52 <proc_SEG_mqtt_client+0x30a>
        if(serial_common->serial_debug_en) printf(" > SEG:CONNECTION FAILED - DNS Failed flag_process_dns_success = %d\r\n", flag_process_dns_success[channel]);
 8018d68:	f898 30e2 	ldrb.w	r3, [r8, #226]	; 0xe2
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	f43f ae18 	beq.w	80189a2 <proc_SEG_mqtt_client+0x15a>
 8018d72:	4873      	ldr	r0, [pc, #460]	; (8018f40 <proc_SEG_mqtt_client+0x6f8>)
 8018d74:	f017 f938 	bl	802ffe8 <iprintf>
    return ret;
 8018d78:	e613      	b.n	80189a2 <proc_SEG_mqtt_client+0x15a>
                    getsockopt(sock, SO_DESTIP, &destip);
 8018d7a:	aa0a      	add	r2, sp, #40	; 0x28
 8018d7c:	2104      	movs	r1, #4
 8018d7e:	4620      	mov	r0, r4
 8018d80:	f003 f860 	bl	801be44 <getsockopt>
                    getsockopt(sock, SO_DESTPORT, &destport);
 8018d84:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 8018d88:	2105      	movs	r1, #5
 8018d8a:	4620      	mov	r0, r4
 8018d8c:	f003 f85a 	bl	801be44 <getsockopt>
                    printf(" > SEG:CONNECTED TO - %d.%d.%d.%d : %d\r\n", destip[0], destip[1], destip[2], destip[3], destport);
 8018d90:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8018d94:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8018d98:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
 8018d9c:	e9cd 3200 	strd	r3, r2, [sp]
 8018da0:	4868      	ldr	r0, [pc, #416]	; (8018f44 <proc_SEG_mqtt_client+0x6fc>)
 8018da2:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 8018da6:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 8018daa:	f017 f91d 	bl	802ffe8 <iprintf>
 8018dae:	e75b      	b.n	8018c68 <proc_SEG_mqtt_client+0x420>
    else if((network_connection[channel].remote_ip[0] == 0x00) &&
 8018db0:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
 8018db4:	2900      	cmp	r1, #0
 8018db6:	f47f ad97 	bne.w	80188e8 <proc_SEG_mqtt_client+0xa0>
            (network_connection[channel].remote_ip[1] == 0x00) &&
 8018dba:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
    else if((network_connection[channel].remote_ip[0] == 0x00) &&
 8018dbe:	b92a      	cbnz	r2, 8018dcc <proc_SEG_mqtt_client+0x584>
            (network_connection[channel].remote_ip[1] == 0x00) &&
 8018dc0:	f895 c043 	ldrb.w	ip, [r5, #67]	; 0x43
 8018dc4:	f1bc 0f00 	cmp.w	ip, #0
 8018dc8:	f43f aed7 	beq.w	8018b7a <proc_SEG_mqtt_client+0x332>
    else if((srcip[0] == network_connection[channel].remote_ip[0]) &&
 8018dcc:	4290      	cmp	r0, r2
 8018dce:	f47f ad88 	bne.w	80188e2 <proc_SEG_mqtt_client+0x9a>
            (srcip[1] == network_connection[channel].remote_ip[1]) &&
 8018dd2:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
 8018dd6:	f895 2043 	ldrb.w	r2, [r5, #67]	; 0x43
 8018dda:	4290      	cmp	r0, r2
 8018ddc:	f47f ad81 	bne.w	80188e2 <proc_SEG_mqtt_client+0x9a>
            (srcip[2] == network_connection[channel].remote_ip[2]) &&
 8018de0:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 8018de4:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
 8018de8:	4290      	cmp	r0, r2
 8018dea:	f47f ad7a 	bne.w	80188e2 <proc_SEG_mqtt_client+0x9a>
        if(serial_common->serial_debug_en) printf(" > SEG:CONNECTION FAILED - Duplicate IP address\r\n");
 8018dee:	f898 30e2 	ldrb.w	r3, [r8, #226]	; 0xe2
 8018df2:	2b00      	cmp	r3, #0
 8018df4:	f43f add5 	beq.w	80189a2 <proc_SEG_mqtt_client+0x15a>
 8018df8:	4853      	ldr	r0, [pc, #332]	; (8018f48 <proc_SEG_mqtt_client+0x700>)
 8018dfa:	f017 f97b 	bl	80300f4 <puts>
    return ret;
 8018dfe:	e5d0      	b.n	80189a2 <proc_SEG_mqtt_client+0x15a>
                    uart_rx_flush(uartNum);
 8018e00:	4648      	mov	r0, r9
 8018e02:	f7fe ffdd 	bl	8017dc0 <uart_rx_flush>
 8018e06:	e733      	b.n	8018c70 <proc_SEG_mqtt_client+0x428>
                    PRT_SEG(" > SEG:MQTT_CLIENT_MODE:ConnectNetwork Err %d\r\n", ret);
 8018e08:	4946      	ldr	r1, [pc, #280]	; (8018f24 <proc_SEG_mqtt_client+0x6dc>)
 8018e0a:	4850      	ldr	r0, [pc, #320]	; (8018f4c <proc_SEG_mqtt_client+0x704>)
 8018e0c:	f7ff f81a 	bl	8017e44 <WIZ_SECURE_printf>
                    wizchip_mqtt_network_disconnect(&mqtt_n);
 8018e10:	4843      	ldr	r0, [pc, #268]	; (8018f20 <proc_SEG_mqtt_client+0x6d8>)
 8018e12:	f004 ff01 	bl	801dc18 <wizchip_mqtt_network_disconnect>
                    break;
 8018e16:	e5c4      	b.n	80189a2 <proc_SEG_mqtt_client+0x15a>
                    wizchip_mqtt_tls_enable(WIZ_TLS_ENABLED);
 8018e18:	2001      	movs	r0, #1
 8018e1a:	f004 ff19 	bl	801dc50 <wizchip_mqtt_tls_enable>
                    if (ssl_option->root_ca_option == MBEDTLS_SSL_VERIFY_NONE)
 8018e1e:	9b07      	ldr	r3, [sp, #28]
 8018e20:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8018e24:	2b00      	cmp	r3, #0
 8018e26:	d141      	bne.n	8018eac <proc_SEG_mqtt_client+0x664>
                        NewNetwork_TLS(&mqtt_n, sock, network_connection[channel].remote_ip, channel);
 8018e28:	f106 0541 	add.w	r5, r6, #65	; 0x41
 8018e2c:	4621      	mov	r1, r4
 8018e2e:	462a      	mov	r2, r5
 8018e30:	483b      	ldr	r0, [pc, #236]	; (8018f20 <proc_SEG_mqtt_client+0x6d8>)
 8018e32:	f004 ff59 	bl	801dce8 <NewNetwork_TLS>
 8018e36:	e566      	b.n	8018906 <proc_SEG_mqtt_client+0xbe>
 8018e38:	2100      	movs	r1, #0
    else if((srcip[0] == network_connection[channel].remote_ip[0]) &&
 8018e3a:	428b      	cmp	r3, r1
 8018e3c:	f47f ad51 	bne.w	80188e2 <proc_SEG_mqtt_client+0x9a>
 8018e40:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 8018e44:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
 8018e48:	e7c0      	b.n	8018dcc <proc_SEG_mqtt_client+0x584>
    else if((srcip[0] == 192) && (srcip[1] == 168)) // local IP address == Class C private IP
 8018e4a:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8018e4e:	2ba8      	cmp	r3, #168	; 0xa8
 8018e50:	f47f ad4a 	bne.w	80188e8 <proc_SEG_mqtt_client+0xa0>
        if((network_option->dhcp_use == SEG_DISABLE) && ((network_connection[channel].remote_ip[0] == 192) &&
 8018e54:	f899 30c7 	ldrb.w	r3, [r9, #199]	; 0xc7
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	f47f ad45 	bne.w	80188e8 <proc_SEG_mqtt_client+0xa0>
 8018e5e:	29c0      	cmp	r1, #192	; 0xc0
 8018e60:	f47f ad42 	bne.w	80188e8 <proc_SEG_mqtt_client+0xa0>
 8018e64:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
 8018e68:	2aa8      	cmp	r2, #168	; 0xa8
 8018e6a:	f47f ad3d 	bne.w	80188e8 <proc_SEG_mqtt_client+0xa0>
            if(srcip[2] != network_connection[channel].remote_ip[2]) // Class C Private IP network mismatch
 8018e6e:	f895 3043 	ldrb.w	r3, [r5, #67]	; 0x43
 8018e72:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
 8018e76:	4298      	cmp	r0, r3
 8018e78:	f43f ad36 	beq.w	80188e8 <proc_SEG_mqtt_client+0xa0>
                if(serial_common->serial_debug_en)
 8018e7c:	f898 00e2 	ldrb.w	r0, [r8, #226]	; 0xe2
 8018e80:	2800      	cmp	r0, #0
 8018e82:	f43f ad8e 	beq.w	80189a2 <proc_SEG_mqtt_client+0x15a>
                    printf(" > SEG:CONNECTION FAILED - Invalid IP address range (%d.%d.[%d].%d)\r\n",
 8018e86:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
 8018e8a:	9000      	str	r0, [sp, #0]
 8018e8c:	4830      	ldr	r0, [pc, #192]	; (8018f50 <proc_SEG_mqtt_client+0x708>)
 8018e8e:	f017 f8ab 	bl	802ffe8 <iprintf>
    return ret;
 8018e92:	e586      	b.n	80189a2 <proc_SEG_mqtt_client+0x15a>
                    PRT_SEG(" > SEG:MQTT_CLIENT_MODE:MQTTConnect Err %d\r\n", ret);
 8018e94:	482f      	ldr	r0, [pc, #188]	; (8018f54 <proc_SEG_mqtt_client+0x70c>)
 8018e96:	f7fe ffd5 	bl	8017e44 <WIZ_SECURE_printf>
                    wizchip_mqtt_network_disconnect(&mqtt_n);
 8018e9a:	4821      	ldr	r0, [pc, #132]	; (8018f20 <proc_SEG_mqtt_client+0x6d8>)
 8018e9c:	f004 febc 	bl	801dc18 <wizchip_mqtt_network_disconnect>
                    break;
 8018ea0:	e57f      	b.n	80189a2 <proc_SEG_mqtt_client+0x15a>
                if((flag_sent_first_keepalive[channel] == SEG_ENABLE) &&
 8018ea2:	2f01      	cmp	r7, #1
 8018ea4:	f47f ad7d 	bne.w	80189a2 <proc_SEG_mqtt_client+0x15a>
 8018ea8:	4b16      	ldr	r3, [pc, #88]	; (8018f04 <proc_SEG_mqtt_client+0x6bc>)
 8018eaa:	e61d      	b.n	8018ae8 <proc_SEG_mqtt_client+0x2a0>
                        NewNetwork_TLS(&mqtt_n, sock, network_connection[channel].dns_domain_name, channel);
 8018eac:	4621      	mov	r1, r4
 8018eae:	2300      	movs	r3, #0
 8018eb0:	481b      	ldr	r0, [pc, #108]	; (8018f20 <proc_SEG_mqtt_client+0x6d8>)
 8018eb2:	f106 0247 	add.w	r2, r6, #71	; 0x47
 8018eb6:	f004 ff17 	bl	801dce8 <NewNetwork_TLS>
 8018eba:	f106 0541 	add.w	r5, r6, #65	; 0x41
 8018ebe:	e522      	b.n	8018906 <proc_SEG_mqtt_client+0xbe>
					ret = MQTTSubscribe(&mqtt_c, (char *)mqtt_option->sub_topic_0, mqtt_option->qos, mqtt_subscribeMessageHandler);
 8018ec0:	f897 24a0 	ldrb.w	r2, [r7, #1184]	; 0x4a0
 8018ec4:	4b24      	ldr	r3, [pc, #144]	; (8018f58 <proc_SEG_mqtt_client+0x710>)
 8018ec6:	4825      	ldr	r0, [pc, #148]	; (8018f5c <proc_SEG_mqtt_client+0x714>)
 8018ec8:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8018ecc:	f004 fcf8 	bl	801d8c0 <MQTTSubscribe>
					if (ret < 0)
 8018ed0:	1e02      	subs	r2, r0, #0
 8018ed2:	f6bf ad4a 	bge.w	801896a <proc_SEG_mqtt_client+0x122>
						PRT_SEG(" > SEG:MQTT_CLIENT_MODE:MQTTSubscribe Err %d\r\n", ret);
 8018ed6:	4913      	ldr	r1, [pc, #76]	; (8018f24 <proc_SEG_mqtt_client+0x6dc>)
 8018ed8:	4821      	ldr	r0, [pc, #132]	; (8018f60 <proc_SEG_mqtt_client+0x718>)
 8018eda:	f7fe ffb3 	bl	8017e44 <WIZ_SECURE_printf>
						wizchip_mqtt_network_disconnect(&mqtt_n);
 8018ede:	4810      	ldr	r0, [pc, #64]	; (8018f20 <proc_SEG_mqtt_client+0x6d8>)
 8018ee0:	f004 fe9a 	bl	801dc18 <wizchip_mqtt_network_disconnect>
						break;
 8018ee4:	e55d      	b.n	80189a2 <proc_SEG_mqtt_client+0x15a>
					ret = MQTTSubscribe(&mqtt_c, (char *)mqtt_option->sub_topic_1, mqtt_option->qos, mqtt_subscribeMessageHandler);
 8018ee6:	f897 24a0 	ldrb.w	r2, [r7, #1184]	; 0x4a0
 8018eea:	4b1b      	ldr	r3, [pc, #108]	; (8018f58 <proc_SEG_mqtt_client+0x710>)
 8018eec:	481b      	ldr	r0, [pc, #108]	; (8018f5c <proc_SEG_mqtt_client+0x714>)
 8018eee:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8018ef2:	f004 fce5 	bl	801d8c0 <MQTTSubscribe>
					if (ret < 0)
 8018ef6:	1e02      	subs	r2, r0, #0
 8018ef8:	f6bf ad3e 	bge.w	8018978 <proc_SEG_mqtt_client+0x130>
 8018efc:	e7eb      	b.n	8018ed6 <proc_SEG_mqtt_client+0x68e>
 8018efe:	bf00      	nop
 8018f00:	2001991c 	.word	0x2001991c
 8018f04:	20019924 	.word	0x20019924
 8018f08:	200198f8 	.word	0x200198f8
 8018f0c:	200198fc 	.word	0x200198fc
 8018f10:	20019904 	.word	0x20019904
 8018f14:	20019934 	.word	0x20019934
 8018f18:	20019920 	.word	0x20019920
 8018f1c:	200198e4 	.word	0x200198e4
 8018f20:	2001feb8 	.word	0x2001feb8
 8018f24:	080339d4 	.word	0x080339d4
 8018f28:	080335a8 	.word	0x080335a8
 8018f2c:	20019960 	.word	0x20019960
 8018f30:	68db8bad 	.word	0x68db8bad
 8018f34:	08033288 	.word	0x08033288
 8018f38:	20018212 	.word	0x20018212
 8018f3c:	20019908 	.word	0x20019908
 8018f40:	08033240 	.word	0x08033240
 8018f44:	0803357c 	.word	0x0803357c
 8018f48:	08033304 	.word	0x08033304
 8018f4c:	08033460 	.word	0x08033460
 8018f50:	08033338 	.word	0x08033338
 8018f54:	0803349c 	.word	0x0803349c
 8018f58:	0801a929 	.word	0x0801a929
 8018f5c:	200199a8 	.word	0x200199a8
 8018f60:	0803350c 	.word	0x0803350c
 8018f64:	200198f4 	.word	0x200198f4

08018f68 <ether_to_uart>:
{
 8018f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f6c:	b087      	sub	sp, #28
 8018f6e:	460f      	mov	r7, r1
 8018f70:	4605      	mov	r5, r0
    struct __serial_option *serial_option = (struct __serial_option *)get_DevConfig_pointer()->serial_option;
 8018f72:	f7fb f85f 	bl	8014034 <get_DevConfig_pointer>
 8018f76:	4681      	mov	r9, r0
    struct __serial_common *serial_common = (struct __serial_common *)&(get_DevConfig_pointer()->serial_common);
 8018f78:	f7fb f85c 	bl	8014034 <get_DevConfig_pointer>
 8018f7c:	4682      	mov	sl, r0
    struct __network_connection *network_connection = (struct __network_connection *)get_DevConfig_pointer()->network_connection;
 8018f7e:	f7fb f859 	bl	8014034 <get_DevConfig_pointer>
 8018f82:	4680      	mov	r8, r0
    struct __tcp_option *tcp_option = (struct __tcp_option *)get_DevConfig_pointer()->tcp_option;
 8018f84:	f7fb f856 	bl	8014034 <get_DevConfig_pointer>
 8018f88:	4683      	mov	fp, r0
    struct __device_option *device_option = (struct __device_option *)&(get_DevConfig_pointer()->device_option);
 8018f8a:	f7fb f853 	bl	8014034 <get_DevConfig_pointer>
    len = getSn_RX_RSR(sock);
 8018f8e:	4638      	mov	r0, r7
 8018f90:	f001 fe86 	bl	801aca0 <getSn_RX_RSR>
    if(len > DATA_BUF_SIZE) len = DATA_BUF_SIZE; // avoiding buffer overflow
 8018f94:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8018f98:	f200 80bd 	bhi.w	8019116 <ether_to_uart+0x1ae>
    if(len > 0)
 8018f9c:	4606      	mov	r6, r0
 8018f9e:	2800      	cmp	r0, #0
 8018fa0:	d04d      	beq.n	801903e <ether_to_uart+0xd6>
        switch(getSn_SR(sock))
 8018fa2:	0238      	lsls	r0, r7, #8
 8018fa4:	f200 4003 	addw	r0, r0, #1027	; 0x403
 8018fa8:	f001 fde2 	bl	801ab70 <WIZCHIP_READ>
 8018fac:	281c      	cmp	r0, #28
 8018fae:	f000 80bc 	beq.w	801912a <ether_to_uart+0x1c2>
 8018fb2:	2822      	cmp	r0, #34	; 0x22
 8018fb4:	d07d      	beq.n	80190b2 <ether_to_uart+0x14a>
 8018fb6:	2817      	cmp	r0, #23
 8018fb8:	f000 80b7 	beq.w	801912a <ether_to_uart+0x1c2>
 8018fbc:	4c8d      	ldr	r4, [pc, #564]	; (80191f4 <ether_to_uart+0x28c>)
 8018fbe:	8820      	ldrh	r0, [r4, #0]
        inactivity_time[channel] = 0;
 8018fc0:	2300      	movs	r3, #0
 8018fc2:	4a8d      	ldr	r2, [pc, #564]	; (80191f8 <ether_to_uart+0x290>)
        keepalive_time[channel] = 0;
 8018fc4:	498d      	ldr	r1, [pc, #564]	; (80191fc <ether_to_uart+0x294>)
        inactivity_time[channel] = 0;
 8018fc6:	8013      	strh	r3, [r2, #0]
        flag_sent_first_keepalive[channel] = DISABLE;
 8018fc8:	4a8d      	ldr	r2, [pc, #564]	; (8019200 <ether_to_uart+0x298>)
        keepalive_time[channel] = 0;
 8018fca:	800b      	strh	r3, [r1, #0]
        flag_sent_first_keepalive[channel] = DISABLE;
 8018fcc:	7013      	strb	r3, [r2, #0]
    if(len > 0)
 8018fce:	2800      	cmp	r0, #0
 8018fd0:	d166      	bne.n	80190a0 <ether_to_uart+0x138>
    if((network_connection[channel].working_state == TCP_SERVER_MODE) ||
 8018fd2:	f898 303c 	ldrb.w	r3, [r8, #60]	; 0x3c
 8018fd6:	2b01      	cmp	r3, #1
 8018fd8:	d036      	beq.n	8019048 <ether_to_uart+0xe0>
 8018fda:	2b02      	cmp	r3, #2
 8018fdc:	f000 808f 	beq.w	80190fe <ether_to_uart+0x196>
    if(e2u_size[channel] != 0)
 8018fe0:	8823      	ldrh	r3, [r4, #0]
 8018fe2:	b34b      	cbz	r3, 8019038 <ether_to_uart+0xd0>
        if(serial_option[channel].dsr_en == SEG_ENABLE) // DTR / DSR handshake (flow control)
 8018fe4:	f899 30f0 	ldrb.w	r3, [r9, #240]	; 0xf0
 8018fe8:	2b01      	cmp	r3, #1
 8018fea:	f000 80d3 	beq.w	8019194 <ether_to_uart+0x22c>
        if(serial_option->flow_control == flow_xon_xoff)
 8018fee:	f899 30ee 	ldrb.w	r3, [r9, #238]	; 0xee
 8018ff2:	2b01      	cmp	r3, #1
 8018ff4:	f000 80b0 	beq.w	8019158 <ether_to_uart+0x1f0>
            if((serial_common->serial_debug_en == SEG_DEBUG_E2S) || (serial_common->serial_debug_en == SEG_DEBUG_ALL))
 8018ff8:	f89a 30e2 	ldrb.w	r3, [sl, #226]	; 0xe2
 8018ffc:	3b03      	subs	r3, #3
 8018ffe:	2b01      	cmp	r3, #1
 8019000:	f240 80d5 	bls.w	80191ae <ether_to_uart+0x246>
            for(i = 0; i < e2u_size[channel]; i++) uart_putc(uartNum, g_recv_buf[i]);
 8019004:	8823      	ldrh	r3, [r4, #0]
 8019006:	b1ab      	cbz	r3, 8019034 <ether_to_uart+0xcc>
 8019008:	2600      	movs	r6, #0
 801900a:	4f7e      	ldr	r7, [pc, #504]	; (8019204 <ether_to_uart+0x29c>)
 801900c:	b2b3      	uxth	r3, r6
 801900e:	5cf9      	ldrb	r1, [r7, r3]
 8019010:	4628      	mov	r0, r5
 8019012:	f7fe fe5b 	bl	8017ccc <uart_putc>
 8019016:	3601      	adds	r6, #1
 8019018:	8823      	ldrh	r3, [r4, #0]
 801901a:	b2b2      	uxth	r2, r6
 801901c:	4293      	cmp	r3, r2
 801901e:	d8f5      	bhi.n	801900c <ether_to_uart+0xa4>
    if(len > 0)
 8019020:	b143      	cbz	r3, 8019034 <ether_to_uart+0xcc>
        if(seg_byte_cnt[channel][dir] < SEG_MEGABYTE)
 8019022:	4a79      	ldr	r2, [pc, #484]	; (8019208 <ether_to_uart+0x2a0>)
 8019024:	68d1      	ldr	r1, [r2, #12]
 8019026:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801902a:	f080 80b9 	bcs.w	80191a0 <ether_to_uart+0x238>
            seg_byte_cnt[channel][dir] += len;
 801902e:	68d1      	ldr	r1, [r2, #12]
 8019030:	440b      	add	r3, r1
 8019032:	60d3      	str	r3, [r2, #12]
                e2u_size[channel] = 0;
 8019034:	2300      	movs	r3, #0
 8019036:	8023      	strh	r3, [r4, #0]
}
 8019038:	b007      	add	sp, #28
 801903a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((network_connection[channel].working_state == TCP_SERVER_MODE) ||
 801903e:	f898 303c 	ldrb.w	r3, [r8, #60]	; 0x3c
 8019042:	4c6c      	ldr	r4, [pc, #432]	; (80191f4 <ether_to_uart+0x28c>)
 8019044:	2b01      	cmp	r3, #1
 8019046:	d1c8      	bne.n	8018fda <ether_to_uart+0x72>
        if((tcp_option[channel].pw_connect_en == SEG_ENABLE) && (flag_connect_pw_auth[channel] == SEG_DISABLE))
 8019048:	f89b 80e0 	ldrb.w	r8, [fp, #224]	; 0xe0
 801904c:	f1b8 0f01 	cmp.w	r8, #1
 8019050:	d1c6      	bne.n	8018fe0 <ether_to_uart+0x78>
 8019052:	4b6e      	ldr	r3, [pc, #440]	; (801920c <ether_to_uart+0x2a4>)
 8019054:	f893 b000 	ldrb.w	fp, [r3]
 8019058:	f1bb 0f00 	cmp.w	fp, #0
 801905c:	d1c0      	bne.n	8018fe0 <ether_to_uart+0x78>
    struct __tcp_option *tcp_option = (struct __tcp_option *)get_DevConfig_pointer()->tcp_option;
 801905e:	f7fa ffe9 	bl	8014034 <get_DevConfig_pointer>
    memcpy(pwbuf, buf, len);
 8019062:	2e0a      	cmp	r6, #10
 8019064:	bf28      	it	cs
 8019066:	260a      	movcs	r6, #10
 8019068:	b2b6      	uxth	r6, r6
 801906a:	4632      	mov	r2, r6
 801906c:	4965      	ldr	r1, [pc, #404]	; (8019204 <ether_to_uart+0x29c>)
    if((len == strlen(tcp_option[channel].pw_connect)) && (memcmp(tcp_option[channel].pw_connect, pwbuf, len) == 0))
 801906e:	f100 05d6 	add.w	r5, r0, #214	; 0xd6
    memcpy(pwbuf, buf, len);
 8019072:	a803      	add	r0, sp, #12
    uint8_t pwbuf[11] = {0,};
 8019074:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8019078:	f8cd b013 	str.w	fp, [sp, #19]
    memcpy(pwbuf, buf, len);
 801907c:	f016 fecc 	bl	802fe18 <memcpy>
    if((len == strlen(tcp_option[channel].pw_connect)) && (memcmp(tcp_option[channel].pw_connect, pwbuf, len) == 0))
 8019080:	4628      	mov	r0, r5
 8019082:	f7f7 f8e3 	bl	801024c <strlen>
 8019086:	4286      	cmp	r6, r0
 8019088:	4b60      	ldr	r3, [pc, #384]	; (801920c <ether_to_uart+0x2a4>)
 801908a:	f000 809f 	beq.w	80191cc <ether_to_uart+0x264>
                flag_connect_pw_auth[channel] = SEG_DISABLE;
 801908e:	2200      	movs	r2, #0
                disconnect(sock);
 8019090:	4638      	mov	r0, r7
                flag_connect_pw_auth[channel] = SEG_DISABLE;
 8019092:	701a      	strb	r2, [r3, #0]
            e2u_size[channel] = 0;
 8019094:	8022      	strh	r2, [r4, #0]
}
 8019096:	b007      	add	sp, #28
 8019098:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                disconnect(sock);
 801909c:	f002 b9cc 	b.w	801b438 <disconnect>
        if(seg_byte_cnt[channel][dir] < SEG_MEGABYTE)
 80190a0:	4a59      	ldr	r2, [pc, #356]	; (8019208 <ether_to_uart+0x2a0>)
 80190a2:	6891      	ldr	r1, [r2, #8]
 80190a4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80190a8:	d250      	bcs.n	801914c <ether_to_uart+0x1e4>
            seg_byte_cnt[channel][dir] += len;
 80190aa:	6893      	ldr	r3, [r2, #8]
 80190ac:	4418      	add	r0, r3
 80190ae:	6090      	str	r0, [r2, #8]
 80190b0:	e78f      	b.n	8018fd2 <ether_to_uart+0x6a>
                e2u_size[channel] = recvfrom(sock, g_recv_buf, len, peerip[channel], &peerport[channel]);
 80190b2:	4a57      	ldr	r2, [pc, #348]	; (8019210 <ether_to_uart+0x2a8>)
 80190b4:	4b57      	ldr	r3, [pc, #348]	; (8019214 <ether_to_uart+0x2ac>)
 80190b6:	4953      	ldr	r1, [pc, #332]	; (8019204 <ether_to_uart+0x29c>)
 80190b8:	9200      	str	r2, [sp, #0]
 80190ba:	4638      	mov	r0, r7
 80190bc:	4632      	mov	r2, r6
 80190be:	f002 fcf9 	bl	801bab4 <recvfrom>
                if(memcmp(peerip_tmp[channel], peerip[channel], 4) !=  0)
 80190c2:	4b55      	ldr	r3, [pc, #340]	; (8019218 <ether_to_uart+0x2b0>)
 80190c4:	4a53      	ldr	r2, [pc, #332]	; (8019214 <ether_to_uart+0x2ac>)
 80190c6:	6819      	ldr	r1, [r3, #0]
 80190c8:	6812      	ldr	r2, [r2, #0]
                e2u_size[channel] = recvfrom(sock, g_recv_buf, len, peerip[channel], &peerport[channel]);
 80190ca:	4c4a      	ldr	r4, [pc, #296]	; (80191f4 <ether_to_uart+0x28c>)
 80190cc:	b280      	uxth	r0, r0
                if(memcmp(peerip_tmp[channel], peerip[channel], 4) !=  0)
 80190ce:	428a      	cmp	r2, r1
                e2u_size[channel] = recvfrom(sock, g_recv_buf, len, peerip[channel], &peerport[channel]);
 80190d0:	8020      	strh	r0, [r4, #0]
                if(memcmp(peerip_tmp[channel], peerip[channel], 4) !=  0)
 80190d2:	f43f af75 	beq.w	8018fc0 <ether_to_uart+0x58>
                    if(serial_common->serial_debug_en)
 80190d6:	f89a 10e2 	ldrb.w	r1, [sl, #226]	; 0xe2
                    memcpy(peerip_tmp[channel], peerip[channel], 4);
 80190da:	601a      	str	r2, [r3, #0]
                    if(serial_common->serial_debug_en)
 80190dc:	2900      	cmp	r1, #0
 80190de:	f43f af6f 	beq.w	8018fc0 <ether_to_uart+0x58>
                        printf(" > UDP Peer IP/Port: %d.%d.%d.%d : %d\r\n",
 80190e2:	494c      	ldr	r1, [pc, #304]	; (8019214 <ether_to_uart+0x2ac>)
 80190e4:	4b4a      	ldr	r3, [pc, #296]	; (8019210 <ether_to_uart+0x2a8>)
 80190e6:	484d      	ldr	r0, [pc, #308]	; (801921c <ether_to_uart+0x2b4>)
 80190e8:	881a      	ldrh	r2, [r3, #0]
 80190ea:	78cb      	ldrb	r3, [r1, #3]
 80190ec:	e9cd 3200 	strd	r3, r2, [sp]
 80190f0:	788b      	ldrb	r3, [r1, #2]
 80190f2:	784a      	ldrb	r2, [r1, #1]
 80190f4:	7809      	ldrb	r1, [r1, #0]
 80190f6:	f016 ff77 	bl	802ffe8 <iprintf>
 80190fa:	8820      	ldrh	r0, [r4, #0]
 80190fc:	e760      	b.n	8018fc0 <ether_to_uart+0x58>
      ((network_connection[channel].working_state == TCP_MIXED_MODE) && (mixed_state[channel] == MIXED_SERVER)))
 80190fe:	4b48      	ldr	r3, [pc, #288]	; (8019220 <ether_to_uart+0x2b8>)
 8019100:	781b      	ldrb	r3, [r3, #0]
 8019102:	2b00      	cmp	r3, #0
 8019104:	f47f af6c 	bne.w	8018fe0 <ether_to_uart+0x78>
        if((tcp_option[channel].pw_connect_en == SEG_ENABLE) && (flag_connect_pw_auth[channel] == SEG_DISABLE))
 8019108:	f89b 80e0 	ldrb.w	r8, [fp, #224]	; 0xe0
 801910c:	f1b8 0f01 	cmp.w	r8, #1
 8019110:	f47f af66 	bne.w	8018fe0 <ether_to_uart+0x78>
 8019114:	e79d      	b.n	8019052 <ether_to_uart+0xea>
        switch(getSn_SR(sock))
 8019116:	0238      	lsls	r0, r7, #8
 8019118:	f200 4003 	addw	r0, r0, #1027	; 0x403
 801911c:	f001 fd28 	bl	801ab70 <WIZCHIP_READ>
 8019120:	281c      	cmp	r0, #28
    if(len > DATA_BUF_SIZE) len = DATA_BUF_SIZE; // avoiding buffer overflow
 8019122:	f44f 6600 	mov.w	r6, #2048	; 0x800
        switch(getSn_SR(sock))
 8019126:	f47f af44 	bne.w	8018fb2 <ether_to_uart+0x4a>
                if (network_connection->working_mode == SSL_TCP_CLIENT_MODE)
 801912a:	f898 303b 	ldrb.w	r3, [r8, #59]	; 0x3b
 801912e:	2b04      	cmp	r3, #4
 8019130:	d043      	beq.n	80191ba <ether_to_uart+0x252>
                else if ((network_connection->working_mode == MQTT_CLIENT_MODE) || (network_connection->working_mode == MQTTS_CLIENT_MODE))
 8019132:	3b05      	subs	r3, #5
 8019134:	2b01      	cmp	r3, #1
 8019136:	f67f af41 	bls.w	8018fbc <ether_to_uart+0x54>
                    e2u_size[channel] = recv(sock, g_recv_buf, len);
 801913a:	4632      	mov	r2, r6
 801913c:	4638      	mov	r0, r7
 801913e:	4931      	ldr	r1, [pc, #196]	; (8019204 <ether_to_uart+0x29c>)
 8019140:	f002 fad6 	bl	801b6f0 <recv>
 8019144:	4c2b      	ldr	r4, [pc, #172]	; (80191f4 <ether_to_uart+0x28c>)
 8019146:	b280      	uxth	r0, r0
 8019148:	8020      	strh	r0, [r4, #0]
 801914a:	e739      	b.n	8018fc0 <ether_to_uart+0x58>
            seg_mega_cnt[channel][dir]++;
 801914c:	4835      	ldr	r0, [pc, #212]	; (8019224 <ether_to_uart+0x2bc>)
 801914e:	6881      	ldr	r1, [r0, #8]
 8019150:	3101      	adds	r1, #1
 8019152:	6081      	str	r1, [r0, #8]
            seg_byte_cnt[channel][dir] = 0;
 8019154:	6093      	str	r3, [r2, #8]
 8019156:	e73c      	b.n	8018fd2 <ether_to_uart+0x6a>
            if(isXON[channel] == SEG_ENABLE)
 8019158:	4b33      	ldr	r3, [pc, #204]	; (8019228 <ether_to_uart+0x2c0>)
 801915a:	781b      	ldrb	r3, [r3, #0]
 801915c:	2b01      	cmp	r3, #1
 801915e:	f47f af6b 	bne.w	8019038 <ether_to_uart+0xd0>
                if((serial_common->serial_debug_en == SEG_DEBUG_E2S) || (serial_common->serial_debug_en == SEG_DEBUG_ALL))
 8019162:	f89a 30e2 	ldrb.w	r3, [sl, #226]	; 0xe2
 8019166:	3b03      	subs	r3, #3
 8019168:	2b01      	cmp	r3, #1
 801916a:	d93c      	bls.n	80191e6 <ether_to_uart+0x27e>
                for(i = 0; i < e2u_size[channel]; i++) uart_putc(uartNum, g_recv_buf[i]);
 801916c:	8823      	ldrh	r3, [r4, #0]
 801916e:	2b00      	cmp	r3, #0
 8019170:	f43f af60 	beq.w	8019034 <ether_to_uart+0xcc>
 8019174:	2600      	movs	r6, #0
 8019176:	4f23      	ldr	r7, [pc, #140]	; (8019204 <ether_to_uart+0x29c>)
 8019178:	b2b3      	uxth	r3, r6
 801917a:	5cf9      	ldrb	r1, [r7, r3]
 801917c:	4628      	mov	r0, r5
 801917e:	f7fe fda5 	bl	8017ccc <uart_putc>
 8019182:	3601      	adds	r6, #1
 8019184:	8823      	ldrh	r3, [r4, #0]
 8019186:	b2b2      	uxth	r2, r6
 8019188:	4293      	cmp	r3, r2
 801918a:	d8f5      	bhi.n	8019178 <ether_to_uart+0x210>
    if(len > 0)
 801918c:	2b00      	cmp	r3, #0
 801918e:	f47f af48 	bne.w	8019022 <ether_to_uart+0xba>
 8019192:	e74f      	b.n	8019034 <ether_to_uart+0xcc>
            if(get_flowcontrol_dsr_pin() == IO_LOW) return;
 8019194:	f7fe fa14 	bl	80175c0 <get_flowcontrol_dsr_pin>
 8019198:	2800      	cmp	r0, #0
 801919a:	f47f af28 	bne.w	8018fee <ether_to_uart+0x86>
 801919e:	e74b      	b.n	8019038 <ether_to_uart+0xd0>
            seg_byte_cnt[channel][dir] = 0;
 80191a0:	2000      	movs	r0, #0
            seg_mega_cnt[channel][dir]++;
 80191a2:	4920      	ldr	r1, [pc, #128]	; (8019224 <ether_to_uart+0x2bc>)
 80191a4:	68cb      	ldr	r3, [r1, #12]
 80191a6:	3301      	adds	r3, #1
 80191a8:	60cb      	str	r3, [r1, #12]
            seg_byte_cnt[channel][dir] = 0;
 80191aa:	60d0      	str	r0, [r2, #12]
 80191ac:	e742      	b.n	8019034 <ether_to_uart+0xcc>
                debugSerial_dataTransfer(g_recv_buf, e2u_size[channel], SEG_DEBUG_E2S);
 80191ae:	2203      	movs	r2, #3
 80191b0:	8821      	ldrh	r1, [r4, #0]
 80191b2:	4814      	ldr	r0, [pc, #80]	; (8019204 <ether_to_uart+0x29c>)
 80191b4:	f7ff f9b4 	bl	8018520 <debugSerial_dataTransfer>
 80191b8:	e724      	b.n	8019004 <ether_to_uart+0x9c>
                    e2u_size[channel] = wiz_tls_read(&s2e_tlsContext, g_recv_buf, len);
 80191ba:	4632      	mov	r2, r6
 80191bc:	4911      	ldr	r1, [pc, #68]	; (8019204 <ether_to_uart+0x29c>)
 80191be:	481b      	ldr	r0, [pc, #108]	; (801922c <ether_to_uart+0x2c4>)
 80191c0:	f005 fd12 	bl	801ebe8 <wiz_tls_read>
 80191c4:	4c0b      	ldr	r4, [pc, #44]	; (80191f4 <ether_to_uart+0x28c>)
 80191c6:	b280      	uxth	r0, r0
 80191c8:	8020      	strh	r0, [r4, #0]
 80191ca:	e6f9      	b.n	8018fc0 <ether_to_uart+0x58>
    if((len == strlen(tcp_option[channel].pw_connect)) && (memcmp(tcp_option[channel].pw_connect, pwbuf, len) == 0))
 80191cc:	4632      	mov	r2, r6
 80191ce:	4628      	mov	r0, r5
 80191d0:	a903      	add	r1, sp, #12
 80191d2:	f016 fe13 	bl	802fdfc <memcmp>
 80191d6:	4b0d      	ldr	r3, [pc, #52]	; (801920c <ether_to_uart+0x2a4>)
 80191d8:	2800      	cmp	r0, #0
 80191da:	f47f af58 	bne.w	801908e <ether_to_uart+0x126>
                flag_connect_pw_auth[channel] = SEG_ENABLE;
 80191de:	f883 8000 	strb.w	r8, [r3]
            e2u_size[channel] = 0;
 80191e2:	8020      	strh	r0, [r4, #0]
            if(flag_connect_pw_auth[channel] == SEG_DISABLE)
 80191e4:	e728      	b.n	8019038 <ether_to_uart+0xd0>
                    debugSerial_dataTransfer(g_recv_buf, e2u_size[channel], SEG_DEBUG_E2S);
 80191e6:	2203      	movs	r2, #3
 80191e8:	8821      	ldrh	r1, [r4, #0]
 80191ea:	4806      	ldr	r0, [pc, #24]	; (8019204 <ether_to_uart+0x29c>)
 80191ec:	f7ff f998 	bl	8018520 <debugSerial_dataTransfer>
 80191f0:	e7bc      	b.n	801916c <ether_to_uart+0x204>
 80191f2:	bf00      	nop
 80191f4:	200198ec 	.word	0x200198ec
 80191f8:	2001991c 	.word	0x2001991c
 80191fc:	20019924 	.word	0x20019924
 8019200:	2001990c 	.word	0x2001990c
 8019204:	2001ddbc 	.word	0x2001ddbc
 8019208:	20019938 	.word	0x20019938
 801920c:	20019904 	.word	0x20019904
 8019210:	20019930 	.word	0x20019930
 8019214:	2001992c 	.word	0x2001992c
 8019218:	20018218 	.word	0x20018218
 801921c:	08033638 	.word	0x08033638
 8019220:	20019928 	.word	0x20019928
 8019224:	20019948 	.word	0x20019948
 8019228:	20018210 	.word	0x20018210
 801922c:	2001fe58 	.word	0x2001fe58

08019230 <proc_SEG_udp>:
{
 8019230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019234:	460c      	mov	r4, r1
 8019236:	4605      	mov	r5, r0
    struct __network_connection *network_connection = (struct __network_connection *)get_DevConfig_pointer()->network_connection;
 8019238:	f7fa fefc 	bl	8014034 <get_DevConfig_pointer>
 801923c:	4606      	mov	r6, r0
    struct __serial_common *serial_common = (struct __serial_common *)&get_DevConfig_pointer()->serial_common;
 801923e:	f7fa fef9 	bl	8014034 <get_DevConfig_pointer>
 8019242:	4607      	mov	r7, r0
    struct __serial_data_packing *serial_data_packing = (struct __serial_data_packing *)get_DevConfig_pointer()->serial_data_packing;
 8019244:	f7fa fef6 	bl	8014034 <get_DevConfig_pointer>
 8019248:	4680      	mov	r8, r0
    struct __serial_option *serial_option = (struct __serial_option *)&(get_DevConfig_pointer()->serial_option);
 801924a:	f7fa fef3 	bl	8014034 <get_DevConfig_pointer>
 801924e:	4603      	mov	r3, r0
    uint8_t state = getSn_SR(sock);
 8019250:	0220      	lsls	r0, r4, #8
 8019252:	f200 4003 	addw	r0, r0, #1027	; 0x403
    return serial_option[channel].protocol;
 8019256:	f893 90e9 	ldrb.w	r9, [r3, #233]	; 0xe9
    uint8_t state = getSn_SR(sock);
 801925a:	f001 fc89 	bl	801ab70 <WIZCHIP_READ>
    switch(state)
 801925e:	b130      	cbz	r0, 801926e <proc_SEG_udp+0x3e>
 8019260:	2822      	cmp	r0, #34	; 0x22
 8019262:	d102      	bne.n	801926a <proc_SEG_udp+0x3a>
            if(serial_mode == SEG_SERIAL_PROTOCOL_NONE)
 8019264:	f1b9 0f00 	cmp.w	r9, #0
 8019268:	d02c      	beq.n	80192c4 <proc_SEG_udp+0x94>
}
 801926a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            if(serial_mode == SEG_SERIAL_PROTOCOL_NONE)
 801926e:	f1b9 0f00 	cmp.w	r9, #0
 8019272:	d042      	beq.n	80192fa <proc_SEG_udp+0xca>
            u2e_size[channel] = 0;
 8019274:	2500      	movs	r5, #0
 8019276:	4a23      	ldr	r2, [pc, #140]	; (8019304 <proc_SEG_udp+0xd4>)
            e2u_size[channel] = 0;
 8019278:	4b23      	ldr	r3, [pc, #140]	; (8019308 <proc_SEG_udp+0xd8>)
            u2e_size[channel] = 0;
 801927a:	8015      	strh	r5, [r2, #0]
            e2u_size[channel] = 0;
 801927c:	801d      	strh	r5, [r3, #0]
            if(socket(sock, Sn_MR_UDP, network_connection[channel].local_port, 0) == sock)
 801927e:	2102      	movs	r1, #2
 8019280:	462b      	mov	r3, r5
 8019282:	4620      	mov	r0, r4
 8019284:	f8b6 203d 	ldrh.w	r2, [r6, #61]	; 0x3d
 8019288:	f001 feea 	bl	801b060 <socket>
 801928c:	4284      	cmp	r4, r0
 801928e:	d1ec      	bne.n	801926a <proc_SEG_udp+0x3a>
    struct __network_connection *network_connection = (struct __network_connection *)get_DevConfig_pointer()->network_connection;
 8019290:	f7fa fed0 	bl	8014034 <get_DevConfig_pointer>
            network_connection[channel].working_state = ST_UDP;
 8019294:	2305      	movs	r3, #5
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, OFF); // Status I/O pin to high
 8019296:	462a      	mov	r2, r5
            network_connection[channel].working_state = ST_UDP;
 8019298:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, OFF); // Status I/O pin to high
 801929c:	4629      	mov	r1, r5
 801929e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80192a2:	f7fe f931 	bl	8017508 <set_connection_status_io>
                if(serial_data_packing->packing_time)
 80192a6:	f8b8 30f1 	ldrh.w	r3, [r8, #241]	; 0xf1
 80192aa:	b29a      	uxth	r2, r3
 80192ac:	b10a      	cbz	r2, 80192b2 <proc_SEG_udp+0x82>
                    modeswitch_gap_time = serial_data_packing->packing_time; // replace the GAP time (default: 500ms)
 80192ae:	4a17      	ldr	r2, [pc, #92]	; (801930c <proc_SEG_udp+0xdc>)
 80192b0:	8013      	strh	r3, [r2, #0]
                if(serial_common->serial_debug_en)
 80192b2:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 80192b6:	2b00      	cmp	r3, #0
 80192b8:	d0d7      	beq.n	801926a <proc_SEG_udp+0x3a>
}
 80192ba:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
                    printf(" > SEG:UDP_MODE:SOCKOPEN\r\n");
 80192be:	4814      	ldr	r0, [pc, #80]	; (8019310 <proc_SEG_udp+0xe0>)
 80192c0:	f016 bf18 	b.w	80300f4 <puts>
                if(get_uart_buffer_usedsize(uartNum) || u2e_size[channel])
 80192c4:	4628      	mov	r0, r5
 80192c6:	f7fe fda1 	bl	8017e0c <get_uart_buffer_usedsize>
 80192ca:	4b0e      	ldr	r3, [pc, #56]	; (8019304 <proc_SEG_udp+0xd4>)
 80192cc:	881b      	ldrh	r3, [r3, #0]
 80192ce:	4318      	orrs	r0, r3
 80192d0:	b280      	uxth	r0, r0
 80192d2:	b118      	cbz	r0, 80192dc <proc_SEG_udp+0xac>
                    uart_to_ether(uartNum, sock);
 80192d4:	4621      	mov	r1, r4
 80192d6:	4628      	mov	r0, r5
 80192d8:	f7ff f97e 	bl	80185d8 <uart_to_ether>
                if(getSn_RX_RSR(sock) || e2u_size[channel])
 80192dc:	4620      	mov	r0, r4
 80192de:	f001 fcdf 	bl	801aca0 <getSn_RX_RSR>
 80192e2:	4b09      	ldr	r3, [pc, #36]	; (8019308 <proc_SEG_udp+0xd8>)
 80192e4:	881b      	ldrh	r3, [r3, #0]
 80192e6:	4318      	orrs	r0, r3
 80192e8:	b280      	uxth	r0, r0
 80192ea:	2800      	cmp	r0, #0
 80192ec:	d0bd      	beq.n	801926a <proc_SEG_udp+0x3a>
                    ether_to_uart(uartNum, sock);
 80192ee:	4621      	mov	r1, r4
 80192f0:	4628      	mov	r0, r5
}
 80192f2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
                    ether_to_uart(uartNum, sock);
 80192f6:	f7ff be37 	b.w	8018f68 <ether_to_uart>
                uart_rx_flush(uartNum);
 80192fa:	4628      	mov	r0, r5
 80192fc:	f7fe fd60 	bl	8017dc0 <uart_rx_flush>
 8019300:	e7b8      	b.n	8019274 <proc_SEG_udp+0x44>
 8019302:	bf00      	nop
 8019304:	20019960 	.word	0x20019960
 8019308:	200198ec 	.word	0x200198ec
 801930c:	20018212 	.word	0x20018212
 8019310:	08033660 	.word	0x08033660

08019314 <proc_SEG_tcp_client>:
{
 8019314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019318:	b08b      	sub	sp, #44	; 0x2c
 801931a:	460c      	mov	r4, r1
 801931c:	4605      	mov	r5, r0
    struct __tcp_option *tcp_option = (struct __tcp_option *)get_DevConfig_pointer()->tcp_option;
 801931e:	f7fa fe89 	bl	8014034 <get_DevConfig_pointer>
 8019322:	4606      	mov	r6, r0
    struct __network_connection *network_connection = (struct __network_connection *)get_DevConfig_pointer()->network_connection;
 8019324:	f7fa fe86 	bl	8014034 <get_DevConfig_pointer>
 8019328:	4607      	mov	r7, r0
    struct __serial_data_packing *serial_data_packing = (struct __serial_data_packing *)get_DevConfig_pointer()->serial_data_packing;
 801932a:	f7fa fe83 	bl	8014034 <get_DevConfig_pointer>
 801932e:	9005      	str	r0, [sp, #20]
    struct __serial_common *serial_common = (struct __serial_common *)&get_DevConfig_pointer()->serial_common;
 8019330:	f7fa fe80 	bl	8014034 <get_DevConfig_pointer>
 8019334:	4680      	mov	r8, r0
    struct __serial_command *serial_command = (struct __serial_command *)&get_DevConfig_pointer()->serial_command;
 8019336:	f7fa fe7d 	bl	8014034 <get_DevConfig_pointer>
 801933a:	4681      	mov	r9, r0
    struct __device_option *device_option = (struct __device_option *)&(get_DevConfig_pointer()->device_option);
 801933c:	f7fa fe7a 	bl	8014034 <get_DevConfig_pointer>
    uint8_t destip[4] = {0, };
 8019340:	2300      	movs	r3, #0
 8019342:	9308      	str	r3, [sp, #32]
    uint16_t destport = 0;
 8019344:	f8ad 301e 	strh.w	r3, [sp, #30]
    struct __serial_option *serial_option = (struct __serial_option *)&(get_DevConfig_pointer()->serial_option);
 8019348:	f7fa fe74 	bl	8014034 <get_DevConfig_pointer>
 801934c:	4602      	mov	r2, r0
    uint8_t state = getSn_SR(sock);
 801934e:	1d23      	adds	r3, r4, #4
 8019350:	ea4f 2a03 	mov.w	sl, r3, lsl #8
 8019354:	f10a 0003 	add.w	r0, sl, #3
    return serial_option[channel].protocol;
 8019358:	f892 b0e9 	ldrb.w	fp, [r2, #233]	; 0xe9
    uint8_t state = getSn_SR(sock);
 801935c:	f001 fc08 	bl	801ab70 <WIZCHIP_READ>
    switch(state)
 8019360:	281c      	cmp	r0, #28
 8019362:	d843      	bhi.n	80193ec <proc_SEG_tcp_client+0xd8>
 8019364:	e8df f010 	tbh	[pc, r0, lsl #1]
 8019368:	00420045 	.word	0x00420045
 801936c:	00420042 	.word	0x00420042
 8019370:	00420042 	.word	0x00420042
 8019374:	00420042 	.word	0x00420042
 8019378:	00420042 	.word	0x00420042
 801937c:	00420042 	.word	0x00420042
 8019380:	00420042 	.word	0x00420042
 8019384:	00420042 	.word	0x00420042
 8019388:	00420042 	.word	0x00420042
 801938c:	00f90042 	.word	0x00f90042
 8019390:	00420042 	.word	0x00420042
 8019394:	00ac0042 	.word	0x00ac0042
 8019398:	00420045 	.word	0x00420045
 801939c:	00420042 	.word	0x00420042
 80193a0:	0094      	.short	0x0094
    else if((network_connection[channel].remote_ip[0] == 0x00) &&
 80193a2:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
 80193a6:	2900      	cmp	r1, #0
 80193a8:	f040 821d 	bne.w	80197e6 <proc_SEG_tcp_client+0x4d2>
            (network_connection[channel].remote_ip[1] == 0x00) &&
 80193ac:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
    else if((network_connection[channel].remote_ip[0] == 0x00) &&
 80193b0:	b92a      	cbnz	r2, 80193be <proc_SEG_tcp_client+0xaa>
            (network_connection[channel].remote_ip[1] == 0x00) &&
 80193b2:	f895 c043 	ldrb.w	ip, [r5, #67]	; 0x43
 80193b6:	f1bc 0f00 	cmp.w	ip, #0
 80193ba:	f000 8103 	beq.w	80195c4 <proc_SEG_tcp_client+0x2b0>
    else if((srcip[0] == network_connection[channel].remote_ip[0]) &&
 80193be:	4290      	cmp	r0, r2
 80193c0:	f040 820f 	bne.w	80197e2 <proc_SEG_tcp_client+0x4ce>
            (srcip[1] == network_connection[channel].remote_ip[1]) &&
 80193c4:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 80193c8:	f895 2043 	ldrb.w	r2, [r5, #67]	; 0x43
 80193cc:	4290      	cmp	r0, r2
 80193ce:	f040 8208 	bne.w	80197e2 <proc_SEG_tcp_client+0x4ce>
            (srcip[2] == network_connection[channel].remote_ip[2]) &&
 80193d2:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
 80193d6:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
 80193da:	4290      	cmp	r0, r2
 80193dc:	f040 8201 	bne.w	80197e2 <proc_SEG_tcp_client+0x4ce>
        if(serial_common->serial_debug_en) printf(" > SEG:CONNECTION FAILED - Duplicate IP address\r\n");
 80193e0:	f896 30e2 	ldrb.w	r3, [r6, #226]	; 0xe2
 80193e4:	b113      	cbz	r3, 80193ec <proc_SEG_tcp_client+0xd8>
 80193e6:	48bc      	ldr	r0, [pc, #752]	; (80196d8 <proc_SEG_tcp_client+0x3c4>)
 80193e8:	f016 fe84 	bl	80300f4 <puts>
}
 80193ec:	b00b      	add	sp, #44	; 0x2c
 80193ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    struct __network_connection *network_connection = (struct __network_connection *)get_DevConfig_pointer()->network_connection;
 80193f2:	f7fa fe1f 	bl	8014034 <get_DevConfig_pointer>
            network_connection[channel].working_state = ST_OPEN;
 80193f6:	2301      	movs	r3, #1
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, OFF); // Status I/O pin to high
 80193f8:	2200      	movs	r2, #0
            network_connection[channel].working_state = ST_OPEN;
 80193fa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, OFF); // Status I/O pin to high
 80193fe:	4611      	mov	r1, r2
 8019400:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8019404:	f7fe f880 	bl	8017508 <set_connection_status_io>
    enable_inactivity_timer[channel] = SEG_DISABLE;
 8019408:	2300      	movs	r3, #0
    inactivity_time[channel] = 0;
 801940a:	4ab4      	ldr	r2, [pc, #720]	; (80196dc <proc_SEG_tcp_client+0x3c8>)
    serial_input_time[channel] = 0;
 801940c:	49b4      	ldr	r1, [pc, #720]	; (80196e0 <proc_SEG_tcp_client+0x3cc>)
    inactivity_time[channel] = 0;
 801940e:	8013      	strh	r3, [r2, #0]
    keepalive_time[channel] = 0;
 8019410:	48b4      	ldr	r0, [pc, #720]	; (80196e4 <proc_SEG_tcp_client+0x3d0>)
    serial_input_time[channel] = 0;
 8019412:	800b      	strh	r3, [r1, #0]
    enable_inactivity_timer[channel] = SEG_DISABLE;
 8019414:	4ab4      	ldr	r2, [pc, #720]	; (80196e8 <proc_SEG_tcp_client+0x3d4>)
    enable_serial_input_timer[channel] = SEG_DISABLE;
 8019416:	49b5      	ldr	r1, [pc, #724]	; (80196ec <proc_SEG_tcp_client+0x3d8>)
    keepalive_time[channel] = 0;
 8019418:	8003      	strh	r3, [r0, #0]
    enable_inactivity_timer[channel] = SEG_DISABLE;
 801941a:	7013      	strb	r3, [r2, #0]
    enable_serial_input_timer[channel] = SEG_DISABLE;
 801941c:	700b      	strb	r3, [r1, #0]
    enable_keepalive_timer[channel] = SEG_DISABLE;
 801941e:	48b4      	ldr	r0, [pc, #720]	; (80196f0 <proc_SEG_tcp_client+0x3dc>)
    enable_connection_auth_timer[channel] = SEG_DISABLE;
 8019420:	4ab4      	ldr	r2, [pc, #720]	; (80196f4 <proc_SEG_tcp_client+0x3e0>)
    flag_serial_input_time_elapse[channel] = SEG_DISABLE;
 8019422:	49b5      	ldr	r1, [pc, #724]	; (80196f8 <proc_SEG_tcp_client+0x3e4>)
    enable_keepalive_timer[channel] = SEG_DISABLE;
 8019424:	7003      	strb	r3, [r0, #0]
    enable_connection_auth_timer[channel] = SEG_DISABLE;
 8019426:	7013      	strb	r3, [r2, #0]
    flag_sent_keepalive[channel] = SEG_DISABLE;
 8019428:	48b4      	ldr	r0, [pc, #720]	; (80196fc <proc_SEG_tcp_client+0x3e8>)
    flag_connect_pw_auth[channel] = SEG_DISABLE; // TCP_SERVER_MODE only (+ MIXED_SERVER)
 801942a:	4ab5      	ldr	r2, [pc, #724]	; (8019700 <proc_SEG_tcp_client+0x3ec>)
    flag_serial_input_time_elapse[channel] = SEG_DISABLE;
 801942c:	700b      	strb	r3, [r1, #0]
    connection_auth_time[channel] = 0;
 801942e:	49b5      	ldr	r1, [pc, #724]	; (8019704 <proc_SEG_tcp_client+0x3f0>)
    flag_sent_keepalive[channel] = SEG_DISABLE;
 8019430:	7003      	strb	r3, [r0, #0]
    flag_connect_pw_auth[channel] = SEG_DISABLE; // TCP_SERVER_MODE only (+ MIXED_SERVER)
 8019432:	7013      	strb	r3, [r2, #0]
            u2e_size[channel] = 0;
 8019434:	48b4      	ldr	r0, [pc, #720]	; (8019708 <proc_SEG_tcp_client+0x3f4>)
            e2u_size[channel] = 0;
 8019436:	4ab5      	ldr	r2, [pc, #724]	; (801970c <proc_SEG_tcp_client+0x3f8>)
    connection_auth_time[channel] = 0;
 8019438:	800b      	strh	r3, [r1, #0]
            if(network_connection[channel].fixed_local_port)
 801943a:	f897 1045 	ldrb.w	r1, [r7, #69]	; 0x45
            u2e_size[channel] = 0;
 801943e:	8003      	strh	r3, [r0, #0]
            e2u_size[channel] = 0;
 8019440:	8013      	strh	r3, [r2, #0]
            if(network_connection[channel].fixed_local_port)
 8019442:	2900      	cmp	r1, #0
 8019444:	f000 8104 	beq.w	8019650 <proc_SEG_tcp_client+0x33c>
                source_port = network_connection[channel].local_port;
 8019448:	f8b7 203d 	ldrh.w	r2, [r7, #61]	; 0x3d
            if(socket(sock, Sn_MR_TCP, source_port, (SF_TCP_NODELAY | SF_IO_NONBLOCK)) == sock)
 801944c:	2321      	movs	r3, #33	; 0x21
 801944e:	2101      	movs	r1, #1
 8019450:	4620      	mov	r0, r4
 8019452:	f001 fe05 	bl	801b060 <socket>
 8019456:	4284      	cmp	r4, r0
 8019458:	d1c8      	bne.n	80193ec <proc_SEG_tcp_client+0xd8>
                if((serial_command->serial_command == SEG_ENABLE) && serial_data_packing[channel].packing_time)
 801945a:	f899 30e3 	ldrb.w	r3, [r9, #227]	; 0xe3
 801945e:	2b01      	cmp	r3, #1
 8019460:	f000 818a 	beq.w	8019778 <proc_SEG_tcp_client+0x464>
                if((enable_reconnection_timer[channel] == SEG_DISABLE) && tcp_option[channel].reconnection)
 8019464:	4baa      	ldr	r3, [pc, #680]	; (8019710 <proc_SEG_tcp_client+0x3fc>)
 8019466:	781a      	ldrb	r2, [r3, #0]
 8019468:	b922      	cbnz	r2, 8019474 <proc_SEG_tcp_client+0x160>
 801946a:	f8b6 20cf 	ldrh.w	r2, [r6, #207]	; 0xcf
 801946e:	b10a      	cbz	r2, 8019474 <proc_SEG_tcp_client+0x160>
                    enable_reconnection_timer[channel] = SEG_ENABLE;
 8019470:	2201      	movs	r2, #1
 8019472:	701a      	strb	r2, [r3, #0]
                if(serial_common->serial_debug_en)
 8019474:	f898 30e2 	ldrb.w	r3, [r8, #226]	; 0xe2
 8019478:	2b00      	cmp	r3, #0
 801947a:	d0b7      	beq.n	80193ec <proc_SEG_tcp_client+0xd8>
                    if(isSocketOpen_TCPclient[channel] == OFF)
 801947c:	4ca5      	ldr	r4, [pc, #660]	; (8019714 <proc_SEG_tcp_client+0x400>)
 801947e:	7823      	ldrb	r3, [r4, #0]
 8019480:	2b00      	cmp	r3, #0
 8019482:	d1b3      	bne.n	80193ec <proc_SEG_tcp_client+0xd8>
                        printf(" > SEG:TCP_CLIENT_MODE:SOCKOPEN\r\n");
 8019484:	48a4      	ldr	r0, [pc, #656]	; (8019718 <proc_SEG_tcp_client+0x404>)
 8019486:	f016 fe35 	bl	80300f4 <puts>
                        isSocketOpen_TCPclient[channel] = ON;
 801948a:	2301      	movs	r3, #1
 801948c:	7023      	strb	r3, [r4, #0]
 801948e:	e7ad      	b.n	80193ec <proc_SEG_tcp_client+0xd8>
            if(serial_mode == SEG_SERIAL_PROTOCOL_NONE)
 8019490:	f1bb 0f00 	cmp.w	fp, #0
 8019494:	d10d      	bne.n	80194b2 <proc_SEG_tcp_client+0x19e>
 8019496:	4e9d      	ldr	r6, [pc, #628]	; (801970c <proc_SEG_tcp_client+0x3f8>)
 8019498:	e003      	b.n	80194a2 <proc_SEG_tcp_client+0x18e>
                    ether_to_uart(uartNum, sock); // receive remaining packets
 801949a:	4621      	mov	r1, r4
 801949c:	4628      	mov	r0, r5
 801949e:	f7ff fd63 	bl	8018f68 <ether_to_uart>
                while(getSn_RX_RSR(sock) || e2u_size[channel])
 80194a2:	4620      	mov	r0, r4
 80194a4:	f001 fbfc 	bl	801aca0 <getSn_RX_RSR>
 80194a8:	8833      	ldrh	r3, [r6, #0]
 80194aa:	4303      	orrs	r3, r0
 80194ac:	b29b      	uxth	r3, r3
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	d1f3      	bne.n	801949a <proc_SEG_tcp_client+0x186>
            process_socket_termination(sock, 100);
 80194b2:	4620      	mov	r0, r4
 80194b4:	2164      	movs	r1, #100	; 0x64
 80194b6:	f7fe fe77 	bl	80181a8 <process_socket_termination>
}
 80194ba:	b00b      	add	sp, #44	; 0x2c
 80194bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(getSn_IR(sock) & Sn_IR_CON)
 80194c0:	f10a 0702 	add.w	r7, sl, #2
 80194c4:	4638      	mov	r0, r7
 80194c6:	f001 fb53 	bl	801ab70 <WIZCHIP_READ>
 80194ca:	07c3      	lsls	r3, r0, #31
 80194cc:	f100 8088 	bmi.w	80195e0 <proc_SEG_tcp_client+0x2cc>
 80194d0:	f8df 9214 	ldr.w	r9, [pc, #532]	; 80196e8 <proc_SEG_tcp_client+0x3d4>
            if(serial_mode == SEG_SERIAL_PROTOCOL_NONE)
 80194d4:	f1bb 0f00 	cmp.w	fp, #0
 80194d8:	f000 80d8 	beq.w	801968c <proc_SEG_tcp_client+0x378>
            if((enable_inactivity_timer[channel] == SEG_ENABLE) && (inactivity_time[channel] >= tcp_option[channel].inactivity))
 80194dc:	f899 3000 	ldrb.w	r3, [r9]
 80194e0:	2b01      	cmp	r3, #1
 80194e2:	f000 80c1 	beq.w	8019668 <proc_SEG_tcp_client+0x354>
            if((tcp_option[channel].keepalive_en == SEG_ENABLE) && (enable_keepalive_timer[channel] == SEG_ENABLE))
 80194e6:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
 80194ea:	2b01      	cmp	r3, #1
 80194ec:	f47f af7e 	bne.w	80193ec <proc_SEG_tcp_client+0xd8>
 80194f0:	4b7f      	ldr	r3, [pc, #508]	; (80196f0 <proc_SEG_tcp_client+0x3dc>)
 80194f2:	781d      	ldrb	r5, [r3, #0]
 80194f4:	2d01      	cmp	r5, #1
 80194f6:	f47f af79 	bne.w	80193ec <proc_SEG_tcp_client+0xd8>
                if((flag_sent_first_keepalive[channel] == SEG_DISABLE) &&
 80194fa:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8019728 <proc_SEG_tcp_client+0x414>
 80194fe:	f898 7000 	ldrb.w	r7, [r8]
 8019502:	2f00      	cmp	r7, #0
 8019504:	f040 81a3 	bne.w	801984e <proc_SEG_tcp_client+0x53a>
                   (keepalive_time[channel] >= tcp_option[channel].keepalive_wait_time) &&
 8019508:	4b76      	ldr	r3, [pc, #472]	; (80196e4 <proc_SEG_tcp_client+0x3d0>)
 801950a:	f8b6 10d2 	ldrh.w	r1, [r6, #210]	; 0xd2
 801950e:	881a      	ldrh	r2, [r3, #0]
 8019510:	b292      	uxth	r2, r2
                if((flag_sent_first_keepalive[channel] == SEG_DISABLE) &&
 8019512:	428a      	cmp	r2, r1
 8019514:	f4ff af6a 	bcc.w	80193ec <proc_SEG_tcp_client+0xd8>
                   (keepalive_time[channel] >= tcp_option[channel].keepalive_wait_time) &&
 8019518:	2900      	cmp	r1, #0
 801951a:	f43f af67 	beq.w	80193ec <proc_SEG_tcp_client+0xd8>
    setsockopt(sock, SO_KEEPALIVESEND, 0);
 801951e:	463a      	mov	r2, r7
 8019520:	2106      	movs	r1, #6
 8019522:	4620      	mov	r0, r4
 8019524:	9305      	str	r3, [sp, #20]
 8019526:	f002 fc0d 	bl	801bd44 <setsockopt>
                    keepalive_time[channel] = 0;
 801952a:	9b05      	ldr	r3, [sp, #20]
                    flag_sent_first_keepalive[channel] = SEG_ENABLE;
 801952c:	f888 5000 	strb.w	r5, [r8]
                    keepalive_time[channel] = 0;
 8019530:	801f      	strh	r7, [r3, #0]
                   (keepalive_time[channel] >= tcp_option[channel].keepalive_retry_time) &&
 8019532:	881a      	ldrh	r2, [r3, #0]
 8019534:	f8b6 10d4 	ldrh.w	r1, [r6, #212]	; 0xd4
 8019538:	b292      	uxth	r2, r2
                if((flag_sent_first_keepalive[channel] == SEG_ENABLE) &&
 801953a:	428a      	cmp	r2, r1
 801953c:	f4ff af56 	bcc.w	80193ec <proc_SEG_tcp_client+0xd8>
                   (keepalive_time[channel] >= tcp_option[channel].keepalive_retry_time) &&
 8019540:	2900      	cmp	r1, #0
 8019542:	f43f af53 	beq.w	80193ec <proc_SEG_tcp_client+0xd8>
    setsockopt(sock, SO_KEEPALIVESEND, 0);
 8019546:	2200      	movs	r2, #0
 8019548:	4620      	mov	r0, r4
 801954a:	2106      	movs	r1, #6
 801954c:	9305      	str	r3, [sp, #20]
 801954e:	f002 fbf9 	bl	801bd44 <setsockopt>
                    keepalive_time[channel] = 0;
 8019552:	2200      	movs	r2, #0
 8019554:	9b05      	ldr	r3, [sp, #20]
 8019556:	801a      	strh	r2, [r3, #0]
 8019558:	e748      	b.n	80193ec <proc_SEG_tcp_client+0xd8>
            if(reconnection_time[channel] >= tcp_option[channel].reconnection)
 801955a:	4a70      	ldr	r2, [pc, #448]	; (801971c <proc_SEG_tcp_client+0x408>)
 801955c:	f8b6 10cf 	ldrh.w	r1, [r6, #207]	; 0xcf
 8019560:	8813      	ldrh	r3, [r2, #0]
 8019562:	b29b      	uxth	r3, r3
 8019564:	4299      	cmp	r1, r3
 8019566:	f63f af41 	bhi.w	80193ec <proc_SEG_tcp_client+0xd8>
                reconnection_time[channel] = 0; // reconnection time variable clear
 801956a:	f04f 0900 	mov.w	r9, #0
 801956e:	f8a2 9000 	strh.w	r9, [r2]
    struct __network_option *network_option = (struct __network_option *)&get_DevConfig_pointer()->network_option;
 8019572:	f7fa fd5f 	bl	8014034 <get_DevConfig_pointer>
 8019576:	4680      	mov	r8, r0
    struct __serial_common *serial_common = (struct __serial_common *)&get_DevConfig_pointer()->serial_common;
 8019578:	f7fa fd5c 	bl	8014034 <get_DevConfig_pointer>
 801957c:	4606      	mov	r6, r0
    struct __network_connection *network_connection = (struct __network_connection *)get_DevConfig_pointer()->network_connection;
 801957e:	f7fa fd59 	bl	8014034 <get_DevConfig_pointer>
 8019582:	4605      	mov	r5, r0
    getSIPR(srcip);
 8019584:	2204      	movs	r2, #4
 8019586:	200f      	movs	r0, #15
 8019588:	a909      	add	r1, sp, #36	; 0x24
    uint8_t srcip[4] = {0, };
 801958a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    getSIPR(srcip);
 801958e:	f001 fb35 	bl	801abfc <WIZCHIP_READ_BUF>
    if((network_connection[channel].dns_use == SEG_ENABLE) && (flag_process_dns_success[channel] != ON))
 8019592:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 8019596:	2b01      	cmp	r3, #1
 8019598:	f000 80f8 	beq.w	801978c <proc_SEG_tcp_client+0x478>
    else if((srcip[0] == 0x00) && (srcip[1] == 0x00) && (srcip[2] == 0x00) && (srcip[3] == 0x00))
 801959c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	f000 80d6 	beq.w	8019752 <proc_SEG_tcp_client+0x43e>
    else if((network_connection[channel].remote_ip[0] == 0x00) &&
 80195a6:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
 80195aa:	2900      	cmp	r1, #0
 80195ac:	f040 8128 	bne.w	8019800 <proc_SEG_tcp_client+0x4ec>
            (network_connection[channel].remote_ip[1] == 0x00) &&
 80195b0:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
    else if((network_connection[channel].remote_ip[0] == 0x00) &&
 80195b4:	2a00      	cmp	r2, #0
 80195b6:	f040 8114 	bne.w	80197e2 <proc_SEG_tcp_client+0x4ce>
            (network_connection[channel].remote_ip[1] == 0x00) &&
 80195ba:	f895 2043 	ldrb.w	r2, [r5, #67]	; 0x43
 80195be:	2a00      	cmp	r2, #0
 80195c0:	f040 810f 	bne.w	80197e2 <proc_SEG_tcp_client+0x4ce>
            (network_connection[channel].remote_ip[2] == 0x00) &&
 80195c4:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
 80195c8:	2a00      	cmp	r2, #0
 80195ca:	f040 8118 	bne.w	80197fe <proc_SEG_tcp_client+0x4ea>
        if(serial_common->serial_debug_en) printf(" > SEG:CONNECTION FAILED - Invalid Destination IP address: Zero IP\r\n");
 80195ce:	f896 30e2 	ldrb.w	r3, [r6, #226]	; 0xe2
 80195d2:	2b00      	cmp	r3, #0
 80195d4:	f43f af0a 	beq.w	80193ec <proc_SEG_tcp_client+0xd8>
 80195d8:	4851      	ldr	r0, [pc, #324]	; (8019720 <proc_SEG_tcp_client+0x40c>)
 80195da:	f016 fd8b 	bl	80300f4 <puts>
    return ret;
 80195de:	e705      	b.n	80193ec <proc_SEG_tcp_client+0xd8>
    struct __network_connection *network_connection = (struct __network_connection *)get_DevConfig_pointer()->network_connection;
 80195e0:	f7fa fd28 	bl	8014034 <get_DevConfig_pointer>
            network_connection[channel].working_state = ST_CONNECT;
 80195e4:	2302      	movs	r3, #2
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, ON); // Status I/O pin to low
 80195e6:	2201      	movs	r2, #1
            network_connection[channel].working_state = ST_CONNECT;
 80195e8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, ON); // Status I/O pin to low
 80195ec:	2100      	movs	r1, #0
 80195ee:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80195f2:	f7fd ff89 	bl	8017508 <set_connection_status_io>
                if(!inactivity_time[channel] && tcp_option[channel].inactivity)     enable_inactivity_timer[channel] = SEG_ENABLE;
 80195f6:	4b39      	ldr	r3, [pc, #228]	; (80196dc <proc_SEG_tcp_client+0x3c8>)
 80195f8:	881b      	ldrh	r3, [r3, #0]
 80195fa:	b29b      	uxth	r3, r3
 80195fc:	2b00      	cmp	r3, #0
 80195fe:	d060      	beq.n	80196c2 <proc_SEG_tcp_client+0x3ae>
 8019600:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 80196e8 <proc_SEG_tcp_client+0x3d4>
                if(!keepalive_time[channel] && tcp_option[channel].keepalive_en)    enable_keepalive_timer[channel] = SEG_ENABLE;
 8019604:	4b37      	ldr	r3, [pc, #220]	; (80196e4 <proc_SEG_tcp_client+0x3d0>)
 8019606:	881b      	ldrh	r3, [r3, #0]
 8019608:	b29b      	uxth	r3, r3
 801960a:	b92b      	cbnz	r3, 8019618 <proc_SEG_tcp_client+0x304>
 801960c:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
 8019610:	b113      	cbz	r3, 8019618 <proc_SEG_tcp_client+0x304>
 8019612:	2201      	movs	r2, #1
 8019614:	4b36      	ldr	r3, [pc, #216]	; (80196f0 <proc_SEG_tcp_client+0x3dc>)
 8019616:	701a      	strb	r2, [r3, #0]
                flag_connect_pw_auth[channel] = SEG_ENABLE;
 8019618:	2001      	movs	r0, #1
                if(enable_reconnection_timer[channel] == SEG_ENABLE)
 801961a:	4b3d      	ldr	r3, [pc, #244]	; (8019710 <proc_SEG_tcp_client+0x3fc>)
                flag_connect_pw_auth[channel] = SEG_ENABLE;
 801961c:	4938      	ldr	r1, [pc, #224]	; (8019700 <proc_SEG_tcp_client+0x3ec>)
                if(enable_reconnection_timer[channel] == SEG_ENABLE)
 801961e:	781a      	ldrb	r2, [r3, #0]
                flag_connect_pw_auth[channel] = SEG_ENABLE;
 8019620:	7008      	strb	r0, [r1, #0]
                if(enable_reconnection_timer[channel] == SEG_ENABLE)
 8019622:	4282      	cmp	r2, r0
 8019624:	d103      	bne.n	801962e <proc_SEG_tcp_client+0x31a>
                    enable_reconnection_timer[channel] = SEG_DISABLE;
 8019626:	2200      	movs	r2, #0
                    reconnection_time[channel] = 0;
 8019628:	493c      	ldr	r1, [pc, #240]	; (801971c <proc_SEG_tcp_client+0x408>)
                    enable_reconnection_timer[channel] = SEG_DISABLE;
 801962a:	701a      	strb	r2, [r3, #0]
                    reconnection_time[channel] = 0;
 801962c:	800a      	strh	r2, [r1, #0]
                if(serial_common->serial_debug_en)
 801962e:	f898 30e2 	ldrb.w	r3, [r8, #226]	; 0xe2
 8019632:	2b00      	cmp	r3, #0
 8019634:	f040 80b8 	bne.w	80197a8 <proc_SEG_tcp_client+0x494>
                if(serial_mode == SEG_SERIAL_PROTOCOL_NONE)
 8019638:	f1bb 0f00 	cmp.w	fp, #0
 801963c:	f000 80db 	beq.w	80197f6 <proc_SEG_tcp_client+0x4e2>
                isSocketOpen_TCPclient[channel] = OFF;
 8019640:	2200      	movs	r2, #0
 8019642:	4b34      	ldr	r3, [pc, #208]	; (8019714 <proc_SEG_tcp_client+0x400>)
                setSn_IR(sock, Sn_IR_CON);
 8019644:	4638      	mov	r0, r7
 8019646:	2101      	movs	r1, #1
                isSocketOpen_TCPclient[channel] = OFF;
 8019648:	701a      	strb	r2, [r3, #0]
                setSn_IR(sock, Sn_IR_CON);
 801964a:	f001 fa73 	bl	801ab34 <WIZCHIP_WRITE>
 801964e:	e741      	b.n	80194d4 <proc_SEG_tcp_client+0x1c0>
    if(client_any_port[channel])
 8019650:	4d34      	ldr	r5, [pc, #208]	; (8019724 <proc_SEG_tcp_client+0x410>)
 8019652:	882a      	ldrh	r2, [r5, #0]
 8019654:	2a00      	cmp	r2, #0
 8019656:	d06a      	beq.n	801972e <proc_SEG_tcp_client+0x41a>
        if(client_any_port[channel] < 0xffff)
 8019658:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801965c:	429a      	cmp	r2, r3
 801965e:	d065      	beq.n	801972c <proc_SEG_tcp_client+0x418>
            client_any_port[channel]++;
 8019660:	3201      	adds	r2, #1
 8019662:	b292      	uxth	r2, r2
 8019664:	802a      	strh	r2, [r5, #0]
    if(client_any_port[channel] == 0)
 8019666:	e6f1      	b.n	801944c <proc_SEG_tcp_client+0x138>
            if((enable_inactivity_timer[channel] == SEG_ENABLE) && (inactivity_time[channel] >= tcp_option[channel].inactivity))
 8019668:	4b1c      	ldr	r3, [pc, #112]	; (80196dc <proc_SEG_tcp_client+0x3c8>)
 801966a:	f8b6 20cd 	ldrh.w	r2, [r6, #205]	; 0xcd
 801966e:	881b      	ldrh	r3, [r3, #0]
 8019670:	b29b      	uxth	r3, r3
 8019672:	429a      	cmp	r2, r3
 8019674:	f63f af37 	bhi.w	80194e6 <proc_SEG_tcp_client+0x1d2>
                process_socket_termination(sock, 100);
 8019678:	2164      	movs	r1, #100	; 0x64
 801967a:	4620      	mov	r0, r4
 801967c:	f7fe fd94 	bl	80181a8 <process_socket_termination>
                enable_keepalive_timer[channel] = DISABLE;
 8019680:	2300      	movs	r3, #0
 8019682:	491b      	ldr	r1, [pc, #108]	; (80196f0 <proc_SEG_tcp_client+0x3dc>)
                keepalive_time[channel] = 0;
 8019684:	4a17      	ldr	r2, [pc, #92]	; (80196e4 <proc_SEG_tcp_client+0x3d0>)
                enable_keepalive_timer[channel] = DISABLE;
 8019686:	700b      	strb	r3, [r1, #0]
                keepalive_time[channel] = 0;
 8019688:	8013      	strh	r3, [r2, #0]
            if((tcp_option[channel].keepalive_en == SEG_ENABLE) && (enable_keepalive_timer[channel] == SEG_ENABLE))
 801968a:	e6af      	b.n	80193ec <proc_SEG_tcp_client+0xd8>
                if(get_uart_buffer_usedsize(uartNum) || u2e_size[channel])
 801968c:	4628      	mov	r0, r5
 801968e:	f7fe fbbd 	bl	8017e0c <get_uart_buffer_usedsize>
 8019692:	4b1d      	ldr	r3, [pc, #116]	; (8019708 <proc_SEG_tcp_client+0x3f4>)
 8019694:	881b      	ldrh	r3, [r3, #0]
 8019696:	4318      	orrs	r0, r3
 8019698:	b280      	uxth	r0, r0
 801969a:	b118      	cbz	r0, 80196a4 <proc_SEG_tcp_client+0x390>
                    uart_to_ether(uartNum, sock);
 801969c:	4621      	mov	r1, r4
 801969e:	4628      	mov	r0, r5
 80196a0:	f7fe ff9a 	bl	80185d8 <uart_to_ether>
                if(getSn_RX_RSR(sock) || e2u_size[channel])
 80196a4:	4620      	mov	r0, r4
 80196a6:	f001 fafb 	bl	801aca0 <getSn_RX_RSR>
 80196aa:	4b18      	ldr	r3, [pc, #96]	; (801970c <proc_SEG_tcp_client+0x3f8>)
 80196ac:	881b      	ldrh	r3, [r3, #0]
 80196ae:	4318      	orrs	r0, r3
 80196b0:	b280      	uxth	r0, r0
 80196b2:	2800      	cmp	r0, #0
 80196b4:	f43f af12 	beq.w	80194dc <proc_SEG_tcp_client+0x1c8>
                    ether_to_uart(uartNum, sock);
 80196b8:	4628      	mov	r0, r5
 80196ba:	4621      	mov	r1, r4
 80196bc:	f7ff fc54 	bl	8018f68 <ether_to_uart>
 80196c0:	e70c      	b.n	80194dc <proc_SEG_tcp_client+0x1c8>
                if(!inactivity_time[channel] && tcp_option[channel].inactivity)     enable_inactivity_timer[channel] = SEG_ENABLE;
 80196c2:	f8b6 30cd 	ldrh.w	r3, [r6, #205]	; 0xcd
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	d09a      	beq.n	8019600 <proc_SEG_tcp_client+0x2ec>
 80196ca:	2301      	movs	r3, #1
 80196cc:	f8df 9018 	ldr.w	r9, [pc, #24]	; 80196e8 <proc_SEG_tcp_client+0x3d4>
 80196d0:	f889 3000 	strb.w	r3, [r9]
 80196d4:	e796      	b.n	8019604 <proc_SEG_tcp_client+0x2f0>
 80196d6:	bf00      	nop
 80196d8:	08033304 	.word	0x08033304
 80196dc:	2001991c 	.word	0x2001991c
 80196e0:	20019958 	.word	0x20019958
 80196e4:	20019924 	.word	0x20019924
 80196e8:	200198f4 	.word	0x200198f4
 80196ec:	20019900 	.word	0x20019900
 80196f0:	200198f8 	.word	0x200198f8
 80196f4:	200198f0 	.word	0x200198f0
 80196f8:	20019914 	.word	0x20019914
 80196fc:	20019910 	.word	0x20019910
 8019700:	20019904 	.word	0x20019904
 8019704:	200198e8 	.word	0x200198e8
 8019708:	20019960 	.word	0x20019960
 801970c:	200198ec 	.word	0x200198ec
 8019710:	200198fc 	.word	0x200198fc
 8019714:	20019920 	.word	0x20019920
 8019718:	080336b0 	.word	0x080336b0
 801971c:	20019934 	.word	0x20019934
 8019720:	080332c0 	.word	0x080332c0
 8019724:	200198e4 	.word	0x200198e4
 8019728:	2001990c 	.word	0x2001990c
            client_any_port[channel] = 0;
 801972c:	8029      	strh	r1, [r5, #0]
        client_any_port[channel] = (rand() % 10000) + 35000; // 35000 ~ 44999
 801972e:	f016 fd17 	bl	8030160 <rand>
 8019732:	f242 7110 	movw	r1, #10000	; 0x2710
 8019736:	4a48      	ldr	r2, [pc, #288]	; (8019858 <proc_SEG_tcp_client+0x544>)
 8019738:	17c3      	asrs	r3, r0, #31
 801973a:	fb82 7200 	smull	r7, r2, r2, r0
 801973e:	ebc3 3322 	rsb	r3, r3, r2, asr #12
 8019742:	fb01 0213 	mls	r2, r1, r3, r0
 8019746:	f5a2 42ee 	sub.w	r2, r2, #30464	; 0x7700
 801974a:	3a48      	subs	r2, #72	; 0x48
 801974c:	b292      	uxth	r2, r2
 801974e:	802a      	strh	r2, [r5, #0]
 8019750:	e67c      	b.n	801944c <proc_SEG_tcp_client+0x138>
    else if((srcip[0] == 0x00) && (srcip[1] == 0x00) && (srcip[2] == 0x00) && (srcip[3] == 0x00))
 8019752:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
 8019756:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 801975a:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
 801975e:	4302      	orrs	r2, r0
 8019760:	430a      	orrs	r2, r1
 8019762:	f47f ae1e 	bne.w	80193a2 <proc_SEG_tcp_client+0x8e>
        if(serial_common->serial_debug_en) printf(" > SEG:CONNECTION FAILED - Invalid IP address: Zero IP\r\n");
 8019766:	f896 30e2 	ldrb.w	r3, [r6, #226]	; 0xe2
 801976a:	2b00      	cmp	r3, #0
 801976c:	f43f ae3e 	beq.w	80193ec <proc_SEG_tcp_client+0xd8>
 8019770:	483a      	ldr	r0, [pc, #232]	; (801985c <proc_SEG_tcp_client+0x548>)
 8019772:	f016 fcbf 	bl	80300f4 <puts>
    return ret;
 8019776:	e639      	b.n	80193ec <proc_SEG_tcp_client+0xd8>
                if((serial_command->serial_command == SEG_ENABLE) && serial_data_packing[channel].packing_time)
 8019778:	9b05      	ldr	r3, [sp, #20]
 801977a:	f8b3 30f1 	ldrh.w	r3, [r3, #241]	; 0xf1
 801977e:	b29a      	uxth	r2, r3
 8019780:	2a00      	cmp	r2, #0
 8019782:	f43f ae6f 	beq.w	8019464 <proc_SEG_tcp_client+0x150>
                    modeswitch_gap_time = serial_data_packing[channel].packing_time;
 8019786:	4a36      	ldr	r2, [pc, #216]	; (8019860 <proc_SEG_tcp_client+0x54c>)
 8019788:	8013      	strh	r3, [r2, #0]
 801978a:	e66b      	b.n	8019464 <proc_SEG_tcp_client+0x150>
    if((network_connection[channel].dns_use == SEG_ENABLE) && (flag_process_dns_success[channel] != ON))
 801978c:	4b35      	ldr	r3, [pc, #212]	; (8019864 <proc_SEG_tcp_client+0x550>)
 801978e:	7819      	ldrb	r1, [r3, #0]
 8019790:	2901      	cmp	r1, #1
 8019792:	f43f af03 	beq.w	801959c <proc_SEG_tcp_client+0x288>
        if(serial_common->serial_debug_en) printf(" > SEG:CONNECTION FAILED - DNS Failed flag_process_dns_success = %d\r\n", flag_process_dns_success[channel]);
 8019796:	f896 30e2 	ldrb.w	r3, [r6, #226]	; 0xe2
 801979a:	2b00      	cmp	r3, #0
 801979c:	f43f ae26 	beq.w	80193ec <proc_SEG_tcp_client+0xd8>
 80197a0:	4831      	ldr	r0, [pc, #196]	; (8019868 <proc_SEG_tcp_client+0x554>)
 80197a2:	f016 fc21 	bl	802ffe8 <iprintf>
    return ret;
 80197a6:	e621      	b.n	80193ec <proc_SEG_tcp_client+0xd8>
                    getsockopt(sock, SO_DESTIP, &destip);
 80197a8:	aa08      	add	r2, sp, #32
 80197aa:	2104      	movs	r1, #4
 80197ac:	4620      	mov	r0, r4
 80197ae:	f002 fb49 	bl	801be44 <getsockopt>
                    getsockopt(sock, SO_DESTPORT, &destport);
 80197b2:	f10d 021e 	add.w	r2, sp, #30
 80197b6:	2105      	movs	r1, #5
 80197b8:	4620      	mov	r0, r4
 80197ba:	f002 fb43 	bl	801be44 <getsockopt>
                    PRT_SEG(" > SEG:CONNECTED TO - %d.%d.%d.%d : %d\r\n", destip[0], destip[1], destip[2], destip[3], destport);
 80197be:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80197c2:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
 80197c6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 80197ca:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80197ce:	9300      	str	r3, [sp, #0]
 80197d0:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80197d4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80197d8:	4924      	ldr	r1, [pc, #144]	; (801986c <proc_SEG_tcp_client+0x558>)
 80197da:	4825      	ldr	r0, [pc, #148]	; (8019870 <proc_SEG_tcp_client+0x55c>)
 80197dc:	f7fe fb32 	bl	8017e44 <WIZ_SECURE_printf>
 80197e0:	e72a      	b.n	8019638 <proc_SEG_tcp_client+0x324>
    else if((srcip[0] == 192) && (srcip[1] == 168)) // local IP address == Class C private IP
 80197e2:	2bc0      	cmp	r3, #192	; 0xc0
 80197e4:	d013      	beq.n	801980e <proc_SEG_tcp_client+0x4fa>
                connect(sock, network_connection[channel].remote_ip, network_connection[channel].remote_port);
 80197e6:	4620      	mov	r0, r4
 80197e8:	f8b7 203f 	ldrh.w	r2, [r7, #63]	; 0x3f
 80197ec:	f107 0141 	add.w	r1, r7, #65	; 0x41
 80197f0:	f001 fdaa 	bl	801b348 <connect>
 80197f4:	e5fa      	b.n	80193ec <proc_SEG_tcp_client+0xd8>
                    uart_rx_flush(uartNum);
 80197f6:	4628      	mov	r0, r5
 80197f8:	f7fe fae2 	bl	8017dc0 <uart_rx_flush>
 80197fc:	e720      	b.n	8019640 <proc_SEG_tcp_client+0x32c>
 80197fe:	2100      	movs	r1, #0
    else if((srcip[0] == network_connection[channel].remote_ip[0]) &&
 8019800:	428b      	cmp	r3, r1
 8019802:	d1ee      	bne.n	80197e2 <proc_SEG_tcp_client+0x4ce>
 8019804:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
 8019808:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
 801980c:	e5d7      	b.n	80193be <proc_SEG_tcp_client+0xaa>
    else if((srcip[0] == 192) && (srcip[1] == 168)) // local IP address == Class C private IP
 801980e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8019812:	2ba8      	cmp	r3, #168	; 0xa8
 8019814:	d1e7      	bne.n	80197e6 <proc_SEG_tcp_client+0x4d2>
        if((network_option->dhcp_use == SEG_DISABLE) && ((network_connection[channel].remote_ip[0] == 192) &&
 8019816:	f898 30c7 	ldrb.w	r3, [r8, #199]	; 0xc7
 801981a:	2b00      	cmp	r3, #0
 801981c:	d1e3      	bne.n	80197e6 <proc_SEG_tcp_client+0x4d2>
 801981e:	29c0      	cmp	r1, #192	; 0xc0
 8019820:	d1e1      	bne.n	80197e6 <proc_SEG_tcp_client+0x4d2>
 8019822:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
 8019826:	2aa8      	cmp	r2, #168	; 0xa8
 8019828:	d1dd      	bne.n	80197e6 <proc_SEG_tcp_client+0x4d2>
            if(srcip[2] != network_connection[channel].remote_ip[2]) // Class C Private IP network mismatch
 801982a:	f895 3043 	ldrb.w	r3, [r5, #67]	; 0x43
 801982e:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8019832:	4298      	cmp	r0, r3
 8019834:	d0d7      	beq.n	80197e6 <proc_SEG_tcp_client+0x4d2>
                if(serial_common->serial_debug_en)
 8019836:	f896 00e2 	ldrb.w	r0, [r6, #226]	; 0xe2
 801983a:	2800      	cmp	r0, #0
 801983c:	f43f add6 	beq.w	80193ec <proc_SEG_tcp_client+0xd8>
                    printf(" > SEG:CONNECTION FAILED - Invalid IP address range (%d.%d.[%d].%d)\r\n",
 8019840:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
 8019844:	9000      	str	r0, [sp, #0]
 8019846:	480b      	ldr	r0, [pc, #44]	; (8019874 <proc_SEG_tcp_client+0x560>)
 8019848:	f016 fbce 	bl	802ffe8 <iprintf>
    return ret;
 801984c:	e5ce      	b.n	80193ec <proc_SEG_tcp_client+0xd8>
                if((flag_sent_first_keepalive[channel] == SEG_ENABLE) &&
 801984e:	2f01      	cmp	r7, #1
 8019850:	f47f adcc 	bne.w	80193ec <proc_SEG_tcp_client+0xd8>
 8019854:	4b08      	ldr	r3, [pc, #32]	; (8019878 <proc_SEG_tcp_client+0x564>)
 8019856:	e66c      	b.n	8019532 <proc_SEG_tcp_client+0x21e>
 8019858:	68db8bad 	.word	0x68db8bad
 801985c:	08033288 	.word	0x08033288
 8019860:	20018212 	.word	0x20018212
 8019864:	20019908 	.word	0x20019908
 8019868:	08033240 	.word	0x08033240
 801986c:	080339a0 	.word	0x080339a0
 8019870:	0803367c 	.word	0x0803367c
 8019874:	08033338 	.word	0x08033338
 8019878:	20019924 	.word	0x20019924

0801987c <proc_SEG_tcp_client_over_tls>:
{
 801987c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019880:	b08b      	sub	sp, #44	; 0x2c
 8019882:	460c      	mov	r4, r1
 8019884:	4605      	mov	r5, r0
    struct __tcp_option *tcp_option = (struct __tcp_option *)get_DevConfig_pointer()->tcp_option;
 8019886:	f7fa fbd5 	bl	8014034 <get_DevConfig_pointer>
 801988a:	4606      	mov	r6, r0
    struct __network_connection *network_connection = (struct __network_connection *)get_DevConfig_pointer()->network_connection;
 801988c:	f7fa fbd2 	bl	8014034 <get_DevConfig_pointer>
 8019890:	4607      	mov	r7, r0
    struct __serial_data_packing *serial_data_packing = (struct __serial_data_packing *)get_DevConfig_pointer()->serial_data_packing;
 8019892:	f7fa fbcf 	bl	8014034 <get_DevConfig_pointer>
 8019896:	9005      	str	r0, [sp, #20]
    struct __serial_common *serial_common = (struct __serial_common *)&get_DevConfig_pointer()->serial_common;
 8019898:	f7fa fbcc 	bl	8014034 <get_DevConfig_pointer>
 801989c:	4680      	mov	r8, r0
    struct __serial_command *serial_command = (struct __serial_command *)&get_DevConfig_pointer()->serial_command;
 801989e:	f7fa fbc9 	bl	8014034 <get_DevConfig_pointer>
 80198a2:	4681      	mov	r9, r0
    struct __device_option *device_option = (struct __device_option *)&(get_DevConfig_pointer()->device_option);
 80198a4:	f7fa fbc6 	bl	8014034 <get_DevConfig_pointer>
    uint8_t destip[4] = {0, };
 80198a8:	2300      	movs	r3, #0
 80198aa:	9308      	str	r3, [sp, #32]
    uint16_t destport = 0;
 80198ac:	f8ad 301e 	strh.w	r3, [sp, #30]
    struct __serial_option *serial_option = (struct __serial_option *)&(get_DevConfig_pointer()->serial_option);
 80198b0:	f7fa fbc0 	bl	8014034 <get_DevConfig_pointer>
 80198b4:	4602      	mov	r2, r0
    uint8_t state = getSn_SR(sock);
 80198b6:	1d23      	adds	r3, r4, #4
 80198b8:	ea4f 2a03 	mov.w	sl, r3, lsl #8
 80198bc:	f10a 0003 	add.w	r0, sl, #3
    return serial_option[channel].protocol;
 80198c0:	f892 b0e9 	ldrb.w	fp, [r2, #233]	; 0xe9
    uint8_t state = getSn_SR(sock);
 80198c4:	f001 f954 	bl	801ab70 <WIZCHIP_READ>
    switch(state)
 80198c8:	281c      	cmp	r0, #28
 80198ca:	d843      	bhi.n	8019954 <proc_SEG_tcp_client_over_tls+0xd8>
 80198cc:	e8df f010 	tbh	[pc, r0, lsl #1]
 80198d0:	00420045 	.word	0x00420045
 80198d4:	00420042 	.word	0x00420042
 80198d8:	00420042 	.word	0x00420042
 80198dc:	00420042 	.word	0x00420042
 80198e0:	00420042 	.word	0x00420042
 80198e4:	00420042 	.word	0x00420042
 80198e8:	00420042 	.word	0x00420042
 80198ec:	00420042 	.word	0x00420042
 80198f0:	00420042 	.word	0x00420042
 80198f4:	01320042 	.word	0x01320042
 80198f8:	00420042 	.word	0x00420042
 80198fc:	00d90042 	.word	0x00d90042
 8019900:	00420045 	.word	0x00420045
 8019904:	00420042 	.word	0x00420042
 8019908:	00b6      	.short	0x00b6
    else if((network_connection[channel].remote_ip[0] == 0x00) &&
 801990a:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
 801990e:	2900      	cmp	r1, #0
 8019910:	f040 8275 	bne.w	8019dfe <proc_SEG_tcp_client_over_tls+0x582>
            (network_connection[channel].remote_ip[1] == 0x00) &&
 8019914:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
    else if((network_connection[channel].remote_ip[0] == 0x00) &&
 8019918:	b92a      	cbnz	r2, 8019926 <proc_SEG_tcp_client_over_tls+0xaa>
            (network_connection[channel].remote_ip[1] == 0x00) &&
 801991a:	f895 c043 	ldrb.w	ip, [r5, #67]	; 0x43
 801991e:	f1bc 0f00 	cmp.w	ip, #0
 8019922:	f000 813c 	beq.w	8019b9e <proc_SEG_tcp_client_over_tls+0x322>
    else if((srcip[0] == network_connection[channel].remote_ip[0]) &&
 8019926:	4290      	cmp	r0, r2
 8019928:	f040 8267 	bne.w	8019dfa <proc_SEG_tcp_client_over_tls+0x57e>
            (srcip[1] == network_connection[channel].remote_ip[1]) &&
 801992c:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8019930:	f895 2043 	ldrb.w	r2, [r5, #67]	; 0x43
 8019934:	4290      	cmp	r0, r2
 8019936:	f040 8260 	bne.w	8019dfa <proc_SEG_tcp_client_over_tls+0x57e>
            (srcip[2] == network_connection[channel].remote_ip[2]) &&
 801993a:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
 801993e:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
 8019942:	4290      	cmp	r0, r2
 8019944:	f040 8259 	bne.w	8019dfa <proc_SEG_tcp_client_over_tls+0x57e>
        if(serial_common->serial_debug_en) printf(" > SEG:CONNECTION FAILED - Duplicate IP address\r\n");
 8019948:	f896 30e2 	ldrb.w	r3, [r6, #226]	; 0xe2
 801994c:	b113      	cbz	r3, 8019954 <proc_SEG_tcp_client_over_tls+0xd8>
 801994e:	48bb      	ldr	r0, [pc, #748]	; (8019c3c <proc_SEG_tcp_client_over_tls+0x3c0>)
 8019950:	f016 fbd0 	bl	80300f4 <puts>
}
 8019954:	b00b      	add	sp, #44	; 0x2c
 8019956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return wiz_tls_init_state;
 801995a:	4db9      	ldr	r5, [pc, #740]	; (8019c40 <proc_SEG_tcp_client_over_tls+0x3c4>)
            close(sock);
 801995c:	4620      	mov	r0, r4
 801995e:	f001 fc59 	bl	801b214 <close>
            if(get_wiz_tls_init_state() != ENABLE)
 8019962:	682b      	ldr	r3, [r5, #0]
 8019964:	2b01      	cmp	r3, #1
 8019966:	f000 8128 	beq.w	8019bba <proc_SEG_tcp_client_over_tls+0x33e>
                host = (const char *)network_connection[channel].dns_domain_name;
 801996a:	f8df b33c 	ldr.w	fp, [pc, #828]	; 8019ca8 <proc_SEG_tcp_client_over_tls+0x42c>
 801996e:	f107 0247 	add.w	r2, r7, #71	; 0x47
                PRT_SEG("host = %s\r\n", host);
 8019972:	49b4      	ldr	r1, [pc, #720]	; (8019c44 <proc_SEG_tcp_client_over_tls+0x3c8>)
 8019974:	48b4      	ldr	r0, [pc, #720]	; (8019c48 <proc_SEG_tcp_client_over_tls+0x3cc>)
                host = (const char *)network_connection[channel].dns_domain_name;
 8019976:	f8cb 2000 	str.w	r2, [fp]
                PRT_SEG("host = %s\r\n", host);
 801997a:	f7fe fa63 	bl	8017e44 <WIZ_SECURE_printf>
            if(wiz_tls_init(&s2e_tlsContext, sock, host) > 0)
 801997e:	4621      	mov	r1, r4
 8019980:	f8db 2000 	ldr.w	r2, [fp]
 8019984:	48b1      	ldr	r0, [pc, #708]	; (8019c4c <proc_SEG_tcp_client_over_tls+0x3d0>)
 8019986:	f004 fe6b 	bl	801e660 <wiz_tls_init>
 801998a:	2800      	cmp	r0, #0
 801998c:	f340 8190 	ble.w	8019cb0 <proc_SEG_tcp_client_over_tls+0x434>
    struct __network_connection *network_connection = (struct __network_connection *)get_DevConfig_pointer()->network_connection;
 8019990:	f7fa fb50 	bl	8014034 <get_DevConfig_pointer>
            network_connection[channel].working_state = ST_OPEN;
 8019994:	2301      	movs	r3, #1
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, OFF); // Status I/O pin to high
 8019996:	2200      	movs	r2, #0
            network_connection[channel].working_state = ST_OPEN;
 8019998:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, OFF); // Status I/O pin to high
 801999c:	4611      	mov	r1, r2
 801999e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80199a2:	f7fd fdb1 	bl	8017508 <set_connection_status_io>
    enable_inactivity_timer[channel] = SEG_DISABLE;
 80199a6:	2300      	movs	r3, #0
    inactivity_time[channel] = 0;
 80199a8:	49a9      	ldr	r1, [pc, #676]	; (8019c50 <proc_SEG_tcp_client_over_tls+0x3d4>)
    serial_input_time[channel] = 0;
 80199aa:	4aaa      	ldr	r2, [pc, #680]	; (8019c54 <proc_SEG_tcp_client_over_tls+0x3d8>)
    inactivity_time[channel] = 0;
 80199ac:	800b      	strh	r3, [r1, #0]
    keepalive_time[channel] = 0;
 80199ae:	48aa      	ldr	r0, [pc, #680]	; (8019c58 <proc_SEG_tcp_client_over_tls+0x3dc>)
    serial_input_time[channel] = 0;
 80199b0:	8013      	strh	r3, [r2, #0]
    enable_inactivity_timer[channel] = SEG_DISABLE;
 80199b2:	49aa      	ldr	r1, [pc, #680]	; (8019c5c <proc_SEG_tcp_client_over_tls+0x3e0>)
    enable_serial_input_timer[channel] = SEG_DISABLE;
 80199b4:	4aaa      	ldr	r2, [pc, #680]	; (8019c60 <proc_SEG_tcp_client_over_tls+0x3e4>)
    keepalive_time[channel] = 0;
 80199b6:	8003      	strh	r3, [r0, #0]
    enable_inactivity_timer[channel] = SEG_DISABLE;
 80199b8:	700b      	strb	r3, [r1, #0]
    enable_serial_input_timer[channel] = SEG_DISABLE;
 80199ba:	7013      	strb	r3, [r2, #0]
    enable_keepalive_timer[channel] = SEG_DISABLE;
 80199bc:	48a9      	ldr	r0, [pc, #676]	; (8019c64 <proc_SEG_tcp_client_over_tls+0x3e8>)
    enable_connection_auth_timer[channel] = SEG_DISABLE;
 80199be:	49aa      	ldr	r1, [pc, #680]	; (8019c68 <proc_SEG_tcp_client_over_tls+0x3ec>)
    flag_serial_input_time_elapse[channel] = SEG_DISABLE;
 80199c0:	4aaa      	ldr	r2, [pc, #680]	; (8019c6c <proc_SEG_tcp_client_over_tls+0x3f0>)
    enable_keepalive_timer[channel] = SEG_DISABLE;
 80199c2:	7003      	strb	r3, [r0, #0]
    enable_connection_auth_timer[channel] = SEG_DISABLE;
 80199c4:	700b      	strb	r3, [r1, #0]
    flag_sent_keepalive[channel] = SEG_DISABLE;
 80199c6:	48aa      	ldr	r0, [pc, #680]	; (8019c70 <proc_SEG_tcp_client_over_tls+0x3f4>)
    flag_connect_pw_auth[channel] = SEG_DISABLE; // TCP_SERVER_MODE only (+ MIXED_SERVER)
 80199c8:	49aa      	ldr	r1, [pc, #680]	; (8019c74 <proc_SEG_tcp_client_over_tls+0x3f8>)
    flag_serial_input_time_elapse[channel] = SEG_DISABLE;
 80199ca:	7013      	strb	r3, [r2, #0]
    connection_auth_time[channel] = 0;
 80199cc:	4aaa      	ldr	r2, [pc, #680]	; (8019c78 <proc_SEG_tcp_client_over_tls+0x3fc>)
    flag_sent_keepalive[channel] = SEG_DISABLE;
 80199ce:	7003      	strb	r3, [r0, #0]
    flag_connect_pw_auth[channel] = SEG_DISABLE; // TCP_SERVER_MODE only (+ MIXED_SERVER)
 80199d0:	700b      	strb	r3, [r1, #0]
                u2e_size[channel] = 0;
 80199d2:	48aa      	ldr	r0, [pc, #680]	; (8019c7c <proc_SEG_tcp_client_over_tls+0x400>)
                e2u_size[channel] = 0;
 80199d4:	49aa      	ldr	r1, [pc, #680]	; (8019c80 <proc_SEG_tcp_client_over_tls+0x404>)
    connection_auth_time[channel] = 0;
 80199d6:	8013      	strh	r3, [r2, #0]
                if(network_connection[channel].fixed_local_port)
 80199d8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
                u2e_size[channel] = 0;
 80199dc:	8003      	strh	r3, [r0, #0]
                e2u_size[channel] = 0;
 80199de:	800b      	strh	r3, [r1, #0]
                if(network_connection[channel].fixed_local_port)
 80199e0:	2a00      	cmp	r2, #0
 80199e2:	f000 81f0 	beq.w	8019dc6 <proc_SEG_tcp_client_over_tls+0x54a>
                    source_port = network_connection[channel].local_port;
 80199e6:	4ba7      	ldr	r3, [pc, #668]	; (8019c84 <proc_SEG_tcp_client_over_tls+0x408>)
 80199e8:	f8b7 703d 	ldrh.w	r7, [r7, #61]	; 0x3d
 80199ec:	881a      	ldrh	r2, [r3, #0]
                PRT_SEG(" > TCP CLIENT over TLS: client_any_port = %d\r\n", client_any_port[channel]);
 80199ee:	4995      	ldr	r1, [pc, #596]	; (8019c44 <proc_SEG_tcp_client_over_tls+0x3c8>)
 80199f0:	48a5      	ldr	r0, [pc, #660]	; (8019c88 <proc_SEG_tcp_client_over_tls+0x40c>)
 80199f2:	f7fe fa27 	bl	8017e44 <WIZ_SECURE_printf>
                if(wiz_tls_socket(&s2e_tlsContext, source_port) == sock)
 80199f6:	4639      	mov	r1, r7
 80199f8:	4894      	ldr	r0, [pc, #592]	; (8019c4c <proc_SEG_tcp_client_over_tls+0x3d0>)
 80199fa:	f004 ffe9 	bl	801e9d0 <wiz_tls_socket>
 80199fe:	4284      	cmp	r4, r0
 8019a00:	f040 8185 	bne.w	8019d0e <proc_SEG_tcp_client_over_tls+0x492>
                    if((serial_command->serial_command == SEG_ENABLE) && serial_data_packing[channel].packing_time)
 8019a04:	f899 30e3 	ldrb.w	r3, [r9, #227]	; 0xe3
 8019a08:	2b01      	cmp	r3, #1
 8019a0a:	f000 81d2 	beq.w	8019db2 <proc_SEG_tcp_client_over_tls+0x536>
                    if((enable_reconnection_timer[channel] == SEG_DISABLE) && tcp_option[channel].reconnection)
 8019a0e:	4b9f      	ldr	r3, [pc, #636]	; (8019c8c <proc_SEG_tcp_client_over_tls+0x410>)
 8019a10:	781a      	ldrb	r2, [r3, #0]
 8019a12:	b922      	cbnz	r2, 8019a1e <proc_SEG_tcp_client_over_tls+0x1a2>
 8019a14:	f8b6 20cf 	ldrh.w	r2, [r6, #207]	; 0xcf
 8019a18:	b10a      	cbz	r2, 8019a1e <proc_SEG_tcp_client_over_tls+0x1a2>
                        enable_reconnection_timer[channel] = SEG_ENABLE;
 8019a1a:	2201      	movs	r2, #1
 8019a1c:	701a      	strb	r2, [r3, #0]
                    if(serial_common->serial_debug_en)
 8019a1e:	f898 30e2 	ldrb.w	r3, [r8, #226]	; 0xe2
 8019a22:	b143      	cbz	r3, 8019a36 <proc_SEG_tcp_client_over_tls+0x1ba>
                        if(isSocketOpen_TCPclient[channel] == OFF)
 8019a24:	4c9a      	ldr	r4, [pc, #616]	; (8019c90 <proc_SEG_tcp_client_over_tls+0x414>)
 8019a26:	7823      	ldrb	r3, [r4, #0]
 8019a28:	b92b      	cbnz	r3, 8019a36 <proc_SEG_tcp_client_over_tls+0x1ba>
                            PRT_SEG(" > SEG:TCP_CLIENT_OVER_TLS_MODE:SOCKOPEN\r\n");
 8019a2a:	4986      	ldr	r1, [pc, #536]	; (8019c44 <proc_SEG_tcp_client_over_tls+0x3c8>)
 8019a2c:	4899      	ldr	r0, [pc, #612]	; (8019c94 <proc_SEG_tcp_client_over_tls+0x418>)
 8019a2e:	f7fe fa09 	bl	8017e44 <WIZ_SECURE_printf>
                            isSocketOpen_TCPclient[channel] = ON;
 8019a32:	2301      	movs	r3, #1
 8019a34:	7023      	strb	r3, [r4, #0]
        wiz_tls_init_state = ENABLE;
 8019a36:	2301      	movs	r3, #1
 8019a38:	602b      	str	r3, [r5, #0]
 8019a3a:	e78b      	b.n	8019954 <proc_SEG_tcp_client_over_tls+0xd8>
            if(serial_mode == SEG_SERIAL_PROTOCOL_NONE)
 8019a3c:	f1bb 0f00 	cmp.w	fp, #0
 8019a40:	d10d      	bne.n	8019a5e <proc_SEG_tcp_client_over_tls+0x1e2>
 8019a42:	4e8f      	ldr	r6, [pc, #572]	; (8019c80 <proc_SEG_tcp_client_over_tls+0x404>)
 8019a44:	e003      	b.n	8019a4e <proc_SEG_tcp_client_over_tls+0x1d2>
                    ether_to_uart(uartNum, sock); // receive remaining packets
 8019a46:	4621      	mov	r1, r4
 8019a48:	4628      	mov	r0, r5
 8019a4a:	f7ff fa8d 	bl	8018f68 <ether_to_uart>
                while(getSn_RX_RSR(sock) || e2u_size[channel])
 8019a4e:	4620      	mov	r0, r4
 8019a50:	f001 f926 	bl	801aca0 <getSn_RX_RSR>
 8019a54:	8833      	ldrh	r3, [r6, #0]
 8019a56:	4303      	orrs	r3, r0
 8019a58:	b29b      	uxth	r3, r3
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	d1f3      	bne.n	8019a46 <proc_SEG_tcp_client_over_tls+0x1ca>
                wiz_tls_close_notify(&s2e_tlsContext);
 8019a5e:	487b      	ldr	r0, [pc, #492]	; (8019c4c <proc_SEG_tcp_client_over_tls+0x3d0>)
    return wiz_tls_init_state;
 8019a60:	4d77      	ldr	r5, [pc, #476]	; (8019c40 <proc_SEG_tcp_client_over_tls+0x3c4>)
                wiz_tls_close_notify(&s2e_tlsContext);
 8019a62:	f005 f8e3 	bl	801ec2c <wiz_tls_close_notify>
                process_socket_termination(sock, 100); // including disconnect(sock) function
 8019a66:	4620      	mov	r0, r4
 8019a68:	2164      	movs	r1, #100	; 0x64
 8019a6a:	f7fe fb9d 	bl	80181a8 <process_socket_termination>
                if(get_wiz_tls_init_state() == ENABLE)
 8019a6e:	682b      	ldr	r3, [r5, #0]
 8019a70:	2b01      	cmp	r3, #1
 8019a72:	f47f af6f 	bne.w	8019954 <proc_SEG_tcp_client_over_tls+0xd8>
                    wiz_tls_deinit(&s2e_tlsContext);
 8019a76:	4875      	ldr	r0, [pc, #468]	; (8019c4c <proc_SEG_tcp_client_over_tls+0x3d0>)
 8019a78:	f004 ff74 	bl	801e964 <wiz_tls_deinit>
        wiz_tls_init_state = DISABLE;
 8019a7c:	2300      	movs	r3, #0
 8019a7e:	602b      	str	r3, [r5, #0]
 8019a80:	e768      	b.n	8019954 <proc_SEG_tcp_client_over_tls+0xd8>
            if(getSn_IR(sock) & Sn_IR_CON)
 8019a82:	f10a 0702 	add.w	r7, sl, #2
 8019a86:	4638      	mov	r0, r7
 8019a88:	f001 f872 	bl	801ab70 <WIZCHIP_READ>
 8019a8c:	07c3      	lsls	r3, r0, #31
 8019a8e:	f100 809c 	bmi.w	8019bca <proc_SEG_tcp_client_over_tls+0x34e>
 8019a92:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8019c5c <proc_SEG_tcp_client_over_tls+0x3e0>
            if(serial_mode == SEG_SERIAL_PROTOCOL_NONE)
 8019a96:	f1bb 0f00 	cmp.w	fp, #0
 8019a9a:	f000 811d 	beq.w	8019cd8 <proc_SEG_tcp_client_over_tls+0x45c>
            if((enable_inactivity_timer[channel] == SEG_ENABLE) && (inactivity_time[channel] >= tcp_option[channel].inactivity))
 8019a9e:	f899 3000 	ldrb.w	r3, [r9]
 8019aa2:	2b01      	cmp	r3, #1
 8019aa4:	f000 810f 	beq.w	8019cc6 <proc_SEG_tcp_client_over_tls+0x44a>
            if((tcp_option[channel].keepalive_en == SEG_ENABLE) && (enable_keepalive_timer[channel] == SEG_ENABLE))
 8019aa8:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
 8019aac:	2b01      	cmp	r3, #1
 8019aae:	f47f af51 	bne.w	8019954 <proc_SEG_tcp_client_over_tls+0xd8>
 8019ab2:	4b6c      	ldr	r3, [pc, #432]	; (8019c64 <proc_SEG_tcp_client_over_tls+0x3e8>)
 8019ab4:	781d      	ldrb	r5, [r3, #0]
 8019ab6:	2d01      	cmp	r5, #1
 8019ab8:	f47f af4c 	bne.w	8019954 <proc_SEG_tcp_client_over_tls+0xd8>
                if((flag_sent_first_keepalive[channel] == SEG_DISABLE) &&
 8019abc:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8019cac <proc_SEG_tcp_client_over_tls+0x430>
 8019ac0:	f898 7000 	ldrb.w	r7, [r8]
 8019ac4:	2f00      	cmp	r7, #0
 8019ac6:	f040 81f1 	bne.w	8019eac <proc_SEG_tcp_client_over_tls+0x630>
                   (keepalive_time[channel] >= tcp_option[channel].keepalive_wait_time) &&
 8019aca:	4b63      	ldr	r3, [pc, #396]	; (8019c58 <proc_SEG_tcp_client_over_tls+0x3dc>)
 8019acc:	f8b6 10d2 	ldrh.w	r1, [r6, #210]	; 0xd2
 8019ad0:	881a      	ldrh	r2, [r3, #0]
 8019ad2:	b292      	uxth	r2, r2
                if((flag_sent_first_keepalive[channel] == SEG_DISABLE) &&
 8019ad4:	428a      	cmp	r2, r1
 8019ad6:	f4ff af3d 	bcc.w	8019954 <proc_SEG_tcp_client_over_tls+0xd8>
                   (keepalive_time[channel] >= tcp_option[channel].keepalive_wait_time) &&
 8019ada:	2900      	cmp	r1, #0
 8019adc:	f43f af3a 	beq.w	8019954 <proc_SEG_tcp_client_over_tls+0xd8>
                    PRT_SEG(" >> send_keepalive_packet_first [%d]\r\n", keepalive_time[channel]);
 8019ae0:	881a      	ldrh	r2, [r3, #0]
 8019ae2:	4958      	ldr	r1, [pc, #352]	; (8019c44 <proc_SEG_tcp_client_over_tls+0x3c8>)
 8019ae4:	486c      	ldr	r0, [pc, #432]	; (8019c98 <proc_SEG_tcp_client_over_tls+0x41c>)
 8019ae6:	b292      	uxth	r2, r2
 8019ae8:	9305      	str	r3, [sp, #20]
 8019aea:	f7fe f9ab 	bl	8017e44 <WIZ_SECURE_printf>
    setsockopt(sock, SO_KEEPALIVESEND, 0);
 8019aee:	463a      	mov	r2, r7
 8019af0:	2106      	movs	r1, #6
 8019af2:	4620      	mov	r0, r4
 8019af4:	f002 f926 	bl	801bd44 <setsockopt>
                    keepalive_time[channel] = 0;
 8019af8:	9b05      	ldr	r3, [sp, #20]
                    flag_sent_first_keepalive[channel] = SEG_ENABLE;
 8019afa:	f888 5000 	strb.w	r5, [r8]
                    keepalive_time[channel] = 0;
 8019afe:	801f      	strh	r7, [r3, #0]
                   (keepalive_time[channel] >= tcp_option[channel].keepalive_retry_time) &&
 8019b00:	881a      	ldrh	r2, [r3, #0]
 8019b02:	f8b6 10d4 	ldrh.w	r1, [r6, #212]	; 0xd4
 8019b06:	b292      	uxth	r2, r2
                if((flag_sent_first_keepalive[channel] == SEG_ENABLE) &&
 8019b08:	428a      	cmp	r2, r1
 8019b0a:	f4ff af23 	bcc.w	8019954 <proc_SEG_tcp_client_over_tls+0xd8>
                   (keepalive_time[channel] >= tcp_option[channel].keepalive_retry_time) &&
 8019b0e:	2900      	cmp	r1, #0
 8019b10:	f43f af20 	beq.w	8019954 <proc_SEG_tcp_client_over_tls+0xd8>
                    PRT_SEG(" >> send_keepalive_packet_manual [%d]\r\n", keepalive_time[channel]);
 8019b14:	881a      	ldrh	r2, [r3, #0]
 8019b16:	494b      	ldr	r1, [pc, #300]	; (8019c44 <proc_SEG_tcp_client_over_tls+0x3c8>)
 8019b18:	4860      	ldr	r0, [pc, #384]	; (8019c9c <proc_SEG_tcp_client_over_tls+0x420>)
 8019b1a:	b292      	uxth	r2, r2
 8019b1c:	9305      	str	r3, [sp, #20]
 8019b1e:	f7fe f991 	bl	8017e44 <WIZ_SECURE_printf>
    setsockopt(sock, SO_KEEPALIVESEND, 0);
 8019b22:	2200      	movs	r2, #0
 8019b24:	4620      	mov	r0, r4
 8019b26:	2106      	movs	r1, #6
 8019b28:	f002 f90c 	bl	801bd44 <setsockopt>
                    keepalive_time[channel] = 0;
 8019b2c:	2200      	movs	r2, #0
 8019b2e:	9b05      	ldr	r3, [sp, #20]
 8019b30:	801a      	strh	r2, [r3, #0]
 8019b32:	e70f      	b.n	8019954 <proc_SEG_tcp_client_over_tls+0xd8>
            if(reconnection_time[channel] >= tcp_option[channel].reconnection)
 8019b34:	4a5a      	ldr	r2, [pc, #360]	; (8019ca0 <proc_SEG_tcp_client_over_tls+0x424>)
 8019b36:	f8b6 10cf 	ldrh.w	r1, [r6, #207]	; 0xcf
 8019b3a:	8813      	ldrh	r3, [r2, #0]
 8019b3c:	b29b      	uxth	r3, r3
 8019b3e:	4299      	cmp	r1, r3
 8019b40:	f63f af08 	bhi.w	8019954 <proc_SEG_tcp_client_over_tls+0xd8>
                reconnection_time[channel] = 0; // reconnection time variable clear
 8019b44:	f04f 0a00 	mov.w	sl, #0
 8019b48:	f8a2 a000 	strh.w	sl, [r2]
    struct __network_option *network_option = (struct __network_option *)&get_DevConfig_pointer()->network_option;
 8019b4c:	f7fa fa72 	bl	8014034 <get_DevConfig_pointer>
 8019b50:	4681      	mov	r9, r0
    struct __serial_common *serial_common = (struct __serial_common *)&get_DevConfig_pointer()->serial_common;
 8019b52:	f7fa fa6f 	bl	8014034 <get_DevConfig_pointer>
 8019b56:	4606      	mov	r6, r0
    struct __network_connection *network_connection = (struct __network_connection *)get_DevConfig_pointer()->network_connection;
 8019b58:	f7fa fa6c 	bl	8014034 <get_DevConfig_pointer>
 8019b5c:	4605      	mov	r5, r0
    getSIPR(srcip);
 8019b5e:	2204      	movs	r2, #4
 8019b60:	200f      	movs	r0, #15
 8019b62:	a909      	add	r1, sp, #36	; 0x24
    uint8_t srcip[4] = {0, };
 8019b64:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    getSIPR(srcip);
 8019b68:	f001 f848 	bl	801abfc <WIZCHIP_READ_BUF>
    if((network_connection[channel].dns_use == SEG_ENABLE) && (flag_process_dns_success[channel] != ON))
 8019b6c:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 8019b70:	2b01      	cmp	r3, #1
 8019b72:	f000 80f3 	beq.w	8019d5c <proc_SEG_tcp_client_over_tls+0x4e0>
    else if((srcip[0] == 0x00) && (srcip[1] == 0x00) && (srcip[2] == 0x00) && (srcip[3] == 0x00))
 8019b76:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8019b7a:	2b00      	cmp	r3, #0
 8019b7c:	f000 80db 	beq.w	8019d36 <proc_SEG_tcp_client_over_tls+0x4ba>
    else if((network_connection[channel].remote_ip[0] == 0x00) &&
 8019b80:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
 8019b84:	2900      	cmp	r1, #0
 8019b86:	f040 816a 	bne.w	8019e5e <proc_SEG_tcp_client_over_tls+0x5e2>
            (network_connection[channel].remote_ip[1] == 0x00) &&
 8019b8a:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
    else if((network_connection[channel].remote_ip[0] == 0x00) &&
 8019b8e:	2a00      	cmp	r2, #0
 8019b90:	f040 8133 	bne.w	8019dfa <proc_SEG_tcp_client_over_tls+0x57e>
            (network_connection[channel].remote_ip[1] == 0x00) &&
 8019b94:	f895 2043 	ldrb.w	r2, [r5, #67]	; 0x43
 8019b98:	2a00      	cmp	r2, #0
 8019b9a:	f040 812e 	bne.w	8019dfa <proc_SEG_tcp_client_over_tls+0x57e>
            (network_connection[channel].remote_ip[2] == 0x00) &&
 8019b9e:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
 8019ba2:	2a00      	cmp	r2, #0
 8019ba4:	f040 815a 	bne.w	8019e5c <proc_SEG_tcp_client_over_tls+0x5e0>
        if(serial_common->serial_debug_en) printf(" > SEG:CONNECTION FAILED - Invalid Destination IP address: Zero IP\r\n");
 8019ba8:	f896 30e2 	ldrb.w	r3, [r6, #226]	; 0xe2
 8019bac:	2b00      	cmp	r3, #0
 8019bae:	f43f aed1 	beq.w	8019954 <proc_SEG_tcp_client_over_tls+0xd8>
 8019bb2:	483c      	ldr	r0, [pc, #240]	; (8019ca4 <proc_SEG_tcp_client_over_tls+0x428>)
 8019bb4:	f016 fa9e 	bl	80300f4 <puts>
    return ret;
 8019bb8:	e6cc      	b.n	8019954 <proc_SEG_tcp_client_over_tls+0xd8>
                wiz_tls_deinit(&s2e_tlsContext);
 8019bba:	4824      	ldr	r0, [pc, #144]	; (8019c4c <proc_SEG_tcp_client_over_tls+0x3d0>)
 8019bbc:	f004 fed2 	bl	801e964 <wiz_tls_deinit>
        wiz_tls_init_state = DISABLE;
 8019bc0:	2300      	movs	r3, #0
 8019bc2:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 8019ca8 <proc_SEG_tcp_client_over_tls+0x42c>
 8019bc6:	602b      	str	r3, [r5, #0]
 8019bc8:	e6d9      	b.n	801997e <proc_SEG_tcp_client_over_tls+0x102>
    struct __network_connection *network_connection = (struct __network_connection *)get_DevConfig_pointer()->network_connection;
 8019bca:	f7fa fa33 	bl	8014034 <get_DevConfig_pointer>
            network_connection[channel].working_state = ST_CONNECT;
 8019bce:	2302      	movs	r3, #2
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, ON); // Status I/O pin to low
 8019bd0:	2201      	movs	r2, #1
            network_connection[channel].working_state = ST_CONNECT;
 8019bd2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, ON); // Status I/O pin to low
 8019bd6:	2100      	movs	r1, #0
 8019bd8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8019bdc:	f7fd fc94 	bl	8017508 <set_connection_status_io>
                if(!inactivity_time[channel] && tcp_option[channel].inactivity)     enable_inactivity_timer[channel] = SEG_ENABLE;
 8019be0:	4b1b      	ldr	r3, [pc, #108]	; (8019c50 <proc_SEG_tcp_client_over_tls+0x3d4>)
 8019be2:	881b      	ldrh	r3, [r3, #0]
 8019be4:	b29b      	uxth	r3, r3
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	f000 809a 	beq.w	8019d20 <proc_SEG_tcp_client_over_tls+0x4a4>
 8019bec:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8019c5c <proc_SEG_tcp_client_over_tls+0x3e0>
                if(!keepalive_time[channel] && tcp_option[channel].keepalive_en)    enable_keepalive_timer[channel] = SEG_ENABLE;
 8019bf0:	4b19      	ldr	r3, [pc, #100]	; (8019c58 <proc_SEG_tcp_client_over_tls+0x3dc>)
 8019bf2:	881b      	ldrh	r3, [r3, #0]
 8019bf4:	b29b      	uxth	r3, r3
 8019bf6:	b92b      	cbnz	r3, 8019c04 <proc_SEG_tcp_client_over_tls+0x388>
 8019bf8:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
 8019bfc:	b113      	cbz	r3, 8019c04 <proc_SEG_tcp_client_over_tls+0x388>
 8019bfe:	2201      	movs	r2, #1
 8019c00:	4b18      	ldr	r3, [pc, #96]	; (8019c64 <proc_SEG_tcp_client_over_tls+0x3e8>)
 8019c02:	701a      	strb	r2, [r3, #0]
                flag_connect_pw_auth[channel] = SEG_ENABLE;
 8019c04:	2001      	movs	r0, #1
                if(enable_reconnection_timer[channel] == SEG_ENABLE)
 8019c06:	4b21      	ldr	r3, [pc, #132]	; (8019c8c <proc_SEG_tcp_client_over_tls+0x410>)
                flag_connect_pw_auth[channel] = SEG_ENABLE;
 8019c08:	491a      	ldr	r1, [pc, #104]	; (8019c74 <proc_SEG_tcp_client_over_tls+0x3f8>)
                if(enable_reconnection_timer[channel] == SEG_ENABLE)
 8019c0a:	781a      	ldrb	r2, [r3, #0]
                flag_connect_pw_auth[channel] = SEG_ENABLE;
 8019c0c:	7008      	strb	r0, [r1, #0]
                if(enable_reconnection_timer[channel] == SEG_ENABLE)
 8019c0e:	4282      	cmp	r2, r0
 8019c10:	d103      	bne.n	8019c1a <proc_SEG_tcp_client_over_tls+0x39e>
                    enable_reconnection_timer[channel] = SEG_DISABLE;
 8019c12:	2200      	movs	r2, #0
                    reconnection_time[channel] = 0;
 8019c14:	4922      	ldr	r1, [pc, #136]	; (8019ca0 <proc_SEG_tcp_client_over_tls+0x424>)
                    enable_reconnection_timer[channel] = SEG_DISABLE;
 8019c16:	701a      	strb	r2, [r3, #0]
                    reconnection_time[channel] = 0;
 8019c18:	800a      	strh	r2, [r1, #0]
                if(serial_common->serial_debug_en)
 8019c1a:	f898 30e2 	ldrb.w	r3, [r8, #226]	; 0xe2
 8019c1e:	2b00      	cmp	r3, #0
 8019c20:	f040 80aa 	bne.w	8019d78 <proc_SEG_tcp_client_over_tls+0x4fc>
                if(serial_mode == SEG_SERIAL_PROTOCOL_NONE)
 8019c24:	f1bb 0f00 	cmp.w	fp, #0
 8019c28:	f000 8105 	beq.w	8019e36 <proc_SEG_tcp_client_over_tls+0x5ba>
                isSocketOpen_TCPclient[channel] = OFF;
 8019c2c:	2200      	movs	r2, #0
 8019c2e:	4b18      	ldr	r3, [pc, #96]	; (8019c90 <proc_SEG_tcp_client_over_tls+0x414>)
                setSn_IR(sock, Sn_IR_CON);
 8019c30:	4638      	mov	r0, r7
 8019c32:	2101      	movs	r1, #1
                isSocketOpen_TCPclient[channel] = OFF;
 8019c34:	701a      	strb	r2, [r3, #0]
                setSn_IR(sock, Sn_IR_CON);
 8019c36:	f000 ff7d 	bl	801ab34 <WIZCHIP_WRITE>
 8019c3a:	e72c      	b.n	8019a96 <proc_SEG_tcp_client_over_tls+0x21a>
 8019c3c:	08033304 	.word	0x08033304
 8019c40:	20019964 	.word	0x20019964
 8019c44:	080339b4 	.word	0x080339b4
 8019c48:	080337bc 	.word	0x080337bc
 8019c4c:	2001fe58 	.word	0x2001fe58
 8019c50:	2001991c 	.word	0x2001991c
 8019c54:	20019958 	.word	0x20019958
 8019c58:	20019924 	.word	0x20019924
 8019c5c:	200198f4 	.word	0x200198f4
 8019c60:	20019900 	.word	0x20019900
 8019c64:	200198f8 	.word	0x200198f8
 8019c68:	200198f0 	.word	0x200198f0
 8019c6c:	20019914 	.word	0x20019914
 8019c70:	20019910 	.word	0x20019910
 8019c74:	20019904 	.word	0x20019904
 8019c78:	200198e8 	.word	0x200198e8
 8019c7c:	20019960 	.word	0x20019960
 8019c80:	200198ec 	.word	0x200198ec
 8019c84:	200198e4 	.word	0x200198e4
 8019c88:	080337d4 	.word	0x080337d4
 8019c8c:	200198fc 	.word	0x200198fc
 8019c90:	20019920 	.word	0x20019920
 8019c94:	08033810 	.word	0x08033810
 8019c98:	08033754 	.word	0x08033754
 8019c9c:	08033788 	.word	0x08033788
 8019ca0:	20019934 	.word	0x20019934
 8019ca4:	080332c0 	.word	0x080332c0
 8019ca8:	20019918 	.word	0x20019918
 8019cac:	2001990c 	.word	0x2001990c
                PRT_SEGCP("wiz_tls_init() failed\r\n");
 8019cb0:	f240 328a 	movw	r2, #906	; 0x38a
 8019cb4:	4984      	ldr	r1, [pc, #528]	; (8019ec8 <proc_SEG_tcp_client_over_tls+0x64c>)
 8019cb6:	4885      	ldr	r0, [pc, #532]	; (8019ecc <proc_SEG_tcp_client_over_tls+0x650>)
 8019cb8:	f7fe f8c4 	bl	8017e44 <WIZ_SECURE_printf>
                if(get_wiz_tls_init_state() == ENABLE)
 8019cbc:	682b      	ldr	r3, [r5, #0]
 8019cbe:	2b01      	cmp	r3, #1
 8019cc0:	f47f ae48 	bne.w	8019954 <proc_SEG_tcp_client_over_tls+0xd8>
 8019cc4:	e6d7      	b.n	8019a76 <proc_SEG_tcp_client_over_tls+0x1fa>
            if((enable_inactivity_timer[channel] == SEG_ENABLE) && (inactivity_time[channel] >= tcp_option[channel].inactivity))
 8019cc6:	4b82      	ldr	r3, [pc, #520]	; (8019ed0 <proc_SEG_tcp_client_over_tls+0x654>)
 8019cc8:	f8b6 20cd 	ldrh.w	r2, [r6, #205]	; 0xcd
 8019ccc:	881b      	ldrh	r3, [r3, #0]
 8019cce:	b29b      	uxth	r3, r3
 8019cd0:	429a      	cmp	r2, r3
 8019cd2:	f63f aee9 	bhi.w	8019aa8 <proc_SEG_tcp_client_over_tls+0x22c>
 8019cd6:	e6c2      	b.n	8019a5e <proc_SEG_tcp_client_over_tls+0x1e2>
                if(get_uart_buffer_usedsize(uartNum) || u2e_size[channel])
 8019cd8:	4628      	mov	r0, r5
 8019cda:	f7fe f897 	bl	8017e0c <get_uart_buffer_usedsize>
 8019cde:	4b7d      	ldr	r3, [pc, #500]	; (8019ed4 <proc_SEG_tcp_client_over_tls+0x658>)
 8019ce0:	881b      	ldrh	r3, [r3, #0]
 8019ce2:	4318      	orrs	r0, r3
 8019ce4:	b280      	uxth	r0, r0
 8019ce6:	b118      	cbz	r0, 8019cf0 <proc_SEG_tcp_client_over_tls+0x474>
                    uart_to_ether(uartNum, sock);
 8019ce8:	4621      	mov	r1, r4
 8019cea:	4628      	mov	r0, r5
 8019cec:	f7fe fc74 	bl	80185d8 <uart_to_ether>
                if(getSn_RX_RSR(sock) || e2u_size[channel])
 8019cf0:	4620      	mov	r0, r4
 8019cf2:	f000 ffd5 	bl	801aca0 <getSn_RX_RSR>
 8019cf6:	4b78      	ldr	r3, [pc, #480]	; (8019ed8 <proc_SEG_tcp_client_over_tls+0x65c>)
 8019cf8:	881b      	ldrh	r3, [r3, #0]
 8019cfa:	4318      	orrs	r0, r3
 8019cfc:	b280      	uxth	r0, r0
 8019cfe:	2800      	cmp	r0, #0
 8019d00:	f43f aecd 	beq.w	8019a9e <proc_SEG_tcp_client_over_tls+0x222>
                    ether_to_uart(uartNum, sock);
 8019d04:	4628      	mov	r0, r5
 8019d06:	4621      	mov	r1, r4
 8019d08:	f7ff f92e 	bl	8018f68 <ether_to_uart>
 8019d0c:	e6c7      	b.n	8019a9e <proc_SEG_tcp_client_over_tls+0x222>
                    PRT_SEG("wiz_tls_socket() failed\r\n");
 8019d0e:	496e      	ldr	r1, [pc, #440]	; (8019ec8 <proc_SEG_tcp_client_over_tls+0x64c>)
 8019d10:	4872      	ldr	r0, [pc, #456]	; (8019edc <proc_SEG_tcp_client_over_tls+0x660>)
 8019d12:	f7fe f897 	bl	8017e44 <WIZ_SECURE_printf>
                    if(get_wiz_tls_init_state() == ENABLE)
 8019d16:	682b      	ldr	r3, [r5, #0]
 8019d18:	2b01      	cmp	r3, #1
 8019d1a:	f47f ae1b 	bne.w	8019954 <proc_SEG_tcp_client_over_tls+0xd8>
 8019d1e:	e6aa      	b.n	8019a76 <proc_SEG_tcp_client_over_tls+0x1fa>
                if(!inactivity_time[channel] && tcp_option[channel].inactivity)     enable_inactivity_timer[channel] = SEG_ENABLE;
 8019d20:	f8b6 30cd 	ldrh.w	r3, [r6, #205]	; 0xcd
 8019d24:	2b00      	cmp	r3, #0
 8019d26:	f43f af61 	beq.w	8019bec <proc_SEG_tcp_client_over_tls+0x370>
 8019d2a:	2301      	movs	r3, #1
 8019d2c:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 8019f10 <proc_SEG_tcp_client_over_tls+0x694>
 8019d30:	f889 3000 	strb.w	r3, [r9]
 8019d34:	e75c      	b.n	8019bf0 <proc_SEG_tcp_client_over_tls+0x374>
    else if((srcip[0] == 0x00) && (srcip[1] == 0x00) && (srcip[2] == 0x00) && (srcip[3] == 0x00))
 8019d36:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
 8019d3a:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8019d3e:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
 8019d42:	4302      	orrs	r2, r0
 8019d44:	430a      	orrs	r2, r1
 8019d46:	f47f ade0 	bne.w	801990a <proc_SEG_tcp_client_over_tls+0x8e>
        if(serial_common->serial_debug_en) printf(" > SEG:CONNECTION FAILED - Invalid IP address: Zero IP\r\n");
 8019d4a:	f896 30e2 	ldrb.w	r3, [r6, #226]	; 0xe2
 8019d4e:	2b00      	cmp	r3, #0
 8019d50:	f43f ae00 	beq.w	8019954 <proc_SEG_tcp_client_over_tls+0xd8>
 8019d54:	4862      	ldr	r0, [pc, #392]	; (8019ee0 <proc_SEG_tcp_client_over_tls+0x664>)
 8019d56:	f016 f9cd 	bl	80300f4 <puts>
    return ret;
 8019d5a:	e5fb      	b.n	8019954 <proc_SEG_tcp_client_over_tls+0xd8>
    if((network_connection[channel].dns_use == SEG_ENABLE) && (flag_process_dns_success[channel] != ON))
 8019d5c:	4b61      	ldr	r3, [pc, #388]	; (8019ee4 <proc_SEG_tcp_client_over_tls+0x668>)
 8019d5e:	7819      	ldrb	r1, [r3, #0]
 8019d60:	2901      	cmp	r1, #1
 8019d62:	f43f af08 	beq.w	8019b76 <proc_SEG_tcp_client_over_tls+0x2fa>
        if(serial_common->serial_debug_en) printf(" > SEG:CONNECTION FAILED - DNS Failed flag_process_dns_success = %d\r\n", flag_process_dns_success[channel]);
 8019d66:	f896 30e2 	ldrb.w	r3, [r6, #226]	; 0xe2
 8019d6a:	2b00      	cmp	r3, #0
 8019d6c:	f43f adf2 	beq.w	8019954 <proc_SEG_tcp_client_over_tls+0xd8>
 8019d70:	485d      	ldr	r0, [pc, #372]	; (8019ee8 <proc_SEG_tcp_client_over_tls+0x66c>)
 8019d72:	f016 f939 	bl	802ffe8 <iprintf>
    return ret;
 8019d76:	e5ed      	b.n	8019954 <proc_SEG_tcp_client_over_tls+0xd8>
                    getsockopt(sock, SO_DESTIP, &destip);
 8019d78:	aa08      	add	r2, sp, #32
 8019d7a:	2104      	movs	r1, #4
 8019d7c:	4620      	mov	r0, r4
 8019d7e:	f002 f861 	bl	801be44 <getsockopt>
                    getsockopt(sock, SO_DESTPORT, &destport);
 8019d82:	f10d 021e 	add.w	r2, sp, #30
 8019d86:	2105      	movs	r1, #5
 8019d88:	4620      	mov	r0, r4
 8019d8a:	f002 f85b 	bl	801be44 <getsockopt>
                    PRT_SEG(" > SEG:CONNECTED TO - %d.%d.%d.%d : %d\r\n", destip[0], destip[1], destip[2], destip[3], destport);
 8019d8e:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8019d92:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
 8019d96:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8019d9a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8019d9e:	9300      	str	r3, [sp, #0]
 8019da0:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8019da4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8019da8:	4947      	ldr	r1, [pc, #284]	; (8019ec8 <proc_SEG_tcp_client_over_tls+0x64c>)
 8019daa:	4850      	ldr	r0, [pc, #320]	; (8019eec <proc_SEG_tcp_client_over_tls+0x670>)
 8019dac:	f7fe f84a 	bl	8017e44 <WIZ_SECURE_printf>
 8019db0:	e738      	b.n	8019c24 <proc_SEG_tcp_client_over_tls+0x3a8>
                    if((serial_command->serial_command == SEG_ENABLE) && serial_data_packing[channel].packing_time)
 8019db2:	9b05      	ldr	r3, [sp, #20]
 8019db4:	f8b3 30f1 	ldrh.w	r3, [r3, #241]	; 0xf1
 8019db8:	b29a      	uxth	r2, r3
 8019dba:	2a00      	cmp	r2, #0
 8019dbc:	f43f ae27 	beq.w	8019a0e <proc_SEG_tcp_client_over_tls+0x192>
                        modeswitch_gap_time = serial_data_packing[channel].packing_time;
 8019dc0:	4a4b      	ldr	r2, [pc, #300]	; (8019ef0 <proc_SEG_tcp_client_over_tls+0x674>)
 8019dc2:	8013      	strh	r3, [r2, #0]
 8019dc4:	e623      	b.n	8019a0e <proc_SEG_tcp_client_over_tls+0x192>
    if(client_any_port[channel])
 8019dc6:	f8df b14c 	ldr.w	fp, [pc, #332]	; 8019f14 <proc_SEG_tcp_client_over_tls+0x698>
 8019dca:	f8bb 3000 	ldrh.w	r3, [fp]
 8019dce:	2b00      	cmp	r3, #0
 8019dd0:	d13a      	bne.n	8019e48 <proc_SEG_tcp_client_over_tls+0x5cc>
        client_any_port[channel] = (rand() % 10000) + 35000; // 35000 ~ 44999
 8019dd2:	f016 f9c5 	bl	8030160 <rand>
 8019dd6:	f242 7210 	movw	r2, #10000	; 0x2710
 8019dda:	4f46      	ldr	r7, [pc, #280]	; (8019ef4 <proc_SEG_tcp_client_over_tls+0x678>)
 8019ddc:	17c3      	asrs	r3, r0, #31
 8019dde:	fb87 1700 	smull	r1, r7, r7, r0
 8019de2:	ebc3 3327 	rsb	r3, r3, r7, asr #12
 8019de6:	fb02 0713 	mls	r7, r2, r3, r0
 8019dea:	f5a7 47ee 	sub.w	r7, r7, #30464	; 0x7700
 8019dee:	3f48      	subs	r7, #72	; 0x48
 8019df0:	b2bf      	uxth	r7, r7
            (network_connection[channel].remote_ip[1] == 0x00) &&
 8019df2:	463a      	mov	r2, r7
        client_any_port[channel] = (rand() % 10000) + 35000; // 35000 ~ 44999
 8019df4:	f8ab 7000 	strh.w	r7, [fp]
    return client_any_port[channel];
 8019df8:	e5f9      	b.n	80199ee <proc_SEG_tcp_client_over_tls+0x172>
    else if((srcip[0] == 192) && (srcip[1] == 168)) // local IP address == Class C private IP
 8019dfa:	2bc0      	cmp	r3, #192	; 0xc0
 8019dfc:	d036      	beq.n	8019e6c <proc_SEG_tcp_client_over_tls+0x5f0>
                tls_ret = wiz_tls_connect_timeout(&s2e_tlsContext,
 8019dfe:	f242 7310 	movw	r3, #10000	; 0x2710
 8019e02:	f8b7 203f 	ldrh.w	r2, [r7, #63]	; 0x3f
 8019e06:	483c      	ldr	r0, [pc, #240]	; (8019ef8 <proc_SEG_tcp_client_over_tls+0x67c>)
 8019e08:	f107 0141 	add.w	r1, r7, #65	; 0x41
 8019e0c:	f004 fdea 	bl	801e9e4 <wiz_tls_connect_timeout>
                if(tls_ret != 0) // TLS connection failed
 8019e10:	b1a8      	cbz	r0, 8019e3e <proc_SEG_tcp_client_over_tls+0x5c2>
    return wiz_tls_init_state;
 8019e12:	4d3a      	ldr	r5, [pc, #232]	; (8019efc <proc_SEG_tcp_client_over_tls+0x680>)
                    process_socket_termination(sock, 100); // including disconnect(sock) function
 8019e14:	4620      	mov	r0, r4
 8019e16:	2164      	movs	r1, #100	; 0x64
 8019e18:	f7fe f9c6 	bl	80181a8 <process_socket_termination>
                    if(get_wiz_tls_init_state() == ENABLE)
 8019e1c:	682b      	ldr	r3, [r5, #0]
 8019e1e:	2b01      	cmp	r3, #1
 8019e20:	d04c      	beq.n	8019ebc <proc_SEG_tcp_client_over_tls+0x640>
                    if(serial_common->serial_debug_en)
 8019e22:	f898 30e2 	ldrb.w	r3, [r8, #226]	; 0xe2
 8019e26:	2b00      	cmp	r3, #0
 8019e28:	f43f ad94 	beq.w	8019954 <proc_SEG_tcp_client_over_tls+0xd8>
                        PRT_SEG(" > SEG:TCP_CLIENT_OVER_TLS_MODE: CONNECTION FAILED\r\n");
 8019e2c:	4926      	ldr	r1, [pc, #152]	; (8019ec8 <proc_SEG_tcp_client_over_tls+0x64c>)
 8019e2e:	4834      	ldr	r0, [pc, #208]	; (8019f00 <proc_SEG_tcp_client_over_tls+0x684>)
 8019e30:	f7fe f808 	bl	8017e44 <WIZ_SECURE_printf>
 8019e34:	e58e      	b.n	8019954 <proc_SEG_tcp_client_over_tls+0xd8>
                    uart_rx_flush(uartNum);
 8019e36:	4628      	mov	r0, r5
 8019e38:	f7fd ffc2 	bl	8017dc0 <uart_rx_flush>
 8019e3c:	e6f6      	b.n	8019c2c <proc_SEG_tcp_client_over_tls+0x3b0>
                PRT_SEG(" > SEG:TCP_CLIENT_OVER_TLS_MODE: CLIENT CONNECTED\r\n");
 8019e3e:	4922      	ldr	r1, [pc, #136]	; (8019ec8 <proc_SEG_tcp_client_over_tls+0x64c>)
 8019e40:	4830      	ldr	r0, [pc, #192]	; (8019f04 <proc_SEG_tcp_client_over_tls+0x688>)
 8019e42:	f7fd ffff 	bl	8017e44 <WIZ_SECURE_printf>
 8019e46:	e585      	b.n	8019954 <proc_SEG_tcp_client_over_tls+0xd8>
        if(client_any_port[channel] < 0xffff)
 8019e48:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019e4c:	428b      	cmp	r3, r1
 8019e4e:	d032      	beq.n	8019eb6 <proc_SEG_tcp_client_over_tls+0x63a>
            client_any_port[channel]++;
 8019e50:	3301      	adds	r3, #1
 8019e52:	b29f      	uxth	r7, r3
            (network_connection[channel].remote_ip[1] == 0x00) &&
 8019e54:	463a      	mov	r2, r7
            client_any_port[channel]++;
 8019e56:	f8ab 7000 	strh.w	r7, [fp]
    return client_any_port[channel];
 8019e5a:	e5c8      	b.n	80199ee <proc_SEG_tcp_client_over_tls+0x172>
 8019e5c:	2100      	movs	r1, #0
    else if((srcip[0] == network_connection[channel].remote_ip[0]) &&
 8019e5e:	428b      	cmp	r3, r1
 8019e60:	d1cb      	bne.n	8019dfa <proc_SEG_tcp_client_over_tls+0x57e>
 8019e62:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
 8019e66:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
 8019e6a:	e55c      	b.n	8019926 <proc_SEG_tcp_client_over_tls+0xaa>
    else if((srcip[0] == 192) && (srcip[1] == 168)) // local IP address == Class C private IP
 8019e6c:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8019e70:	2ba8      	cmp	r3, #168	; 0xa8
 8019e72:	d1c4      	bne.n	8019dfe <proc_SEG_tcp_client_over_tls+0x582>
        if((network_option->dhcp_use == SEG_DISABLE) && ((network_connection[channel].remote_ip[0] == 192) &&
 8019e74:	f899 30c7 	ldrb.w	r3, [r9, #199]	; 0xc7
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	d1c0      	bne.n	8019dfe <proc_SEG_tcp_client_over_tls+0x582>
 8019e7c:	29c0      	cmp	r1, #192	; 0xc0
 8019e7e:	d1be      	bne.n	8019dfe <proc_SEG_tcp_client_over_tls+0x582>
 8019e80:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
 8019e84:	2aa8      	cmp	r2, #168	; 0xa8
 8019e86:	d1ba      	bne.n	8019dfe <proc_SEG_tcp_client_over_tls+0x582>
            if(srcip[2] != network_connection[channel].remote_ip[2]) // Class C Private IP network mismatch
 8019e88:	f895 3043 	ldrb.w	r3, [r5, #67]	; 0x43
 8019e8c:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8019e90:	4298      	cmp	r0, r3
 8019e92:	d0b4      	beq.n	8019dfe <proc_SEG_tcp_client_over_tls+0x582>
                if(serial_common->serial_debug_en)
 8019e94:	f896 00e2 	ldrb.w	r0, [r6, #226]	; 0xe2
 8019e98:	2800      	cmp	r0, #0
 8019e9a:	f43f ad5b 	beq.w	8019954 <proc_SEG_tcp_client_over_tls+0xd8>
                    printf(" > SEG:CONNECTION FAILED - Invalid IP address range (%d.%d.[%d].%d)\r\n",
 8019e9e:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
 8019ea2:	9000      	str	r0, [sp, #0]
 8019ea4:	4818      	ldr	r0, [pc, #96]	; (8019f08 <proc_SEG_tcp_client_over_tls+0x68c>)
 8019ea6:	f016 f89f 	bl	802ffe8 <iprintf>
    return ret;
 8019eaa:	e553      	b.n	8019954 <proc_SEG_tcp_client_over_tls+0xd8>
                if((flag_sent_first_keepalive[channel] == SEG_ENABLE) &&
 8019eac:	2f01      	cmp	r7, #1
 8019eae:	f47f ad51 	bne.w	8019954 <proc_SEG_tcp_client_over_tls+0xd8>
 8019eb2:	4b16      	ldr	r3, [pc, #88]	; (8019f0c <proc_SEG_tcp_client_over_tls+0x690>)
 8019eb4:	e624      	b.n	8019b00 <proc_SEG_tcp_client_over_tls+0x284>
            client_any_port[channel] = 0;
 8019eb6:	f8ab 2000 	strh.w	r2, [fp]
 8019eba:	e78a      	b.n	8019dd2 <proc_SEG_tcp_client_over_tls+0x556>
                        wiz_tls_deinit(&s2e_tlsContext);
 8019ebc:	480e      	ldr	r0, [pc, #56]	; (8019ef8 <proc_SEG_tcp_client_over_tls+0x67c>)
 8019ebe:	f004 fd51 	bl	801e964 <wiz_tls_deinit>
        wiz_tls_init_state = DISABLE;
 8019ec2:	2300      	movs	r3, #0
 8019ec4:	602b      	str	r3, [r5, #0]
 8019ec6:	e7ac      	b.n	8019e22 <proc_SEG_tcp_client_over_tls+0x5a6>
 8019ec8:	080339b4 	.word	0x080339b4
 8019ecc:	08033870 	.word	0x08033870
 8019ed0:	2001991c 	.word	0x2001991c
 8019ed4:	20019960 	.word	0x20019960
 8019ed8:	200198ec 	.word	0x200198ec
 8019edc:	08033848 	.word	0x08033848
 8019ee0:	08033288 	.word	0x08033288
 8019ee4:	20019908 	.word	0x20019908
 8019ee8:	08033240 	.word	0x08033240
 8019eec:	0803367c 	.word	0x0803367c
 8019ef0:	20018212 	.word	0x20018212
 8019ef4:	68db8bad 	.word	0x68db8bad
 8019ef8:	2001fe58 	.word	0x2001fe58
 8019efc:	20019964 	.word	0x20019964
 8019f00:	080336d4 	.word	0x080336d4
 8019f04:	08033714 	.word	0x08033714
 8019f08:	08033338 	.word	0x08033338
 8019f0c:	20019924 	.word	0x20019924
 8019f10:	200198f4 	.word	0x200198f4
 8019f14:	200198e4 	.word	0x200198e4

08019f18 <proc_SEG_tcp_server>:
{
 8019f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f1c:	b087      	sub	sp, #28
 8019f1e:	460c      	mov	r4, r1
 8019f20:	4605      	mov	r5, r0
    struct __tcp_option *tcp_option = (struct __tcp_option *)get_DevConfig_pointer()->tcp_option;
 8019f22:	f7fa f887 	bl	8014034 <get_DevConfig_pointer>
 8019f26:	4606      	mov	r6, r0
    struct __serial_common *serial_common = (struct __serial_common *)&(get_DevConfig_pointer()->serial_common);
 8019f28:	f7fa f884 	bl	8014034 <get_DevConfig_pointer>
 8019f2c:	4680      	mov	r8, r0
    struct __network_connection *network_connection = (struct __network_connection *)get_DevConfig_pointer()->network_connection;
 8019f2e:	f7fa f881 	bl	8014034 <get_DevConfig_pointer>
 8019f32:	4607      	mov	r7, r0
    struct __serial_command *serial_command = (struct __serial_command *)&get_DevConfig_pointer()->serial_command;
 8019f34:	f7fa f87e 	bl	8014034 <get_DevConfig_pointer>
 8019f38:	4681      	mov	r9, r0
    struct __serial_data_packing *serial_data_packing = (struct __serial_data_packing *)get_DevConfig_pointer()->serial_data_packing;
 8019f3a:	f7fa f87b 	bl	8014034 <get_DevConfig_pointer>
 8019f3e:	9003      	str	r0, [sp, #12]
    struct __device_option *device_option = (struct __device_option *)&(get_DevConfig_pointer()->device_option);
 8019f40:	f7fa f878 	bl	8014034 <get_DevConfig_pointer>
    uint8_t destip[4] = {0, };
 8019f44:	2300      	movs	r3, #0
 8019f46:	9305      	str	r3, [sp, #20]
    uint16_t destport = 0;
 8019f48:	f8ad 3012 	strh.w	r3, [sp, #18]
    struct __serial_option *serial_option = (struct __serial_option *)&(get_DevConfig_pointer()->serial_option);
 8019f4c:	f7fa f872 	bl	8014034 <get_DevConfig_pointer>
 8019f50:	4602      	mov	r2, r0
    uint8_t state = getSn_SR(sock);
 8019f52:	1d23      	adds	r3, r4, #4
 8019f54:	ea4f 2a03 	mov.w	sl, r3, lsl #8
 8019f58:	f10a 0003 	add.w	r0, sl, #3
    return serial_option[channel].protocol;
 8019f5c:	f892 b0e9 	ldrb.w	fp, [r2, #233]	; 0xe9
    uint8_t state = getSn_SR(sock);
 8019f60:	f000 fe06 	bl	801ab70 <WIZCHIP_READ>
    switch(state)
 8019f64:	281c      	cmp	r0, #28
 8019f66:	f200 8089 	bhi.w	801a07c <proc_SEG_tcp_server+0x164>
 8019f6a:	e8df f010 	tbh	[pc, r0, lsl #1]
 8019f6e:	008a      	.short	0x008a
 8019f70:	00870087 	.word	0x00870087
 8019f74:	00870087 	.word	0x00870087
 8019f78:	00870087 	.word	0x00870087
 8019f7c:	00870087 	.word	0x00870087
 8019f80:	00870087 	.word	0x00870087
 8019f84:	00870087 	.word	0x00870087
 8019f88:	00870087 	.word	0x00870087
 8019f8c:	00870087 	.word	0x00870087
 8019f90:	00870087 	.word	0x00870087
 8019f94:	008700e4 	.word	0x008700e4
 8019f98:	00870087 	.word	0x00870087
 8019f9c:	008a001d 	.word	0x008a001d
 8019fa0:	00870087 	.word	0x00870087
 8019fa4:	00cc0087 	.word	0x00cc0087
            if(getSn_IR(sock) & Sn_IR_CON)
 8019fa8:	f10a 0702 	add.w	r7, sl, #2
 8019fac:	4638      	mov	r0, r7
 8019fae:	f000 fddf 	bl	801ab70 <WIZCHIP_READ>
 8019fb2:	07c3      	lsls	r3, r0, #31
 8019fb4:	f140 80c5 	bpl.w	801a142 <proc_SEG_tcp_server+0x22a>
    struct __network_connection *network_connection = (struct __network_connection *)get_DevConfig_pointer()->network_connection;
 8019fb8:	f7fa f83c 	bl	8014034 <get_DevConfig_pointer>
            network_connection[channel].working_state = ST_CONNECT;
 8019fbc:	2302      	movs	r3, #2
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, ON); // Status I/O pin to low
 8019fbe:	2201      	movs	r2, #1
            network_connection[channel].working_state = ST_CONNECT;
 8019fc0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, ON); // Status I/O pin to low
 8019fc4:	2100      	movs	r1, #0
 8019fc6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8019fca:	f7fd fa9d 	bl	8017508 <set_connection_status_io>
                if(!inactivity_time[channel] && tcp_option[channel].inactivity)
 8019fce:	4ba1      	ldr	r3, [pc, #644]	; (801a254 <proc_SEG_tcp_server+0x33c>)
 8019fd0:	881b      	ldrh	r3, [r3, #0]
 8019fd2:	b29b      	uxth	r3, r3
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	f000 8117 	beq.w	801a208 <proc_SEG_tcp_server+0x2f0>
 8019fda:	f8df 9294 	ldr.w	r9, [pc, #660]	; 801a270 <proc_SEG_tcp_server+0x358>
                if(tcp_option[channel].pw_connect_en == SEG_DISABLE)
 8019fde:	f896 30e0 	ldrb.w	r3, [r6, #224]	; 0xe0
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	f040 8125 	bne.w	801a232 <proc_SEG_tcp_server+0x31a>
                    flag_connect_pw_auth[channel] = SEG_ENABLE;		// TCP server mode only (+ mixed_server)
 8019fe8:	2201      	movs	r2, #1
 8019fea:	4b9b      	ldr	r3, [pc, #620]	; (801a258 <proc_SEG_tcp_server+0x340>)
 8019fec:	701a      	strb	r2, [r3, #0]
                if(serial_common->serial_debug_en)
 8019fee:	f898 30e2 	ldrb.w	r3, [r8, #226]	; 0xe2
 8019ff2:	b1cb      	cbz	r3, 801a028 <proc_SEG_tcp_server+0x110>
                    getsockopt(sock, SO_DESTIP, &destip);
 8019ff4:	2104      	movs	r1, #4
 8019ff6:	aa05      	add	r2, sp, #20
 8019ff8:	4620      	mov	r0, r4
 8019ffa:	f001 ff23 	bl	801be44 <getsockopt>
                    getsockopt(sock, SO_DESTPORT, &destport);
 8019ffe:	2105      	movs	r1, #5
 801a000:	f10d 0212 	add.w	r2, sp, #18
 801a004:	4620      	mov	r0, r4
 801a006:	f001 ff1d 	bl	801be44 <getsockopt>
                    printf(" > SEG:CONNECTED FROM - %d.%d.%d.%d : %d\r\n",destip[0], destip[1], destip[2], destip[3], destport);
 801a00a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801a00e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 801a012:	f89d 1014 	ldrb.w	r1, [sp, #20]
 801a016:	e9cd 3200 	strd	r3, r2, [sp]
 801a01a:	4890      	ldr	r0, [pc, #576]	; (801a25c <proc_SEG_tcp_server+0x344>)
 801a01c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 801a020:	f89d 2015 	ldrb.w	r2, [sp, #21]
 801a024:	f015 ffe0 	bl	802ffe8 <iprintf>
                if(serial_mode == SEG_SERIAL_PROTOCOL_NONE)
 801a028:	f1bb 0f00 	cmp.w	fp, #0
 801a02c:	f000 8108 	beq.w	801a240 <proc_SEG_tcp_server+0x328>
                setSn_IR(sock, Sn_IR_CON);
 801a030:	4638      	mov	r0, r7
 801a032:	2101      	movs	r1, #1
 801a034:	f000 fd7e 	bl	801ab34 <WIZCHIP_WRITE>
            if(serial_mode == SEG_SERIAL_PROTOCOL_NONE)
 801a038:	f1bb 0f00 	cmp.w	fp, #0
 801a03c:	f000 8096 	beq.w	801a16c <proc_SEG_tcp_server+0x254>
            if((enable_inactivity_timer[channel] == SEG_ENABLE) && (inactivity_time[channel] >= tcp_option[channel].inactivity))
 801a040:	f899 3000 	ldrb.w	r3, [r9]
 801a044:	2b01      	cmp	r3, #1
 801a046:	d07f      	beq.n	801a148 <proc_SEG_tcp_server+0x230>
            if((tcp_option[channel].keepalive_en == SEG_ENABLE) && (enable_keepalive_timer[channel] == SEG_ENABLE))
 801a048:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
 801a04c:	2b01      	cmp	r3, #1
 801a04e:	f000 80a8 	beq.w	801a1a2 <proc_SEG_tcp_server+0x28a>
            if(tcp_option[channel].pw_connect_en == SEG_ENABLE)
 801a052:	f896 30e0 	ldrb.w	r3, [r6, #224]	; 0xe0
 801a056:	2b01      	cmp	r3, #1
 801a058:	d110      	bne.n	801a07c <proc_SEG_tcp_server+0x164>
                if((flag_connect_pw_auth[channel] == SEG_DISABLE) &&
 801a05a:	4b7f      	ldr	r3, [pc, #508]	; (801a258 <proc_SEG_tcp_server+0x340>)
 801a05c:	781d      	ldrb	r5, [r3, #0]
 801a05e:	b96d      	cbnz	r5, 801a07c <proc_SEG_tcp_server+0x164>
 801a060:	f241 3287 	movw	r2, #4999	; 0x1387
                   (connection_auth_time[channel] >= MAX_CONNECTION_AUTH_TIME)) // timeout default: 5000ms (5 sec)
 801a064:	4e7e      	ldr	r6, [pc, #504]	; (801a260 <proc_SEG_tcp_server+0x348>)
 801a066:	8833      	ldrh	r3, [r6, #0]
 801a068:	b29b      	uxth	r3, r3
                if((flag_connect_pw_auth[channel] == SEG_DISABLE) &&
 801a06a:	4293      	cmp	r3, r2
 801a06c:	d906      	bls.n	801a07c <proc_SEG_tcp_server+0x164>
                    process_socket_termination(sock, 100);
 801a06e:	4620      	mov	r0, r4
 801a070:	2164      	movs	r1, #100	; 0x64
 801a072:	f7fe f899 	bl	80181a8 <process_socket_termination>
                    enable_connection_auth_timer[channel] = DISABLE;
 801a076:	4b7b      	ldr	r3, [pc, #492]	; (801a264 <proc_SEG_tcp_server+0x34c>)
                    connection_auth_time[channel] = 0;
 801a078:	8035      	strh	r5, [r6, #0]
                    enable_connection_auth_timer[channel] = DISABLE;
 801a07a:	701d      	strb	r5, [r3, #0]
}
 801a07c:	b007      	add	sp, #28
 801a07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            close(sock);
 801a082:	4620      	mov	r0, r4
 801a084:	f001 f8c6 	bl	801b214 <close>
            network_connection[channel].working_state = ST_OPEN;
 801a088:	2501      	movs	r5, #1
    struct __network_connection *network_connection = (struct __network_connection *)get_DevConfig_pointer()->network_connection;
 801a08a:	f7f9 ffd3 	bl	8014034 <get_DevConfig_pointer>
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, OFF); // Status I/O pin to high
 801a08e:	2200      	movs	r2, #0
            network_connection[channel].working_state = ST_OPEN;
 801a090:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, OFF); // Status I/O pin to high
 801a094:	4611      	mov	r1, r2
 801a096:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801a09a:	f7fd fa35 	bl	8017508 <set_connection_status_io>
    enable_inactivity_timer[channel] = SEG_DISABLE;
 801a09e:	2300      	movs	r3, #0
    inactivity_time[channel] = 0;
 801a0a0:	4a6c      	ldr	r2, [pc, #432]	; (801a254 <proc_SEG_tcp_server+0x33c>)
    serial_input_time[channel] = 0;
 801a0a2:	4871      	ldr	r0, [pc, #452]	; (801a268 <proc_SEG_tcp_server+0x350>)
    inactivity_time[channel] = 0;
 801a0a4:	8013      	strh	r3, [r2, #0]
    keepalive_time[channel] = 0;
 801a0a6:	4971      	ldr	r1, [pc, #452]	; (801a26c <proc_SEG_tcp_server+0x354>)
    enable_inactivity_timer[channel] = SEG_DISABLE;
 801a0a8:	4a71      	ldr	r2, [pc, #452]	; (801a270 <proc_SEG_tcp_server+0x358>)
    serial_input_time[channel] = 0;
 801a0aa:	8003      	strh	r3, [r0, #0]
    enable_inactivity_timer[channel] = SEG_DISABLE;
 801a0ac:	7013      	strb	r3, [r2, #0]
    keepalive_time[channel] = 0;
 801a0ae:	800b      	strh	r3, [r1, #0]
    enable_serial_input_timer[channel] = SEG_DISABLE;
 801a0b0:	4870      	ldr	r0, [pc, #448]	; (801a274 <proc_SEG_tcp_server+0x35c>)
    enable_keepalive_timer[channel] = SEG_DISABLE;
 801a0b2:	4971      	ldr	r1, [pc, #452]	; (801a278 <proc_SEG_tcp_server+0x360>)
    enable_connection_auth_timer[channel] = SEG_DISABLE;
 801a0b4:	4a6b      	ldr	r2, [pc, #428]	; (801a264 <proc_SEG_tcp_server+0x34c>)
    enable_serial_input_timer[channel] = SEG_DISABLE;
 801a0b6:	7003      	strb	r3, [r0, #0]
    enable_keepalive_timer[channel] = SEG_DISABLE;
 801a0b8:	700b      	strb	r3, [r1, #0]
    enable_connection_auth_timer[channel] = SEG_DISABLE;
 801a0ba:	7013      	strb	r3, [r2, #0]
    flag_serial_input_time_elapse[channel] = SEG_DISABLE;
 801a0bc:	486f      	ldr	r0, [pc, #444]	; (801a27c <proc_SEG_tcp_server+0x364>)
    flag_sent_keepalive[channel] = SEG_DISABLE;
 801a0be:	4970      	ldr	r1, [pc, #448]	; (801a280 <proc_SEG_tcp_server+0x368>)
    flag_connect_pw_auth[channel] = SEG_DISABLE; // TCP_SERVER_MODE only (+ MIXED_SERVER)
 801a0c0:	4a65      	ldr	r2, [pc, #404]	; (801a258 <proc_SEG_tcp_server+0x340>)
    flag_serial_input_time_elapse[channel] = SEG_DISABLE;
 801a0c2:	7003      	strb	r3, [r0, #0]
    flag_sent_keepalive[channel] = SEG_DISABLE;
 801a0c4:	700b      	strb	r3, [r1, #0]
    flag_connect_pw_auth[channel] = SEG_DISABLE; // TCP_SERVER_MODE only (+ MIXED_SERVER)
 801a0c6:	7013      	strb	r3, [r2, #0]
    connection_auth_time[channel] = 0;
 801a0c8:	4865      	ldr	r0, [pc, #404]	; (801a260 <proc_SEG_tcp_server+0x348>)
            u2e_size[channel] = 0;
 801a0ca:	496e      	ldr	r1, [pc, #440]	; (801a284 <proc_SEG_tcp_server+0x36c>)
            e2u_size[channel] = 0;
 801a0cc:	4a6e      	ldr	r2, [pc, #440]	; (801a288 <proc_SEG_tcp_server+0x370>)
    connection_auth_time[channel] = 0;
 801a0ce:	8003      	strh	r3, [r0, #0]
            u2e_size[channel] = 0;
 801a0d0:	800b      	strh	r3, [r1, #0]
            e2u_size[channel] = 0;
 801a0d2:	8013      	strh	r3, [r2, #0]
            if(socket(sock, Sn_MR_TCP, network_connection[channel].local_port, (SF_TCP_NODELAY | SF_IO_NONBLOCK)) == sock)
 801a0d4:	4629      	mov	r1, r5
 801a0d6:	2321      	movs	r3, #33	; 0x21
 801a0d8:	4620      	mov	r0, r4
 801a0da:	f8b7 203d 	ldrh.w	r2, [r7, #61]	; 0x3d
 801a0de:	f000 ffbf 	bl	801b060 <socket>
 801a0e2:	4284      	cmp	r4, r0
 801a0e4:	d1ca      	bne.n	801a07c <proc_SEG_tcp_server+0x164>
                if((serial_command->serial_command == SEG_ENABLE) && serial_data_packing[channel].packing_time)
 801a0e6:	f899 30e3 	ldrb.w	r3, [r9, #227]	; 0xe3
 801a0ea:	42ab      	cmp	r3, r5
 801a0ec:	f000 8097 	beq.w	801a21e <proc_SEG_tcp_server+0x306>
                listen(sock);
 801a0f0:	4620      	mov	r0, r4
 801a0f2:	f001 f8c9 	bl	801b288 <listen>
                if(serial_common->serial_debug_en)
 801a0f6:	f898 30e2 	ldrb.w	r3, [r8, #226]	; 0xe2
 801a0fa:	2b00      	cmp	r3, #0
 801a0fc:	d0be      	beq.n	801a07c <proc_SEG_tcp_server+0x164>
                    printf(" > SEG:TCP_SERVER_MODE:SOCKOPEN\r\n");
 801a0fe:	4863      	ldr	r0, [pc, #396]	; (801a28c <proc_SEG_tcp_server+0x374>)
 801a100:	f015 fff8 	bl	80300f4 <puts>
}
 801a104:	e7ba      	b.n	801a07c <proc_SEG_tcp_server+0x164>
            if(serial_mode == SEG_SERIAL_PROTOCOL_NONE)
 801a106:	f1bb 0f00 	cmp.w	fp, #0
 801a10a:	d10d      	bne.n	801a128 <proc_SEG_tcp_server+0x210>
 801a10c:	4e5e      	ldr	r6, [pc, #376]	; (801a288 <proc_SEG_tcp_server+0x370>)
 801a10e:	e003      	b.n	801a118 <proc_SEG_tcp_server+0x200>
                    ether_to_uart(uartNum, sock); // receive remaining packets
 801a110:	4621      	mov	r1, r4
 801a112:	4628      	mov	r0, r5
 801a114:	f7fe ff28 	bl	8018f68 <ether_to_uart>
                while(getSn_RX_RSR(sock) || e2u_size[channel])
 801a118:	4620      	mov	r0, r4
 801a11a:	f000 fdc1 	bl	801aca0 <getSn_RX_RSR>
 801a11e:	8833      	ldrh	r3, [r6, #0]
 801a120:	4303      	orrs	r3, r0
 801a122:	b29b      	uxth	r3, r3
 801a124:	2b00      	cmp	r3, #0
 801a126:	d1f3      	bne.n	801a110 <proc_SEG_tcp_server+0x1f8>
            process_socket_termination(sock, 100);
 801a128:	4620      	mov	r0, r4
 801a12a:	2164      	movs	r1, #100	; 0x64
 801a12c:	f7fe f83c 	bl	80181a8 <process_socket_termination>
}
 801a130:	b007      	add	sp, #28
 801a132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            listen(sock); //Function call Immediately after socket open operation
 801a136:	4620      	mov	r0, r4
 801a138:	f001 f8a6 	bl	801b288 <listen>
}
 801a13c:	b007      	add	sp, #28
 801a13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a142:	f8df 912c 	ldr.w	r9, [pc, #300]	; 801a270 <proc_SEG_tcp_server+0x358>
 801a146:	e777      	b.n	801a038 <proc_SEG_tcp_server+0x120>
            if((enable_inactivity_timer[channel] == SEG_ENABLE) && (inactivity_time[channel] >= tcp_option[channel].inactivity))
 801a148:	4b42      	ldr	r3, [pc, #264]	; (801a254 <proc_SEG_tcp_server+0x33c>)
 801a14a:	f8b6 20cd 	ldrh.w	r2, [r6, #205]	; 0xcd
 801a14e:	881b      	ldrh	r3, [r3, #0]
 801a150:	b29b      	uxth	r3, r3
 801a152:	429a      	cmp	r2, r3
 801a154:	f63f af78 	bhi.w	801a048 <proc_SEG_tcp_server+0x130>
                process_socket_termination(sock, 100);
 801a158:	2164      	movs	r1, #100	; 0x64
 801a15a:	4620      	mov	r0, r4
 801a15c:	f7fe f824 	bl	80181a8 <process_socket_termination>
                enable_keepalive_timer[channel] = DISABLE;
 801a160:	2300      	movs	r3, #0
 801a162:	4945      	ldr	r1, [pc, #276]	; (801a278 <proc_SEG_tcp_server+0x360>)
                keepalive_time[channel] = 0;
 801a164:	4a41      	ldr	r2, [pc, #260]	; (801a26c <proc_SEG_tcp_server+0x354>)
                enable_keepalive_timer[channel] = DISABLE;
 801a166:	700b      	strb	r3, [r1, #0]
                keepalive_time[channel] = 0;
 801a168:	8013      	strh	r3, [r2, #0]
            if((tcp_option[channel].keepalive_en == SEG_ENABLE) && (enable_keepalive_timer[channel] == SEG_ENABLE))
 801a16a:	e772      	b.n	801a052 <proc_SEG_tcp_server+0x13a>
                if(get_uart_buffer_usedsize(uartNum) || u2e_size[channel])
 801a16c:	4628      	mov	r0, r5
 801a16e:	f7fd fe4d 	bl	8017e0c <get_uart_buffer_usedsize>
 801a172:	4b44      	ldr	r3, [pc, #272]	; (801a284 <proc_SEG_tcp_server+0x36c>)
 801a174:	881b      	ldrh	r3, [r3, #0]
 801a176:	4318      	orrs	r0, r3
 801a178:	b280      	uxth	r0, r0
 801a17a:	b118      	cbz	r0, 801a184 <proc_SEG_tcp_server+0x26c>
                    uart_to_ether(uartNum, sock);
 801a17c:	4621      	mov	r1, r4
 801a17e:	4628      	mov	r0, r5
 801a180:	f7fe fa2a 	bl	80185d8 <uart_to_ether>
                if(getSn_RX_RSR(sock) || e2u_size[channel])
 801a184:	4620      	mov	r0, r4
 801a186:	f000 fd8b 	bl	801aca0 <getSn_RX_RSR>
 801a18a:	4b3f      	ldr	r3, [pc, #252]	; (801a288 <proc_SEG_tcp_server+0x370>)
 801a18c:	881b      	ldrh	r3, [r3, #0]
 801a18e:	4318      	orrs	r0, r3
 801a190:	b280      	uxth	r0, r0
 801a192:	2800      	cmp	r0, #0
 801a194:	f43f af54 	beq.w	801a040 <proc_SEG_tcp_server+0x128>
                    ether_to_uart(uartNum, sock);
 801a198:	4628      	mov	r0, r5
 801a19a:	4621      	mov	r1, r4
 801a19c:	f7fe fee4 	bl	8018f68 <ether_to_uart>
 801a1a0:	e74e      	b.n	801a040 <proc_SEG_tcp_server+0x128>
            if((tcp_option[channel].keepalive_en == SEG_ENABLE) && (enable_keepalive_timer[channel] == SEG_ENABLE))
 801a1a2:	4b35      	ldr	r3, [pc, #212]	; (801a278 <proc_SEG_tcp_server+0x360>)
 801a1a4:	781d      	ldrb	r5, [r3, #0]
 801a1a6:	2d01      	cmp	r5, #1
 801a1a8:	f47f af53 	bne.w	801a052 <proc_SEG_tcp_server+0x13a>
                if((flag_sent_first_keepalive[channel] == SEG_DISABLE) &&
 801a1ac:	4b38      	ldr	r3, [pc, #224]	; (801a290 <proc_SEG_tcp_server+0x378>)
 801a1ae:	781f      	ldrb	r7, [r3, #0]
 801a1b0:	2f00      	cmp	r7, #0
 801a1b2:	d149      	bne.n	801a248 <proc_SEG_tcp_server+0x330>
                   (keepalive_time[channel] >= tcp_option[channel].keepalive_wait_time) &&
 801a1b4:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 801a26c <proc_SEG_tcp_server+0x354>
 801a1b8:	f8b6 10d2 	ldrh.w	r1, [r6, #210]	; 0xd2
 801a1bc:	f8b8 2000 	ldrh.w	r2, [r8]
 801a1c0:	b292      	uxth	r2, r2
                if((flag_sent_first_keepalive[channel] == SEG_DISABLE) &&
 801a1c2:	428a      	cmp	r2, r1
 801a1c4:	f4ff af45 	bcc.w	801a052 <proc_SEG_tcp_server+0x13a>
                   (keepalive_time[channel] >= tcp_option[channel].keepalive_wait_time) &&
 801a1c8:	2900      	cmp	r1, #0
 801a1ca:	f43f af42 	beq.w	801a052 <proc_SEG_tcp_server+0x13a>
    setsockopt(sock, SO_KEEPALIVESEND, 0);
 801a1ce:	463a      	mov	r2, r7
 801a1d0:	2106      	movs	r1, #6
 801a1d2:	4620      	mov	r0, r4
 801a1d4:	f001 fdb6 	bl	801bd44 <setsockopt>
                    flag_sent_first_keepalive[channel] = SEG_ENABLE;
 801a1d8:	4b2d      	ldr	r3, [pc, #180]	; (801a290 <proc_SEG_tcp_server+0x378>)
                    keepalive_time[channel] = 0;
 801a1da:	f8a8 7000 	strh.w	r7, [r8]
                    flag_sent_first_keepalive[channel] = SEG_ENABLE;
 801a1de:	701d      	strb	r5, [r3, #0]
                   (keepalive_time[channel] >= tcp_option[channel].keepalive_retry_time) &&
 801a1e0:	f8b8 3000 	ldrh.w	r3, [r8]
 801a1e4:	f8b6 20d4 	ldrh.w	r2, [r6, #212]	; 0xd4
 801a1e8:	b29b      	uxth	r3, r3
                if((flag_sent_first_keepalive[channel] == SEG_ENABLE) &&
 801a1ea:	4293      	cmp	r3, r2
 801a1ec:	f4ff af31 	bcc.w	801a052 <proc_SEG_tcp_server+0x13a>
                   (keepalive_time[channel] >= tcp_option[channel].keepalive_retry_time) &&
 801a1f0:	2a00      	cmp	r2, #0
 801a1f2:	f43f af2e 	beq.w	801a052 <proc_SEG_tcp_server+0x13a>
    setsockopt(sock, SO_KEEPALIVESEND, 0);
 801a1f6:	2200      	movs	r2, #0
 801a1f8:	2106      	movs	r1, #6
 801a1fa:	4620      	mov	r0, r4
 801a1fc:	f001 fda2 	bl	801bd44 <setsockopt>
                    keepalive_time[channel] = 0;
 801a200:	2300      	movs	r3, #0
 801a202:	f8a8 3000 	strh.w	r3, [r8]
 801a206:	e724      	b.n	801a052 <proc_SEG_tcp_server+0x13a>
                if(!inactivity_time[channel] && tcp_option[channel].inactivity)
 801a208:	f8b6 30cd 	ldrh.w	r3, [r6, #205]	; 0xcd
 801a20c:	2b00      	cmp	r3, #0
 801a20e:	f43f aee4 	beq.w	8019fda <proc_SEG_tcp_server+0xc2>
                    enable_inactivity_timer[channel] = SEG_ENABLE;
 801a212:	2301      	movs	r3, #1
 801a214:	f8df 9058 	ldr.w	r9, [pc, #88]	; 801a270 <proc_SEG_tcp_server+0x358>
 801a218:	f889 3000 	strb.w	r3, [r9]
 801a21c:	e6df      	b.n	8019fde <proc_SEG_tcp_server+0xc6>
                if((serial_command->serial_command == SEG_ENABLE) && serial_data_packing[channel].packing_time)
 801a21e:	9b03      	ldr	r3, [sp, #12]
 801a220:	f8b3 30f1 	ldrh.w	r3, [r3, #241]	; 0xf1
 801a224:	b29a      	uxth	r2, r3
 801a226:	2a00      	cmp	r2, #0
 801a228:	f43f af62 	beq.w	801a0f0 <proc_SEG_tcp_server+0x1d8>
                    modeswitch_gap_time = serial_data_packing[channel].packing_time;
 801a22c:	4a19      	ldr	r2, [pc, #100]	; (801a294 <proc_SEG_tcp_server+0x37c>)
 801a22e:	8013      	strh	r3, [r2, #0]
 801a230:	e75e      	b.n	801a0f0 <proc_SEG_tcp_server+0x1d8>
                    enable_connection_auth_timer[channel] = SEG_ENABLE;
 801a232:	2001      	movs	r0, #1
                    connection_auth_time[channel] = 0;
 801a234:	2200      	movs	r2, #0
                    enable_connection_auth_timer[channel] = SEG_ENABLE;
 801a236:	490b      	ldr	r1, [pc, #44]	; (801a264 <proc_SEG_tcp_server+0x34c>)
                    connection_auth_time[channel] = 0;
 801a238:	4b09      	ldr	r3, [pc, #36]	; (801a260 <proc_SEG_tcp_server+0x348>)
                    enable_connection_auth_timer[channel] = SEG_ENABLE;
 801a23a:	7008      	strb	r0, [r1, #0]
                    connection_auth_time[channel] = 0;
 801a23c:	801a      	strh	r2, [r3, #0]
 801a23e:	e6d6      	b.n	8019fee <proc_SEG_tcp_server+0xd6>
                    uart_rx_flush(uartNum);
 801a240:	4628      	mov	r0, r5
 801a242:	f7fd fdbd 	bl	8017dc0 <uart_rx_flush>
 801a246:	e6f3      	b.n	801a030 <proc_SEG_tcp_server+0x118>
                if((flag_sent_first_keepalive[channel] == SEG_ENABLE) &&
 801a248:	2f01      	cmp	r7, #1
 801a24a:	f47f af02 	bne.w	801a052 <proc_SEG_tcp_server+0x13a>
 801a24e:	f8df 801c 	ldr.w	r8, [pc, #28]	; 801a26c <proc_SEG_tcp_server+0x354>
 801a252:	e7c5      	b.n	801a1e0 <proc_SEG_tcp_server+0x2c8>
 801a254:	2001991c 	.word	0x2001991c
 801a258:	20019904 	.word	0x20019904
 801a25c:	08033898 	.word	0x08033898
 801a260:	200198e8 	.word	0x200198e8
 801a264:	200198f0 	.word	0x200198f0
 801a268:	20019958 	.word	0x20019958
 801a26c:	20019924 	.word	0x20019924
 801a270:	200198f4 	.word	0x200198f4
 801a274:	20019900 	.word	0x20019900
 801a278:	200198f8 	.word	0x200198f8
 801a27c:	20019914 	.word	0x20019914
 801a280:	20019910 	.word	0x20019910
 801a284:	20019960 	.word	0x20019960
 801a288:	200198ec 	.word	0x200198ec
 801a28c:	080338c4 	.word	0x080338c4
 801a290:	2001990c 	.word	0x2001990c
 801a294:	20018212 	.word	0x20018212

0801a298 <proc_SEG_tcp_mixed>:
{
 801a298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a29c:	b087      	sub	sp, #28
 801a29e:	460c      	mov	r4, r1
 801a2a0:	4605      	mov	r5, r0
    struct __tcp_option *tcp_option = (struct __tcp_option *)get_DevConfig_pointer()->tcp_option;
 801a2a2:	f7f9 fec7 	bl	8014034 <get_DevConfig_pointer>
 801a2a6:	4606      	mov	r6, r0
    struct __network_connection *network_connection = (struct __network_connection *)get_DevConfig_pointer()->network_connection;
 801a2a8:	f7f9 fec4 	bl	8014034 <get_DevConfig_pointer>
 801a2ac:	4607      	mov	r7, r0
    struct __serial_common *serial_common = (struct __serial_common *)&get_DevConfig_pointer()->serial_common;
 801a2ae:	f7f9 fec1 	bl	8014034 <get_DevConfig_pointer>
 801a2b2:	4680      	mov	r8, r0
    struct __serial_command *serial_command = (struct __serial_command *)&get_DevConfig_pointer()->serial_command;
 801a2b4:	f7f9 febe 	bl	8014034 <get_DevConfig_pointer>
 801a2b8:	4681      	mov	r9, r0
    struct __serial_data_packing *serial_data_packing = (struct __serial_data_packing *)get_DevConfig_pointer()->serial_data_packing;
 801a2ba:	f7f9 febb 	bl	8014034 <get_DevConfig_pointer>
 801a2be:	9003      	str	r0, [sp, #12]
    struct __device_option *device_option = (struct __device_option *)&(get_DevConfig_pointer()->device_option);
 801a2c0:	f7f9 feb8 	bl	8014034 <get_DevConfig_pointer>
    uint8_t destip[4] = {0, };
 801a2c4:	2300      	movs	r3, #0
 801a2c6:	9305      	str	r3, [sp, #20]
    uint16_t destport = 0;
 801a2c8:	f8ad 3012 	strh.w	r3, [sp, #18]
    struct __serial_option *serial_option = (struct __serial_option *)&(get_DevConfig_pointer()->serial_option);
 801a2cc:	f7f9 feb2 	bl	8014034 <get_DevConfig_pointer>
 801a2d0:	4602      	mov	r2, r0
    uint8_t state = getSn_SR(sock);
 801a2d2:	1d23      	adds	r3, r4, #4
 801a2d4:	ea4f 2a03 	mov.w	sl, r3, lsl #8
 801a2d8:	f10a 0003 	add.w	r0, sl, #3
    return serial_option[channel].protocol;
 801a2dc:	f892 b0e9 	ldrb.w	fp, [r2, #233]	; 0xe9
    uint8_t state = getSn_SR(sock);
 801a2e0:	f000 fc46 	bl	801ab70 <WIZCHIP_READ>
    switch(state)
 801a2e4:	281c      	cmp	r0, #28
 801a2e6:	d844      	bhi.n	801a372 <proc_SEG_tcp_mixed+0xda>
 801a2e8:	e8df f000 	tbb	[pc, r0]
 801a2ec:	4343430f 	.word	0x4343430f
 801a2f0:	43434343 	.word	0x43434343
 801a2f4:	43434343 	.word	0x43434343
 801a2f8:	43434343 	.word	0x43434343
 801a2fc:	43434343 	.word	0x43434343
 801a300:	5e434392 	.word	0x5e434392
 801a304:	4343430f 	.word	0x4343430f
 801a308:	46          	.byte	0x46
 801a309:	00          	.byte	0x00
    struct __network_connection *network_connection = (struct __network_connection *)get_DevConfig_pointer()->network_connection;
 801a30a:	f7f9 fe93 	bl	8014034 <get_DevConfig_pointer>
            network_connection[channel].working_state = ST_OPEN;
 801a30e:	2501      	movs	r5, #1
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, OFF); // Status I/O pin to high
 801a310:	2200      	movs	r2, #0
            network_connection[channel].working_state = ST_OPEN;
 801a312:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, OFF); // Status I/O pin to high
 801a316:	4611      	mov	r1, r2
 801a318:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801a31c:	f7fd f8f4 	bl	8017508 <set_connection_status_io>
            if(mixed_state[channel] == MIXED_SERVER) // MIXED_SERVER
 801a320:	4bb4      	ldr	r3, [pc, #720]	; (801a5f4 <proc_SEG_tcp_mixed+0x35c>)
 801a322:	781b      	ldrb	r3, [r3, #0]
 801a324:	2b00      	cmp	r3, #0
 801a326:	f000 8087 	beq.w	801a438 <proc_SEG_tcp_mixed+0x1a0>
                e2u_size[channel] = 0;
 801a32a:	2100      	movs	r1, #0
 801a32c:	4bb2      	ldr	r3, [pc, #712]	; (801a5f8 <proc_SEG_tcp_mixed+0x360>)
                if(network_connection[channel].fixed_local_port)
 801a32e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
                e2u_size[channel] = 0;
 801a332:	8019      	strh	r1, [r3, #0]
                if(network_connection[channel].fixed_local_port)
 801a334:	2a00      	cmp	r2, #0
 801a336:	f000 81c0 	beq.w	801a6ba <proc_SEG_tcp_mixed+0x422>
                    source_port = network_connection[channel].local_port;
 801a33a:	f8b7 203d 	ldrh.w	r2, [r7, #61]	; 0x3d
                if(socket(sock, Sn_MR_TCP, source_port, (SF_TCP_NODELAY | SF_IO_NONBLOCK)) == sock)
 801a33e:	2321      	movs	r3, #33	; 0x21
 801a340:	2101      	movs	r1, #1
 801a342:	4620      	mov	r0, r4
 801a344:	f000 fe8c 	bl	801b060 <socket>
 801a348:	4284      	cmp	r4, r0
 801a34a:	d112      	bne.n	801a372 <proc_SEG_tcp_mixed+0xda>
                    if((serial_command->serial_command == SEG_ENABLE) && serial_data_packing[channel].packing_time)
 801a34c:	f899 30e3 	ldrb.w	r3, [r9, #227]	; 0xe3
 801a350:	2b01      	cmp	r3, #1
 801a352:	f000 81cf 	beq.w	801a6f4 <proc_SEG_tcp_mixed+0x45c>
                    if((enable_reconnection_timer[channel] == SEG_DISABLE) && tcp_option[channel].reconnection)
 801a356:	4ba9      	ldr	r3, [pc, #676]	; (801a5fc <proc_SEG_tcp_mixed+0x364>)
 801a358:	781a      	ldrb	r2, [r3, #0]
 801a35a:	b922      	cbnz	r2, 801a366 <proc_SEG_tcp_mixed+0xce>
 801a35c:	f8b6 20cf 	ldrh.w	r2, [r6, #207]	; 0xcf
 801a360:	b10a      	cbz	r2, 801a366 <proc_SEG_tcp_mixed+0xce>
                        enable_reconnection_timer[channel] = SEG_ENABLE;
 801a362:	2201      	movs	r2, #1
 801a364:	701a      	strb	r2, [r3, #0]
                    if(serial_common->serial_debug_en)
 801a366:	f898 30e2 	ldrb.w	r3, [r8, #226]	; 0xe2
 801a36a:	b113      	cbz	r3, 801a372 <proc_SEG_tcp_mixed+0xda>
                        printf(" > SEG:TCP_MIXED_MODE:CLIENT_SOCKOPEN\r\n");
 801a36c:	48a4      	ldr	r0, [pc, #656]	; (801a600 <proc_SEG_tcp_mixed+0x368>)
 801a36e:	f015 fec1 	bl	80300f4 <puts>
}
 801a372:	b007      	add	sp, #28
 801a374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(serial_mode == SEG_SERIAL_PROTOCOL_NONE)
 801a378:	f1bb 0f00 	cmp.w	fp, #0
 801a37c:	d10d      	bne.n	801a39a <proc_SEG_tcp_mixed+0x102>
 801a37e:	4e9e      	ldr	r6, [pc, #632]	; (801a5f8 <proc_SEG_tcp_mixed+0x360>)
 801a380:	e003      	b.n	801a38a <proc_SEG_tcp_mixed+0xf2>
                    ether_to_uart(uartNum, sock); // receive remaining packets
 801a382:	4621      	mov	r1, r4
 801a384:	4628      	mov	r0, r5
 801a386:	f7fe fdef 	bl	8018f68 <ether_to_uart>
                while(getSn_RX_RSR(sock) || e2u_size[channel])
 801a38a:	4620      	mov	r0, r4
 801a38c:	f000 fc88 	bl	801aca0 <getSn_RX_RSR>
 801a390:	8833      	ldrh	r3, [r6, #0]
 801a392:	4303      	orrs	r3, r0
 801a394:	b29b      	uxth	r3, r3
 801a396:	2b00      	cmp	r3, #0
 801a398:	d1f3      	bne.n	801a382 <proc_SEG_tcp_mixed+0xea>
            process_socket_termination(sock, 100);
 801a39a:	4620      	mov	r0, r4
 801a39c:	2164      	movs	r1, #100	; 0x64
 801a39e:	f7fd ff03 	bl	80181a8 <process_socket_termination>
}
 801a3a2:	b007      	add	sp, #28
 801a3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(getSn_IR(sock) & Sn_IR_CON)
 801a3a8:	f10a 0702 	add.w	r7, sl, #2
 801a3ac:	4638      	mov	r0, r7
 801a3ae:	f000 fbdf 	bl	801ab70 <WIZCHIP_READ>
 801a3b2:	07c3      	lsls	r3, r0, #31
 801a3b4:	d475      	bmi.n	801a4a2 <proc_SEG_tcp_mixed+0x20a>
 801a3b6:	f8df 923c 	ldr.w	r9, [pc, #572]	; 801a5f4 <proc_SEG_tcp_mixed+0x35c>
 801a3ba:	f8df a264 	ldr.w	sl, [pc, #612]	; 801a620 <proc_SEG_tcp_mixed+0x388>
            if(serial_mode == SEG_SERIAL_PROTOCOL_NONE)
 801a3be:	f1bb 0f00 	cmp.w	fp, #0
 801a3c2:	f000 80c4 	beq.w	801a54e <proc_SEG_tcp_mixed+0x2b6>
            if((enable_inactivity_timer[channel] == SEG_ENABLE) && (inactivity_time[channel] >= tcp_option[channel].inactivity))
 801a3c6:	f89a 3000 	ldrb.w	r3, [sl]
 801a3ca:	2b01      	cmp	r3, #1
 801a3cc:	f000 80ab 	beq.w	801a526 <proc_SEG_tcp_mixed+0x28e>
            if((tcp_option[channel].keepalive_en == SEG_ENABLE) && (enable_keepalive_timer[channel] == SEG_ENABLE))
 801a3d0:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
 801a3d4:	2b01      	cmp	r3, #1
 801a3d6:	f000 80d5 	beq.w	801a584 <proc_SEG_tcp_mixed+0x2ec>
 801a3da:	f899 2000 	ldrb.w	r2, [r9]
            if((mixed_state[channel] == MIXED_SERVER) && (tcp_option[channel].pw_connect_en == SEG_ENABLE))
 801a3de:	2a00      	cmp	r2, #0
 801a3e0:	d1c7      	bne.n	801a372 <proc_SEG_tcp_mixed+0xda>
 801a3e2:	f896 30e0 	ldrb.w	r3, [r6, #224]	; 0xe0
 801a3e6:	2b01      	cmp	r3, #1
 801a3e8:	d1c3      	bne.n	801a372 <proc_SEG_tcp_mixed+0xda>
                if((flag_connect_pw_auth[channel] == SEG_DISABLE) && (connection_auth_time[channel] >= MAX_CONNECTION_AUTH_TIME)) // timeout default: 5000ms (5 sec)
 801a3ea:	4b86      	ldr	r3, [pc, #536]	; (801a604 <proc_SEG_tcp_mixed+0x36c>)
 801a3ec:	781d      	ldrb	r5, [r3, #0]
 801a3ee:	2d00      	cmp	r5, #0
 801a3f0:	d1bf      	bne.n	801a372 <proc_SEG_tcp_mixed+0xda>
 801a3f2:	f241 3287 	movw	r2, #4999	; 0x1387
 801a3f6:	4e84      	ldr	r6, [pc, #528]	; (801a608 <proc_SEG_tcp_mixed+0x370>)
 801a3f8:	8833      	ldrh	r3, [r6, #0]
 801a3fa:	b29b      	uxth	r3, r3
 801a3fc:	4293      	cmp	r3, r2
 801a3fe:	d9b8      	bls.n	801a372 <proc_SEG_tcp_mixed+0xda>
                    process_socket_termination(sock, 100);
 801a400:	4620      	mov	r0, r4
 801a402:	2164      	movs	r1, #100	; 0x64
 801a404:	f7fd fed0 	bl	80181a8 <process_socket_termination>
                    enable_connection_auth_timer[channel] = DISABLE;
 801a408:	4b80      	ldr	r3, [pc, #512]	; (801a60c <proc_SEG_tcp_mixed+0x374>)
                    connection_auth_time[channel] = 0;
 801a40a:	8035      	strh	r5, [r6, #0]
                    enable_connection_auth_timer[channel] = DISABLE;
 801a40c:	701d      	strb	r5, [r3, #0]
                    connection_auth_time[channel] = 0;
 801a40e:	e7b0      	b.n	801a372 <proc_SEG_tcp_mixed+0xda>
            if((mixed_state[channel] == MIXED_SERVER) && (get_uart_buffer_usedsize(uartNum)))
 801a410:	4f78      	ldr	r7, [pc, #480]	; (801a5f4 <proc_SEG_tcp_mixed+0x35c>)
 801a412:	783b      	ldrb	r3, [r7, #0]
 801a414:	2b00      	cmp	r3, #0
 801a416:	d1ac      	bne.n	801a372 <proc_SEG_tcp_mixed+0xda>
 801a418:	4628      	mov	r0, r5
 801a41a:	f7fd fcf7 	bl	8017e0c <get_uart_buffer_usedsize>
 801a41e:	2800      	cmp	r0, #0
 801a420:	d0a7      	beq.n	801a372 <proc_SEG_tcp_mixed+0xda>
                process_socket_termination(sock, 100);
 801a422:	4620      	mov	r0, r4
 801a424:	2164      	movs	r1, #100	; 0x64
 801a426:	f7fd febf 	bl	80181a8 <process_socket_termination>
                mixed_state[channel] = MIXED_CLIENT;
 801a42a:	2301      	movs	r3, #1
 801a42c:	703b      	strb	r3, [r7, #0]
                reconnection_time[channel] = tcp_option[channel].reconnection; // rapid initial connection
 801a42e:	f8b6 20cf 	ldrh.w	r2, [r6, #207]	; 0xcf
 801a432:	4b77      	ldr	r3, [pc, #476]	; (801a610 <proc_SEG_tcp_mixed+0x378>)
 801a434:	801a      	strh	r2, [r3, #0]
 801a436:	e79c      	b.n	801a372 <proc_SEG_tcp_mixed+0xda>
    inactivity_time[channel] = 0;
 801a438:	4a76      	ldr	r2, [pc, #472]	; (801a614 <proc_SEG_tcp_mixed+0x37c>)
    serial_input_time[channel] = 0;
 801a43a:	4977      	ldr	r1, [pc, #476]	; (801a618 <proc_SEG_tcp_mixed+0x380>)
    inactivity_time[channel] = 0;
 801a43c:	8013      	strh	r3, [r2, #0]
    keepalive_time[channel] = 0;
 801a43e:	4a77      	ldr	r2, [pc, #476]	; (801a61c <proc_SEG_tcp_mixed+0x384>)
    serial_input_time[channel] = 0;
 801a440:	800b      	strh	r3, [r1, #0]
    keepalive_time[channel] = 0;
 801a442:	8013      	strh	r3, [r2, #0]
    enable_inactivity_timer[channel] = SEG_DISABLE;
 801a444:	4976      	ldr	r1, [pc, #472]	; (801a620 <proc_SEG_tcp_mixed+0x388>)
    enable_serial_input_timer[channel] = SEG_DISABLE;
 801a446:	4a77      	ldr	r2, [pc, #476]	; (801a624 <proc_SEG_tcp_mixed+0x38c>)
    enable_inactivity_timer[channel] = SEG_DISABLE;
 801a448:	700b      	strb	r3, [r1, #0]
    enable_serial_input_timer[channel] = SEG_DISABLE;
 801a44a:	7013      	strb	r3, [r2, #0]
    enable_keepalive_timer[channel] = SEG_DISABLE;
 801a44c:	4976      	ldr	r1, [pc, #472]	; (801a628 <proc_SEG_tcp_mixed+0x390>)
    enable_connection_auth_timer[channel] = SEG_DISABLE;
 801a44e:	4a6f      	ldr	r2, [pc, #444]	; (801a60c <proc_SEG_tcp_mixed+0x374>)
    enable_keepalive_timer[channel] = SEG_DISABLE;
 801a450:	700b      	strb	r3, [r1, #0]
    enable_connection_auth_timer[channel] = SEG_DISABLE;
 801a452:	7013      	strb	r3, [r2, #0]
    flag_serial_input_time_elapse[channel] = SEG_DISABLE;
 801a454:	4975      	ldr	r1, [pc, #468]	; (801a62c <proc_SEG_tcp_mixed+0x394>)
    flag_sent_keepalive[channel] = SEG_DISABLE;
 801a456:	4a76      	ldr	r2, [pc, #472]	; (801a630 <proc_SEG_tcp_mixed+0x398>)
    flag_serial_input_time_elapse[channel] = SEG_DISABLE;
 801a458:	700b      	strb	r3, [r1, #0]
    flag_sent_keepalive[channel] = SEG_DISABLE;
 801a45a:	7013      	strb	r3, [r2, #0]
    flag_connect_pw_auth[channel] = SEG_DISABLE; // TCP_SERVER_MODE only (+ MIXED_SERVER)
 801a45c:	4969      	ldr	r1, [pc, #420]	; (801a604 <proc_SEG_tcp_mixed+0x36c>)
    connection_auth_time[channel] = 0;
 801a45e:	4a6a      	ldr	r2, [pc, #424]	; (801a608 <proc_SEG_tcp_mixed+0x370>)
    flag_connect_pw_auth[channel] = SEG_DISABLE; // TCP_SERVER_MODE only (+ MIXED_SERVER)
 801a460:	700b      	strb	r3, [r1, #0]
    connection_auth_time[channel] = 0;
 801a462:	8013      	strh	r3, [r2, #0]
                u2e_size[channel] = 0;
 801a464:	4973      	ldr	r1, [pc, #460]	; (801a634 <proc_SEG_tcp_mixed+0x39c>)
                e2u_size[channel] = 0;
 801a466:	4a64      	ldr	r2, [pc, #400]	; (801a5f8 <proc_SEG_tcp_mixed+0x360>)
                u2e_size[channel] = 0;
 801a468:	800b      	strh	r3, [r1, #0]
                e2u_size[channel] = 0;
 801a46a:	8013      	strh	r3, [r2, #0]
                if(socket(sock, Sn_MR_TCP, network_connection[channel].local_port, (SF_TCP_NODELAY | SF_IO_NONBLOCK)) == sock)
 801a46c:	4629      	mov	r1, r5
 801a46e:	2321      	movs	r3, #33	; 0x21
 801a470:	4620      	mov	r0, r4
 801a472:	f8b7 203d 	ldrh.w	r2, [r7, #61]	; 0x3d
 801a476:	f000 fdf3 	bl	801b060 <socket>
 801a47a:	4284      	cmp	r4, r0
 801a47c:	f47f af79 	bne.w	801a372 <proc_SEG_tcp_mixed+0xda>
                    if((serial_command->serial_command == SEG_ENABLE) && serial_data_packing[channel].packing_time)
 801a480:	f899 30e3 	ldrb.w	r3, [r9, #227]	; 0xe3
 801a484:	42ab      	cmp	r3, r5
 801a486:	f000 8163 	beq.w	801a750 <proc_SEG_tcp_mixed+0x4b8>
                    listen(sock);
 801a48a:	4620      	mov	r0, r4
 801a48c:	f000 fefc 	bl	801b288 <listen>
                    if(serial_common->serial_debug_en)
 801a490:	f898 30e2 	ldrb.w	r3, [r8, #226]	; 0xe2
 801a494:	2b00      	cmp	r3, #0
 801a496:	f43f af6c 	beq.w	801a372 <proc_SEG_tcp_mixed+0xda>
                        printf(" > SEG:TCP_MIXED_MODE:SERVER_SOCKOPEN\r\n");
 801a49a:	4867      	ldr	r0, [pc, #412]	; (801a638 <proc_SEG_tcp_mixed+0x3a0>)
 801a49c:	f015 fe2a 	bl	80300f4 <puts>
 801a4a0:	e767      	b.n	801a372 <proc_SEG_tcp_mixed+0xda>
    struct __network_connection *network_connection = (struct __network_connection *)get_DevConfig_pointer()->network_connection;
 801a4a2:	f7f9 fdc7 	bl	8014034 <get_DevConfig_pointer>
            network_connection[channel].working_state = ST_CONNECT;
 801a4a6:	2302      	movs	r3, #2
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, ON); // Status I/O pin to low
 801a4a8:	2201      	movs	r2, #1
            network_connection[channel].working_state = ST_CONNECT;
 801a4aa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, ON); // Status I/O pin to low
 801a4ae:	2100      	movs	r1, #0
 801a4b0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801a4b4:	f7fd f828 	bl	8017508 <set_connection_status_io>
                if(!inactivity_time[channel] && tcp_option[channel].inactivity)     enable_inactivity_timer[channel] = SEG_ENABLE;
 801a4b8:	4b56      	ldr	r3, [pc, #344]	; (801a614 <proc_SEG_tcp_mixed+0x37c>)
 801a4ba:	881b      	ldrh	r3, [r3, #0]
 801a4bc:	b29b      	uxth	r3, r3
 801a4be:	2b00      	cmp	r3, #0
 801a4c0:	f000 80be 	beq.w	801a640 <proc_SEG_tcp_mixed+0x3a8>
 801a4c4:	f8df a158 	ldr.w	sl, [pc, #344]	; 801a620 <proc_SEG_tcp_mixed+0x388>
                if(!keepalive_time[channel] && tcp_option[channel].keepalive_en)    enable_keepalive_timer[channel] = SEG_ENABLE;
 801a4c8:	4b54      	ldr	r3, [pc, #336]	; (801a61c <proc_SEG_tcp_mixed+0x384>)
 801a4ca:	881b      	ldrh	r3, [r3, #0]
 801a4cc:	b29b      	uxth	r3, r3
 801a4ce:	b92b      	cbnz	r3, 801a4dc <proc_SEG_tcp_mixed+0x244>
 801a4d0:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
 801a4d4:	b113      	cbz	r3, 801a4dc <proc_SEG_tcp_mixed+0x244>
 801a4d6:	2201      	movs	r2, #1
 801a4d8:	4b53      	ldr	r3, [pc, #332]	; (801a628 <proc_SEG_tcp_mixed+0x390>)
 801a4da:	701a      	strb	r2, [r3, #0]
                if((tcp_option[channel].pw_connect_en == SEG_DISABLE) || (mixed_state[channel] == MIXED_CLIENT))
 801a4dc:	f896 30e0 	ldrb.w	r3, [r6, #224]	; 0xe0
 801a4e0:	2b00      	cmp	r3, #0
 801a4e2:	f000 80b8 	beq.w	801a656 <proc_SEG_tcp_mixed+0x3be>
 801a4e6:	f8df 910c 	ldr.w	r9, [pc, #268]	; 801a5f4 <proc_SEG_tcp_mixed+0x35c>
 801a4ea:	f899 3000 	ldrb.w	r3, [r9]
 801a4ee:	2b01      	cmp	r3, #1
 801a4f0:	f000 810f 	beq.w	801a712 <proc_SEG_tcp_mixed+0x47a>
                else if((mixed_state[channel] == MIXED_SERVER) && (flag_connect_pw_auth[channel] == SEG_DISABLE))
 801a4f4:	2b00      	cmp	r3, #0
 801a4f6:	f040 8113 	bne.w	801a720 <proc_SEG_tcp_mixed+0x488>
 801a4fa:	4b42      	ldr	r3, [pc, #264]	; (801a604 <proc_SEG_tcp_mixed+0x36c>)
 801a4fc:	781b      	ldrb	r3, [r3, #0]
 801a4fe:	b923      	cbnz	r3, 801a50a <proc_SEG_tcp_mixed+0x272>
                    enable_connection_auth_timer[channel] = SEG_ENABLE;
 801a500:	2001      	movs	r0, #1
 801a502:	4942      	ldr	r1, [pc, #264]	; (801a60c <proc_SEG_tcp_mixed+0x374>)
                    connection_auth_time[channel] = 0;
 801a504:	4a40      	ldr	r2, [pc, #256]	; (801a608 <proc_SEG_tcp_mixed+0x370>)
                    enable_connection_auth_timer[channel] = SEG_ENABLE;
 801a506:	7008      	strb	r0, [r1, #0]
                    connection_auth_time[channel] = 0;
 801a508:	8013      	strh	r3, [r2, #0]
                if(serial_common->serial_debug_en)
 801a50a:	f898 30e2 	ldrb.w	r3, [r8, #226]	; 0xe2
 801a50e:	2b00      	cmp	r3, #0
 801a510:	f040 80a9 	bne.w	801a666 <proc_SEG_tcp_mixed+0x3ce>
                    if(serial_mode == SEG_SERIAL_PROTOCOL_NONE)
 801a514:	f1bb 0f00 	cmp.w	fp, #0
 801a518:	f000 8108 	beq.w	801a72c <proc_SEG_tcp_mixed+0x494>
                setSn_IR(sock, Sn_IR_CON);
 801a51c:	4638      	mov	r0, r7
 801a51e:	2101      	movs	r1, #1
 801a520:	f000 fb08 	bl	801ab34 <WIZCHIP_WRITE>
 801a524:	e74b      	b.n	801a3be <proc_SEG_tcp_mixed+0x126>
            if((enable_inactivity_timer[channel] == SEG_ENABLE) && (inactivity_time[channel] >= tcp_option[channel].inactivity))
 801a526:	4b3b      	ldr	r3, [pc, #236]	; (801a614 <proc_SEG_tcp_mixed+0x37c>)
 801a528:	f8b6 20cd 	ldrh.w	r2, [r6, #205]	; 0xcd
 801a52c:	881b      	ldrh	r3, [r3, #0]
 801a52e:	b29b      	uxth	r3, r3
 801a530:	429a      	cmp	r2, r3
 801a532:	f63f af4d 	bhi.w	801a3d0 <proc_SEG_tcp_mixed+0x138>
                process_socket_termination(sock, 100);
 801a536:	2164      	movs	r1, #100	; 0x64
 801a538:	4620      	mov	r0, r4
 801a53a:	f7fd fe35 	bl	80181a8 <process_socket_termination>
                enable_keepalive_timer[channel] = DISABLE;
 801a53e:	2300      	movs	r3, #0
 801a540:	4939      	ldr	r1, [pc, #228]	; (801a628 <proc_SEG_tcp_mixed+0x390>)
                keepalive_time[channel] = 0;
 801a542:	4a36      	ldr	r2, [pc, #216]	; (801a61c <proc_SEG_tcp_mixed+0x384>)
                mixed_state[channel] = MIXED_SERVER;
 801a544:	f889 3000 	strb.w	r3, [r9]
                enable_keepalive_timer[channel] = DISABLE;
 801a548:	700b      	strb	r3, [r1, #0]
                keepalive_time[channel] = 0;
 801a54a:	8013      	strh	r3, [r2, #0]
            if((mixed_state[channel] == MIXED_SERVER) && (tcp_option[channel].pw_connect_en == SEG_ENABLE))
 801a54c:	e749      	b.n	801a3e2 <proc_SEG_tcp_mixed+0x14a>
                if(get_uart_buffer_usedsize(uartNum) || u2e_size[channel])
 801a54e:	4628      	mov	r0, r5
 801a550:	f7fd fc5c 	bl	8017e0c <get_uart_buffer_usedsize>
 801a554:	4b37      	ldr	r3, [pc, #220]	; (801a634 <proc_SEG_tcp_mixed+0x39c>)
 801a556:	881b      	ldrh	r3, [r3, #0]
 801a558:	4318      	orrs	r0, r3
 801a55a:	b280      	uxth	r0, r0
 801a55c:	b118      	cbz	r0, 801a566 <proc_SEG_tcp_mixed+0x2ce>
                    uart_to_ether(uartNum, sock);
 801a55e:	4621      	mov	r1, r4
 801a560:	4628      	mov	r0, r5
 801a562:	f7fe f839 	bl	80185d8 <uart_to_ether>
                if(getSn_RX_RSR(sock) || e2u_size[channel])
 801a566:	4620      	mov	r0, r4
 801a568:	f000 fb9a 	bl	801aca0 <getSn_RX_RSR>
 801a56c:	4b22      	ldr	r3, [pc, #136]	; (801a5f8 <proc_SEG_tcp_mixed+0x360>)
 801a56e:	881b      	ldrh	r3, [r3, #0]
 801a570:	4318      	orrs	r0, r3
 801a572:	b280      	uxth	r0, r0
 801a574:	2800      	cmp	r0, #0
 801a576:	f43f af26 	beq.w	801a3c6 <proc_SEG_tcp_mixed+0x12e>
                    ether_to_uart(uartNum, sock);
 801a57a:	4628      	mov	r0, r5
 801a57c:	4621      	mov	r1, r4
 801a57e:	f7fe fcf3 	bl	8018f68 <ether_to_uart>
 801a582:	e720      	b.n	801a3c6 <proc_SEG_tcp_mixed+0x12e>
            if((tcp_option[channel].keepalive_en == SEG_ENABLE) && (enable_keepalive_timer[channel] == SEG_ENABLE))
 801a584:	4b28      	ldr	r3, [pc, #160]	; (801a628 <proc_SEG_tcp_mixed+0x390>)
 801a586:	781d      	ldrb	r5, [r3, #0]
 801a588:	2d01      	cmp	r5, #1
 801a58a:	f47f af26 	bne.w	801a3da <proc_SEG_tcp_mixed+0x142>
                if((flag_sent_first_keepalive[channel] == SEG_DISABLE) &&
 801a58e:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 801a63c <proc_SEG_tcp_mixed+0x3a4>
 801a592:	f898 7000 	ldrb.w	r7, [r8]
 801a596:	2f00      	cmp	r7, #0
 801a598:	f040 80b6 	bne.w	801a708 <proc_SEG_tcp_mixed+0x470>
                   (keepalive_time[channel] >= tcp_option[channel].keepalive_wait_time) &&
 801a59c:	4b1f      	ldr	r3, [pc, #124]	; (801a61c <proc_SEG_tcp_mixed+0x384>)
 801a59e:	f8b6 10d2 	ldrh.w	r1, [r6, #210]	; 0xd2
 801a5a2:	881a      	ldrh	r2, [r3, #0]
 801a5a4:	b292      	uxth	r2, r2
                if((flag_sent_first_keepalive[channel] == SEG_DISABLE) &&
 801a5a6:	428a      	cmp	r2, r1
 801a5a8:	f4ff af17 	bcc.w	801a3da <proc_SEG_tcp_mixed+0x142>
                   (keepalive_time[channel] >= tcp_option[channel].keepalive_wait_time) &&
 801a5ac:	2900      	cmp	r1, #0
 801a5ae:	f43f af14 	beq.w	801a3da <proc_SEG_tcp_mixed+0x142>
    setsockopt(sock, SO_KEEPALIVESEND, 0);
 801a5b2:	463a      	mov	r2, r7
 801a5b4:	2106      	movs	r1, #6
 801a5b6:	4620      	mov	r0, r4
 801a5b8:	9303      	str	r3, [sp, #12]
 801a5ba:	f001 fbc3 	bl	801bd44 <setsockopt>
                    keepalive_time[channel] = 0;
 801a5be:	9b03      	ldr	r3, [sp, #12]
                    flag_sent_first_keepalive[channel] = SEG_ENABLE;
 801a5c0:	f888 5000 	strb.w	r5, [r8]
                    keepalive_time[channel] = 0;
 801a5c4:	801f      	strh	r7, [r3, #0]
                   (keepalive_time[channel] >= tcp_option[channel].keepalive_retry_time) &&
 801a5c6:	881a      	ldrh	r2, [r3, #0]
 801a5c8:	f8b6 10d4 	ldrh.w	r1, [r6, #212]	; 0xd4
 801a5cc:	b292      	uxth	r2, r2
                if((flag_sent_first_keepalive[channel] == SEG_ENABLE) &&
 801a5ce:	428a      	cmp	r2, r1
 801a5d0:	f4ff af03 	bcc.w	801a3da <proc_SEG_tcp_mixed+0x142>
                   (keepalive_time[channel] >= tcp_option[channel].keepalive_retry_time) &&
 801a5d4:	2900      	cmp	r1, #0
 801a5d6:	f43f af00 	beq.w	801a3da <proc_SEG_tcp_mixed+0x142>
    setsockopt(sock, SO_KEEPALIVESEND, 0);
 801a5da:	2200      	movs	r2, #0
 801a5dc:	2106      	movs	r1, #6
 801a5de:	4620      	mov	r0, r4
 801a5e0:	9303      	str	r3, [sp, #12]
 801a5e2:	f001 fbaf 	bl	801bd44 <setsockopt>
                    keepalive_time[channel] = 0;
 801a5e6:	2100      	movs	r1, #0
 801a5e8:	9b03      	ldr	r3, [sp, #12]
 801a5ea:	f899 2000 	ldrb.w	r2, [r9]
 801a5ee:	8019      	strh	r1, [r3, #0]
 801a5f0:	e6f5      	b.n	801a3de <proc_SEG_tcp_mixed+0x146>
 801a5f2:	bf00      	nop
 801a5f4:	20019928 	.word	0x20019928
 801a5f8:	200198ec 	.word	0x200198ec
 801a5fc:	200198fc 	.word	0x200198fc
 801a600:	08033910 	.word	0x08033910
 801a604:	20019904 	.word	0x20019904
 801a608:	200198e8 	.word	0x200198e8
 801a60c:	200198f0 	.word	0x200198f0
 801a610:	20019934 	.word	0x20019934
 801a614:	2001991c 	.word	0x2001991c
 801a618:	20019958 	.word	0x20019958
 801a61c:	20019924 	.word	0x20019924
 801a620:	200198f4 	.word	0x200198f4
 801a624:	20019900 	.word	0x20019900
 801a628:	200198f8 	.word	0x200198f8
 801a62c:	20019914 	.word	0x20019914
 801a630:	20019910 	.word	0x20019910
 801a634:	20019960 	.word	0x20019960
 801a638:	080338e8 	.word	0x080338e8
 801a63c:	2001990c 	.word	0x2001990c
                if(!inactivity_time[channel] && tcp_option[channel].inactivity)     enable_inactivity_timer[channel] = SEG_ENABLE;
 801a640:	f8b6 30cd 	ldrh.w	r3, [r6, #205]	; 0xcd
 801a644:	2b00      	cmp	r3, #0
 801a646:	f43f af3d 	beq.w	801a4c4 <proc_SEG_tcp_mixed+0x22c>
 801a64a:	2301      	movs	r3, #1
 801a64c:	f8df a134 	ldr.w	sl, [pc, #308]	; 801a784 <proc_SEG_tcp_mixed+0x4ec>
 801a650:	f88a 3000 	strb.w	r3, [sl]
 801a654:	e738      	b.n	801a4c8 <proc_SEG_tcp_mixed+0x230>
                    flag_connect_pw_auth[channel] = SEG_ENABLE;
 801a656:	2101      	movs	r1, #1
 801a658:	4a43      	ldr	r2, [pc, #268]	; (801a768 <proc_SEG_tcp_mixed+0x4d0>)
                if(serial_common->serial_debug_en)
 801a65a:	f898 30e2 	ldrb.w	r3, [r8, #226]	; 0xe2
 801a65e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 801a788 <proc_SEG_tcp_mixed+0x4f0>
                    flag_connect_pw_auth[channel] = SEG_ENABLE;
 801a662:	7011      	strb	r1, [r2, #0]
                if(serial_common->serial_debug_en)
 801a664:	b1eb      	cbz	r3, 801a6a2 <proc_SEG_tcp_mixed+0x40a>
                    getsockopt(sock, SO_DESTIP, &destip);
 801a666:	2104      	movs	r1, #4
 801a668:	aa05      	add	r2, sp, #20
 801a66a:	4620      	mov	r0, r4
 801a66c:	f001 fbea 	bl	801be44 <getsockopt>
                    getsockopt(sock, SO_DESTPORT, &destport);
 801a670:	f10d 0212 	add.w	r2, sp, #18
 801a674:	2105      	movs	r1, #5
 801a676:	4620      	mov	r0, r4
 801a678:	f001 fbe4 	bl	801be44 <getsockopt>
                    if(mixed_state[channel] == MIXED_SERVER)
 801a67c:	f899 3000 	ldrb.w	r3, [r9]
                        printf(" > SEG:CONNECTED FROM - %d.%d.%d.%d : %d\r\n", destip[0], destip[1], destip[2], destip[3], destport);
 801a680:	f8bd 2012 	ldrh.w	r2, [sp, #18]
                    if(mixed_state[channel] == MIXED_SERVER)
 801a684:	2b00      	cmp	r3, #0
 801a686:	d155      	bne.n	801a734 <proc_SEG_tcp_mixed+0x49c>
                        printf(" > SEG:CONNECTED FROM - %d.%d.%d.%d : %d\r\n", destip[0], destip[1], destip[2], destip[3], destport);
 801a688:	f89d 3017 	ldrb.w	r3, [sp, #23]
 801a68c:	f89d 1014 	ldrb.w	r1, [sp, #20]
 801a690:	e9cd 3200 	strd	r3, r2, [sp]
 801a694:	4835      	ldr	r0, [pc, #212]	; (801a76c <proc_SEG_tcp_mixed+0x4d4>)
 801a696:	f89d 3016 	ldrb.w	r3, [sp, #22]
 801a69a:	f89d 2015 	ldrb.w	r2, [sp, #21]
 801a69e:	f015 fca3 	bl	802ffe8 <iprintf>
                if(mixed_state[channel] == MIXED_SERVER)
 801a6a2:	f899 3000 	ldrb.w	r3, [r9]
 801a6a6:	2b00      	cmp	r3, #0
 801a6a8:	f43f af34 	beq.w	801a514 <proc_SEG_tcp_mixed+0x27c>
                else if(mixed_state[channel] == MIXED_CLIENT)
 801a6ac:	2b01      	cmp	r3, #1
 801a6ae:	f47f af35 	bne.w	801a51c <proc_SEG_tcp_mixed+0x284>
                    mixed_state[channel] = MIXED_SERVER;
 801a6b2:	2300      	movs	r3, #0
 801a6b4:	f889 3000 	strb.w	r3, [r9]
 801a6b8:	e730      	b.n	801a51c <proc_SEG_tcp_mixed+0x284>
    if(client_any_port[channel])
 801a6ba:	4d2d      	ldr	r5, [pc, #180]	; (801a770 <proc_SEG_tcp_mixed+0x4d8>)
 801a6bc:	882b      	ldrh	r3, [r5, #0]
 801a6be:	b98b      	cbnz	r3, 801a6e4 <proc_SEG_tcp_mixed+0x44c>
        client_any_port[channel] = (rand() % 10000) + 35000; // 35000 ~ 44999
 801a6c0:	f015 fd4e 	bl	8030160 <rand>
 801a6c4:	f242 7110 	movw	r1, #10000	; 0x2710
 801a6c8:	4a2a      	ldr	r2, [pc, #168]	; (801a774 <proc_SEG_tcp_mixed+0x4dc>)
 801a6ca:	17c3      	asrs	r3, r0, #31
 801a6cc:	fb82 7200 	smull	r7, r2, r2, r0
 801a6d0:	ebc3 3322 	rsb	r3, r3, r2, asr #12
 801a6d4:	fb01 0213 	mls	r2, r1, r3, r0
 801a6d8:	f5a2 42ee 	sub.w	r2, r2, #30464	; 0x7700
 801a6dc:	3a48      	subs	r2, #72	; 0x48
 801a6de:	b292      	uxth	r2, r2
 801a6e0:	802a      	strh	r2, [r5, #0]
 801a6e2:	e62c      	b.n	801a33e <proc_SEG_tcp_mixed+0xa6>
        if(client_any_port[channel] < 0xffff)
 801a6e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a6e8:	428b      	cmp	r3, r1
 801a6ea:	d03b      	beq.n	801a764 <proc_SEG_tcp_mixed+0x4cc>
            client_any_port[channel]++;
 801a6ec:	3301      	adds	r3, #1
 801a6ee:	b29a      	uxth	r2, r3
 801a6f0:	802a      	strh	r2, [r5, #0]
    if(client_any_port[channel] == 0)
 801a6f2:	e624      	b.n	801a33e <proc_SEG_tcp_mixed+0xa6>
                    if((serial_command->serial_command == SEG_ENABLE) && serial_data_packing[channel].packing_time)
 801a6f4:	9b03      	ldr	r3, [sp, #12]
 801a6f6:	f8b3 30f1 	ldrh.w	r3, [r3, #241]	; 0xf1
 801a6fa:	b29a      	uxth	r2, r3
 801a6fc:	2a00      	cmp	r2, #0
 801a6fe:	f43f ae2a 	beq.w	801a356 <proc_SEG_tcp_mixed+0xbe>
                        modeswitch_gap_time = serial_data_packing[channel].packing_time;
 801a702:	4a1d      	ldr	r2, [pc, #116]	; (801a778 <proc_SEG_tcp_mixed+0x4e0>)
 801a704:	8013      	strh	r3, [r2, #0]
 801a706:	e626      	b.n	801a356 <proc_SEG_tcp_mixed+0xbe>
                if((flag_sent_first_keepalive[channel] == SEG_ENABLE) &&
 801a708:	2f01      	cmp	r7, #1
 801a70a:	f47f ae66 	bne.w	801a3da <proc_SEG_tcp_mixed+0x142>
 801a70e:	4b1b      	ldr	r3, [pc, #108]	; (801a77c <proc_SEG_tcp_mixed+0x4e4>)
 801a710:	e759      	b.n	801a5c6 <proc_SEG_tcp_mixed+0x32e>
                    flag_connect_pw_auth[channel] = SEG_ENABLE;
 801a712:	4915      	ldr	r1, [pc, #84]	; (801a768 <proc_SEG_tcp_mixed+0x4d0>)
                if(serial_common->serial_debug_en)
 801a714:	f898 20e2 	ldrb.w	r2, [r8, #226]	; 0xe2
                    flag_connect_pw_auth[channel] = SEG_ENABLE;
 801a718:	700b      	strb	r3, [r1, #0]
                if(serial_common->serial_debug_en)
 801a71a:	2a00      	cmp	r2, #0
 801a71c:	d0c9      	beq.n	801a6b2 <proc_SEG_tcp_mixed+0x41a>
 801a71e:	e7a2      	b.n	801a666 <proc_SEG_tcp_mixed+0x3ce>
 801a720:	f898 30e2 	ldrb.w	r3, [r8, #226]	; 0xe2
 801a724:	2b00      	cmp	r3, #0
 801a726:	f43f aef9 	beq.w	801a51c <proc_SEG_tcp_mixed+0x284>
 801a72a:	e79c      	b.n	801a666 <proc_SEG_tcp_mixed+0x3ce>
                        uart_rx_flush(uartNum);
 801a72c:	4628      	mov	r0, r5
 801a72e:	f7fd fb47 	bl	8017dc0 <uart_rx_flush>
 801a732:	e6f3      	b.n	801a51c <proc_SEG_tcp_mixed+0x284>
                        printf(" > SEG:CONNECTED TO - %d.%d.%d.%d : %d\r\n", destip[0], destip[1], destip[2], destip[3], destport);
 801a734:	f89d 3017 	ldrb.w	r3, [sp, #23]
 801a738:	f89d 1014 	ldrb.w	r1, [sp, #20]
 801a73c:	e9cd 3200 	strd	r3, r2, [sp]
 801a740:	480f      	ldr	r0, [pc, #60]	; (801a780 <proc_SEG_tcp_mixed+0x4e8>)
 801a742:	f89d 3016 	ldrb.w	r3, [sp, #22]
 801a746:	f89d 2015 	ldrb.w	r2, [sp, #21]
 801a74a:	f015 fc4d 	bl	802ffe8 <iprintf>
 801a74e:	e7a8      	b.n	801a6a2 <proc_SEG_tcp_mixed+0x40a>
                    if((serial_command->serial_command == SEG_ENABLE) && serial_data_packing[channel].packing_time)
 801a750:	9b03      	ldr	r3, [sp, #12]
 801a752:	f8b3 30f1 	ldrh.w	r3, [r3, #241]	; 0xf1
 801a756:	b29a      	uxth	r2, r3
 801a758:	2a00      	cmp	r2, #0
 801a75a:	f43f ae96 	beq.w	801a48a <proc_SEG_tcp_mixed+0x1f2>
                        modeswitch_gap_time = serial_data_packing[channel].packing_time;
 801a75e:	4a06      	ldr	r2, [pc, #24]	; (801a778 <proc_SEG_tcp_mixed+0x4e0>)
 801a760:	8013      	strh	r3, [r2, #0]
 801a762:	e692      	b.n	801a48a <proc_SEG_tcp_mixed+0x1f2>
            client_any_port[channel] = 0;
 801a764:	802a      	strh	r2, [r5, #0]
 801a766:	e7ab      	b.n	801a6c0 <proc_SEG_tcp_mixed+0x428>
 801a768:	20019904 	.word	0x20019904
 801a76c:	08033898 	.word	0x08033898
 801a770:	200198e4 	.word	0x200198e4
 801a774:	68db8bad 	.word	0x68db8bad
 801a778:	20018212 	.word	0x20018212
 801a77c:	20019924 	.word	0x20019924
 801a780:	0803357c 	.word	0x0803357c
 801a784:	200198f4 	.word	0x200198f4
 801a788:	20019928 	.word	0x20019928

0801a78c <do_seg>:
{
 801a78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a790:	b083      	sub	sp, #12
 801a792:	4688      	mov	r8, r1
 801a794:	4604      	mov	r4, r0
    struct __network_connection *network_connection = (struct __network_connection *)get_DevConfig_pointer()->network_connection;
 801a796:	f7f9 fc4d 	bl	8014034 <get_DevConfig_pointer>
 801a79a:	4606      	mov	r6, r0
    struct __serial_option *serial_option = (struct __serial_option *)get_DevConfig_pointer()->serial_option;
 801a79c:	f7f9 fc4a 	bl	8014034 <get_DevConfig_pointer>
    if((opmode == DEVICE_GW_MODE) && (sw_modeswitch_at_mode_on == SEG_ENABLE))
 801a7a0:	4f51      	ldr	r7, [pc, #324]	; (801a8e8 <do_seg+0x15c>)
    struct __serial_option *serial_option = (struct __serial_option *)get_DevConfig_pointer()->serial_option;
 801a7a2:	4605      	mov	r5, r0
    struct __firmware_update *firmware_update = (struct __firmware_update *)&(get_DevConfig_pointer()->firmware_update);
 801a7a4:	f7f9 fc46 	bl	8014034 <get_DevConfig_pointer>
    struct __device_option *device_option = (struct __device_option *)&(get_DevConfig_pointer()->device_option);
 801a7a8:	f7f9 fc44 	bl	8014034 <get_DevConfig_pointer>
    if((opmode == DEVICE_GW_MODE) && (sw_modeswitch_at_mode_on == SEG_ENABLE))
 801a7ac:	783b      	ldrb	r3, [r7, #0]
 801a7ae:	2b01      	cmp	r3, #1
 801a7b0:	d002      	beq.n	801a7b8 <do_seg+0x2c>
}
 801a7b2:	b003      	add	sp, #12
 801a7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((opmode == DEVICE_GW_MODE) && (sw_modeswitch_at_mode_on == SEG_ENABLE))
 801a7b8:	f8df a164 	ldr.w	sl, [pc, #356]	; 801a920 <do_seg+0x194>
 801a7bc:	f89a 3000 	ldrb.w	r3, [sl]
 801a7c0:	2b01      	cmp	r3, #1
 801a7c2:	d01d      	beq.n	801a800 <do_seg+0x74>
        switch(network_connection->working_mode)
 801a7c4:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
 801a7c8:	2b06      	cmp	r3, #6
 801a7ca:	d809      	bhi.n	801a7e0 <do_seg+0x54>
 801a7cc:	e8df f003 	tbb	[pc, r3]
 801a7d0:	67766c04 	.word	0x67766c04
 801a7d4:	1371      	.short	0x1371
 801a7d6:	13          	.byte	0x13
 801a7d7:	00          	.byte	0x00
                proc_SEG_tcp_client(uartNum, sock);
 801a7d8:	4641      	mov	r1, r8
 801a7da:	4620      	mov	r0, r4
 801a7dc:	f7fe fd9a 	bl	8019314 <proc_SEG_tcp_client>
        if((serial_option[channel].flow_control == flow_xon_xoff) || (serial_option[channel].flow_control == flow_rts_cts))
 801a7e0:	f895 10ee 	ldrb.w	r1, [r5, #238]	; 0xee
 801a7e4:	1e4b      	subs	r3, r1, #1
 801a7e6:	2b01      	cmp	r3, #1
 801a7e8:	d8e3      	bhi.n	801a7b2 <do_seg+0x26>
            check_uart_flow_control(uartNum, serial_option[channel].flow_control);
 801a7ea:	4620      	mov	r0, r4
}
 801a7ec:	b003      	add	sp, #12
 801a7ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            check_uart_flow_control(uartNum, serial_option[channel].flow_control);
 801a7f2:	f7fd b9c9 	b.w	8017b88 <check_uart_flow_control>
                proc_SEG_mqtt_client(uartNum, sock);
 801a7f6:	4641      	mov	r1, r8
 801a7f8:	4620      	mov	r0, r4
 801a7fa:	f7fe f825 	bl	8018848 <proc_SEG_mqtt_client>
                break;
 801a7fe:	e7ef      	b.n	801a7e0 <do_seg+0x54>
    return wiz_tls_init_state;
 801a800:	f8df 9120 	ldr.w	r9, [pc, #288]	; 801a924 <do_seg+0x198>
        process_socket_termination(sock, 100);
 801a804:	2164      	movs	r1, #100	; 0x64
 801a806:	4640      	mov	r0, r8
 801a808:	f7fd fcce 	bl	80181a8 <process_socket_termination>
        if(get_wiz_tls_init_state() == ENABLE)
 801a80c:	f8d9 3000 	ldr.w	r3, [r9]
 801a810:	2b01      	cmp	r3, #1
 801a812:	d061      	beq.n	801a8d8 <do_seg+0x14c>
        init_trigger_modeswitch(channel, get_segcp_uart(), DEVICE_AT_MODE);
 801a814:	f7fa f8bc 	bl	8014990 <get_segcp_uart>
        opmode = DEVICE_AT_MODE;
 801a818:	f04f 0900 	mov.w	r9, #0
        init_trigger_modeswitch(channel, get_segcp_uart(), DEVICE_AT_MODE);
 801a81c:	4683      	mov	fp, r0
    struct __serial_common *serial_common = (struct __serial_common *)&(get_DevConfig_pointer()->serial_common);
 801a81e:	f7f9 fc09 	bl	8014034 <get_DevConfig_pointer>
 801a822:	9001      	str	r0, [sp, #4]
    struct __network_connection *network_connection = (struct __network_connection *)(get_DevConfig_pointer()->network_connection);
 801a824:	f7f9 fc06 	bl	8014034 <get_DevConfig_pointer>
        opmode = DEVICE_AT_MODE;
 801a828:	f887 9000 	strb.w	r9, [r7]
    struct __network_connection *network_connection = (struct __network_connection *)get_DevConfig_pointer()->network_connection;
 801a82c:	f7f9 fc02 	bl	8014034 <get_DevConfig_pointer>
            network_connection[channel].working_state = ST_ATMODE;
 801a830:	2304      	movs	r3, #4
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, OFF); // Status I/O pin to high
 801a832:	464a      	mov	r2, r9
            network_connection[channel].working_state = ST_ATMODE;
 801a834:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        set_connection_status_io(STATUS_TCPCONNECT_PIN, channel, OFF); // Status I/O pin to high
 801a838:	4649      	mov	r1, r9
 801a83a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801a83e:	f7fc fe63 	bl	8017508 <set_connection_status_io>
        if(serial_common->serial_debug_en)
 801a842:	9b01      	ldr	r3, [sp, #4]
 801a844:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 801a848:	2b00      	cmp	r3, #0
 801a84a:	d13c      	bne.n	801a8c6 <do_seg+0x13a>
    u2e_size[channel] = 0;
 801a84c:	f04f 0900 	mov.w	r9, #0
 801a850:	4b26      	ldr	r3, [pc, #152]	; (801a8ec <do_seg+0x160>)
    uart_rx_flush(uartNum);
 801a852:	4658      	mov	r0, fp
    u2e_size[channel] = 0;
 801a854:	f8a3 9000 	strh.w	r9, [r3]
    uart_rx_flush(uartNum);
 801a858:	f7fd fab2 	bl	8017dc0 <uart_rx_flush>
    inactivity_time[channel] = 0;
 801a85c:	4a24      	ldr	r2, [pc, #144]	; (801a8f0 <do_seg+0x164>)
    if(opmode == DEVICE_GW_MODE) 
 801a85e:	783b      	ldrb	r3, [r7, #0]
    inactivity_time[channel] = 0;
 801a860:	f8a2 9000 	strh.w	r9, [r2]
    keepalive_time[channel] = 0;
 801a864:	4f23      	ldr	r7, [pc, #140]	; (801a8f4 <do_seg+0x168>)
    serial_input_time[channel] = 0;
 801a866:	4824      	ldr	r0, [pc, #144]	; (801a8f8 <do_seg+0x16c>)
    enable_inactivity_timer[channel] = SEG_DISABLE;
 801a868:	4924      	ldr	r1, [pc, #144]	; (801a8fc <do_seg+0x170>)
    enable_keepalive_timer[channel] = SEG_DISABLE;
 801a86a:	4a25      	ldr	r2, [pc, #148]	; (801a900 <do_seg+0x174>)
    keepalive_time[channel] = 0;
 801a86c:	f8a7 9000 	strh.w	r9, [r7]
    enable_inactivity_timer[channel] = SEG_DISABLE;
 801a870:	f881 9000 	strb.w	r9, [r1]
    serial_input_time[channel] = 0;
 801a874:	f8a0 9000 	strh.w	r9, [r0]
    enable_keepalive_timer[channel] = SEG_DISABLE;
 801a878:	f882 9000 	strb.w	r9, [r2]
    enable_serial_input_timer[channel] = SEG_DISABLE;
 801a87c:	4f21      	ldr	r7, [pc, #132]	; (801a904 <do_seg+0x178>)
    flag_serial_input_time_elapse[channel] = 0;
 801a87e:	4822      	ldr	r0, [pc, #136]	; (801a908 <do_seg+0x17c>)
    enable_modeswitch_timer = SEG_DISABLE;
 801a880:	4922      	ldr	r1, [pc, #136]	; (801a90c <do_seg+0x180>)
    modeswitch_time = 0;
 801a882:	4a23      	ldr	r2, [pc, #140]	; (801a910 <do_seg+0x184>)
    if(opmode == DEVICE_GW_MODE) 
 801a884:	2b01      	cmp	r3, #1
        sw_modeswitch_at_mode_on = SEG_DISABLE;
 801a886:	f88a 9000 	strb.w	r9, [sl]
    enable_serial_input_timer[channel] = SEG_DISABLE;
 801a88a:	f887 9000 	strb.w	r9, [r7]
    flag_serial_input_time_elapse[channel] = 0;
 801a88e:	f880 9000 	strb.w	r9, [r0]
    enable_modeswitch_timer = SEG_DISABLE;
 801a892:	f881 9000 	strb.w	r9, [r1]
    modeswitch_time = 0;
 801a896:	f8a2 9000 	strh.w	r9, [r2]
    if(opmode == DEVICE_GW_MODE) 
 801a89a:	d093      	beq.n	801a7c4 <do_seg+0x38>
 801a89c:	e789      	b.n	801a7b2 <do_seg+0x26>
                proc_SEG_udp(uartNum, sock);
 801a89e:	4641      	mov	r1, r8
 801a8a0:	4620      	mov	r0, r4
 801a8a2:	f7fe fcc5 	bl	8019230 <proc_SEG_udp>
                break;
 801a8a6:	e79b      	b.n	801a7e0 <do_seg+0x54>
                proc_SEG_tcp_server(uartNum, sock);
 801a8a8:	4641      	mov	r1, r8
 801a8aa:	4620      	mov	r0, r4
 801a8ac:	f7ff fb34 	bl	8019f18 <proc_SEG_tcp_server>
                break;
 801a8b0:	e796      	b.n	801a7e0 <do_seg+0x54>
                proc_SEG_tcp_client_over_tls(uartNum, sock);
 801a8b2:	4641      	mov	r1, r8
 801a8b4:	4620      	mov	r0, r4
 801a8b6:	f7fe ffe1 	bl	801987c <proc_SEG_tcp_client_over_tls>
                break;
 801a8ba:	e791      	b.n	801a7e0 <do_seg+0x54>
                proc_SEG_tcp_mixed(uartNum, sock);
 801a8bc:	4641      	mov	r1, r8
 801a8be:	4620      	mov	r0, r4
 801a8c0:	f7ff fcea 	bl	801a298 <proc_SEG_tcp_mixed>
                break;
 801a8c4:	e78c      	b.n	801a7e0 <do_seg+0x54>
            printf(" > SEG:AT Mode\r\n");
 801a8c6:	4813      	ldr	r0, [pc, #76]	; (801a914 <do_seg+0x188>)
 801a8c8:	f015 fc14 	bl	80300f4 <puts>
            uart_puts(uartNum, (uint8_t *)"SEG:AT Mode\r\n", sizeof("SEG:AT Mode\r\n"));
 801a8cc:	220e      	movs	r2, #14
 801a8ce:	4658      	mov	r0, fp
 801a8d0:	4911      	ldr	r1, [pc, #68]	; (801a918 <do_seg+0x18c>)
 801a8d2:	f7fd fa33 	bl	8017d3c <uart_puts>
 801a8d6:	e7b9      	b.n	801a84c <do_seg+0xc0>
            wiz_tls_deinit(&s2e_tlsContext);
 801a8d8:	4810      	ldr	r0, [pc, #64]	; (801a91c <do_seg+0x190>)
 801a8da:	f004 f843 	bl	801e964 <wiz_tls_deinit>
        wiz_tls_init_state = DISABLE;
 801a8de:	2300      	movs	r3, #0
 801a8e0:	f8c9 3000 	str.w	r3, [r9]
 801a8e4:	e796      	b.n	801a814 <do_seg+0x88>
 801a8e6:	bf00      	nop
 801a8e8:	20018214 	.word	0x20018214
 801a8ec:	20019960 	.word	0x20019960
 801a8f0:	2001991c 	.word	0x2001991c
 801a8f4:	20019924 	.word	0x20019924
 801a8f8:	20019958 	.word	0x20019958
 801a8fc:	200198f4 	.word	0x200198f4
 801a900:	200198f8 	.word	0x200198f8
 801a904:	20019900 	.word	0x20019900
 801a908:	20019914 	.word	0x20019914
 801a90c:	200198f9 	.word	0x200198f9
 801a910:	2001992a 	.word	0x2001992a
 801a914:	08033200 	.word	0x08033200
 801a918:	08033210 	.word	0x08033210
 801a91c:	2001fe58 	.word	0x2001fe58
 801a920:	2001995a 	.word	0x2001995a
 801a924:	20019964 	.word	0x20019964

0801a928 <mqtt_subscribeMessageHandler>:
{
 801a928:	b538      	push	{r3, r4, r5, lr}
    MQTTMessage* message = md->message;
 801a92a:	6803      	ldr	r3, [r0, #0]
    if(message->payloadlen)
 801a92c:	68da      	ldr	r2, [r3, #12]
 801a92e:	b902      	cbnz	r2, 801a932 <mqtt_subscribeMessageHandler+0xa>
}
 801a930:	bd38      	pop	{r3, r4, r5, pc}
        e2u_size[mqtt_n.channel] = message->payloadlen;
 801a932:	4c07      	ldr	r4, [pc, #28]	; (801a950 <mqtt_subscribeMessageHandler+0x28>)
 801a934:	4807      	ldr	r0, [pc, #28]	; (801a954 <mqtt_subscribeMessageHandler+0x2c>)
 801a936:	7d25      	ldrb	r5, [r4, #20]
        memcpy(g_recv_buf, message->payload, message->payloadlen);
 801a938:	6899      	ldr	r1, [r3, #8]
        e2u_size[mqtt_n.channel] = message->payloadlen;
 801a93a:	f820 2015 	strh.w	r2, [r0, r5, lsl #1]
        memcpy(g_recv_buf, message->payload, message->payloadlen);
 801a93e:	4806      	ldr	r0, [pc, #24]	; (801a958 <mqtt_subscribeMessageHandler+0x30>)
 801a940:	f015 fa6a 	bl	802fe18 <memcpy>
        ether_to_uart(mqtt_n.channel, mqtt_n.my_socket);
 801a944:	4628      	mov	r0, r5
 801a946:	7821      	ldrb	r1, [r4, #0]
}
 801a948:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ether_to_uart(mqtt_n.channel, mqtt_n.my_socket);
 801a94c:	f7fe bb0c 	b.w	8018f68 <ether_to_uart>
 801a950:	2001feb8 	.word	0x2001feb8
 801a954:	200198ec 	.word	0x200198ec
 801a958:	2001ddbc 	.word	0x2001ddbc

0801a95c <seg_timer_msec>:



// This function have to call every 1 millisecond by Timer IRQ handler routine.
void seg_timer_msec(void)
{
 801a95c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    struct __serial_data_packing *serial_data_packing = (struct __serial_data_packing *)&(get_DevConfig_pointer()->serial_data_packing);
 801a960:	f7f9 fb68 	bl	8014034 <get_DevConfig_pointer>
    // SEGCP Keep-alive timer (for configuration tool, TCP mode)

    for(i = 0; i < DEVICE_UART_CNT; i++)
    {
        // Reconnection timer: Time count routine (msec)
        if(enable_reconnection_timer[i])
 801a964:	4b3a      	ldr	r3, [pc, #232]	; (801aa50 <seg_timer_msec+0xf4>)
 801a966:	781b      	ldrb	r3, [r3, #0]
 801a968:	b15b      	cbz	r3, 801a982 <seg_timer_msec+0x26>
        {
            if(reconnection_time[i] < 0xFFFF)
 801a96a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a96e:	4a39      	ldr	r2, [pc, #228]	; (801aa54 <seg_timer_msec+0xf8>)
 801a970:	8813      	ldrh	r3, [r2, #0]
 801a972:	b29b      	uxth	r3, r3
 801a974:	428b      	cmp	r3, r1
                reconnection_time[i]++;
            else
                reconnection_time[i] = 0;
 801a976:	bf0f      	iteee	eq
 801a978:	2300      	moveq	r3, #0
                reconnection_time[i]++;
 801a97a:	8813      	ldrhne	r3, [r2, #0]
 801a97c:	3301      	addne	r3, #1
 801a97e:	b29b      	uxthne	r3, r3
                reconnection_time[i] = 0;
 801a980:	8013      	strh	r3, [r2, #0]
        }

        // Keep-alive timer: Time count routine (msec)
        if(enable_keepalive_timer[i])
 801a982:	4b35      	ldr	r3, [pc, #212]	; (801aa58 <seg_timer_msec+0xfc>)
 801a984:	781b      	ldrb	r3, [r3, #0]
 801a986:	b15b      	cbz	r3, 801a9a0 <seg_timer_msec+0x44>
        {
            if(keepalive_time[i] < 0xFFFF)
 801a988:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a98c:	4a33      	ldr	r2, [pc, #204]	; (801aa5c <seg_timer_msec+0x100>)
 801a98e:	8813      	ldrh	r3, [r2, #0]
 801a990:	b29b      	uxth	r3, r3
 801a992:	428b      	cmp	r3, r1
                keepalive_time[i]++;
            else
                keepalive_time[i] = 0;
 801a994:	bf0f      	iteee	eq
 801a996:	2300      	moveq	r3, #0
                keepalive_time[i]++;
 801a998:	8813      	ldrhne	r3, [r2, #0]
 801a99a:	3301      	addne	r3, #1
 801a99c:	b29b      	uxthne	r3, r3
                keepalive_time[i] = 0;
 801a99e:	8013      	strh	r3, [r2, #0]
        }

        // Serial data packing time delimiter timer
        if(enable_serial_input_timer[i])
 801a9a0:	4b2f      	ldr	r3, [pc, #188]	; (801aa60 <seg_timer_msec+0x104>)
 801a9a2:	781a      	ldrb	r2, [r3, #0]
 801a9a4:	b152      	cbz	r2, 801a9bc <seg_timer_msec+0x60>
        {
            if(serial_input_time[i] < serial_data_packing[i].packing_time)
 801a9a6:	492f      	ldr	r1, [pc, #188]	; (801aa64 <seg_timer_msec+0x108>)
 801a9a8:	f8b0 00f1 	ldrh.w	r0, [r0, #241]	; 0xf1
 801a9ac:	880a      	ldrh	r2, [r1, #0]
 801a9ae:	b292      	uxth	r2, r2
 801a9b0:	4290      	cmp	r0, r2
 801a9b2:	d929      	bls.n	801aa08 <seg_timer_msec+0xac>
            {
                serial_input_time[i]++;
 801a9b4:	880b      	ldrh	r3, [r1, #0]
 801a9b6:	3301      	adds	r3, #1
 801a9b8:	b29b      	uxth	r3, r3
 801a9ba:	800b      	strh	r3, [r1, #0]
                flag_serial_input_time_elapse[i] = SEG_ENABLE;
            }
        }

        // Connection password auth timer
        if(enable_connection_auth_timer[i])
 801a9bc:	4b2a      	ldr	r3, [pc, #168]	; (801aa68 <seg_timer_msec+0x10c>)
 801a9be:	781b      	ldrb	r3, [r3, #0]
 801a9c0:	b15b      	cbz	r3, 801a9da <seg_timer_msec+0x7e>
        {
            if(connection_auth_time[i] < 0xffff)
 801a9c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a9c6:	4a29      	ldr	r2, [pc, #164]	; (801aa6c <seg_timer_msec+0x110>)
 801a9c8:	8813      	ldrh	r3, [r2, #0]
 801a9ca:	b29b      	uxth	r3, r3
 801a9cc:	428b      	cmp	r3, r1
                connection_auth_time[i]++;
            else
                connection_auth_time[i] = 0;
 801a9ce:	bf0f      	iteee	eq
 801a9d0:	2300      	moveq	r3, #0
                connection_auth_time[i]++;
 801a9d2:	8813      	ldrhne	r3, [r2, #0]
 801a9d4:	3301      	addne	r3, #1
 801a9d6:	b29b      	uxthne	r3, r3
                connection_auth_time[i] = 0;
 801a9d8:	8013      	strh	r3, [r2, #0]
        }
    }

    // Mode switch timer: Time count routine (msec) (GW mode <-> Serial command mode, for s/w mode switch trigger code)
    if(modeswitch_time < modeswitch_gap_time) modeswitch_time++;
 801a9da:	4925      	ldr	r1, [pc, #148]	; (801aa70 <seg_timer_msec+0x114>)
 801a9dc:	4825      	ldr	r0, [pc, #148]	; (801aa74 <seg_timer_msec+0x118>)
 801a9de:	880a      	ldrh	r2, [r1, #0]
 801a9e0:	8803      	ldrh	r3, [r0, #0]
 801a9e2:	b292      	uxth	r2, r2
 801a9e4:	b29b      	uxth	r3, r3
 801a9e6:	429a      	cmp	r2, r3
 801a9e8:	d203      	bcs.n	801a9f2 <seg_timer_msec+0x96>
 801a9ea:	880b      	ldrh	r3, [r1, #0]
 801a9ec:	3301      	adds	r3, #1
 801a9ee:	b29b      	uxth	r3, r3
 801a9f0:	800b      	strh	r3, [r1, #0]

    if((enable_modeswitch_timer) && (modeswitch_time == modeswitch_gap_time))
 801a9f2:	4c21      	ldr	r4, [pc, #132]	; (801aa78 <seg_timer_msec+0x11c>)
 801a9f4:	7823      	ldrb	r3, [r4, #0]
 801a9f6:	b12b      	cbz	r3, 801aa04 <seg_timer_msec+0xa8>
 801a9f8:	880a      	ldrh	r2, [r1, #0]
 801a9fa:	8803      	ldrh	r3, [r0, #0]
 801a9fc:	b292      	uxth	r2, r2
 801a9fe:	b29b      	uxth	r3, r3
 801aa00:	429a      	cmp	r2, r3
 801aa02:	d008      	beq.n	801aa16 <seg_timer_msec+0xba>
            restore_serial_data(triggercode_idx);   // failed

        triggercode_idx = 0;
        enable_modeswitch_timer = SEG_DISABLE;
    }
}
 801aa04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                serial_input_time[i] = 0;
 801aa08:	2200      	movs	r2, #0
                flag_serial_input_time_elapse[i] = SEG_ENABLE;
 801aa0a:	2401      	movs	r4, #1
 801aa0c:	481b      	ldr	r0, [pc, #108]	; (801aa7c <seg_timer_msec+0x120>)
                serial_input_time[i] = 0;
 801aa0e:	800a      	strh	r2, [r1, #0]
                enable_serial_input_timer[i] = 0;
 801aa10:	701a      	strb	r2, [r3, #0]
                flag_serial_input_time_elapse[i] = SEG_ENABLE;
 801aa12:	7004      	strb	r4, [r0, #0]
 801aa14:	e7d2      	b.n	801a9bc <seg_timer_msec+0x60>
        if(triggercode_idx == 3)
 801aa16:	4f1a      	ldr	r7, [pc, #104]	; (801aa80 <seg_timer_msec+0x124>)
 801aa18:	783b      	ldrb	r3, [r7, #0]
 801aa1a:	2b03      	cmp	r3, #3
 801aa1c:	d014      	beq.n	801aa48 <seg_timer_msec+0xec>
    for(i = 0; i < idx; i++)
 801aa1e:	b173      	cbz	r3, 801aa3e <seg_timer_msec+0xe2>
        put_byte_to_uart_buffer(SEG_DATA0_UART, ch_tmp[i]);
 801aa20:	f04f 0800 	mov.w	r8, #0
 801aa24:	4d17      	ldr	r5, [pc, #92]	; (801aa84 <seg_timer_msec+0x128>)
 801aa26:	3b01      	subs	r3, #1
 801aa28:	1c6e      	adds	r6, r5, #1
 801aa2a:	fa56 f683 	uxtab	r6, r6, r3
 801aa2e:	7829      	ldrb	r1, [r5, #0]
 801aa30:	2000      	movs	r0, #0
 801aa32:	f7fd f9cf 	bl	8017dd4 <put_byte_to_uart_buffer>
        ch_tmp[i] = 0x00;
 801aa36:	f805 8b01 	strb.w	r8, [r5], #1
    for(i = 0; i < idx; i++)
 801aa3a:	42ae      	cmp	r6, r5
 801aa3c:	d1f7      	bne.n	801aa2e <seg_timer_msec+0xd2>
        triggercode_idx = 0;
 801aa3e:	2300      	movs	r3, #0
        enable_modeswitch_timer = SEG_DISABLE;
 801aa40:	7023      	strb	r3, [r4, #0]
        triggercode_idx = 0;
 801aa42:	703b      	strb	r3, [r7, #0]
}
 801aa44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            sw_modeswitch_at_mode_on = SEG_ENABLE;  // success
 801aa48:	2201      	movs	r2, #1
 801aa4a:	4b0f      	ldr	r3, [pc, #60]	; (801aa88 <seg_timer_msec+0x12c>)
 801aa4c:	701a      	strb	r2, [r3, #0]
 801aa4e:	e7f6      	b.n	801aa3e <seg_timer_msec+0xe2>
 801aa50:	200198fc 	.word	0x200198fc
 801aa54:	20019934 	.word	0x20019934
 801aa58:	200198f8 	.word	0x200198f8
 801aa5c:	20019924 	.word	0x20019924
 801aa60:	20019900 	.word	0x20019900
 801aa64:	20019958 	.word	0x20019958
 801aa68:	200198f0 	.word	0x200198f0
 801aa6c:	200198e8 	.word	0x200198e8
 801aa70:	2001992a 	.word	0x2001992a
 801aa74:	20018212 	.word	0x20018212
 801aa78:	200198f9 	.word	0x200198f9
 801aa7c:	20019914 	.word	0x20019914
 801aa80:	2001995c 	.word	0x2001995c
 801aa84:	200198e0 	.word	0x200198e0
 801aa88:	2001995a 	.word	0x2001995a

0801aa8c <seg_timer_sec>:
    uint8_t i;

    for(i = 0; i < DEVICE_UART_CNT; i++)
    {
        // Inactivity timer: Time count routine (sec)
        if(enable_inactivity_timer[i])
 801aa8c:	4b0a      	ldr	r3, [pc, #40]	; (801aab8 <seg_timer_sec+0x2c>)
 801aa8e:	781b      	ldrb	r3, [r3, #0]
 801aa90:	b133      	cbz	r3, 801aaa0 <seg_timer_sec+0x14>
        {
            if(inactivity_time[i] < 0xFFFF) inactivity_time[i]++;
 801aa92:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801aa96:	4a09      	ldr	r2, [pc, #36]	; (801aabc <seg_timer_sec+0x30>)
 801aa98:	8813      	ldrh	r3, [r2, #0]
 801aa9a:	b29b      	uxth	r3, r3
 801aa9c:	428b      	cmp	r3, r1
 801aa9e:	d103      	bne.n	801aaa8 <seg_timer_sec+0x1c>
        }
    }

    tmp_timeflag_for_debug = 1;
 801aaa0:	2201      	movs	r2, #1
 801aaa2:	4b07      	ldr	r3, [pc, #28]	; (801aac0 <seg_timer_sec+0x34>)
 801aaa4:	701a      	strb	r2, [r3, #0]
}
 801aaa6:	4770      	bx	lr
            if(inactivity_time[i] < 0xFFFF) inactivity_time[i]++;
 801aaa8:	8813      	ldrh	r3, [r2, #0]
 801aaaa:	3301      	adds	r3, #1
 801aaac:	b29b      	uxth	r3, r3
 801aaae:	8013      	strh	r3, [r2, #0]
    tmp_timeflag_for_debug = 1;
 801aab0:	2201      	movs	r2, #1
 801aab2:	4b03      	ldr	r3, [pc, #12]	; (801aac0 <seg_timer_sec+0x34>)
 801aab4:	701a      	strb	r2, [r3, #0]
}
 801aab6:	4770      	bx	lr
 801aab8:	200198f4 	.word	0x200198f4
 801aabc:	2001991c 	.word	0x2001991c
 801aac0:	2001995b 	.word	0x2001995b

0801aac4 <WIZCHIP_READ.constprop.0>:
   WIZCHIP_CRITICAL_EXIT();
}
/**
@brief  This function reads the value from W5100S registers.
*/
uint8_t  WIZCHIP_READ(uint32_t AddrSel)
 801aac4:	b510      	push	{r4, lr}
{
   uint8_t ret;
   int i;
   WIZCHIP_CRITICAL_ENTER();
 801aac6:	4c0c      	ldr	r4, [pc, #48]	; (801aaf8 <WIZCHIP_READ.constprop.0+0x34>)
uint8_t  WIZCHIP_READ(uint32_t AddrSel)
 801aac8:	b082      	sub	sp, #8
   WIZCHIP_CRITICAL_ENTER();
 801aaca:	68a3      	ldr	r3, [r4, #8]
 801aacc:	4798      	blx	r3
   WIZCHIP.CS._select();
 801aace:	6923      	ldr	r3, [r4, #16]
 801aad0:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ ==  _WIZCHIP_IO_MODE_SPI_))
   WIZCHIP.IF.SPI._write_byte(0x0F);
 801aad2:	69e3      	ldr	r3, [r4, #28]
 801aad4:	200f      	movs	r0, #15
 801aad6:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0xFF00) >>  8);
 801aad8:	69e3      	ldr	r3, [r4, #28]
 801aada:	2000      	movs	r0, #0
 801aadc:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF) >>  0);
 801aade:	69e3      	ldr	r3, [r4, #28]
 801aae0:	201b      	movs	r0, #27
 801aae2:	4798      	blx	r3
   ret = WIZCHIP.IF.SPI._read_byte(); 
 801aae4:	69a3      	ldr	r3, [r4, #24]
 801aae6:	4798      	blx	r3

#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100S. !!!"   
#endif

   WIZCHIP.CS._deselect();
 801aae8:	6963      	ldr	r3, [r4, #20]
   ret = WIZCHIP.IF.SPI._read_byte(); 
 801aaea:	9001      	str	r0, [sp, #4]
   WIZCHIP.CS._deselect();
 801aaec:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 801aaee:	68e3      	ldr	r3, [r4, #12]
 801aaf0:	4798      	blx	r3
   return ret;
}
 801aaf2:	9801      	ldr	r0, [sp, #4]
 801aaf4:	b002      	add	sp, #8
 801aaf6:	bd10      	pop	{r4, pc}
 801aaf8:	2001823c 	.word	0x2001823c

0801aafc <WIZCHIP_READ.constprop.1>:
uint8_t  WIZCHIP_READ(uint32_t AddrSel)
 801aafc:	b510      	push	{r4, lr}
   WIZCHIP_CRITICAL_ENTER();
 801aafe:	4c0c      	ldr	r4, [pc, #48]	; (801ab30 <WIZCHIP_READ.constprop.1+0x34>)
uint8_t  WIZCHIP_READ(uint32_t AddrSel)
 801ab00:	b082      	sub	sp, #8
   WIZCHIP_CRITICAL_ENTER();
 801ab02:	68a3      	ldr	r3, [r4, #8]
 801ab04:	4798      	blx	r3
   WIZCHIP.CS._select();
 801ab06:	6923      	ldr	r3, [r4, #16]
 801ab08:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(0x0F);
 801ab0a:	69e3      	ldr	r3, [r4, #28]
 801ab0c:	200f      	movs	r0, #15
 801ab0e:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0xFF00) >>  8);
 801ab10:	69e3      	ldr	r3, [r4, #28]
 801ab12:	2000      	movs	r0, #0
 801ab14:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF) >>  0);
 801ab16:	69e3      	ldr	r3, [r4, #28]
 801ab18:	201a      	movs	r0, #26
 801ab1a:	4798      	blx	r3
   ret = WIZCHIP.IF.SPI._read_byte(); 
 801ab1c:	69a3      	ldr	r3, [r4, #24]
 801ab1e:	4798      	blx	r3
   WIZCHIP.CS._deselect();
 801ab20:	6963      	ldr	r3, [r4, #20]
   ret = WIZCHIP.IF.SPI._read_byte(); 
 801ab22:	9001      	str	r0, [sp, #4]
   WIZCHIP.CS._deselect();
 801ab24:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 801ab26:	68e3      	ldr	r3, [r4, #12]
 801ab28:	4798      	blx	r3
}
 801ab2a:	9801      	ldr	r0, [sp, #4]
 801ab2c:	b002      	add	sp, #8
 801ab2e:	bd10      	pop	{r4, pc}
 801ab30:	2001823c 	.word	0x2001823c

0801ab34 <WIZCHIP_WRITE>:
{
 801ab34:	b570      	push	{r4, r5, r6, lr}
 801ab36:	4605      	mov	r5, r0
 801ab38:	460e      	mov	r6, r1
   WIZCHIP_CRITICAL_ENTER();
 801ab3a:	4c0c      	ldr	r4, [pc, #48]	; (801ab6c <WIZCHIP_WRITE+0x38>)
 801ab3c:	68a3      	ldr	r3, [r4, #8]
 801ab3e:	4798      	blx	r3
   WIZCHIP.CS._select();
 801ab40:	6923      	ldr	r3, [r4, #16]
 801ab42:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(0xF0);
 801ab44:	69e3      	ldr	r3, [r4, #28]
 801ab46:	20f0      	movs	r0, #240	; 0xf0
 801ab48:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0xFF00) >>  8);
 801ab4a:	69e3      	ldr	r3, [r4, #28]
 801ab4c:	f3c5 2007 	ubfx	r0, r5, #8, #8
 801ab50:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF) >>  0);
 801ab52:	69e3      	ldr	r3, [r4, #28]
 801ab54:	b2e8      	uxtb	r0, r5
 801ab56:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(wb);    // Data write (write 1byte data)
 801ab58:	4630      	mov	r0, r6
 801ab5a:	69e3      	ldr	r3, [r4, #28]
 801ab5c:	4798      	blx	r3
   WIZCHIP.CS._deselect();
 801ab5e:	6963      	ldr	r3, [r4, #20]
 801ab60:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 801ab62:	68e3      	ldr	r3, [r4, #12]
}
 801ab64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   WIZCHIP_CRITICAL_EXIT();
 801ab68:	4718      	bx	r3
 801ab6a:	bf00      	nop
 801ab6c:	2001823c 	.word	0x2001823c

0801ab70 <WIZCHIP_READ>:
{
 801ab70:	b530      	push	{r4, r5, lr}
 801ab72:	4605      	mov	r5, r0
   WIZCHIP_CRITICAL_ENTER();
 801ab74:	4c0c      	ldr	r4, [pc, #48]	; (801aba8 <WIZCHIP_READ+0x38>)
{
 801ab76:	b083      	sub	sp, #12
   WIZCHIP_CRITICAL_ENTER();
 801ab78:	68a3      	ldr	r3, [r4, #8]
 801ab7a:	4798      	blx	r3
   WIZCHIP.CS._select();
 801ab7c:	6923      	ldr	r3, [r4, #16]
 801ab7e:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(0x0F);
 801ab80:	69e3      	ldr	r3, [r4, #28]
 801ab82:	200f      	movs	r0, #15
 801ab84:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0xFF00) >>  8);
 801ab86:	69e3      	ldr	r3, [r4, #28]
 801ab88:	f3c5 2007 	ubfx	r0, r5, #8, #8
 801ab8c:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF) >>  0);
 801ab8e:	69e3      	ldr	r3, [r4, #28]
 801ab90:	b2e8      	uxtb	r0, r5
 801ab92:	4798      	blx	r3
   ret = WIZCHIP.IF.SPI._read_byte(); 
 801ab94:	69a3      	ldr	r3, [r4, #24]
 801ab96:	4798      	blx	r3
   WIZCHIP.CS._deselect();
 801ab98:	6963      	ldr	r3, [r4, #20]
   ret = WIZCHIP.IF.SPI._read_byte(); 
 801ab9a:	9001      	str	r0, [sp, #4]
   WIZCHIP.CS._deselect();
 801ab9c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 801ab9e:	68e3      	ldr	r3, [r4, #12]
 801aba0:	4798      	blx	r3
}
 801aba2:	9801      	ldr	r0, [sp, #4]
 801aba4:	b003      	add	sp, #12
 801aba6:	bd30      	pop	{r4, r5, pc}
 801aba8:	2001823c 	.word	0x2001823c

0801abac <WIZCHIP_WRITE_BUF>:

/**
@brief  This function writes into W5100S memory(Buffer)
*/ 
void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 801abac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801abb0:	4607      	mov	r7, r0
 801abb2:	4616      	mov	r6, r2
   uint16_t i = 0;
   int j,k,l;
   WIZCHIP_CRITICAL_ENTER();
 801abb4:	4d10      	ldr	r5, [pc, #64]	; (801abf8 <WIZCHIP_WRITE_BUF+0x4c>)
{
 801abb6:	460c      	mov	r4, r1
   WIZCHIP_CRITICAL_ENTER();
 801abb8:	68ab      	ldr	r3, [r5, #8]
 801abba:	4798      	blx	r3
   WIZCHIP.CS._select();   //M20150601 : Moved here.
 801abbc:	692b      	ldr	r3, [r5, #16]
 801abbe:	4798      	blx	r3

#if((_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_))

   WIZCHIP.IF.SPI._write_byte(0xF0);
 801abc0:	20f0      	movs	r0, #240	; 0xf0
 801abc2:	69eb      	ldr	r3, [r5, #28]
 801abc4:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((((uint16_t)(AddrSel+i)) & 0xFF00) >>  8);
 801abc6:	69eb      	ldr	r3, [r5, #28]
 801abc8:	f3c7 2007 	ubfx	r0, r7, #8, #8
 801abcc:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((((uint16_t)(AddrSel+i)) & 0x00FF) >>  0);
 801abce:	69eb      	ldr	r3, [r5, #28]
 801abd0:	b2f8      	uxtb	r0, r7
 801abd2:	4798      	blx	r3

   for(i = 0; i < len; i++)
 801abd4:	b14e      	cbz	r6, 801abea <WIZCHIP_WRITE_BUF+0x3e>
 801abd6:	3e01      	subs	r6, #1
 801abd8:	fa14 f686 	uxtah	r6, r4, r6
 801abdc:	3c01      	subs	r4, #1
   {
	   WIZCHIP.IF.SPI._write_byte(pBuf[i]);    // Data write (write 1byte data)
 801abde:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 801abe2:	69eb      	ldr	r3, [r5, #28]
 801abe4:	4798      	blx	r3
   for(i = 0; i < len; i++)
 801abe6:	42b4      	cmp	r4, r6
 801abe8:	d1f9      	bne.n	801abde <WIZCHIP_WRITE_BUF+0x32>

#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100S. !!!!"
#endif
   
   WIZCHIP.CS._deselect();  //M20150601 : Moved here.
 801abea:	696b      	ldr	r3, [r5, #20]
 801abec:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 801abee:	68eb      	ldr	r3, [r5, #12]
}
 801abf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   WIZCHIP_CRITICAL_EXIT();
 801abf4:	4718      	bx	r3
 801abf6:	bf00      	nop
 801abf8:	2001823c 	.word	0x2001823c

0801abfc <WIZCHIP_READ_BUF>:
/**
@brief  This function reads into W5100S memory(Buffer)
*/ 

void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 801abfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac00:	4607      	mov	r7, r0
 801ac02:	4616      	mov	r6, r2
   uint16_t i = 0;
   WIZCHIP_CRITICAL_ENTER();
 801ac04:	4d10      	ldr	r5, [pc, #64]	; (801ac48 <WIZCHIP_READ_BUF+0x4c>)
{
 801ac06:	460c      	mov	r4, r1
   WIZCHIP_CRITICAL_ENTER();
 801ac08:	68ab      	ldr	r3, [r5, #8]
 801ac0a:	4798      	blx	r3
   WIZCHIP.CS._select();   //M20150601 : Moved here.
 801ac0c:	692b      	ldr	r3, [r5, #16]
 801ac0e:	4798      	blx	r3
   
#if( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_) )

   WIZCHIP.IF.SPI._write_byte(0x0F);
 801ac10:	200f      	movs	r0, #15
 801ac12:	69eb      	ldr	r3, [r5, #28]
 801ac14:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((uint16_t)((AddrSel+i) & 0xFF00) >>  8);
 801ac16:	69eb      	ldr	r3, [r5, #28]
 801ac18:	f3c7 2007 	ubfx	r0, r7, #8, #8
 801ac1c:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((uint16_t)((AddrSel+i) & 0x00FF) >>  0);
 801ac1e:	69eb      	ldr	r3, [r5, #28]
 801ac20:	b2f8      	uxtb	r0, r7
 801ac22:	4798      	blx	r3

   for(i = 0; i < len; i++)
 801ac24:	b14e      	cbz	r6, 801ac3a <WIZCHIP_READ_BUF+0x3e>
 801ac26:	3e01      	subs	r6, #1
 801ac28:	fa14 f686 	uxtah	r6, r4, r6
 801ac2c:	3c01      	subs	r4, #1
   {
      pBuf[i] = WIZCHIP.IF.SPI._read_byte(); 
 801ac2e:	69ab      	ldr	r3, [r5, #24]
 801ac30:	4798      	blx	r3
 801ac32:	f804 0f01 	strb.w	r0, [r4, #1]!
   for(i = 0; i < len; i++)
 801ac36:	42b4      	cmp	r4, r6
 801ac38:	d1f9      	bne.n	801ac2e <WIZCHIP_READ_BUF+0x32>
   
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100S. !!!!"
#endif

   WIZCHIP.CS._deselect();    //M20150601 : Moved Here.
 801ac3a:	696b      	ldr	r3, [r5, #20]
 801ac3c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 801ac3e:	68eb      	ldr	r3, [r5, #12]
}
 801ac40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   WIZCHIP_CRITICAL_EXIT();
 801ac44:	4718      	bx	r3
 801ac46:	bf00      	nop
 801ac48:	2001823c 	.word	0x2001823c

0801ac4c <getSn_TX_FSR>:
///////////////////////////////////
// Socket N regsiter IO function //
///////////////////////////////////

uint16_t getSn_TX_FSR(uint8_t sn)
{
 801ac4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   uint16_t val=0,val1=0;
 801ac50:	2600      	movs	r6, #0
   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 801ac52:	1d07      	adds	r7, r0, #4
 801ac54:	023f      	lsls	r7, r7, #8
 801ac56:	f107 0820 	add.w	r8, r7, #32
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 801ac5a:	3721      	adds	r7, #33	; 0x21
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 801ac5c:	4640      	mov	r0, r8
 801ac5e:	f7ff ff87 	bl	801ab70 <WIZCHIP_READ>
 801ac62:	4605      	mov	r5, r0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 801ac64:	4638      	mov	r0, r7
 801ac66:	f7ff ff83 	bl	801ab70 <WIZCHIP_READ>
 801ac6a:	022d      	lsls	r5, r5, #8
 801ac6c:	b2ad      	uxth	r5, r5
 801ac6e:	4428      	add	r0, r5
 801ac70:	b284      	uxth	r4, r0
      if (val1 != 0)
 801ac72:	b924      	cbnz	r4, 801ac7e <getSn_TX_FSR+0x32>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
      }
   }while (val != val1);
 801ac74:	2e00      	cmp	r6, #0
 801ac76:	d1f1      	bne.n	801ac5c <getSn_TX_FSR+0x10>
   return val;
}
 801ac78:	4630      	mov	r0, r6
 801ac7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 801ac7e:	4640      	mov	r0, r8
 801ac80:	f7ff ff76 	bl	801ab70 <WIZCHIP_READ>
 801ac84:	4605      	mov	r5, r0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 801ac86:	4638      	mov	r0, r7
 801ac88:	f7ff ff72 	bl	801ab70 <WIZCHIP_READ>
 801ac8c:	022d      	lsls	r5, r5, #8
 801ac8e:	b2ad      	uxth	r5, r5
 801ac90:	4428      	add	r0, r5
 801ac92:	b286      	uxth	r6, r0
   }while (val != val1);
 801ac94:	42b4      	cmp	r4, r6
 801ac96:	d1e1      	bne.n	801ac5c <getSn_TX_FSR+0x10>
}
 801ac98:	4630      	mov	r0, r6
 801ac9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ac9e:	bf00      	nop

0801aca0 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 801aca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   uint16_t val=0,val1=0;
 801aca4:	2600      	movs	r6, #0
   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 801aca6:	1d07      	adds	r7, r0, #4
 801aca8:	023f      	lsls	r7, r7, #8
 801acaa:	f107 0826 	add.w	r8, r7, #38	; 0x26
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 801acae:	3727      	adds	r7, #39	; 0x27
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 801acb0:	4640      	mov	r0, r8
 801acb2:	f7ff ff5d 	bl	801ab70 <WIZCHIP_READ>
 801acb6:	4605      	mov	r5, r0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 801acb8:	4638      	mov	r0, r7
 801acba:	f7ff ff59 	bl	801ab70 <WIZCHIP_READ>
 801acbe:	022d      	lsls	r5, r5, #8
 801acc0:	b2ad      	uxth	r5, r5
 801acc2:	4428      	add	r0, r5
 801acc4:	b284      	uxth	r4, r0
      if (val1 != 0)
 801acc6:	b924      	cbnz	r4, 801acd2 <getSn_RX_RSR+0x32>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
      }
   }while (val != val1);
 801acc8:	2e00      	cmp	r6, #0
 801acca:	d1f1      	bne.n	801acb0 <getSn_RX_RSR+0x10>
   return val;
}
 801accc:	4630      	mov	r0, r6
 801acce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 801acd2:	4640      	mov	r0, r8
 801acd4:	f7ff ff4c 	bl	801ab70 <WIZCHIP_READ>
 801acd8:	4605      	mov	r5, r0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 801acda:	4638      	mov	r0, r7
 801acdc:	f7ff ff48 	bl	801ab70 <WIZCHIP_READ>
 801ace0:	022d      	lsls	r5, r5, #8
 801ace2:	b2ad      	uxth	r5, r5
 801ace4:	4428      	add	r0, r5
 801ace6:	b286      	uxth	r6, r0
   }while (val != val1);
 801ace8:	42b4      	cmp	r4, r6
 801acea:	d1e1      	bne.n	801acb0 <getSn_RX_RSR+0x10>
}
 801acec:	4630      	mov	r0, r6
 801acee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801acf2:	bf00      	nop

0801acf4 <wiz_send_data>:
the data in transmite buffer. Here also take care of the condition while it exceed
the Tx memory uper-bound of socket.

*/
void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 801acf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acf8:	ed2d 8b02 	vpush	{d8}
  uint16_t ptr;
  uint16_t size;
  uint16_t dst_mask;
  uint16_t dst_ptr;

  ptr = getSn_TX_WR(sn);
 801acfc:	1d06      	adds	r6, r0, #4
 801acfe:	0236      	lsls	r6, r6, #8
 801ad00:	f106 0b24 	add.w	fp, r6, #36	; 0x24
{
 801ad04:	b087      	sub	sp, #28
 801ad06:	4605      	mov	r5, r0
  ptr = getSn_TX_WR(sn);
 801ad08:	4658      	mov	r0, fp
{
 801ad0a:	9201      	str	r2, [sp, #4]
 801ad0c:	9104      	str	r1, [sp, #16]
  ptr = getSn_TX_WR(sn);
 801ad0e:	f7ff ff2f 	bl	801ab70 <WIZCHIP_READ>
 801ad12:	3625      	adds	r6, #37	; 0x25
 801ad14:	4604      	mov	r4, r0
 801ad16:	4630      	mov	r0, r6
 801ad18:	f7ff ff2a 	bl	801ab70 <WIZCHIP_READ>

  dst_mask = ptr & getSn_TxMASK(sn);
 801ad1c:	f04f 0901 	mov.w	r9, #1
  ptr = getSn_TX_WR(sn);
 801ad20:	eb00 2004 	add.w	r0, r0, r4, lsl #8
 801ad24:	b284      	uxth	r4, r0
  dst_mask = ptr & getSn_TxMASK(sn);
 801ad26:	2703      	movs	r7, #3
  ptr = getSn_TX_WR(sn);
 801ad28:	9403      	str	r4, [sp, #12]
  dst_mask = ptr & getSn_TxMASK(sn);
 801ad2a:	f7ff fecb 	bl	801aac4 <WIZCHIP_READ.constprop.0>
 801ad2e:	fa05 f809 	lsl.w	r8, r5, r9
 801ad32:	fa07 f308 	lsl.w	r3, r7, r8
 801ad36:	ea00 0203 	and.w	r2, r0, r3
 801ad3a:	fa42 f208 	asr.w	r2, r2, r8
 801ad3e:	fa09 f202 	lsl.w	r2, r9, r2
 801ad42:	0292      	lsls	r2, r2, #10
 801ad44:	3a01      	subs	r2, #1
 801ad46:	9302      	str	r3, [sp, #8]
 801ad48:	ea02 0a04 	and.w	sl, r2, r4
   for(i = 0; i < sn; i++)
 801ad4c:	2d00      	cmp	r5, #0
 801ad4e:	f000 8097 	beq.w	801ae80 <wiz_send_data+0x18c>
 801ad52:	2300      	movs	r3, #0
   uint32_t txbase = _WIZCHIP_IO_TXBUF_;
 801ad54:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      txbase += getSn_TxMAX(i);
 801ad58:	ee08 6a10 	vmov	s16, r6
 801ad5c:	f8cd 8014 	str.w	r8, [sp, #20]
 801ad60:	461e      	mov	r6, r3
 801ad62:	46a8      	mov	r8, r5
 801ad64:	4625      	mov	r5, r4
 801ad66:	461c      	mov	r4, r3
 801ad68:	f7ff feac 	bl	801aac4 <WIZCHIP_READ.constprop.0>
 801ad6c:	0072      	lsls	r2, r6, #1
 801ad6e:	fa07 f102 	lsl.w	r1, r7, r2
 801ad72:	4001      	ands	r1, r0
 801ad74:	4b44      	ldr	r3, [pc, #272]	; (801ae88 <wiz_send_data+0x194>)
 801ad76:	4111      	asrs	r1, r2
 801ad78:	3401      	adds	r4, #1
 801ad7a:	b264      	sxtb	r4, r4
 801ad7c:	fa09 f101 	lsl.w	r1, r9, r1
 801ad80:	ea03 2181 	and.w	r1, r3, r1, lsl #10
   for(i = 0; i < sn; i++)
 801ad84:	45a0      	cmp	r8, r4
 801ad86:	4626      	mov	r6, r4
      txbase += getSn_TxMAX(i);
 801ad88:	440d      	add	r5, r1
   for(i = 0; i < sn; i++)
 801ad8a:	dced      	bgt.n	801ad68 <wiz_send_data+0x74>
 801ad8c:	462c      	mov	r4, r5
 801ad8e:	ee18 6a10 	vmov	r6, s16
 801ad92:	4645      	mov	r5, r8
 801ad94:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801ad98:	b2a4      	uxth	r4, r4
  dst_ptr = getSn_TxBASE(sn) + dst_mask;
  
  if (dst_mask + len > getSn_TxMAX(sn)) 
 801ad9a:	f7ff fe93 	bl	801aac4 <WIZCHIP_READ.constprop.0>
 801ad9e:	f04f 0901 	mov.w	r9, #1
 801ada2:	9b02      	ldr	r3, [sp, #8]
 801ada4:	9901      	ldr	r1, [sp, #4]
 801ada6:	ea00 0203 	and.w	r2, r0, r3
 801adaa:	fa42 f208 	asr.w	r2, r2, r8
 801adae:	4b36      	ldr	r3, [pc, #216]	; (801ae88 <wiz_send_data+0x194>)
 801adb0:	fa09 f202 	lsl.w	r2, r9, r2
 801adb4:	ea03 2282 	and.w	r2, r3, r2, lsl #10
 801adb8:	eb0a 0701 	add.w	r7, sl, r1
  dst_ptr = getSn_TxBASE(sn) + dst_mask;
 801adbc:	4454      	add	r4, sl
  if (dst_mask + len > getSn_TxMAX(sn)) 
 801adbe:	4297      	cmp	r7, r2
  dst_ptr = getSn_TxBASE(sn) + dst_mask;
 801adc0:	b2a4      	uxth	r4, r4
  if (dst_mask + len > getSn_TxMAX(sn)) 
 801adc2:	dd43      	ble.n	801ae4c <wiz_send_data+0x158>
  {
    size = getSn_TxMAX(sn) - dst_mask;
 801adc4:	f7ff fe7e 	bl	801aac4 <WIZCHIP_READ.constprop.0>
 801adc8:	9b02      	ldr	r3, [sp, #8]
 801adca:	4018      	ands	r0, r3
 801adcc:	fa40 f808 	asr.w	r8, r0, r8
 801add0:	fa09 f808 	lsl.w	r8, r9, r8
 801add4:	ea4f 2888 	mov.w	r8, r8, lsl #10
 801add8:	fa1f f888 	uxth.w	r8, r8
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, size);
 801addc:	4620      	mov	r0, r4
    size = getSn_TxMAX(sn) - dst_mask;
 801adde:	eba8 0a0a 	sub.w	sl, r8, sl
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, size);
 801ade2:	9c04      	ldr	r4, [sp, #16]
    size = getSn_TxMAX(sn) - dst_mask;
 801ade4:	fa1f fa8a 	uxth.w	sl, sl
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, size);
 801ade8:	4621      	mov	r1, r4
 801adea:	4652      	mov	r2, sl
 801adec:	f7ff fede 	bl	801abac <WIZCHIP_WRITE_BUF>
    wizdata += size;
 801adf0:	4623      	mov	r3, r4
    size = len - size;
 801adf2:	eba7 0708 	sub.w	r7, r7, r8
    wizdata += size;
 801adf6:	4453      	add	r3, sl
 801adf8:	4619      	mov	r1, r3
    size = len - size;
 801adfa:	b2bb      	uxth	r3, r7
 801adfc:	ee08 3a10 	vmov	s16, r3
   for(i = 0; i < sn; i++)
 801ae00:	2d00      	cmp	r5, #0
 801ae02:	d03a      	beq.n	801ae7a <wiz_send_data+0x186>
 801ae04:	f04f 0800 	mov.w	r8, #0
      txbase += getSn_TxMAX(i);
 801ae08:	4b1f      	ldr	r3, [pc, #124]	; (801ae88 <wiz_send_data+0x194>)
   for(i = 0; i < sn; i++)
 801ae0a:	4647      	mov	r7, r8
      txbase += getSn_TxMAX(i);
 801ae0c:	469a      	mov	sl, r3
   uint32_t txbase = _WIZCHIP_IO_TXBUF_;
 801ae0e:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      txbase += getSn_TxMAX(i);
 801ae12:	ee08 1a90 	vmov	s17, r1
 801ae16:	f7ff fe55 	bl	801aac4 <WIZCHIP_READ.constprop.0>
 801ae1a:	2303      	movs	r3, #3
 801ae1c:	007f      	lsls	r7, r7, #1
 801ae1e:	40bb      	lsls	r3, r7
 801ae20:	4003      	ands	r3, r0
 801ae22:	413b      	asrs	r3, r7
 801ae24:	f108 0801 	add.w	r8, r8, #1
 801ae28:	fa4f f888 	sxtb.w	r8, r8
 801ae2c:	fa09 f303 	lsl.w	r3, r9, r3
 801ae30:	ea0a 2383 	and.w	r3, sl, r3, lsl #10
   for(i = 0; i < sn; i++)
 801ae34:	4545      	cmp	r5, r8
 801ae36:	4647      	mov	r7, r8
      txbase += getSn_TxMAX(i);
 801ae38:	441c      	add	r4, r3
   for(i = 0; i < sn; i++)
 801ae3a:	dcec      	bgt.n	801ae16 <wiz_send_data+0x122>
 801ae3c:	ee18 1a90 	vmov	r1, s17
 801ae40:	b2a0      	uxth	r0, r4
    dst_ptr = getSn_TxBASE(sn);
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, size);
 801ae42:	ee18 2a10 	vmov	r2, s16
 801ae46:	f7ff feb1 	bl	801abac <WIZCHIP_WRITE_BUF>
 801ae4a:	e004      	b.n	801ae56 <wiz_send_data+0x162>
 801ae4c:	460a      	mov	r2, r1
  } 
  else
  {
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, len);
 801ae4e:	4620      	mov	r0, r4
 801ae50:	9904      	ldr	r1, [sp, #16]
 801ae52:	f7ff feab 	bl	801abac <WIZCHIP_WRITE_BUF>
  }

  ptr += len;
 801ae56:	9b03      	ldr	r3, [sp, #12]
 801ae58:	9a01      	ldr	r2, [sp, #4]

  setSn_TX_WR(sn, ptr);  
 801ae5a:	4658      	mov	r0, fp
  ptr += len;
 801ae5c:	4413      	add	r3, r2
  setSn_TX_WR(sn, ptr);  
 801ae5e:	f3c3 2107 	ubfx	r1, r3, #8, #8
  ptr += len;
 801ae62:	b29c      	uxth	r4, r3
  setSn_TX_WR(sn, ptr);  
 801ae64:	f7ff fe66 	bl	801ab34 <WIZCHIP_WRITE>
 801ae68:	4630      	mov	r0, r6
 801ae6a:	b2e1      	uxtb	r1, r4
}
 801ae6c:	b007      	add	sp, #28
 801ae6e:	ecbd 8b02 	vpop	{d8}
 801ae72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  setSn_TX_WR(sn, ptr);  
 801ae76:	f7ff be5d 	b.w	801ab34 <WIZCHIP_WRITE>
   for(i = 0; i < sn; i++)
 801ae7a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801ae7e:	e7e0      	b.n	801ae42 <wiz_send_data+0x14e>
 801ae80:	f44f 4480 	mov.w	r4, #16384	; 0x4000
 801ae84:	e789      	b.n	801ad9a <wiz_send_data+0xa6>
 801ae86:	bf00      	nop
 801ae88:	03fffc00 	.word	0x03fffc00

0801ae8c <wiz_recv_data>:
It calculate the actual physical address where one has to read
the data from Receive buffer. Here also take care of the condition while it exceed
the Rx memory uper-bound of socket.
*/
void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 801ae8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae90:	ed2d 8b02 	vpush	{d8}
  uint16_t ptr;
  uint16_t size;
  uint16_t src_mask;
  uint16_t src_ptr;

  ptr = getSn_RX_RD(sn);
 801ae94:	1d06      	adds	r6, r0, #4
 801ae96:	0236      	lsls	r6, r6, #8
 801ae98:	f106 0b28 	add.w	fp, r6, #40	; 0x28
{
 801ae9c:	b087      	sub	sp, #28
 801ae9e:	4605      	mov	r5, r0
  ptr = getSn_RX_RD(sn);
 801aea0:	4658      	mov	r0, fp
{
 801aea2:	9201      	str	r2, [sp, #4]
 801aea4:	9104      	str	r1, [sp, #16]
  ptr = getSn_RX_RD(sn);
 801aea6:	f7ff fe63 	bl	801ab70 <WIZCHIP_READ>
 801aeaa:	3629      	adds	r6, #41	; 0x29
 801aeac:	4604      	mov	r4, r0
 801aeae:	4630      	mov	r0, r6
 801aeb0:	f7ff fe5e 	bl	801ab70 <WIZCHIP_READ>
  
  src_mask = (uint32_t)ptr & getSn_RxMASK(sn);
 801aeb4:	f04f 0901 	mov.w	r9, #1
  ptr = getSn_RX_RD(sn);
 801aeb8:	eb00 2004 	add.w	r0, r0, r4, lsl #8
 801aebc:	b284      	uxth	r4, r0
  src_mask = (uint32_t)ptr & getSn_RxMASK(sn);
 801aebe:	2703      	movs	r7, #3
  ptr = getSn_RX_RD(sn);
 801aec0:	9403      	str	r4, [sp, #12]
  src_mask = (uint32_t)ptr & getSn_RxMASK(sn);
 801aec2:	f7ff fe1b 	bl	801aafc <WIZCHIP_READ.constprop.1>
 801aec6:	fa05 f809 	lsl.w	r8, r5, r9
 801aeca:	fa07 f308 	lsl.w	r3, r7, r8
 801aece:	ea00 0203 	and.w	r2, r0, r3
 801aed2:	fa42 f208 	asr.w	r2, r2, r8
 801aed6:	fa09 f202 	lsl.w	r2, r9, r2
 801aeda:	0292      	lsls	r2, r2, #10
 801aedc:	3a01      	subs	r2, #1
 801aede:	9302      	str	r3, [sp, #8]
 801aee0:	ea04 0a02 	and.w	sl, r4, r2
   for(i = 0; i < sn; i++)
 801aee4:	2d00      	cmp	r5, #0
 801aee6:	f000 8097 	beq.w	801b018 <wiz_recv_data+0x18c>
 801aeea:	2300      	movs	r3, #0
   uint32_t rxbase = _WIZCHIP_IO_RXBUF_;
 801aeec:	f44f 44c0 	mov.w	r4, #24576	; 0x6000
      rxbase += getSn_RxMAX(i);
 801aef0:	ee08 6a10 	vmov	s16, r6
 801aef4:	f8cd 8014 	str.w	r8, [sp, #20]
 801aef8:	461e      	mov	r6, r3
 801aefa:	46a8      	mov	r8, r5
 801aefc:	4625      	mov	r5, r4
 801aefe:	461c      	mov	r4, r3
 801af00:	f7ff fdfc 	bl	801aafc <WIZCHIP_READ.constprop.1>
 801af04:	0072      	lsls	r2, r6, #1
 801af06:	fa07 f102 	lsl.w	r1, r7, r2
 801af0a:	4001      	ands	r1, r0
 801af0c:	4b44      	ldr	r3, [pc, #272]	; (801b020 <wiz_recv_data+0x194>)
 801af0e:	4111      	asrs	r1, r2
 801af10:	3401      	adds	r4, #1
 801af12:	b264      	sxtb	r4, r4
 801af14:	fa09 f101 	lsl.w	r1, r9, r1
 801af18:	ea03 2181 	and.w	r1, r3, r1, lsl #10
   for(i = 0; i < sn; i++)
 801af1c:	45a0      	cmp	r8, r4
 801af1e:	4626      	mov	r6, r4
      rxbase += getSn_RxMAX(i);
 801af20:	440d      	add	r5, r1
   for(i = 0; i < sn; i++)
 801af22:	dced      	bgt.n	801af00 <wiz_recv_data+0x74>
 801af24:	462c      	mov	r4, r5
 801af26:	ee18 6a10 	vmov	r6, s16
 801af2a:	4645      	mov	r5, r8
 801af2c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801af30:	b2a4      	uxth	r4, r4
  src_ptr = (getSn_RxBASE(sn) + src_mask);

  
  if( (src_mask + len) > getSn_RxMAX(sn) ) 
 801af32:	f7ff fde3 	bl	801aafc <WIZCHIP_READ.constprop.1>
 801af36:	f04f 0901 	mov.w	r9, #1
 801af3a:	9b02      	ldr	r3, [sp, #8]
 801af3c:	9901      	ldr	r1, [sp, #4]
 801af3e:	ea00 0203 	and.w	r2, r0, r3
 801af42:	fa42 f208 	asr.w	r2, r2, r8
 801af46:	4b36      	ldr	r3, [pc, #216]	; (801b020 <wiz_recv_data+0x194>)
 801af48:	fa09 f202 	lsl.w	r2, r9, r2
 801af4c:	ea03 2282 	and.w	r2, r3, r2, lsl #10
 801af50:	eb0a 0701 	add.w	r7, sl, r1
  src_ptr = (getSn_RxBASE(sn) + src_mask);
 801af54:	4454      	add	r4, sl
  if( (src_mask + len) > getSn_RxMAX(sn) ) 
 801af56:	4297      	cmp	r7, r2
  src_ptr = (getSn_RxBASE(sn) + src_mask);
 801af58:	b2a4      	uxth	r4, r4
  if( (src_mask + len) > getSn_RxMAX(sn) ) 
 801af5a:	dd43      	ble.n	801afe4 <wiz_recv_data+0x158>
  {
    size = getSn_RxMAX(sn) - src_mask;
 801af5c:	f7ff fdce 	bl	801aafc <WIZCHIP_READ.constprop.1>
 801af60:	9b02      	ldr	r3, [sp, #8]
 801af62:	4018      	ands	r0, r3
 801af64:	fa40 f808 	asr.w	r8, r0, r8
 801af68:	fa09 f808 	lsl.w	r8, r9, r8
 801af6c:	ea4f 2888 	mov.w	r8, r8, lsl #10
 801af70:	fa1f f888 	uxth.w	r8, r8
    WIZCHIP_READ_BUF((uint32_t)src_ptr, (uint8_t*)wizdata, size);
 801af74:	4620      	mov	r0, r4
    size = getSn_RxMAX(sn) - src_mask;
 801af76:	eba8 0a0a 	sub.w	sl, r8, sl
    WIZCHIP_READ_BUF((uint32_t)src_ptr, (uint8_t*)wizdata, size);
 801af7a:	9c04      	ldr	r4, [sp, #16]
    size = getSn_RxMAX(sn) - src_mask;
 801af7c:	fa1f fa8a 	uxth.w	sl, sl
    WIZCHIP_READ_BUF((uint32_t)src_ptr, (uint8_t*)wizdata, size);
 801af80:	4621      	mov	r1, r4
 801af82:	4652      	mov	r2, sl
 801af84:	f7ff fe3a 	bl	801abfc <WIZCHIP_READ_BUF>
    wizdata += size;
 801af88:	4623      	mov	r3, r4
    size = len - size;
 801af8a:	eba7 0708 	sub.w	r7, r7, r8
    wizdata += size;
 801af8e:	4453      	add	r3, sl
 801af90:	4619      	mov	r1, r3
    size = len - size;
 801af92:	b2bb      	uxth	r3, r7
 801af94:	ee08 3a10 	vmov	s16, r3
   for(i = 0; i < sn; i++)
 801af98:	2d00      	cmp	r5, #0
 801af9a:	d03a      	beq.n	801b012 <wiz_recv_data+0x186>
 801af9c:	f04f 0800 	mov.w	r8, #0
      rxbase += getSn_RxMAX(i);
 801afa0:	4b1f      	ldr	r3, [pc, #124]	; (801b020 <wiz_recv_data+0x194>)
   for(i = 0; i < sn; i++)
 801afa2:	4647      	mov	r7, r8
      rxbase += getSn_RxMAX(i);
 801afa4:	469a      	mov	sl, r3
   uint32_t rxbase = _WIZCHIP_IO_RXBUF_;
 801afa6:	f44f 44c0 	mov.w	r4, #24576	; 0x6000
      rxbase += getSn_RxMAX(i);
 801afaa:	ee08 1a90 	vmov	s17, r1
 801afae:	f7ff fda5 	bl	801aafc <WIZCHIP_READ.constprop.1>
 801afb2:	2303      	movs	r3, #3
 801afb4:	007f      	lsls	r7, r7, #1
 801afb6:	40bb      	lsls	r3, r7
 801afb8:	4003      	ands	r3, r0
 801afba:	413b      	asrs	r3, r7
 801afbc:	f108 0801 	add.w	r8, r8, #1
 801afc0:	fa4f f888 	sxtb.w	r8, r8
 801afc4:	fa09 f303 	lsl.w	r3, r9, r3
 801afc8:	ea0a 2383 	and.w	r3, sl, r3, lsl #10
   for(i = 0; i < sn; i++)
 801afcc:	4545      	cmp	r5, r8
 801afce:	4647      	mov	r7, r8
      rxbase += getSn_RxMAX(i);
 801afd0:	441c      	add	r4, r3
   for(i = 0; i < sn; i++)
 801afd2:	dcec      	bgt.n	801afae <wiz_recv_data+0x122>
 801afd4:	ee18 1a90 	vmov	r1, s17
 801afd8:	b2a0      	uxth	r0, r4
	src_ptr = getSn_RxBASE(sn);
    WIZCHIP_READ_BUF(src_ptr, (uint8_t*)wizdata, size);
 801afda:	ee18 2a10 	vmov	r2, s16
 801afde:	f7ff fe0d 	bl	801abfc <WIZCHIP_READ_BUF>
 801afe2:	e004      	b.n	801afee <wiz_recv_data+0x162>
 801afe4:	460a      	mov	r2, r1
  } 
  else
  {
    WIZCHIP_READ_BUF(src_ptr, (uint8_t*)wizdata, len);
 801afe6:	4620      	mov	r0, r4
 801afe8:	9904      	ldr	r1, [sp, #16]
 801afea:	f7ff fe07 	bl	801abfc <WIZCHIP_READ_BUF>
  }
    
  ptr += len;
 801afee:	9b03      	ldr	r3, [sp, #12]
 801aff0:	9a01      	ldr	r2, [sp, #4]
  
  setSn_RX_RD(sn, ptr);
 801aff2:	4658      	mov	r0, fp
  ptr += len;
 801aff4:	4413      	add	r3, r2
  setSn_RX_RD(sn, ptr);
 801aff6:	f3c3 2107 	ubfx	r1, r3, #8, #8
  ptr += len;
 801affa:	b29c      	uxth	r4, r3
  setSn_RX_RD(sn, ptr);
 801affc:	f7ff fd9a 	bl	801ab34 <WIZCHIP_WRITE>
 801b000:	4630      	mov	r0, r6
 801b002:	b2e1      	uxtb	r1, r4
}
 801b004:	b007      	add	sp, #28
 801b006:	ecbd 8b02 	vpop	{d8}
 801b00a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  setSn_RX_RD(sn, ptr);
 801b00e:	f7ff bd91 	b.w	801ab34 <WIZCHIP_WRITE>
   for(i = 0; i < sn; i++)
 801b012:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
 801b016:	e7e0      	b.n	801afda <wiz_recv_data+0x14e>
 801b018:	f44f 44c0 	mov.w	r4, #24576	; 0x6000
 801b01c:	e789      	b.n	801af32 <wiz_recv_data+0xa6>
 801b01e:	bf00      	nop
 801b020:	03fffc00 	.word	0x03fffc00

0801b024 <wiz_recv_ignore>:

void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 801b024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t ptr;

  ptr = getSn_RX_RD(sn);
 801b026:	1d04      	adds	r4, r0, #4
 801b028:	0224      	lsls	r4, r4, #8
 801b02a:	f104 0728 	add.w	r7, r4, #40	; 0x28
 801b02e:	4638      	mov	r0, r7
{
 801b030:	460d      	mov	r5, r1
  ptr = getSn_RX_RD(sn);
 801b032:	f7ff fd9d 	bl	801ab70 <WIZCHIP_READ>
 801b036:	3429      	adds	r4, #41	; 0x29
 801b038:	4606      	mov	r6, r0
 801b03a:	4620      	mov	r0, r4
 801b03c:	f7ff fd98 	bl	801ab70 <WIZCHIP_READ>
  
  ptr += len;
 801b040:	4405      	add	r5, r0
 801b042:	eb05 2106 	add.w	r1, r5, r6, lsl #8
  setSn_RX_RD(sn,ptr);
 801b046:	4638      	mov	r0, r7
  ptr += len;
 801b048:	b28d      	uxth	r5, r1
  setSn_RX_RD(sn,ptr);
 801b04a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801b04e:	f7ff fd71 	bl	801ab34 <WIZCHIP_WRITE>
 801b052:	4620      	mov	r0, r4
 801b054:	b2e9      	uxtb	r1, r5
}
 801b056:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  setSn_RX_RD(sn,ptr);
 801b05a:	f7ff bd6b 	b.w	801ab34 <WIZCHIP_WRITE>
 801b05e:	bf00      	nop

0801b060 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 801b060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	CHECK_SOCKNUM();
 801b064:	2804      	cmp	r0, #4
{
 801b066:	b085      	sub	sp, #20
 801b068:	9200      	str	r2, [sp, #0]
	CHECK_SOCKNUM();
 801b06a:	f200 80c5 	bhi.w	801b1f8 <socket+0x198>
	switch(protocol)
 801b06e:	2901      	cmp	r1, #1
 801b070:	4606      	mov	r6, r0
 801b072:	4689      	mov	r9, r1
 801b074:	461f      	mov	r7, r3
 801b076:	f000 8089 	beq.w	801b18c <socket+0x12c>
 801b07a:	1e8b      	subs	r3, r1, #2
 801b07c:	2b03      	cmp	r3, #3
 801b07e:	f200 80a1 	bhi.w	801b1c4 <socket+0x164>
      default :
         return SOCKERR_SOCKMODE;
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 801b082:	077a      	lsls	r2, r7, #29
 801b084:	f100 80ae 	bmi.w	801b1e4 <socket+0x184>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 801b088:	b157      	cbz	r7, 801b0a0 <socket+0x40>
	{
   	switch(protocol)
 801b08a:	f1b9 0f01 	cmp.w	r9, #1
 801b08e:	f000 809e 	beq.w	801b1ce <socket+0x16e>
 801b092:	f1b9 0f02 	cmp.w	r9, #2
 801b096:	f000 809f 	beq.w	801b1d8 <socket+0x178>
 801b09a:	b27b      	sxtb	r3, r7
 801b09c:	9301      	str	r3, [sp, #4]
 801b09e:	e001      	b.n	801b0a4 <socket+0x44>
 801b0a0:	4639      	mov	r1, r7
 801b0a2:	9101      	str	r1, [sp, #4]
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 801b0a4:	f106 0a04 	add.w	sl, r6, #4
 801b0a8:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 801b0ac:	f10a 0401 	add.w	r4, sl, #1
 801b0b0:	4620      	mov	r0, r4
 801b0b2:	2110      	movs	r1, #16
 801b0b4:	f7ff fd3e 	bl	801ab34 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 801b0b8:	4620      	mov	r0, r4
 801b0ba:	f7ff fd59 	bl	801ab70 <WIZCHIP_READ>
 801b0be:	2800      	cmp	r0, #0
 801b0c0:	d1fa      	bne.n	801b0b8 <socket+0x58>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 801b0c2:	f04f 0801 	mov.w	r8, #1
 801b0c6:	fa08 f806 	lsl.w	r8, r8, r6
 801b0ca:	ea6f 0808 	mvn.w	r8, r8
 801b0ce:	4605      	mov	r5, r0
	setSn_IR(sn, 0xFF);
 801b0d0:	21ff      	movs	r1, #255	; 0xff
 801b0d2:	f10a 0002 	add.w	r0, sl, #2
 801b0d6:	f7ff fd2d 	bl	801ab34 <WIZCHIP_WRITE>
	//
	sock_is_sending &= ~(1<<sn);
 801b0da:	4949      	ldr	r1, [pc, #292]	; (801b200 <socket+0x1a0>)
	sock_io_mode &= ~(1<<sn);
 801b0dc:	fa0f f888 	sxth.w	r8, r8
	sock_is_sending &= ~(1<<sn);
 801b0e0:	880b      	ldrh	r3, [r1, #0]
	sock_io_mode &= ~(1<<sn);
 801b0e2:	f8df b12c 	ldr.w	fp, [pc, #300]	; 801b210 <socket+0x1b0>
	sock_is_sending &= ~(1<<sn);
 801b0e6:	ea08 0303 	and.w	r3, r8, r3
 801b0ea:	800b      	strh	r3, [r1, #0]
	sock_remained_size[sn] = 0;
 801b0ec:	4b45      	ldr	r3, [pc, #276]	; (801b204 <socket+0x1a4>)
	sock_io_mode &= ~(1<<sn);
 801b0ee:	f8bb 2000 	ldrh.w	r2, [fp]
	sock_remained_size[sn] = 0;
 801b0f2:	f823 5016 	strh.w	r5, [r3, r6, lsl #1]
	sock_pack_info[sn] = 0;
 801b0f6:	4b44      	ldr	r3, [pc, #272]	; (801b208 <socket+0x1a8>)
	sock_io_mode &= ~(1<<sn);
 801b0f8:	ea08 0202 	and.w	r2, r8, r2
	sock_pack_info[sn] = 0;
 801b0fc:	559d      	strb	r5, [r3, r6]
	sock_io_mode &= ~(1<<sn);
 801b0fe:	f8ab 2000 	strh.w	r2, [fp]
	while(getSn_SR(sn) != SOCK_CLOSED);
 801b102:	f10a 0503 	add.w	r5, sl, #3
 801b106:	4628      	mov	r0, r5
 801b108:	f7ff fd32 	bl	801ab70 <WIZCHIP_READ>
 801b10c:	2800      	cmp	r0, #0
 801b10e:	d1fa      	bne.n	801b106 <socket+0xa6>
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 801b110:	9b01      	ldr	r3, [sp, #4]
 801b112:	4650      	mov	r0, sl
 801b114:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 801b118:	ea41 0109 	orr.w	r1, r1, r9
 801b11c:	f7ff fd0a 	bl	801ab34 <WIZCHIP_WRITE>
	if(!port)
 801b120:	9b00      	ldr	r3, [sp, #0]
 801b122:	2b00      	cmp	r3, #0
 801b124:	d03e      	beq.n	801b1a4 <socket+0x144>
 801b126:	0a19      	lsrs	r1, r3, #8
 801b128:	fa5f f983 	uxtb.w	r9, r3
   setSn_PORT(sn,port);	
 801b12c:	f10a 0004 	add.w	r0, sl, #4
 801b130:	f7ff fd00 	bl	801ab34 <WIZCHIP_WRITE>
 801b134:	4649      	mov	r1, r9
 801b136:	f10a 0005 	add.w	r0, sl, #5
 801b13a:	f7ff fcfb 	bl	801ab34 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 801b13e:	2101      	movs	r1, #1
 801b140:	4620      	mov	r0, r4
 801b142:	f7ff fcf7 	bl	801ab34 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 801b146:	4620      	mov	r0, r4
 801b148:	f7ff fd12 	bl	801ab70 <WIZCHIP_READ>
 801b14c:	2800      	cmp	r0, #0
 801b14e:	d1fa      	bne.n	801b146 <socket+0xe6>
   sock_io_mode &= ~(1 <<sn);
 801b150:	f8bb 3000 	ldrh.w	r3, [fp]
   sock_is_sending &= ~(1<<sn);
 801b154:	4a2a      	ldr	r2, [pc, #168]	; (801b200 <socket+0x1a0>)
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 801b156:	f007 0701 	and.w	r7, r7, #1
   sock_io_mode &= ~(1 <<sn);
 801b15a:	ea08 0303 	and.w	r3, r8, r3
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 801b15e:	40b7      	lsls	r7, r6
 801b160:	431f      	orrs	r7, r3
   sock_is_sending &= ~(1<<sn);
 801b162:	8813      	ldrh	r3, [r2, #0]
   sock_remained_size[sn] = 0;
 801b164:	4927      	ldr	r1, [pc, #156]	; (801b204 <socket+0x1a4>)
   sock_is_sending &= ~(1<<sn);
 801b166:	ea08 0803 	and.w	r8, r8, r3
   sock_pack_info[sn] = PACK_COMPLETED;
 801b16a:	4b27      	ldr	r3, [pc, #156]	; (801b208 <socket+0x1a8>)
   sock_remained_size[sn] = 0;
 801b16c:	f821 0016 	strh.w	r0, [r1, r6, lsl #1]
   sock_pack_info[sn] = PACK_COMPLETED;
 801b170:	5598      	strb	r0, [r3, r6]
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 801b172:	f8ab 7000 	strh.w	r7, [fp]
   sock_is_sending &= ~(1<<sn);
 801b176:	f8a2 8000 	strh.w	r8, [r2]
   while(getSn_SR(sn) == SOCK_CLOSED);
 801b17a:	4628      	mov	r0, r5
 801b17c:	f7ff fcf8 	bl	801ab70 <WIZCHIP_READ>
 801b180:	2800      	cmp	r0, #0
 801b182:	d0fa      	beq.n	801b17a <socket+0x11a>
   return (int8_t)sn;
 801b184:	b270      	sxtb	r0, r6
}	   
 801b186:	b005      	add	sp, #20
 801b188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            getSIPR((uint8_t*)&taddr);
 801b18c:	200f      	movs	r0, #15
 801b18e:	2204      	movs	r2, #4
 801b190:	a903      	add	r1, sp, #12
 801b192:	f7ff fd33 	bl	801abfc <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 801b196:	9b03      	ldr	r3, [sp, #12]
 801b198:	f06f 0002 	mvn.w	r0, #2
 801b19c:	2b00      	cmp	r3, #0
 801b19e:	f47f af70 	bne.w	801b082 <socket+0x22>
 801b1a2:	e7f0      	b.n	801b186 <socket+0x126>
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 801b1a4:	f64f 71f0 	movw	r1, #65520	; 0xfff0
	   port = sock_any_port++;
 801b1a8:	4a18      	ldr	r2, [pc, #96]	; (801b20c <socket+0x1ac>)
 801b1aa:	f8b2 9000 	ldrh.w	r9, [r2]
 801b1ae:	f109 0301 	add.w	r3, r9, #1
 801b1b2:	b29b      	uxth	r3, r3
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 801b1b4:	428b      	cmp	r3, r1
 801b1b6:	d018      	beq.n	801b1ea <socket+0x18a>
 801b1b8:	ea4f 2119 	mov.w	r1, r9, lsr #8
	   port = sock_any_port++;
 801b1bc:	8013      	strh	r3, [r2, #0]
 801b1be:	fa5f f989 	uxtb.w	r9, r9
 801b1c2:	e7b3      	b.n	801b12c <socket+0xcc>
	switch(protocol)
 801b1c4:	f06f 0004 	mvn.w	r0, #4
}	   
 801b1c8:	b005      	add	sp, #20
 801b1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 801b1ce:	f017 0f21 	tst.w	r7, #33	; 0x21
 801b1d2:	d007      	beq.n	801b1e4 <socket+0x184>
 801b1d4:	b279      	sxtb	r1, r7
 801b1d6:	e764      	b.n	801b0a2 <socket+0x42>
   	      if(flag & SF_IGMP_VER2)
 801b1d8:	06bb      	lsls	r3, r7, #26
 801b1da:	d5fb      	bpl.n	801b1d4 <socket+0x174>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 801b1dc:	b279      	sxtb	r1, r7
 801b1de:	2900      	cmp	r1, #0
 801b1e0:	f6ff af5f 	blt.w	801b0a2 <socket+0x42>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 801b1e4:	f06f 0005 	mvn.w	r0, #5
 801b1e8:	e7cd      	b.n	801b186 <socket+0x126>
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 801b1ea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 801b1ee:	f04f 09ef 	mov.w	r9, #239	; 0xef
 801b1f2:	21ff      	movs	r1, #255	; 0xff
 801b1f4:	8013      	strh	r3, [r2, #0]
 801b1f6:	e799      	b.n	801b12c <socket+0xcc>
	CHECK_SOCKNUM();
 801b1f8:	f04f 30ff 	mov.w	r0, #4294967295
 801b1fc:	e7c3      	b.n	801b186 <socket+0x126>
 801b1fe:	bf00      	nop
 801b200:	2001996a 	.word	0x2001996a
 801b204:	20019970 	.word	0x20019970
 801b208:	2001996c 	.word	0x2001996c
 801b20c:	20018238 	.word	0x20018238
 801b210:	20019968 	.word	0x20019968

0801b214 <close>:
	CHECK_SOCKNUM();
 801b214:	2804      	cmp	r0, #4
 801b216:	d902      	bls.n	801b21e <close+0xa>
 801b218:	f04f 30ff 	mov.w	r0, #4294967295
	return SOCK_OK;
}
 801b21c:	4770      	bx	lr
{
 801b21e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	setSn_CR(sn,Sn_CR_CLOSE);
 801b220:	1d05      	adds	r5, r0, #4
 801b222:	022d      	lsls	r5, r5, #8
 801b224:	1c6f      	adds	r7, r5, #1
 801b226:	4606      	mov	r6, r0
 801b228:	2110      	movs	r1, #16
 801b22a:	4638      	mov	r0, r7
 801b22c:	f7ff fc82 	bl	801ab34 <WIZCHIP_WRITE>
	while( getSn_CR(sn) );
 801b230:	4638      	mov	r0, r7
 801b232:	f7ff fc9d 	bl	801ab70 <WIZCHIP_READ>
 801b236:	4604      	mov	r4, r0
 801b238:	2800      	cmp	r0, #0
 801b23a:	d1f9      	bne.n	801b230 <close+0x1c>
	setSn_IR(sn, 0xFF);
 801b23c:	1ca8      	adds	r0, r5, #2
 801b23e:	21ff      	movs	r1, #255	; 0xff
 801b240:	f7ff fc78 	bl	801ab34 <WIZCHIP_WRITE>
	sock_io_mode &= ~(1<<sn);
 801b244:	2301      	movs	r3, #1
 801b246:	40b3      	lsls	r3, r6
 801b248:	43db      	mvns	r3, r3
 801b24a:	480b      	ldr	r0, [pc, #44]	; (801b278 <close+0x64>)
	sock_is_sending &= ~(1<<sn);
 801b24c:	490b      	ldr	r1, [pc, #44]	; (801b27c <close+0x68>)
	sock_io_mode &= ~(1<<sn);
 801b24e:	8802      	ldrh	r2, [r0, #0]
 801b250:	b21b      	sxth	r3, r3
 801b252:	401a      	ands	r2, r3
	sock_is_sending &= ~(1<<sn);
 801b254:	880f      	ldrh	r7, [r1, #0]
	sock_io_mode &= ~(1<<sn);
 801b256:	8002      	strh	r2, [r0, #0]
	sock_remained_size[sn] = 0;
 801b258:	4809      	ldr	r0, [pc, #36]	; (801b280 <close+0x6c>)
	sock_pack_info[sn] = 0;
 801b25a:	4a0a      	ldr	r2, [pc, #40]	; (801b284 <close+0x70>)
	sock_is_sending &= ~(1<<sn);
 801b25c:	403b      	ands	r3, r7
 801b25e:	3503      	adds	r5, #3
 801b260:	800b      	strh	r3, [r1, #0]
	sock_remained_size[sn] = 0;
 801b262:	f820 4016 	strh.w	r4, [r0, r6, lsl #1]
	sock_pack_info[sn] = 0;
 801b266:	5594      	strb	r4, [r2, r6]
	while(getSn_SR(sn) != SOCK_CLOSED);
 801b268:	4628      	mov	r0, r5
 801b26a:	f7ff fc81 	bl	801ab70 <WIZCHIP_READ>
 801b26e:	2800      	cmp	r0, #0
 801b270:	d1fa      	bne.n	801b268 <close+0x54>
 801b272:	2001      	movs	r0, #1
}
 801b274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b276:	bf00      	nop
 801b278:	20019968 	.word	0x20019968
 801b27c:	2001996a 	.word	0x2001996a
 801b280:	20019970 	.word	0x20019970
 801b284:	2001996c 	.word	0x2001996c

0801b288 <listen>:

int8_t listen(uint8_t sn)
{
	CHECK_SOCKNUM();
 801b288:	2804      	cmp	r0, #4
 801b28a:	d829      	bhi.n	801b2e0 <listen+0x58>
{
 801b28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   CHECK_SOCKMODE(Sn_MR_TCP);
 801b290:	1d05      	adds	r5, r0, #4
 801b292:	022d      	lsls	r5, r5, #8
 801b294:	4607      	mov	r7, r0
 801b296:	4628      	mov	r0, r5
 801b298:	f7ff fc6a 	bl	801ab70 <WIZCHIP_READ>
 801b29c:	f000 030f 	and.w	r3, r0, #15
 801b2a0:	2b01      	cmp	r3, #1
 801b2a2:	d117      	bne.n	801b2d4 <listen+0x4c>
	CHECK_SOCKINIT();
 801b2a4:	1cee      	adds	r6, r5, #3
 801b2a6:	4630      	mov	r0, r6
 801b2a8:	f7ff fc62 	bl	801ab70 <WIZCHIP_READ>
 801b2ac:	2813      	cmp	r0, #19
 801b2ae:	d114      	bne.n	801b2da <listen+0x52>
	setSn_CR(sn,Sn_CR_LISTEN);
 801b2b0:	1c6c      	adds	r4, r5, #1
 801b2b2:	4620      	mov	r0, r4
 801b2b4:	2102      	movs	r1, #2
 801b2b6:	f7ff fc3d 	bl	801ab34 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 801b2ba:	4620      	mov	r0, r4
 801b2bc:	f7ff fc58 	bl	801ab70 <WIZCHIP_READ>
 801b2c0:	2800      	cmp	r0, #0
 801b2c2:	d1fa      	bne.n	801b2ba <listen+0x32>
   while(getSn_SR(sn) != SOCK_LISTEN)
 801b2c4:	4630      	mov	r0, r6
 801b2c6:	f7ff fc53 	bl	801ab70 <WIZCHIP_READ>
 801b2ca:	2814      	cmp	r0, #20
 801b2cc:	d10b      	bne.n	801b2e6 <listen+0x5e>
   {
         close(sn);
         return SOCKERR_SOCKCLOSED;
   }
   return SOCK_OK;
 801b2ce:	2001      	movs	r0, #1
}
 801b2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   CHECK_SOCKMODE(Sn_MR_TCP);
 801b2d4:	f06f 0004 	mvn.w	r0, #4
 801b2d8:	e7fa      	b.n	801b2d0 <listen+0x48>
	CHECK_SOCKINIT();
 801b2da:	f06f 0002 	mvn.w	r0, #2
 801b2de:	e7f7      	b.n	801b2d0 <listen+0x48>
	CHECK_SOCKNUM();
 801b2e0:	f04f 30ff 	mov.w	r0, #4294967295
}
 801b2e4:	4770      	bx	lr
	setSn_CR(sn,Sn_CR_CLOSE);
 801b2e6:	2110      	movs	r1, #16
 801b2e8:	4620      	mov	r0, r4
 801b2ea:	f7ff fc23 	bl	801ab34 <WIZCHIP_WRITE>
	while( getSn_CR(sn) );
 801b2ee:	4620      	mov	r0, r4
 801b2f0:	f7ff fc3e 	bl	801ab70 <WIZCHIP_READ>
 801b2f4:	4680      	mov	r8, r0
 801b2f6:	2800      	cmp	r0, #0
 801b2f8:	d1f9      	bne.n	801b2ee <listen+0x66>
	setSn_IR(sn, 0xFF);
 801b2fa:	21ff      	movs	r1, #255	; 0xff
 801b2fc:	1ca8      	adds	r0, r5, #2
 801b2fe:	f7ff fc19 	bl	801ab34 <WIZCHIP_WRITE>
	sock_io_mode &= ~(1<<sn);
 801b302:	2301      	movs	r3, #1
 801b304:	40bb      	lsls	r3, r7
 801b306:	43db      	mvns	r3, r3
 801b308:	480b      	ldr	r0, [pc, #44]	; (801b338 <listen+0xb0>)
	sock_is_sending &= ~(1<<sn);
 801b30a:	490c      	ldr	r1, [pc, #48]	; (801b33c <listen+0xb4>)
	sock_io_mode &= ~(1<<sn);
 801b30c:	8802      	ldrh	r2, [r0, #0]
 801b30e:	b21b      	sxth	r3, r3
 801b310:	401a      	ands	r2, r3
	sock_is_sending &= ~(1<<sn);
 801b312:	880c      	ldrh	r4, [r1, #0]
	sock_io_mode &= ~(1<<sn);
 801b314:	8002      	strh	r2, [r0, #0]
	sock_remained_size[sn] = 0;
 801b316:	480a      	ldr	r0, [pc, #40]	; (801b340 <listen+0xb8>)
	sock_pack_info[sn] = 0;
 801b318:	4a0a      	ldr	r2, [pc, #40]	; (801b344 <listen+0xbc>)
	sock_is_sending &= ~(1<<sn);
 801b31a:	4023      	ands	r3, r4
 801b31c:	800b      	strh	r3, [r1, #0]
	sock_remained_size[sn] = 0;
 801b31e:	f820 8017 	strh.w	r8, [r0, r7, lsl #1]
	sock_pack_info[sn] = 0;
 801b322:	f802 8007 	strb.w	r8, [r2, r7]
	while(getSn_SR(sn) != SOCK_CLOSED);
 801b326:	4630      	mov	r0, r6
 801b328:	f7ff fc22 	bl	801ab70 <WIZCHIP_READ>
 801b32c:	2800      	cmp	r0, #0
 801b32e:	d1fa      	bne.n	801b326 <listen+0x9e>
         return SOCKERR_SOCKCLOSED;
 801b330:	f06f 0003 	mvn.w	r0, #3
 801b334:	e7cc      	b.n	801b2d0 <listen+0x48>
 801b336:	bf00      	nop
 801b338:	20019968 	.word	0x20019968
 801b33c:	2001996a 	.word	0x2001996a
 801b340:	20019970 	.word	0x20019970
 801b344:	2001996c 	.word	0x2001996c

0801b348 <connect>:


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
   CHECK_SOCKNUM();
 801b348:	2804      	cmp	r0, #4
 801b34a:	d867      	bhi.n	801b41c <connect+0xd4>
{
 801b34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   CHECK_SOCKMODE(Sn_MR_TCP);
 801b350:	1d04      	adds	r4, r0, #4
 801b352:	0224      	lsls	r4, r4, #8
 801b354:	4607      	mov	r7, r0
 801b356:	4620      	mov	r0, r4
 801b358:	460e      	mov	r6, r1
 801b35a:	4690      	mov	r8, r2
 801b35c:	f7ff fc08 	bl	801ab70 <WIZCHIP_READ>
 801b360:	f000 000f 	and.w	r0, r0, #15
 801b364:	2801      	cmp	r0, #1
 801b366:	d156      	bne.n	801b416 <connect+0xce>
   CHECK_SOCKINIT();
 801b368:	1ce5      	adds	r5, r4, #3
 801b36a:	4628      	mov	r0, r5
 801b36c:	f7ff fc00 	bl	801ab70 <WIZCHIP_READ>
 801b370:	2813      	cmp	r0, #19
 801b372:	d159      	bne.n	801b428 <connect+0xe0>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 801b374:	7833      	ldrb	r3, [r6, #0]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 801b376:	7871      	ldrb	r1, [r6, #1]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 801b378:	78b2      	ldrb	r2, [r6, #2]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 801b37a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 801b37e:	78f3      	ldrb	r3, [r6, #3]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 801b380:	eb02 2201 	add.w	r2, r2, r1, lsl #8
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 801b384:	3b01      	subs	r3, #1
 801b386:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801b38a:	3303      	adds	r3, #3
 801b38c:	d84f      	bhi.n	801b42e <connect+0xe6>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 801b38e:	f1b8 0f00 	cmp.w	r8, #0
 801b392:	d046      	beq.n	801b422 <connect+0xda>
	setSn_DIPR(sn,addr);
 801b394:	4631      	mov	r1, r6
 801b396:	2204      	movs	r2, #4
 801b398:	f104 000c 	add.w	r0, r4, #12
 801b39c:	f7ff fc06 	bl	801abac <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 801b3a0:	ea4f 2118 	mov.w	r1, r8, lsr #8
 801b3a4:	f104 0010 	add.w	r0, r4, #16
 801b3a8:	f7ff fbc4 	bl	801ab34 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 801b3ac:	1c66      	adds	r6, r4, #1
	setSn_DPORT(sn,port);
 801b3ae:	fa5f f188 	uxtb.w	r1, r8
 801b3b2:	f104 0011 	add.w	r0, r4, #17
 801b3b6:	f7ff fbbd 	bl	801ab34 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 801b3ba:	4630      	mov	r0, r6
 801b3bc:	2104      	movs	r1, #4
 801b3be:	f7ff fbb9 	bl	801ab34 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 801b3c2:	4630      	mov	r0, r6
 801b3c4:	f7ff fbd4 	bl	801ab70 <WIZCHIP_READ>
 801b3c8:	2800      	cmp	r0, #0
 801b3ca:	d1fa      	bne.n	801b3c2 <connect+0x7a>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 801b3cc:	4b19      	ldr	r3, [pc, #100]	; (801b434 <connect+0xec>)
 801b3ce:	881b      	ldrh	r3, [r3, #0]
 801b3d0:	fa43 f707 	asr.w	r7, r3, r7
 801b3d4:	07fa      	lsls	r2, r7, #31
 801b3d6:	d410      	bmi.n	801b3fa <connect+0xb2>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 801b3d8:	3402      	adds	r4, #2
 801b3da:	e008      	b.n	801b3ee <connect+0xa6>
 801b3dc:	4620      	mov	r0, r4
 801b3de:	f7ff fbc7 	bl	801ab70 <WIZCHIP_READ>
 801b3e2:	0703      	lsls	r3, r0, #28
 801b3e4:	d40b      	bmi.n	801b3fe <connect+0xb6>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
            return SOCKERR_TIMEOUT;
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 801b3e6:	4628      	mov	r0, r5
 801b3e8:	f7ff fbc2 	bl	801ab70 <WIZCHIP_READ>
 801b3ec:	b178      	cbz	r0, 801b40e <connect+0xc6>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 801b3ee:	4628      	mov	r0, r5
 801b3f0:	f7ff fbbe 	bl	801ab70 <WIZCHIP_READ>
 801b3f4:	2817      	cmp	r0, #23
 801b3f6:	d1f1      	bne.n	801b3dc <connect+0x94>
		{
			return SOCKERR_SOCKCLOSED;
		}
	}
   
   return SOCK_OK;
 801b3f8:	2001      	movs	r0, #1
}
 801b3fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			setSn_IR(sn, Sn_IR_TIMEOUT);
 801b3fe:	4620      	mov	r0, r4
 801b400:	2108      	movs	r1, #8
 801b402:	f7ff fb97 	bl	801ab34 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 801b406:	f06f 000c 	mvn.w	r0, #12
}
 801b40a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return SOCKERR_SOCKCLOSED;
 801b40e:	f06f 0003 	mvn.w	r0, #3
}
 801b412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   CHECK_SOCKMODE(Sn_MR_TCP);
 801b416:	f06f 0004 	mvn.w	r0, #4
 801b41a:	e7ee      	b.n	801b3fa <connect+0xb2>
   CHECK_SOCKNUM();
 801b41c:	f04f 30ff 	mov.w	r0, #4294967295
}
 801b420:	4770      	bx	lr
	if(port == 0) return SOCKERR_PORTZERO;
 801b422:	f06f 000a 	mvn.w	r0, #10
 801b426:	e7e8      	b.n	801b3fa <connect+0xb2>
   CHECK_SOCKINIT();
 801b428:	f06f 0002 	mvn.w	r0, #2
 801b42c:	e7e5      	b.n	801b3fa <connect+0xb2>
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 801b42e:	f06f 000b 	mvn.w	r0, #11
 801b432:	e7e2      	b.n	801b3fa <connect+0xb2>
 801b434:	20019968 	.word	0x20019968

0801b438 <disconnect>:

int8_t disconnect(uint8_t sn)
{
   CHECK_SOCKNUM();
 801b438:	2804      	cmp	r0, #4
 801b43a:	d862      	bhi.n	801b502 <disconnect+0xca>
{
 801b43c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   CHECK_SOCKMODE(Sn_MR_TCP);
 801b440:	1d05      	adds	r5, r0, #4
 801b442:	022d      	lsls	r5, r5, #8
 801b444:	4607      	mov	r7, r0
 801b446:	4628      	mov	r0, r5
 801b448:	f7ff fb92 	bl	801ab70 <WIZCHIP_READ>
 801b44c:	f000 000f 	and.w	r0, r0, #15
 801b450:	2801      	cmp	r0, #1
 801b452:	d153      	bne.n	801b4fc <disconnect+0xc4>
	setSn_CR(sn,Sn_CR_DISCON);
 801b454:	1c6c      	adds	r4, r5, #1
 801b456:	4620      	mov	r0, r4
 801b458:	2108      	movs	r1, #8
 801b45a:	f7ff fb6b 	bl	801ab34 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 801b45e:	4620      	mov	r0, r4
 801b460:	f7ff fb86 	bl	801ab70 <WIZCHIP_READ>
 801b464:	2800      	cmp	r0, #0
 801b466:	d1fa      	bne.n	801b45e <disconnect+0x26>
	sock_is_sending &= ~(1<<sn);
 801b468:	2601      	movs	r6, #1
 801b46a:	40be      	lsls	r6, r7
 801b46c:	43f6      	mvns	r6, r6
 801b46e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 801b510 <disconnect+0xd8>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 801b472:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 801b514 <disconnect+0xdc>
	sock_is_sending &= ~(1<<sn);
 801b476:	f8b8 2000 	ldrh.w	r2, [r8]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 801b47a:	f8b9 3000 	ldrh.w	r3, [r9]
	sock_is_sending &= ~(1<<sn);
 801b47e:	b236      	sxth	r6, r6
 801b480:	4032      	ands	r2, r6
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 801b482:	413b      	asrs	r3, r7
	sock_is_sending &= ~(1<<sn);
 801b484:	f8a8 2000 	strh.w	r2, [r8]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 801b488:	07da      	lsls	r2, r3, #31
 801b48a:	d40e      	bmi.n	801b4aa <disconnect+0x72>
 801b48c:	f105 0a03 	add.w	sl, r5, #3
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 801b490:	3502      	adds	r5, #2
 801b492:	e004      	b.n	801b49e <disconnect+0x66>
 801b494:	4628      	mov	r0, r5
 801b496:	f7ff fb6b 	bl	801ab70 <WIZCHIP_READ>
 801b49a:	0703      	lsls	r3, r0, #28
 801b49c:	d407      	bmi.n	801b4ae <disconnect+0x76>
	while(getSn_SR(sn) != SOCK_CLOSED)
 801b49e:	4650      	mov	r0, sl
 801b4a0:	f7ff fb66 	bl	801ab70 <WIZCHIP_READ>
 801b4a4:	2800      	cmp	r0, #0
 801b4a6:	d1f5      	bne.n	801b494 <disconnect+0x5c>
	   {
	      close(sn);
	      return SOCKERR_TIMEOUT;
	   }
	}
	return SOCK_OK;
 801b4a8:	2001      	movs	r0, #1
}
 801b4aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	setSn_CR(sn,Sn_CR_CLOSE);
 801b4ae:	2110      	movs	r1, #16
 801b4b0:	4620      	mov	r0, r4
 801b4b2:	f7ff fb3f 	bl	801ab34 <WIZCHIP_WRITE>
	while( getSn_CR(sn) );
 801b4b6:	4620      	mov	r0, r4
 801b4b8:	f7ff fb5a 	bl	801ab70 <WIZCHIP_READ>
 801b4bc:	4683      	mov	fp, r0
 801b4be:	2800      	cmp	r0, #0
 801b4c0:	d1f9      	bne.n	801b4b6 <disconnect+0x7e>
	setSn_IR(sn, 0xFF);
 801b4c2:	21ff      	movs	r1, #255	; 0xff
 801b4c4:	4628      	mov	r0, r5
 801b4c6:	f7ff fb35 	bl	801ab34 <WIZCHIP_WRITE>
	sock_is_sending &= ~(1<<sn);
 801b4ca:	f8b8 3000 	ldrh.w	r3, [r8]
	sock_io_mode &= ~(1<<sn);
 801b4ce:	f8b9 2000 	ldrh.w	r2, [r9]
	sock_remained_size[sn] = 0;
 801b4d2:	490d      	ldr	r1, [pc, #52]	; (801b508 <disconnect+0xd0>)
	sock_io_mode &= ~(1<<sn);
 801b4d4:	4032      	ands	r2, r6
	sock_is_sending &= ~(1<<sn);
 801b4d6:	401e      	ands	r6, r3
	sock_pack_info[sn] = 0;
 801b4d8:	4b0c      	ldr	r3, [pc, #48]	; (801b50c <disconnect+0xd4>)
	sock_io_mode &= ~(1<<sn);
 801b4da:	f8a9 2000 	strh.w	r2, [r9]
	sock_is_sending &= ~(1<<sn);
 801b4de:	f8a8 6000 	strh.w	r6, [r8]
	sock_remained_size[sn] = 0;
 801b4e2:	f821 b017 	strh.w	fp, [r1, r7, lsl #1]
	sock_pack_info[sn] = 0;
 801b4e6:	f803 b007 	strb.w	fp, [r3, r7]
	while(getSn_SR(sn) != SOCK_CLOSED);
 801b4ea:	4650      	mov	r0, sl
 801b4ec:	f7ff fb40 	bl	801ab70 <WIZCHIP_READ>
 801b4f0:	2800      	cmp	r0, #0
 801b4f2:	d1fa      	bne.n	801b4ea <disconnect+0xb2>
	      return SOCKERR_TIMEOUT;
 801b4f4:	f06f 000c 	mvn.w	r0, #12
}
 801b4f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   CHECK_SOCKMODE(Sn_MR_TCP);
 801b4fc:	f06f 0004 	mvn.w	r0, #4
 801b500:	e7d3      	b.n	801b4aa <disconnect+0x72>
   CHECK_SOCKNUM();
 801b502:	f04f 30ff 	mov.w	r0, #4294967295
}
 801b506:	4770      	bx	lr
 801b508:	20019970 	.word	0x20019970
 801b50c:	2001996c 	.word	0x2001996c
 801b510:	2001996a 	.word	0x2001996a
 801b514:	20019968 	.word	0x20019968

0801b518 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 801b518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
 801b51c:	2804      	cmp	r0, #4
{
 801b51e:	b083      	sub	sp, #12
 801b520:	9101      	str	r1, [sp, #4]
   CHECK_SOCKNUM();
 801b522:	f200 80a9 	bhi.w	801b678 <send+0x160>
   CHECK_SOCKMODE(Sn_MR_TCP);
 801b526:	f100 0804 	add.w	r8, r0, #4
 801b52a:	ea4f 2808 	mov.w	r8, r8, lsl #8
 801b52e:	4605      	mov	r5, r0
 801b530:	4640      	mov	r0, r8
 801b532:	4614      	mov	r4, r2
 801b534:	f7ff fb1c 	bl	801ab70 <WIZCHIP_READ>
 801b538:	f000 000f 	and.w	r0, r0, #15
 801b53c:	2801      	cmp	r0, #1
 801b53e:	f040 80a1 	bne.w	801b684 <send+0x16c>
   CHECK_SOCKDATA();
 801b542:	2c00      	cmp	r4, #0
 801b544:	f000 809b 	beq.w	801b67e <send+0x166>
   tmp = getSn_SR(sn);
 801b548:	f108 0703 	add.w	r7, r8, #3
 801b54c:	4638      	mov	r0, r7
 801b54e:	f7ff fb0f 	bl	801ab70 <WIZCHIP_READ>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 801b552:	2817      	cmp	r0, #23
 801b554:	d001      	beq.n	801b55a <send+0x42>
 801b556:	281c      	cmp	r0, #28
 801b558:	d17c      	bne.n	801b654 <send+0x13c>
   if( sock_is_sending & (1<<sn) )
 801b55a:	f8df b190 	ldr.w	fp, [pc, #400]	; 801b6ec <send+0x1d4>
 801b55e:	f8bb 3000 	ldrh.w	r3, [fp]
 801b562:	412b      	asrs	r3, r5
 801b564:	07d9      	lsls	r1, r3, #31
 801b566:	d43e      	bmi.n	801b5e6 <send+0xce>
 801b568:	2601      	movs	r6, #1
 801b56a:	40ae      	lsls	r6, r5
         close(sn);
         return SOCKERR_TIMEOUT;
      }
      else return SOCK_BUSY;
   }
   freesize = getSn_TxMAX(sn);
 801b56c:	201b      	movs	r0, #27
 801b56e:	f7ff faff 	bl	801ab70 <WIZCHIP_READ>
 801b572:	2303      	movs	r3, #3
 801b574:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801b578:	0069      	lsls	r1, r5, #1
 801b57a:	408b      	lsls	r3, r1
 801b57c:	4018      	ands	r0, r3
 801b57e:	fa40 f301 	asr.w	r3, r0, r1
 801b582:	fa02 f303 	lsl.w	r3, r2, r3
 801b586:	b298      	uxth	r0, r3
 801b588:	4284      	cmp	r4, r0
 801b58a:	bf28      	it	cs
 801b58c:	4604      	movcs	r4, r0
 801b58e:	f8df 9158 	ldr.w	r9, [pc, #344]	; 801b6e8 <send+0x1d0>
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 801b592:	4628      	mov	r0, r5
 801b594:	f7ff fb5a 	bl	801ac4c <getSn_TX_FSR>
 801b598:	4682      	mov	sl, r0
      tmp = getSn_SR(sn);
 801b59a:	4638      	mov	r0, r7
 801b59c:	f7ff fae8 	bl	801ab70 <WIZCHIP_READ>
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 801b5a0:	2817      	cmp	r0, #23
 801b5a2:	d001      	beq.n	801b5a8 <send+0x90>
 801b5a4:	281c      	cmp	r0, #28
 801b5a6:	d12e      	bne.n	801b606 <send+0xee>
      {
         close(sn);
         return SOCKERR_SOCKSTATUS;
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 801b5a8:	f8b9 2000 	ldrh.w	r2, [r9]
 801b5ac:	4232      	tst	r2, r6
 801b5ae:	d027      	beq.n	801b600 <send+0xe8>
 801b5b0:	4554      	cmp	r4, sl
 801b5b2:	d821      	bhi.n	801b5f8 <send+0xe0>
      if(len <= freesize) break;
   }
   wiz_send_data(sn, buf, len);
 801b5b4:	4628      	mov	r0, r5
 801b5b6:	9901      	ldr	r1, [sp, #4]
 801b5b8:	4622      	mov	r2, r4

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 801b5ba:	f108 0801 	add.w	r8, r8, #1
   wiz_send_data(sn, buf, len);
 801b5be:	f7ff fb99 	bl	801acf4 <wiz_send_data>
   setSn_CR(sn,Sn_CR_SEND);
 801b5c2:	4640      	mov	r0, r8
 801b5c4:	2120      	movs	r1, #32
 801b5c6:	f7ff fab5 	bl	801ab34 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 801b5ca:	4640      	mov	r0, r8
 801b5cc:	f7ff fad0 	bl	801ab70 <WIZCHIP_READ>
 801b5d0:	2800      	cmp	r0, #0
 801b5d2:	d1fa      	bne.n	801b5ca <send+0xb2>
   sock_is_sending |= (1 << sn);
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 801b5d4:	4620      	mov	r0, r4
   sock_is_sending |= (1 << sn);
 801b5d6:	f8bb 3000 	ldrh.w	r3, [fp]
 801b5da:	431e      	orrs	r6, r3
 801b5dc:	f8ab 6000 	strh.w	r6, [fp]
}
 801b5e0:	b003      	add	sp, #12
 801b5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      tmp = getSn_IR(sn);
 801b5e6:	f108 0602 	add.w	r6, r8, #2
 801b5ea:	4630      	mov	r0, r6
 801b5ec:	f7ff fac0 	bl	801ab70 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
 801b5f0:	06c2      	lsls	r2, r0, #27
 801b5f2:	d434      	bmi.n	801b65e <send+0x146>
      else if(tmp & Sn_IR_TIMEOUT)
 801b5f4:	0703      	lsls	r3, r0, #28
 801b5f6:	d448      	bmi.n	801b68a <send+0x172>
      else return SOCK_BUSY;
 801b5f8:	2000      	movs	r0, #0
}
 801b5fa:	b003      	add	sp, #12
 801b5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(len <= freesize) break;
 801b600:	4554      	cmp	r4, sl
 801b602:	d8c6      	bhi.n	801b592 <send+0x7a>
 801b604:	e7d6      	b.n	801b5b4 <send+0x9c>
	setSn_CR(sn,Sn_CR_CLOSE);
 801b606:	f108 0a01 	add.w	sl, r8, #1
 801b60a:	4650      	mov	r0, sl
 801b60c:	2110      	movs	r1, #16
 801b60e:	f7ff fa91 	bl	801ab34 <WIZCHIP_WRITE>
	while( getSn_CR(sn) );
 801b612:	4650      	mov	r0, sl
 801b614:	f7ff faac 	bl	801ab70 <WIZCHIP_READ>
 801b618:	4604      	mov	r4, r0
 801b61a:	2800      	cmp	r0, #0
 801b61c:	d1f9      	bne.n	801b612 <send+0xfa>
	sock_io_mode &= ~(1<<sn);
 801b61e:	43f6      	mvns	r6, r6
	setSn_IR(sn, 0xFF);
 801b620:	21ff      	movs	r1, #255	; 0xff
 801b622:	f108 0002 	add.w	r0, r8, #2
 801b626:	f7ff fa85 	bl	801ab34 <WIZCHIP_WRITE>
	sock_is_sending &= ~(1<<sn);
 801b62a:	f8bb 2000 	ldrh.w	r2, [fp]
	sock_io_mode &= ~(1<<sn);
 801b62e:	f8b9 3000 	ldrh.w	r3, [r9]
 801b632:	b236      	sxth	r6, r6
 801b634:	4033      	ands	r3, r6
	sock_remained_size[sn] = 0;
 801b636:	492a      	ldr	r1, [pc, #168]	; (801b6e0 <send+0x1c8>)
	sock_is_sending &= ~(1<<sn);
 801b638:	4016      	ands	r6, r2
	sock_pack_info[sn] = 0;
 801b63a:	4a2a      	ldr	r2, [pc, #168]	; (801b6e4 <send+0x1cc>)
	sock_io_mode &= ~(1<<sn);
 801b63c:	f8a9 3000 	strh.w	r3, [r9]
	sock_is_sending &= ~(1<<sn);
 801b640:	f8ab 6000 	strh.w	r6, [fp]
	sock_remained_size[sn] = 0;
 801b644:	f821 4015 	strh.w	r4, [r1, r5, lsl #1]
	sock_pack_info[sn] = 0;
 801b648:	5554      	strb	r4, [r2, r5]
	while(getSn_SR(sn) != SOCK_CLOSED);
 801b64a:	4638      	mov	r0, r7
 801b64c:	f7ff fa90 	bl	801ab70 <WIZCHIP_READ>
 801b650:	2800      	cmp	r0, #0
 801b652:	d1fa      	bne.n	801b64a <send+0x132>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 801b654:	f06f 0006 	mvn.w	r0, #6
}
 801b658:	b003      	add	sp, #12
 801b65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         setSn_IR(sn, Sn_IR_SENDOK);
 801b65e:	4630      	mov	r0, r6
         sock_is_sending &= ~(1<<sn);         
 801b660:	2601      	movs	r6, #1
         setSn_IR(sn, Sn_IR_SENDOK);
 801b662:	2110      	movs	r1, #16
 801b664:	f7ff fa66 	bl	801ab34 <WIZCHIP_WRITE>
         sock_is_sending &= ~(1<<sn);         
 801b668:	f8bb 3000 	ldrh.w	r3, [fp]
 801b66c:	40ae      	lsls	r6, r5
 801b66e:	ea23 0306 	bic.w	r3, r3, r6
 801b672:	f8ab 3000 	strh.w	r3, [fp]
 801b676:	e779      	b.n	801b56c <send+0x54>
   CHECK_SOCKNUM();
 801b678:	f04f 30ff 	mov.w	r0, #4294967295
 801b67c:	e7bd      	b.n	801b5fa <send+0xe2>
   CHECK_SOCKDATA();
 801b67e:	f06f 000d 	mvn.w	r0, #13
 801b682:	e7ba      	b.n	801b5fa <send+0xe2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 801b684:	f06f 0004 	mvn.w	r0, #4
 801b688:	e7b7      	b.n	801b5fa <send+0xe2>
	setSn_CR(sn,Sn_CR_CLOSE);
 801b68a:	f108 0801 	add.w	r8, r8, #1
 801b68e:	4640      	mov	r0, r8
 801b690:	2110      	movs	r1, #16
 801b692:	f7ff fa4f 	bl	801ab34 <WIZCHIP_WRITE>
	while( getSn_CR(sn) );
 801b696:	4640      	mov	r0, r8
 801b698:	f7ff fa6a 	bl	801ab70 <WIZCHIP_READ>
 801b69c:	4604      	mov	r4, r0
 801b69e:	2800      	cmp	r0, #0
 801b6a0:	d1f9      	bne.n	801b696 <send+0x17e>
	setSn_IR(sn, 0xFF);
 801b6a2:	4630      	mov	r0, r6
 801b6a4:	21ff      	movs	r1, #255	; 0xff
 801b6a6:	f7ff fa45 	bl	801ab34 <WIZCHIP_WRITE>
	sock_io_mode &= ~(1<<sn);
 801b6aa:	2301      	movs	r3, #1
 801b6ac:	40ab      	lsls	r3, r5
 801b6ae:	43db      	mvns	r3, r3
 801b6b0:	490d      	ldr	r1, [pc, #52]	; (801b6e8 <send+0x1d0>)
	sock_is_sending &= ~(1<<sn);
 801b6b2:	f8bb 0000 	ldrh.w	r0, [fp]
	sock_io_mode &= ~(1<<sn);
 801b6b6:	880a      	ldrh	r2, [r1, #0]
 801b6b8:	b21b      	sxth	r3, r3
 801b6ba:	401a      	ands	r2, r3
 801b6bc:	800a      	strh	r2, [r1, #0]
	sock_is_sending &= ~(1<<sn);
 801b6be:	4003      	ands	r3, r0
	sock_pack_info[sn] = 0;
 801b6c0:	4a08      	ldr	r2, [pc, #32]	; (801b6e4 <send+0x1cc>)
	sock_remained_size[sn] = 0;
 801b6c2:	4807      	ldr	r0, [pc, #28]	; (801b6e0 <send+0x1c8>)
	sock_is_sending &= ~(1<<sn);
 801b6c4:	f8ab 3000 	strh.w	r3, [fp]
	sock_remained_size[sn] = 0;
 801b6c8:	f820 4015 	strh.w	r4, [r0, r5, lsl #1]
	sock_pack_info[sn] = 0;
 801b6cc:	5554      	strb	r4, [r2, r5]
	while(getSn_SR(sn) != SOCK_CLOSED);
 801b6ce:	4638      	mov	r0, r7
 801b6d0:	f7ff fa4e 	bl	801ab70 <WIZCHIP_READ>
 801b6d4:	2800      	cmp	r0, #0
 801b6d6:	d1fa      	bne.n	801b6ce <send+0x1b6>
         return SOCKERR_TIMEOUT;
 801b6d8:	f06f 000c 	mvn.w	r0, #12
 801b6dc:	e78d      	b.n	801b5fa <send+0xe2>
 801b6de:	bf00      	nop
 801b6e0:	20019970 	.word	0x20019970
 801b6e4:	2001996c 	.word	0x2001996c
 801b6e8:	20019968 	.word	0x20019968
 801b6ec:	2001996a 	.word	0x2001996a

0801b6f0 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 801b6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 801b6f4:	2804      	cmp	r0, #4
{
 801b6f6:	b085      	sub	sp, #20
 801b6f8:	e9cd 1201 	strd	r1, r2, [sp, #4]
   CHECK_SOCKNUM();
 801b6fc:	f200 80cf 	bhi.w	801b89e <recv+0x1ae>
   CHECK_SOCKMODE(Sn_MR_TCP);
 801b700:	f100 0904 	add.w	r9, r0, #4
 801b704:	ea4f 2309 	mov.w	r3, r9, lsl #8
 801b708:	4604      	mov	r4, r0
 801b70a:	4618      	mov	r0, r3
 801b70c:	4616      	mov	r6, r2
 801b70e:	4699      	mov	r9, r3
 801b710:	9300      	str	r3, [sp, #0]
 801b712:	f7ff fa2d 	bl	801ab70 <WIZCHIP_READ>
 801b716:	f000 050f 	and.w	r5, r0, #15
 801b71a:	2d01      	cmp	r5, #1
 801b71c:	f040 80c5 	bne.w	801b8aa <recv+0x1ba>
   CHECK_SOCKDATA();
 801b720:	2e00      	cmp	r6, #0
 801b722:	f000 80bf 	beq.w	801b8a4 <recv+0x1b4>
   
   recvsize = getSn_RxMAX(sn);
 801b726:	201a      	movs	r0, #26
 801b728:	f7ff fa22 	bl	801ab70 <WIZCHIP_READ>
 801b72c:	2303      	movs	r3, #3
 801b72e:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801b732:	fa03 f80a 	lsl.w	r8, r3, sl
 801b736:	464b      	mov	r3, r9
            {
               close(sn);
               return SOCKERR_SOCKSTATUS;
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 801b738:	4f5d      	ldr	r7, [pc, #372]	; (801b8b0 <recv+0x1c0>)
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 801b73a:	f8df b184 	ldr.w	fp, [pc, #388]	; 801b8c0 <recv+0x1d0>
   recvsize = getSn_RxMAX(sn);
 801b73e:	9003      	str	r0, [sp, #12]
   if(recvsize < len) len = recvsize;
 801b740:	40a5      	lsls	r5, r4
 801b742:	1cde      	adds	r6, r3, #3
         recvsize = getSn_RX_RSR(sn);
 801b744:	4620      	mov	r0, r4
 801b746:	f7ff faab 	bl	801aca0 <getSn_RX_RSR>
 801b74a:	4681      	mov	r9, r0
         tmp = getSn_SR(sn);
 801b74c:	4630      	mov	r0, r6
 801b74e:	f7ff fa0f 	bl	801ab70 <WIZCHIP_READ>
         if (tmp != SOCK_ESTABLISHED)
 801b752:	2817      	cmp	r0, #23
 801b754:	d01d      	beq.n	801b792 <recv+0xa2>
            if(tmp == SOCK_CLOSE_WAIT)
 801b756:	281c      	cmp	r0, #28
 801b758:	d14d      	bne.n	801b7f6 <recv+0x106>
               if(recvsize != 0) break;
 801b75a:	f1b9 0f00 	cmp.w	r9, #0
 801b75e:	d11e      	bne.n	801b79e <recv+0xae>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 801b760:	4620      	mov	r0, r4
 801b762:	f7ff fa73 	bl	801ac4c <getSn_TX_FSR>
 801b766:	4681      	mov	r9, r0
 801b768:	201b      	movs	r0, #27
 801b76a:	f7ff fa01 	bl	801ab70 <WIZCHIP_READ>
 801b76e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b772:	ea00 0008 	and.w	r0, r0, r8
 801b776:	fa40 f20a 	asr.w	r2, r0, sl
 801b77a:	4093      	lsls	r3, r2
 801b77c:	ea03 030b 	and.w	r3, r3, fp
 801b780:	4599      	cmp	r9, r3
 801b782:	d063      	beq.n	801b84c <recv+0x15c>
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 801b784:	883b      	ldrh	r3, [r7, #0]
 801b786:	422b      	tst	r3, r5
 801b788:	d0dc      	beq.n	801b744 <recv+0x54>
 801b78a:	2000      	movs	r0, #0
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
 801b78c:	b005      	add	sp, #20
 801b78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 801b792:	883b      	ldrh	r3, [r7, #0]
 801b794:	422b      	tst	r3, r5
 801b796:	d02a      	beq.n	801b7ee <recv+0xfe>
 801b798:	f1b9 0f00 	cmp.w	r9, #0
 801b79c:	d0f5      	beq.n	801b78a <recv+0x9a>
   recvsize = getSn_RxMAX(sn);
 801b79e:	f44f 6580 	mov.w	r5, #1024	; 0x400
 801b7a2:	9b03      	ldr	r3, [sp, #12]
   wiz_recv_data(sn, buf, len);
 801b7a4:	4620      	mov	r0, r4
   recvsize = getSn_RxMAX(sn);
 801b7a6:	ea03 0808 	and.w	r8, r3, r8
 801b7aa:	fa48 fa0a 	asr.w	sl, r8, sl
 801b7ae:	9b02      	ldr	r3, [sp, #8]
 801b7b0:	fa05 f50a 	lsl.w	r5, r5, sl
 801b7b4:	b2ad      	uxth	r5, r5
 801b7b6:	429d      	cmp	r5, r3
 801b7b8:	bf28      	it	cs
 801b7ba:	461d      	movcs	r5, r3
 801b7bc:	454d      	cmp	r5, r9
 801b7be:	462b      	mov	r3, r5
 801b7c0:	bf28      	it	cs
 801b7c2:	464b      	movcs	r3, r9
 801b7c4:	b29d      	uxth	r5, r3
   setSn_CR(sn,Sn_CR_RECV);
 801b7c6:	9b00      	ldr	r3, [sp, #0]
   wiz_recv_data(sn, buf, len);
 801b7c8:	9901      	ldr	r1, [sp, #4]
   setSn_CR(sn,Sn_CR_RECV);
 801b7ca:	f103 0901 	add.w	r9, r3, #1
   wiz_recv_data(sn, buf, len);
 801b7ce:	462a      	mov	r2, r5
 801b7d0:	f7ff fb5c 	bl	801ae8c <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 801b7d4:	4648      	mov	r0, r9
 801b7d6:	2140      	movs	r1, #64	; 0x40
 801b7d8:	f7ff f9ac 	bl	801ab34 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 801b7dc:	4648      	mov	r0, r9
 801b7de:	f7ff f9c7 	bl	801ab70 <WIZCHIP_READ>
 801b7e2:	2800      	cmp	r0, #0
 801b7e4:	d1fa      	bne.n	801b7dc <recv+0xec>
   return (int32_t)len;
 801b7e6:	4628      	mov	r0, r5
}
 801b7e8:	b005      	add	sp, #20
 801b7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         if(recvsize != 0) break;
 801b7ee:	f1b9 0f00 	cmp.w	r9, #0
 801b7f2:	d0a7      	beq.n	801b744 <recv+0x54>
 801b7f4:	e7d3      	b.n	801b79e <recv+0xae>
	setSn_CR(sn,Sn_CR_CLOSE);
 801b7f6:	9b00      	ldr	r3, [sp, #0]
 801b7f8:	2110      	movs	r1, #16
 801b7fa:	f103 0801 	add.w	r8, r3, #1
 801b7fe:	4640      	mov	r0, r8
 801b800:	f7ff f998 	bl	801ab34 <WIZCHIP_WRITE>
	while( getSn_CR(sn) );
 801b804:	4640      	mov	r0, r8
 801b806:	f7ff f9b3 	bl	801ab70 <WIZCHIP_READ>
 801b80a:	2800      	cmp	r0, #0
 801b80c:	d1fa      	bne.n	801b804 <recv+0x114>
	setSn_IR(sn, 0xFF);
 801b80e:	4607      	mov	r7, r0
 801b810:	9800      	ldr	r0, [sp, #0]
 801b812:	21ff      	movs	r1, #255	; 0xff
 801b814:	3002      	adds	r0, #2
 801b816:	f7ff f98d 	bl	801ab34 <WIZCHIP_WRITE>
	sock_io_mode &= ~(1<<sn);
 801b81a:	43eb      	mvns	r3, r5
 801b81c:	4824      	ldr	r0, [pc, #144]	; (801b8b0 <recv+0x1c0>)
	sock_is_sending &= ~(1<<sn);
 801b81e:	4925      	ldr	r1, [pc, #148]	; (801b8b4 <recv+0x1c4>)
	sock_io_mode &= ~(1<<sn);
 801b820:	8802      	ldrh	r2, [r0, #0]
 801b822:	b21b      	sxth	r3, r3
 801b824:	401a      	ands	r2, r3
	sock_is_sending &= ~(1<<sn);
 801b826:	880d      	ldrh	r5, [r1, #0]
	sock_io_mode &= ~(1<<sn);
 801b828:	8002      	strh	r2, [r0, #0]
	sock_remained_size[sn] = 0;
 801b82a:	4823      	ldr	r0, [pc, #140]	; (801b8b8 <recv+0x1c8>)
	sock_pack_info[sn] = 0;
 801b82c:	4a23      	ldr	r2, [pc, #140]	; (801b8bc <recv+0x1cc>)
	sock_is_sending &= ~(1<<sn);
 801b82e:	402b      	ands	r3, r5
 801b830:	800b      	strh	r3, [r1, #0]
	sock_remained_size[sn] = 0;
 801b832:	f820 7014 	strh.w	r7, [r0, r4, lsl #1]
	sock_pack_info[sn] = 0;
 801b836:	5517      	strb	r7, [r2, r4]
	while(getSn_SR(sn) != SOCK_CLOSED);
 801b838:	4630      	mov	r0, r6
 801b83a:	f7ff f999 	bl	801ab70 <WIZCHIP_READ>
 801b83e:	2800      	cmp	r0, #0
 801b840:	d1fa      	bne.n	801b838 <recv+0x148>
                  return SOCKERR_SOCKSTATUS;
 801b842:	f06f 0006 	mvn.w	r0, #6
}
 801b846:	b005      	add	sp, #20
 801b848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	setSn_CR(sn,Sn_CR_CLOSE);
 801b84c:	9b00      	ldr	r3, [sp, #0]
 801b84e:	2110      	movs	r1, #16
 801b850:	f103 0801 	add.w	r8, r3, #1
 801b854:	4640      	mov	r0, r8
 801b856:	f7ff f96d 	bl	801ab34 <WIZCHIP_WRITE>
	while( getSn_CR(sn) );
 801b85a:	4640      	mov	r0, r8
 801b85c:	f7ff f988 	bl	801ab70 <WIZCHIP_READ>
 801b860:	2800      	cmp	r0, #0
 801b862:	d1fa      	bne.n	801b85a <recv+0x16a>
	setSn_IR(sn, 0xFF);
 801b864:	4607      	mov	r7, r0
 801b866:	9800      	ldr	r0, [sp, #0]
 801b868:	21ff      	movs	r1, #255	; 0xff
 801b86a:	3002      	adds	r0, #2
 801b86c:	f7ff f962 	bl	801ab34 <WIZCHIP_WRITE>
	sock_io_mode &= ~(1<<sn);
 801b870:	43eb      	mvns	r3, r5
 801b872:	480f      	ldr	r0, [pc, #60]	; (801b8b0 <recv+0x1c0>)
	sock_is_sending &= ~(1<<sn);
 801b874:	490f      	ldr	r1, [pc, #60]	; (801b8b4 <recv+0x1c4>)
	sock_io_mode &= ~(1<<sn);
 801b876:	8802      	ldrh	r2, [r0, #0]
 801b878:	b21b      	sxth	r3, r3
 801b87a:	401a      	ands	r2, r3
	sock_is_sending &= ~(1<<sn);
 801b87c:	880d      	ldrh	r5, [r1, #0]
	sock_io_mode &= ~(1<<sn);
 801b87e:	8002      	strh	r2, [r0, #0]
	sock_remained_size[sn] = 0;
 801b880:	480d      	ldr	r0, [pc, #52]	; (801b8b8 <recv+0x1c8>)
	sock_pack_info[sn] = 0;
 801b882:	4a0e      	ldr	r2, [pc, #56]	; (801b8bc <recv+0x1cc>)
	sock_is_sending &= ~(1<<sn);
 801b884:	402b      	ands	r3, r5
 801b886:	800b      	strh	r3, [r1, #0]
	sock_remained_size[sn] = 0;
 801b888:	f820 7014 	strh.w	r7, [r0, r4, lsl #1]
	sock_pack_info[sn] = 0;
 801b88c:	5517      	strb	r7, [r2, r4]
	while(getSn_SR(sn) != SOCK_CLOSED);
 801b88e:	4630      	mov	r0, r6
 801b890:	f7ff f96e 	bl	801ab70 <WIZCHIP_READ>
 801b894:	2800      	cmp	r0, #0
 801b896:	d1fa      	bne.n	801b88e <recv+0x19e>
                  return SOCKERR_SOCKSTATUS;
 801b898:	f06f 0006 	mvn.w	r0, #6
 801b89c:	e7d3      	b.n	801b846 <recv+0x156>
   CHECK_SOCKNUM();
 801b89e:	f04f 30ff 	mov.w	r0, #4294967295
 801b8a2:	e7a1      	b.n	801b7e8 <recv+0xf8>
   CHECK_SOCKDATA();
 801b8a4:	f06f 000d 	mvn.w	r0, #13
 801b8a8:	e79e      	b.n	801b7e8 <recv+0xf8>
   CHECK_SOCKMODE(Sn_MR_TCP);
 801b8aa:	f06f 0004 	mvn.w	r0, #4
 801b8ae:	e79b      	b.n	801b7e8 <recv+0xf8>
 801b8b0:	20019968 	.word	0x20019968
 801b8b4:	2001996a 	.word	0x2001996a
 801b8b8:	20019970 	.word	0x20019970
 801b8bc:	2001996c 	.word	0x2001996c
 801b8c0:	03fffc00 	.word	0x03fffc00

0801b8c4 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 801b8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   uint8_t tmp = 0;
   uint16_t freesize = 0;
   uint32_t taddr;

   CHECK_SOCKNUM();
 801b8c8:	2804      	cmp	r0, #4
{
 801b8ca:	b083      	sub	sp, #12
 801b8cc:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
   CHECK_SOCKNUM();
 801b8d0:	f200 80e3 	bhi.w	801ba9a <sendto+0x1d6>
   switch(getSn_MR(sn) & 0x0F)
 801b8d4:	f100 0804 	add.w	r8, r0, #4
 801b8d8:	ea4f 2808 	mov.w	r8, r8, lsl #8
 801b8dc:	4606      	mov	r6, r0
 801b8de:	4640      	mov	r0, r8
 801b8e0:	468b      	mov	fp, r1
 801b8e2:	4614      	mov	r4, r2
 801b8e4:	461d      	mov	r5, r3
 801b8e6:	f7ff f943 	bl	801ab70 <WIZCHIP_READ>
 801b8ea:	f000 000f 	and.w	r0, r0, #15
 801b8ee:	3802      	subs	r0, #2
 801b8f0:	2802      	cmp	r0, #2
 801b8f2:	f200 80d5 	bhi.w	801baa0 <sendto+0x1dc>
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
 801b8f6:	2c00      	cmp	r4, #0
 801b8f8:	f000 80d5 	beq.w	801baa6 <sendto+0x1e2>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 801b8fc:	782b      	ldrb	r3, [r5, #0]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 801b8fe:	7869      	ldrb	r1, [r5, #1]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 801b900:	78aa      	ldrb	r2, [r5, #2]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 801b902:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 801b906:	78eb      	ldrb	r3, [r5, #3]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 801b908:	eb02 2201 	add.w	r2, r2, r1, lsl #8
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 801b90c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801b910:	9301      	str	r3, [sp, #4]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 801b912:	2b00      	cmp	r3, #0
 801b914:	f000 808e 	beq.w	801ba34 <sendto+0x170>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 801b918:	2f00      	cmp	r7, #0
 801b91a:	f000 8082 	beq.w	801ba22 <sendto+0x15e>
   tmp = getSn_SR(sn);
 801b91e:	f108 0903 	add.w	r9, r8, #3
 801b922:	4648      	mov	r0, r9
 801b924:	f7ff f924 	bl	801ab70 <WIZCHIP_READ>
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 801b928:	2842      	cmp	r0, #66	; 0x42
 801b92a:	d008      	beq.n	801b93e <sendto+0x7a>
 801b92c:	f000 00ef 	and.w	r0, r0, #239	; 0xef
 801b930:	2822      	cmp	r0, #34	; 0x22
 801b932:	d004      	beq.n	801b93e <sendto+0x7a>
 801b934:	f06f 0006 	mvn.w	r0, #6
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
 801b938:	b003      	add	sp, #12
 801b93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   setSn_DIPR(sn,addr);
 801b93e:	2204      	movs	r2, #4
 801b940:	4629      	mov	r1, r5
 801b942:	f108 000c 	add.w	r0, r8, #12
 801b946:	f7ff f931 	bl	801abac <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 801b94a:	0a39      	lsrs	r1, r7, #8
 801b94c:	f108 0010 	add.w	r0, r8, #16
 801b950:	f7ff f8f0 	bl	801ab34 <WIZCHIP_WRITE>
 801b954:	b2f9      	uxtb	r1, r7
 801b956:	f108 0011 	add.w	r0, r8, #17
 801b95a:	f7ff f8eb 	bl	801ab34 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 801b95e:	2701      	movs	r7, #1
 801b960:	201b      	movs	r0, #27
 801b962:	f7ff f905 	bl	801ab70 <WIZCHIP_READ>
 801b966:	2303      	movs	r3, #3
 801b968:	fa06 f207 	lsl.w	r2, r6, r7
 801b96c:	4093      	lsls	r3, r2
 801b96e:	ea03 0500 	and.w	r5, r3, r0
 801b972:	4115      	asrs	r5, r2
 801b974:	fa07 f505 	lsl.w	r5, r7, r5
 801b978:	02ad      	lsls	r5, r5, #10
 801b97a:	b2ad      	uxth	r5, r5
 801b97c:	42a5      	cmp	r5, r4
      freesize = getSn_TX_FSR(sn);
 801b97e:	4630      	mov	r0, r6
 801b980:	bf28      	it	cs
 801b982:	4625      	movcs	r5, r4
 801b984:	f7ff f962 	bl	801ac4c <getSn_TX_FSR>
 801b988:	4604      	mov	r4, r0
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 801b98a:	4648      	mov	r0, r9
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 801b98c:	f8df a120 	ldr.w	sl, [pc, #288]	; 801bab0 <sendto+0x1ec>
 801b990:	40b7      	lsls	r7, r6
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 801b992:	f7ff f8ed 	bl	801ab70 <WIZCHIP_READ>
 801b996:	2800      	cmp	r0, #0
 801b998:	d03e      	beq.n	801ba18 <sendto+0x154>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 801b99a:	f8ba 3000 	ldrh.w	r3, [sl]
 801b99e:	423b      	tst	r3, r7
 801b9a0:	d02f      	beq.n	801ba02 <sendto+0x13e>
 801b9a2:	42a5      	cmp	r5, r4
 801b9a4:	d862      	bhi.n	801ba6c <sendto+0x1a8>
	wiz_send_data(sn, buf, len);
 801b9a6:	4659      	mov	r1, fp
 801b9a8:	4630      	mov	r0, r6
 801b9aa:	462a      	mov	r2, r5
 801b9ac:	f7ff f9a2 	bl	801acf4 <wiz_send_data>
      getSIPR((uint8_t*)&taddr);
 801b9b0:	2204      	movs	r2, #4
 801b9b2:	200f      	movs	r0, #15
 801b9b4:	a901      	add	r1, sp, #4
 801b9b6:	f7ff f921 	bl	801abfc <WIZCHIP_READ_BUF>
      if(taddr == 0)
 801b9ba:	9b01      	ldr	r3, [sp, #4]
 801b9bc:	2b00      	cmp	r3, #0
 801b9be:	d042      	beq.n	801ba46 <sendto+0x182>
      else taddr = 0;
 801b9c0:	2300      	movs	r3, #0
 801b9c2:	9301      	str	r3, [sp, #4]
	setSn_CR(sn,Sn_CR_SEND);
 801b9c4:	f108 0401 	add.w	r4, r8, #1
 801b9c8:	4620      	mov	r0, r4
 801b9ca:	2120      	movs	r1, #32
 801b9cc:	f7ff f8b2 	bl	801ab34 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 801b9d0:	4620      	mov	r0, r4
 801b9d2:	f7ff f8cd 	bl	801ab70 <WIZCHIP_READ>
 801b9d6:	2800      	cmp	r0, #0
 801b9d8:	d1fa      	bne.n	801b9d0 <sendto+0x10c>
 801b9da:	f108 0802 	add.w	r8, r8, #2
 801b9de:	e001      	b.n	801b9e4 <sendto+0x120>
      else if(tmp & Sn_IR_TIMEOUT)
 801b9e0:	0703      	lsls	r3, r0, #28
 801b9e2:	d447      	bmi.n	801ba74 <sendto+0x1b0>
      tmp = getSn_IR(sn);
 801b9e4:	4640      	mov	r0, r8
 801b9e6:	f7ff f8c3 	bl	801ab70 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
 801b9ea:	06c2      	lsls	r2, r0, #27
 801b9ec:	d5f8      	bpl.n	801b9e0 <sendto+0x11c>
         setSn_IR(sn, Sn_IR_SENDOK);
 801b9ee:	4640      	mov	r0, r8
 801b9f0:	2110      	movs	r1, #16
 801b9f2:	f7ff f89f 	bl	801ab34 <WIZCHIP_WRITE>
      if(taddr) setSUBR((uint8_t*)&taddr);
 801b9f6:	9b01      	ldr	r3, [sp, #4]
 801b9f8:	bb8b      	cbnz	r3, 801ba5e <sendto+0x19a>
   return (int32_t)len;
 801b9fa:	4628      	mov	r0, r5
}
 801b9fc:	b003      	add	sp, #12
 801b9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(len <= freesize) break;
 801ba02:	42a5      	cmp	r5, r4
 801ba04:	d9cf      	bls.n	801b9a6 <sendto+0xe2>
      freesize = getSn_TX_FSR(sn);
 801ba06:	4630      	mov	r0, r6
 801ba08:	f7ff f920 	bl	801ac4c <getSn_TX_FSR>
 801ba0c:	4604      	mov	r4, r0
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 801ba0e:	4648      	mov	r0, r9
 801ba10:	f7ff f8ae 	bl	801ab70 <WIZCHIP_READ>
 801ba14:	2800      	cmp	r0, #0
 801ba16:	d1c0      	bne.n	801b99a <sendto+0xd6>
 801ba18:	f06f 0003 	mvn.w	r0, #3
}
 801ba1c:	b003      	add	sp, #12
 801ba1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 801ba22:	4640      	mov	r0, r8
 801ba24:	f7ff f8a4 	bl	801ab70 <WIZCHIP_READ>
 801ba28:	0741      	lsls	r1, r0, #29
 801ba2a:	f53f af78 	bmi.w	801b91e <sendto+0x5a>
 801ba2e:	f06f 000a 	mvn.w	r0, #10
 801ba32:	e781      	b.n	801b938 <sendto+0x74>
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 801ba34:	4640      	mov	r0, r8
 801ba36:	f7ff f89b 	bl	801ab70 <WIZCHIP_READ>
 801ba3a:	0740      	lsls	r0, r0, #29
 801ba3c:	f53f af6c 	bmi.w	801b918 <sendto+0x54>
 801ba40:	f06f 000b 	mvn.w	r0, #11
 801ba44:	e778      	b.n	801b938 <sendto+0x74>
         getSUBR((uint8_t*)&taddr);
 801ba46:	2204      	movs	r2, #4
 801ba48:	2005      	movs	r0, #5
 801ba4a:	eb0d 0102 	add.w	r1, sp, r2
 801ba4e:	f7ff f8d5 	bl	801abfc <WIZCHIP_READ_BUF>
         setSUBR((uint8_t*)"\x00\x00\x00\x00");
 801ba52:	2204      	movs	r2, #4
 801ba54:	2005      	movs	r0, #5
 801ba56:	4915      	ldr	r1, [pc, #84]	; (801baac <sendto+0x1e8>)
 801ba58:	f7ff f8a8 	bl	801abac <WIZCHIP_WRITE_BUF>
 801ba5c:	e7b2      	b.n	801b9c4 <sendto+0x100>
      if(taddr) setSUBR((uint8_t*)&taddr);
 801ba5e:	2005      	movs	r0, #5
 801ba60:	2204      	movs	r2, #4
 801ba62:	a901      	add	r1, sp, #4
 801ba64:	f7ff f8a2 	bl	801abac <WIZCHIP_WRITE_BUF>
   return (int32_t)len;
 801ba68:	4628      	mov	r0, r5
 801ba6a:	e7c7      	b.n	801b9fc <sendto+0x138>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 801ba6c:	2000      	movs	r0, #0
}
 801ba6e:	b003      	add	sp, #12
 801ba70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         setSn_IR(sn, Sn_IR_TIMEOUT);
 801ba74:	4640      	mov	r0, r8
 801ba76:	2108      	movs	r1, #8
 801ba78:	f7ff f85c 	bl	801ab34 <WIZCHIP_WRITE>
            if(taddr) setSUBR((uint8_t*)&taddr);
 801ba7c:	9b01      	ldr	r3, [sp, #4]
 801ba7e:	b923      	cbnz	r3, 801ba8a <sendto+0x1c6>
         return SOCKERR_TIMEOUT;
 801ba80:	f06f 000c 	mvn.w	r0, #12
}
 801ba84:	b003      	add	sp, #12
 801ba86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(taddr) setSUBR((uint8_t*)&taddr);
 801ba8a:	2005      	movs	r0, #5
 801ba8c:	2204      	movs	r2, #4
 801ba8e:	a901      	add	r1, sp, #4
 801ba90:	f7ff f88c 	bl	801abac <WIZCHIP_WRITE_BUF>
         return SOCKERR_TIMEOUT;
 801ba94:	f06f 000c 	mvn.w	r0, #12
 801ba98:	e74e      	b.n	801b938 <sendto+0x74>
   CHECK_SOCKNUM();
 801ba9a:	f04f 30ff 	mov.w	r0, #4294967295
 801ba9e:	e74b      	b.n	801b938 <sendto+0x74>
         return SOCKERR_SOCKMODE;
 801baa0:	f06f 0004 	mvn.w	r0, #4
 801baa4:	e748      	b.n	801b938 <sendto+0x74>
   CHECK_SOCKDATA();
 801baa6:	f06f 000d 	mvn.w	r0, #13
 801baaa:	e745      	b.n	801b938 <sendto+0x74>
 801baac:	08031714 	.word	0x08031714
 801bab0:	20019968 	.word	0x20019968

0801bab4 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 801bab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;

   CHECK_SOCKNUM();
 801bab8:	2804      	cmp	r0, #4
{
 801baba:	b087      	sub	sp, #28
 801babc:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801bac0:	9303      	str	r3, [sp, #12]
   CHECK_SOCKNUM();
 801bac2:	f200 8105 	bhi.w	801bcd0 <recvfrom+0x21c>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 801bac6:	f100 0a04 	add.w	sl, r0, #4
 801baca:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 801bace:	4605      	mov	r5, r0
 801bad0:	4650      	mov	r0, sl
 801bad2:	4614      	mov	r4, r2
 801bad4:	f7ff f84c 	bl	801ab70 <WIZCHIP_READ>
 801bad8:	f000 030f 	and.w	r3, r0, #15
 801badc:	3b02      	subs	r3, #2
 801bade:	2b03      	cmp	r3, #3
 801bae0:	4606      	mov	r6, r0
 801bae2:	f200 80f8 	bhi.w	801bcd6 <recvfrom+0x222>
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
 801bae6:	2c00      	cmp	r4, #0
 801bae8:	f000 80f8 	beq.w	801bcdc <recvfrom+0x228>
   if(sock_remained_size[sn] == 0)
 801baec:	f8df b24c 	ldr.w	fp, [pc, #588]	; 801bd3c <recvfrom+0x288>
 801baf0:	f83b 4015 	ldrh.w	r4, [fp, r5, lsl #1]
 801baf4:	bb04      	cbnz	r4, 801bb38 <recvfrom+0x84>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 801baf6:	4628      	mov	r0, r5
 801baf8:	f7ff f8d2 	bl	801aca0 <getSn_RX_RSR>
 801bafc:	2701      	movs	r7, #1
 801bafe:	f10a 0803 	add.w	r8, sl, #3
 801bb02:	4604      	mov	r4, r0
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 801bb04:	4640      	mov	r0, r8
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 801bb06:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801bd40 <recvfrom+0x28c>
 801bb0a:	40af      	lsls	r7, r5
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 801bb0c:	f7ff f830 	bl	801ab70 <WIZCHIP_READ>
 801bb10:	2800      	cmp	r0, #0
 801bb12:	d048      	beq.n	801bba6 <recvfrom+0xf2>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 801bb14:	f8b9 3000 	ldrh.w	r3, [r9]
 801bb18:	423b      	tst	r3, r7
 801bb1a:	d039      	beq.n	801bb90 <recvfrom+0xdc>
 801bb1c:	2c00      	cmp	r4, #0
 801bb1e:	f000 8083 	beq.w	801bc28 <recvfrom+0x174>
         if(pack_len != 0) break;
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 801bb22:	f006 0607 	and.w	r6, r6, #7
 801bb26:	2e03      	cmp	r6, #3
 801bb28:	d043      	beq.n	801bbb2 <recvfrom+0xfe>
 801bb2a:	2e04      	cmp	r6, #4
 801bb2c:	d07e      	beq.n	801bc2c <recvfrom+0x178>
 801bb2e:	2e02      	cmp	r6, #2
 801bb30:	f000 80a2 	beq.w	801bc78 <recvfrom+0x1c4>
 801bb34:	46a0      	mov	r8, r4
 801bb36:	e00a      	b.n	801bb4e <recvfrom+0x9a>
 801bb38:	f000 0607 	and.w	r6, r0, #7
 801bb3c:	2e03      	cmp	r6, #3
 801bb3e:	d06f      	beq.n	801bc20 <recvfrom+0x16c>
 801bb40:	2e04      	cmp	r6, #4
 801bb42:	d064      	beq.n	801bc0e <recvfrom+0x15a>
 801bb44:	2e02      	cmp	r6, #2
 801bb46:	d062      	beq.n	801bc0e <recvfrom+0x15a>
 801bb48:	f04f 0800 	mov.w	r8, #0
 801bb4c:	4644      	mov	r4, r8
			else pack_len = sock_remained_size[sn];
   		wiz_recv_data(sn, buf, pack_len); // data copy.
			break;
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 801bb4e:	4621      	mov	r1, r4
 801bb50:	4628      	mov	r0, r5
 801bb52:	4f78      	ldr	r7, [pc, #480]	; (801bd34 <recvfrom+0x280>)
 801bb54:	f7ff fa66 	bl	801b024 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 801bb58:	f10a 0601 	add.w	r6, sl, #1
 801bb5c:	f82b 4015 	strh.w	r4, [fp, r5, lsl #1]
         break;
   }
	setSn_CR(sn,Sn_CR_RECV);
 801bb60:	2140      	movs	r1, #64	; 0x40
 801bb62:	4630      	mov	r0, r6
 801bb64:	f7fe ffe6 	bl	801ab34 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 801bb68:	4630      	mov	r0, r6
 801bb6a:	f7ff f801 	bl	801ab70 <WIZCHIP_READ>
 801bb6e:	2800      	cmp	r0, #0
 801bb70:	d1fa      	bne.n	801bb68 <recvfrom+0xb4>
	sock_remained_size[sn] -= pack_len;
 801bb72:	f83b 3015 	ldrh.w	r3, [fp, r5, lsl #1]
 801bb76:	1b1c      	subs	r4, r3, r4
 801bb78:	b2a4      	uxth	r4, r4
 801bb7a:	f82b 4015 	strh.w	r4, [fp, r5, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 801bb7e:	b114      	cbz	r4, 801bb86 <recvfrom+0xd2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 801bb80:	5d78      	ldrb	r0, [r7, r5]
 801bb82:	f040 0001 	orr.w	r0, r0, #1
 801bb86:	5578      	strb	r0, [r7, r5]
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
}
 801bb88:	4640      	mov	r0, r8
 801bb8a:	b007      	add	sp, #28
 801bb8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         if(pack_len != 0) break;
 801bb90:	2c00      	cmp	r4, #0
 801bb92:	d1c6      	bne.n	801bb22 <recvfrom+0x6e>
         pack_len = getSn_RX_RSR(sn);
 801bb94:	4628      	mov	r0, r5
 801bb96:	f7ff f883 	bl	801aca0 <getSn_RX_RSR>
 801bb9a:	4604      	mov	r4, r0
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 801bb9c:	4640      	mov	r0, r8
 801bb9e:	f7fe ffe7 	bl	801ab70 <WIZCHIP_READ>
 801bba2:	2800      	cmp	r0, #0
 801bba4:	d1b6      	bne.n	801bb14 <recvfrom+0x60>
 801bba6:	f06f 0803 	mvn.w	r8, #3
}
 801bbaa:	4640      	mov	r0, r8
 801bbac:	b007      	add	sp, #28
 801bbae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		   if(sock_remained_size[sn] == 0)
 801bbb2:	f83b 4015 	ldrh.w	r4, [fp, r5, lsl #1]
 801bbb6:	bb9c      	cbnz	r4, 801bc20 <recvfrom+0x16c>
   			wiz_recv_data(sn, head, 6);
 801bbb8:	4628      	mov	r0, r5
 801bbba:	a904      	add	r1, sp, #16
 801bbbc:	2206      	movs	r2, #6
   			setSn_CR(sn,Sn_CR_RECV);
 801bbbe:	f10a 0601 	add.w	r6, sl, #1
   			wiz_recv_data(sn, head, 6);
 801bbc2:	f7ff f963 	bl	801ae8c <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 801bbc6:	4630      	mov	r0, r6
 801bbc8:	2140      	movs	r1, #64	; 0x40
 801bbca:	f7fe ffb3 	bl	801ab34 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 801bbce:	4630      	mov	r0, r6
 801bbd0:	f7fe ffce 	bl	801ab70 <WIZCHIP_READ>
 801bbd4:	2800      	cmp	r0, #0
 801bbd6:	d1fa      	bne.n	801bbce <recvfrom+0x11a>
   			sock_pack_info[sn] = PACK_FIRST;
 801bbd8:	2380      	movs	r3, #128	; 0x80
   			sock_remained_size[sn] = head[4];
 801bbda:	f89d 2014 	ldrb.w	r2, [sp, #20]
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 801bbde:	f89d 4015 	ldrb.w	r4, [sp, #21]
   			addr[0] = head[0];
 801bbe2:	9903      	ldr	r1, [sp, #12]
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 801bbe4:	eb04 2402 	add.w	r4, r4, r2, lsl #8
   			sock_pack_info[sn] = PACK_FIRST;
 801bbe8:	4f52      	ldr	r7, [pc, #328]	; (801bd34 <recvfrom+0x280>)
   			addr[0] = head[0];
 801bbea:	9a04      	ldr	r2, [sp, #16]
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 801bbec:	b2a4      	uxth	r4, r4
   			addr[0] = head[0];
 801bbee:	600a      	str	r2, [r1, #0]
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 801bbf0:	f82b 4015 	strh.w	r4, [fp, r5, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 801bbf4:	557b      	strb	r3, [r7, r5]
			if(len < sock_remained_size[sn]) pack_len = len;
 801bbf6:	9b02      	ldr	r3, [sp, #8]
 801bbf8:	42a3      	cmp	r3, r4
 801bbfa:	bf28      	it	cs
 801bbfc:	4623      	movcs	r3, r4
 801bbfe:	b29c      	uxth	r4, r3
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 801bc00:	4622      	mov	r2, r4
 801bc02:	4628      	mov	r0, r5
 801bc04:	9901      	ldr	r1, [sp, #4]
 801bc06:	f7ff f941 	bl	801ae8c <wiz_recv_data>
			break;
 801bc0a:	46a0      	mov	r8, r4
 801bc0c:	e7a8      	b.n	801bb60 <recvfrom+0xac>
 801bc0e:	f10a 0601 	add.w	r6, sl, #1
 801bc12:	4f48      	ldr	r7, [pc, #288]	; (801bd34 <recvfrom+0x280>)
			if(len < sock_remained_size[sn]) pack_len = len;
 801bc14:	9b02      	ldr	r3, [sp, #8]
 801bc16:	42a3      	cmp	r3, r4
 801bc18:	bf28      	it	cs
 801bc1a:	4623      	movcs	r3, r4
 801bc1c:	461c      	mov	r4, r3
			wiz_recv_data(sn,buf,pack_len);
 801bc1e:	e7ef      	b.n	801bc00 <recvfrom+0x14c>
 801bc20:	4f44      	ldr	r7, [pc, #272]	; (801bd34 <recvfrom+0x280>)
 801bc22:	f10a 0601 	add.w	r6, sl, #1
 801bc26:	e7e6      	b.n	801bbf6 <recvfrom+0x142>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 801bc28:	46a0      	mov	r8, r4
 801bc2a:	e7ad      	b.n	801bb88 <recvfrom+0xd4>
 801bc2c:	f83b 4015 	ldrh.w	r4, [fp, r5, lsl #1]
	      if(sock_remained_size[sn] == 0)
 801bc30:	2c00      	cmp	r4, #0
 801bc32:	d1ec      	bne.n	801bc0e <recvfrom+0x15a>
   			wiz_recv_data(sn, head, 2);
 801bc34:	4628      	mov	r0, r5
 801bc36:	a904      	add	r1, sp, #16
 801bc38:	2202      	movs	r2, #2
   			setSn_CR(sn,Sn_CR_RECV);
 801bc3a:	f10a 0601 	add.w	r6, sl, #1
   			wiz_recv_data(sn, head, 2);
 801bc3e:	f7ff f925 	bl	801ae8c <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 801bc42:	4630      	mov	r0, r6
 801bc44:	2140      	movs	r1, #64	; 0x40
 801bc46:	f7fe ff75 	bl	801ab34 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 801bc4a:	4630      	mov	r0, r6
 801bc4c:	f7fe ff90 	bl	801ab70 <WIZCHIP_READ>
 801bc50:	2800      	cmp	r0, #0
 801bc52:	d1fa      	bne.n	801bc4a <recvfrom+0x196>
   			if(sock_remained_size[sn] > 1514) 
 801bc54:	f240 53ea 	movw	r3, #1514	; 0x5ea
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 801bc58:	f89d 4011 	ldrb.w	r4, [sp, #17]
    			sock_remained_size[sn] = head[0];
 801bc5c:	f89d 2010 	ldrb.w	r2, [sp, #16]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 801bc60:	3c02      	subs	r4, #2
 801bc62:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 801bc66:	b2a4      	uxth	r4, r4
   			if(sock_remained_size[sn] > 1514) 
 801bc68:	429c      	cmp	r4, r3
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 801bc6a:	f82b 4015 	strh.w	r4, [fp, r5, lsl #1]
   			if(sock_remained_size[sn] > 1514) 
 801bc6e:	d838      	bhi.n	801bce2 <recvfrom+0x22e>
   			sock_pack_info[sn] = PACK_FIRST;
 801bc70:	2380      	movs	r3, #128	; 0x80
 801bc72:	4f30      	ldr	r7, [pc, #192]	; (801bd34 <recvfrom+0x280>)
 801bc74:	557b      	strb	r3, [r7, r5]
 801bc76:	e7cd      	b.n	801bc14 <recvfrom+0x160>
	      if(sock_remained_size[sn] == 0)
 801bc78:	f83b 4015 	ldrh.w	r4, [fp, r5, lsl #1]
   			setSn_CR(sn,Sn_CR_RECV);
 801bc7c:	f10a 0601 	add.w	r6, sl, #1
	      if(sock_remained_size[sn] == 0)
 801bc80:	2c00      	cmp	r4, #0
 801bc82:	d1c6      	bne.n	801bc12 <recvfrom+0x15e>
   			wiz_recv_data(sn, head, 8);
 801bc84:	4628      	mov	r0, r5
 801bc86:	a904      	add	r1, sp, #16
 801bc88:	2208      	movs	r2, #8
 801bc8a:	f7ff f8ff 	bl	801ae8c <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 801bc8e:	4630      	mov	r0, r6
 801bc90:	2140      	movs	r1, #64	; 0x40
 801bc92:	f7fe ff4f 	bl	801ab34 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 801bc96:	4630      	mov	r0, r6
 801bc98:	f7fe ff6a 	bl	801ab70 <WIZCHIP_READ>
 801bc9c:	2800      	cmp	r0, #0
 801bc9e:	d1fa      	bne.n	801bc96 <recvfrom+0x1e2>
   			sock_pack_info[sn] = PACK_FIRST;
 801bca0:	2280      	movs	r2, #128	; 0x80
      			sock_remained_size[sn] = head[6];
 801bca2:	f89d 3016 	ldrb.w	r3, [sp, #22]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 801bca6:	f89d 4017 	ldrb.w	r4, [sp, #23]
      			*port = head[4];
 801bcaa:	f89d 1014 	ldrb.w	r1, [sp, #20]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 801bcae:	eb04 2403 	add.w	r4, r4, r3, lsl #8
      			*port = (*port << 8) + head[5];
 801bcb2:	f89d 3015 	ldrb.w	r3, [sp, #21]
               addr[0] = head[0];
 801bcb6:	9803      	ldr	r0, [sp, #12]
      			*port = (*port << 8) + head[5];
 801bcb8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
               addr[0] = head[0];
 801bcbc:	9904      	ldr	r1, [sp, #16]
   			sock_pack_info[sn] = PACK_FIRST;
 801bcbe:	4f1d      	ldr	r7, [pc, #116]	; (801bd34 <recvfrom+0x280>)
               addr[0] = head[0];
 801bcc0:	6001      	str	r1, [r0, #0]
      			*port = (*port << 8) + head[5];
 801bcc2:	9910      	ldr	r1, [sp, #64]	; 0x40
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 801bcc4:	b2a4      	uxth	r4, r4
      			*port = (*port << 8) + head[5];
 801bcc6:	800b      	strh	r3, [r1, #0]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 801bcc8:	f82b 4015 	strh.w	r4, [fp, r5, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 801bccc:	557a      	strb	r2, [r7, r5]
 801bcce:	e7a1      	b.n	801bc14 <recvfrom+0x160>
   CHECK_SOCKNUM();
 801bcd0:	f04f 38ff 	mov.w	r8, #4294967295
 801bcd4:	e758      	b.n	801bb88 <recvfrom+0xd4>
         return SOCKERR_SOCKMODE;
 801bcd6:	f06f 0804 	mvn.w	r8, #4
 801bcda:	e755      	b.n	801bb88 <recvfrom+0xd4>
   CHECK_SOCKDATA();
 801bcdc:	f06f 080d 	mvn.w	r8, #13
 801bce0:	e752      	b.n	801bb88 <recvfrom+0xd4>
	setSn_CR(sn,Sn_CR_CLOSE);
 801bce2:	2110      	movs	r1, #16
 801bce4:	4630      	mov	r0, r6
 801bce6:	f7fe ff25 	bl	801ab34 <WIZCHIP_WRITE>
	while( getSn_CR(sn) );
 801bcea:	4630      	mov	r0, r6
 801bcec:	f7fe ff40 	bl	801ab70 <WIZCHIP_READ>
 801bcf0:	4604      	mov	r4, r0
 801bcf2:	2800      	cmp	r0, #0
 801bcf4:	d1f9      	bne.n	801bcea <recvfrom+0x236>
	setSn_IR(sn, 0xFF);
 801bcf6:	21ff      	movs	r1, #255	; 0xff
 801bcf8:	f10a 0002 	add.w	r0, sl, #2
 801bcfc:	f7fe ff1a 	bl	801ab34 <WIZCHIP_WRITE>
	sock_io_mode &= ~(1<<sn);
 801bd00:	2301      	movs	r3, #1
 801bd02:	40ab      	lsls	r3, r5
 801bd04:	43db      	mvns	r3, r3
	sock_is_sending &= ~(1<<sn);
 801bd06:	490c      	ldr	r1, [pc, #48]	; (801bd38 <recvfrom+0x284>)
	sock_io_mode &= ~(1<<sn);
 801bd08:	f8b9 2000 	ldrh.w	r2, [r9]
	sock_is_sending &= ~(1<<sn);
 801bd0c:	8808      	ldrh	r0, [r1, #0]
	sock_io_mode &= ~(1<<sn);
 801bd0e:	b21b      	sxth	r3, r3
 801bd10:	401a      	ands	r2, r3
	sock_is_sending &= ~(1<<sn);
 801bd12:	4003      	ands	r3, r0
	sock_pack_info[sn] = 0;
 801bd14:	4807      	ldr	r0, [pc, #28]	; (801bd34 <recvfrom+0x280>)
	sock_remained_size[sn] = 0;
 801bd16:	f82b 4015 	strh.w	r4, [fp, r5, lsl #1]
	sock_io_mode &= ~(1<<sn);
 801bd1a:	f8a9 2000 	strh.w	r2, [r9]
	sock_is_sending &= ~(1<<sn);
 801bd1e:	800b      	strh	r3, [r1, #0]
	sock_pack_info[sn] = 0;
 801bd20:	5544      	strb	r4, [r0, r5]
	while(getSn_SR(sn) != SOCK_CLOSED);
 801bd22:	4640      	mov	r0, r8
 801bd24:	f7fe ff24 	bl	801ab70 <WIZCHIP_READ>
 801bd28:	2800      	cmp	r0, #0
 801bd2a:	d1fa      	bne.n	801bd22 <recvfrom+0x26e>
   			   return SOCKFATAL_PACKLEN;
 801bd2c:	f46f 787a 	mvn.w	r8, #1000	; 0x3e8
 801bd30:	e72a      	b.n	801bb88 <recvfrom+0xd4>
 801bd32:	bf00      	nop
 801bd34:	2001996c 	.word	0x2001996c
 801bd38:	2001996a 	.word	0x2001996a
 801bd3c:	20019970 	.word	0x20019970
 801bd40:	20019968 	.word	0x20019968

0801bd44 <setsockopt>:

int8_t  setsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
 // M20131220 : Remove warning
 //uint8_t tmp;
   CHECK_SOCKNUM();
 801bd44:	2804      	cmp	r0, #4
 801bd46:	d874      	bhi.n	801be32 <setsockopt+0xee>
 801bd48:	3901      	subs	r1, #1
{
 801bd4a:	b570      	push	{r4, r5, r6, lr}
 801bd4c:	4615      	mov	r5, r2
   switch(sotype)
 801bd4e:	2906      	cmp	r1, #6
 801bd50:	d875      	bhi.n	801be3e <setsockopt+0xfa>
 801bd52:	e8df f001 	tbb	[pc, r1]
 801bd56:	5f14      	.short	0x5f14
 801bd58:	43342b1c 	.word	0x43342b1c
 801bd5c:	04          	.byte	0x04
 801bd5d:	00          	.byte	0x00
         		}
            }
         break;
   #if !( (_WIZCHIP_ == 5100) || (_WIZCHIP_ == 5200) )
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
 801bd5e:	3004      	adds	r0, #4
 801bd60:	0204      	lsls	r4, r0, #8
 801bd62:	4620      	mov	r0, r4
 801bd64:	f7fe ff04 	bl	801ab70 <WIZCHIP_READ>
 801bd68:	f000 060f 	and.w	r6, r0, #15
 801bd6c:	2e01      	cmp	r6, #1
 801bd6e:	d163      	bne.n	801be38 <setsockopt+0xf4>
         setSn_KPALVTR(sn,*(uint8_t*)arg);
 801bd70:	f104 0030 	add.w	r0, r4, #48	; 0x30
 801bd74:	7829      	ldrb	r1, [r5, #0]
 801bd76:	f7fe fedd 	bl	801ab34 <WIZCHIP_WRITE>
   #endif      
#endif   
      default:
         return SOCKERR_ARG;
   }   
   return SOCK_OK;
 801bd7a:	4630      	mov	r0, r6
}
 801bd7c:	bd70      	pop	{r4, r5, r6, pc}
         setSn_TTL(sn,*(uint8_t*)arg);
 801bd7e:	0200      	lsls	r0, r0, #8
 801bd80:	7811      	ldrb	r1, [r2, #0]
 801bd82:	f200 4016 	addw	r0, r0, #1046	; 0x416
 801bd86:	f7fe fed5 	bl	801ab34 <WIZCHIP_WRITE>
   return SOCK_OK;
 801bd8a:	2001      	movs	r0, #1
}
 801bd8c:	bd70      	pop	{r4, r5, r6, pc}
         setSn_MSSR(sn,*(uint16_t*)arg);
 801bd8e:	8811      	ldrh	r1, [r2, #0]
 801bd90:	3004      	adds	r0, #4
 801bd92:	0204      	lsls	r4, r0, #8
 801bd94:	f104 0012 	add.w	r0, r4, #18
 801bd98:	0a09      	lsrs	r1, r1, #8
 801bd9a:	f7fe fecb 	bl	801ab34 <WIZCHIP_WRITE>
 801bd9e:	f104 0013 	add.w	r0, r4, #19
 801bda2:	7829      	ldrb	r1, [r5, #0]
 801bda4:	f7fe fec6 	bl	801ab34 <WIZCHIP_WRITE>
   return SOCK_OK;
 801bda8:	2001      	movs	r0, #1
}
 801bdaa:	bd70      	pop	{r4, r5, r6, pc}
         setSn_DIPR(sn, (uint8_t*)arg);
 801bdac:	0200      	lsls	r0, r0, #8
 801bdae:	4611      	mov	r1, r2
 801bdb0:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 801bdb4:	2204      	movs	r2, #4
 801bdb6:	f7fe fef9 	bl	801abac <WIZCHIP_WRITE_BUF>
   return SOCK_OK;
 801bdba:	2001      	movs	r0, #1
}
 801bdbc:	bd70      	pop	{r4, r5, r6, pc}
         setSn_DPORT(sn, *(uint16_t*)arg);
 801bdbe:	8811      	ldrh	r1, [r2, #0]
 801bdc0:	3004      	adds	r0, #4
 801bdc2:	0204      	lsls	r4, r0, #8
 801bdc4:	f104 0010 	add.w	r0, r4, #16
 801bdc8:	0a09      	lsrs	r1, r1, #8
 801bdca:	f7fe feb3 	bl	801ab34 <WIZCHIP_WRITE>
 801bdce:	f104 0011 	add.w	r0, r4, #17
 801bdd2:	7829      	ldrb	r1, [r5, #0]
 801bdd4:	f7fe feae 	bl	801ab34 <WIZCHIP_WRITE>
   return SOCK_OK;
 801bdd8:	2001      	movs	r0, #1
}
 801bdda:	bd70      	pop	{r4, r5, r6, pc}
         CHECK_SOCKMODE(Sn_MR_TCP);
 801bddc:	3004      	adds	r0, #4
 801bdde:	0204      	lsls	r4, r0, #8
 801bde0:	4620      	mov	r0, r4
 801bde2:	f7fe fec5 	bl	801ab70 <WIZCHIP_READ>
 801bde6:	f000 000f 	and.w	r0, r0, #15
 801bdea:	2801      	cmp	r0, #1
 801bdec:	d124      	bne.n	801be38 <setsockopt+0xf4>
            setSn_CR(sn,Sn_CR_SEND_KEEP);
 801bdee:	1c65      	adds	r5, r4, #1
 801bdf0:	4628      	mov	r0, r5
 801bdf2:	2122      	movs	r1, #34	; 0x22
               if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 801bdf4:	3402      	adds	r4, #2
            setSn_CR(sn,Sn_CR_SEND_KEEP);
 801bdf6:	f7fe fe9d 	bl	801ab34 <WIZCHIP_WRITE>
            while(getSn_CR(sn) != 0)
 801bdfa:	e004      	b.n	801be06 <setsockopt+0xc2>
               if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 801bdfc:	4620      	mov	r0, r4
 801bdfe:	f7fe feb7 	bl	801ab70 <WIZCHIP_READ>
 801be02:	0703      	lsls	r3, r0, #28
 801be04:	d40e      	bmi.n	801be24 <setsockopt+0xe0>
            while(getSn_CR(sn) != 0)
 801be06:	4628      	mov	r0, r5
 801be08:	f7fe feb2 	bl	801ab70 <WIZCHIP_READ>
 801be0c:	2800      	cmp	r0, #0
 801be0e:	d1f5      	bne.n	801bdfc <setsockopt+0xb8>
   return SOCK_OK;
 801be10:	2001      	movs	r0, #1
}
 801be12:	bd70      	pop	{r4, r5, r6, pc}
         setSn_TOS(sn,*(uint8_t*)arg);
 801be14:	0200      	lsls	r0, r0, #8
 801be16:	7811      	ldrb	r1, [r2, #0]
 801be18:	f200 4015 	addw	r0, r0, #1045	; 0x415
 801be1c:	f7fe fe8a 	bl	801ab34 <WIZCHIP_WRITE>
   return SOCK_OK;
 801be20:	2001      	movs	r0, #1
}
 801be22:	bd70      	pop	{r4, r5, r6, pc}
         			setSn_IR(sn, Sn_IR_TIMEOUT);
 801be24:	4620      	mov	r0, r4
 801be26:	2108      	movs	r1, #8
 801be28:	f7fe fe84 	bl	801ab34 <WIZCHIP_WRITE>
                  return SOCKERR_TIMEOUT;
 801be2c:	f06f 000c 	mvn.w	r0, #12
}
 801be30:	bd70      	pop	{r4, r5, r6, pc}
   CHECK_SOCKNUM();
 801be32:	f04f 30ff 	mov.w	r0, #4294967295
}
 801be36:	4770      	bx	lr
         CHECK_SOCKMODE(Sn_MR_TCP);
 801be38:	f06f 0004 	mvn.w	r0, #4
}
 801be3c:	bd70      	pop	{r4, r5, r6, pc}
   CHECK_SOCKNUM();
 801be3e:	f06f 0009 	mvn.w	r0, #9
}
 801be42:	bd70      	pop	{r4, r5, r6, pc}

0801be44 <getsockopt>:

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
   CHECK_SOCKNUM();
 801be44:	2804      	cmp	r0, #4
{
 801be46:	b538      	push	{r3, r4, r5, lr}
   CHECK_SOCKNUM();
 801be48:	d879      	bhi.n	801bf3e <getsockopt+0xfa>
 801be4a:	4604      	mov	r4, r0
 801be4c:	4615      	mov	r5, r2
   switch(sotype)
 801be4e:	290c      	cmp	r1, #12
 801be50:	d808      	bhi.n	801be64 <getsockopt+0x20>
 801be52:	e8df f001 	tbb	[pc, r1]
 801be56:	3a31      	.short	0x3a31
 801be58:	655c4a42 	.word	0x655c4a42
 801be5c:	0b6f0707 	.word	0x0b6f0707
 801be60:	1a12      	.short	0x1a12
 801be62:	26          	.byte	0x26
 801be63:	00          	.byte	0x00
   CHECK_SOCKNUM();
 801be64:	f06f 0301 	mvn.w	r3, #1
         break;
      default:
         return SOCKERR_SOCKOPT;
   }
   return SOCK_OK;
}
 801be68:	4618      	mov	r0, r3
 801be6a:	bd38      	pop	{r3, r4, r5, pc}
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 801be6c:	4620      	mov	r0, r4
 801be6e:	f7fe ff17 	bl	801aca0 <getSn_RX_RSR>
   return SOCK_OK;
 801be72:	2301      	movs	r3, #1
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 801be74:	8028      	strh	r0, [r5, #0]
}
 801be76:	4618      	mov	r0, r3
 801be78:	bd38      	pop	{r3, r4, r5, pc}
         *(uint8_t*) arg = getSn_SR(sn);
 801be7a:	0200      	lsls	r0, r0, #8
 801be7c:	f200 4003 	addw	r0, r0, #1027	; 0x403
 801be80:	f7fe fe76 	bl	801ab70 <WIZCHIP_READ>
   return SOCK_OK;
 801be84:	2301      	movs	r3, #1
         *(uint8_t*) arg = getSn_SR(sn);
 801be86:	7028      	strb	r0, [r5, #0]
         break;
 801be88:	e7ee      	b.n	801be68 <getsockopt+0x24>
         if(getSn_MR(sn) & Sn_MR_TCP)
 801be8a:	3004      	adds	r0, #4
 801be8c:	0200      	lsls	r0, r0, #8
 801be8e:	f7fe fe6f 	bl	801ab70 <WIZCHIP_READ>
 801be92:	07c3      	lsls	r3, r0, #31
 801be94:	d4ea      	bmi.n	801be6c <getsockopt+0x28>
            *(uint16_t*)arg = sock_remained_size[sn];
 801be96:	4a2d      	ldr	r2, [pc, #180]	; (801bf4c <getsockopt+0x108>)
   return SOCK_OK;
 801be98:	2301      	movs	r3, #1
            *(uint16_t*)arg = sock_remained_size[sn];
 801be9a:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
 801be9e:	802a      	strh	r2, [r5, #0]
 801bea0:	e7e2      	b.n	801be68 <getsockopt+0x24>
         if((getSn_MR(sn) == Sn_MR_TCP))
 801bea2:	3004      	adds	r0, #4
 801bea4:	0200      	lsls	r0, r0, #8
 801bea6:	f7fe fe63 	bl	801ab70 <WIZCHIP_READ>
 801beaa:	2801      	cmp	r0, #1
 801beac:	d04a      	beq.n	801bf44 <getsockopt+0x100>
         *(uint8_t*)arg = sock_pack_info[sn];
 801beae:	4a28      	ldr	r2, [pc, #160]	; (801bf50 <getsockopt+0x10c>)
   return SOCK_OK;
 801beb0:	2301      	movs	r3, #1
         *(uint8_t*)arg = sock_pack_info[sn];
 801beb2:	5d12      	ldrb	r2, [r2, r4]
 801beb4:	702a      	strb	r2, [r5, #0]
         break;
 801beb6:	e7d7      	b.n	801be68 <getsockopt+0x24>
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
 801beb8:	3004      	adds	r0, #4
 801beba:	0200      	lsls	r0, r0, #8
 801bebc:	f7fe fe58 	bl	801ab70 <WIZCHIP_READ>
 801bec0:	f020 000f 	bic.w	r0, r0, #15
   return SOCK_OK;
 801bec4:	2301      	movs	r3, #1
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
 801bec6:	7028      	strb	r0, [r5, #0]
         break;
 801bec8:	e7ce      	b.n	801be68 <getsockopt+0x24>
         *(uint8_t*) arg = getSn_TTL(sn);
 801beca:	0200      	lsls	r0, r0, #8
 801becc:	f200 4016 	addw	r0, r0, #1046	; 0x416
 801bed0:	f7fe fe4e 	bl	801ab70 <WIZCHIP_READ>
   return SOCK_OK;
 801bed4:	2301      	movs	r3, #1
         *(uint8_t*) arg = getSn_TTL(sn);
 801bed6:	7028      	strb	r0, [r5, #0]
         break;
 801bed8:	e7c6      	b.n	801be68 <getsockopt+0x24>
         *(uint8_t*) arg = getSn_TOS(sn);
 801beda:	0200      	lsls	r0, r0, #8
 801bedc:	f200 4015 	addw	r0, r0, #1045	; 0x415
 801bee0:	f7fe fe46 	bl	801ab70 <WIZCHIP_READ>
   return SOCK_OK;
 801bee4:	2301      	movs	r3, #1
         *(uint8_t*) arg = getSn_TOS(sn);
 801bee6:	7028      	strb	r0, [r5, #0]
         break;
 801bee8:	e7be      	b.n	801be68 <getsockopt+0x24>
         *(uint16_t*) arg = getSn_MSSR(sn);
 801beea:	3404      	adds	r4, #4
 801beec:	0224      	lsls	r4, r4, #8
 801beee:	f104 0012 	add.w	r0, r4, #18
 801bef2:	f7fe fe3d 	bl	801ab70 <WIZCHIP_READ>
 801bef6:	4603      	mov	r3, r0
 801bef8:	f104 0013 	add.w	r0, r4, #19
         *(uint16_t*) arg = getSn_DPORT(sn);
 801befc:	461c      	mov	r4, r3
 801befe:	f7fe fe37 	bl	801ab70 <WIZCHIP_READ>
   return SOCK_OK;
 801bf02:	2301      	movs	r3, #1
         *(uint16_t*) arg = getSn_DPORT(sn);
 801bf04:	eb00 2004 	add.w	r0, r0, r4, lsl #8
 801bf08:	8028      	strh	r0, [r5, #0]
}
 801bf0a:	4618      	mov	r0, r3
 801bf0c:	bd38      	pop	{r3, r4, r5, pc}
         getSn_DIPR(sn, (uint8_t*)arg);
 801bf0e:	0200      	lsls	r0, r0, #8
 801bf10:	4611      	mov	r1, r2
 801bf12:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 801bf16:	2204      	movs	r2, #4
 801bf18:	f7fe fe70 	bl	801abfc <WIZCHIP_READ_BUF>
   return SOCK_OK;
 801bf1c:	2301      	movs	r3, #1
         break;
 801bf1e:	e7a3      	b.n	801be68 <getsockopt+0x24>
         *(uint16_t*) arg = getSn_DPORT(sn);
 801bf20:	3404      	adds	r4, #4
 801bf22:	0224      	lsls	r4, r4, #8
 801bf24:	f104 0010 	add.w	r0, r4, #16
 801bf28:	f7fe fe22 	bl	801ab70 <WIZCHIP_READ>
 801bf2c:	4603      	mov	r3, r0
 801bf2e:	f104 0011 	add.w	r0, r4, #17
 801bf32:	e7e3      	b.n	801befc <getsockopt+0xb8>
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 801bf34:	f7fe fe8a 	bl	801ac4c <getSn_TX_FSR>
   return SOCK_OK;
 801bf38:	2301      	movs	r3, #1
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 801bf3a:	8028      	strh	r0, [r5, #0]
         break;
 801bf3c:	e794      	b.n	801be68 <getsockopt+0x24>
   CHECK_SOCKNUM();
 801bf3e:	f04f 33ff 	mov.w	r3, #4294967295
 801bf42:	e791      	b.n	801be68 <getsockopt+0x24>
             return SOCKERR_SOCKMODE;
 801bf44:	f06f 0304 	mvn.w	r3, #4
 801bf48:	e78e      	b.n	801be68 <getsockopt+0x24>
 801bf4a:	bf00      	nop
 801bf4c:	20019970 	.word	0x20019970
 801bf50:	2001996c 	.word	0x2001996c

0801bf54 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 801bf54:	4770      	bx	lr
 801bf56:	bf00      	nop

0801bf58 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 801bf58:	7800      	ldrb	r0, [r0, #0]
 801bf5a:	4770      	bx	lr

0801bf5c <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 801bf5c:	7001      	strb	r1, [r0, #0]
 801bf5e:	4770      	bx	lr

0801bf60 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 801bf60:	2000      	movs	r0, #0
 801bf62:	4770      	bx	lr

0801bf64 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 801bf64:	4770      	bx	lr
 801bf66:	bf00      	nop

0801bf68 <wizchip_bus_readburst>:
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}


void wizchip_bus_readburst(uint32_t addr,uint8_t* pBuf,uint32_t len) {}
 801bf68:	4770      	bx	lr
 801bf6a:	bf00      	nop

0801bf6c <wizchip_bus_writeburst>:
 801bf6c:	4770      	bx	lr
 801bf6e:	bf00      	nop

0801bf70 <wizchip_cs_deselect>:
 801bf70:	4770      	bx	lr
 801bf72:	bf00      	nop

0801bf74 <wizchip_cris_exit>:
 801bf74:	4770      	bx	lr
 801bf76:	bf00      	nop

0801bf78 <wizchip_cs_select>:
 801bf78:	4770      	bx	lr
 801bf7a:	bf00      	nop

0801bf7c <reg_wizchip_cs_cbfunc>:
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
   if(!cs_sel || !cs_desel)
 801bf7c:	b120      	cbz	r0, 801bf88 <reg_wizchip_cs_cbfunc+0xc>
 801bf7e:	b119      	cbz	r1, 801bf88 <reg_wizchip_cs_cbfunc+0xc>
 801bf80:	4b04      	ldr	r3, [pc, #16]	; (801bf94 <reg_wizchip_cs_cbfunc+0x18>)
 801bf82:	e9c3 0104 	strd	r0, r1, [r3, #16]
   else
   {
      WIZCHIP.CS._select   = cs_sel;
      WIZCHIP.CS._deselect = cs_desel;
   }
}
 801bf86:	4770      	bx	lr
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 801bf88:	4903      	ldr	r1, [pc, #12]	; (801bf98 <reg_wizchip_cs_cbfunc+0x1c>)
      WIZCHIP.CS._select   = wizchip_cs_select;
 801bf8a:	4804      	ldr	r0, [pc, #16]	; (801bf9c <reg_wizchip_cs_cbfunc+0x20>)
 801bf8c:	4b01      	ldr	r3, [pc, #4]	; (801bf94 <reg_wizchip_cs_cbfunc+0x18>)
 801bf8e:	e9c3 0104 	strd	r0, r1, [r3, #16]
}
 801bf92:	4770      	bx	lr
 801bf94:	2001823c 	.word	0x2001823c
 801bf98:	0801bf71 	.word	0x0801bf71
 801bf9c:	0801bf79 	.word	0x0801bf79

0801bfa0 <reg_wizchip_spi_cbfunc>:
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 801bfa0:	4b07      	ldr	r3, [pc, #28]	; (801bfc0 <reg_wizchip_spi_cbfunc+0x20>)
 801bfa2:	881a      	ldrh	r2, [r3, #0]
 801bfa4:	0592      	lsls	r2, r2, #22
 801bfa6:	d400      	bmi.n	801bfaa <reg_wizchip_spi_cbfunc+0xa>
 801bfa8:	e7fe      	b.n	801bfa8 <reg_wizchip_spi_cbfunc+0x8>
   
   if(!spi_rb || !spi_wb)
 801bfaa:	b118      	cbz	r0, 801bfb4 <reg_wizchip_spi_cbfunc+0x14>
 801bfac:	b111      	cbz	r1, 801bfb4 <reg_wizchip_spi_cbfunc+0x14>
 801bfae:	e9c3 0106 	strd	r0, r1, [r3, #24]
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
   }
}
 801bfb2:	4770      	bx	lr
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 801bfb4:	4903      	ldr	r1, [pc, #12]	; (801bfc4 <reg_wizchip_spi_cbfunc+0x24>)
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 801bfb6:	4804      	ldr	r0, [pc, #16]	; (801bfc8 <reg_wizchip_spi_cbfunc+0x28>)
 801bfb8:	e9c3 0106 	strd	r0, r1, [r3, #24]
}
 801bfbc:	4770      	bx	lr
 801bfbe:	bf00      	nop
 801bfc0:	2001823c 	.word	0x2001823c
 801bfc4:	0801bf65 	.word	0x0801bf65
 801bfc8:	0801bf61 	.word	0x0801bf61

0801bfcc <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 801bfcc:	b500      	push	{lr}
 801bfce:	b087      	sub	sp, #28
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 801bfd0:	a904      	add	r1, sp, #16
 801bfd2:	2206      	movs	r2, #6
 801bfd4:	2009      	movs	r0, #9
 801bfd6:	f7fe fe11 	bl	801abfc <WIZCHIP_READ_BUF>
   getGAR(gw);
 801bfda:	a901      	add	r1, sp, #4
 801bfdc:	2204      	movs	r2, #4
 801bfde:	2001      	movs	r0, #1
 801bfe0:	f7fe fe0c 	bl	801abfc <WIZCHIP_READ_BUF>
   getSUBR(sn);  getSIPR(sip);
 801bfe4:	a902      	add	r1, sp, #8
 801bfe6:	2204      	movs	r2, #4
 801bfe8:	2005      	movs	r0, #5
 801bfea:	f7fe fe07 	bl	801abfc <WIZCHIP_READ_BUF>
 801bfee:	2204      	movs	r2, #4
 801bff0:	a903      	add	r1, sp, #12
 801bff2:	200f      	movs	r0, #15
 801bff4:	f7fe fe02 	bl	801abfc <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 801bff8:	2180      	movs	r1, #128	; 0x80
 801bffa:	2000      	movs	r0, #0
 801bffc:	f7fe fd9a 	bl	801ab34 <WIZCHIP_WRITE>
   getMR(); // for delay
 801c000:	2000      	movs	r0, #0
 801c002:	f7fe fdb5 	bl	801ab70 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 801c006:	a904      	add	r1, sp, #16
 801c008:	2206      	movs	r2, #6
 801c00a:	2009      	movs	r0, #9
 801c00c:	f7fe fdce 	bl	801abac <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 801c010:	a901      	add	r1, sp, #4
 801c012:	2204      	movs	r2, #4
 801c014:	2001      	movs	r0, #1
 801c016:	f7fe fdc9 	bl	801abac <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 801c01a:	a902      	add	r1, sp, #8
 801c01c:	2204      	movs	r2, #4
 801c01e:	2005      	movs	r0, #5
 801c020:	f7fe fdc4 	bl	801abac <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 801c024:	2204      	movs	r2, #4
 801c026:	200f      	movs	r0, #15
 801c028:	a903      	add	r1, sp, #12
 801c02a:	f7fe fdbf 	bl	801abac <WIZCHIP_WRITE_BUF>
}
 801c02e:	b007      	add	sp, #28
 801c030:	f85d fb04 	ldr.w	pc, [sp], #4

0801c034 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 801c034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c038:	4606      	mov	r6, r0
 801c03a:	460c      	mov	r4, r1
   int8_t i,j;
   int8_t tmp = 0;
   wizchip_sw_reset();
 801c03c:	f7ff ffc6 	bl	801bfcc <wizchip_sw_reset>
   if(txsize)
 801c040:	2e00      	cmp	r6, #0
 801c042:	d038      	beq.n	801c0b6 <wizchip_init+0x82>
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
		{
			tmp += txsize[i];
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
 801c044:	f996 2000 	ldrsb.w	r2, [r6]
			tmp += txsize[i];
 801c048:	7833      	ldrb	r3, [r6, #0]
			if(tmp > 8) return -1;
 801c04a:	2a08      	cmp	r2, #8
 801c04c:	dc74      	bgt.n	801c138 <wizchip_init+0x104>
			tmp += txsize[i];
 801c04e:	7872      	ldrb	r2, [r6, #1]
 801c050:	4413      	add	r3, r2
			if(tmp > 8) return -1;
 801c052:	b25a      	sxtb	r2, r3
 801c054:	2a08      	cmp	r2, #8
			tmp += txsize[i];
 801c056:	b2db      	uxtb	r3, r3
			if(tmp > 8) return -1;
 801c058:	dc6e      	bgt.n	801c138 <wizchip_init+0x104>
			tmp += txsize[i];
 801c05a:	78b2      	ldrb	r2, [r6, #2]
 801c05c:	4413      	add	r3, r2
			if(tmp > 8) return -1;
 801c05e:	b25a      	sxtb	r2, r3
 801c060:	2a08      	cmp	r2, #8
			tmp += txsize[i];
 801c062:	b2db      	uxtb	r3, r3
			if(tmp > 8) return -1;
 801c064:	dc68      	bgt.n	801c138 <wizchip_init+0x104>
			tmp += txsize[i];
 801c066:	78f2      	ldrb	r2, [r6, #3]
 801c068:	4413      	add	r3, r2
			if(tmp > 8) return -1;
 801c06a:	b25b      	sxtb	r3, r3
 801c06c:	2b08      	cmp	r3, #8
 801c06e:	dc63      	bgt.n	801c138 <wizchip_init+0x104>
 801c070:	2700      	movs	r7, #0
		{
		#if __WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			j = 0;
			//while(txsize[i] >> j != 1){j++;}
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
 801c072:	2503      	movs	r5, #3
 801c074:	3e01      	subs	r6, #1
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
 801c076:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 801c07a:	2801      	cmp	r0, #1
 801c07c:	d059      	beq.n	801c132 <wizchip_init+0xfe>
			j = 0;
 801c07e:	2300      	movs	r3, #0
 801c080:	2800      	cmp	r0, #0
 801c082:	d056      	beq.n	801c132 <wizchip_init+0xfe>
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
 801c084:	3301      	adds	r3, #1
 801c086:	b25b      	sxtb	r3, r3
 801c088:	fa40 f203 	asr.w	r2, r0, r3
 801c08c:	2a01      	cmp	r2, #1
 801c08e:	d1f9      	bne.n	801c084 <wizchip_init+0x50>
 801c090:	40bb      	lsls	r3, r7
 801c092:	fa4f f883 	sxtb.w	r8, r3
			setSn_TXBUF_SIZE(i, j);
 801c096:	201b      	movs	r0, #27
 801c098:	f7fe fd6a 	bl	801ab70 <WIZCHIP_READ>
 801c09c:	fa05 f307 	lsl.w	r3, r5, r7
 801c0a0:	ea20 0003 	bic.w	r0, r0, r3
 801c0a4:	ea48 0100 	orr.w	r1, r8, r0
 801c0a8:	b2c9      	uxtb	r1, r1
 801c0aa:	201b      	movs	r0, #27
 801c0ac:	3702      	adds	r7, #2
 801c0ae:	f7fe fd41 	bl	801ab34 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801c0b2:	2f08      	cmp	r7, #8
 801c0b4:	d1df      	bne.n	801c076 <wizchip_init+0x42>
			setSn_TXBUF_SIZE(i, txsize[i]);
		#endif
		}
	#endif
   }
   if(rxsize)
 801c0b6:	2c00      	cmp	r4, #0
 801c0b8:	d038      	beq.n	801c12c <wizchip_init+0xf8>
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
		{
			tmp += rxsize[i];
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
 801c0ba:	f994 2000 	ldrsb.w	r2, [r4]
			tmp += rxsize[i];
 801c0be:	7823      	ldrb	r3, [r4, #0]
			if(tmp > 8) return -1;
 801c0c0:	2a08      	cmp	r2, #8
 801c0c2:	dc39      	bgt.n	801c138 <wizchip_init+0x104>
			tmp += rxsize[i];
 801c0c4:	7862      	ldrb	r2, [r4, #1]
 801c0c6:	4413      	add	r3, r2
			if(tmp > 8) return -1;
 801c0c8:	b25a      	sxtb	r2, r3
 801c0ca:	2a08      	cmp	r2, #8
			tmp += rxsize[i];
 801c0cc:	b2db      	uxtb	r3, r3
			if(tmp > 8) return -1;
 801c0ce:	dc33      	bgt.n	801c138 <wizchip_init+0x104>
			tmp += rxsize[i];
 801c0d0:	78a2      	ldrb	r2, [r4, #2]
 801c0d2:	4413      	add	r3, r2
			if(tmp > 8) return -1;
 801c0d4:	b25a      	sxtb	r2, r3
 801c0d6:	2a08      	cmp	r2, #8
			tmp += rxsize[i];
 801c0d8:	b2db      	uxtb	r3, r3
			if(tmp > 8) return -1;
 801c0da:	dc2d      	bgt.n	801c138 <wizchip_init+0x104>
			tmp += rxsize[i];
 801c0dc:	78e2      	ldrb	r2, [r4, #3]
 801c0de:	4413      	add	r3, r2
			if(tmp > 8) return -1;
 801c0e0:	b25b      	sxtb	r3, r3
 801c0e2:	2b08      	cmp	r3, #8
 801c0e4:	dc28      	bgt.n	801c138 <wizchip_init+0x104>
 801c0e6:	2700      	movs	r7, #0
		{
		#if __WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			j = 0;
			//while(rxsize[i] >> j != 1){j++;}
			while((rxsize[i] >> j != 1)&&(rxsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
 801c0e8:	2603      	movs	r6, #3
 801c0ea:	3c01      	subs	r4, #1
			while((rxsize[i] >> j != 1)&&(rxsize[i] !=0)){j++;}
 801c0ec:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 801c0f0:	2d01      	cmp	r5, #1
 801c0f2:	bf08      	it	eq
 801c0f4:	2500      	moveq	r5, #0
 801c0f6:	d009      	beq.n	801c10c <wizchip_init+0xd8>
 801c0f8:	b145      	cbz	r5, 801c10c <wizchip_init+0xd8>
			j = 0;
 801c0fa:	2300      	movs	r3, #0
			while((rxsize[i] >> j != 1)&&(rxsize[i] !=0)){j++;}
 801c0fc:	3301      	adds	r3, #1
 801c0fe:	b25b      	sxtb	r3, r3
 801c100:	fa45 f203 	asr.w	r2, r5, r3
 801c104:	2a01      	cmp	r2, #1
 801c106:	d1f9      	bne.n	801c0fc <wizchip_init+0xc8>
 801c108:	40bb      	lsls	r3, r7
 801c10a:	b25d      	sxtb	r5, r3
			setSn_RXBUF_SIZE(i, j);
 801c10c:	201a      	movs	r0, #26
 801c10e:	f7fe fd2f 	bl	801ab70 <WIZCHIP_READ>
 801c112:	fa06 f107 	lsl.w	r1, r6, r7
 801c116:	ea20 0001 	bic.w	r0, r0, r1
 801c11a:	ea45 0100 	orr.w	r1, r5, r0
 801c11e:	b2c9      	uxtb	r1, r1
 801c120:	201a      	movs	r0, #26
 801c122:	3702      	adds	r7, #2
 801c124:	f7fe fd06 	bl	801ab34 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801c128:	2f08      	cmp	r7, #8
 801c12a:	d1df      	bne.n	801c0ec <wizchip_init+0xb8>
		#endif
		}
	#endif
   }

   return 0;
 801c12c:	2000      	movs	r0, #0
}
 801c12e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
 801c132:	f04f 0800 	mov.w	r8, #0
 801c136:	e7ae      	b.n	801c096 <wizchip_init+0x62>
			if(tmp > 8) return -1;
 801c138:	f04f 30ff 	mov.w	r0, #4294967295
}
 801c13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c140 <ctlwizchip>:
{
 801c140:	b510      	push	{r4, lr}
 801c142:	460c      	mov	r4, r1
 801c144:	2808      	cmp	r0, #8
 801c146:	d815      	bhi.n	801c174 <ctlwizchip+0x34>
 801c148:	e8df f000 	tbb	[pc, r0]
 801c14c:	2a221b17 	.word	0x2a221b17
 801c150:	14143d32 	.word	0x14143d32
 801c154:	05          	.byte	0x05
 801c155:	00          	.byte	0x00
         ((uint8_t*)arg)[5] = 0;
 801c156:	2200      	movs	r2, #0
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 801c158:	4b21      	ldr	r3, [pc, #132]	; (801c1e0 <ctlwizchip+0xa0>)
   return 0;
 801c15a:	4610      	mov	r0, r2
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 801c15c:	7899      	ldrb	r1, [r3, #2]
 801c15e:	7021      	strb	r1, [r4, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 801c160:	78d9      	ldrb	r1, [r3, #3]
 801c162:	7061      	strb	r1, [r4, #1]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 801c164:	7919      	ldrb	r1, [r3, #4]
 801c166:	70a1      	strb	r1, [r4, #2]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 801c168:	7959      	ldrb	r1, [r3, #5]
 801c16a:	70e1      	strb	r1, [r4, #3]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 801c16c:	799b      	ldrb	r3, [r3, #6]
         ((uint8_t*)arg)[5] = 0;
 801c16e:	7162      	strb	r2, [r4, #5]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 801c170:	7123      	strb	r3, [r4, #4]
}
 801c172:	bd10      	pop	{r4, pc}
   return 0;
 801c174:	f04f 30ff 	mov.w	r0, #4294967295
}
 801c178:	bd10      	pop	{r4, pc}
         wizchip_sw_reset();
 801c17a:	f7ff ff27 	bl	801bfcc <wizchip_sw_reset>
   return 0;
 801c17e:	2000      	movs	r0, #0
}
 801c180:	bd10      	pop	{r4, pc}
         if(arg != 0) 
 801c182:	b101      	cbz	r1, 801c186 <ctlwizchip+0x46>
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 801c184:	3104      	adds	r1, #4
         return wizchip_init(ptmp[0], ptmp[1]);
 801c186:	4620      	mov	r0, r4
}
 801c188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
         return wizchip_init(ptmp[0], ptmp[1]);
 801c18c:	f7ff bf52 	b.w	801c034 <wizchip_init>
{
   uint8_t ir  = 0;
   uint8_t sir = 0;
   uint16_t ret = 0;
#if _WIZCHIP_ <= W5100S
   ir = getIR();
 801c190:	2015      	movs	r0, #21
 801c192:	f7fe fced 	bl	801ab70 <WIZCHIP_READ>
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
  ret = (ret << 8) + ir;
 801c196:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
 801c19a:	8020      	strh	r0, [r4, #0]
   return 0;
 801c19c:	2000      	movs	r0, #0
}
 801c19e:	bd10      	pop	{r4, pc}
         wizchip_clrinterrupt(*((intr_kind*)arg));
 801c1a0:	8809      	ldrh	r1, [r1, #0]
   setIR(ir);
 801c1a2:	2015      	movs	r0, #21
 801c1a4:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
 801c1a8:	f7fe fcc4 	bl	801ab34 <WIZCHIP_WRITE>
   return 0;
 801c1ac:	2000      	movs	r0, #0
}
 801c1ae:	bd10      	pop	{r4, pc}
         wizchip_setinterruptmask(*((intr_kind*)arg));
 801c1b0:	880b      	ldrh	r3, [r1, #0]
#endif
   
#if _WIZCHIP_ < W5200
   simr &= 0x0F;
   imr |= simr;
   setIMR(imr);
 801c1b2:	2016      	movs	r0, #22
   imr &= ~(1<<4); // IK_WOL
 801c1b4:	f003 01ef 	and.w	r1, r3, #239	; 0xef
   simr &= 0x0F;
 801c1b8:	f3c3 2303 	ubfx	r3, r3, #8, #4
   setIMR(imr);
 801c1bc:	4319      	orrs	r1, r3
 801c1be:	f7fe fcb9 	bl	801ab34 <WIZCHIP_WRITE>
   return 0;
 801c1c2:	2000      	movs	r0, #0
}
 801c1c4:	bd10      	pop	{r4, pc}
{
   uint8_t imr  = 0;
   uint8_t simr = 0;
   uint16_t ret = 0;
#if _WIZCHIP_ < W5200
   imr  = getIMR();
 801c1c6:	2016      	movs	r0, #22
 801c1c8:	f7fe fcd2 	bl	801ab70 <WIZCHIP_READ>
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 801c1cc:	f000 030f 	and.w	r3, r0, #15
  ret = (ret << 8) + imr;
 801c1d0:	f000 00ef 	and.w	r0, r0, #239	; 0xef
 801c1d4:	eb00 2003 	add.w	r0, r0, r3, lsl #8
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 801c1d8:	8020      	strh	r0, [r4, #0]
   return 0;
 801c1da:	2000      	movs	r0, #0
}
 801c1dc:	bd10      	pop	{r4, pc}
 801c1de:	bf00      	nop
 801c1e0:	2001823c 	.word	0x2001823c

0801c1e4 <wizphy_getphylink>:
  return (intr_kind)ret;
}

int8_t wizphy_getphylink(void)
{
 801c1e4:	b508      	push	{r3, lr}
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
      tmp = PHY_LINK_ON;
      tmp = PHY_LINK_OFF;
   
#elif _WIZCHIP_ == W5100S
   if(getPHYSR() & PHYSR_CABOFF)
 801c1e6:	203c      	movs	r0, #60	; 0x3c
 801c1e8:	f7fe fcc2 	bl	801ab70 <WIZCHIP_READ>
 801c1ec:	43c0      	mvns	r0, r0
      tmp = PHY_LINK_ON;   
#else
   tmp = -1;
#endif
   return tmp;
}
 801c1ee:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 801c1f2:	bd08      	pop	{r3, pc}

0801c1f4 <wizchip_getnetinfo>:
   _DNS_[3] = pnetinfo->dns[3];
   _DHCP_   = pnetinfo->dhcp;
}

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 801c1f4:	b530      	push	{r4, r5, lr}
 801c1f6:	4604      	mov	r4, r0
 801c1f8:	b083      	sub	sp, #12

   getGAR(pnetinfo->gw);
 801c1fa:	f100 010e 	add.w	r1, r0, #14
 801c1fe:	2204      	movs	r2, #4
 801c200:	2001      	movs	r0, #1
 801c202:	f7fe fcfb 	bl	801abfc <WIZCHIP_READ_BUF>
   printf("GAR = %d,%d,%d,%d\r\n",pnetinfo->gw[0],pnetinfo->gw[1],pnetinfo->gw[2],pnetinfo->gw[3]);
 801c206:	7c62      	ldrb	r2, [r4, #17]
 801c208:	7c23      	ldrb	r3, [r4, #16]
 801c20a:	9200      	str	r2, [sp, #0]
 801c20c:	7be2      	ldrb	r2, [r4, #15]
 801c20e:	7ba1      	ldrb	r1, [r4, #14]
 801c210:	4810      	ldr	r0, [pc, #64]	; (801c254 <wizchip_getnetinfo+0x60>)
 801c212:	f013 fee9 	bl	802ffe8 <iprintf>
   getSUBR(pnetinfo->sn);
 801c216:	f104 010a 	add.w	r1, r4, #10
 801c21a:	2204      	movs	r2, #4
 801c21c:	2005      	movs	r0, #5
 801c21e:	f7fe fced 	bl	801abfc <WIZCHIP_READ_BUF>
   getSHAR(pnetinfo->mac);
 801c222:	4621      	mov	r1, r4
 801c224:	2206      	movs	r2, #6
 801c226:	2009      	movs	r0, #9
 801c228:	f7fe fce8 	bl	801abfc <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 801c22c:	1da1      	adds	r1, r4, #6
 801c22e:	2204      	movs	r2, #4
 801c230:	200f      	movs	r0, #15
 801c232:	f7fe fce3 	bl	801abfc <WIZCHIP_READ_BUF>

   pnetinfo->dns[0]= _DNS_[0];
 801c236:	4b08      	ldr	r3, [pc, #32]	; (801c258 <wizchip_getnetinfo+0x64>)
   pnetinfo->dns[1]= _DNS_[1];
   pnetinfo->dns[2]= _DNS_[2];
   pnetinfo->dns[3]= _DNS_[3];
   pnetinfo->dhcp  = _DHCP_;
 801c238:	4a08      	ldr	r2, [pc, #32]	; (801c25c <wizchip_getnetinfo+0x68>)
   pnetinfo->dns[0]= _DNS_[0];
 801c23a:	781d      	ldrb	r5, [r3, #0]
   pnetinfo->dns[1]= _DNS_[1];
 801c23c:	7858      	ldrb	r0, [r3, #1]
   pnetinfo->dns[2]= _DNS_[2];
 801c23e:	7899      	ldrb	r1, [r3, #2]
   pnetinfo->dhcp  = _DHCP_;
 801c240:	7812      	ldrb	r2, [r2, #0]
   pnetinfo->dns[3]= _DNS_[3];
 801c242:	78db      	ldrb	r3, [r3, #3]
   pnetinfo->dns[0]= _DNS_[0];
 801c244:	74a5      	strb	r5, [r4, #18]
   pnetinfo->dns[1]= _DNS_[1];
 801c246:	74e0      	strb	r0, [r4, #19]
   pnetinfo->dns[2]= _DNS_[2];
 801c248:	7521      	strb	r1, [r4, #20]
   pnetinfo->dns[3]= _DNS_[3];
 801c24a:	7563      	strb	r3, [r4, #21]
   pnetinfo->dhcp  = _DHCP_;
 801c24c:	75a2      	strb	r2, [r4, #22]
}
 801c24e:	b003      	add	sp, #12
 801c250:	bd30      	pop	{r4, r5, pc}
 801c252:	bf00      	nop
 801c254:	08033a14 	.word	0x08033a14
 801c258:	2001997c 	.word	0x2001997c
 801c25c:	20019978 	.word	0x20019978

0801c260 <ctlnetwork>:
{
 801c260:	b538      	push	{r3, r4, r5, lr}
 801c262:	460c      	mov	r4, r1
 801c264:	2805      	cmp	r0, #5
 801c266:	d85c      	bhi.n	801c322 <ctlnetwork+0xc2>
 801c268:	e8df f000 	tbb	[pc, r0]
 801c26c:	45373214 	.word	0x45373214
 801c270:	034c      	.short	0x034c
   setRTR(nettime->time_100us);
}

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
   nettime->retry_cnt = getRCR();
 801c272:	2019      	movs	r0, #25
 801c274:	f7fe fc7c 	bl	801ab70 <WIZCHIP_READ>
 801c278:	4603      	mov	r3, r0
   nettime->time_100us = getRTR();
 801c27a:	2017      	movs	r0, #23
   nettime->retry_cnt = getRCR();
 801c27c:	7023      	strb	r3, [r4, #0]
   nettime->time_100us = getRTR();
 801c27e:	f7fe fc77 	bl	801ab70 <WIZCHIP_READ>
 801c282:	4605      	mov	r5, r0
 801c284:	2018      	movs	r0, #24
 801c286:	f7fe fc73 	bl	801ab70 <WIZCHIP_READ>
 801c28a:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 801c28e:	8060      	strh	r0, [r4, #2]
   return 0;
 801c290:	2000      	movs	r0, #0
}
 801c292:	bd38      	pop	{r3, r4, r5, pc}
   setSHAR(pnetinfo->mac);
 801c294:	2206      	movs	r2, #6
 801c296:	2009      	movs	r0, #9
 801c298:	f7fe fc88 	bl	801abac <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 801c29c:	f104 010e 	add.w	r1, r4, #14
 801c2a0:	2204      	movs	r2, #4
 801c2a2:	2001      	movs	r0, #1
 801c2a4:	f7fe fc82 	bl	801abac <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 801c2a8:	f104 010a 	add.w	r1, r4, #10
 801c2ac:	2204      	movs	r2, #4
 801c2ae:	2005      	movs	r0, #5
 801c2b0:	f7fe fc7c 	bl	801abac <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 801c2b4:	1da1      	adds	r1, r4, #6
 801c2b6:	2204      	movs	r2, #4
 801c2b8:	200f      	movs	r0, #15
 801c2ba:	f7fe fc77 	bl	801abac <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 801c2be:	f8d4 0012 	ldr.w	r0, [r4, #18]
 801c2c2:	4919      	ldr	r1, [pc, #100]	; (801c328 <ctlnetwork+0xc8>)
   _DHCP_   = pnetinfo->dhcp;
 801c2c4:	7da2      	ldrb	r2, [r4, #22]
 801c2c6:	4b19      	ldr	r3, [pc, #100]	; (801c32c <ctlnetwork+0xcc>)
   _DNS_[0] = pnetinfo->dns[0];
 801c2c8:	6008      	str	r0, [r1, #0]
   _DHCP_   = pnetinfo->dhcp;
 801c2ca:	701a      	strb	r2, [r3, #0]
   return 0;
 801c2cc:	2000      	movs	r0, #0
}
 801c2ce:	bd38      	pop	{r3, r4, r5, pc}
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 801c2d0:	4608      	mov	r0, r1
 801c2d2:	f7ff ff8f 	bl	801c1f4 <wizchip_getnetinfo>
   return 0;
 801c2d6:	2000      	movs	r0, #0
}
 801c2d8:	bd38      	pop	{r3, r4, r5, pc}
         return wizchip_setnetmode(*(netmode_type*)arg);
 801c2da:	780d      	ldrb	r5, [r1, #0]
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
 801c2dc:	f035 0438 	bics.w	r4, r5, #56	; 0x38
 801c2e0:	d11f      	bne.n	801c322 <ctlnetwork+0xc2>
   tmp = getMR();
 801c2e2:	4620      	mov	r0, r4
 801c2e4:	f7fe fc44 	bl	801ab70 <WIZCHIP_READ>
   tmp |= (uint8_t)netmode;
 801c2e8:	4328      	orrs	r0, r5
   setMR(tmp);
 801c2ea:	b2c1      	uxtb	r1, r0
 801c2ec:	4620      	mov	r0, r4
 801c2ee:	f7fe fc21 	bl	801ab34 <WIZCHIP_WRITE>
   return 0;
 801c2f2:	4620      	mov	r0, r4
}
 801c2f4:	bd38      	pop	{r3, r4, r5, pc}
   return (netmode_type) getMR();
 801c2f6:	2000      	movs	r0, #0
 801c2f8:	f7fe fc3a 	bl	801ab70 <WIZCHIP_READ>
 801c2fc:	4603      	mov	r3, r0
         *(netmode_type*)arg = wizchip_getnetmode();
 801c2fe:	7023      	strb	r3, [r4, #0]
   return 0;
 801c300:	2000      	movs	r0, #0
}
 801c302:	bd38      	pop	{r3, r4, r5, pc}
   setRCR(nettime->retry_cnt);
 801c304:	2019      	movs	r0, #25
 801c306:	7809      	ldrb	r1, [r1, #0]
 801c308:	f7fe fc14 	bl	801ab34 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 801c30c:	8861      	ldrh	r1, [r4, #2]
 801c30e:	2017      	movs	r0, #23
 801c310:	0a09      	lsrs	r1, r1, #8
 801c312:	f7fe fc0f 	bl	801ab34 <WIZCHIP_WRITE>
 801c316:	2018      	movs	r0, #24
 801c318:	78a1      	ldrb	r1, [r4, #2]
 801c31a:	f7fe fc0b 	bl	801ab34 <WIZCHIP_WRITE>
   return 0;
 801c31e:	2000      	movs	r0, #0
}
 801c320:	bd38      	pop	{r3, r4, r5, pc}
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
 801c322:	f04f 30ff 	mov.w	r0, #4294967295
}
 801c326:	bd38      	pop	{r3, r4, r5, pc}
 801c328:	2001997c 	.word	0x2001997c
 801c32c:	20019978 	.word	0x20019978

0801c330 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 801c330:	b508      	push	{r3, lr}
   setSIPR(DHCP_allocated_ip);
 801c332:	2204      	movs	r2, #4
 801c334:	200f      	movs	r0, #15
 801c336:	4907      	ldr	r1, [pc, #28]	; (801c354 <default_ip_assign+0x24>)
 801c338:	f7fe fc38 	bl	801abac <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 801c33c:	2204      	movs	r2, #4
 801c33e:	2005      	movs	r0, #5
 801c340:	4905      	ldr	r1, [pc, #20]	; (801c358 <default_ip_assign+0x28>)
 801c342:	f7fe fc33 	bl	801abac <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
}
 801c346:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   setGAR (DHCP_allocated_gw);
 801c34a:	2204      	movs	r2, #4
 801c34c:	2001      	movs	r0, #1
 801c34e:	4903      	ldr	r1, [pc, #12]	; (801c35c <default_ip_assign+0x2c>)
 801c350:	f7fe bc2c 	b.w	801abac <WIZCHIP_WRITE_BUF>
 801c354:	20019988 	.word	0x20019988
 801c358:	2001998c 	.word	0x2001998c
 801c35c:	20019984 	.word	0x20019984

0801c360 <default_ip_conflict>:
   setSHAR(DHCP_CHADDR);
}

/* The default handler of ip chaged */
void default_ip_conflict(void)
{
 801c360:	b508      	push	{r3, lr}
	// WIZchip Software Reset
	setMR(MR_RST);
 801c362:	2180      	movs	r1, #128	; 0x80
 801c364:	2000      	movs	r0, #0
 801c366:	f7fe fbe5 	bl	801ab34 <WIZCHIP_WRITE>
	getMR(); // for delay
 801c36a:	2000      	movs	r0, #0
 801c36c:	f7fe fc00 	bl	801ab70 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
}
 801c370:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	setSHAR(DHCP_CHADDR);
 801c374:	2206      	movs	r2, #6
 801c376:	2009      	movs	r0, #9
 801c378:	4901      	ldr	r1, [pc, #4]	; (801c380 <default_ip_conflict+0x20>)
 801c37a:	f7fe bc17 	b.w	801abac <WIZCHIP_WRITE_BUF>
 801c37e:	bf00      	nop
 801c380:	2001fe74 	.word	0x2001fe74

0801c384 <default_ip_update>:
{
 801c384:	b508      	push	{r3, lr}
   setMR(MR_RST);
 801c386:	2180      	movs	r1, #128	; 0x80
 801c388:	2000      	movs	r0, #0
 801c38a:	f7fe fbd3 	bl	801ab34 <WIZCHIP_WRITE>
   getMR(); // for delay
 801c38e:	2000      	movs	r0, #0
 801c390:	f7fe fbee 	bl	801ab70 <WIZCHIP_READ>
   setSIPR(DHCP_allocated_ip);
 801c394:	2204      	movs	r2, #4
 801c396:	200f      	movs	r0, #15
 801c398:	4909      	ldr	r1, [pc, #36]	; (801c3c0 <default_ip_update+0x3c>)
 801c39a:	f7fe fc07 	bl	801abac <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 801c39e:	2204      	movs	r2, #4
 801c3a0:	2005      	movs	r0, #5
 801c3a2:	4908      	ldr	r1, [pc, #32]	; (801c3c4 <default_ip_update+0x40>)
 801c3a4:	f7fe fc02 	bl	801abac <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 801c3a8:	2204      	movs	r2, #4
 801c3aa:	2001      	movs	r0, #1
 801c3ac:	4906      	ldr	r1, [pc, #24]	; (801c3c8 <default_ip_update+0x44>)
 801c3ae:	f7fe fbfd 	bl	801abac <WIZCHIP_WRITE_BUF>
}
 801c3b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   setSHAR(DHCP_CHADDR);
 801c3b6:	2206      	movs	r2, #6
 801c3b8:	2009      	movs	r0, #9
 801c3ba:	4904      	ldr	r1, [pc, #16]	; (801c3cc <default_ip_update+0x48>)
 801c3bc:	f7fe bbf6 	b.w	801abac <WIZCHIP_WRITE_BUF>
 801c3c0:	20019988 	.word	0x20019988
 801c3c4:	2001998c 	.word	0x2001998c
 801c3c8:	20019984 	.word	0x20019984
 801c3cc:	2001fe74 	.word	0x2001fe74

0801c3d0 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 801c3d0:	b430      	push	{r4, r5}
   dhcp_ip_assign   = default_ip_assign;
   dhcp_ip_update   = default_ip_update;
   dhcp_ip_conflict = default_ip_conflict;
 801c3d2:	4b0a      	ldr	r3, [pc, #40]	; (801c3fc <reg_dhcp_cbfunc+0x2c>)
   dhcp_ip_assign   = default_ip_assign;
 801c3d4:	4d0a      	ldr	r5, [pc, #40]	; (801c400 <reg_dhcp_cbfunc+0x30>)
   dhcp_ip_update   = default_ip_update;
 801c3d6:	4c0b      	ldr	r4, [pc, #44]	; (801c404 <reg_dhcp_cbfunc+0x34>)
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 801c3d8:	2800      	cmp	r0, #0
 801c3da:	bf08      	it	eq
 801c3dc:	4628      	moveq	r0, r5
   if(ip_update)   dhcp_ip_update = ip_update;
 801c3de:	2900      	cmp	r1, #0
 801c3e0:	bf08      	it	eq
 801c3e2:	4621      	moveq	r1, r4
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 801c3e4:	2a00      	cmp	r2, #0
 801c3e6:	bf08      	it	eq
 801c3e8:	461a      	moveq	r2, r3
   dhcp_ip_assign   = default_ip_assign;
 801c3ea:	4d07      	ldr	r5, [pc, #28]	; (801c408 <reg_dhcp_cbfunc+0x38>)
   dhcp_ip_update   = default_ip_update;
 801c3ec:	4c07      	ldr	r4, [pc, #28]	; (801c40c <reg_dhcp_cbfunc+0x3c>)
   dhcp_ip_conflict = default_ip_conflict;
 801c3ee:	4b08      	ldr	r3, [pc, #32]	; (801c410 <reg_dhcp_cbfunc+0x40>)
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 801c3f0:	6028      	str	r0, [r5, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 801c3f2:	6021      	str	r1, [r4, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 801c3f4:	601a      	str	r2, [r3, #0]
}
 801c3f6:	bc30      	pop	{r4, r5}
 801c3f8:	4770      	bx	lr
 801c3fa:	bf00      	nop
 801c3fc:	0801c361 	.word	0x0801c361
 801c400:	0801c331 	.word	0x0801c331
 801c404:	0801c385 	.word	0x0801c385
 801c408:	2001826c 	.word	0x2001826c
 801c40c:	20018274 	.word	0x20018274
 801c410:	20018270 	.word	0x20018270

0801c414 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 801c414:	b570      	push	{r4, r5, r6, lr}
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
	pDHCPMSG->secs    = DHCP_SECS;
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 801c416:	2500      	movs	r5, #0
	pDHCPMSG->secs    = DHCP_SECS;
 801c418:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
{
 801c41c:	b082      	sub	sp, #8
   getSHAR(bk_mac);
 801c41e:	4669      	mov	r1, sp
 801c420:	2206      	movs	r2, #6
 801c422:	2009      	movs	r0, #9
 801c424:	f7fe fbea 	bl	801abfc <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 801c428:	4b18      	ldr	r3, [pc, #96]	; (801c48c <makeDHCPMSG+0x78>)
 801c42a:	4a19      	ldr	r2, [pc, #100]	; (801c490 <makeDHCPMSG+0x7c>)
 801c42c:	681c      	ldr	r4, [r3, #0]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 801c42e:	4b19      	ldr	r3, [pc, #100]	; (801c494 <makeDHCPMSG+0x80>)
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 801c430:	6022      	str	r2, [r4, #0]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 801c432:	681b      	ldr	r3, [r3, #0]
	pDHCPMSG->giaddr[0] = 0;
	pDHCPMSG->giaddr[1] = 0;
	pDHCPMSG->giaddr[2] = 0;
	pDHCPMSG->giaddr[3] = 0;

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 801c434:	4a18      	ldr	r2, [pc, #96]	; (801c498 <makeDHCPMSG+0x84>)
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 801c436:	0e19      	lsrs	r1, r3, #24
 801c438:	7121      	strb	r1, [r4, #4]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 801c43a:	0c19      	lsrs	r1, r3, #16
 801c43c:	7161      	strb	r1, [r4, #5]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 801c43e:	0a19      	lsrs	r1, r3, #8
 801c440:	71a1      	strb	r1, [r4, #6]
	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 801c442:	7810      	ldrb	r0, [r2, #0]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 801c444:	7851      	ldrb	r1, [r2, #1]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 801c446:	f8d2 2002 	ldr.w	r2, [r2, #2]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 801c44a:	71e3      	strb	r3, [r4, #7]
	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 801c44c:	7720      	strb	r0, [r4, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 801c44e:	7761      	strb	r1, [r4, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 801c450:	f8c4 201e 	str.w	r2, [r4, #30]
 801c454:	4629      	mov	r1, r5
 801c456:	2240      	movs	r2, #64	; 0x40
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 801c458:	e9c4 5503 	strd	r5, r5, [r4, #12]
 801c45c:	e9c4 5505 	strd	r5, r5, [r4, #20]
	pDHCPMSG->secs    = DHCP_SECS;
 801c460:	60a6      	str	r6, [r4, #8]
 801c462:	f8c4 5022 	str.w	r5, [r4, #34]	; 0x22
 801c466:	f8c4 5026 	str.w	r5, [r4, #38]	; 0x26
 801c46a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 801c46e:	8565      	strh	r5, [r4, #42]	; 0x2a
 801c470:	f013 fcf9 	bl	802fe66 <memset>
 801c474:	4629      	mov	r1, r5
 801c476:	2280      	movs	r2, #128	; 0x80
 801c478:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 801c47c:	f013 fcf3 	bl	802fe66 <memset>
	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 801c480:	4b06      	ldr	r3, [pc, #24]	; (801c49c <makeDHCPMSG+0x88>)
 801c482:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
}
 801c486:	b002      	add	sp, #8
 801c488:	bd70      	pop	{r4, r5, r6, pc}
 801c48a:	bf00      	nop
 801c48c:	2001fe84 	.word	0x2001fe84
 801c490:	00060101 	.word	0x00060101
 801c494:	2001fe7c 	.word	0x2001fe7c
 801c498:	2001fe74 	.word	0x2001fe74
 801c49c:	63538263 	.word	0x63538263

0801c4a0 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 801c4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4a4:	b085      	sub	sp, #20
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
   
   makeDHCPMSG();
 801c4a6:	f7ff ffb5 	bl	801c414 <makeDHCPMSG>
	pDHCPMSG->OPT[k++] = 0x01;
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
	pDHCPMSG->OPT[k++] = 0x07;
 801c4aa:	f240 1107 	movw	r1, #263	; 0x107
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 801c4ae:	220c      	movs	r2, #12
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801c4b0:	4b5b      	ldr	r3, [pc, #364]	; (801c620 <send_DHCP_DISCOVER+0x180>)
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 801c4b2:	485c      	ldr	r0, [pc, #368]	; (801c624 <send_DHCP_DISCOVER+0x184>)
 801c4b4:	4e5c      	ldr	r6, [pc, #368]	; (801c628 <send_DHCP_DISCOVER+0x188>)
 801c4b6:	6804      	ldr	r4, [r0, #0]
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801c4b8:	4d5c      	ldr	r5, [pc, #368]	; (801c62c <send_DHCP_DISCOVER+0x18c>)
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801c4ba:	7818      	ldrb	r0, [r3, #0]
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 801c4bc:	f8c4 60f0 	str.w	r6, [r4, #240]	; 0xf0
	pDHCPMSG->OPT[k++] = 0x07;
 801c4c0:	f8a4 10f4 	strh.w	r1, [r4, #244]	; 0xf4
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 801c4c4:	785e      	ldrb	r6, [r3, #1]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 801c4c6:	f8d3 1002 	ldr.w	r1, [r3, #2]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801c4ca:	f884 00f6 	strb.w	r0, [r4, #246]	; 0xf6
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801c4ce:	7828      	ldrb	r0, [r5, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 801c4d0:	f884 60f7 	strb.w	r6, [r4, #247]	; 0xf7
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 801c4d4:	f893 c003 	ldrb.w	ip, [r3, #3]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801c4d8:	791f      	ldrb	r7, [r3, #4]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 801c4da:	795e      	ldrb	r6, [r3, #5]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 801c4dc:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
	pDHCPMSG->OPT[k++] = hostName;
 801c4e0:	f8a4 20fc 	strh.w	r2, [r4, #252]	; 0xfc
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801c4e4:	2800      	cmp	r0, #0
 801c4e6:	f000 8082 	beq.w	801c5ee <send_DHCP_DISCOVER+0x14e>
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 801c4ea:	2112      	movs	r1, #18
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 801c4ec:	460b      	mov	r3, r1
 801c4ee:	1861      	adds	r1, r4, r1
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801c4f0:	f1a3 0211 	sub.w	r2, r3, #17
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 801c4f4:	f881 00ec 	strb.w	r0, [r1, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801c4f8:	b292      	uxth	r2, r2
 801c4fa:	5ca8      	ldrb	r0, [r5, r2]
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 801c4fc:	1c59      	adds	r1, r3, #1
 801c4fe:	b289      	uxth	r1, r1
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801c500:	2800      	cmp	r0, #0
 801c502:	d1f3      	bne.n	801c4ec <send_DHCP_DISCOVER+0x4c>
	pDHCPMSG->OPT[k - (i+3+1)] = i+3; // length of hostname

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
	pDHCPMSG->OPT[k++] = subnetMask;
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 801c504:	f04f 0903 	mov.w	r9, #3
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 801c508:	2506      	movs	r5, #6
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 801c50a:	f04f 0b37 	mov.w	fp, #55	; 0x37
	pDHCPMSG->OPT[k++] = subnetMask;
 801c50e:	f04f 0a01 	mov.w	sl, #1
	pDHCPMSG->OPT[k++] = dns;
	pDHCPMSG->OPT[k++] = domainName;
 801c512:	f04f 080f 	mov.w	r8, #15
	pDHCPMSG->OPT[k++] = dhcpT1value;
 801c516:	f04f 0e3a 	mov.w	lr, #58	; 0x3a
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 801c51a:	4421      	add	r1, r4
 801c51c:	f881 c0ec 	strb.w	ip, [r1, #236]	; 0xec
 801c520:	1d18      	adds	r0, r3, #4
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801c522:	f103 0c02 	add.w	ip, r3, #2
 801c526:	b280      	uxth	r0, r0
	pDHCPMSG->OPT[k - (i+3+1)] = i+3; // length of hostname
 801c528:	1d11      	adds	r1, r2, #4
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801c52a:	fa14 fc8c 	uxtah	ip, r4, ip
 801c52e:	f88c 70ec 	strb.w	r7, [ip, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+3+1)] = i+3; // length of hostname
 801c532:	1a41      	subs	r1, r0, r1
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 801c534:	eb03 0709 	add.w	r7, r3, r9
	pDHCPMSG->OPT[k - (i+3+1)] = i+3; // length of hostname
 801c538:	4421      	add	r1, r4
 801c53a:	444a      	add	r2, r9
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 801c53c:	fa14 f787 	uxtah	r7, r4, r7
 801c540:	f887 60ec 	strb.w	r6, [r7, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+3+1)] = i+3; // length of hostname
 801c544:	f881 20ec 	strb.w	r2, [r1, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 801c548:	1d5a      	adds	r2, r3, #5
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 801c54a:	4420      	add	r0, r4
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 801c54c:	fa14 f282 	uxtah	r2, r4, r2
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 801c550:	f880 b0ec 	strb.w	fp, [r0, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 801c554:	f882 50ec 	strb.w	r5, [r2, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 801c558:	195a      	adds	r2, r3, r5
 801c55a:	fa14 f282 	uxtah	r2, r4, r2
 801c55e:	f882 a0ec 	strb.w	sl, [r2, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 801c562:	1dda      	adds	r2, r3, #7
 801c564:	fa14 f282 	uxtah	r2, r4, r2
 801c568:	f882 90ec 	strb.w	r9, [r2, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 801c56c:	f103 0108 	add.w	r1, r3, #8
	pDHCPMSG->OPT[k++] = domainName;
 801c570:	f103 0209 	add.w	r2, r3, #9
	pDHCPMSG->OPT[k++] = dhcpT1value;
 801c574:	f103 000a 	add.w	r0, r3, #10
	pDHCPMSG->OPT[k++] = dns;
 801c578:	fa14 f181 	uxtah	r1, r4, r1
	pDHCPMSG->OPT[k++] = domainName;
 801c57c:	fa14 f282 	uxtah	r2, r4, r2
	pDHCPMSG->OPT[k++] = dhcpT1value;
 801c580:	fa14 f080 	uxtah	r0, r4, r0
	pDHCPMSG->OPT[k++] = dns;
 801c584:	f881 50ec 	strb.w	r5, [r1, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 801c588:	f882 80ec 	strb.w	r8, [r2, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 801c58c:	f880 e0ec 	strb.w	lr, [r0, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 801c590:	f04f 003b 	mov.w	r0, #59	; 0x3b
 801c594:	f103 010b 	add.w	r1, r3, #11
 801c598:	fa14 f181 	uxtah	r1, r4, r1
 801c59c:	f881 00ec 	strb.w	r0, [r1, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 801c5a0:	f04f 31ff 	mov.w	r1, #4294967295
 801c5a4:	f103 020c 	add.w	r2, r3, #12
 801c5a8:	330d      	adds	r3, #13
 801c5aa:	b29b      	uxth	r3, r3
 801c5ac:	fa14 f282 	uxtah	r2, r4, r2

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 801c5b0:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
	pDHCPMSG->OPT[k++] = endOption;
 801c5b4:	f882 10ec 	strb.w	r1, [r2, #236]	; 0xec
	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 801c5b8:	d209      	bcs.n	801c5ce <send_DHCP_DISCOVER+0x12e>
 801c5ba:	f5c3 729b 	rsb	r2, r3, #310	; 0x136
 801c5be:	3201      	adds	r2, #1
 801c5c0:	b292      	uxth	r2, r2
 801c5c2:	33ec      	adds	r3, #236	; 0xec
 801c5c4:	2100      	movs	r1, #0
 801c5c6:	3201      	adds	r2, #1
 801c5c8:	18e0      	adds	r0, r4, r3
 801c5ca:	f013 fc4c 	bl	802fe66 <memset>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801c5ce:	2243      	movs	r2, #67	; 0x43
	ip[0] = 255;
 801c5d0:	f04f 35ff 	mov.w	r5, #4294967295
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801c5d4:	4b16      	ldr	r3, [pc, #88]	; (801c630 <send_DHCP_DISCOVER+0x190>)
 801c5d6:	9200      	str	r2, [sp, #0]
 801c5d8:	4621      	mov	r1, r4
 801c5da:	f44f 7209 	mov.w	r2, #548	; 0x224
 801c5de:	7818      	ldrb	r0, [r3, #0]
 801c5e0:	ab03      	add	r3, sp, #12
	ip[0] = 255;
 801c5e2:	9503      	str	r5, [sp, #12]
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801c5e4:	f7ff f96e 	bl	801b8c4 <sendto>
}
 801c5e8:	b005      	add	sp, #20
 801c5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pDHCPMSG->OPT[k - (i+3+1)] = i+3; // length of hostname
 801c5ee:	2503      	movs	r5, #3
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 801c5f0:	2037      	movs	r0, #55	; 0x37
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 801c5f2:	f44f 7183 	mov.w	r1, #262	; 0x106
	pDHCPMSG->OPT[k++] = dhcpT2value;
 801c5f6:	f64f 723b 	movw	r2, #65339	; 0xff3b
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 801c5fa:	4b0e      	ldr	r3, [pc, #56]	; (801c634 <send_DHCP_DISCOVER+0x194>)
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 801c5fc:	f884 c0fe 	strb.w	ip, [r4, #254]	; 0xfe
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 801c600:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801c604:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
	pDHCPMSG->OPT[k++] = dhcpT2value;
 801c608:	231e      	movs	r3, #30
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 801c60a:	f884 6100 	strb.w	r6, [r4, #256]	; 0x100
	pDHCPMSG->OPT[k - (i+3+1)] = i+3; // length of hostname
 801c60e:	f884 50fd 	strb.w	r5, [r4, #253]	; 0xfd
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 801c612:	f884 0101 	strb.w	r0, [r4, #257]	; 0x101
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 801c616:	f8a4 1102 	strh.w	r1, [r4, #258]	; 0x102
	pDHCPMSG->OPT[k++] = dhcpT2value;
 801c61a:	f8a4 2108 	strh.w	r2, [r4, #264]	; 0x108
	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 801c61e:	e7cc      	b.n	801c5ba <send_DHCP_DISCOVER+0x11a>
 801c620:	2001fe74 	.word	0x2001fe74
 801c624:	2001fe84 	.word	0x2001fe84
 801c628:	3d010135 	.word	0x3d010135
 801c62c:	20018264 	.word	0x20018264
 801c630:	2001fe88 	.word	0x2001fe88
 801c634:	3a0f0603 	.word	0x3a0f0603

0801c638 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 801c638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c63c:	b091      	sub	sp, #68	; 0x44
	int i;
	uint8_t ip[4];
	uint16_t k = 0;

   makeDHCPMSG();
 801c63e:	f7ff fee9 	bl	801c414 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 801c642:	4bca      	ldr	r3, [pc, #808]	; (801c96c <send_DHCP_REQUEST+0x334>)
 801c644:	781b      	ldrb	r3, [r3, #0]
 801c646:	3b03      	subs	r3, #3
 801c648:	2b01      	cmp	r3, #1
 801c64a:	f240 8136 	bls.w	801c8ba <send_DHCP_REQUEST+0x282>
   	ip[2] = DHCP_SIP[2];
   	ip[3] = DHCP_SIP[3];   	   	   	
   }
   else
   {
   	ip[0] = 255;
 801c64e:	f04f 33ff 	mov.w	r3, #4294967295
 801c652:	26ff      	movs	r6, #255	; 0xff
 801c654:	4ac6      	ldr	r2, [pc, #792]	; (801c970 <send_DHCP_REQUEST+0x338>)
 801c656:	930f      	str	r3, [sp, #60]	; 0x3c
 801c658:	920d      	str	r2, [sp, #52]	; 0x34
 801c65a:	6812      	ldr	r2, [r2, #0]
	pDHCPMSG->OPT[k++] = dhcpMessageType;
	pDHCPMSG->OPT[k++] = 0x01;
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
	pDHCPMSG->OPT[k++] = 0x07;
 801c65c:	f240 1007 	movw	r0, #263	; 0x107
	pDHCPMSG->OPT[k++] = 0x01;
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801c660:	4bc4      	ldr	r3, [pc, #784]	; (801c974 <send_DHCP_REQUEST+0x33c>)
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 801c662:	49c5      	ldr	r1, [pc, #788]	; (801c978 <send_DHCP_REQUEST+0x340>)
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801c664:	781c      	ldrb	r4, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 801c666:	785d      	ldrb	r5, [r3, #1]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801c668:	f882 40f6 	strb.w	r4, [r2, #246]	; 0xf6
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 801c66c:	f8d3 4002 	ldr.w	r4, [r3, #2]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 801c670:	2eff      	cmp	r6, #255	; 0xff
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 801c672:	f8c2 40f8 	str.w	r4, [r2, #248]	; 0xf8
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 801c676:	78dc      	ldrb	r4, [r3, #3]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 801c678:	f882 50f7 	strb.w	r5, [r2, #247]	; 0xf7
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 801c67c:	9409      	str	r4, [sp, #36]	; 0x24
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801c67e:	791c      	ldrb	r4, [r3, #4]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 801c680:	795b      	ldrb	r3, [r3, #5]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801c682:	940a      	str	r4, [sp, #40]	; 0x28
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 801c684:	930b      	str	r3, [sp, #44]	; 0x2c
	pDHCPMSG->OPT[k++] = 0x07;
 801c686:	f8a2 00f4 	strh.w	r0, [r2, #244]	; 0xf4
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 801c68a:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 801c68e:	f000 8123 	beq.w	801c8d8 <send_DHCP_REQUEST+0x2a0>
 801c692:	2120      	movs	r1, #32
 801c694:	241f      	movs	r4, #31
 801c696:	9108      	str	r1, [sp, #32]
 801c698:	211e      	movs	r1, #30
 801c69a:	e9cd 1406 	strd	r1, r4, [sp, #24]
 801c69e:	211d      	movs	r1, #29
 801c6a0:	9105      	str	r1, [sp, #20]
 801c6a2:	2118      	movs	r1, #24
 801c6a4:	2312      	movs	r3, #18
 801c6a6:	9104      	str	r1, [sp, #16]
 801c6a8:	2115      	movs	r1, #21
 801c6aa:	4618      	mov	r0, r3
 801c6ac:	9103      	str	r1, [sp, #12]
 801c6ae:	261c      	movs	r6, #28
 801c6b0:	f04f 0c1b 	mov.w	ip, #27
 801c6b4:	271a      	movs	r7, #26
 801c6b6:	f04f 0e19 	mov.w	lr, #25
 801c6ba:	f04f 0817 	mov.w	r8, #23
 801c6be:	f04f 0916 	mov.w	r9, #22
 801c6c2:	f04f 0a14 	mov.w	sl, #20
 801c6c6:	f04f 0b13 	mov.w	fp, #19
 801c6ca:	2111      	movs	r1, #17
 801c6cc:	2410      	movs	r4, #16
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 801c6ce:	1851      	adds	r1, r2, r1
 801c6d0:	460d      	mov	r5, r1
 801c6d2:	9102      	str	r1, [sp, #8]
	pDHCPMSG->OPT[k++] = hostName;
 801c6d4:	f04f 010c 	mov.w	r1, #12
 801c6d8:	4414      	add	r4, r2
 801c6da:	f884 10ec 	strb.w	r1, [r4, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 801c6de:	462c      	mov	r4, r5
 801c6e0:	f04f 0500 	mov.w	r5, #0
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801c6e4:	49a5      	ldr	r1, [pc, #660]	; (801c97c <send_DHCP_REQUEST+0x344>)
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 801c6e6:	f884 50ec 	strb.w	r5, [r4, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801c6ea:	780c      	ldrb	r4, [r1, #0]
 801c6ec:	2c00      	cmp	r4, #0
 801c6ee:	f000 8132 	beq.w	801c956 <send_DHCP_REQUEST+0x31e>
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 801c6f2:	1813      	adds	r3, r2, r0
 801c6f4:	f883 40ec 	strb.w	r4, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801c6f8:	784c      	ldrb	r4, [r1, #1]
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 801c6fa:	1c43      	adds	r3, r0, #1
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801c6fc:	2c00      	cmp	r4, #0
 801c6fe:	f000 812d 	beq.w	801c95c <send_DHCP_REQUEST+0x324>
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 801c702:	4413      	add	r3, r2
 801c704:	f883 40ec 	strb.w	r4, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801c708:	788c      	ldrb	r4, [r1, #2]
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 801c70a:	1c83      	adds	r3, r0, #2
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801c70c:	2c00      	cmp	r4, #0
 801c70e:	f000 8127 	beq.w	801c960 <send_DHCP_REQUEST+0x328>
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 801c712:	4413      	add	r3, r2
 801c714:	f883 40ec 	strb.w	r4, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801c718:	78cc      	ldrb	r4, [r1, #3]
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 801c71a:	1cc3      	adds	r3, r0, #3
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801c71c:	2c00      	cmp	r4, #0
 801c71e:	f000 8121 	beq.w	801c964 <send_DHCP_REQUEST+0x32c>
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 801c722:	4413      	add	r3, r2
 801c724:	f883 40ec 	strb.w	r4, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801c728:	790c      	ldrb	r4, [r1, #4]
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 801c72a:	1d03      	adds	r3, r0, #4
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801c72c:	2c00      	cmp	r4, #0
 801c72e:	f000 811b 	beq.w	801c968 <send_DHCP_REQUEST+0x330>
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 801c732:	4413      	add	r3, r2
 801c734:	f883 40ec 	strb.w	r4, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801c738:	794c      	ldrb	r4, [r1, #5]
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 801c73a:	1d43      	adds	r3, r0, #5
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801c73c:	2c00      	cmp	r4, #0
 801c73e:	f000 8108 	beq.w	801c952 <send_DHCP_REQUEST+0x31a>
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 801c742:	4413      	add	r3, r2
 801c744:	f883 40ec 	strb.w	r4, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801c748:	7989      	ldrb	r1, [r1, #6]
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 801c74a:	1d83      	adds	r3, r0, #6
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801c74c:	2900      	cmp	r1, #0
 801c74e:	f000 8121 	beq.w	801c994 <send_DHCP_REQUEST+0x35c>
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 801c752:	4413      	add	r3, r2
 801c754:	f883 10ec 	strb.w	r1, [r3, #236]	; 0xec
 801c758:	1dc3      	adds	r3, r0, #7
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801c75a:	2007      	movs	r0, #7
 801c75c:	1cd9      	adds	r1, r3, #3
 801c75e:	b289      	uxth	r1, r1
 801c760:	460c      	mov	r4, r1
 801c762:	9103      	str	r1, [sp, #12]
 801c764:	1d01      	adds	r1, r0, #4
 801c766:	1a61      	subs	r1, r4, r1
 801c768:	1851      	adds	r1, r2, r1
 801c76a:	f103 040a 	add.w	r4, r3, #10
 801c76e:	9405      	str	r4, [sp, #20]
 801c770:	f103 0e06 	add.w	lr, r3, #6
 801c774:	f103 040b 	add.w	r4, r3, #11
 801c778:	9102      	str	r1, [sp, #8]
 801c77a:	1cc1      	adds	r1, r0, #3
 801c77c:	9406      	str	r4, [sp, #24]
 801c77e:	910c      	str	r1, [sp, #48]	; 0x30
 801c780:	fa1f f18e 	uxth.w	r1, lr
 801c784:	f103 040c 	add.w	r4, r3, #12
 801c788:	9104      	str	r1, [sp, #16]
 801c78a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801c78e:	9407      	str	r4, [sp, #28]
 801c790:	f103 0c07 	add.w	ip, r3, #7
 801c794:	f103 0609 	add.w	r6, r3, #9
 801c798:	fa1f fe8c 	uxth.w	lr, ip
 801c79c:	fa1f fc86 	uxth.w	ip, r6
 801c7a0:	f8bd 6014 	ldrh.w	r6, [sp, #20]
 801c7a4:	9105      	str	r1, [sp, #20]
 801c7a6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c7aa:	f103 040d 	add.w	r4, r3, #13
 801c7ae:	f103 050e 	add.w	r5, r3, #14
 801c7b2:	9106      	str	r1, [sp, #24]
 801c7b4:	b2a1      	uxth	r1, r4
 801c7b6:	f103 0b01 	add.w	fp, r3, #1
 801c7ba:	f103 0a02 	add.w	sl, r3, #2
 801c7be:	f103 0904 	add.w	r9, r3, #4
 801c7c2:	f103 0805 	add.w	r8, r3, #5
 801c7c6:	f103 0708 	add.w	r7, r3, #8
 801c7ca:	9107      	str	r1, [sp, #28]
 801c7cc:	b2a9      	uxth	r1, r5
 801c7ce:	fa1f fb8b 	uxth.w	fp, fp
 801c7d2:	fa1f fa8a 	uxth.w	sl, sl
 801c7d6:	fa1f f989 	uxth.w	r9, r9
 801c7da:	fa1f f888 	uxth.w	r8, r8
 801c7de:	b2bf      	uxth	r7, r7
 801c7e0:	9108      	str	r1, [sp, #32]
	pDHCPMSG->OPT[k++] = routersOnSubnet;
	pDHCPMSG->OPT[k++] = dns;
	pDHCPMSG->OPT[k++] = domainName;
	pDHCPMSG->OPT[k++] = dhcpT1value;
	pDHCPMSG->OPT[k++] = dhcpT2value;
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 801c7e2:	9805      	ldr	r0, [sp, #20]
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 801c7e4:	9c04      	ldr	r4, [sp, #16]
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 801c7e6:	4410      	add	r0, r2
 801c7e8:	4605      	mov	r5, r0
	pDHCPMSG->OPT[k++] = staticRoute;
	pDHCPMSG->OPT[k++] = endOption;
 801c7ea:	9807      	ldr	r0, [sp, #28]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 801c7ec:	4413      	add	r3, r2
	pDHCPMSG->OPT[k++] = endOption;
 801c7ee:	4410      	add	r0, r2
 801c7f0:	9004      	str	r0, [sp, #16]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 801c7f2:	9809      	ldr	r0, [sp, #36]	; 0x24
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801c7f4:	4493      	add	fp, r2
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 801c7f6:	f883 00ec 	strb.w	r0, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801c7fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 801c7fc:	4492      	add	sl, r2
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801c7fe:	f88b 30ec 	strb.w	r3, [fp, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 801c802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 801c804:	9903      	ldr	r1, [sp, #12]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 801c806:	f88a 30ec 	strb.w	r3, [sl, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 801c80a:	f04f 0a37 	mov.w	sl, #55	; 0x37
	pDHCPMSG->OPT[k - (i+3+1)] = i+3; // length of hostname
 801c80e:	9b02      	ldr	r3, [sp, #8]
 801c810:	980c      	ldr	r0, [sp, #48]	; 0x30
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 801c812:	4411      	add	r1, r2
	pDHCPMSG->OPT[k - (i+3+1)] = i+3; // length of hostname
 801c814:	f883 00ec 	strb.w	r0, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 801c818:	f881 a0ec 	strb.w	sl, [r1, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 801c81c:	f04f 0108 	mov.w	r1, #8
 801c820:	4491      	add	r9, r2
 801c822:	f889 10ec 	strb.w	r1, [r9, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 801c826:	f04f 0101 	mov.w	r1, #1
 801c82a:	4490      	add	r8, r2
 801c82c:	f888 10ec 	strb.w	r1, [r8, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 801c830:	f04f 0103 	mov.w	r1, #3
 801c834:	9b08      	ldr	r3, [sp, #32]
 801c836:	4414      	add	r4, r2
 801c838:	9403      	str	r4, [sp, #12]
	pDHCPMSG->OPT[k++] = staticRoute;
 801c83a:	9c06      	ldr	r4, [sp, #24]
 801c83c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 801c840:	4494      	add	ip, r2
	pDHCPMSG->OPT[k++] = dns;
 801c842:	4496      	add	lr, r2
	pDHCPMSG->OPT[k++] = domainName;
 801c844:	4417      	add	r7, r2
	pDHCPMSG->OPT[k++] = dhcpT2value;
 801c846:	4416      	add	r6, r2
	pDHCPMSG->OPT[k++] = staticRoute;
 801c848:	4414      	add	r4, r2
 801c84a:	4410      	add	r0, r2
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 801c84c:	9a03      	ldr	r2, [sp, #12]
 801c84e:	f882 10ec 	strb.w	r1, [r2, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 801c852:	f04f 0106 	mov.w	r1, #6
 801c856:	f88e 10ec 	strb.w	r1, [lr, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 801c85a:	f04f 0e0f 	mov.w	lr, #15
 801c85e:	f887 e0ec 	strb.w	lr, [r7, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 801c862:	f04f 073a 	mov.w	r7, #58	; 0x3a
 801c866:	f88c 70ec 	strb.w	r7, [ip, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 801c86a:	f04f 073b 	mov.w	r7, #59	; 0x3b
 801c86e:	f886 70ec 	strb.w	r7, [r6, #236]	; 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 801c872:	f04f 061f 	mov.w	r6, #31
 801c876:	f885 60ec 	strb.w	r6, [r5, #236]	; 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 801c87a:	f04f 0521 	mov.w	r5, #33	; 0x21
 801c87e:	f884 50ec 	strb.w	r5, [r4, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 801c882:	f04f 34ff 	mov.w	r4, #4294967295
 801c886:	f5c3 729c 	rsb	r2, r3, #312	; 0x138
 801c88a:	9b04      	ldr	r3, [sp, #16]
 801c88c:	2100      	movs	r1, #0
 801c88e:	f883 40ec 	strb.w	r4, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 801c892:	f013 fae8 	bl	802fe66 <memset>

	PRT_DHCP("> Send DHCP_REQUEST\r\n");
 801c896:	493a      	ldr	r1, [pc, #232]	; (801c980 <send_DHCP_REQUEST+0x348>)
 801c898:	483a      	ldr	r0, [pc, #232]	; (801c984 <send_DHCP_REQUEST+0x34c>)
 801c89a:	f7fb fad3 	bl	8017e44 <WIZ_SECURE_printf>
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801c89e:	2243      	movs	r2, #67	; 0x43
 801c8a0:	990d      	ldr	r1, [sp, #52]	; 0x34
 801c8a2:	4b39      	ldr	r3, [pc, #228]	; (801c988 <send_DHCP_REQUEST+0x350>)
 801c8a4:	6809      	ldr	r1, [r1, #0]
 801c8a6:	9200      	str	r2, [sp, #0]
 801c8a8:	7818      	ldrb	r0, [r3, #0]
 801c8aa:	f44f 7209 	mov.w	r2, #548	; 0x224
 801c8ae:	ab0f      	add	r3, sp, #60	; 0x3c
 801c8b0:	f7ff f808 	bl	801b8c4 <sendto>

}
 801c8b4:	b011      	add	sp, #68	; 0x44
 801c8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 801c8ba:	4b2d      	ldr	r3, [pc, #180]	; (801c970 <send_DHCP_REQUEST+0x338>)
 801c8bc:	2100      	movs	r1, #0
 801c8be:	461a      	mov	r2, r3
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 801c8c0:	4832      	ldr	r0, [pc, #200]	; (801c98c <send_DHCP_REQUEST+0x354>)
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 801c8c2:	930d      	str	r3, [sp, #52]	; 0x34
   	ip[3] = DHCP_SIP[3];   	   	   	
 801c8c4:	4b32      	ldr	r3, [pc, #200]	; (801c990 <send_DHCP_REQUEST+0x358>)
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 801c8c6:	6812      	ldr	r2, [r2, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 801c8c8:	6804      	ldr	r4, [r0, #0]
   	ip[0] = DHCP_SIP[0];
 801c8ca:	6818      	ldr	r0, [r3, #0]
   	ip[3] = DHCP_SIP[3];   	   	   	
 801c8cc:	78de      	ldrb	r6, [r3, #3]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 801c8ce:	60d4      	str	r4, [r2, #12]
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 801c8d0:	7291      	strb	r1, [r2, #10]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 801c8d2:	72d1      	strb	r1, [r2, #11]
   	ip[0] = DHCP_SIP[0];
 801c8d4:	900f      	str	r0, [sp, #60]	; 0x3c
 801c8d6:	e6c1      	b.n	801c65c <send_DHCP_REQUEST+0x24>
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 801c8d8:	f240 4532 	movw	r5, #1074	; 0x432
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 801c8dc:	492c      	ldr	r1, [pc, #176]	; (801c990 <send_DHCP_REQUEST+0x358>)
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 801c8de:	482b      	ldr	r0, [pc, #172]	; (801c98c <send_DHCP_REQUEST+0x354>)
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 801c8e0:	780f      	ldrb	r7, [r1, #0]
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 801c8e2:	f8b0 c000 	ldrh.w	ip, [r0]
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 801c8e6:	f8b0 e002 	ldrh.w	lr, [r0, #2]
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 801c8ea:	784e      	ldrb	r6, [r1, #1]
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 801c8ec:	7888      	ldrb	r0, [r1, #2]
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 801c8ee:	78c9      	ldrb	r1, [r1, #3]
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 801c8f0:	f8a2 50fc 	strh.w	r5, [r2, #252]	; 0xfc
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 801c8f4:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
 801c8f8:	252c      	movs	r5, #44	; 0x2c
 801c8fa:	212b      	movs	r1, #43	; 0x2b
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 801c8fc:	f882 6105 	strb.w	r6, [r2, #261]	; 0x105
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 801c900:	e9cd 1507 	strd	r1, r5, [sp, #28]
 801c904:	262a      	movs	r6, #42	; 0x2a
 801c906:	2129      	movs	r1, #41	; 0x29
 801c908:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801c90c:	2124      	movs	r1, #36	; 0x24
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 801c90e:	f240 4436 	movw	r4, #1078	; 0x436
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 801c912:	231e      	movs	r3, #30
 801c914:	9104      	str	r1, [sp, #16]
 801c916:	2121      	movs	r1, #33	; 0x21
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 801c918:	f8a2 c0fe 	strh.w	ip, [r2, #254]	; 0xfe
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 801c91c:	f8a2 e100 	strh.w	lr, [r2, #256]	; 0x100
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 801c920:	f882 7104 	strb.w	r7, [r2, #260]	; 0x104
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 801c924:	f882 0106 	strb.w	r0, [r2, #262]	; 0x106
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 801c928:	f8a2 4102 	strh.w	r4, [r2, #258]	; 0x102
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 801c92c:	9103      	str	r1, [sp, #12]
 801c92e:	4618      	mov	r0, r3
 801c930:	2628      	movs	r6, #40	; 0x28
 801c932:	f04f 0c27 	mov.w	ip, #39	; 0x27
 801c936:	2726      	movs	r7, #38	; 0x26
 801c938:	f04f 0e25 	mov.w	lr, #37	; 0x25
 801c93c:	f04f 0823 	mov.w	r8, #35	; 0x23
 801c940:	f04f 0922 	mov.w	r9, #34	; 0x22
 801c944:	f04f 0a20 	mov.w	sl, #32
 801c948:	f04f 0b1f 	mov.w	fp, #31
 801c94c:	211d      	movs	r1, #29
 801c94e:	241c      	movs	r4, #28
 801c950:	e6bd      	b.n	801c6ce <send_DHCP_REQUEST+0x96>
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801c952:	2005      	movs	r0, #5
 801c954:	e702      	b.n	801c75c <send_DHCP_REQUEST+0x124>
 801c956:	2103      	movs	r1, #3
 801c958:	910c      	str	r1, [sp, #48]	; 0x30
 801c95a:	e742      	b.n	801c7e2 <send_DHCP_REQUEST+0x1aa>
 801c95c:	2001      	movs	r0, #1
 801c95e:	e6fd      	b.n	801c75c <send_DHCP_REQUEST+0x124>
 801c960:	2002      	movs	r0, #2
 801c962:	e6fb      	b.n	801c75c <send_DHCP_REQUEST+0x124>
 801c964:	2003      	movs	r0, #3
 801c966:	e6f9      	b.n	801c75c <send_DHCP_REQUEST+0x124>
 801c968:	2004      	movs	r0, #4
 801c96a:	e6f7      	b.n	801c75c <send_DHCP_REQUEST+0x124>
 801c96c:	20019995 	.word	0x20019995
 801c970:	2001fe84 	.word	0x2001fe84
 801c974:	2001fe74 	.word	0x2001fe74
 801c978:	3d030135 	.word	0x3d030135
 801c97c:	20018264 	.word	0x20018264
 801c980:	08033b70 	.word	0x08033b70
 801c984:	08033a28 	.word	0x08033a28
 801c988:	2001fe88 	.word	0x2001fe88
 801c98c:	20019988 	.word	0x20019988
 801c990:	2001fe80 	.word	0x2001fe80
 801c994:	2006      	movs	r0, #6
 801c996:	e6e1      	b.n	801c75c <send_DHCP_REQUEST+0x124>

0801c998 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 801c998:	b5f0      	push	{r4, r5, r6, r7, lr}
	pDHCPMSG->OPT[k++] = dhcpMessageType;
	pDHCPMSG->OPT[k++] = 0x01;
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
	pDHCPMSG->OPT[k++] = 0x07;
 801c99a:	f240 1707 	movw	r7, #263	; 0x107
{
 801c99e:	b085      	sub	sp, #20
	makeDHCPMSG();
 801c9a0:	f7ff fd38 	bl	801c414 <makeDHCPMSG>
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 801c9a4:	f240 4332 	movw	r3, #1074	; 0x432
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 801c9a8:	2100      	movs	r1, #0
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 801c9aa:	f240 4636 	movw	r6, #1078	; 0x436
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];

	pDHCPMSG->OPT[k++] = endOption;
 801c9ae:	25ff      	movs	r5, #255	; 0xff
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 801c9b0:	4a21      	ldr	r2, [pc, #132]	; (801ca38 <send_DHCP_DECLINE+0xa0>)
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 801c9b2:	4822      	ldr	r0, [pc, #136]	; (801ca3c <send_DHCP_DECLINE+0xa4>)
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 801c9b4:	6814      	ldr	r4, [r2, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801c9b6:	4a22      	ldr	r2, [pc, #136]	; (801ca40 <send_DHCP_DECLINE+0xa8>)
	pDHCPMSG->OPT[k++] = 0x07;
 801c9b8:	f8a4 70f4 	strh.w	r7, [r4, #244]	; 0xf4
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801c9bc:	7817      	ldrb	r7, [r2, #0]
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 801c9be:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801c9c2:	f884 70f6 	strb.w	r7, [r4, #246]	; 0xf6
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 801c9c6:	481f      	ldr	r0, [pc, #124]	; (801ca44 <send_DHCP_DECLINE+0xac>)
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 801c9c8:	7857      	ldrb	r7, [r2, #1]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 801c9ca:	f8d2 2002 	ldr.w	r2, [r2, #2]
	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 801c9ce:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 801c9d2:	f8c4 20f8 	str.w	r2, [r4, #248]	; 0xf8
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 801c9d6:	4b1c      	ldr	r3, [pc, #112]	; (801ca48 <send_DHCP_DECLINE+0xb0>)
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 801c9d8:	8842      	ldrh	r2, [r0, #2]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 801c9da:	f884 70f7 	strb.w	r7, [r4, #247]	; 0xf7
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 801c9de:	f8a4 2100 	strh.w	r2, [r4, #256]	; 0x100
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 801c9e2:	781a      	ldrb	r2, [r3, #0]
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 801c9e4:	8807      	ldrh	r7, [r0, #0]
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 801c9e6:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 801c9ea:	7858      	ldrb	r0, [r3, #1]
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 801c9ec:	789a      	ldrb	r2, [r3, #2]
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 801c9ee:	78db      	ldrb	r3, [r3, #3]
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 801c9f0:	f884 0105 	strb.w	r0, [r4, #261]	; 0x105
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 801c9f4:	f884 2106 	strb.w	r2, [r4, #262]	; 0x106
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 801c9f8:	f884 3107 	strb.w	r3, [r4, #263]	; 0x107
	pDHCPMSG->OPT[k++] = endOption;
 801c9fc:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 801ca00:	72a1      	strb	r1, [r4, #10]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 801ca02:	72e1      	strb	r1, [r4, #11]

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 801ca04:	f240 121b 	movw	r2, #283	; 0x11b
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 801ca08:	f8a4 70fe 	strh.w	r7, [r4, #254]	; 0xfe
	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 801ca0c:	f8a4 6102 	strh.w	r6, [r4, #258]	; 0x102
 801ca10:	f204 1009 	addw	r0, r4, #265	; 0x109
 801ca14:	f013 fa27 	bl	802fe66 <memset>

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801ca18:	2243      	movs	r2, #67	; 0x43
	ip[0] = 0xFF;
 801ca1a:	f04f 35ff 	mov.w	r5, #4294967295
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801ca1e:	4b0b      	ldr	r3, [pc, #44]	; (801ca4c <send_DHCP_DECLINE+0xb4>)
 801ca20:	9200      	str	r2, [sp, #0]
 801ca22:	4621      	mov	r1, r4
 801ca24:	f44f 7209 	mov.w	r2, #548	; 0x224
 801ca28:	7818      	ldrb	r0, [r3, #0]
 801ca2a:	ab03      	add	r3, sp, #12
	ip[0] = 0xFF;
 801ca2c:	9503      	str	r5, [sp, #12]
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801ca2e:	f7fe ff49 	bl	801b8c4 <sendto>
}
 801ca32:	b005      	add	sp, #20
 801ca34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ca36:	bf00      	nop
 801ca38:	2001fe84 	.word	0x2001fe84
 801ca3c:	3d040135 	.word	0x3d040135
 801ca40:	2001fe74 	.word	0x2001fe74
 801ca44:	20019988 	.word	0x20019988
 801ca48:	2001fe80 	.word	0x2001fe80
 801ca4c:	2001fe88 	.word	0x2001fe88

0801ca50 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 801ca50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t * p;
	uint8_t * e;
	uint8_t type;
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 801ca54:	4d64      	ldr	r5, [pc, #400]	; (801cbe8 <parseDHCPMSG+0x198>)
{
 801ca56:	b086      	sub	sp, #24
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 801ca58:	7828      	ldrb	r0, [r5, #0]
 801ca5a:	f7fe f921 	bl	801aca0 <getSn_RX_RSR>
 801ca5e:	b918      	cbnz	r0, 801ca68 <parseDHCPMSG+0x18>
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
 801ca60:	2000      	movs	r0, #0
   				break;
			} // switch
		} // while
	} // if
	return	type;
}
 801ca62:	b006      	add	sp, #24
 801ca64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 801ca68:	4e60      	ldr	r6, [pc, #384]	; (801cbec <parseDHCPMSG+0x19c>)
 801ca6a:	f10d 030e 	add.w	r3, sp, #14
 801ca6e:	4602      	mov	r2, r0
 801ca70:	6831      	ldr	r1, [r6, #0]
 801ca72:	7828      	ldrb	r0, [r5, #0]
 801ca74:	9300      	str	r3, [sp, #0]
 801ca76:	ab04      	add	r3, sp, #16
 801ca78:	f7ff f81c 	bl	801bab4 <recvfrom>
	if (svr_port == DHCP_SERVER_PORT) {
 801ca7c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801ca80:	2400      	movs	r4, #0
 801ca82:	2b43      	cmp	r3, #67	; 0x43
 801ca84:	d003      	beq.n	801ca8e <parseDHCPMSG+0x3e>
	return	type;
 801ca86:	b260      	sxtb	r0, r4
}
 801ca88:	b006      	add	sp, #24
 801ca8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 801ca8e:	6832      	ldr	r2, [r6, #0]
 801ca90:	4b57      	ldr	r3, [pc, #348]	; (801cbf0 <parseDHCPMSG+0x1a0>)
 801ca92:	7f15      	ldrb	r5, [r2, #28]
 801ca94:	7819      	ldrb	r1, [r3, #0]
 801ca96:	428d      	cmp	r5, r1
 801ca98:	d1e2      	bne.n	801ca60 <parseDHCPMSG+0x10>
 801ca9a:	7f55      	ldrb	r5, [r2, #29]
 801ca9c:	7859      	ldrb	r1, [r3, #1]
 801ca9e:	428d      	cmp	r5, r1
 801caa0:	d1de      	bne.n	801ca60 <parseDHCPMSG+0x10>
 801caa2:	7f95      	ldrb	r5, [r2, #30]
 801caa4:	7899      	ldrb	r1, [r3, #2]
 801caa6:	428d      	cmp	r5, r1
 801caa8:	d1da      	bne.n	801ca60 <parseDHCPMSG+0x10>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 801caaa:	7fd5      	ldrb	r5, [r2, #31]
 801caac:	78d9      	ldrb	r1, [r3, #3]
 801caae:	428d      	cmp	r5, r1
 801cab0:	d1d6      	bne.n	801ca60 <parseDHCPMSG+0x10>
 801cab2:	f892 5020 	ldrb.w	r5, [r2, #32]
 801cab6:	7919      	ldrb	r1, [r3, #4]
 801cab8:	428d      	cmp	r5, r1
 801caba:	d1d1      	bne.n	801ca60 <parseDHCPMSG+0x10>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 801cabc:	795b      	ldrb	r3, [r3, #5]
 801cabe:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 801cac2:	4299      	cmp	r1, r3
 801cac4:	d1cc      	bne.n	801ca60 <parseDHCPMSG+0x10>
   				DHCP_SIP[0] = *p++;
 801cac6:	4f4b      	ldr	r7, [pc, #300]	; (801cbf4 <parseDHCPMSG+0x1a4>)
   				dhcp_lease_time  = *p++;
 801cac8:	f8df 8138 	ldr.w	r8, [pc, #312]	; 801cc04 <parseDHCPMSG+0x1b4>
   				DHCP_allocated_dns[0] = *p++;
 801cacc:	4e4a      	ldr	r6, [pc, #296]	; (801cbf8 <parseDHCPMSG+0x1a8>)
   				DHCP_allocated_gw[0] = *p++;
 801cace:	4d4b      	ldr	r5, [pc, #300]	; (801cbfc <parseDHCPMSG+0x1ac>)
   				DHCP_allocated_sn[0] = *p++;
 801cad0:	494b      	ldr	r1, [pc, #300]	; (801cc00 <parseDHCPMSG+0x1b0>)
		e = p + (len - 240);
 801cad2:	fa12 f080 	uxtah	r0, r2, r0
 801cad6:	32f0      	adds	r2, #240	; 0xf0
		while ( p < e ) {
 801cad8:	4282      	cmp	r2, r0
 801cada:	d2d4      	bcs.n	801ca86 <parseDHCPMSG+0x36>
			switch ( *p ) {
 801cadc:	7813      	ldrb	r3, [r2, #0]
 801cade:	2b36      	cmp	r3, #54	; 0x36
 801cae0:	d87d      	bhi.n	801cbde <parseDHCPMSG+0x18e>
 801cae2:	2b36      	cmp	r3, #54	; 0x36
 801cae4:	d877      	bhi.n	801cbd6 <parseDHCPMSG+0x186>
 801cae6:	e8df f003 	tbb	[pc, r3]
 801caea:	6774      	.short	0x6774
 801caec:	76765376 	.word	0x76765376
 801caf0:	7676763f 	.word	0x7676763f
 801caf4:	76767676 	.word	0x76767676
 801caf8:	76767676 	.word	0x76767676
 801cafc:	76767676 	.word	0x76767676
 801cb00:	76767676 	.word	0x76767676
 801cb04:	76767676 	.word	0x76767676
 801cb08:	76767676 	.word	0x76767676
 801cb0c:	76767676 	.word	0x76767676
 801cb10:	76767676 	.word	0x76767676
 801cb14:	76767676 	.word	0x76767676
 801cb18:	76767676 	.word	0x76767676
 801cb1c:	29762c76 	.word	0x29762c76
 801cb20:	1c          	.byte	0x1c
 801cb21:	00          	.byte	0x00
   				DHCP_SIP[0] = *p++;
 801cb22:	7893      	ldrb	r3, [r2, #2]
   				DHCP_SIP[3] = *p++;
 801cb24:	3206      	adds	r2, #6
   				DHCP_SIP[0] = *p++;
 801cb26:	703b      	strb	r3, [r7, #0]
   				DHCP_SIP[1] = *p++;
 801cb28:	f812 3c03 	ldrb.w	r3, [r2, #-3]
 801cb2c:	707b      	strb	r3, [r7, #1]
   				DHCP_SIP[2] = *p++;
 801cb2e:	f812 3c02 	ldrb.w	r3, [r2, #-2]
 801cb32:	70bb      	strb	r3, [r7, #2]
   				DHCP_SIP[3] = *p++;
 801cb34:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 801cb38:	70fb      	strb	r3, [r7, #3]
   				break;
 801cb3a:	e7cd      	b.n	801cad8 <parseDHCPMSG+0x88>
   				type = *p++;
 801cb3c:	7894      	ldrb	r4, [r2, #2]
 801cb3e:	3203      	adds	r2, #3
   				break;
 801cb40:	e7ca      	b.n	801cad8 <parseDHCPMSG+0x88>
   				dhcp_lease_time  = *p++;
 801cb42:	7893      	ldrb	r3, [r2, #2]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 801cb44:	f892 c004 	ldrb.w	ip, [r2, #4]
   				dhcp_lease_time  = *p++;
 801cb48:	f8c8 3000 	str.w	r3, [r8]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 801cb4c:	f892 e003 	ldrb.w	lr, [r2, #3]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 801cb50:	3206      	adds	r2, #6
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 801cb52:	eb0e 2e03 	add.w	lr, lr, r3, lsl #8
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 801cb56:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 801cb5a:	eb0c 2c0e 	add.w	ip, ip, lr, lsl #8
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 801cb5e:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 801cb62:	f8c8 3000 	str.w	r3, [r8]
   				break;
 801cb66:	e7b7      	b.n	801cad8 <parseDHCPMSG+0x88>
   				DHCP_allocated_dns[0] = *p++;
 801cb68:	f892 c002 	ldrb.w	ip, [r2, #2]
   				opt_len = *p++;       
 801cb6c:	7853      	ldrb	r3, [r2, #1]
   				DHCP_allocated_dns[0] = *p++;
 801cb6e:	f886 c000 	strb.w	ip, [r6]
   				DHCP_allocated_dns[1] = *p++;
 801cb72:	f892 c003 	ldrb.w	ip, [r2, #3]
   				p = p + (opt_len - 4);
 801cb76:	4413      	add	r3, r2
   				DHCP_allocated_dns[1] = *p++;
 801cb78:	f886 c001 	strb.w	ip, [r6, #1]
   				DHCP_allocated_dns[2] = *p++;
 801cb7c:	f892 c004 	ldrb.w	ip, [r2, #4]
 801cb80:	f886 c002 	strb.w	ip, [r6, #2]
   				DHCP_allocated_dns[3] = *p++;
 801cb84:	f892 c005 	ldrb.w	ip, [r2, #5]
   				p = p + (opt_len - 4);
 801cb88:	1c9a      	adds	r2, r3, #2
   				DHCP_allocated_dns[3] = *p++;
 801cb8a:	f886 c003 	strb.w	ip, [r6, #3]
   				break;
 801cb8e:	e7a3      	b.n	801cad8 <parseDHCPMSG+0x88>
   				DHCP_allocated_gw[0] = *p++;
 801cb90:	f892 c002 	ldrb.w	ip, [r2, #2]
   				opt_len = *p++;       
 801cb94:	7853      	ldrb	r3, [r2, #1]
   				DHCP_allocated_gw[0] = *p++;
 801cb96:	f885 c000 	strb.w	ip, [r5]
   				DHCP_allocated_gw[1] = *p++;
 801cb9a:	f892 c003 	ldrb.w	ip, [r2, #3]
   				p = p + (opt_len - 4);
 801cb9e:	4413      	add	r3, r2
   				DHCP_allocated_gw[1] = *p++;
 801cba0:	f885 c001 	strb.w	ip, [r5, #1]
   				DHCP_allocated_gw[2] = *p++;
 801cba4:	f892 c004 	ldrb.w	ip, [r2, #4]
 801cba8:	f885 c002 	strb.w	ip, [r5, #2]
   				DHCP_allocated_gw[3] = *p++;
 801cbac:	f892 c005 	ldrb.w	ip, [r2, #5]
   				p = p + (opt_len - 4);
 801cbb0:	1c9a      	adds	r2, r3, #2
   				DHCP_allocated_gw[3] = *p++;
 801cbb2:	f885 c003 	strb.w	ip, [r5, #3]
   				break;
 801cbb6:	e78f      	b.n	801cad8 <parseDHCPMSG+0x88>
   				DHCP_allocated_sn[0] = *p++;
 801cbb8:	7893      	ldrb	r3, [r2, #2]
   				DHCP_allocated_sn[3] = *p++;
 801cbba:	3206      	adds	r2, #6
   				DHCP_allocated_sn[0] = *p++;
 801cbbc:	700b      	strb	r3, [r1, #0]
   				DHCP_allocated_sn[1] = *p++;
 801cbbe:	f812 3c03 	ldrb.w	r3, [r2, #-3]
 801cbc2:	704b      	strb	r3, [r1, #1]
   				DHCP_allocated_sn[2] = *p++;
 801cbc4:	f812 3c02 	ldrb.w	r3, [r2, #-2]
 801cbc8:	708b      	strb	r3, [r1, #2]
   				DHCP_allocated_sn[3] = *p++;
 801cbca:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 801cbce:	70cb      	strb	r3, [r1, #3]
   				break;
 801cbd0:	e782      	b.n	801cad8 <parseDHCPMSG+0x88>
   				p++;
 801cbd2:	3201      	adds	r2, #1
   				break;
 801cbd4:	e780      	b.n	801cad8 <parseDHCPMSG+0x88>
   				p += opt_len;
 801cbd6:	7853      	ldrb	r3, [r2, #1]
   				opt_len = *p++;
 801cbd8:	3202      	adds	r2, #2
   				p += opt_len;
 801cbda:	441a      	add	r2, r3
   				break;
 801cbdc:	e77c      	b.n	801cad8 <parseDHCPMSG+0x88>
			switch ( *p ) {
 801cbde:	2bff      	cmp	r3, #255	; 0xff
 801cbe0:	d1f9      	bne.n	801cbd6 <parseDHCPMSG+0x186>
 801cbe2:	4602      	mov	r2, r0
 801cbe4:	e778      	b.n	801cad8 <parseDHCPMSG+0x88>
 801cbe6:	bf00      	nop
 801cbe8:	2001fe88 	.word	0x2001fe88
 801cbec:	2001fe84 	.word	0x2001fe84
 801cbf0:	2001fe74 	.word	0x2001fe74
 801cbf4:	2001fe80 	.word	0x2001fe80
 801cbf8:	20019980 	.word	0x20019980
 801cbfc:	20019984 	.word	0x20019984
 801cc00:	2001998c 	.word	0x2001998c
 801cc04:	20018278 	.word	0x20018278

0801cc08 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 801cc08:	b570      	push	{r4, r5, r6, lr}
	uint8_t ret = DHCP_RUNNING;
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 801cc0a:	4c21      	ldr	r4, [pc, #132]	; (801cc90 <check_DHCP_timeout+0x88>)
 801cc0c:	f994 3000 	ldrsb.w	r3, [r4]
 801cc10:	2b01      	cmp	r3, #1
 801cc12:	dd11      	ble.n	801cc38 <check_DHCP_timeout+0x30>
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
			dhcp_retry_count++;
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 801cc14:	4d1f      	ldr	r5, [pc, #124]	; (801cc94 <check_DHCP_timeout+0x8c>)
 801cc16:	f995 3000 	ldrsb.w	r3, [r5]
 801cc1a:	2b02      	cmp	r3, #2
 801cc1c:	d029      	beq.n	801cc72 <check_DHCP_timeout+0x6a>
 801cc1e:	2b04      	cmp	r3, #4
 801cc20:	d027      	beq.n	801cc72 <check_DHCP_timeout+0x6a>
 801cc22:	2b01      	cmp	r3, #1
 801cc24:	d022      	beq.n	801cc6c <check_DHCP_timeout+0x64>
 801cc26:	2001      	movs	r0, #1


/* Rset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
	dhcp_tick_1s = 0;
 801cc28:	2300      	movs	r3, #0
	dhcp_tick_next = DHCP_WAIT_TIME;
 801cc2a:	210a      	movs	r1, #10
	dhcp_tick_1s = 0;
 801cc2c:	4d1a      	ldr	r5, [pc, #104]	; (801cc98 <check_DHCP_timeout+0x90>)
	dhcp_tick_next = DHCP_WAIT_TIME;
 801cc2e:	4a1b      	ldr	r2, [pc, #108]	; (801cc9c <check_DHCP_timeout+0x94>)
	dhcp_retry_count = 0;
 801cc30:	7023      	strb	r3, [r4, #0]
	dhcp_tick_1s = 0;
 801cc32:	602b      	str	r3, [r5, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 801cc34:	6011      	str	r1, [r2, #0]
}
 801cc36:	bd70      	pop	{r4, r5, r6, pc}
		if (dhcp_tick_next < dhcp_tick_1s) {
 801cc38:	4d17      	ldr	r5, [pc, #92]	; (801cc98 <check_DHCP_timeout+0x90>)
 801cc3a:	4e18      	ldr	r6, [pc, #96]	; (801cc9c <check_DHCP_timeout+0x94>)
 801cc3c:	682a      	ldr	r2, [r5, #0]
 801cc3e:	6831      	ldr	r1, [r6, #0]
 801cc40:	4291      	cmp	r1, r2
 801cc42:	d211      	bcs.n	801cc68 <check_DHCP_timeout+0x60>
			switch ( dhcp_state ) {
 801cc44:	4a13      	ldr	r2, [pc, #76]	; (801cc94 <check_DHCP_timeout+0x8c>)
 801cc46:	f992 2000 	ldrsb.w	r2, [r2]
 801cc4a:	2a02      	cmp	r2, #2
 801cc4c:	d016      	beq.n	801cc7c <check_DHCP_timeout+0x74>
 801cc4e:	2a04      	cmp	r2, #4
 801cc50:	d014      	beq.n	801cc7c <check_DHCP_timeout+0x74>
 801cc52:	2a01      	cmp	r2, #1
 801cc54:	d017      	beq.n	801cc86 <check_DHCP_timeout+0x7e>
			dhcp_tick_1s = 0;
 801cc56:	2200      	movs	r2, #0
 801cc58:	602a      	str	r2, [r5, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 801cc5a:	682a      	ldr	r2, [r5, #0]
			dhcp_retry_count++;
 801cc5c:	3301      	adds	r3, #1
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 801cc5e:	320a      	adds	r2, #10
			dhcp_retry_count++;
 801cc60:	2001      	movs	r0, #1
 801cc62:	7023      	strb	r3, [r4, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 801cc64:	6032      	str	r2, [r6, #0]
}
 801cc66:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t ret = DHCP_RUNNING;
 801cc68:	2001      	movs	r0, #1
}
 801cc6a:	bd70      	pop	{r4, r5, r6, pc}
				dhcp_state = STATE_DHCP_INIT;
 801cc6c:	2000      	movs	r0, #0
 801cc6e:	7028      	strb	r0, [r5, #0]
				break;
 801cc70:	e7da      	b.n	801cc28 <check_DHCP_timeout+0x20>
				send_DHCP_DISCOVER();
 801cc72:	f7ff fc15 	bl	801c4a0 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 801cc76:	2001      	movs	r0, #1
 801cc78:	7028      	strb	r0, [r5, #0]
				break;
 801cc7a:	e7d5      	b.n	801cc28 <check_DHCP_timeout+0x20>
					send_DHCP_REQUEST();
 801cc7c:	f7ff fcdc 	bl	801c638 <send_DHCP_REQUEST>
				break;
 801cc80:	f994 3000 	ldrsb.w	r3, [r4]
 801cc84:	e7e7      	b.n	801cc56 <check_DHCP_timeout+0x4e>
					send_DHCP_DISCOVER();
 801cc86:	f7ff fc0b 	bl	801c4a0 <send_DHCP_DISCOVER>
				break;
 801cc8a:	f994 3000 	ldrsb.w	r3, [r4]
 801cc8e:	e7e2      	b.n	801cc56 <check_DHCP_timeout+0x4e>
 801cc90:	20019994 	.word	0x20019994
 801cc94:	20019995 	.word	0x20019995
 801cc98:	20019998 	.word	0x20019998
 801cc9c:	2001827c 	.word	0x2001827c

0801cca0 <DHCP_run>:
{
 801cca0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 801cca2:	4c7f      	ldr	r4, [pc, #508]	; (801cea0 <DHCP_run+0x200>)
{
 801cca4:	b083      	sub	sp, #12
	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 801cca6:	f994 3000 	ldrsb.w	r3, [r4]
 801ccaa:	2b06      	cmp	r3, #6
 801ccac:	d01c      	beq.n	801cce8 <DHCP_run+0x48>
	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 801ccae:	4e7d      	ldr	r6, [pc, #500]	; (801cea4 <DHCP_run+0x204>)
 801ccb0:	7830      	ldrb	r0, [r6, #0]
 801ccb2:	0200      	lsls	r0, r0, #8
 801ccb4:	f200 4003 	addw	r0, r0, #1027	; 0x403
 801ccb8:	f7fd ff5a 	bl	801ab70 <WIZCHIP_READ>
 801ccbc:	2822      	cmp	r0, #34	; 0x22
 801ccbe:	d10c      	bne.n	801ccda <DHCP_run+0x3a>
	type = parseDHCPMSG();
 801ccc0:	f7ff fec6 	bl	801ca50 <parseDHCPMSG>
 801ccc4:	f994 3000 	ldrsb.w	r3, [r4]
 801ccc8:	b2c5      	uxtb	r5, r0
	switch ( dhcp_state ) {
 801ccca:	2b04      	cmp	r3, #4
 801cccc:	f200 80e5 	bhi.w	801ce9a <DHCP_run+0x1fa>
 801ccd0:	e8df f003 	tbb	[pc, r3]
 801ccd4:	43302017 	.word	0x43302017
 801ccd8:	0d          	.byte	0x0d
 801ccd9:	00          	.byte	0x00
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 801ccda:	2300      	movs	r3, #0
 801ccdc:	2244      	movs	r2, #68	; 0x44
 801ccde:	2102      	movs	r1, #2
 801cce0:	7830      	ldrb	r0, [r6, #0]
 801cce2:	f7fe f9bd 	bl	801b060 <socket>
 801cce6:	e7eb      	b.n	801ccc0 <DHCP_run+0x20>
	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 801cce8:	2005      	movs	r0, #5
}
 801ccea:	b003      	add	sp, #12
 801ccec:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (type == DHCP_ACK) {
 801ccee:	2d05      	cmp	r5, #5
 801ccf0:	d03e      	beq.n	801cd70 <DHCP_run+0xd0>
			} else if (type == DHCP_NAK) {
 801ccf2:	2d06      	cmp	r5, #6
 801ccf4:	f000 80a0 	beq.w	801ce38 <DHCP_run+0x198>
}
 801ccf8:	b003      	add	sp, #12
 801ccfa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			} else ret = check_DHCP_timeout();
 801ccfe:	f7ff bf83 	b.w	801cc08 <check_DHCP_timeout>
         DHCP_allocated_ip[0] = 0;
 801cd02:	2200      	movs	r2, #0
 801cd04:	4b68      	ldr	r3, [pc, #416]	; (801cea8 <DHCP_run+0x208>)
 801cd06:	601a      	str	r2, [r3, #0]
   		send_DHCP_DISCOVER();
 801cd08:	f7ff fbca 	bl	801c4a0 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 801cd0c:	2001      	movs	r0, #1
 801cd0e:	7020      	strb	r0, [r4, #0]
}
 801cd10:	b003      	add	sp, #12
 801cd12:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (type == DHCP_OFFER){
 801cd14:	2d02      	cmp	r5, #2
 801cd16:	d1ef      	bne.n	801ccf8 <DHCP_run+0x58>
				PRT_DHCP("> Receive DHCP_OFFER\r\n");
 801cd18:	4864      	ldr	r0, [pc, #400]	; (801ceac <DHCP_run+0x20c>)
 801cd1a:	4965      	ldr	r1, [pc, #404]	; (801ceb0 <DHCP_run+0x210>)
 801cd1c:	f7fb f892 	bl	8017e44 <WIZ_SECURE_printf>
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 801cd20:	4a64      	ldr	r2, [pc, #400]	; (801ceb4 <DHCP_run+0x214>)
 801cd22:	4b61      	ldr	r3, [pc, #388]	; (801cea8 <DHCP_run+0x208>)
 801cd24:	6812      	ldr	r2, [r2, #0]
 801cd26:	6912      	ldr	r2, [r2, #16]
 801cd28:	601a      	str	r2, [r3, #0]
				send_DHCP_REQUEST();
 801cd2a:	f7ff fc85 	bl	801c638 <send_DHCP_REQUEST>
	ret = DHCP_RUNNING;
 801cd2e:	2001      	movs	r0, #1
				dhcp_state = STATE_DHCP_REQUEST;
 801cd30:	7025      	strb	r5, [r4, #0]
 801cd32:	e7da      	b.n	801ccea <DHCP_run+0x4a>
			if (type == DHCP_ACK) {
 801cd34:	2d05      	cmp	r5, #5
 801cd36:	d04e      	beq.n	801cdd6 <DHCP_run+0x136>
			} else if (type == DHCP_NAK) {
 801cd38:	2d06      	cmp	r5, #6
 801cd3a:	d1dd      	bne.n	801ccf8 <DHCP_run+0x58>
				PRT_DHCP("> Receive DHCP_NACK\r\n");
 801cd3c:	495c      	ldr	r1, [pc, #368]	; (801ceb0 <DHCP_run+0x210>)
 801cd3e:	485e      	ldr	r0, [pc, #376]	; (801ceb8 <DHCP_run+0x218>)
 801cd40:	f7fb f880 	bl	8017e44 <WIZ_SECURE_printf>
	dhcp_tick_1s = 0;
 801cd44:	2300      	movs	r3, #0
	dhcp_tick_next = DHCP_WAIT_TIME;
 801cd46:	210a      	movs	r1, #10
				dhcp_state = STATE_DHCP_DISCOVER;
 801cd48:	2001      	movs	r0, #1
	dhcp_tick_1s = 0;
 801cd4a:	4a5c      	ldr	r2, [pc, #368]	; (801cebc <DHCP_run+0x21c>)
	dhcp_retry_count = 0;
 801cd4c:	4d5c      	ldr	r5, [pc, #368]	; (801cec0 <DHCP_run+0x220>)
	dhcp_tick_1s = 0;
 801cd4e:	6013      	str	r3, [r2, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 801cd50:	4a5c      	ldr	r2, [pc, #368]	; (801cec4 <DHCP_run+0x224>)
	dhcp_retry_count = 0;
 801cd52:	702b      	strb	r3, [r5, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 801cd54:	6011      	str	r1, [r2, #0]
				dhcp_state = STATE_DHCP_DISCOVER;
 801cd56:	7020      	strb	r0, [r4, #0]
 801cd58:	e7c7      	b.n	801ccea <DHCP_run+0x4a>
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 801cd5a:	4b5b      	ldr	r3, [pc, #364]	; (801cec8 <DHCP_run+0x228>)
 801cd5c:	681b      	ldr	r3, [r3, #0]
 801cd5e:	1c5a      	adds	r2, r3, #1
 801cd60:	d004      	beq.n	801cd6c <DHCP_run+0xcc>
 801cd62:	4d56      	ldr	r5, [pc, #344]	; (801cebc <DHCP_run+0x21c>)
 801cd64:	682a      	ldr	r2, [r5, #0]
 801cd66:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
 801cd6a:	d81c      	bhi.n	801cda6 <DHCP_run+0x106>
		   ret = DHCP_IP_LEASED;
 801cd6c:	2004      	movs	r0, #4
 801cd6e:	e7bc      	b.n	801ccea <DHCP_run+0x4a>
				dhcp_retry_count = 0;
 801cd70:	2600      	movs	r6, #0
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 801cd72:	4a56      	ldr	r2, [pc, #344]	; (801cecc <DHCP_run+0x22c>)
 801cd74:	4b4c      	ldr	r3, [pc, #304]	; (801cea8 <DHCP_run+0x208>)
 801cd76:	7810      	ldrb	r0, [r2, #0]
 801cd78:	7819      	ldrb	r1, [r3, #0]
				dhcp_retry_count = 0;
 801cd7a:	4d51      	ldr	r5, [pc, #324]	; (801cec0 <DHCP_run+0x220>)
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 801cd7c:	4288      	cmp	r0, r1
				dhcp_retry_count = 0;
 801cd7e:	702e      	strb	r6, [r5, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 801cd80:	d06a      	beq.n	801ce58 <DHCP_run+0x1b8>
					dhcp_ip_update();
 801cd82:	4b53      	ldr	r3, [pc, #332]	; (801ced0 <DHCP_run+0x230>)
 801cd84:	681b      	ldr	r3, [r3, #0]
 801cd86:	4798      	blx	r3
                  PRT_DHCP(">IP changed.\r\n");
 801cd88:	4852      	ldr	r0, [pc, #328]	; (801ced4 <DHCP_run+0x234>)
 801cd8a:	4949      	ldr	r1, [pc, #292]	; (801ceb0 <DHCP_run+0x210>)
 801cd8c:	f7fb f85a 	bl	8017e44 <WIZ_SECURE_printf>
					ret = DHCP_IP_CHANGED;
 801cd90:	2003      	movs	r0, #3
	dhcp_tick_1s = 0;
 801cd92:	2300      	movs	r3, #0
				dhcp_state = STATE_DHCP_LEASED;
 801cd94:	2203      	movs	r2, #3
	dhcp_tick_next = DHCP_WAIT_TIME;
 801cd96:	210a      	movs	r1, #10
	dhcp_retry_count = 0;
 801cd98:	702b      	strb	r3, [r5, #0]
				dhcp_state = STATE_DHCP_LEASED;
 801cd9a:	7022      	strb	r2, [r4, #0]
	dhcp_tick_1s = 0;
 801cd9c:	4d47      	ldr	r5, [pc, #284]	; (801cebc <DHCP_run+0x21c>)
	dhcp_tick_next = DHCP_WAIT_TIME;
 801cd9e:	4a49      	ldr	r2, [pc, #292]	; (801cec4 <DHCP_run+0x224>)
	dhcp_tick_1s = 0;
 801cda0:	602b      	str	r3, [r5, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 801cda2:	6011      	str	r1, [r2, #0]
				dhcp_state = STATE_DHCP_LEASED;
 801cda4:	e7a1      	b.n	801ccea <DHCP_run+0x4a>
                PRT_DHCP("> Maintains the IP address \r\n");
 801cda6:	4942      	ldr	r1, [pc, #264]	; (801ceb0 <DHCP_run+0x210>)
 801cda8:	484b      	ldr	r0, [pc, #300]	; (801ced8 <DHCP_run+0x238>)
 801cdaa:	f7fb f84b 	bl	8017e44 <WIZ_SECURE_printf>
				DHCP_XID++;
 801cdae:	4a4b      	ldr	r2, [pc, #300]	; (801cedc <DHCP_run+0x23c>)
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 801cdb0:	493d      	ldr	r1, [pc, #244]	; (801cea8 <DHCP_run+0x208>)
				DHCP_XID++;
 801cdb2:	6813      	ldr	r3, [r2, #0]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 801cdb4:	6808      	ldr	r0, [r1, #0]
 801cdb6:	4945      	ldr	r1, [pc, #276]	; (801cecc <DHCP_run+0x22c>)
				DHCP_XID++;
 801cdb8:	3301      	adds	r3, #1
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 801cdba:	6008      	str	r0, [r1, #0]
				DHCP_XID++;
 801cdbc:	6013      	str	r3, [r2, #0]
				send_DHCP_REQUEST();
 801cdbe:	f7ff fc3b 	bl	801c638 <send_DHCP_REQUEST>
	dhcp_tick_1s = 0;
 801cdc2:	2300      	movs	r3, #0
	dhcp_tick_next = DHCP_WAIT_TIME;
 801cdc4:	210a      	movs	r1, #10
				dhcp_state = STATE_DHCP_REREQUEST;
 801cdc6:	2004      	movs	r0, #4
	dhcp_retry_count = 0;
 801cdc8:	4e3d      	ldr	r6, [pc, #244]	; (801cec0 <DHCP_run+0x220>)
	dhcp_tick_next = DHCP_WAIT_TIME;
 801cdca:	4a3e      	ldr	r2, [pc, #248]	; (801cec4 <DHCP_run+0x224>)
	dhcp_tick_1s = 0;
 801cdcc:	602b      	str	r3, [r5, #0]
	dhcp_retry_count = 0;
 801cdce:	7033      	strb	r3, [r6, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 801cdd0:	6011      	str	r1, [r2, #0]
				dhcp_state = STATE_DHCP_REREQUEST;
 801cdd2:	7020      	strb	r0, [r4, #0]
 801cdd4:	e789      	b.n	801ccea <DHCP_run+0x4a>
				PRT_DHCP("> Receive DHCP_ACK\r\n");
 801cdd6:	4936      	ldr	r1, [pc, #216]	; (801ceb0 <DHCP_run+0x210>)
 801cdd8:	4841      	ldr	r0, [pc, #260]	; (801cee0 <DHCP_run+0x240>)
 801cdda:	f7fb f833 	bl	8017e44 <WIZ_SECURE_printf>
	tmp = getRCR();
 801cdde:	2019      	movs	r0, #25
 801cde0:	f7fd fec6 	bl	801ab70 <WIZCHIP_READ>
	setRCR(0x03);
 801cde4:	2103      	movs	r1, #3
	tmp = getRCR();
 801cde6:	4607      	mov	r7, r0
	setRCR(0x03);
 801cde8:	2019      	movs	r0, #25
 801cdea:	f7fd fea3 	bl	801ab34 <WIZCHIP_WRITE>
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 801cdee:	f241 3388 	movw	r3, #5000	; 0x1388
 801cdf2:	2211      	movs	r2, #17
 801cdf4:	7830      	ldrb	r0, [r6, #0]
 801cdf6:	493b      	ldr	r1, [pc, #236]	; (801cee4 <DHCP_run+0x244>)
 801cdf8:	9300      	str	r3, [sp, #0]
 801cdfa:	4b2b      	ldr	r3, [pc, #172]	; (801cea8 <DHCP_run+0x208>)
 801cdfc:	f7fe fd62 	bl	801b8c4 <sendto>
 801ce00:	4605      	mov	r5, r0
	setRCR(tmp);
 801ce02:	4639      	mov	r1, r7
 801ce04:	2019      	movs	r0, #25
 801ce06:	f7fd fe95 	bl	801ab34 <WIZCHIP_WRITE>
	if(ret == SOCKERR_TIMEOUT) {
 801ce0a:	350d      	adds	r5, #13
 801ce0c:	d036      	beq.n	801ce7c <DHCP_run+0x1dc>
		send_DHCP_DECLINE();
 801ce0e:	f7ff fdc3 	bl	801c998 <send_DHCP_DECLINE>
		ret = dhcp_tick_1s;
 801ce12:	4a2a      	ldr	r2, [pc, #168]	; (801cebc <DHCP_run+0x21c>)
 801ce14:	6811      	ldr	r1, [r2, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 801ce16:	6813      	ldr	r3, [r2, #0]
 801ce18:	1a5b      	subs	r3, r3, r1
 801ce1a:	2b01      	cmp	r3, #1
 801ce1c:	d9fb      	bls.n	801ce16 <DHCP_run+0x176>
	dhcp_tick_1s = 0;
 801ce1e:	2500      	movs	r5, #0
	dhcp_tick_next = DHCP_WAIT_TIME;
 801ce20:	200a      	movs	r0, #10
 801ce22:	4928      	ldr	r1, [pc, #160]	; (801cec4 <DHCP_run+0x224>)
	dhcp_retry_count = 0;
 801ce24:	4e26      	ldr	r6, [pc, #152]	; (801cec0 <DHCP_run+0x220>)
					dhcp_ip_conflict();
 801ce26:	4b30      	ldr	r3, [pc, #192]	; (801cee8 <DHCP_run+0x248>)
	dhcp_tick_next = DHCP_WAIT_TIME;
 801ce28:	6008      	str	r0, [r1, #0]
					dhcp_ip_conflict();
 801ce2a:	681b      	ldr	r3, [r3, #0]
	dhcp_tick_1s = 0;
 801ce2c:	6015      	str	r5, [r2, #0]
	dhcp_retry_count = 0;
 801ce2e:	7035      	strb	r5, [r6, #0]
					dhcp_ip_conflict();
 801ce30:	4798      	blx	r3
	ret = DHCP_RUNNING;
 801ce32:	2001      	movs	r0, #1
				    dhcp_state = STATE_DHCP_INIT;
 801ce34:	7025      	strb	r5, [r4, #0]
 801ce36:	e758      	b.n	801ccea <DHCP_run+0x4a>
				PRT_DHCP("> Receive DHCP_NACK, Failed to maintain ip\r\n");
 801ce38:	491d      	ldr	r1, [pc, #116]	; (801ceb0 <DHCP_run+0x210>)
 801ce3a:	482c      	ldr	r0, [pc, #176]	; (801ceec <DHCP_run+0x24c>)
 801ce3c:	f7fb f802 	bl	8017e44 <WIZ_SECURE_printf>
	dhcp_tick_1s = 0;
 801ce40:	2300      	movs	r3, #0
	dhcp_tick_next = DHCP_WAIT_TIME;
 801ce42:	200a      	movs	r0, #10
				dhcp_state = STATE_DHCP_DISCOVER;
 801ce44:	2201      	movs	r2, #1
	dhcp_tick_1s = 0;
 801ce46:	491d      	ldr	r1, [pc, #116]	; (801cebc <DHCP_run+0x21c>)
	dhcp_retry_count = 0;
 801ce48:	4d1d      	ldr	r5, [pc, #116]	; (801cec0 <DHCP_run+0x220>)
	dhcp_tick_1s = 0;
 801ce4a:	600b      	str	r3, [r1, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 801ce4c:	491d      	ldr	r1, [pc, #116]	; (801cec4 <DHCP_run+0x224>)
	dhcp_retry_count = 0;
 801ce4e:	702b      	strb	r3, [r5, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 801ce50:	6008      	str	r0, [r1, #0]
				dhcp_state = STATE_DHCP_DISCOVER;
 801ce52:	7022      	strb	r2, [r4, #0]
		   ret = DHCP_IP_LEASED;
 801ce54:	2004      	movs	r0, #4
 801ce56:	e748      	b.n	801ccea <DHCP_run+0x4a>
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 801ce58:	7850      	ldrb	r0, [r2, #1]
 801ce5a:	7859      	ldrb	r1, [r3, #1]
 801ce5c:	4288      	cmp	r0, r1
 801ce5e:	d190      	bne.n	801cd82 <DHCP_run+0xe2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 801ce60:	7890      	ldrb	r0, [r2, #2]
 801ce62:	7899      	ldrb	r1, [r3, #2]
 801ce64:	4288      	cmp	r0, r1
 801ce66:	d18c      	bne.n	801cd82 <DHCP_run+0xe2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 801ce68:	78d2      	ldrb	r2, [r2, #3]
 801ce6a:	78db      	ldrb	r3, [r3, #3]
 801ce6c:	429a      	cmp	r2, r3
 801ce6e:	d188      	bne.n	801cd82 <DHCP_run+0xe2>
            else PRT_DHCP(">IP is continued.\r\n");
 801ce70:	481f      	ldr	r0, [pc, #124]	; (801cef0 <DHCP_run+0x250>)
 801ce72:	490f      	ldr	r1, [pc, #60]	; (801ceb0 <DHCP_run+0x210>)
 801ce74:	f7fa ffe6 	bl	8017e44 <WIZ_SECURE_printf>
		   ret = DHCP_IP_LEASED;
 801ce78:	2004      	movs	r0, #4
 801ce7a:	e78a      	b.n	801cd92 <DHCP_run+0xf2>
					dhcp_ip_assign();
 801ce7c:	4b1d      	ldr	r3, [pc, #116]	; (801cef4 <DHCP_run+0x254>)
	dhcp_retry_count = 0;
 801ce7e:	4d10      	ldr	r5, [pc, #64]	; (801cec0 <DHCP_run+0x220>)
					dhcp_ip_assign();
 801ce80:	681b      	ldr	r3, [r3, #0]
 801ce82:	4798      	blx	r3
	dhcp_tick_1s = 0;
 801ce84:	2300      	movs	r3, #0
	dhcp_tick_next = DHCP_WAIT_TIME;
 801ce86:	200a      	movs	r0, #10
					dhcp_state = STATE_DHCP_LEASED;
 801ce88:	2203      	movs	r2, #3
	dhcp_tick_1s = 0;
 801ce8a:	490c      	ldr	r1, [pc, #48]	; (801cebc <DHCP_run+0x21c>)
	dhcp_retry_count = 0;
 801ce8c:	702b      	strb	r3, [r5, #0]
	dhcp_tick_1s = 0;
 801ce8e:	600b      	str	r3, [r1, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 801ce90:	490c      	ldr	r1, [pc, #48]	; (801cec4 <DHCP_run+0x224>)
					dhcp_state = STATE_DHCP_LEASED;
 801ce92:	7022      	strb	r2, [r4, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 801ce94:	6008      	str	r0, [r1, #0]
	ret = DHCP_RUNNING;
 801ce96:	2001      	movs	r0, #1
 801ce98:	e727      	b.n	801ccea <DHCP_run+0x4a>
	switch ( dhcp_state ) {
 801ce9a:	2001      	movs	r0, #1
 801ce9c:	e725      	b.n	801ccea <DHCP_run+0x4a>
 801ce9e:	bf00      	nop
 801cea0:	20019995 	.word	0x20019995
 801cea4:	2001fe88 	.word	0x2001fe88
 801cea8:	20019988 	.word	0x20019988
 801ceac:	08033a4c 	.word	0x08033a4c
 801ceb0:	08033b84 	.word	0x08033b84
 801ceb4:	2001fe84 	.word	0x2001fe84
 801ceb8:	08033aa8 	.word	0x08033aa8
 801cebc:	20019998 	.word	0x20019998
 801cec0:	20019994 	.word	0x20019994
 801cec4:	2001827c 	.word	0x2001827c
 801cec8:	20018278 	.word	0x20018278
 801cecc:	20019990 	.word	0x20019990
 801ced0:	20018274 	.word	0x20018274
 801ced4:	08033af8 	.word	0x08033af8
 801ced8:	08033acc 	.word	0x08033acc
 801cedc:	2001fe7c 	.word	0x2001fe7c
 801cee0:	08033a70 	.word	0x08033a70
 801cee4:	08033a94 	.word	0x08033a94
 801cee8:	20018270 	.word	0x20018270
 801ceec:	08033b34 	.word	0x08033b34
 801cef0:	08033b14 	.word	0x08033b14
 801cef4:	2001826c 	.word	0x2001826c

0801cef8 <DHCP_init>:
   uint8_t zeroip[4] = {0,0,0,0};
 801cef8:	2300      	movs	r3, #0
{
 801cefa:	b570      	push	{r4, r5, r6, lr}
   getSHAR(DHCP_CHADDR);
 801cefc:	4e20      	ldr	r6, [pc, #128]	; (801cf80 <DHCP_init+0x88>)
 801cefe:	2206      	movs	r2, #6
{
 801cf00:	b082      	sub	sp, #8
 801cf02:	4605      	mov	r5, r0
 801cf04:	460c      	mov	r4, r1
   getSHAR(DHCP_CHADDR);
 801cf06:	2009      	movs	r0, #9
 801cf08:	4631      	mov	r1, r6
   uint8_t zeroip[4] = {0,0,0,0};
 801cf0a:	9301      	str	r3, [sp, #4]
   getSHAR(DHCP_CHADDR);
 801cf0c:	f7fd fe76 	bl	801abfc <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 801cf10:	7872      	ldrb	r2, [r6, #1]
 801cf12:	7833      	ldrb	r3, [r6, #0]
 801cf14:	78b1      	ldrb	r1, [r6, #2]
 801cf16:	4313      	orrs	r3, r2
 801cf18:	78f2      	ldrb	r2, [r6, #3]
 801cf1a:	430b      	orrs	r3, r1
 801cf1c:	7931      	ldrb	r1, [r6, #4]
 801cf1e:	4313      	orrs	r3, r2
 801cf20:	7972      	ldrb	r2, [r6, #5]
 801cf22:	430b      	orrs	r3, r1
 801cf24:	4313      	orrs	r3, r2
 801cf26:	d021      	beq.n	801cf6c <DHCP_init+0x74>
	DHCP_SOCKET = s; // SOCK_DHCP
 801cf28:	4916      	ldr	r1, [pc, #88]	; (801cf84 <DHCP_init+0x8c>)
	pDHCPMSG = (RIP_MSG*)buf;
 801cf2a:	4a17      	ldr	r2, [pc, #92]	; (801cf88 <DHCP_init+0x90>)
	DHCP_XID = 0x12345678;
 801cf2c:	4b17      	ldr	r3, [pc, #92]	; (801cf8c <DHCP_init+0x94>)
 801cf2e:	4e18      	ldr	r6, [pc, #96]	; (801cf90 <DHCP_init+0x98>)
	DHCP_SOCKET = s; // SOCK_DHCP
 801cf30:	700d      	strb	r5, [r1, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 801cf32:	6014      	str	r4, [r2, #0]
	setSIPR(zeroip);
 801cf34:	a901      	add	r1, sp, #4
 801cf36:	2204      	movs	r2, #4
 801cf38:	200f      	movs	r0, #15
	DHCP_XID = 0x12345678;
 801cf3a:	601e      	str	r6, [r3, #0]
	setSIPR(zeroip);
 801cf3c:	f7fd fe36 	bl	801abac <WIZCHIP_WRITE_BUF>
	setSIPR(zeroip);
 801cf40:	a901      	add	r1, sp, #4
 801cf42:	2204      	movs	r2, #4
 801cf44:	200f      	movs	r0, #15
 801cf46:	f7fd fe31 	bl	801abac <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 801cf4a:	a901      	add	r1, sp, #4
 801cf4c:	2204      	movs	r2, #4
 801cf4e:	2001      	movs	r0, #1
 801cf50:	f7fd fe2c 	bl	801abac <WIZCHIP_WRITE_BUF>
	dhcp_tick_1s = 0;
 801cf54:	2300      	movs	r3, #0
	dhcp_tick_next = DHCP_WAIT_TIME;
 801cf56:	210a      	movs	r1, #10
	dhcp_tick_1s = 0;
 801cf58:	4d0e      	ldr	r5, [pc, #56]	; (801cf94 <DHCP_init+0x9c>)
	dhcp_retry_count = 0;
 801cf5a:	4c0f      	ldr	r4, [pc, #60]	; (801cf98 <DHCP_init+0xa0>)
	dhcp_state = STATE_DHCP_INIT;
 801cf5c:	480f      	ldr	r0, [pc, #60]	; (801cf9c <DHCP_init+0xa4>)
	dhcp_tick_next = DHCP_WAIT_TIME;
 801cf5e:	4a10      	ldr	r2, [pc, #64]	; (801cfa0 <DHCP_init+0xa8>)
	dhcp_tick_1s = 0;
 801cf60:	602b      	str	r3, [r5, #0]
	dhcp_retry_count = 0;
 801cf62:	7023      	strb	r3, [r4, #0]
	dhcp_state = STATE_DHCP_INIT;
 801cf64:	7003      	strb	r3, [r0, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 801cf66:	6011      	str	r1, [r2, #0]
}
 801cf68:	b002      	add	sp, #8
 801cf6a:	bd70      	pop	{r4, r5, r6, pc}
      DHCP_CHADDR[0] = 0x00;
 801cf6c:	480d      	ldr	r0, [pc, #52]	; (801cfa4 <DHCP_init+0xac>)
      setSHAR(DHCP_CHADDR);     
 801cf6e:	4631      	mov	r1, r6
      DHCP_CHADDR[0] = 0x00;
 801cf70:	6030      	str	r0, [r6, #0]
      setSHAR(DHCP_CHADDR);     
 801cf72:	2206      	movs	r2, #6
 801cf74:	2009      	movs	r0, #9
      DHCP_CHADDR[4] = 0x00;
 801cf76:	7133      	strb	r3, [r6, #4]
      DHCP_CHADDR[5] = 0x00; 
 801cf78:	7173      	strb	r3, [r6, #5]
      setSHAR(DHCP_CHADDR);     
 801cf7a:	f7fd fe17 	bl	801abac <WIZCHIP_WRITE_BUF>
 801cf7e:	e7d3      	b.n	801cf28 <DHCP_init+0x30>
 801cf80:	2001fe74 	.word	0x2001fe74
 801cf84:	2001fe88 	.word	0x2001fe88
 801cf88:	2001fe84 	.word	0x2001fe84
 801cf8c:	2001fe7c 	.word	0x2001fe7c
 801cf90:	12345678 	.word	0x12345678
 801cf94:	20019998 	.word	0x20019998
 801cf98:	20019994 	.word	0x20019994
 801cf9c:	20019995 	.word	0x20019995
 801cfa0:	2001827c 	.word	0x2001827c
 801cfa4:	00dc0800 	.word	0x00dc0800

0801cfa8 <DHCP_time_handler>:
}

void DHCP_time_handler(void)
{
	dhcp_tick_1s++;
 801cfa8:	4a02      	ldr	r2, [pc, #8]	; (801cfb4 <DHCP_time_handler+0xc>)
 801cfaa:	6813      	ldr	r3, [r2, #0]
 801cfac:	3301      	adds	r3, #1
 801cfae:	6013      	str	r3, [r2, #0]
}
 801cfb0:	4770      	bx	lr
 801cfb2:	bf00      	nop
 801cfb4:	20019998 	.word	0x20019998

0801cfb8 <getIPfromDHCP>:

void getIPfromDHCP(uint8_t* ip)
{
	ip[0] = DHCP_allocated_ip[0];
 801cfb8:	4b04      	ldr	r3, [pc, #16]	; (801cfcc <getIPfromDHCP+0x14>)
 801cfba:	781a      	ldrb	r2, [r3, #0]
 801cfbc:	7002      	strb	r2, [r0, #0]
	ip[1] = DHCP_allocated_ip[1];
 801cfbe:	785a      	ldrb	r2, [r3, #1]
 801cfc0:	7042      	strb	r2, [r0, #1]
	ip[2] = DHCP_allocated_ip[2];	
 801cfc2:	789a      	ldrb	r2, [r3, #2]
 801cfc4:	7082      	strb	r2, [r0, #2]
	ip[3] = DHCP_allocated_ip[3];
 801cfc6:	78db      	ldrb	r3, [r3, #3]
 801cfc8:	70c3      	strb	r3, [r0, #3]
}
 801cfca:	4770      	bx	lr
 801cfcc:	20019988 	.word	0x20019988

0801cfd0 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
	ip[0] =DHCP_allocated_gw[0];
 801cfd0:	4b04      	ldr	r3, [pc, #16]	; (801cfe4 <getGWfromDHCP+0x14>)
 801cfd2:	781a      	ldrb	r2, [r3, #0]
 801cfd4:	7002      	strb	r2, [r0, #0]
	ip[1] =DHCP_allocated_gw[1];
 801cfd6:	785a      	ldrb	r2, [r3, #1]
 801cfd8:	7042      	strb	r2, [r0, #1]
	ip[2] =DHCP_allocated_gw[2];
 801cfda:	789a      	ldrb	r2, [r3, #2]
 801cfdc:	7082      	strb	r2, [r0, #2]
	ip[3] =DHCP_allocated_gw[3];			
 801cfde:	78db      	ldrb	r3, [r3, #3]
 801cfe0:	70c3      	strb	r3, [r0, #3]
}
 801cfe2:	4770      	bx	lr
 801cfe4:	20019984 	.word	0x20019984

0801cfe8 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
   ip[0] = DHCP_allocated_sn[0];
 801cfe8:	4b04      	ldr	r3, [pc, #16]	; (801cffc <getSNfromDHCP+0x14>)
 801cfea:	781a      	ldrb	r2, [r3, #0]
 801cfec:	7002      	strb	r2, [r0, #0]
   ip[1] = DHCP_allocated_sn[1];
 801cfee:	785a      	ldrb	r2, [r3, #1]
 801cff0:	7042      	strb	r2, [r0, #1]
   ip[2] = DHCP_allocated_sn[2];
 801cff2:	789a      	ldrb	r2, [r3, #2]
 801cff4:	7082      	strb	r2, [r0, #2]
   ip[3] = DHCP_allocated_sn[3];         
 801cff6:	78db      	ldrb	r3, [r3, #3]
 801cff8:	70c3      	strb	r3, [r0, #3]
}
 801cffa:	4770      	bx	lr
 801cffc:	2001998c 	.word	0x2001998c

0801d000 <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
   ip[0] = DHCP_allocated_dns[0];
 801d000:	4b04      	ldr	r3, [pc, #16]	; (801d014 <getDNSfromDHCP+0x14>)
 801d002:	781a      	ldrb	r2, [r3, #0]
 801d004:	7002      	strb	r2, [r0, #0]
   ip[1] = DHCP_allocated_dns[1];
 801d006:	785a      	ldrb	r2, [r3, #1]
 801d008:	7042      	strb	r2, [r0, #1]
   ip[2] = DHCP_allocated_dns[2];
 801d00a:	789a      	ldrb	r2, [r3, #2]
 801d00c:	7082      	strb	r2, [r0, #2]
   ip[3] = DHCP_allocated_dns[3];         
 801d00e:	78db      	ldrb	r3, [r3, #3]
 801d010:	70c3      	strb	r3, [r0, #3]
}
 801d012:	4770      	bx	lr
 801d014:	20019980 	.word	0x20019980

0801d018 <getDHCPLeasetime>:

uint32_t getDHCPLeasetime(void)
{
	return dhcp_lease_time;
 801d018:	4b01      	ldr	r3, [pc, #4]	; (801d020 <getDHCPLeasetime+0x8>)
}
 801d01a:	6818      	ldr	r0, [r3, #0]
 801d01c:	4770      	bx	lr
 801d01e:	bf00      	nop
 801d020:	20018278 	.word	0x20018278

0801d024 <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 801d024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
	int indirect = 0;	/* Set if indirection encountered */
	int nseg = 0;		/* Total number of segments in name */
 801d028:	f04f 0800 	mov.w	r8, #0

	cp = compressed;

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 801d02c:	460d      	mov	r5, r1
{
 801d02e:	4683      	mov	fp, r0
	int indirect = 0;	/* Set if indirection encountered */
 801d030:	4640      	mov	r0, r8
		slen = *cp++;	/* Length of this segment */
 801d032:	f815 4b01 	ldrb.w	r4, [r5], #1
{
 801d036:	4696      	mov	lr, r2
	int clen = 0;		/* Total length of compressed name */
 801d038:	46c1      	mov	r9, r8
		if (len < 0) return -1;

		if (!indirect) clen += slen;

		while (slen-- != 0) *buf++ = (char)*cp++;
		*buf++ = '.';
 801d03a:	f04f 0a2e 	mov.w	sl, #46	; 0x2e
		slen = *cp++;	/* Length of this segment */
 801d03e:	b2a2      	uxth	r2, r4
		if ((slen & 0xc0) == 0xc0)
 801d040:	f004 06c0 	and.w	r6, r4, #192	; 0xc0
		if (!indirect) clen++;
 801d044:	2800      	cmp	r0, #0
 801d046:	d14f      	bne.n	801d0e8 <parse_name+0xc4>
		if ((slen & 0xc0) == 0xc0)
 801d048:	2ec0      	cmp	r6, #192	; 0xc0
 801d04a:	d074      	beq.n	801d136 <parse_name+0x112>
		if (!indirect) clen++;
 801d04c:	f109 0901 	add.w	r9, r9, #1
		if (slen == 0)	/* zero length == all done */
 801d050:	2a00      	cmp	r2, #0
 801d052:	d058      	beq.n	801d106 <parse_name+0xe2>
		len -= slen + 1;
 801d054:	3b01      	subs	r3, #1
 801d056:	1a9b      	subs	r3, r3, r2
 801d058:	b21b      	sxth	r3, r3
		if (len < 0) return -1;
 801d05a:	2b00      	cmp	r3, #0
 801d05c:	db72      	blt.n	801d144 <parse_name+0x120>
		if (!indirect) clen += slen;
 801d05e:	b900      	cbnz	r0, 801d062 <parse_name+0x3e>
 801d060:	4491      	add	r9, r2
		while (slen-- != 0) *buf++ = (char)*cp++;
 801d062:	f10e 0103 	add.w	r1, lr, #3
 801d066:	1b49      	subs	r1, r1, r5
 801d068:	1e57      	subs	r7, r2, #1
 801d06a:	2906      	cmp	r1, #6
 801d06c:	b2bf      	uxth	r7, r7
 801d06e:	d955      	bls.n	801d11c <parse_name+0xf8>
 801d070:	2f07      	cmp	r7, #7
 801d072:	d953      	bls.n	801d11c <parse_name+0xf8>
 801d074:	4629      	mov	r1, r5
 801d076:	4674      	mov	r4, lr
 801d078:	ea4f 0c92 	mov.w	ip, r2, lsr #2
 801d07c:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d080:	fa1f f68c 	uxth.w	r6, ip
 801d084:	f105 0c04 	add.w	ip, r5, #4
 801d088:	eb0c 0c86 	add.w	ip, ip, r6, lsl #2
 801d08c:	f851 6b04 	ldr.w	r6, [r1], #4
 801d090:	4561      	cmp	r1, ip
 801d092:	f844 6b04 	str.w	r6, [r4], #4
 801d096:	d1f9      	bne.n	801d08c <parse_name+0x68>
 801d098:	f002 01fc 	and.w	r1, r2, #252	; 0xfc
 801d09c:	1a7c      	subs	r4, r7, r1
 801d09e:	428a      	cmp	r2, r1
 801d0a0:	b2a4      	uxth	r4, r4
 801d0a2:	eb0e 0601 	add.w	r6, lr, r1
 801d0a6:	eb05 0c01 	add.w	ip, r5, r1
 801d0aa:	d035      	beq.n	801d118 <parse_name+0xf4>
 801d0ac:	5c6a      	ldrb	r2, [r5, r1]
 801d0ae:	f80e 2001 	strb.w	r2, [lr, r1]
 801d0b2:	b38c      	cbz	r4, 801d118 <parse_name+0xf4>
 801d0b4:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801d0b8:	2c01      	cmp	r4, #1
 801d0ba:	7072      	strb	r2, [r6, #1]
 801d0bc:	d02c      	beq.n	801d118 <parse_name+0xf4>
 801d0be:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801d0c2:	1c79      	adds	r1, r7, #1
 801d0c4:	70b2      	strb	r2, [r6, #2]
 801d0c6:	eb0e 0201 	add.w	r2, lr, r1
		*buf++ = '.';
 801d0ca:	4429      	add	r1, r5
		slen = *cp++;	/* Length of this segment */
 801d0cc:	460d      	mov	r5, r1
		*buf++ = '.';
 801d0ce:	f882 a000 	strb.w	sl, [r2]
		slen = *cp++;	/* Length of this segment */
 801d0d2:	f815 4b01 	ldrb.w	r4, [r5], #1
		*buf++ = '.';
 801d0d6:	3702      	adds	r7, #2
 801d0d8:	44be      	add	lr, r7
		nseg++;
 801d0da:	f108 0801 	add.w	r8, r8, #1
		slen = *cp++;	/* Length of this segment */
 801d0de:	b2a2      	uxth	r2, r4
		if ((slen & 0xc0) == 0xc0)
 801d0e0:	f004 06c0 	and.w	r6, r4, #192	; 0xc0
		if (!indirect) clen++;
 801d0e4:	2800      	cmp	r0, #0
 801d0e6:	d0af      	beq.n	801d048 <parse_name+0x24>
		if ((slen & 0xc0) == 0xc0)
 801d0e8:	2ec0      	cmp	r6, #192	; 0xc0
 801d0ea:	d1b1      	bne.n	801d050 <parse_name+0x2c>
			indirect = 1;
 801d0ec:	2001      	movs	r0, #1
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 801d0ee:	7849      	ldrb	r1, [r1, #1]
 801d0f0:	0222      	lsls	r2, r4, #8
 801d0f2:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
 801d0f6:	440a      	add	r2, r1
 801d0f8:	eb0b 0502 	add.w	r5, fp, r2
			slen = *cp++;
 801d0fc:	f81b 2002 	ldrb.w	r2, [fp, r2]
 801d100:	4405      	add	r5, r0
		if (slen == 0)	/* zero length == all done */
 801d102:	2a00      	cmp	r2, #0
 801d104:	d1a6      	bne.n	801d054 <parse_name+0x30>
	}

	if (nseg == 0)
 801d106:	f1b8 0f00 	cmp.w	r8, #0
 801d10a:	d017      	beq.n	801d13c <parse_name+0x118>
		/* Root name; represent as single dot */
		*buf++ = '.';
		len--;
	}

	*buf++ = '\0';
 801d10c:	2300      	movs	r3, #0
 801d10e:	f88e 3000 	strb.w	r3, [lr]
	len--;

	return clen;	/* Length of compressed message */
}
 801d112:	4648      	mov	r0, r9
 801d114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d118:	1c79      	adds	r1, r7, #1
 801d11a:	e7d4      	b.n	801d0c6 <parse_name+0xa2>
		while (slen-- != 0) *buf++ = (char)*cp++;
 801d11c:	462a      	mov	r2, r5
 801d11e:	1c79      	adds	r1, r7, #1
 801d120:	eb05 0c01 	add.w	ip, r5, r1
 801d124:	f10e 34ff 	add.w	r4, lr, #4294967295
 801d128:	f812 6b01 	ldrb.w	r6, [r2], #1
 801d12c:	4562      	cmp	r2, ip
 801d12e:	f804 6f01 	strb.w	r6, [r4, #1]!
 801d132:	d1f9      	bne.n	801d128 <parse_name+0x104>
 801d134:	e7c7      	b.n	801d0c6 <parse_name+0xa2>
				clen++;
 801d136:	f109 0902 	add.w	r9, r9, #2
 801d13a:	e7d7      	b.n	801d0ec <parse_name+0xc8>
		*buf++ = '.';
 801d13c:	232e      	movs	r3, #46	; 0x2e
 801d13e:	f80e 3b01 	strb.w	r3, [lr], #1
		len--;
 801d142:	e7e3      	b.n	801d10c <parse_name+0xe8>
		if (len < 0) return -1;
 801d144:	f04f 39ff 	mov.w	r9, #4294967295
}
 801d148:	4648      	mov	r0, r9
 801d14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d14e:	bf00      	nop

0801d150 <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 801d150:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d152:	b099      	sub	sp, #100	; 0x64
 801d154:	4614      	mov	r4, r2
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 801d156:	2360      	movs	r3, #96	; 0x60
 801d158:	466a      	mov	r2, sp
{
 801d15a:	4605      	mov	r5, r0
 801d15c:	460e      	mov	r6, r1
	len = parse_name(msg, cp, name, MAXCNAME);
 801d15e:	f7ff ff61 	bl	801d024 <parse_name>

	if (len == -1) return 0;
 801d162:	1c47      	adds	r7, r0, #1
 801d164:	d04a      	beq.n	801d1fc <dns_answer+0xac>

	cp += len;
 801d166:	1832      	adds	r2, r6, r0
	i = *s++ << 8;
 801d168:	5c31      	ldrb	r1, [r6, r0]
	i = i + *s;
 801d16a:	7853      	ldrb	r3, [r2, #1]
	type = get16(cp);
	cp += 2;		/* type */
	cp += 2;		/* class */
	cp += 4;		/* ttl */
	cp += 2;		/* len */
 801d16c:	f102 070a 	add.w	r7, r2, #10
	i = i + *s;
 801d170:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801d174:	b29b      	uxth	r3, r3
 801d176:	3b01      	subs	r3, #1
 801d178:	2b0e      	cmp	r3, #14
 801d17a:	d81d      	bhi.n	801d1b8 <dns_answer+0x68>
 801d17c:	e8df f003 	tbb	[pc, r3]
 801d180:	1c1c1f42 	.word	0x1c1c1f42
 801d184:	1f1f081f 	.word	0x1f1f081f
 801d188:	1f1c1c1f 	.word	0x1f1c1c1f
 801d18c:	1c2b      	.short	0x1c2b
 801d18e:	34          	.byte	0x34
 801d18f:	00          	.byte	0x00

		cp += len;
		break;
	case TYPE_SOA:
		/* Get domain name of name server */
		len = parse_name(msg, cp, name, MAXCNAME);
 801d190:	466a      	mov	r2, sp
 801d192:	2360      	movs	r3, #96	; 0x60
 801d194:	4639      	mov	r1, r7
 801d196:	4628      	mov	r0, r5
 801d198:	f7ff ff44 	bl	801d024 <parse_name>
		if (len == -1) return 0;
 801d19c:	1c42      	adds	r2, r0, #1
 801d19e:	d02d      	beq.n	801d1fc <dns_answer+0xac>

		cp += len;
 801d1a0:	4407      	add	r7, r0

		/* Get domain name of responsible person */
		len = parse_name(msg, cp, name, MAXCNAME);
 801d1a2:	2360      	movs	r3, #96	; 0x60
 801d1a4:	466a      	mov	r2, sp
 801d1a6:	4628      	mov	r0, r5
 801d1a8:	4639      	mov	r1, r7
 801d1aa:	f7ff ff3b 	bl	801d024 <parse_name>
		if (len == -1) return 0;
 801d1ae:	1c43      	adds	r3, r0, #1
 801d1b0:	d024      	beq.n	801d1fc <dns_answer+0xac>

		cp += len;
 801d1b2:	183e      	adds	r6, r7, r0

		cp += 4;
		cp += 4;
		cp += 4;
		cp += 4;
		cp += 4;
 801d1b4:	f106 0714 	add.w	r7, r6, #20
		/* Ignore */
		break;
	}

	return cp;
}
 801d1b8:	4638      	mov	r0, r7
 801d1ba:	b019      	add	sp, #100	; 0x64
 801d1bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = parse_name(msg, cp, name, MAXCNAME);
 801d1be:	466a      	mov	r2, sp
 801d1c0:	4628      	mov	r0, r5
 801d1c2:	2360      	movs	r3, #96	; 0x60
 801d1c4:	4639      	mov	r1, r7
 801d1c6:	f7ff ff2d 	bl	801d024 <parse_name>
		if (len == -1) return 0;
 801d1ca:	1c44      	adds	r4, r0, #1
 801d1cc:	d016      	beq.n	801d1fc <dns_answer+0xac>
		cp += len;
 801d1ce:	4407      	add	r7, r0
}
 801d1d0:	4638      	mov	r0, r7
 801d1d2:	b019      	add	sp, #100	; 0x64
 801d1d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cp += len;
 801d1d6:	7a96      	ldrb	r6, [r2, #10]
		len = *cp++;
 801d1d8:	320b      	adds	r2, #11
		cp += len;
 801d1da:	5d94      	ldrb	r4, [r2, r6]
		cp += len;
 801d1dc:	4432      	add	r2, r6
		cp += len;
 801d1de:	3401      	adds	r4, #1
 801d1e0:	1917      	adds	r7, r2, r4
}
 801d1e2:	4638      	mov	r0, r7
 801d1e4:	b019      	add	sp, #100	; 0x64
 801d1e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cp += 2;
 801d1e8:	f102 070c 	add.w	r7, r2, #12
		len = parse_name(msg, cp, name, MAXCNAME);
 801d1ec:	4639      	mov	r1, r7
 801d1ee:	466a      	mov	r2, sp
 801d1f0:	4628      	mov	r0, r5
 801d1f2:	2360      	movs	r3, #96	; 0x60
 801d1f4:	f7ff ff16 	bl	801d024 <parse_name>
		if (len == -1) return 0;
 801d1f8:	1c41      	adds	r1, r0, #1
 801d1fa:	d1e8      	bne.n	801d1ce <dns_answer+0x7e>
	if (len == -1) return 0;
 801d1fc:	2700      	movs	r7, #0
}
 801d1fe:	4638      	mov	r0, r7
 801d200:	b019      	add	sp, #100	; 0x64
 801d202:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ip_from_dns[3] = *cp++;
 801d204:	f102 070e 	add.w	r7, r2, #14
}
 801d208:	4638      	mov	r0, r7
		ip_from_dns[0] = *cp++;
 801d20a:	7a93      	ldrb	r3, [r2, #10]
 801d20c:	7023      	strb	r3, [r4, #0]
		ip_from_dns[1] = *cp++;
 801d20e:	7ad3      	ldrb	r3, [r2, #11]
 801d210:	7063      	strb	r3, [r4, #1]
		ip_from_dns[2] = *cp++;
 801d212:	7b13      	ldrb	r3, [r2, #12]
 801d214:	70a3      	strb	r3, [r4, #2]
		ip_from_dns[3] = *cp++;
 801d216:	7b53      	ldrb	r3, [r2, #13]
 801d218:	70e3      	strb	r3, [r4, #3]
}
 801d21a:	b019      	add	sp, #100	; 0x64
 801d21c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d21e:	bf00      	nop

0801d220 <parseDNSMSG>:
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
	memset(pdhdr, 0, sizeof(pdhdr));
 801d220:	2300      	movs	r3, #0
{
 801d222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d226:	460d      	mov	r5, r1
	memset(pdhdr, 0, sizeof(pdhdr));
 801d228:	6003      	str	r3, [r0, #0]
	i = *s++ << 8;
 801d22a:	7809      	ldrb	r1, [r1, #0]
	i = i + *s;
 801d22c:	786b      	ldrb	r3, [r5, #1]
{
 801d22e:	4690      	mov	r8, r2
	i = i + *s;
 801d230:	eb03 2301 	add.w	r3, r3, r1, lsl #8

	pdhdr->id = get16(&msg[0]);
 801d234:	8003      	strh	r3, [r0, #0]
	i = *s++ << 8;
 801d236:	78ab      	ldrb	r3, [r5, #2]
	i = i + *s;
 801d238:	78ea      	ldrb	r2, [r5, #3]
{
 801d23a:	4606      	mov	r6, r0
	i = i + *s;
 801d23c:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 801d240:	b293      	uxth	r3, r2
	tmp = get16(&msg[2]);
	if (tmp & 0x8000) pdhdr->qr = 1;
 801d242:	0412      	lsls	r2, r2, #16
 801d244:	bf44      	itt	mi
 801d246:	2201      	movmi	r2, #1
 801d248:	7082      	strbmi	r2, [r0, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 801d24a:	f3c3 22c3 	ubfx	r2, r3, #11, #4

	if (tmp & 0x0400) pdhdr->aa = 1;
 801d24e:	055f      	lsls	r7, r3, #21
	pdhdr->opcode = (tmp >> 11) & 0xf;
 801d250:	70c2      	strb	r2, [r0, #3]
	if (tmp & 0x0400) pdhdr->aa = 1;
 801d252:	bf44      	itt	mi
 801d254:	2201      	movmi	r2, #1
 801d256:	7102      	strbmi	r2, [r0, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 801d258:	059c      	lsls	r4, r3, #22
 801d25a:	bf44      	itt	mi
 801d25c:	2201      	movmi	r2, #1
 801d25e:	7142      	strbmi	r2, [r0, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 801d260:	05d8      	lsls	r0, r3, #23
 801d262:	bf44      	itt	mi
 801d264:	2201      	movmi	r2, #1
 801d266:	71b2      	strbmi	r2, [r6, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 801d268:	0619      	lsls	r1, r3, #24
 801d26a:	bf48      	it	mi
 801d26c:	2201      	movmi	r2, #1

	pdhdr->rcode = tmp & 0xf;
 801d26e:	f003 030f 	and.w	r3, r3, #15
	if (tmp & 0x0080) pdhdr->ra = 1;
 801d272:	bf48      	it	mi
 801d274:	71f2      	strbmi	r2, [r6, #7]
	pdhdr->rcode = tmp & 0xf;
 801d276:	7233      	strb	r3, [r6, #8]
	i = *s++ << 8;
 801d278:	792a      	ldrb	r2, [r5, #4]
	i = i + *s;
 801d27a:	796b      	ldrb	r3, [r5, #5]
{
 801d27c:	b098      	sub	sp, #96	; 0x60
	i = i + *s;
 801d27e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801d282:	b29b      	uxth	r3, r3
	pdhdr->qdcount = get16(&msg[4]);
 801d284:	8173      	strh	r3, [r6, #10]
	i = *s++ << 8;
 801d286:	79a9      	ldrb	r1, [r5, #6]
	i = i + *s;
 801d288:	79ea      	ldrb	r2, [r5, #7]
	pdhdr->nscount = get16(&msg[8]);
	pdhdr->arcount = get16(&msg[10]);


	/* Now parse the variable length sections */
	cp = &msg[12];
 801d28a:	f105 040c 	add.w	r4, r5, #12
	i = i + *s;
 801d28e:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 801d292:	b292      	uxth	r2, r2
	pdhdr->ancount = get16(&msg[6]);
 801d294:	81b2      	strh	r2, [r6, #12]
	i = *s++ << 8;
 801d296:	7a28      	ldrb	r0, [r5, #8]
	i = i + *s;
 801d298:	7a69      	ldrb	r1, [r5, #9]
 801d29a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
	pdhdr->nscount = get16(&msg[8]);
 801d29e:	81f1      	strh	r1, [r6, #14]
	i = *s++ << 8;
 801d2a0:	7aa8      	ldrb	r0, [r5, #10]
	i = i + *s;
 801d2a2:	7ae9      	ldrb	r1, [r5, #11]
 801d2a4:	eb01 2100 	add.w	r1, r1, r0, lsl #8
	pdhdr->arcount = get16(&msg[10]);
 801d2a8:	8231      	strh	r1, [r6, #16]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 801d2aa:	b1ab      	cbz	r3, 801d2d8 <parseDNSMSG+0xb8>
 801d2ac:	2700      	movs	r7, #0
 801d2ae:	e002      	b.n	801d2b6 <parseDNSMSG+0x96>
 801d2b0:	8972      	ldrh	r2, [r6, #10]
 801d2b2:	429a      	cmp	r2, r3
 801d2b4:	d90f      	bls.n	801d2d6 <parseDNSMSG+0xb6>
	len = parse_name(msg, cp, name, MAXCNAME);
 801d2b6:	2360      	movs	r3, #96	; 0x60
 801d2b8:	466a      	mov	r2, sp
 801d2ba:	4621      	mov	r1, r4
 801d2bc:	4628      	mov	r0, r5
 801d2be:	f7ff feb1 	bl	801d024 <parse_name>
	if (len == -1) return 0;
 801d2c2:	3701      	adds	r7, #1
	cp += len;
 801d2c4:	4404      	add	r4, r0
	if (len == -1) return 0;
 801d2c6:	1c42      	adds	r2, r0, #1
	for (i = 0; i < pdhdr->qdcount; i++)
 801d2c8:	b2bb      	uxth	r3, r7
	cp += 2;		/* class */
 801d2ca:	f104 0404 	add.w	r4, r4, #4
	if (len == -1) return 0;
 801d2ce:	d1ef      	bne.n	801d2b0 <parseDNSMSG+0x90>
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
	else return 0;
}
 801d2d0:	b018      	add	sp, #96	; 0x60
 801d2d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d2d6:	89b2      	ldrh	r2, [r6, #12]
	for (i = 0; i < pdhdr->ancount; i++)
 801d2d8:	2700      	movs	r7, #0
 801d2da:	b91a      	cbnz	r2, 801d2e4 <parseDNSMSG+0xc4>
 801d2dc:	e011      	b.n	801d302 <parseDNSMSG+0xe2>
 801d2de:	89b2      	ldrh	r2, [r6, #12]
 801d2e0:	429a      	cmp	r2, r3
 801d2e2:	d90e      	bls.n	801d302 <parseDNSMSG+0xe2>
		cp = dns_answer(msg, cp, ip_from_dns);
 801d2e4:	4621      	mov	r1, r4
 801d2e6:	4642      	mov	r2, r8
 801d2e8:	4628      	mov	r0, r5
 801d2ea:	f7ff ff31 	bl	801d150 <dns_answer>
		if(!cp) return -1;
 801d2ee:	3701      	adds	r7, #1
 801d2f0:	4604      	mov	r4, r0
	for (i = 0; i < pdhdr->ancount; i++)
 801d2f2:	b2bb      	uxth	r3, r7
		if(!cp) return -1;
 801d2f4:	2800      	cmp	r0, #0
 801d2f6:	d1f2      	bne.n	801d2de <parseDNSMSG+0xbe>
 801d2f8:	f04f 30ff 	mov.w	r0, #4294967295
}
 801d2fc:	b018      	add	sp, #96	; 0x60
 801d2fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if(pdhdr->rcode == 0) return 1;		// No error
 801d302:	7a30      	ldrb	r0, [r6, #8]
		if(!cp) return -1;
 801d304:	fab0 f080 	clz	r0, r0
 801d308:	0940      	lsrs	r0, r0, #5
}
 801d30a:	b018      	add	sp, #96	; 0x60
 801d30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d310 <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 801d310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	*s++ = i;
 801d314:	2501      	movs	r5, #1
{
 801d316:	4690      	mov	r8, r2
 801d318:	b098      	sub	sp, #96	; 0x60
	*s++ = i;
 801d31a:	2300      	movs	r3, #0
	cp = put16(cp, 1);
	cp = put16(cp, 0);
	cp = put16(cp, 0);
	cp = put16(cp, 0);

	strcpy(sname, name);
 801d31c:	46e9      	mov	r9, sp
	DNS_MSGID++;
 801d31e:	4c2f      	ldr	r4, [pc, #188]	; (801d3dc <dns_makequery+0xcc>)
	*s++ = i >> 8;
 801d320:	00c0      	lsls	r0, r0, #3
	DNS_MSGID++;
 801d322:	8822      	ldrh	r2, [r4, #0]
	*s++ = i >> 8;
 801d324:	4328      	orrs	r0, r5
	DNS_MSGID++;
 801d326:	442a      	add	r2, r5
 801d328:	b292      	uxth	r2, r2
	*s++ = i >> 8;
 801d32a:	f888 0002 	strb.w	r0, [r8, #2]
 801d32e:	0a10      	lsrs	r0, r2, #8
	DNS_MSGID++;
 801d330:	8022      	strh	r2, [r4, #0]
	*s++ = i;
 801d332:	f888 5005 	strb.w	r5, [r8, #5]
	*s++ = i >> 8;
 801d336:	f888 0000 	strb.w	r0, [r8]
	*s++ = i;
 801d33a:	f888 2001 	strb.w	r2, [r8, #1]
	strcpy(sname, name);
 801d33e:	4648      	mov	r0, r9
	*s++ = i;
 801d340:	f888 3003 	strb.w	r3, [r8, #3]
	*s++ = i >> 8;
 801d344:	f888 3004 	strb.w	r3, [r8, #4]
 801d348:	f888 3006 	strb.w	r3, [r8, #6]
	*s++ = i;
 801d34c:	f888 3007 	strb.w	r3, [r8, #7]
	*s++ = i >> 8;
 801d350:	f888 3008 	strb.w	r3, [r8, #8]
	*s++ = i;
 801d354:	f888 3009 	strb.w	r3, [r8, #9]
	*s++ = i >> 8;
 801d358:	f888 300a 	strb.w	r3, [r8, #10]
	*s++ = i;
 801d35c:	f888 300b 	strb.w	r3, [r8, #11]
	strcpy(sname, name);
 801d360:	f012 ffa2 	bl	80302a8 <stpcpy>
	dname = sname;
	dlen = strlen(dname);
 801d364:	eba0 0009 	sub.w	r0, r0, r9
	dname = sname;
 801d368:	464f      	mov	r7, r9
	*s++ = i;
 801d36a:	f108 040c 	add.w	r4, r8, #12
	dlen = strlen(dname);
 801d36e:	fa1f f980 	uxth.w	r9, r0
 801d372:	e00f      	b.n	801d394 <dns_makequery+0x84>
		cp1 = strchr(dname, '.');

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
		else len = dlen;			/* Last component */

		*cp++ = len;				/* Write length of component */
 801d374:	f804 3b01 	strb.w	r3, [r4], #1
		if (len == 0) break;
 801d378:	b1e5      	cbz	r5, 801d3b4 <dns_makequery+0xa4>
		{
			*cp++ = 0;			/* Last one; write null and finish */
			break;
		}
		dname += len+1;
		dlen -= len+1;
 801d37a:	43ed      	mvns	r5, r5
		strncpy((char *)cp, dname, len);
 801d37c:	4639      	mov	r1, r7
 801d37e:	4620      	mov	r0, r4
 801d380:	4652      	mov	r2, sl
 801d382:	f012 ffc1 	bl	8030308 <strncpy>
		dlen -= len+1;
 801d386:	444d      	add	r5, r9
		dname += len+1;
 801d388:	f10a 0301 	add.w	r3, sl, #1
		dlen -= len+1;
 801d38c:	fa1f f985 	uxth.w	r9, r5
		cp += len;
 801d390:	4454      	add	r4, sl
		dname += len+1;
 801d392:	441f      	add	r7, r3
		cp1 = strchr(dname, '.');
 801d394:	212e      	movs	r1, #46	; 0x2e
 801d396:	4638      	mov	r0, r7
 801d398:	f012 ff8f 	bl	80302ba <strchr>
		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 801d39c:	1bc3      	subs	r3, r0, r7
		strncpy((char *)cp, dname, len);
 801d39e:	fa1f fa83 	uxth.w	sl, r3
		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 801d3a2:	4606      	mov	r6, r0
 801d3a4:	4655      	mov	r5, sl
 801d3a6:	2800      	cmp	r0, #0
 801d3a8:	d1e4      	bne.n	801d374 <dns_makequery+0x64>
		*cp++ = len;				/* Write length of component */
 801d3aa:	f804 9b01 	strb.w	r9, [r4], #1
		if (len == 0) break;
 801d3ae:	f1b9 0f00 	cmp.w	r9, #0
 801d3b2:	d109      	bne.n	801d3c8 <dns_makequery+0xb8>
	*s++ = i >> 8;
 801d3b4:	f04f 2301 	mov.w	r3, #16777472	; 0x1000100
 801d3b8:	f844 3b04 	str.w	r3, [r4], #4
	}

	cp = put16(cp, 0x0001);				/* type */
	cp = put16(cp, 0x0001);				/* class */

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 801d3bc:	eba4 0408 	sub.w	r4, r4, r8
 801d3c0:	b220      	sxth	r0, r4
}
 801d3c2:	b018      	add	sp, #96	; 0x60
 801d3c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		strncpy((char *)cp, dname, len);
 801d3c8:	4620      	mov	r0, r4
 801d3ca:	4639      	mov	r1, r7
 801d3cc:	464a      	mov	r2, r9
			*cp++ = 0;			/* Last one; write null and finish */
 801d3ce:	444c      	add	r4, r9
		strncpy((char *)cp, dname, len);
 801d3d0:	f012 ff9a 	bl	8030308 <strncpy>
			*cp++ = 0;			/* Last one; write null and finish */
 801d3d4:	f804 6b01 	strb.w	r6, [r4], #1
			break;
 801d3d8:	e7ec      	b.n	801d3b4 <dns_makequery+0xa4>
 801d3da:	bf00      	nop
 801d3dc:	2001fe98 	.word	0x2001fe98

0801d3e0 <DNS_init>:
/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
	DNS_SOCKET = s; // SOCK_DNS
	pDNSMSG = buf; // User's shared buffer
	DNS_MSGID = DNS_MSG_ID;
 801d3e0:	f241 1222 	movw	r2, #4386	; 0x1122
{
 801d3e4:	b430      	push	{r4, r5}
	DNS_MSGID = DNS_MSG_ID;
 801d3e6:	4b04      	ldr	r3, [pc, #16]	; (801d3f8 <DNS_init+0x18>)
	DNS_SOCKET = s; // SOCK_DNS
 801d3e8:	4d04      	ldr	r5, [pc, #16]	; (801d3fc <DNS_init+0x1c>)
	pDNSMSG = buf; // User's shared buffer
 801d3ea:	4c05      	ldr	r4, [pc, #20]	; (801d400 <DNS_init+0x20>)
	DNS_SOCKET = s; // SOCK_DNS
 801d3ec:	7028      	strb	r0, [r5, #0]
	pDNSMSG = buf; // User's shared buffer
 801d3ee:	6021      	str	r1, [r4, #0]
	DNS_MSGID = DNS_MSG_ID;
 801d3f0:	801a      	strh	r2, [r3, #0]
}
 801d3f2:	bc30      	pop	{r4, r5}
 801d3f4:	4770      	bx	lr
 801d3f6:	bf00      	nop
 801d3f8:	2001fe98 	.word	0x2001fe98
 801d3fc:	2001fe8c 	.word	0x2001fe8c
 801d400:	2001fe94 	.word	0x2001fe94

0801d404 <DNS_time_handler>:


/* DNS TIMER HANDLER */
void DNS_time_handler(void)
{
	dns_1s_tick++;
 801d404:	4a02      	ldr	r2, [pc, #8]	; (801d410 <DNS_time_handler+0xc>)
 801d406:	6813      	ldr	r3, [r2, #0]
 801d408:	3301      	adds	r3, #1
 801d40a:	6013      	str	r3, [r2, #0]
}
 801d40c:	4770      	bx	lr
 801d40e:	bf00      	nop
 801d410:	2001fe90 	.word	0x2001fe90

0801d414 <MQTTClientInit>:
}


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 801d414:	b470      	push	{r4, r5, r6}
    int i;
    c->ipstack = network;
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
        c->messageHandlers[i].topicFilter = 0;
 801d416:	2400      	movs	r4, #0
    c->readbuf = readbuf;
    c->readbuf_size = readbuf_size;
    c->isconnected = 0;
    c->ping_outstanding = 0;
    c->defaultMessageHandler = NULL;
	c->next_packetid = 1;
 801d418:	4605      	mov	r5, r0
 801d41a:	2601      	movs	r6, #1
    c->ipstack = network;
 801d41c:	6501      	str	r1, [r0, #80]	; 0x50
    c->command_timeout_ms = command_timeout_ms;
 801d41e:	6042      	str	r2, [r0, #4]
    c->buf = sendbuf;
 801d420:	6103      	str	r3, [r0, #16]
{
 801d422:	9903      	ldr	r1, [sp, #12]
 801d424:	9a04      	ldr	r2, [sp, #16]
 801d426:	9b05      	ldr	r3, [sp, #20]
        c->messageHandlers[i].topicFilter = 0;
 801d428:	6244      	str	r4, [r0, #36]	; 0x24
 801d42a:	62c4      	str	r4, [r0, #44]	; 0x2c
 801d42c:	6344      	str	r4, [r0, #52]	; 0x34
 801d42e:	63c4      	str	r4, [r0, #60]	; 0x3c
 801d430:	6444      	str	r4, [r0, #68]	; 0x44
    c->isconnected = 0;
 801d432:	6204      	str	r4, [r0, #32]
    c->ping_outstanding = 0;
 801d434:	7704      	strb	r4, [r0, #28]
    c->defaultMessageHandler = NULL;
 801d436:	64c4      	str	r4, [r0, #76]	; 0x4c
    c->buf_size = sendbuf_size;
 801d438:	6081      	str	r1, [r0, #8]
    c->readbuf = readbuf;
 801d43a:	6142      	str	r2, [r0, #20]
    c->readbuf_size = readbuf_size;
 801d43c:	60c3      	str	r3, [r0, #12]
	c->next_packetid = 1;
 801d43e:	f845 6b54 	str.w	r6, [r5], #84
    TimerInit(&c->ping_timer);
 801d442:	4628      	mov	r0, r5
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
 801d444:	bc70      	pop	{r4, r5, r6}
    TimerInit(&c->ping_timer);
 801d446:	f000 bc15 	b.w	801dc74 <TimerInit>
 801d44a:	bf00      	nop

0801d44c <deliverMessage>:
    return (curn == curn_end) && (*curf == '\0');
}


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 801d44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d450:	4680      	mov	r8, r0
 801d452:	468a      	mov	sl, r1
 801d454:	4691      	mov	r9, r2
 801d456:	4605      	mov	r5, r0
    int i;
    int rc = FAILURE;
 801d458:	f04f 3bff 	mov.w	fp, #4294967295
{
 801d45c:	b083      	sub	sp, #12
 801d45e:	f100 0728 	add.w	r7, r0, #40	; 0x28

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 801d462:	6a69      	ldr	r1, [r5, #36]	; 0x24
 801d464:	b159      	cbz	r1, 801d47e <deliverMessage+0x32>
 801d466:	4650      	mov	r0, sl
 801d468:	f000 ffa2 	bl	801e3b0 <MQTTPacket_equals>
 801d46c:	b198      	cbz	r0, 801d496 <deliverMessage+0x4a>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
        {
            if (c->messageHandlers[i].fp != NULL)
 801d46e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801d470:	b12b      	cbz	r3, 801d47e <deliverMessage+0x32>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
                c->messageHandlers[i].fp(&md);
 801d472:	4668      	mov	r0, sp
    md->message = aMessage;
 801d474:	e9cd 9a00 	strd	r9, sl, [sp]
                c->messageHandlers[i].fp(&md);
 801d478:	4798      	blx	r3
                rc = SUCCESSS;
 801d47a:	f04f 0b00 	mov.w	fp, #0
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801d47e:	3508      	adds	r5, #8
 801d480:	42bd      	cmp	r5, r7
 801d482:	d1ee      	bne.n	801d462 <deliverMessage+0x16>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
 801d484:	f1bb 0f00 	cmp.w	fp, #0
 801d488:	d13a      	bne.n	801d500 <deliverMessage+0xb4>
 801d48a:	f04f 0b00 	mov.w	fp, #0
        c->defaultMessageHandler(&md);
        rc = SUCCESSS;
    }   
    
    return rc;
}
 801d48e:	4658      	mov	r0, fp
 801d490:	b003      	add	sp, #12
 801d492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 801d496:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801d498:	f8da 3008 	ldr.w	r3, [sl, #8]
    char* curn_end = curn + topicName->lenstring.len;
 801d49c:	f8da 6004 	ldr.w	r6, [sl, #4]
    while (*curf && curn < curn_end)
 801d4a0:	7814      	ldrb	r4, [r2, #0]
    char* curn_end = curn + topicName->lenstring.len;
 801d4a2:	441e      	add	r6, r3
    while (*curf && curn < curn_end)
 801d4a4:	2c00      	cmp	r4, #0
 801d4a6:	d03f      	beq.n	801d528 <deliverMessage+0xdc>
 801d4a8:	42b3      	cmp	r3, r6
 801d4aa:	d2e8      	bcs.n	801d47e <deliverMessage+0x32>
        if (*curn == '/' && *curf != '/')
 801d4ac:	7819      	ldrb	r1, [r3, #0]
 801d4ae:	1e70      	subs	r0, r6, #1
 801d4b0:	292f      	cmp	r1, #47	; 0x2f
 801d4b2:	d018      	beq.n	801d4e6 <deliverMessage+0x9a>
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 801d4b4:	2c2b      	cmp	r4, #43	; 0x2b
 801d4b6:	d11a      	bne.n	801d4ee <deliverMessage+0xa2>
            char* nextpos = curn + 1;
 801d4b8:	1c59      	adds	r1, r3, #1
            while (nextpos < curn_end && *nextpos != '/')
 801d4ba:	428e      	cmp	r6, r1
 801d4bc:	d92e      	bls.n	801d51c <deliverMessage+0xd0>
 801d4be:	461c      	mov	r4, r3
 801d4c0:	e001      	b.n	801d4c6 <deliverMessage+0x7a>
 801d4c2:	4284      	cmp	r4, r0
 801d4c4:	d007      	beq.n	801d4d6 <deliverMessage+0x8a>
                nextpos = ++curn + 1;
 801d4c6:	4621      	mov	r1, r4
            while (nextpos < curn_end && *nextpos != '/')
 801d4c8:	f814 cf01 	ldrb.w	ip, [r4, #1]!
 801d4cc:	1c8b      	adds	r3, r1, #2
 801d4ce:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 801d4d2:	d1f6      	bne.n	801d4c2 <deliverMessage+0x76>
 801d4d4:	4623      	mov	r3, r4
    while (*curf && curn < curn_end)
 801d4d6:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 801d4da:	b344      	cbz	r4, 801d52e <deliverMessage+0xe2>
 801d4dc:	429e      	cmp	r6, r3
 801d4de:	d9ce      	bls.n	801d47e <deliverMessage+0x32>
        if (*curn == '/' && *curf != '/')
 801d4e0:	7819      	ldrb	r1, [r3, #0]
 801d4e2:	292f      	cmp	r1, #47	; 0x2f
 801d4e4:	d1e6      	bne.n	801d4b4 <deliverMessage+0x68>
 801d4e6:	2c2f      	cmp	r4, #47	; 0x2f
 801d4e8:	d1c9      	bne.n	801d47e <deliverMessage+0x32>
        else if (*curf == '#')
 801d4ea:	3301      	adds	r3, #1
 801d4ec:	e7f3      	b.n	801d4d6 <deliverMessage+0x8a>
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 801d4ee:	2c23      	cmp	r4, #35	; 0x23
 801d4f0:	d103      	bne.n	801d4fa <deliverMessage+0xae>
    while (*curf && curn < curn_end)
 801d4f2:	7853      	ldrb	r3, [r2, #1]
 801d4f4:	2b00      	cmp	r3, #0
 801d4f6:	d1c2      	bne.n	801d47e <deliverMessage+0x32>
 801d4f8:	e7b9      	b.n	801d46e <deliverMessage+0x22>
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 801d4fa:	428c      	cmp	r4, r1
 801d4fc:	d0f5      	beq.n	801d4ea <deliverMessage+0x9e>
 801d4fe:	e7be      	b.n	801d47e <deliverMessage+0x32>
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
 801d500:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 801d504:	2b00      	cmp	r3, #0
 801d506:	d0c2      	beq.n	801d48e <deliverMessage+0x42>
        rc = SUCCESSS;
 801d508:	f04f 0b00 	mov.w	fp, #0
        c->defaultMessageHandler(&md);
 801d50c:	4668      	mov	r0, sp
    md->message = aMessage;
 801d50e:	e9cd 9a00 	strd	r9, sl, [sp]
        c->defaultMessageHandler(&md);
 801d512:	4798      	blx	r3
}
 801d514:	4658      	mov	r0, fp
 801d516:	b003      	add	sp, #12
 801d518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while (*curf && curn < curn_end)
 801d51c:	7853      	ldrb	r3, [r2, #1]
 801d51e:	2b00      	cmp	r3, #0
 801d520:	d1ad      	bne.n	801d47e <deliverMessage+0x32>
    return (curn == curn_end) && (*curf == '\0');
 801d522:	42b1      	cmp	r1, r6
 801d524:	d1ab      	bne.n	801d47e <deliverMessage+0x32>
 801d526:	e7a2      	b.n	801d46e <deliverMessage+0x22>
 801d528:	42b3      	cmp	r3, r6
 801d52a:	d1a8      	bne.n	801d47e <deliverMessage+0x32>
 801d52c:	e79f      	b.n	801d46e <deliverMessage+0x22>
 801d52e:	4619      	mov	r1, r3
 801d530:	e7f7      	b.n	801d522 <deliverMessage+0xd6>
 801d532:	bf00      	nop

0801d534 <cycle>:
    return rc;
}


int cycle(MQTTClient* c, Timer* timer)
{
 801d534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(!getSn_RX_RSR((uint8_t)(c->ipstack->my_socket)))
 801d538:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
 801d53a:	4604      	mov	r4, r0
 801d53c:	b091      	sub	sp, #68	; 0x44
    if(!getSn_RX_RSR((uint8_t)(c->ipstack->my_socket)))
 801d53e:	7818      	ldrb	r0, [r3, #0]
{
 801d540:	460e      	mov	r6, r1
    if(!getSn_RX_RSR((uint8_t)(c->ipstack->my_socket)))
 801d542:	f7fd fbad 	bl	801aca0 <getSn_RX_RSR>
 801d546:	2800      	cmp	r0, #0
 801d548:	f000 8096 	beq.w	801d678 <cycle+0x144>
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
 801d54c:	6d25      	ldr	r5, [r4, #80]	; 0x50
 801d54e:	6961      	ldr	r1, [r4, #20]
 801d550:	4630      	mov	r0, r6
 801d552:	686f      	ldr	r7, [r5, #4]
 801d554:	9107      	str	r1, [sp, #28]
 801d556:	f000 fbab 	bl	801dcb0 <TimerLeftMS>
 801d55a:	2201      	movs	r2, #1
 801d55c:	4603      	mov	r3, r0
 801d55e:	9907      	ldr	r1, [sp, #28]
 801d560:	4628      	mov	r0, r5
 801d562:	47b8      	blx	r7
 801d564:	2801      	cmp	r0, #1
 801d566:	4605      	mov	r5, r0
 801d568:	f040 8086 	bne.w	801d678 <cycle+0x144>
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 801d56c:	4630      	mov	r0, r6
 801d56e:	f000 fb9f 	bl	801dcb0 <TimerLeftMS>
 801d572:	f04f 0904 	mov.w	r9, #4
 801d576:	4682      	mov	sl, r0
    *value = 0;
 801d578:	2700      	movs	r7, #0
 801d57a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 801d57e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801d580:	4653      	mov	r3, sl
 801d582:	2201      	movs	r2, #1
 801d584:	4641      	mov	r1, r8
 801d586:	f8d0 b004 	ldr.w	fp, [r0, #4]
 801d58a:	47d8      	blx	fp
        if (rc != 1)
 801d58c:	2801      	cmp	r0, #1
 801d58e:	d10c      	bne.n	801d5aa <cycle+0x76>
        *value += (i & 127) * multiplier;
 801d590:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 801d594:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    } while ((i & 128) != 0);
 801d598:	061b      	lsls	r3, r3, #24
        *value += (i & 127) * multiplier;
 801d59a:	fb05 7702 	mla	r7, r5, r2, r7
        multiplier *= 128;
 801d59e:	ea4f 15c5 	mov.w	r5, r5, lsl #7
    } while ((i & 128) != 0);
 801d5a2:	d502      	bpl.n	801d5aa <cycle+0x76>
        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 801d5a4:	f1b9 0901 	subs.w	r9, r9, #1
 801d5a8:	d1e9      	bne.n	801d57e <cycle+0x4a>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 801d5aa:	6960      	ldr	r0, [r4, #20]
 801d5ac:	4639      	mov	r1, r7
 801d5ae:	3001      	adds	r0, #1
 801d5b0:	f000 fddc 	bl	801e16c <MQTTPacket_encode>
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
 801d5b4:	2f00      	cmp	r7, #0
 801d5b6:	d14e      	bne.n	801d656 <cycle+0x122>
    header.byte = c->readbuf[0];
 801d5b8:	6963      	ldr	r3, [r4, #20]
 801d5ba:	781d      	ldrb	r5, [r3, #0]
    rc = header.bits.type;
 801d5bc:	092d      	lsrs	r5, r5, #4
    unsigned short packet_type = readPacket(c, timer);

    int len = 0,
        rc = SUCCESSS;

    switch (packet_type)
 801d5be:	2d05      	cmp	r5, #5
 801d5c0:	f000 80b0 	beq.w	801d724 <cycle+0x1f0>
 801d5c4:	2d0d      	cmp	r5, #13
 801d5c6:	f000 80aa 	beq.w	801d71e <cycle+0x1ea>
 801d5ca:	2d03      	cmp	r5, #3
 801d5cc:	d057      	beq.n	801d67e <cycle+0x14a>
    if (c->keepAliveInterval == 0)
 801d5ce:	69a3      	ldr	r3, [r4, #24]
 801d5d0:	b91b      	cbnz	r3, 801d5da <cycle+0xa6>
    keepalive(c);
exit:
    if (rc == SUCCESSS)
        rc = packet_type;
    return rc;
}
 801d5d2:	4628      	mov	r0, r5
 801d5d4:	b011      	add	sp, #68	; 0x44
 801d5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TimerIsExpired(&c->ping_timer))
 801d5da:	f104 0954 	add.w	r9, r4, #84	; 0x54
 801d5de:	4648      	mov	r0, r9
 801d5e0:	f000 fb4c 	bl	801dc7c <TimerIsExpired>
 801d5e4:	2800      	cmp	r0, #0
 801d5e6:	d0f4      	beq.n	801d5d2 <cycle+0x9e>
        if (!c->ping_outstanding)
 801d5e8:	7f26      	ldrb	r6, [r4, #28]
 801d5ea:	2e00      	cmp	r6, #0
 801d5ec:	d1f1      	bne.n	801d5d2 <cycle+0x9e>
            TimerInit(&timer);
 801d5ee:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801d5f2:	4640      	mov	r0, r8
 801d5f4:	f000 fb3e 	bl	801dc74 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 801d5f8:	4640      	mov	r0, r8
 801d5fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801d5fe:	f000 fb45 	bl	801dc8c <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 801d602:	68a1      	ldr	r1, [r4, #8]
 801d604:	6920      	ldr	r0, [r4, #16]
 801d606:	f000 fd29 	bl	801e05c <MQTTSerialize_pingreq>
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESSS) // send the ping packet
 801d60a:	1e07      	subs	r7, r0, #0
 801d60c:	dde1      	ble.n	801d5d2 <cycle+0x9e>
    while (sent < length && !TimerIsExpired(timer))
 801d60e:	4640      	mov	r0, r8
 801d610:	f000 fb34 	bl	801dc7c <TimerIsExpired>
 801d614:	b998      	cbnz	r0, 801d63e <cycle+0x10a>
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 801d616:	6921      	ldr	r1, [r4, #16]
 801d618:	f8d4 a050 	ldr.w	sl, [r4, #80]	; 0x50
 801d61c:	4431      	add	r1, r6
 801d61e:	4640      	mov	r0, r8
 801d620:	f8da b008 	ldr.w	fp, [sl, #8]
 801d624:	9107      	str	r1, [sp, #28]
 801d626:	f000 fb43 	bl	801dcb0 <TimerLeftMS>
 801d62a:	463a      	mov	r2, r7
 801d62c:	4603      	mov	r3, r0
 801d62e:	9907      	ldr	r1, [sp, #28]
 801d630:	4650      	mov	r0, sl
 801d632:	47d8      	blx	fp
        if (rc < 0)  // there was an error writing the data
 801d634:	2800      	cmp	r0, #0
 801d636:	db02      	blt.n	801d63e <cycle+0x10a>
        sent += rc;
 801d638:	4406      	add	r6, r0
    while (sent < length && !TimerIsExpired(timer))
 801d63a:	42b7      	cmp	r7, r6
 801d63c:	dce7      	bgt.n	801d60e <cycle+0xda>
    if (sent == length)
 801d63e:	42b7      	cmp	r7, r6
 801d640:	d1c7      	bne.n	801d5d2 <cycle+0x9e>
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 801d642:	4648      	mov	r0, r9
 801d644:	69a1      	ldr	r1, [r4, #24]
 801d646:	f000 fb29 	bl	801dc9c <TimerCountdown>
                c->ping_outstanding = 1;
 801d64a:	2301      	movs	r3, #1
}
 801d64c:	4628      	mov	r0, r5
                c->ping_outstanding = 1;
 801d64e:	7723      	strb	r3, [r4, #28]
}
 801d650:	b011      	add	sp, #68	; 0x44
 801d652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
 801d656:	6961      	ldr	r1, [r4, #20]
 801d658:	6d25      	ldr	r5, [r4, #80]	; 0x50
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 801d65a:	3001      	adds	r0, #1
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
 801d65c:	4401      	add	r1, r0
 801d65e:	4630      	mov	r0, r6
 801d660:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801d664:	9107      	str	r1, [sp, #28]
 801d666:	f000 fb23 	bl	801dcb0 <TimerLeftMS>
 801d66a:	463a      	mov	r2, r7
 801d66c:	4603      	mov	r3, r0
 801d66e:	9907      	ldr	r1, [sp, #28]
 801d670:	4628      	mov	r0, r5
 801d672:	47c8      	blx	r9
 801d674:	42b8      	cmp	r0, r7
 801d676:	d09f      	beq.n	801d5b8 <cycle+0x84>
    switch (packet_type)
 801d678:	f64f 75ff 	movw	r5, #65535	; 0xffff
 801d67c:	e7a7      	b.n	801d5ce <cycle+0x9a>
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 801d67e:	68e0      	ldr	r0, [r4, #12]
 801d680:	a90f      	add	r1, sp, #60	; 0x3c
 801d682:	aa0e      	add	r2, sp, #56	; 0x38
 801d684:	af09      	add	r7, sp, #36	; 0x24
 801d686:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801d68a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801d68e:	9700      	str	r7, [sp, #0]
 801d690:	ab0d      	add	r3, sp, #52	; 0x34
 801d692:	f10d 0231 	add.w	r2, sp, #49	; 0x31
 801d696:	a908      	add	r1, sp, #32
 801d698:	f10d 0032 	add.w	r0, sp, #50	; 0x32
 801d69c:	f000 fcf4 	bl	801e088 <MQTTDeserialize_publish>
 801d6a0:	2801      	cmp	r0, #1
 801d6a2:	d196      	bne.n	801d5d2 <cycle+0x9e>
            msg.qos = (enum QoS)intQoS;
 801d6a4:	9b08      	ldr	r3, [sp, #32]
            deliverMessage(c, &topicName, &msg);
 801d6a6:	4642      	mov	r2, r8
 801d6a8:	4639      	mov	r1, r7
 801d6aa:	4620      	mov	r0, r4
            msg.qos = (enum QoS)intQoS;
 801d6ac:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            deliverMessage(c, &topicName, &msg);
 801d6b0:	f7ff fecc 	bl	801d44c <deliverMessage>
            if (msg.qos != QOS0)
 801d6b4:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 801d6b8:	b37b      	cbz	r3, 801d71a <cycle+0x1e6>
                if (msg.qos == QOS1)
 801d6ba:	2b01      	cmp	r3, #1
 801d6bc:	d06e      	beq.n	801d79c <cycle+0x268>
                else if (msg.qos == QOS2)
 801d6be:	2b02      	cmp	r3, #2
 801d6c0:	d139      	bne.n	801d736 <cycle+0x202>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 801d6c2:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801d6c6:	2300      	movs	r3, #0
 801d6c8:	9200      	str	r2, [sp, #0]
 801d6ca:	68a1      	ldr	r1, [r4, #8]
 801d6cc:	2205      	movs	r2, #5
 801d6ce:	6920      	ldr	r0, [r4, #16]
 801d6d0:	f000 fede 	bl	801e490 <MQTTSerialize_ack>
 801d6d4:	4607      	mov	r7, r0
                if (len <= 0)
 801d6d6:	2f00      	cmp	r7, #0
 801d6d8:	dd2d      	ble.n	801d736 <cycle+0x202>
        sent = 0;
 801d6da:	2500      	movs	r5, #0
    while (sent < length && !TimerIsExpired(timer))
 801d6dc:	4630      	mov	r0, r6
 801d6de:	f000 facd 	bl	801dc7c <TimerIsExpired>
 801d6e2:	b998      	cbnz	r0, 801d70c <cycle+0x1d8>
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 801d6e4:	6921      	ldr	r1, [r4, #16]
 801d6e6:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
 801d6ea:	4429      	add	r1, r5
 801d6ec:	4630      	mov	r0, r6
 801d6ee:	f8d8 9008 	ldr.w	r9, [r8, #8]
 801d6f2:	9107      	str	r1, [sp, #28]
 801d6f4:	f000 fadc 	bl	801dcb0 <TimerLeftMS>
 801d6f8:	463a      	mov	r2, r7
 801d6fa:	4603      	mov	r3, r0
 801d6fc:	9907      	ldr	r1, [sp, #28]
 801d6fe:	4640      	mov	r0, r8
 801d700:	47c8      	blx	r9
        if (rc < 0)  // there was an error writing the data
 801d702:	1e03      	subs	r3, r0, #0
 801d704:	db02      	blt.n	801d70c <cycle+0x1d8>
        sent += rc;
 801d706:	441d      	add	r5, r3
    while (sent < length && !TimerIsExpired(timer))
 801d708:	42af      	cmp	r7, r5
 801d70a:	dce7      	bgt.n	801d6dc <cycle+0x1a8>
    if (sent == length)
 801d70c:	42af      	cmp	r7, r5
 801d70e:	d112      	bne.n	801d736 <cycle+0x202>
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 801d710:	69a1      	ldr	r1, [r4, #24]
 801d712:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801d716:	f000 fac1 	bl	801dc9c <TimerCountdown>
            break;
 801d71a:	2503      	movs	r5, #3
 801d71c:	e757      	b.n	801d5ce <cycle+0x9a>
            c->ping_outstanding = 0;
 801d71e:	2300      	movs	r3, #0
 801d720:	7723      	strb	r3, [r4, #28]
            break;
 801d722:	e754      	b.n	801d5ce <cycle+0x9a>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801d724:	68e1      	ldr	r1, [r4, #12]
 801d726:	4642      	mov	r2, r8
 801d728:	9100      	str	r1, [sp, #0]
 801d72a:	a809      	add	r0, sp, #36	; 0x24
 801d72c:	a908      	add	r1, sp, #32
 801d72e:	f000 fcf5 	bl	801e11c <MQTTDeserialize_ack>
 801d732:	2801      	cmp	r0, #1
 801d734:	d005      	beq.n	801d742 <cycle+0x20e>
                goto exit; // there was a problem
 801d736:	f04f 35ff 	mov.w	r5, #4294967295
}
 801d73a:	4628      	mov	r0, r5
 801d73c:	b011      	add	sp, #68	; 0x44
 801d73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
 801d742:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801d746:	2300      	movs	r3, #0
 801d748:	9200      	str	r2, [sp, #0]
 801d74a:	68a1      	ldr	r1, [r4, #8]
 801d74c:	2206      	movs	r2, #6
 801d74e:	6920      	ldr	r0, [r4, #16]
 801d750:	f000 fe9e 	bl	801e490 <MQTTSerialize_ack>
 801d754:	1e07      	subs	r7, r0, #0
 801d756:	ddee      	ble.n	801d736 <cycle+0x202>
        sent = 0;
 801d758:	2500      	movs	r5, #0
    while (sent < length && !TimerIsExpired(timer))
 801d75a:	4630      	mov	r0, r6
 801d75c:	f000 fa8e 	bl	801dc7c <TimerIsExpired>
 801d760:	b998      	cbnz	r0, 801d78a <cycle+0x256>
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 801d762:	6921      	ldr	r1, [r4, #16]
 801d764:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
 801d768:	4429      	add	r1, r5
 801d76a:	4630      	mov	r0, r6
 801d76c:	f8d8 9008 	ldr.w	r9, [r8, #8]
 801d770:	9107      	str	r1, [sp, #28]
 801d772:	f000 fa9d 	bl	801dcb0 <TimerLeftMS>
 801d776:	463a      	mov	r2, r7
 801d778:	4603      	mov	r3, r0
 801d77a:	9907      	ldr	r1, [sp, #28]
 801d77c:	4640      	mov	r0, r8
 801d77e:	47c8      	blx	r9
        if (rc < 0)  // there was an error writing the data
 801d780:	2800      	cmp	r0, #0
 801d782:	db02      	blt.n	801d78a <cycle+0x256>
        sent += rc;
 801d784:	4405      	add	r5, r0
    while (sent < length && !TimerIsExpired(timer))
 801d786:	42af      	cmp	r7, r5
 801d788:	dce7      	bgt.n	801d75a <cycle+0x226>
    if (sent == length)
 801d78a:	42af      	cmp	r7, r5
 801d78c:	d1d3      	bne.n	801d736 <cycle+0x202>
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 801d78e:	69a1      	ldr	r1, [r4, #24]
 801d790:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801d794:	f000 fa82 	bl	801dc9c <TimerCountdown>
            break;
 801d798:	2505      	movs	r5, #5
 801d79a:	e718      	b.n	801d5ce <cycle+0x9a>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 801d79c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801d7a0:	2300      	movs	r3, #0
 801d7a2:	9200      	str	r2, [sp, #0]
 801d7a4:	68a1      	ldr	r1, [r4, #8]
 801d7a6:	2204      	movs	r2, #4
 801d7a8:	6920      	ldr	r0, [r4, #16]
 801d7aa:	f000 fe71 	bl	801e490 <MQTTSerialize_ack>
 801d7ae:	4607      	mov	r7, r0
 801d7b0:	e791      	b.n	801d6d6 <cycle+0x1a2>
 801d7b2:	bf00      	nop

0801d7b4 <MQTTYield>:
    return rc;
}
*/

int MQTTYield(MQTTClient* c, int timeout_ms)
{
 801d7b4:	b510      	push	{r4, lr}
 801d7b6:	4604      	mov	r4, r0
 801d7b8:	b084      	sub	sp, #16
    int rc = SUCCESSS;
    Timer timer;

    TimerInit(&timer);
 801d7ba:	a802      	add	r0, sp, #8
{
 801d7bc:	9101      	str	r1, [sp, #4]
    TimerInit(&timer);
 801d7be:	f000 fa59 	bl	801dc74 <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 801d7c2:	9901      	ldr	r1, [sp, #4]
 801d7c4:	a802      	add	r0, sp, #8
 801d7c6:	f000 fa61 	bl	801dc8c <TimerCountdownMS>

    if (cycle(c, &timer) == FAILURE)
 801d7ca:	4620      	mov	r0, r4
 801d7cc:	a902      	add	r1, sp, #8
 801d7ce:	f7ff feb1 	bl	801d534 <cycle>
    {
        rc = FAILURE;
    }
        
    return rc;
}
 801d7d2:	3001      	adds	r0, #1
 801d7d4:	f04f 30ff 	mov.w	r0, #4294967295
 801d7d8:	bf18      	it	ne
 801d7da:	2000      	movne	r0, #0
 801d7dc:	b004      	add	sp, #16
 801d7de:	bd10      	pop	{r4, pc}

0801d7e0 <MQTTConnect>:
    return rc;
}


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 801d7e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d7e4:	4604      	mov	r4, r0
 801d7e6:	b09d      	sub	sp, #116	; 0x74
    Timer connect_timer;
    int rc = FAILURE;
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 801d7e8:	ab06      	add	r3, sp, #24
{
 801d7ea:	460d      	mov	r5, r1
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 801d7ec:	4618      	mov	r0, r3
 801d7ee:	2258      	movs	r2, #88	; 0x58
 801d7f0:	4932      	ldr	r1, [pc, #200]	; (801d8bc <MQTTConnect+0xdc>)
 801d7f2:	f012 fb11 	bl	802fe18 <memcpy>
    unsigned char sessionPresent;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
 801d7f6:	6a26      	ldr	r6, [r4, #32]
 801d7f8:	2e00      	cmp	r6, #0
 801d7fa:	d142      	bne.n	801d882 <MQTTConnect+0xa2>
    
    TimerInit(&connect_timer);
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);

    if (options == 0)
        options = &default_options; /* set default options if none were supplied */
 801d7fc:	2d00      	cmp	r5, #0
 801d7fe:	bf08      	it	eq
 801d800:	4605      	moveq	r5, r0
    TimerInit(&connect_timer);
 801d802:	a804      	add	r0, sp, #16
 801d804:	f000 fa36 	bl	801dc74 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 801d808:	6861      	ldr	r1, [r4, #4]
 801d80a:	a804      	add	r0, sp, #16
 801d80c:	f000 fa3e 	bl	801dc8c <TimerCountdownMS>

    c->keepAliveInterval = options->keepAliveInterval;
 801d810:	8b29      	ldrh	r1, [r5, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
 801d812:	f104 0754 	add.w	r7, r4, #84	; 0x54
 801d816:	4638      	mov	r0, r7
    c->keepAliveInterval = options->keepAliveInterval;
 801d818:	61a1      	str	r1, [r4, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
 801d81a:	f000 fa3f 	bl	801dc9c <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 801d81e:	462a      	mov	r2, r5
 801d820:	68a1      	ldr	r1, [r4, #8]
 801d822:	6920      	ldr	r0, [r4, #16]
 801d824:	f000 fb4e 	bl	801dec4 <MQTTSerialize_connect>
 801d828:	1e05      	subs	r5, r0, #0
 801d82a:	dd2a      	ble.n	801d882 <MQTTConnect+0xa2>
    while (sent < length && !TimerIsExpired(timer))
 801d82c:	a804      	add	r0, sp, #16
 801d82e:	f000 fa25 	bl	801dc7c <TimerIsExpired>
 801d832:	b998      	cbnz	r0, 801d85c <MQTTConnect+0x7c>
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 801d834:	6921      	ldr	r1, [r4, #16]
 801d836:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
 801d83a:	4431      	add	r1, r6
 801d83c:	a804      	add	r0, sp, #16
 801d83e:	f8d8 9008 	ldr.w	r9, [r8, #8]
 801d842:	9101      	str	r1, [sp, #4]
 801d844:	f000 fa34 	bl	801dcb0 <TimerLeftMS>
 801d848:	462a      	mov	r2, r5
 801d84a:	4603      	mov	r3, r0
 801d84c:	9901      	ldr	r1, [sp, #4]
 801d84e:	4640      	mov	r0, r8
 801d850:	47c8      	blx	r9
        if (rc < 0)  // there was an error writing the data
 801d852:	2800      	cmp	r0, #0
 801d854:	db02      	blt.n	801d85c <MQTTConnect+0x7c>
        sent += rc;
 801d856:	4406      	add	r6, r0
    while (sent < length && !TimerIsExpired(timer))
 801d858:	42b5      	cmp	r5, r6
 801d85a:	dce7      	bgt.n	801d82c <MQTTConnect+0x4c>
    if (sent == length)
 801d85c:	42ae      	cmp	r6, r5
 801d85e:	d110      	bne.n	801d882 <MQTTConnect+0xa2>
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 801d860:	4638      	mov	r0, r7
 801d862:	69a1      	ldr	r1, [r4, #24]
 801d864:	f000 fa1a 	bl	801dc9c <TimerCountdown>
    return rc;
 801d868:	e005      	b.n	801d876 <MQTTConnect+0x96>
    while ((rc = cycle(c, timer)) != packet_type);  
 801d86a:	4620      	mov	r0, r4
 801d86c:	a904      	add	r1, sp, #16
 801d86e:	f7ff fe61 	bl	801d534 <cycle>
 801d872:	2802      	cmp	r0, #2
 801d874:	d00a      	beq.n	801d88c <MQTTConnect+0xac>
        if (TimerIsExpired(timer))
 801d876:	a804      	add	r0, sp, #16
 801d878:	f000 fa00 	bl	801dc7c <TimerIsExpired>
 801d87c:	4605      	mov	r5, r0
 801d87e:	2800      	cmp	r0, #0
 801d880:	d0f3      	beq.n	801d86a <MQTTConnect+0x8a>
    int rc = FAILURE;
 801d882:	f04f 30ff 	mov.w	r0, #4294967295
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
}
 801d886:	b01d      	add	sp, #116	; 0x74
 801d888:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        connack_rc = 255;
 801d88c:	26ff      	movs	r6, #255	; 0xff
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 801d88e:	68e3      	ldr	r3, [r4, #12]
 801d890:	6962      	ldr	r2, [r4, #20]
 801d892:	f10d 010e 	add.w	r1, sp, #14
 801d896:	f10d 000f 	add.w	r0, sp, #15
        sessionPresent = 0;
 801d89a:	f88d 500f 	strb.w	r5, [sp, #15]
        connack_rc = 255;
 801d89e:	f88d 600e 	strb.w	r6, [sp, #14]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 801d8a2:	f000 fbb3 	bl	801e00c <MQTTDeserialize_connack>
 801d8a6:	2801      	cmp	r0, #1
 801d8a8:	4603      	mov	r3, r0
 801d8aa:	d1ea      	bne.n	801d882 <MQTTConnect+0xa2>
            rc = connack_rc;
 801d8ac:	f89d 000e 	ldrb.w	r0, [sp, #14]
    if (rc == SUCCESSS)
 801d8b0:	2800      	cmp	r0, #0
 801d8b2:	d1e8      	bne.n	801d886 <MQTTConnect+0xa6>
        c->isconnected = 1;
 801d8b4:	6223      	str	r3, [r4, #32]
}
 801d8b6:	b01d      	add	sp, #116	; 0x74
 801d8b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d8bc:	0803171c 	.word	0x0803171c

0801d8c0 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler messageHandler)
{ 
 801d8c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d8c4:	460f      	mov	r7, r1
    int rc = FAILURE;  
    Timer timer;
    int len = 0;
    MQTTString topic = MQTTString_initializer;
 801d8c6:	2100      	movs	r1, #0
{ 
 801d8c8:	4604      	mov	r4, r0
    topic.cstring = (char *)topicFilter;
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 801d8ca:	6a00      	ldr	r0, [r0, #32]
{ 
 801d8cc:	b08e      	sub	sp, #56	; 0x38
    MQTTString topic = MQTTString_initializer;
 801d8ce:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    topic.cstring = (char *)topicFilter;
 801d8d2:	970b      	str	r7, [sp, #44]	; 0x2c
{ 
 801d8d4:	f88d 2017 	strb.w	r2, [sp, #23]
	if (!c->isconnected)
 801d8d8:	2800      	cmp	r0, #0
 801d8da:	d04d      	beq.n	801d978 <MQTTSubscribe+0xb8>
		goto exit;

    TimerInit(&timer);
 801d8dc:	a809      	add	r0, sp, #36	; 0x24
 801d8de:	4698      	mov	r8, r3
 801d8e0:	f000 f9c8 	bl	801dc74 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 801d8e4:	6861      	ldr	r1, [r4, #4]
 801d8e6:	a809      	add	r0, sp, #36	; 0x24
 801d8e8:	f000 f9d0 	bl	801dc8c <TimerCountdownMS>
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 801d8ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d8f0:	6823      	ldr	r3, [r4, #0]
    
    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 801d8f2:	2601      	movs	r6, #1
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 801d8f4:	4293      	cmp	r3, r2
 801d8f6:	bf06      	itte	eq
 801d8f8:	2301      	moveq	r3, #1
 801d8fa:	461a      	moveq	r2, r3
 801d8fc:	1c5a      	addne	r2, r3, #1
 801d8fe:	6022      	str	r2, [r4, #0]
 801d900:	bf18      	it	ne
 801d902:	b293      	uxthne	r3, r2
    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 801d904:	f10d 0517 	add.w	r5, sp, #23
 801d908:	aa0b      	add	r2, sp, #44	; 0x2c
 801d90a:	6920      	ldr	r0, [r4, #16]
 801d90c:	68a1      	ldr	r1, [r4, #8]
 801d90e:	e9cd 2501 	strd	r2, r5, [sp, #4]
 801d912:	9600      	str	r6, [sp, #0]
 801d914:	2200      	movs	r2, #0
 801d916:	f000 fde7 	bl	801e4e8 <MQTTSerialize_subscribe>
    if (len <= 0)
 801d91a:	1e05      	subs	r5, r0, #0
 801d91c:	dd2c      	ble.n	801d978 <MQTTSubscribe+0xb8>
        sent = 0;
 801d91e:	2600      	movs	r6, #0
    while (sent < length && !TimerIsExpired(timer))
 801d920:	a809      	add	r0, sp, #36	; 0x24
 801d922:	f000 f9ab 	bl	801dc7c <TimerIsExpired>
 801d926:	b998      	cbnz	r0, 801d950 <MQTTSubscribe+0x90>
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 801d928:	6921      	ldr	r1, [r4, #16]
 801d92a:	f8d4 9050 	ldr.w	r9, [r4, #80]	; 0x50
 801d92e:	4431      	add	r1, r6
 801d930:	a809      	add	r0, sp, #36	; 0x24
 801d932:	f8d9 a008 	ldr.w	sl, [r9, #8]
 801d936:	9104      	str	r1, [sp, #16]
 801d938:	f000 f9ba 	bl	801dcb0 <TimerLeftMS>
 801d93c:	462a      	mov	r2, r5
 801d93e:	4603      	mov	r3, r0
 801d940:	9904      	ldr	r1, [sp, #16]
 801d942:	4648      	mov	r0, r9
 801d944:	47d0      	blx	sl
        if (rc < 0)  // there was an error writing the data
 801d946:	2800      	cmp	r0, #0
 801d948:	db02      	blt.n	801d950 <MQTTSubscribe+0x90>
        sent += rc;
 801d94a:	4406      	add	r6, r0
    while (sent < length && !TimerIsExpired(timer))
 801d94c:	42b5      	cmp	r5, r6
 801d94e:	dce7      	bgt.n	801d920 <MQTTSubscribe+0x60>
    if (sent == length)
 801d950:	42b5      	cmp	r5, r6
 801d952:	d111      	bne.n	801d978 <MQTTSubscribe+0xb8>
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 801d954:	69a1      	ldr	r1, [r4, #24]
 801d956:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801d95a:	f000 f99f 	bl	801dc9c <TimerCountdown>
    return rc;
 801d95e:	e005      	b.n	801d96c <MQTTSubscribe+0xac>
    while ((rc = cycle(c, timer)) != packet_type);  
 801d960:	4620      	mov	r0, r4
 801d962:	a909      	add	r1, sp, #36	; 0x24
 801d964:	f7ff fde6 	bl	801d534 <cycle>
 801d968:	2809      	cmp	r0, #9
 801d96a:	d00b      	beq.n	801d984 <MQTTSubscribe+0xc4>
        if (TimerIsExpired(timer))
 801d96c:	a809      	add	r0, sp, #36	; 0x24
 801d96e:	f000 f985 	bl	801dc7c <TimerIsExpired>
 801d972:	4605      	mov	r5, r0
 801d974:	2800      	cmp	r0, #0
 801d976:	d0f3      	beq.n	801d960 <MQTTSubscribe+0xa0>
    int rc = FAILURE;  
 801d978:	f04f 35ff 	mov.w	r5, #4294967295
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
 801d97c:	4628      	mov	r0, r5
 801d97e:	b00e      	add	sp, #56	; 0x38
 801d980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        int count = 0, grantedQoS = -1;
 801d984:	f04f 36ff 	mov.w	r6, #4294967295
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
 801d988:	68e2      	ldr	r2, [r4, #12]
 801d98a:	6963      	ldr	r3, [r4, #20]
 801d98c:	2101      	movs	r1, #1
 801d98e:	e9cd 3200 	strd	r3, r2, [sp]
 801d992:	f10d 001a 	add.w	r0, sp, #26
 801d996:	ab08      	add	r3, sp, #32
 801d998:	aa07      	add	r2, sp, #28
        int count = 0, grantedQoS = -1;
 801d99a:	e9cd 5607 	strd	r5, r6, [sp, #28]
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
 801d99e:	f000 fdf7 	bl	801e590 <MQTTDeserialize_suback>
 801d9a2:	2801      	cmp	r0, #1
 801d9a4:	d02e      	beq.n	801da04 <MQTTSubscribe+0x144>
                if (c->messageHandlers[i].topicFilter == 0)
 801d9a6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801d9a8:	b336      	cbz	r6, 801d9f8 <MQTTSubscribe+0x138>
                    if(memcmp(c->messageHandlers[i].topicFilter, topicFilter, strlen(topicFilter)) == 0)
 801d9aa:	4638      	mov	r0, r7
 801d9ac:	f7f2 fc4e 	bl	801024c <strlen>
 801d9b0:	4602      	mov	r2, r0
 801d9b2:	4639      	mov	r1, r7
 801d9b4:	4630      	mov	r0, r6
 801d9b6:	9204      	str	r2, [sp, #16]
 801d9b8:	f012 fa20 	bl	802fdfc <memcmp>
 801d9bc:	2800      	cmp	r0, #0
 801d9be:	d0dd      	beq.n	801d97c <MQTTSubscribe+0xbc>
                if (c->messageHandlers[i].topicFilter == 0)
 801d9c0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801d9c2:	b318      	cbz	r0, 801da0c <MQTTSubscribe+0x14c>
                    if(memcmp(c->messageHandlers[i].topicFilter, topicFilter, strlen(topicFilter)) == 0)
 801d9c4:	4639      	mov	r1, r7
 801d9c6:	9a04      	ldr	r2, [sp, #16]
 801d9c8:	f012 fa18 	bl	802fdfc <memcmp>
 801d9cc:	2800      	cmp	r0, #0
 801d9ce:	d0d5      	beq.n	801d97c <MQTTSubscribe+0xbc>
                if (c->messageHandlers[i].topicFilter == 0)
 801d9d0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801d9d2:	b1e8      	cbz	r0, 801da10 <MQTTSubscribe+0x150>
                    if(memcmp(c->messageHandlers[i].topicFilter, topicFilter, strlen(topicFilter)) == 0)
 801d9d4:	4639      	mov	r1, r7
 801d9d6:	9a04      	ldr	r2, [sp, #16]
 801d9d8:	f012 fa10 	bl	802fdfc <memcmp>
 801d9dc:	2800      	cmp	r0, #0
 801d9de:	d0cd      	beq.n	801d97c <MQTTSubscribe+0xbc>
                if (c->messageHandlers[i].topicFilter == 0)
 801d9e0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d9e2:	b1b8      	cbz	r0, 801da14 <MQTTSubscribe+0x154>
                    if(memcmp(c->messageHandlers[i].topicFilter, topicFilter, strlen(topicFilter)) == 0)
 801d9e4:	4639      	mov	r1, r7
 801d9e6:	9a04      	ldr	r2, [sp, #16]
 801d9e8:	f012 fa08 	bl	802fdfc <memcmp>
 801d9ec:	2800      	cmp	r0, #0
 801d9ee:	d0c5      	beq.n	801d97c <MQTTSubscribe+0xbc>
                if (c->messageHandlers[i].topicFilter == 0)
 801d9f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801d9f2:	2604      	movs	r6, #4
                if (c->messageHandlers[i].topicFilter == 0)
 801d9f4:	2b00      	cmp	r3, #0
 801d9f6:	d1c1      	bne.n	801d97c <MQTTSubscribe+0xbc>
                    c->messageHandlers[i].topicFilter = topicFilter;
 801d9f8:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
                    rc = 0;
 801d9fc:	2500      	movs	r5, #0
                    c->messageHandlers[i].fp = messageHandler;
 801d9fe:	e9c4 7809 	strd	r7, r8, [r4, #36]	; 0x24
    return rc;
 801da02:	e7bb      	b.n	801d97c <MQTTSubscribe+0xbc>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
 801da04:	9d08      	ldr	r5, [sp, #32]
        if (rc != 0x80)
 801da06:	2d80      	cmp	r5, #128	; 0x80
 801da08:	d0b8      	beq.n	801d97c <MQTTSubscribe+0xbc>
 801da0a:	e7cc      	b.n	801d9a6 <MQTTSubscribe+0xe6>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801da0c:	2601      	movs	r6, #1
 801da0e:	e7f3      	b.n	801d9f8 <MQTTSubscribe+0x138>
 801da10:	2602      	movs	r6, #2
 801da12:	e7f1      	b.n	801d9f8 <MQTTSubscribe+0x138>
 801da14:	2603      	movs	r6, #3
 801da16:	e7ef      	b.n	801d9f8 <MQTTSubscribe+0x138>

0801da18 <MQTTPublish>:

int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
    int rc = FAILURE;
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
 801da18:	2300      	movs	r3, #0
{
 801da1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801da1e:	4604      	mov	r4, r0
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 801da20:	6a00      	ldr	r0, [r0, #32]
{
 801da22:	b091      	sub	sp, #68	; 0x44
    MQTTString topic = MQTTString_initializer;
 801da24:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801da28:	930f      	str	r3, [sp, #60]	; 0x3c
	if (!c->isconnected)
 801da2a:	2800      	cmp	r0, #0
 801da2c:	d055      	beq.n	801dada <MQTTPublish+0xc2>
		goto exit;

    TimerInit(&timer);
 801da2e:	4615      	mov	r5, r2
 801da30:	a80b      	add	r0, sp, #44	; 0x2c
 801da32:	f000 f91f 	bl	801dc74 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 801da36:	6861      	ldr	r1, [r4, #4]
 801da38:	a80b      	add	r0, sp, #44	; 0x2c
 801da3a:	f000 f927 	bl	801dc8c <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 801da3e:	782b      	ldrb	r3, [r5, #0]
 801da40:	1e5a      	subs	r2, r3, #1
 801da42:	2a01      	cmp	r2, #1
 801da44:	d95a      	bls.n	801dafc <MQTTPublish+0xe4>
 801da46:	88af      	ldrh	r7, [r5, #4]
        message->id = getNextPacketId(c);
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
 801da48:	e9d5 2102 	ldrd	r2, r1, [r5, #8]
 801da4c:	f895 c001 	ldrb.w	ip, [r5, #1]
 801da50:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801da54:	ae02      	add	r6, sp, #8
 801da56:	aa10      	add	r2, sp, #64	; 0x40
 801da58:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 801da5c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 801da60:	e9cd c700 	strd	ip, r7, [sp]
 801da64:	2200      	movs	r2, #0
 801da66:	68a1      	ldr	r1, [r4, #8]
 801da68:	6920      	ldr	r0, [r4, #16]
 801da6a:	f000 fcbd 	bl	801e3e8 <MQTTSerialize_publish>
              topic, (unsigned char*)message->payload, message->payloadlen);
    if (len <= 0)
 801da6e:	1e06      	subs	r6, r0, #0
 801da70:	dd33      	ble.n	801dada <MQTTPublish+0xc2>
        sent = 0;
 801da72:	2700      	movs	r7, #0
    while (sent < length && !TimerIsExpired(timer))
 801da74:	a80b      	add	r0, sp, #44	; 0x2c
 801da76:	f000 f901 	bl	801dc7c <TimerIsExpired>
 801da7a:	b998      	cbnz	r0, 801daa4 <MQTTPublish+0x8c>
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 801da7c:	6921      	ldr	r1, [r4, #16]
 801da7e:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
 801da82:	4439      	add	r1, r7
 801da84:	a80b      	add	r0, sp, #44	; 0x2c
 801da86:	f8d8 9008 	ldr.w	r9, [r8, #8]
 801da8a:	9109      	str	r1, [sp, #36]	; 0x24
 801da8c:	f000 f910 	bl	801dcb0 <TimerLeftMS>
 801da90:	4632      	mov	r2, r6
 801da92:	4603      	mov	r3, r0
 801da94:	9909      	ldr	r1, [sp, #36]	; 0x24
 801da96:	4640      	mov	r0, r8
 801da98:	47c8      	blx	r9
        if (rc < 0)  // there was an error writing the data
 801da9a:	2800      	cmp	r0, #0
 801da9c:	db02      	blt.n	801daa4 <MQTTPublish+0x8c>
        sent += rc;
 801da9e:	4407      	add	r7, r0
    while (sent < length && !TimerIsExpired(timer))
 801daa0:	42be      	cmp	r6, r7
 801daa2:	dce7      	bgt.n	801da74 <MQTTPublish+0x5c>
    if (sent == length)
 801daa4:	42be      	cmp	r6, r7
 801daa6:	d118      	bne.n	801dada <MQTTPublish+0xc2>
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 801daa8:	69a1      	ldr	r1, [r4, #24]
 801daaa:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801daae:	f000 f8f5 	bl	801dc9c <TimerCountdown>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
 801dab2:	782b      	ldrb	r3, [r5, #0]
 801dab4:	2b01      	cmp	r3, #1
 801dab6:	d00b      	beq.n	801dad0 <MQTTPublish+0xb8>
                rc = FAILURE;
        }
        else
            rc = FAILURE;
    }
    else if (message->qos == QOS2)
 801dab8:	2b02      	cmp	r3, #2
 801daba:	d019      	beq.n	801daf0 <MQTTPublish+0xd8>
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 801dabc:	2000      	movs	r0, #0
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
 801dabe:	b011      	add	sp, #68	; 0x44
 801dac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while ((rc = cycle(c, timer)) != packet_type);  
 801dac4:	4620      	mov	r0, r4
 801dac6:	a90b      	add	r1, sp, #44	; 0x2c
 801dac8:	f7ff fd34 	bl	801d534 <cycle>
 801dacc:	2804      	cmp	r0, #4
 801dace:	d022      	beq.n	801db16 <MQTTPublish+0xfe>
        if (TimerIsExpired(timer))
 801dad0:	a80b      	add	r0, sp, #44	; 0x2c
 801dad2:	f000 f8d3 	bl	801dc7c <TimerIsExpired>
 801dad6:	2800      	cmp	r0, #0
 801dad8:	d0f4      	beq.n	801dac4 <MQTTPublish+0xac>
    int rc = FAILURE;
 801dada:	f04f 30ff 	mov.w	r0, #4294967295
}
 801dade:	b011      	add	sp, #68	; 0x44
 801dae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while ((rc = cycle(c, timer)) != packet_type);  
 801dae4:	4620      	mov	r0, r4
 801dae6:	a90b      	add	r1, sp, #44	; 0x2c
 801dae8:	f7ff fd24 	bl	801d534 <cycle>
 801daec:	2807      	cmp	r0, #7
 801daee:	d012      	beq.n	801db16 <MQTTPublish+0xfe>
        if (TimerIsExpired(timer))
 801daf0:	a80b      	add	r0, sp, #44	; 0x2c
 801daf2:	f000 f8c3 	bl	801dc7c <TimerIsExpired>
 801daf6:	2800      	cmp	r0, #0
 801daf8:	d0f4      	beq.n	801dae4 <MQTTPublish+0xcc>
 801dafa:	e7ee      	b.n	801dada <MQTTPublish+0xc2>
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 801dafc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801db00:	6823      	ldr	r3, [r4, #0]
 801db02:	4293      	cmp	r3, r2
 801db04:	bf07      	ittee	eq
 801db06:	2701      	moveq	r7, #1
 801db08:	463b      	moveq	r3, r7
 801db0a:	3301      	addne	r3, #1
 801db0c:	b29f      	uxthne	r7, r3
 801db0e:	6023      	str	r3, [r4, #0]
 801db10:	782b      	ldrb	r3, [r5, #0]
        message->id = getNextPacketId(c);
 801db12:	80af      	strh	r7, [r5, #4]
 801db14:	e798      	b.n	801da48 <MQTTPublish+0x30>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801db16:	68e2      	ldr	r2, [r4, #12]
 801db18:	6963      	ldr	r3, [r4, #20]
 801db1a:	a90a      	add	r1, sp, #40	; 0x28
 801db1c:	9200      	str	r2, [sp, #0]
 801db1e:	f10d 0029 	add.w	r0, sp, #41	; 0x29
 801db22:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
 801db26:	f000 faf9 	bl	801e11c <MQTTDeserialize_ack>
 801db2a:	3801      	subs	r0, #1
 801db2c:	bf18      	it	ne
 801db2e:	f04f 30ff 	movne.w	r0, #4294967295
}
 801db32:	b011      	add	sp, #68	; 0x44
 801db34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801db38 <wizchip_tls_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void wizchip_tls_disconnect(Network* n)
{
 801db38:	b510      	push	{r4, lr}
    wiz_tls_close_notify(&mqttTlsContext);
 801db3a:	4c06      	ldr	r4, [pc, #24]	; (801db54 <wizchip_tls_disconnect+0x1c>)
 801db3c:	4620      	mov	r0, r4
 801db3e:	f001 f875 	bl	801ec2c <wiz_tls_close_notify>
    wiz_tls_disconnect(&mqttTlsContext, 100);
 801db42:	4620      	mov	r0, r4
 801db44:	2164      	movs	r1, #100	; 0x64
 801db46:	f001 f857 	bl	801ebf8 <wiz_tls_disconnect>
    wiz_tls_session_reset(&mqttTlsContext);
 801db4a:	4620      	mov	r0, r4
}
 801db4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    wiz_tls_session_reset(&mqttTlsContext);
 801db50:	f001 b876 	b.w	801ec40 <wiz_tls_session_reset>
 801db54:	2001fe9c 	.word	0x2001fe9c

0801db58 <wizchip_disconnect>:
	disconnect(n->my_socket);
 801db58:	7800      	ldrb	r0, [r0, #0]
 801db5a:	f7fd bc6d 	b.w	801b438 <disconnect>
 801db5e:	bf00      	nop

0801db60 <wizchip_read>:
{
 801db60:	b570      	push	{r4, r5, r6, lr}
 801db62:	4604      	mov	r4, r0
	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket) > 0))
 801db64:	6800      	ldr	r0, [r0, #0]
{
 801db66:	460d      	mov	r5, r1
	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket) > 0))
 801db68:	0200      	lsls	r0, r0, #8
 801db6a:	f200 4003 	addw	r0, r0, #1027	; 0x403
{
 801db6e:	4616      	mov	r6, r2
	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket) > 0))
 801db70:	f7fc fffe 	bl	801ab70 <WIZCHIP_READ>
 801db74:	2817      	cmp	r0, #23
 801db76:	d001      	beq.n	801db7c <wizchip_read+0x1c>
}
 801db78:	2000      	movs	r0, #0
 801db7a:	bd70      	pop	{r4, r5, r6, pc}
	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket) > 0))
 801db7c:	7820      	ldrb	r0, [r4, #0]
 801db7e:	f7fd f88f 	bl	801aca0 <getSn_RX_RSR>
 801db82:	2800      	cmp	r0, #0
 801db84:	d0f8      	beq.n	801db78 <wizchip_read+0x18>
	    size = (int)recv(n->my_socket, buffer, len);
 801db86:	4629      	mov	r1, r5
 801db88:	7820      	ldrb	r0, [r4, #0]
 801db8a:	b2b2      	uxth	r2, r6
}
 801db8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	    size = (int)recv(n->my_socket, buffer, len);
 801db90:	f7fd bdae 	b.w	801b6f0 <recv>

0801db94 <wizchip_write>:
{
 801db94:	b570      	push	{r4, r5, r6, lr}
 801db96:	4604      	mov	r4, r0
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 801db98:	6800      	ldr	r0, [r0, #0]
{
 801db9a:	460d      	mov	r5, r1
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 801db9c:	0200      	lsls	r0, r0, #8
 801db9e:	f200 4003 	addw	r0, r0, #1027	; 0x403
{
 801dba2:	4616      	mov	r6, r2
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 801dba4:	f7fc ffe4 	bl	801ab70 <WIZCHIP_READ>
 801dba8:	2817      	cmp	r0, #23
 801dbaa:	d001      	beq.n	801dbb0 <wizchip_write+0x1c>
}
 801dbac:	2000      	movs	r0, #0
 801dbae:	bd70      	pop	{r4, r5, r6, pc}
	    size = (int)send(n->my_socket, buffer, len);
 801dbb0:	4629      	mov	r1, r5
 801dbb2:	7820      	ldrb	r0, [r4, #0]
 801dbb4:	b2b2      	uxth	r2, r6
}
 801dbb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	    size = (int)send(n->my_socket, buffer, len);
 801dbba:	f7fd bcad 	b.w	801b518 <send>
 801dbbe:	bf00      	nop

0801dbc0 <wizchip_tls_read>:
    if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 801dbc0:	6800      	ldr	r0, [r0, #0]
{
 801dbc2:	b538      	push	{r3, r4, r5, lr}
    if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 801dbc4:	0200      	lsls	r0, r0, #8
 801dbc6:	f200 4003 	addw	r0, r0, #1027	; 0x403
{
 801dbca:	460c      	mov	r4, r1
 801dbcc:	4615      	mov	r5, r2
    if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 801dbce:	f7fc ffcf 	bl	801ab70 <WIZCHIP_READ>
 801dbd2:	2817      	cmp	r0, #23
 801dbd4:	d001      	beq.n	801dbda <wizchip_tls_read+0x1a>
}
 801dbd6:	2000      	movs	r0, #0
 801dbd8:	bd38      	pop	{r3, r4, r5, pc}
        size = wiz_tls_read(&mqttTlsContext, buffer, len);
 801dbda:	462a      	mov	r2, r5
 801dbdc:	4621      	mov	r1, r4
}
 801dbde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        size = wiz_tls_read(&mqttTlsContext, buffer, len);
 801dbe2:	4801      	ldr	r0, [pc, #4]	; (801dbe8 <wizchip_tls_read+0x28>)
 801dbe4:	f001 b800 	b.w	801ebe8 <wiz_tls_read>
 801dbe8:	2001fe9c 	.word	0x2001fe9c

0801dbec <wizchip_tls_write>:
    if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 801dbec:	6800      	ldr	r0, [r0, #0]
{
 801dbee:	b538      	push	{r3, r4, r5, lr}
    if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 801dbf0:	0200      	lsls	r0, r0, #8
 801dbf2:	f200 4003 	addw	r0, r0, #1027	; 0x403
{
 801dbf6:	460c      	mov	r4, r1
 801dbf8:	4615      	mov	r5, r2
    if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 801dbfa:	f7fc ffb9 	bl	801ab70 <WIZCHIP_READ>
 801dbfe:	2817      	cmp	r0, #23
 801dc00:	d001      	beq.n	801dc06 <wizchip_tls_write+0x1a>
}
 801dc02:	2000      	movs	r0, #0
 801dc04:	bd38      	pop	{r3, r4, r5, pc}
        size = wiz_tls_write(&mqttTlsContext, buffer, len);
 801dc06:	462a      	mov	r2, r5
 801dc08:	4621      	mov	r1, r4
}
 801dc0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        size = wiz_tls_write(&mqttTlsContext, buffer, len);
 801dc0e:	4801      	ldr	r0, [pc, #4]	; (801dc14 <wizchip_tls_write+0x28>)
 801dc10:	f000 bfee 	b.w	801ebf0 <wiz_tls_write>
 801dc14:	2001fe9c 	.word	0x2001fe9c

0801dc18 <wizchip_mqtt_network_disconnect>:
{
 801dc18:	b508      	push	{r3, lr}
    if(MQTT_TLS_ENABLED)
 801dc1a:	4b0b      	ldr	r3, [pc, #44]	; (801dc48 <wizchip_mqtt_network_disconnect+0x30>)
 801dc1c:	781b      	ldrb	r3, [r3, #0]
 801dc1e:	b173      	cbz	r3, 801dc3e <wizchip_mqtt_network_disconnect+0x26>
        wiz_tls_close_notify(&mqttTlsContext);
 801dc20:	480a      	ldr	r0, [pc, #40]	; (801dc4c <wizchip_mqtt_network_disconnect+0x34>)
 801dc22:	f001 f803 	bl	801ec2c <wiz_tls_close_notify>
        wiz_tls_disconnect(&mqttTlsContext, 100);
 801dc26:	2164      	movs	r1, #100	; 0x64
 801dc28:	4808      	ldr	r0, [pc, #32]	; (801dc4c <wizchip_mqtt_network_disconnect+0x34>)
 801dc2a:	f000 ffe5 	bl	801ebf8 <wiz_tls_disconnect>
        wiz_tls_session_reset(&mqttTlsContext);
 801dc2e:	4807      	ldr	r0, [pc, #28]	; (801dc4c <wizchip_mqtt_network_disconnect+0x34>)
 801dc30:	f001 f806 	bl	801ec40 <wiz_tls_session_reset>
}
 801dc34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        wiz_tls_deinit(&mqttTlsContext);
 801dc38:	4804      	ldr	r0, [pc, #16]	; (801dc4c <wizchip_mqtt_network_disconnect+0x34>)
 801dc3a:	f000 be93 	b.w	801e964 <wiz_tls_deinit>
        disconnect(n->my_socket);
 801dc3e:	7800      	ldrb	r0, [r0, #0]
}
 801dc40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        disconnect(n->my_socket);
 801dc44:	f7fd bbf8 	b.w	801b438 <disconnect>
 801dc48:	2001999c 	.word	0x2001999c
 801dc4c:	2001fe9c 	.word	0x2001fe9c

0801dc50 <wizchip_mqtt_tls_enable>:
        MQTT_TLS_ENABLED = TRUE;
 801dc50:	f1a0 0001 	sub.w	r0, r0, #1
 801dc54:	fab0 f080 	clz	r0, r0
 801dc58:	4b01      	ldr	r3, [pc, #4]	; (801dc60 <wizchip_mqtt_tls_enable+0x10>)
 801dc5a:	0940      	lsrs	r0, r0, #5
 801dc5c:	7018      	strb	r0, [r3, #0]
}
 801dc5e:	4770      	bx	lr
 801dc60:	2001999c 	.word	0x2001999c

0801dc64 <MilliTimer_Handler>:
	MilliTimer++;
 801dc64:	4a02      	ldr	r2, [pc, #8]	; (801dc70 <MilliTimer_Handler+0xc>)
 801dc66:	6813      	ldr	r3, [r2, #0]
 801dc68:	3301      	adds	r3, #1
 801dc6a:	6013      	str	r3, [r2, #0]
}
 801dc6c:	4770      	bx	lr
 801dc6e:	bf00      	nop
 801dc70:	200199a0 	.word	0x200199a0

0801dc74 <TimerInit>:
	timer->end_time = 0;
 801dc74:	2300      	movs	r3, #0
 801dc76:	6043      	str	r3, [r0, #4]
}
 801dc78:	4770      	bx	lr
 801dc7a:	bf00      	nop

0801dc7c <TimerIsExpired>:
	long left = timer->end_time - MilliTimer;
 801dc7c:	4b02      	ldr	r3, [pc, #8]	; (801dc88 <TimerIsExpired+0xc>)
 801dc7e:	6840      	ldr	r0, [r0, #4]
 801dc80:	681b      	ldr	r3, [r3, #0]
 801dc82:	1ac0      	subs	r0, r0, r3
}
 801dc84:	0fc0      	lsrs	r0, r0, #31
 801dc86:	4770      	bx	lr
 801dc88:	200199a0 	.word	0x200199a0

0801dc8c <TimerCountdownMS>:
	timer->end_time = MilliTimer + timeout;
 801dc8c:	4b02      	ldr	r3, [pc, #8]	; (801dc98 <TimerCountdownMS+0xc>)
 801dc8e:	681b      	ldr	r3, [r3, #0]
 801dc90:	4419      	add	r1, r3
 801dc92:	6041      	str	r1, [r0, #4]
}
 801dc94:	4770      	bx	lr
 801dc96:	bf00      	nop
 801dc98:	200199a0 	.word	0x200199a0

0801dc9c <TimerCountdown>:
	timer->end_time = MilliTimer + (timeout * 1000);
 801dc9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801dca0:	4b02      	ldr	r3, [pc, #8]	; (801dcac <TimerCountdown+0x10>)
 801dca2:	681b      	ldr	r3, [r3, #0]
 801dca4:	fb02 3101 	mla	r1, r2, r1, r3
 801dca8:	6041      	str	r1, [r0, #4]
}
 801dcaa:	4770      	bx	lr
 801dcac:	200199a0 	.word	0x200199a0

0801dcb0 <TimerLeftMS>:
	long left = timer->end_time - MilliTimer;
 801dcb0:	4b03      	ldr	r3, [pc, #12]	; (801dcc0 <TimerLeftMS+0x10>)
 801dcb2:	6840      	ldr	r0, [r0, #4]
 801dcb4:	681b      	ldr	r3, [r3, #0]
 801dcb6:	1ac0      	subs	r0, r0, r3
}
 801dcb8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801dcbc:	4770      	bx	lr
 801dcbe:	bf00      	nop
 801dcc0:	200199a0 	.word	0x200199a0

0801dcc4 <NewNetwork>:
{
 801dcc4:	b430      	push	{r4, r5}
    n->disconnect = wizchip_disconnect;
 801dcc6:	4b05      	ldr	r3, [pc, #20]	; (801dcdc <NewNetwork+0x18>)
    n->mqttread = wizchip_read;
 801dcc8:	4d05      	ldr	r5, [pc, #20]	; (801dce0 <NewNetwork+0x1c>)
    n->mqttwrite = wizchip_write;
 801dcca:	4c06      	ldr	r4, [pc, #24]	; (801dce4 <NewNetwork+0x20>)
	n->my_socket = sn;
 801dccc:	6001      	str	r1, [r0, #0]
    n->mqttwrite = wizchip_write;
 801dcce:	e9c0 5401 	strd	r5, r4, [r0, #4]
}
 801dcd2:	bc30      	pop	{r4, r5}
    n->channel = channel;
 801dcd4:	7502      	strb	r2, [r0, #20]
    n->disconnect = wizchip_disconnect;
 801dcd6:	60c3      	str	r3, [r0, #12]
}
 801dcd8:	4770      	bx	lr
 801dcda:	bf00      	nop
 801dcdc:	0801db59 	.word	0x0801db59
 801dce0:	0801db61 	.word	0x0801db61
 801dce4:	0801db95 	.word	0x0801db95

0801dce8 <NewNetwork_TLS>:
{
 801dce8:	b538      	push	{r3, r4, r5, lr}
 801dcea:	4604      	mov	r4, r0
    if(is_tls_init == TRUE)
 801dcec:	4d0e      	ldr	r5, [pc, #56]	; (801dd28 <NewNetwork_TLS+0x40>)
    n->channel = channel;
 801dcee:	7523      	strb	r3, [r4, #20]
    n->mqttwrite = wizchip_tls_write;
 801dcf0:	4b0e      	ldr	r3, [pc, #56]	; (801dd2c <NewNetwork_TLS+0x44>)
    n->mqttread = wizchip_tls_read;
 801dcf2:	480f      	ldr	r0, [pc, #60]	; (801dd30 <NewNetwork_TLS+0x48>)
    n->mqttwrite = wizchip_tls_write;
 801dcf4:	60a3      	str	r3, [r4, #8]
    if(is_tls_init == TRUE)
 801dcf6:	782b      	ldrb	r3, [r5, #0]
    n->mqttread = wizchip_tls_read;
 801dcf8:	6060      	str	r0, [r4, #4]
    n->disconnect = wizchip_tls_disconnect;
 801dcfa:	480e      	ldr	r0, [pc, #56]	; (801dd34 <NewNetwork_TLS+0x4c>)
    if(is_tls_init == TRUE)
 801dcfc:	2b01      	cmp	r3, #1
    n->my_socket = sn;
 801dcfe:	6021      	str	r1, [r4, #0]
    n->host = host;
 801dd00:	6122      	str	r2, [r4, #16]
    n->disconnect = wizchip_tls_disconnect;
 801dd02:	60e0      	str	r0, [r4, #12]
    if(is_tls_init == TRUE)
 801dd04:	d007      	beq.n	801dd16 <NewNetwork_TLS+0x2e>
    if(wiz_tls_init(&mqttTlsContext, n->my_socket, n->host) > 0)
 801dd06:	480c      	ldr	r0, [pc, #48]	; (801dd38 <NewNetwork_TLS+0x50>)
 801dd08:	f000 fcaa 	bl	801e660 <wiz_tls_init>
 801dd0c:	2800      	cmp	r0, #0
        is_tls_init = TRUE;
 801dd0e:	bfc4      	itt	gt
 801dd10:	2301      	movgt	r3, #1
 801dd12:	702b      	strbgt	r3, [r5, #0]
}
 801dd14:	bd38      	pop	{r3, r4, r5, pc}
        wiz_tls_deinit(&mqttTlsContext);
 801dd16:	4808      	ldr	r0, [pc, #32]	; (801dd38 <NewNetwork_TLS+0x50>)
 801dd18:	f000 fe24 	bl	801e964 <wiz_tls_deinit>
        is_tls_init = FALSE;
 801dd1c:	2300      	movs	r3, #0
 801dd1e:	6821      	ldr	r1, [r4, #0]
 801dd20:	6922      	ldr	r2, [r4, #16]
 801dd22:	702b      	strb	r3, [r5, #0]
 801dd24:	e7ef      	b.n	801dd06 <NewNetwork_TLS+0x1e>
 801dd26:	bf00      	nop
 801dd28:	200199a6 	.word	0x200199a6
 801dd2c:	0801dbed 	.word	0x0801dbed
 801dd30:	0801dbc1 	.word	0x0801dbc1
 801dd34:	0801db39 	.word	0x0801db39
 801dd38:	2001fe9c 	.word	0x2001fe9c

0801dd3c <ConnectNetwork>:
 *         that contains the configuration information for the Network.
 *         ip : server iP.
 *         port : server port.
 */
int ConnectNetwork(Network* n, char* ip, unsigned int port)
{
 801dd3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 */
static uint16_t get_client_any_port(void)
{
    static uint16_t client_any_port;

    if(client_any_port)
 801dd40:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 801de30 <ConnectNetwork+0xf4>
{
 801dd44:	4607      	mov	r7, r0
    if(client_any_port)
 801dd46:	f8b8 3000 	ldrh.w	r3, [r8]
{
 801dd4a:	460d      	mov	r5, r1
 801dd4c:	4616      	mov	r6, r2
 801dd4e:	b084      	sub	sp, #16
    if(client_any_port)
 801dd50:	2b00      	cmp	r3, #0
 801dd52:	d137      	bne.n	801ddc4 <ConnectNetwork+0x88>
            client_any_port = 0;
    }

    if(client_any_port == 0)
    {
        srand(1);
 801dd54:	2001      	movs	r0, #1
 801dd56:	f012 f9d5 	bl	8030104 <srand>
        client_any_port = (rand() % 10000) + 45000; // 45000 ~ 54999
 801dd5a:	f012 fa01 	bl	8030160 <rand>
 801dd5e:	f242 7210 	movw	r2, #10000	; 0x2710
 801dd62:	4c2d      	ldr	r4, [pc, #180]	; (801de18 <ConnectNetwork+0xdc>)
 801dd64:	17c3      	asrs	r3, r0, #31
 801dd66:	fb84 1400 	smull	r1, r4, r4, r0
 801dd6a:	ebc3 3324 	rsb	r3, r3, r4, asr #12
 801dd6e:	fb02 0413 	mls	r4, r2, r3, r0
 801dd72:	f5a4 44a0 	sub.w	r4, r4, #20480	; 0x5000
 801dd76:	3c38      	subs	r4, #56	; 0x38
 801dd78:	b2a4      	uxth	r4, r4
 801dd7a:	f8a8 4000 	strh.w	r4, [r8]
    PRT_MQTT("MQTT_TLS_ENABLED = %d\r\n", MQTT_TLS_ENABLED);
 801dd7e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 801de34 <ConnectNetwork+0xf8>
 801dd82:	4926      	ldr	r1, [pc, #152]	; (801de1c <ConnectNetwork+0xe0>)
 801dd84:	f898 2000 	ldrb.w	r2, [r8]
 801dd88:	4825      	ldr	r0, [pc, #148]	; (801de20 <ConnectNetwork+0xe4>)
 801dd8a:	f7fa f85b 	bl	8017e44 <WIZ_SECURE_printf>
    PRT_MQTT("Socket = %d\r\n", n->my_socket);
 801dd8e:	683a      	ldr	r2, [r7, #0]
 801dd90:	4922      	ldr	r1, [pc, #136]	; (801de1c <ConnectNetwork+0xe0>)
 801dd92:	4824      	ldr	r0, [pc, #144]	; (801de24 <ConnectNetwork+0xe8>)
 801dd94:	f7fa f856 	bl	8017e44 <WIZ_SECURE_printf>
    PRT_MQTT("CONNECT TO - %d.%d.%d.%d : %d\r\n", ip[0], ip[1], ip[2], ip[3], port);
 801dd98:	78ea      	ldrb	r2, [r5, #3]
 801dd9a:	78ab      	ldrb	r3, [r5, #2]
 801dd9c:	e9cd 2601 	strd	r2, r6, [sp, #4]
 801dda0:	9300      	str	r3, [sp, #0]
 801dda2:	786b      	ldrb	r3, [r5, #1]
 801dda4:	782a      	ldrb	r2, [r5, #0]
 801dda6:	491d      	ldr	r1, [pc, #116]	; (801de1c <ConnectNetwork+0xe0>)
 801dda8:	481f      	ldr	r0, [pc, #124]	; (801de28 <ConnectNetwork+0xec>)
 801ddaa:	f7fa f84b 	bl	8017e44 <WIZ_SECURE_printf>
	if(MQTT_TLS_ENABLED)
 801ddae:	f898 3000 	ldrb.w	r3, [r8]
 801ddb2:	b183      	cbz	r3, 801ddd6 <ConnectNetwork+0x9a>
	    ret = wiz_tls_session_reset(&mqttTlsContext);
 801ddb4:	481d      	ldr	r0, [pc, #116]	; (801de2c <ConnectNetwork+0xf0>)
 801ddb6:	f000 ff43 	bl	801ec40 <wiz_tls_session_reset>
 801ddba:	b240      	sxtb	r0, r0
	    if(ret == 0)
 801ddbc:	b1c0      	cbz	r0, 801ddf0 <ConnectNetwork+0xb4>
}
 801ddbe:	b004      	add	sp, #16
 801ddc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(client_any_port < 0xffff)
 801ddc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ddc8:	4293      	cmp	r3, r2
 801ddca:	d021      	beq.n	801de10 <ConnectNetwork+0xd4>
            client_any_port++;
 801ddcc:	3301      	adds	r3, #1
 801ddce:	b29c      	uxth	r4, r3
 801ddd0:	f8a8 4000 	strh.w	r4, [r8]
    if(client_any_port == 0)
 801ddd4:	e7d3      	b.n	801dd7e <ConnectNetwork+0x42>
        socket(n->my_socket, Sn_MR_TCP, myport, 0);
 801ddd6:	4622      	mov	r2, r4
 801ddd8:	2101      	movs	r1, #1
 801ddda:	7838      	ldrb	r0, [r7, #0]
 801dddc:	f7fd f940 	bl	801b060 <socket>
        ret = connect((uint8_t)n->my_socket, (uint8_t *)ip, (uint16_t)port);
 801dde0:	4629      	mov	r1, r5
 801dde2:	7838      	ldrb	r0, [r7, #0]
 801dde4:	b2b2      	uxth	r2, r6
 801dde6:	f7fd faaf 	bl	801b348 <connect>
}
 801ddea:	b004      	add	sp, #16
 801ddec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	        ret = wiz_tls_socket_connect_timeout(&mqttTlsContext, ip, port, myport, 30000);
 801ddf0:	f247 5030 	movw	r0, #30000	; 0x7530
 801ddf4:	4623      	mov	r3, r4
 801ddf6:	9000      	str	r0, [sp, #0]
 801ddf8:	4632      	mov	r2, r6
 801ddfa:	4629      	mov	r1, r5
 801ddfc:	480b      	ldr	r0, [pc, #44]	; (801de2c <ConnectNetwork+0xf0>)
 801ddfe:	f000 fe8d 	bl	801eb1c <wiz_tls_socket_connect_timeout>
 801de02:	b240      	sxtb	r0, r0
            if(ret == 0)
 801de04:	2800      	cmp	r0, #0
 801de06:	bf08      	it	eq
 801de08:	2001      	moveq	r0, #1
}
 801de0a:	b004      	add	sp, #16
 801de0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            client_any_port = 0;
 801de10:	2300      	movs	r3, #0
 801de12:	f8a8 3000 	strh.w	r3, [r8]
 801de16:	e79d      	b.n	801dd54 <ConnectNetwork+0x18>
 801de18:	68db8bad 	.word	0x68db8bad
 801de1c:	08033bfc 	.word	0x08033bfc
 801de20:	08033b90 	.word	0x08033b90
 801de24:	08033bb4 	.word	0x08033bb4
 801de28:	08033bd0 	.word	0x08033bd0
 801de2c:	2001fe9c 	.word	0x2001fe9c
 801de30:	200199a4 	.word	0x200199a4
 801de34:	2001999c 	.word	0x2001999c

0801de38 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 801de38:	b570      	push	{r4, r5, r6, lr}
	int len = 0;

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 801de3a:	7a03      	ldrb	r3, [r0, #8]
{
 801de3c:	4604      	mov	r4, r0
	if (options->MQTTVersion == 3)
 801de3e:	2b03      	cmp	r3, #3
 801de40:	d02d      	beq.n	801de9e <MQTTSerialize_connectLength+0x66>
		len = 12; /* variable depending on MQTT or MQIsdp */
	else if (options->MQTTVersion == 4)
		len = 10;
 801de42:	2b04      	cmp	r3, #4
 801de44:	bf14      	ite	ne
 801de46:	2500      	movne	r5, #0
 801de48:	250a      	moveq	r5, #10

	len += MQTTstrlen(options->clientID)+2;
 801de4a:	f104 030c 	add.w	r3, r4, #12
 801de4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801de52:	f000 faa1 	bl	801e398 <MQTTstrlen>
	if (options->willFlag)
 801de56:	7ee3      	ldrb	r3, [r4, #27]
	len += MQTTstrlen(options->clientID)+2;
 801de58:	3002      	adds	r0, #2
 801de5a:	4405      	add	r5, r0
	if (options->willFlag)
 801de5c:	bb0b      	cbnz	r3, 801dea2 <MQTTSerialize_connectLength+0x6a>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
	if (options->username.cstring || options->username.lenstring.data)
 801de5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801de60:	b193      	cbz	r3, 801de88 <MQTTSerialize_connectLength+0x50>
		len += MQTTstrlen(options->username)+2;
 801de62:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801de66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801de6a:	f000 fa95 	bl	801e398 <MQTTstrlen>
	if (options->password.cstring || options->password.lenstring.data)
 801de6e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
		len += MQTTstrlen(options->username)+2;
 801de70:	3002      	adds	r0, #2
 801de72:	4405      	add	r5, r0
	if (options->password.cstring || options->password.lenstring.data)
 801de74:	b173      	cbz	r3, 801de94 <MQTTSerialize_connectLength+0x5c>
		len += MQTTstrlen(options->password)+2;
 801de76:	344c      	adds	r4, #76	; 0x4c
 801de78:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801de7c:	f000 fa8c 	bl	801e398 <MQTTstrlen>
 801de80:	3002      	adds	r0, #2
 801de82:	4405      	add	r5, r0

	FUNC_EXIT_RC(len);
	return len;
}
 801de84:	4628      	mov	r0, r5
 801de86:	bd70      	pop	{r4, r5, r6, pc}
	if (options->username.cstring || options->username.lenstring.data)
 801de88:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801de8a:	2b00      	cmp	r3, #0
 801de8c:	d1e9      	bne.n	801de62 <MQTTSerialize_connectLength+0x2a>
	if (options->password.cstring || options->password.lenstring.data)
 801de8e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801de90:	2b00      	cmp	r3, #0
 801de92:	d1f0      	bne.n	801de76 <MQTTSerialize_connectLength+0x3e>
 801de94:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801de96:	2b00      	cmp	r3, #0
 801de98:	d1ed      	bne.n	801de76 <MQTTSerialize_connectLength+0x3e>
}
 801de9a:	4628      	mov	r0, r5
 801de9c:	bd70      	pop	{r4, r5, r6, pc}
		len = 12; /* variable depending on MQTT or MQIsdp */
 801de9e:	250c      	movs	r5, #12
 801dea0:	e7d3      	b.n	801de4a <MQTTSerialize_connectLength+0x12>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 801dea2:	f104 0324 	add.w	r3, r4, #36	; 0x24
 801dea6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801deaa:	f000 fa75 	bl	801e398 <MQTTstrlen>
 801deae:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801deb2:	4606      	mov	r6, r0
 801deb4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801deb8:	f000 fa6e 	bl	801e398 <MQTTstrlen>
 801debc:	4430      	add	r0, r6
 801debe:	3004      	adds	r0, #4
 801dec0:	4405      	add	r5, r0
 801dec2:	e7cc      	b.n	801de5e <MQTTSerialize_connectLength+0x26>

0801dec4 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 801dec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dec6:	4606      	mov	r6, r0
 801dec8:	b083      	sub	sp, #12
	MQTTConnectFlags flags = {0};
	int len = 0;
	int rc = -1;

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 801deca:	4610      	mov	r0, r2
{
 801decc:	460d      	mov	r5, r1
 801dece:	4614      	mov	r4, r2
	unsigned char *ptr = buf;
 801ded0:	9601      	str	r6, [sp, #4]
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 801ded2:	f7ff ffb1 	bl	801de38 <MQTTSerialize_connectLength>
 801ded6:	4607      	mov	r7, r0
 801ded8:	f000 f96e 	bl	801e1b8 <MQTTPacket_len>
 801dedc:	42a8      	cmp	r0, r5
 801dede:	f300 808d 	bgt.w	801dffc <MQTTSerialize_connect+0x138>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = CONNECT;
	writeChar(&ptr, header.byte); /* write header */
 801dee2:	2110      	movs	r1, #16
 801dee4:	a801      	add	r0, sp, #4
 801dee6:	f000 f9bf 	bl	801e268 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 801deea:	4639      	mov	r1, r7
 801deec:	9801      	ldr	r0, [sp, #4]
 801deee:	f000 f93d 	bl	801e16c <MQTTPacket_encode>
 801def2:	9b01      	ldr	r3, [sp, #4]

	if (options->MQTTVersion == 4)
 801def4:	7a25      	ldrb	r5, [r4, #8]
	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 801def6:	4418      	add	r0, r3
	if (options->MQTTVersion == 4)
 801def8:	2d04      	cmp	r5, #4
	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 801defa:	9001      	str	r0, [sp, #4]
	if (options->MQTTVersion == 4)
 801defc:	d055      	beq.n	801dfaa <MQTTSerialize_connect+0xe6>
		writeCString(&ptr, "MQTT");
		writeChar(&ptr, (char) 4);
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 801defe:	4941      	ldr	r1, [pc, #260]	; (801e004 <MQTTSerialize_connect+0x140>)
 801df00:	a801      	add	r0, sp, #4
 801df02:	f000 f9d1 	bl	801e2a8 <writeCString>
		writeChar(&ptr, (char) 3);
 801df06:	2103      	movs	r1, #3
 801df08:	a801      	add	r0, sp, #4
 801df0a:	f000 f9ad 	bl	801e268 <writeChar>
	}

	flags.all = 0;
 801df0e:	2100      	movs	r1, #0
	flags.bits.cleansession = options->cleansession;
	flags.bits.will = (options->willFlag) ? 1 : 0;
 801df10:	7ee3      	ldrb	r3, [r4, #27]
 801df12:	1a5a      	subs	r2, r3, r1
 801df14:	bf18      	it	ne
 801df16:	2201      	movne	r2, #1
	flags.bits.cleansession = options->cleansession;
 801df18:	7ea3      	ldrb	r3, [r4, #26]
	flags.all = 0;
 801df1a:	f36f 0107 	bfc	r1, #0, #8
	flags.bits.cleansession = options->cleansession;
 801df1e:	005b      	lsls	r3, r3, #1
 801df20:	f003 0302 	and.w	r3, r3, #2
 801df24:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 801df28:	f021 0206 	bic.w	r2, r1, #6
 801df2c:	4313      	orrs	r3, r2
 801df2e:	f363 0107 	bfi	r1, r3, #0, #8
	if (flags.bits.will)
 801df32:	0748      	lsls	r0, r1, #29
 801df34:	d422      	bmi.n	801df7c <MQTTSerialize_connect+0xb8>
	{
		flags.bits.willQoS = options->will.qos;
		flags.bits.willRetain = options->will.retained;
	}

	if (options->username.cstring || options->username.lenstring.data)
 801df36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801df38:	2b00      	cmp	r3, #0
 801df3a:	d032      	beq.n	801dfa2 <MQTTSerialize_connect+0xde>
		flags.bits.username = 1;
 801df3c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	if (options->password.cstring || options->password.lenstring.data)
 801df40:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801df42:	2b00      	cmp	r3, #0
 801df44:	d056      	beq.n	801dff4 <MQTTSerialize_connect+0x130>
		flags.bits.password = 1;
 801df46:	f041 0140 	orr.w	r1, r1, #64	; 0x40

	writeChar(&ptr, flags.all);
 801df4a:	b2cd      	uxtb	r5, r1
 801df4c:	4629      	mov	r1, r5
 801df4e:	a801      	add	r0, sp, #4
 801df50:	f000 f98a 	bl	801e268 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 801df54:	8b21      	ldrh	r1, [r4, #24]
 801df56:	a801      	add	r0, sp, #4
 801df58:	f000 f98c 	bl	801e274 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 801df5c:	f104 030c 	add.w	r3, r4, #12
 801df60:	cb0e      	ldmia	r3, {r1, r2, r3}
 801df62:	a801      	add	r0, sp, #4
 801df64:	f000 f9bc 	bl	801e2e0 <writeMQTTString>
	if (options->willFlag)
 801df68:	7ee3      	ldrb	r3, [r4, #27]
 801df6a:	bb73      	cbnz	r3, 801dfca <MQTTSerialize_connect+0x106>
	{
		writeMQTTString(&ptr, options->will.topicName);
		writeMQTTString(&ptr, options->will.message);
	}
	if (flags.bits.username)
 801df6c:	062a      	lsls	r2, r5, #24
 801df6e:	d43a      	bmi.n	801dfe6 <MQTTSerialize_connect+0x122>
		writeMQTTString(&ptr, options->username);
	if (flags.bits.password)
 801df70:	066b      	lsls	r3, r5, #25
 801df72:	d423      	bmi.n	801dfbc <MQTTSerialize_connect+0xf8>
		writeMQTTString(&ptr, options->password);

	rc = ptr - buf;
 801df74:	9801      	ldr	r0, [sp, #4]
 801df76:	1b80      	subs	r0, r0, r6

	exit: FUNC_EXIT_RC(rc);
	return rc;
}
 801df78:	b003      	add	sp, #12
 801df7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flags.bits.willQoS = options->will.qos;
 801df7c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 801df80:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 801df84:	015b      	lsls	r3, r3, #5
 801df86:	00d2      	lsls	r2, r2, #3
 801df88:	f002 0218 	and.w	r2, r2, #24
 801df8c:	f003 0320 	and.w	r3, r3, #32
 801df90:	4313      	orrs	r3, r2
 801df92:	f021 0238 	bic.w	r2, r1, #56	; 0x38
 801df96:	4313      	orrs	r3, r2
 801df98:	f363 0107 	bfi	r1, r3, #0, #8
	if (options->username.cstring || options->username.lenstring.data)
 801df9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801df9e:	2b00      	cmp	r3, #0
 801dfa0:	d1cc      	bne.n	801df3c <MQTTSerialize_connect+0x78>
 801dfa2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801dfa4:	2b00      	cmp	r3, #0
 801dfa6:	d1c9      	bne.n	801df3c <MQTTSerialize_connect+0x78>
 801dfa8:	e7ca      	b.n	801df40 <MQTTSerialize_connect+0x7c>
		writeCString(&ptr, "MQTT");
 801dfaa:	a801      	add	r0, sp, #4
 801dfac:	4916      	ldr	r1, [pc, #88]	; (801e008 <MQTTSerialize_connect+0x144>)
 801dfae:	f000 f97b 	bl	801e2a8 <writeCString>
		writeChar(&ptr, (char) 4);
 801dfb2:	4629      	mov	r1, r5
 801dfb4:	a801      	add	r0, sp, #4
 801dfb6:	f000 f957 	bl	801e268 <writeChar>
 801dfba:	e7a8      	b.n	801df0e <MQTTSerialize_connect+0x4a>
		writeMQTTString(&ptr, options->password);
 801dfbc:	344c      	adds	r4, #76	; 0x4c
 801dfbe:	a801      	add	r0, sp, #4
 801dfc0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801dfc4:	f000 f98c 	bl	801e2e0 <writeMQTTString>
 801dfc8:	e7d4      	b.n	801df74 <MQTTSerialize_connect+0xb0>
		writeMQTTString(&ptr, options->will.topicName);
 801dfca:	f104 0324 	add.w	r3, r4, #36	; 0x24
 801dfce:	cb0e      	ldmia	r3, {r1, r2, r3}
 801dfd0:	a801      	add	r0, sp, #4
 801dfd2:	f000 f985 	bl	801e2e0 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 801dfd6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801dfda:	cb0e      	ldmia	r3, {r1, r2, r3}
 801dfdc:	a801      	add	r0, sp, #4
 801dfde:	f000 f97f 	bl	801e2e0 <writeMQTTString>
	if (flags.bits.username)
 801dfe2:	062a      	lsls	r2, r5, #24
 801dfe4:	d5c4      	bpl.n	801df70 <MQTTSerialize_connect+0xac>
		writeMQTTString(&ptr, options->username);
 801dfe6:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801dfea:	a801      	add	r0, sp, #4
 801dfec:	cb0e      	ldmia	r3, {r1, r2, r3}
 801dfee:	f000 f977 	bl	801e2e0 <writeMQTTString>
 801dff2:	e7bd      	b.n	801df70 <MQTTSerialize_connect+0xac>
	if (options->password.cstring || options->password.lenstring.data)
 801dff4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801dff6:	2b00      	cmp	r3, #0
 801dff8:	d1a5      	bne.n	801df46 <MQTTSerialize_connect+0x82>
 801dffa:	e7a6      	b.n	801df4a <MQTTSerialize_connect+0x86>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801dffc:	f06f 0001 	mvn.w	r0, #1
	return rc;
 801e000:	e7ba      	b.n	801df78 <MQTTSerialize_connect+0xb4>
 801e002:	bf00      	nop
 801e004:	08033c14 	.word	0x08033c14
 801e008:	08033c0c 	.word	0x08033c0c

0801e00c <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 801e00c:	b530      	push	{r4, r5, lr}
 801e00e:	b083      	sub	sp, #12
 801e010:	4605      	mov	r5, r0
	int rc = 0;
	int mylen;
	MQTTConnackFlags flags = {0};

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801e012:	4668      	mov	r0, sp
{
 801e014:	460c      	mov	r4, r1
	unsigned char* curdata = buf;
 801e016:	9200      	str	r2, [sp, #0]
	header.byte = readChar(&curdata);
 801e018:	f000 f920 	bl	801e25c <readChar>
	if (header.bits.type != CONNACK)
 801e01c:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 801e020:	2b20      	cmp	r3, #32
 801e022:	d002      	beq.n	801e02a <MQTTDeserialize_connack+0x1e>
	int rc = 0;
 801e024:	2000      	movs	r0, #0

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 801e026:	b003      	add	sp, #12
 801e028:	bd30      	pop	{r4, r5, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801e02a:	9800      	ldr	r0, [sp, #0]
 801e02c:	a901      	add	r1, sp, #4
 801e02e:	f000 f8d5 	bl	801e1dc <MQTTPacket_decodeBuf>
	if (enddata - curdata < 2)
 801e032:	e9dd 3200 	ldrd	r3, r2, [sp]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801e036:	4403      	add	r3, r0
	if (enddata - curdata < 2)
 801e038:	2a01      	cmp	r2, #1
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801e03a:	9300      	str	r3, [sp, #0]
	if (enddata - curdata < 2)
 801e03c:	ddf3      	ble.n	801e026 <MQTTDeserialize_connack+0x1a>
	flags.all = readChar(&curdata);
 801e03e:	4668      	mov	r0, sp
 801e040:	f000 f90c 	bl	801e25c <readChar>
	*sessionPresent = flags.bits.sessionpresent;
 801e044:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 801e048:	7028      	strb	r0, [r5, #0]
	*connack_rc = readChar(&curdata);
 801e04a:	4668      	mov	r0, sp
 801e04c:	f000 f906 	bl	801e25c <readChar>
 801e050:	4603      	mov	r3, r0
	rc = 1;
 801e052:	2001      	movs	r0, #1
	*connack_rc = readChar(&curdata);
 801e054:	7023      	strb	r3, [r4, #0]
}
 801e056:	b003      	add	sp, #12
 801e058:	bd30      	pop	{r4, r5, pc}
 801e05a:	bf00      	nop

0801e05c <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 801e05c:	b510      	push	{r4, lr}
	if (buflen < 2)
 801e05e:	2901      	cmp	r1, #1
{
 801e060:	b082      	sub	sp, #8
	unsigned char *ptr = buf;
 801e062:	9001      	str	r0, [sp, #4]
	if (buflen < 2)
 801e064:	dd0d      	ble.n	801e082 <MQTTSerialize_pingreq+0x26>
	writeChar(&ptr, header.byte); /* write header */
 801e066:	4604      	mov	r4, r0
 801e068:	21c0      	movs	r1, #192	; 0xc0
 801e06a:	a801      	add	r0, sp, #4
 801e06c:	f000 f8fc 	bl	801e268 <writeChar>
	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 801e070:	2100      	movs	r1, #0
 801e072:	9801      	ldr	r0, [sp, #4]
 801e074:	f000 f87a 	bl	801e16c <MQTTPacket_encode>
 801e078:	9b01      	ldr	r3, [sp, #4]
 801e07a:	4403      	add	r3, r0
	rc = ptr - buf;
 801e07c:	1b18      	subs	r0, r3, r4
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
}
 801e07e:	b002      	add	sp, #8
 801e080:	bd10      	pop	{r4, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801e082:	f06f 0001 	mvn.w	r0, #1
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 801e086:	e7fa      	b.n	801e07e <MQTTSerialize_pingreq+0x22>

0801e088 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 801e088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen = 0;
 801e08c:	2400      	movs	r4, #0
{
 801e08e:	b083      	sub	sp, #12
 801e090:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801e092:	4680      	mov	r8, r0

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801e094:	4668      	mov	r0, sp
{
 801e096:	4699      	mov	r9, r3
	unsigned char* curdata = buf;
 801e098:	e9cd 5400 	strd	r5, r4, [sp]
{
 801e09c:	460e      	mov	r6, r1
 801e09e:	4617      	mov	r7, r2
	header.byte = readChar(&curdata);
 801e0a0:	f000 f8dc 	bl	801e25c <readChar>
 801e0a4:	4625      	mov	r5, r4
	if (header.bits.type != PUBLISH)
 801e0a6:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 801e0aa:	2b30      	cmp	r3, #48	; 0x30
	header.byte = readChar(&curdata);
 801e0ac:	f360 0507 	bfi	r5, r0, #0, #8
	if (header.bits.type != PUBLISH)
 801e0b0:	d003      	beq.n	801e0ba <MQTTDeserialize_publish+0x32>
	*payload = curdata;
	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 801e0b2:	4620      	mov	r0, r4
 801e0b4:	b003      	add	sp, #12
 801e0b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	*dup = header.bits.dup;
 801e0ba:	f3c5 02c0 	ubfx	r2, r5, #3, #1
	*qos = header.bits.qos;
 801e0be:	f3c5 0341 	ubfx	r3, r5, #1, #2
	*retained = header.bits.retain;
 801e0c2:	f3c5 0500 	ubfx	r5, r5, #0, #1
	*dup = header.bits.dup;
 801e0c6:	f888 2000 	strb.w	r2, [r8]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801e0ca:	a901      	add	r1, sp, #4
	*qos = header.bits.qos;
 801e0cc:	6033      	str	r3, [r6, #0]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801e0ce:	9800      	ldr	r0, [sp, #0]
	*retained = header.bits.retain;
 801e0d0:	703d      	strb	r5, [r7, #0]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801e0d2:	f000 f883 	bl	801e1dc <MQTTPacket_decodeBuf>
	enddata = curdata + mylen;
 801e0d6:	e9dd 3500 	ldrd	r3, r5, [sp]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801e0da:	4403      	add	r3, r0
	enddata = curdata + mylen;
 801e0dc:	441d      	add	r5, r3
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801e0de:	4604      	mov	r4, r0
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 801e0e0:	462a      	mov	r2, r5
 801e0e2:	4669      	mov	r1, sp
 801e0e4:	980a      	ldr	r0, [sp, #40]	; 0x28
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801e0e6:	9300      	str	r3, [sp, #0]
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 801e0e8:	f000 f93a 	bl	801e360 <readMQTTLenString>
 801e0ec:	2800      	cmp	r0, #0
 801e0ee:	d0e0      	beq.n	801e0b2 <MQTTDeserialize_publish+0x2a>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 801e0f0:	9b00      	ldr	r3, [sp, #0]
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 801e0f2:	1aea      	subs	r2, r5, r3
 801e0f4:	d4dd      	bmi.n	801e0b2 <MQTTDeserialize_publish+0x2a>
	if (*qos > 0)
 801e0f6:	6831      	ldr	r1, [r6, #0]
 801e0f8:	2900      	cmp	r1, #0
 801e0fa:	dd06      	ble.n	801e10a <MQTTDeserialize_publish+0x82>
		*packetid = readInt(&curdata);
 801e0fc:	4668      	mov	r0, sp
 801e0fe:	f000 f8a5 	bl	801e24c <readInt>
 801e102:	9b00      	ldr	r3, [sp, #0]
 801e104:	f8a9 0000 	strh.w	r0, [r9]
 801e108:	1aea      	subs	r2, r5, r3
	rc = 1;
 801e10a:	2401      	movs	r4, #1
}
 801e10c:	4620      	mov	r0, r4
	*payloadlen = enddata - curdata;
 801e10e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e110:	600a      	str	r2, [r1, #0]
	*payload = curdata;
 801e112:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e114:	6013      	str	r3, [r2, #0]
}
 801e116:	b003      	add	sp, #12
 801e118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801e11c <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 801e11c:	b570      	push	{r4, r5, r6, lr}
 801e11e:	b082      	sub	sp, #8
 801e120:	4604      	mov	r4, r0
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801e122:	4668      	mov	r0, sp
{
 801e124:	460e      	mov	r6, r1
 801e126:	4615      	mov	r5, r2
	unsigned char* curdata = buf;
 801e128:	9300      	str	r3, [sp, #0]
	header.byte = readChar(&curdata);
 801e12a:	f000 f897 	bl	801e25c <readChar>
 801e12e:	2300      	movs	r3, #0
 801e130:	f360 0307 	bfi	r3, r0, #0, #8
	*dup = header.bits.dup;
 801e134:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	*packettype = header.bits.type;
 801e138:	f3c3 1303 	ubfx	r3, r3, #4, #4
	*dup = header.bits.dup;
 801e13c:	7032      	strb	r2, [r6, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801e13e:	a901      	add	r1, sp, #4
 801e140:	9800      	ldr	r0, [sp, #0]
	*packettype = header.bits.type;
 801e142:	7023      	strb	r3, [r4, #0]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801e144:	f000 f84a 	bl	801e1dc <MQTTPacket_decodeBuf>
	enddata = curdata + mylen;

	if (enddata - curdata < 2)
 801e148:	e9dd 1200 	ldrd	r1, r2, [sp]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801e14c:	4401      	add	r1, r0
	if (enddata - curdata < 2)
 801e14e:	2a01      	cmp	r2, #1
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801e150:	9100      	str	r1, [sp, #0]
	if (enddata - curdata < 2)
 801e152:	dd07      	ble.n	801e164 <MQTTDeserialize_ack+0x48>
		goto exit;
	*packetid = readInt(&curdata);
 801e154:	4668      	mov	r0, sp
 801e156:	f000 f879 	bl	801e24c <readInt>

	rc = 1;
 801e15a:	2301      	movs	r3, #1
	*packetid = readInt(&curdata);
 801e15c:	8028      	strh	r0, [r5, #0]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 801e15e:	4618      	mov	r0, r3
 801e160:	b002      	add	sp, #8
 801e162:	bd70      	pop	{r4, r5, r6, pc}
 801e164:	4603      	mov	r3, r0
 801e166:	4618      	mov	r0, r3
 801e168:	b002      	add	sp, #8
 801e16a:	bd70      	pop	{r4, r5, r6, pc}

0801e16c <MQTTPacket_encode>:
	int rc = 0;

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 801e16c:	424b      	negs	r3, r1
 801e16e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
{
 801e172:	b4f0      	push	{r4, r5, r6, r7}
		char d = length % 128;
 801e174:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 801e178:	bf58      	it	pl
 801e17a:	425c      	negpl	r4, r3
		length /= 128;
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 801e17c:	297f      	cmp	r1, #127	; 0x7f
		char d = length % 128;
 801e17e:	b2e4      	uxtb	r4, r4
		if (length > 0)
 801e180:	dd15      	ble.n	801e1ae <MQTTPacket_encode+0x42>
		length /= 128;
 801e182:	11cb      	asrs	r3, r1, #7
 801e184:	f1c0 0702 	rsb	r7, r0, #2
 801e188:	1e41      	subs	r1, r0, #1
			d |= 0x80;
 801e18a:	f064 067f 	orn	r6, r4, #127	; 0x7f
		if (length > 0)
 801e18e:	2b7f      	cmp	r3, #127	; 0x7f
 801e190:	eb07 0501 	add.w	r5, r7, r1
		char d = length % 128;
 801e194:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		buf[rc++] = d;
 801e198:	f801 6f01 	strb.w	r6, [r1, #1]!
		if (length > 0)
 801e19c:	ea4f 13e3 	mov.w	r3, r3, asr #7
 801e1a0:	dcf3      	bgt.n	801e18a <MQTTPacket_encode+0x1e>
 801e1a2:	4428      	add	r0, r5
		buf[rc++] = d;
 801e1a4:	7004      	strb	r4, [r0, #0]
 801e1a6:	3501      	adds	r5, #1
	} while (length > 0);
	FUNC_EXIT_RC(rc);
	return rc;
}
 801e1a8:	4628      	mov	r0, r5
 801e1aa:	bcf0      	pop	{r4, r5, r6, r7}
 801e1ac:	4770      	bx	lr
		if (length > 0)
 801e1ae:	2501      	movs	r5, #1
		buf[rc++] = d;
 801e1b0:	7004      	strb	r4, [r0, #0]
}
 801e1b2:	4628      	mov	r0, r5
 801e1b4:	bcf0      	pop	{r4, r5, r6, r7}
 801e1b6:	4770      	bx	lr

0801e1b8 <MQTTPacket_len>:
}


int MQTTPacket_len(int rem_len)
{
	rem_len += 1; /* header byte */
 801e1b8:	1c43      	adds	r3, r0, #1

	/* now remaining_length field */
	if (rem_len < 128)
 801e1ba:	2b7f      	cmp	r3, #127	; 0x7f
 801e1bc:	dc01      	bgt.n	801e1c2 <MQTTPacket_len+0xa>
		rem_len += 1;
 801e1be:	3002      	adds	r0, #2
 801e1c0:	4770      	bx	lr
	else if (rem_len < 16384)
 801e1c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801e1c6:	da01      	bge.n	801e1cc <MQTTPacket_len+0x14>
		rem_len += 2;
 801e1c8:	3003      	adds	r0, #3
 801e1ca:	4770      	bx	lr
	else if (rem_len < 2097151)
 801e1cc:	4a02      	ldr	r2, [pc, #8]	; (801e1d8 <MQTTPacket_len+0x20>)
 801e1ce:	4293      	cmp	r3, r2
		rem_len += 3;
 801e1d0:	bfd4      	ite	le
 801e1d2:	3004      	addle	r0, #4
	else
		rem_len += 4;
 801e1d4:	3005      	addgt	r0, #5
	return rem_len;
}
 801e1d6:	4770      	bx	lr
 801e1d8:	001ffffe 	.word	0x001ffffe

0801e1dc <MQTTPacket_decodeBuf>:
	*value = 0;
 801e1dc:	2300      	movs	r3, #0
	return count;
}


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 801e1de:	b470      	push	{r4, r5, r6}
		*c = *bufptr++;
 801e1e0:	4605      	mov	r5, r0
	*value = 0;
 801e1e2:	600b      	str	r3, [r1, #0]
		*c = *bufptr++;
 801e1e4:	f815 2b01 	ldrb.w	r2, [r5], #1
	bufptr = buf;
 801e1e8:	4c17      	ldr	r4, [pc, #92]	; (801e248 <MQTTPacket_decodeBuf+0x6c>)
 801e1ea:	f002 037f 	and.w	r3, r2, #127	; 0x7f
	} while ((c & 128) != 0);
 801e1ee:	0612      	lsls	r2, r2, #24
		*value += (c & 127) * multiplier;
 801e1f0:	600b      	str	r3, [r1, #0]
	bufptr = buf;
 801e1f2:	6020      	str	r0, [r4, #0]
	} while ((c & 128) != 0);
 801e1f4:	d51e      	bpl.n	801e234 <MQTTPacket_decodeBuf+0x58>
		*c = *bufptr++;
 801e1f6:	7842      	ldrb	r2, [r0, #1]
 801e1f8:	1c85      	adds	r5, r0, #2
		*value += (c & 127) * multiplier;
 801e1fa:	f002 067f 	and.w	r6, r2, #127	; 0x7f
 801e1fe:	eb03 13c6 	add.w	r3, r3, r6, lsl #7
	} while ((c & 128) != 0);
 801e202:	0616      	lsls	r6, r2, #24
		*value += (c & 127) * multiplier;
 801e204:	600b      	str	r3, [r1, #0]
	} while ((c & 128) != 0);
 801e206:	d519      	bpl.n	801e23c <MQTTPacket_decodeBuf+0x60>
		*c = *bufptr++;
 801e208:	7882      	ldrb	r2, [r0, #2]
 801e20a:	1cc5      	adds	r5, r0, #3
		*value += (c & 127) * multiplier;
 801e20c:	f002 067f 	and.w	r6, r2, #127	; 0x7f
 801e210:	eb03 3386 	add.w	r3, r3, r6, lsl #14
	} while ((c & 128) != 0);
 801e214:	0612      	lsls	r2, r2, #24
		*value += (c & 127) * multiplier;
 801e216:	600b      	str	r3, [r1, #0]
	} while ((c & 128) != 0);
 801e218:	d512      	bpl.n	801e240 <MQTTPacket_decodeBuf+0x64>
		*c = *bufptr++;
 801e21a:	78c2      	ldrb	r2, [r0, #3]
 801e21c:	1d05      	adds	r5, r0, #4
		*value += (c & 127) * multiplier;
 801e21e:	f002 007f 	and.w	r0, r2, #127	; 0x7f
 801e222:	eb03 5340 	add.w	r3, r3, r0, lsl #21
 801e226:	600b      	str	r3, [r1, #0]
	} while ((c & 128) != 0);
 801e228:	0613      	lsls	r3, r2, #24
 801e22a:	d50b      	bpl.n	801e244 <MQTTPacket_decodeBuf+0x68>
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 801e22c:	2005      	movs	r0, #5
 801e22e:	6025      	str	r5, [r4, #0]
	return MQTTPacket_decode(bufchar, value);
}
 801e230:	bc70      	pop	{r4, r5, r6}
 801e232:	4770      	bx	lr
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 801e234:	2001      	movs	r0, #1
 801e236:	6025      	str	r5, [r4, #0]
}
 801e238:	bc70      	pop	{r4, r5, r6}
 801e23a:	4770      	bx	lr
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 801e23c:	2002      	movs	r0, #2
 801e23e:	e7fa      	b.n	801e236 <MQTTPacket_decodeBuf+0x5a>
 801e240:	2003      	movs	r0, #3
 801e242:	e7f8      	b.n	801e236 <MQTTPacket_decodeBuf+0x5a>
 801e244:	2004      	movs	r0, #4
 801e246:	e7f6      	b.n	801e236 <MQTTPacket_decodeBuf+0x5a>
 801e248:	20019a04 	.word	0x20019a04

0801e24c <readInt>:
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
	unsigned char* ptr = *pptr;
 801e24c:	6803      	ldr	r3, [r0, #0]
	int len = 256*(*ptr) + (*(ptr+1));
 801e24e:	7819      	ldrb	r1, [r3, #0]
 801e250:	785a      	ldrb	r2, [r3, #1]
	*pptr += 2;
 801e252:	3302      	adds	r3, #2
 801e254:	6003      	str	r3, [r0, #0]
	return len;
}
 801e256:	eb02 2001 	add.w	r0, r2, r1, lsl #8
 801e25a:	4770      	bx	lr

0801e25c <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 801e25c:	4603      	mov	r3, r0
	char c = **pptr;
 801e25e:	6802      	ldr	r2, [r0, #0]
 801e260:	f812 0b01 	ldrb.w	r0, [r2], #1
	(*pptr)++;
 801e264:	601a      	str	r2, [r3, #0]
	return c;
}
 801e266:	4770      	bx	lr

0801e268 <writeChar>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
	**pptr = c;
 801e268:	6803      	ldr	r3, [r0, #0]
 801e26a:	7019      	strb	r1, [r3, #0]
	(*pptr)++;
 801e26c:	6803      	ldr	r3, [r0, #0]
 801e26e:	3301      	adds	r3, #1
 801e270:	6003      	str	r3, [r0, #0]
}
 801e272:	4770      	bx	lr

0801e274 <writeInt>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
	**pptr = (unsigned char)(anInt / 256);
 801e274:	2900      	cmp	r1, #0
 801e276:	bfa8      	it	ge
 801e278:	460b      	movge	r3, r1
 801e27a:	6802      	ldr	r2, [r0, #0]
 801e27c:	bfb8      	it	lt
 801e27e:	f101 03ff 	addlt.w	r3, r1, #255	; 0xff
 801e282:	121b      	asrs	r3, r3, #8
{
 801e284:	b410      	push	{r4}
	**pptr = (unsigned char)(anInt / 256);
 801e286:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 801e288:	6802      	ldr	r2, [r0, #0]
	**pptr = (unsigned char)(anInt % 256);
 801e28a:	424b      	negs	r3, r1
 801e28c:	b2db      	uxtb	r3, r3
 801e28e:	b2c9      	uxtb	r1, r1
	(*pptr)++;
 801e290:	f102 0401 	add.w	r4, r2, #1
	**pptr = (unsigned char)(anInt % 256);
 801e294:	bf58      	it	pl
 801e296:	4259      	negpl	r1, r3
	(*pptr)++;
 801e298:	6004      	str	r4, [r0, #0]
	**pptr = (unsigned char)(anInt % 256);
 801e29a:	7051      	strb	r1, [r2, #1]
	(*pptr)++;
 801e29c:	6803      	ldr	r3, [r0, #0]
}
 801e29e:	f85d 4b04 	ldr.w	r4, [sp], #4
	(*pptr)++;
 801e2a2:	3301      	adds	r3, #1
 801e2a4:	6003      	str	r3, [r0, #0]
}
 801e2a6:	4770      	bx	lr

0801e2a8 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 801e2a8:	b530      	push	{r4, r5, lr}
 801e2aa:	4604      	mov	r4, r0
 801e2ac:	b083      	sub	sp, #12
	int len = strlen(string);
 801e2ae:	4608      	mov	r0, r1
 801e2b0:	9101      	str	r1, [sp, #4]
 801e2b2:	f7f1 ffcb 	bl	801024c <strlen>
 801e2b6:	4605      	mov	r5, r0
	**pptr = (unsigned char)(anInt / 256);
 801e2b8:	6823      	ldr	r3, [r4, #0]
 801e2ba:	1202      	asrs	r2, r0, #8
 801e2bc:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 801e2be:	6823      	ldr	r3, [r4, #0]
	writeInt(pptr, len);
	memcpy(*pptr, string, len);
 801e2c0:	9901      	ldr	r1, [sp, #4]
	(*pptr)++;
 801e2c2:	1c5a      	adds	r2, r3, #1
 801e2c4:	6022      	str	r2, [r4, #0]
	**pptr = (unsigned char)(anInt % 256);
 801e2c6:	7058      	strb	r0, [r3, #1]
	(*pptr)++;
 801e2c8:	6820      	ldr	r0, [r4, #0]
	memcpy(*pptr, string, len);
 801e2ca:	462a      	mov	r2, r5
	(*pptr)++;
 801e2cc:	3001      	adds	r0, #1
 801e2ce:	6020      	str	r0, [r4, #0]
	memcpy(*pptr, string, len);
 801e2d0:	f011 fda2 	bl	802fe18 <memcpy>
	*pptr += len;
 801e2d4:	6820      	ldr	r0, [r4, #0]
 801e2d6:	4428      	add	r0, r5
 801e2d8:	6020      	str	r0, [r4, #0]
}
 801e2da:	b003      	add	sp, #12
 801e2dc:	bd30      	pop	{r4, r5, pc}
 801e2de:	bf00      	nop

0801e2e0 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 801e2e0:	b570      	push	{r4, r5, r6, lr}
 801e2e2:	b084      	sub	sp, #16
 801e2e4:	ac04      	add	r4, sp, #16
 801e2e6:	e904 000e 	stmdb	r4, {r1, r2, r3}
 801e2ea:	9d02      	ldr	r5, [sp, #8]
 801e2ec:	4604      	mov	r4, r0
	if (mqttstring.lenstring.len > 0)
 801e2ee:	2d00      	cmp	r5, #0
 801e2f0:	dc23      	bgt.n	801e33a <writeMQTTString+0x5a>
 801e2f2:	9d01      	ldr	r5, [sp, #4]
	{
		writeInt(pptr, mqttstring.lenstring.len);
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
		*pptr += mqttstring.lenstring.len;
	}
	else if (mqttstring.cstring)
 801e2f4:	b1b5      	cbz	r5, 801e324 <writeMQTTString+0x44>
	int len = strlen(string);
 801e2f6:	4628      	mov	r0, r5
 801e2f8:	f7f1 ffa8 	bl	801024c <strlen>
 801e2fc:	4606      	mov	r6, r0
	**pptr = (unsigned char)(anInt / 256);
 801e2fe:	6823      	ldr	r3, [r4, #0]
 801e300:	1202      	asrs	r2, r0, #8
 801e302:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 801e304:	6823      	ldr	r3, [r4, #0]
	memcpy(*pptr, string, len);
 801e306:	4629      	mov	r1, r5
	(*pptr)++;
 801e308:	1c5a      	adds	r2, r3, #1
 801e30a:	6022      	str	r2, [r4, #0]
	**pptr = (unsigned char)(anInt % 256);
 801e30c:	7058      	strb	r0, [r3, #1]
	(*pptr)++;
 801e30e:	6820      	ldr	r0, [r4, #0]
	memcpy(*pptr, string, len);
 801e310:	4632      	mov	r2, r6
	(*pptr)++;
 801e312:	3001      	adds	r0, #1
 801e314:	6020      	str	r0, [r4, #0]
	memcpy(*pptr, string, len);
 801e316:	f011 fd7f 	bl	802fe18 <memcpy>
	*pptr += len;
 801e31a:	6820      	ldr	r0, [r4, #0]
 801e31c:	4430      	add	r0, r6
 801e31e:	6020      	str	r0, [r4, #0]
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 801e320:	b004      	add	sp, #16
 801e322:	bd70      	pop	{r4, r5, r6, pc}
	**pptr = (unsigned char)(anInt / 256);
 801e324:	6803      	ldr	r3, [r0, #0]
 801e326:	701d      	strb	r5, [r3, #0]
	(*pptr)++;
 801e328:	6803      	ldr	r3, [r0, #0]
 801e32a:	1c5a      	adds	r2, r3, #1
 801e32c:	6002      	str	r2, [r0, #0]
	**pptr = (unsigned char)(anInt % 256);
 801e32e:	705d      	strb	r5, [r3, #1]
	(*pptr)++;
 801e330:	6803      	ldr	r3, [r0, #0]
 801e332:	3301      	adds	r3, #1
 801e334:	6003      	str	r3, [r0, #0]
}
 801e336:	b004      	add	sp, #16
 801e338:	bd70      	pop	{r4, r5, r6, pc}
	**pptr = (unsigned char)(anInt / 256);
 801e33a:	6803      	ldr	r3, [r0, #0]
 801e33c:	122a      	asrs	r2, r5, #8
 801e33e:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 801e340:	6803      	ldr	r3, [r0, #0]
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 801e342:	462a      	mov	r2, r5
	(*pptr)++;
 801e344:	1c59      	adds	r1, r3, #1
 801e346:	6001      	str	r1, [r0, #0]
	**pptr = (unsigned char)(anInt % 256);
 801e348:	705d      	strb	r5, [r3, #1]
	(*pptr)++;
 801e34a:	6800      	ldr	r0, [r0, #0]
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 801e34c:	9903      	ldr	r1, [sp, #12]
	(*pptr)++;
 801e34e:	3001      	adds	r0, #1
 801e350:	6020      	str	r0, [r4, #0]
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 801e352:	f011 fd61 	bl	802fe18 <memcpy>
		*pptr += mqttstring.lenstring.len;
 801e356:	6822      	ldr	r2, [r4, #0]
 801e358:	442a      	add	r2, r5
 801e35a:	6022      	str	r2, [r4, #0]
}
 801e35c:	b004      	add	sp, #16
 801e35e:	bd70      	pop	{r4, r5, r6, pc}

0801e360 <readMQTTLenString>:
{
	int rc = 0;

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 801e360:	680b      	ldr	r3, [r1, #0]
{
 801e362:	b430      	push	{r4, r5}
 801e364:	4604      	mov	r4, r0
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 801e366:	1ad0      	subs	r0, r2, r3
 801e368:	2801      	cmp	r0, #1
 801e36a:	dd09      	ble.n	801e380 <readMQTTLenString+0x20>
	int len = 256*(*ptr) + (*(ptr+1));
 801e36c:	781d      	ldrb	r5, [r3, #0]
 801e36e:	7858      	ldrb	r0, [r3, #1]
	*pptr += 2;
 801e370:	3302      	adds	r3, #2
	int len = 256*(*ptr) + (*(ptr+1));
 801e372:	eb00 2005 	add.w	r0, r0, r5, lsl #8
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 801e376:	181d      	adds	r5, r3, r0
 801e378:	4295      	cmp	r5, r2
	*pptr += 2;
 801e37a:	600b      	str	r3, [r1, #0]
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 801e37c:	6060      	str	r0, [r4, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 801e37e:	d904      	bls.n	801e38a <readMQTTLenString+0x2a>
			mqttstring->lenstring.data = (char*)*pptr;
			*pptr += mqttstring->lenstring.len;
			rc = 1;
		}
	}
	mqttstring->cstring = NULL;
 801e380:	2300      	movs	r3, #0
	int rc = 0;
 801e382:	2000      	movs	r0, #0
	mqttstring->cstring = NULL;
 801e384:	6023      	str	r3, [r4, #0]
	FUNC_EXIT_RC(rc);
	return rc;
}
 801e386:	bc30      	pop	{r4, r5}
 801e388:	4770      	bx	lr
			mqttstring->lenstring.data = (char*)*pptr;
 801e38a:	60a3      	str	r3, [r4, #8]
	mqttstring->cstring = NULL;
 801e38c:	2300      	movs	r3, #0
			*pptr += mqttstring->lenstring.len;
 801e38e:	600d      	str	r5, [r1, #0]
			rc = 1;
 801e390:	2001      	movs	r0, #1
	mqttstring->cstring = NULL;
 801e392:	6023      	str	r3, [r4, #0]
}
 801e394:	bc30      	pop	{r4, r5}
 801e396:	4770      	bx	lr

0801e398 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 801e398:	b084      	sub	sp, #16
 801e39a:	ab04      	add	r3, sp, #16
 801e39c:	e903 0007 	stmdb	r3, {r0, r1, r2}
 801e3a0:	9801      	ldr	r0, [sp, #4]
	int rc = 0;

	if (mqttstring.cstring)
 801e3a2:	b110      	cbz	r0, 801e3aa <MQTTstrlen+0x12>
		rc = strlen(mqttstring.cstring);
	else
		rc = mqttstring.lenstring.len;
	return rc;
}
 801e3a4:	b004      	add	sp, #16
		rc = strlen(mqttstring.cstring);
 801e3a6:	f7f1 bf51 	b.w	801024c <strlen>
}
 801e3aa:	9802      	ldr	r0, [sp, #8]
 801e3ac:	b004      	add	sp, #16
 801e3ae:	4770      	bx	lr

0801e3b0 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 801e3b0:	b570      	push	{r4, r5, r6, lr}
	int alen = 0,
		blen = 0;
	char *aptr;
	
	if (a->cstring)
 801e3b2:	6806      	ldr	r6, [r0, #0]
{
 801e3b4:	460c      	mov	r4, r1
	if (a->cstring)
 801e3b6:	b19e      	cbz	r6, 801e3e0 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
		alen = strlen(a->cstring);
 801e3b8:	4630      	mov	r0, r6
 801e3ba:	f7f1 ff47 	bl	801024c <strlen>
 801e3be:	4605      	mov	r5, r0
	else
	{
		aptr = a->lenstring.data;
		alen = a->lenstring.len;
	}
	blen = strlen(bptr);
 801e3c0:	4620      	mov	r0, r4
 801e3c2:	f7f1 ff43 	bl	801024c <strlen>
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 801e3c6:	4285      	cmp	r5, r0
 801e3c8:	d001      	beq.n	801e3ce <MQTTPacket_equals+0x1e>
 801e3ca:	2000      	movs	r0, #0
}
 801e3cc:	bd70      	pop	{r4, r5, r6, pc}
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 801e3ce:	462a      	mov	r2, r5
 801e3d0:	4621      	mov	r1, r4
 801e3d2:	4630      	mov	r0, r6
 801e3d4:	f011 ff86 	bl	80302e4 <strncmp>
 801e3d8:	fab0 f080 	clz	r0, r0
 801e3dc:	0940      	lsrs	r0, r0, #5
}
 801e3de:	bd70      	pop	{r4, r5, r6, pc}
		alen = a->lenstring.len;
 801e3e0:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
 801e3e4:	e7ec      	b.n	801e3c0 <MQTTPacket_equals+0x10>
 801e3e6:	bf00      	nop

0801e3e8 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 801e3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3ec:	4680      	mov	r8, r0
 801e3ee:	b087      	sub	sp, #28
 801e3f0:	461f      	mov	r7, r3
 801e3f2:	ae12      	add	r6, sp, #72	; 0x48
 801e3f4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801e3f8:	4689      	mov	r9, r1
 801e3fa:	ad03      	add	r5, sp, #12
 801e3fc:	4614      	mov	r4, r2
 801e3fe:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801e402:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
 801e406:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801e40a:	9301      	str	r3, [sp, #4]
 801e40c:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
	unsigned char *ptr = buf;
 801e410:	f8cd 8008 	str.w	r8, [sp, #8]
	len += 2 + MQTTstrlen(topicName) + payloadlen;
 801e414:	f7ff ffc0 	bl	801e398 <MQTTstrlen>
 801e418:	3002      	adds	r0, #2
	if (qos > 0)
 801e41a:	2f00      	cmp	r7, #0
	len += 2 + MQTTstrlen(topicName) + payloadlen;
 801e41c:	eb00 0b0a 	add.w	fp, r0, sl
		len += 2; /* packetid */
 801e420:	bfc8      	it	gt
 801e422:	f10b 0b02 	addgt.w	fp, fp, #2
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 801e426:	4658      	mov	r0, fp
 801e428:	f7ff fec6 	bl	801e1b8 <MQTTPacket_len>
 801e42c:	4548      	cmp	r0, r9
 801e42e:	dc2c      	bgt.n	801e48a <MQTTSerialize_publish+0xa2>
	}

	header.bits.type = PUBLISH;
	header.bits.dup = dup;
	header.bits.qos = qos;
	header.bits.retain = retained;
 801e430:	f005 0501 	and.w	r5, r5, #1
 801e434:	f007 0203 	and.w	r2, r7, #3
 801e438:	00e1      	lsls	r1, r4, #3
 801e43a:	f045 0530 	orr.w	r5, r5, #48	; 0x30
 801e43e:	ea45 0542 	orr.w	r5, r5, r2, lsl #1
 801e442:	f001 0108 	and.w	r1, r1, #8
	writeChar(&ptr, header.byte); /* write header */
 801e446:	4329      	orrs	r1, r5
 801e448:	a802      	add	r0, sp, #8
 801e44a:	f7ff ff0d 	bl	801e268 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 801e44e:	4659      	mov	r1, fp
 801e450:	9802      	ldr	r0, [sp, #8]
 801e452:	f7ff fe8b 	bl	801e16c <MQTTPacket_encode>

	writeMQTTString(&ptr, topicName);
 801e456:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 801e45a:	9c02      	ldr	r4, [sp, #8]
 801e45c:	4404      	add	r4, r0
	writeMQTTString(&ptr, topicName);
 801e45e:	a802      	add	r0, sp, #8
	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 801e460:	9402      	str	r4, [sp, #8]
	writeMQTTString(&ptr, topicName);
 801e462:	f7ff ff3d 	bl	801e2e0 <writeMQTTString>

	if (qos > 0)
 801e466:	2f00      	cmp	r7, #0
 801e468:	dd03      	ble.n	801e472 <MQTTSerialize_publish+0x8a>
		writeInt(&ptr, packetid);
 801e46a:	9901      	ldr	r1, [sp, #4]
 801e46c:	a802      	add	r0, sp, #8
 801e46e:	f7ff ff01 	bl	801e274 <writeInt>

	memcpy(ptr, payload, payloadlen);
 801e472:	4652      	mov	r2, sl
 801e474:	9915      	ldr	r1, [sp, #84]	; 0x54
 801e476:	9802      	ldr	r0, [sp, #8]
 801e478:	f011 fcce 	bl	802fe18 <memcpy>
	ptr += payloadlen;
 801e47c:	9802      	ldr	r0, [sp, #8]
 801e47e:	4450      	add	r0, sl

	rc = ptr - buf;
 801e480:	eba0 0008 	sub.w	r0, r0, r8

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 801e484:	b007      	add	sp, #28
 801e486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801e48a:	f06f 0001 	mvn.w	r0, #1
	return rc;
 801e48e:	e7f9      	b.n	801e484 <MQTTSerialize_publish+0x9c>

0801e490 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 801e490:	b530      	push	{r4, r5, lr}
	MQTTHeader header = {0};
	int rc = 0;
	unsigned char *ptr = buf;

	FUNC_ENTRY;
	if (buflen < 4)
 801e492:	2903      	cmp	r1, #3
{
 801e494:	b083      	sub	sp, #12
 801e496:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	unsigned char *ptr = buf;
 801e49a:	9001      	str	r0, [sp, #4]
	if (buflen < 4)
 801e49c:	dd21      	ble.n	801e4e2 <MQTTSerialize_ack+0x52>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.bits.type = packettype;
	header.bits.dup = dup;
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 801e49e:	f1a2 0106 	sub.w	r1, r2, #6
 801e4a2:	fab1 f181 	clz	r1, r1
 801e4a6:	00db      	lsls	r3, r3, #3
 801e4a8:	0949      	lsrs	r1, r1, #5
 801e4aa:	f003 0308 	and.w	r3, r3, #8
 801e4ae:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 801e4b2:	ea43 1202 	orr.w	r2, r3, r2, lsl #4
	writeChar(&ptr, header.byte); /* write header */
 801e4b6:	f002 01fa 	and.w	r1, r2, #250	; 0xfa
 801e4ba:	4604      	mov	r4, r0
 801e4bc:	a801      	add	r0, sp, #4
 801e4be:	f7ff fed3 	bl	801e268 <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 801e4c2:	2102      	movs	r1, #2
 801e4c4:	9801      	ldr	r0, [sp, #4]
 801e4c6:	f7ff fe51 	bl	801e16c <MQTTPacket_encode>
 801e4ca:	4602      	mov	r2, r0
 801e4cc:	9b01      	ldr	r3, [sp, #4]
	writeInt(&ptr, packetid);
 801e4ce:	a801      	add	r0, sp, #4
	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 801e4d0:	4413      	add	r3, r2
	writeInt(&ptr, packetid);
 801e4d2:	4629      	mov	r1, r5
	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 801e4d4:	9301      	str	r3, [sp, #4]
	writeInt(&ptr, packetid);
 801e4d6:	f7ff fecd 	bl	801e274 <writeInt>
	rc = ptr - buf;
 801e4da:	9801      	ldr	r0, [sp, #4]
 801e4dc:	1b00      	subs	r0, r0, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 801e4de:	b003      	add	sp, #12
 801e4e0:	bd30      	pop	{r4, r5, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801e4e2:	f06f 0001 	mvn.w	r0, #1
	return rc;
 801e4e6:	e7fa      	b.n	801e4de <MQTTSerialize_ack+0x4e>

0801e4e8 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 801e4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4ec:	b083      	sub	sp, #12
 801e4ee:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801e4f0:	4681      	mov	r9, r0
	for (i = 0; i < count; ++i)
 801e4f2:	2e00      	cmp	r6, #0
{
 801e4f4:	468a      	mov	sl, r1
 801e4f6:	4690      	mov	r8, r2
 801e4f8:	469b      	mov	fp, r3
	unsigned char *ptr = buf;
 801e4fa:	9001      	str	r0, [sp, #4]
	for (i = 0; i < count; ++i)
 801e4fc:	dd42      	ble.n	801e584 <MQTTSerialize_subscribe+0x9c>
	int len = 2; /* packetid */
 801e4fe:	2502      	movs	r5, #2
 801e500:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e502:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801e506:	eb04 0787 	add.w	r7, r4, r7, lsl #2
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 801e50a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801e50e:	f7ff ff43 	bl	801e398 <MQTTstrlen>
 801e512:	340c      	adds	r4, #12
 801e514:	3003      	adds	r0, #3
	for (i = 0; i < count; ++i)
 801e516:	42a7      	cmp	r7, r4
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 801e518:	4405      	add	r5, r0
	for (i = 0; i < count; ++i)
 801e51a:	d1f6      	bne.n	801e50a <MQTTSerialize_subscribe+0x22>
	int rem_len = 0;
	int rc = 0;
	int i = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 801e51c:	4628      	mov	r0, r5
 801e51e:	f7ff fe4b 	bl	801e1b8 <MQTTPacket_len>
 801e522:	4550      	cmp	r0, sl
 801e524:	dc30      	bgt.n	801e588 <MQTTSerialize_subscribe+0xa0>
	}

	header.byte = 0;
	header.bits.type = SUBSCRIBE;
	header.bits.dup = dup;
	header.bits.qos = 1;
 801e526:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801e52a:	f001 0108 	and.w	r1, r1, #8
	writeChar(&ptr, header.byte); /* write header */
 801e52e:	f041 0182 	orr.w	r1, r1, #130	; 0x82
 801e532:	a801      	add	r0, sp, #4
 801e534:	f7ff fe98 	bl	801e268 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 801e538:	4629      	mov	r1, r5
 801e53a:	9801      	ldr	r0, [sp, #4]
 801e53c:	f7ff fe16 	bl	801e16c <MQTTPacket_encode>
 801e540:	9b01      	ldr	r3, [sp, #4]

	writeInt(&ptr, packetid);
 801e542:	4659      	mov	r1, fp
	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 801e544:	4403      	add	r3, r0
	writeInt(&ptr, packetid);
 801e546:	a801      	add	r0, sp, #4
	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 801e548:	9301      	str	r3, [sp, #4]
	writeInt(&ptr, packetid);
 801e54a:	f7ff fe93 	bl	801e274 <writeInt>

	for (i = 0; i < count; ++i)
 801e54e:	2e00      	cmp	r6, #0
 801e550:	dd12      	ble.n	801e578 <MQTTSerialize_subscribe+0x90>
 801e552:	e9dd 570d 	ldrd	r5, r7, [sp, #52]	; 0x34
 801e556:	eb07 0686 	add.w	r6, r7, r6, lsl #2
	{
		writeMQTTString(&ptr, topicFilters[i]);
 801e55a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 801e55e:	a801      	add	r0, sp, #4
 801e560:	f7ff febe 	bl	801e2e0 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 801e564:	f857 1b04 	ldr.w	r1, [r7], #4
 801e568:	a801      	add	r0, sp, #4
 801e56a:	b2c9      	uxtb	r1, r1
 801e56c:	f7ff fe7c 	bl	801e268 <writeChar>
	for (i = 0; i < count; ++i)
 801e570:	42b7      	cmp	r7, r6
 801e572:	f105 050c 	add.w	r5, r5, #12
 801e576:	d1f0      	bne.n	801e55a <MQTTSerialize_subscribe+0x72>
	}

	rc = ptr - buf;
 801e578:	9801      	ldr	r0, [sp, #4]
 801e57a:	eba0 0009 	sub.w	r0, r0, r9
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 801e57e:	b003      	add	sp, #12
 801e580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int len = 2; /* packetid */
 801e584:	2502      	movs	r5, #2
 801e586:	e7c9      	b.n	801e51c <MQTTSerialize_subscribe+0x34>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801e588:	f06f 0001 	mvn.w	r0, #1
	return rc;
 801e58c:	e7f7      	b.n	801e57e <MQTTSerialize_subscribe+0x96>
 801e58e:	bf00      	nop

0801e590 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 801e590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e594:	b082      	sub	sp, #8
 801e596:	9f08      	ldr	r7, [sp, #32]
 801e598:	4680      	mov	r8, r0
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801e59a:	4668      	mov	r0, sp
{
 801e59c:	461e      	mov	r6, r3
 801e59e:	460d      	mov	r5, r1
 801e5a0:	4614      	mov	r4, r2
	unsigned char* curdata = buf;
 801e5a2:	9700      	str	r7, [sp, #0]
	header.byte = readChar(&curdata);
 801e5a4:	f7ff fe5a 	bl	801e25c <readChar>
	if (header.bits.type != SUBACK)
 801e5a8:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 801e5ac:	2b90      	cmp	r3, #144	; 0x90
 801e5ae:	d003      	beq.n	801e5b8 <MQTTDeserialize_suback+0x28>
	int rc = 0;
 801e5b0:	2000      	movs	r0, #0

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 801e5b2:	b002      	add	sp, #8
 801e5b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801e5b8:	9800      	ldr	r0, [sp, #0]
 801e5ba:	a901      	add	r1, sp, #4
 801e5bc:	f7ff fe0e 	bl	801e1dc <MQTTPacket_decodeBuf>
	enddata = curdata + mylen;
 801e5c0:	e9dd 7300 	ldrd	r7, r3, [sp]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801e5c4:	4407      	add	r7, r0
	if (enddata - curdata < 2)
 801e5c6:	2b01      	cmp	r3, #1
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801e5c8:	9700      	str	r7, [sp, #0]
	if (enddata - curdata < 2)
 801e5ca:	ddf2      	ble.n	801e5b2 <MQTTDeserialize_suback+0x22>
	*packetid = readInt(&curdata);
 801e5cc:	4668      	mov	r0, sp
	enddata = curdata + mylen;
 801e5ce:	441f      	add	r7, r3
	*packetid = readInt(&curdata);
 801e5d0:	f7ff fe3c 	bl	801e24c <readInt>
	*count = 0;
 801e5d4:	2300      	movs	r3, #0
	while (curdata < enddata)
 801e5d6:	9a00      	ldr	r2, [sp, #0]
	*packetid = readInt(&curdata);
 801e5d8:	f8a8 0000 	strh.w	r0, [r8]
	while (curdata < enddata)
 801e5dc:	4297      	cmp	r7, r2
	*count = 0;
 801e5de:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
 801e5e0:	d80c      	bhi.n	801e5fc <MQTTDeserialize_suback+0x6c>
 801e5e2:	e010      	b.n	801e606 <MQTTDeserialize_suback+0x76>
		grantedQoSs[(*count)++] = readChar(&curdata);
 801e5e4:	4668      	mov	r0, sp
 801e5e6:	f7ff fe39 	bl	801e25c <readChar>
 801e5ea:	6822      	ldr	r2, [r4, #0]
	while (curdata < enddata)
 801e5ec:	9b00      	ldr	r3, [sp, #0]
		grantedQoSs[(*count)++] = readChar(&curdata);
 801e5ee:	1c51      	adds	r1, r2, #1
	while (curdata < enddata)
 801e5f0:	42bb      	cmp	r3, r7
		grantedQoSs[(*count)++] = readChar(&curdata);
 801e5f2:	6021      	str	r1, [r4, #0]
 801e5f4:	f846 0022 	str.w	r0, [r6, r2, lsl #2]
	while (curdata < enddata)
 801e5f8:	d205      	bcs.n	801e606 <MQTTDeserialize_suback+0x76>
 801e5fa:	6823      	ldr	r3, [r4, #0]
		if (*count > maxcount)
 801e5fc:	429d      	cmp	r5, r3
 801e5fe:	daf1      	bge.n	801e5e4 <MQTTDeserialize_suback+0x54>
			rc = -1;
 801e600:	f04f 30ff 	mov.w	r0, #4294967295
	return rc;
 801e604:	e7d5      	b.n	801e5b2 <MQTTDeserialize_suback+0x22>
	rc = 1;
 801e606:	2001      	movs	r0, #1
 801e608:	e7d3      	b.n	801e5b2 <MQTTDeserialize_suback+0x22>
 801e60a:	bf00      	nop

0801e60c <WIZnetRecvTimeOut>:
extern uint8_t *g_rootca_buf;
extern uint8_t *g_clica_buf;
extern uint8_t g_pkey_buf[];

int WIZnetRecvTimeOut(void *ctx, unsigned char *buf, size_t len, uint32_t timeout)
{
 801e60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e610:	4604      	mov	r4, r0
 801e612:	460f      	mov	r7, r1
 801e614:	4690      	mov	r8, r2
 801e616:	461e      	mov	r6, r3
    int ret;
    uint32_t start_ms = millis();
 801e618:	f7f9 f98a 	bl	8017930 <millis>
 801e61c:	b2e4      	uxtb	r4, r4
 801e61e:	4605      	mov	r5, r0
 801e620:	e004      	b.n	801e62c <WIZnetRecvTimeOut+0x20>
    do
    {
        if(getSn_RX_RSR((uint8_t)ctx)){
            return recv((uint8_t)ctx, (uint8_t *)buf, (uint16_t)len);
        }
    }while((millis() - start_ms) < timeout);
 801e622:	f7f9 f985 	bl	8017930 <millis>
 801e626:	1b40      	subs	r0, r0, r5
 801e628:	42b0      	cmp	r0, r6
 801e62a:	d20c      	bcs.n	801e646 <WIZnetRecvTimeOut+0x3a>
        if(getSn_RX_RSR((uint8_t)ctx)){
 801e62c:	4620      	mov	r0, r4
 801e62e:	f7fc fb37 	bl	801aca0 <getSn_RX_RSR>
 801e632:	2800      	cmp	r0, #0
 801e634:	d0f5      	beq.n	801e622 <WIZnetRecvTimeOut+0x16>
            return recv((uint8_t)ctx, (uint8_t *)buf, (uint16_t)len);
 801e636:	4639      	mov	r1, r7
 801e638:	4620      	mov	r0, r4
 801e63a:	fa1f f288 	uxth.w	r2, r8

    return MBEDTLS_ERR_SSL_TIMEOUT;
}
 801e63e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            return recv((uint8_t)ctx, (uint8_t *)buf, (uint16_t)len);
 801e642:	f7fd b855 	b.w	801b6f0 <recv>
}
 801e646:	4801      	ldr	r0, [pc, #4]	; (801e64c <WIZnetRecvTimeOut+0x40>)
 801e648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e64c:	ffff9800 	.word	0xffff9800

0801e650 <WIZnetRecv>:

/*Shell for mbedtls recv function*/
int WIZnetRecv(void *ctx, unsigned char *buf, unsigned int len )
{
    return (recv((uint8_t)ctx, (uint8_t *)buf, (uint16_t)len));
 801e650:	b2c0      	uxtb	r0, r0
 801e652:	b292      	uxth	r2, r2
 801e654:	f7fd b84c 	b.w	801b6f0 <recv>

0801e658 <WIZnetSend>:
}

/*Shell for mbedtls send function*/
int WIZnetSend(void *ctx, const unsigned char *buf, unsigned int len )
{
    return (send((uint8_t)ctx, (uint8_t *)buf, (uint16_t)len));
 801e658:	b2c0      	uxtb	r0, r0
 801e65a:	b292      	uxth	r2, r2
 801e65c:	f7fc bf5c 	b.w	801b518 <send>

0801e660 <wiz_tls_init>:


/* SSL context initialization
 * */
int wiz_tls_init(wiz_tls_context* tlsContext, int* socket_fd, const char * host)
{
 801e660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e664:	b082      	sub	sp, #8
 801e666:	4688      	mov	r8, r1
 801e668:	4617      	mov	r7, r2
 801e66a:	4604      	mov	r4, r0
    struct __ssl_option *ssl_option = (struct __ssl_option *)&(get_DevConfig_pointer()->ssl_option);
 801e66c:	f7f5 fce2 	bl	8014034 <get_DevConfig_pointer>
 801e670:	4605      	mov	r5, r0

	/*
		Initialize session data
	*/
#if defined (MBEDTLS_ENTROPY_C)	
	tlsContext->entropy = malloc(sizeof(mbedtls_entropy_context));
 801e672:	f44f 709e 	mov.w	r0, #316	; 0x13c
 801e676:	f011 fbb1 	bl	802fddc <malloc>
 801e67a:	4606      	mov	r6, r0
#endif
	tlsContext->ctr_drbg = malloc(sizeof(mbedtls_ctr_drbg_context));
 801e67c:	f44f 70a0 	mov.w	r0, #320	; 0x140
	tlsContext->entropy = malloc(sizeof(mbedtls_entropy_context));
 801e680:	6026      	str	r6, [r4, #0]
	tlsContext->ctr_drbg = malloc(sizeof(mbedtls_ctr_drbg_context));
 801e682:	f011 fbab 	bl	802fddc <malloc>
 801e686:	4603      	mov	r3, r0
	tlsContext->ssl = malloc(sizeof(mbedtls_ssl_context));
 801e688:	20c8      	movs	r0, #200	; 0xc8
	tlsContext->ctr_drbg = malloc(sizeof(mbedtls_ctr_drbg_context));
 801e68a:	6063      	str	r3, [r4, #4]
	tlsContext->ssl = malloc(sizeof(mbedtls_ssl_context));
 801e68c:	f011 fba6 	bl	802fddc <malloc>
 801e690:	4603      	mov	r3, r0
	tlsContext->conf = malloc(sizeof(mbedtls_ssl_config));
 801e692:	2060      	movs	r0, #96	; 0x60
	tlsContext->ssl = malloc(sizeof(mbedtls_ssl_context));
 801e694:	60a3      	str	r3, [r4, #8]
	tlsContext->conf = malloc(sizeof(mbedtls_ssl_config));
 801e696:	f011 fba1 	bl	802fddc <malloc>
 801e69a:	4603      	mov	r3, r0
	tlsContext->cacert = malloc(sizeof(mbedtls_x509_crt));    
 801e69c:	f44f 70aa 	mov.w	r0, #340	; 0x154
	tlsContext->conf = malloc(sizeof(mbedtls_ssl_config));
 801e6a0:	60e3      	str	r3, [r4, #12]
	tlsContext->cacert = malloc(sizeof(mbedtls_x509_crt));    
 801e6a2:	f011 fb9b 	bl	802fddc <malloc>
 801e6a6:	4603      	mov	r3, r0
    tlsContext->clicert = malloc(sizeof(mbedtls_x509_crt));
 801e6a8:	f44f 70aa 	mov.w	r0, #340	; 0x154
	tlsContext->cacert = malloc(sizeof(mbedtls_x509_crt));    
 801e6ac:	6123      	str	r3, [r4, #16]
    tlsContext->clicert = malloc(sizeof(mbedtls_x509_crt));
 801e6ae:	f011 fb95 	bl	802fddc <malloc>
 801e6b2:	4603      	mov	r3, r0
    tlsContext->pkey = malloc(sizeof(mbedtls_pk_context));
 801e6b4:	2008      	movs	r0, #8
    tlsContext->clicert = malloc(sizeof(mbedtls_x509_crt));
 801e6b6:	6163      	str	r3, [r4, #20]
    tlsContext->pkey = malloc(sizeof(mbedtls_pk_context));
 801e6b8:	f011 fb90 	bl	802fddc <malloc>
 801e6bc:	4603      	mov	r3, r0

#if defined (MBEDTLS_ENTROPY_C)
	mbedtls_entropy_init( tlsContext->entropy);
 801e6be:	4630      	mov	r0, r6
    tlsContext->pkey = malloc(sizeof(mbedtls_pk_context));
 801e6c0:	61a3      	str	r3, [r4, #24]
	mbedtls_entropy_init( tlsContext->entropy);
 801e6c2:	f006 fab9 	bl	8024c38 <mbedtls_entropy_init>
#endif

    mbedtls_ctr_drbg_init(tlsContext->ctr_drbg);
 801e6c6:	6860      	ldr	r0, [r4, #4]
 801e6c8:	f006 f8ea 	bl	80248a0 <mbedtls_ctr_drbg_init>
	mbedtls_ssl_init(tlsContext->ssl);
 801e6cc:	68a0      	ldr	r0, [r4, #8]
 801e6ce:	f00f fb4f 	bl	802dd70 <mbedtls_ssl_init>
	mbedtls_ssl_config_init(tlsContext->conf);
 801e6d2:	68e0      	ldr	r0, [r4, #12]
 801e6d4:	f00f fd16 	bl	802e104 <mbedtls_ssl_config_init>
	mbedtls_x509_crt_init(tlsContext->cacert);
 801e6d8:	6920      	ldr	r0, [r4, #16]
 801e6da:	f011 fb3b 	bl	802fd54 <mbedtls_x509_crt_init>
	mbedtls_x509_crt_init(tlsContext->clicert);
 801e6de:	6960      	ldr	r0, [r4, #20]
 801e6e0:	f011 fb38 	bl	802fd54 <mbedtls_x509_crt_init>
	mbedtls_pk_init(tlsContext->pkey);
 801e6e4:	69a0      	ldr	r0, [r4, #24]
 801e6e6:	f008 fd49 	bl	802717c <mbedtls_pk_init>

	/*
		Initialize certificates
	*/
#if defined (MBEDTLS_ENTROPY_C)	
	if((ret = mbedtls_ctr_drbg_seed(tlsContext->ctr_drbg, mbedtls_entropy_func, tlsContext->entropy,    \
 801e6ea:	e9d4 2000 	ldrd	r2, r0, [r4]
 801e6ee:	230b      	movs	r3, #11
 801e6f0:	497e      	ldr	r1, [pc, #504]	; (801e8ec <wiz_tls_init+0x28c>)
 801e6f2:	9300      	str	r3, [sp, #0]
 801e6f4:	4b7e      	ldr	r3, [pc, #504]	; (801e8f0 <wiz_tls_init+0x290>)
 801e6f6:	f006 f8ed 	bl	80248d4 <mbedtls_ctr_drbg_seed>
 801e6fa:	2800      	cmp	r0, #0
 801e6fc:	f040 80b1 	bne.w	801e862 <wiz_tls_init+0x202>
#endif
    
	/*
		Parse certificate
	*/
    if (ssl_option->root_ca_option != MBEDTLS_SSL_VERIFY_NONE)
 801e700:	f895 310e 	ldrb.w	r3, [r5, #270]	; 0x10e
 801e704:	2b00      	cmp	r3, #0
 801e706:	f040 8094 	bne.w	801e832 <wiz_tls_init+0x1d2>
    		return -1;
	    }
        PRT_SSL("ok! mbedtls_x509_crt_parse returned -0x%x while parsing root cert\r\n", -ret);
    }

    if (ssl_option->client_cert_enable == ENABLE)
 801e70a:	f895 310f 	ldrb.w	r3, [r5, #271]	; 0x10f
 801e70e:	2b01      	cmp	r3, #1
 801e710:	d057      	beq.n	801e7c2 <wiz_tls_init+0x162>
    		return -1;
    	}
        PRT_SSL("ok! mbedtls_pk_parse_key returned -0x%x while parsing private key\r\n", -ret);
    }
    
    PRT_SSL("host = %s\r\n", host);
 801e712:	463a      	mov	r2, r7
 801e714:	4977      	ldr	r1, [pc, #476]	; (801e8f4 <wiz_tls_init+0x294>)
 801e716:	4878      	ldr	r0, [pc, #480]	; (801e8f8 <wiz_tls_init+0x298>)
 801e718:	f7f9 fb94 	bl	8017e44 <WIZ_SECURE_printf>
	if((ret = mbedtls_ssl_set_hostname(tlsContext->ssl, host)) != 0)
 801e71c:	4639      	mov	r1, r7
 801e71e:	68a0      	ldr	r0, [r4, #8]
 801e720:	f00f fbfa 	bl	802df18 <mbedtls_ssl_set_hostname>
	{
		PRT_SSL(" failed mbedtls_ssl_set_hostname returned %d\r\n", ret);
 801e724:	4973      	ldr	r1, [pc, #460]	; (801e8f4 <wiz_tls_init+0x294>)
	if((ret = mbedtls_ssl_set_hostname(tlsContext->ssl, host)) != 0)
 801e726:	4606      	mov	r6, r0
		PRT_SSL(" failed mbedtls_ssl_set_hostname returned %d\r\n", ret);
 801e728:	4602      	mov	r2, r0
	if((ret = mbedtls_ssl_set_hostname(tlsContext->ssl, host)) != 0)
 801e72a:	2800      	cmp	r0, #0
 801e72c:	d179      	bne.n	801e822 <wiz_tls_init+0x1c2>
		return -1;
	}
    PRT_SSL("ok! mbedtls_ssl_set_hostname returned %d\r\n", ret);
 801e72e:	4873      	ldr	r0, [pc, #460]	; (801e8fc <wiz_tls_init+0x29c>)
 801e730:	f7f9 fb88 	bl	8017e44 <WIZ_SECURE_printf>
    
	if((ret = mbedtls_ssl_config_defaults(tlsContext->conf,
 801e734:	4633      	mov	r3, r6
 801e736:	4632      	mov	r2, r6
 801e738:	4631      	mov	r1, r6
 801e73a:	68e0      	ldr	r0, [r4, #12]
 801e73c:	f00f fce6 	bl	802e10c <mbedtls_ssl_config_defaults>
 801e740:	4606      	mov	r6, r0
 801e742:	2800      	cmp	r0, #0
 801e744:	f040 80b9 	bne.w	801e8ba <wiz_tls_init+0x25a>
	{
		PRT_SSL(" failed mbedtls_ssl_config_defaults returned %d\r\n", ret);
		return -1;
	}

    PRT_SSL("ssl_option->root_ca_option = %d\r\n", ssl_option->root_ca_option);
 801e748:	f895 210e 	ldrb.w	r2, [r5, #270]	; 0x10e
 801e74c:	4969      	ldr	r1, [pc, #420]	; (801e8f4 <wiz_tls_init+0x294>)
 801e74e:	486c      	ldr	r0, [pc, #432]	; (801e900 <wiz_tls_init+0x2a0>)
 801e750:	f7f9 fb78 	bl	8017e44 <WIZ_SECURE_printf>
    PRT_SSL("socket_fd = %d\r\n", socket_fd);
 801e754:	4642      	mov	r2, r8
 801e756:	4967      	ldr	r1, [pc, #412]	; (801e8f4 <wiz_tls_init+0x294>)
 801e758:	486a      	ldr	r0, [pc, #424]	; (801e904 <wiz_tls_init+0x2a4>)
 801e75a:	f7f9 fb73 	bl	8017e44 <WIZ_SECURE_printf>
	mbedtls_ssl_conf_authmode(tlsContext->conf, ssl_option->root_ca_option);
 801e75e:	f895 110e 	ldrb.w	r1, [r5, #270]	; 0x10e
 801e762:	68e0      	ldr	r0, [r4, #12]
 801e764:	f00f fb9e 	bl	802dea4 <mbedtls_ssl_conf_authmode>
    mbedtls_ssl_conf_ca_chain(tlsContext->conf, tlsContext->cacert, NULL);
 801e768:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 801e76c:	4632      	mov	r2, r6
 801e76e:	f00f fbcf 	bl	802df10 <mbedtls_ssl_conf_ca_chain>
	mbedtls_ssl_conf_rng(tlsContext->conf, mbedtls_ctr_drbg_random, tlsContext->ctr_drbg);
 801e772:	6862      	ldr	r2, [r4, #4]
 801e774:	4964      	ldr	r1, [pc, #400]	; (801e908 <wiz_tls_init+0x2a8>)
 801e776:	68e0      	ldr	r0, [r4, #12]
 801e778:	f00f fb9c 	bl	802deb4 <mbedtls_ssl_conf_rng>
    
    if (ssl_option->client_cert_enable == ENABLE)
 801e77c:	f895 310f 	ldrb.w	r3, [r5, #271]	; 0x10f
 801e780:	2b01      	cmp	r3, #1
 801e782:	d078      	beq.n	801e876 <wiz_tls_init+0x216>
    		return -1;
    	}
        PRT_SSL("ok! mbedtls_ssl_conf_own_cert returned %d\r\n", ret);
    }
    
    mbedtls_ssl_conf_endpoint(tlsContext->conf, MBEDTLS_SSL_IS_CLIENT);
 801e784:	2100      	movs	r1, #0
 801e786:	68e0      	ldr	r0, [r4, #12]
 801e788:	f00f fb84 	bl	802de94 <mbedtls_ssl_conf_endpoint>
	mbedtls_ssl_conf_read_timeout(tlsContext->conf, WIZ_RECV_TIMEOUT_VALUE);
 801e78c:	f242 7110 	movw	r1, #10000	; 0x2710
 801e790:	68e0      	ldr	r0, [r4, #12]
 801e792:	f00f fb9d 	bl	802ded0 <mbedtls_ssl_conf_read_timeout>
        PRT_SSL(" failed  ! mbedtls_ssl_conf_alpn_protocols returned -0x%x\r\n", -ret);
        return -1;
    }
#endif

	if((ret = mbedtls_ssl_setup(tlsContext->ssl, tlsContext->conf)) != 0)
 801e796:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 801e79a:	f00f faed 	bl	802dd78 <mbedtls_ssl_setup>
 801e79e:	2800      	cmp	r0, #0
 801e7a0:	d17d      	bne.n	801e89e <wiz_tls_init+0x23e>
	{
		PRT_SSL(" failed mbedtls_ssl_setup returned -0x%x\r\n", -ret);
		return -1;
	}
    mbedtls_ssl_set_bio(tlsContext->ssl, socket_fd, SSLSendCB, SSLRecvCB, SSLRecvTimeOutCB);
 801e7a2:	4b5a      	ldr	r3, [pc, #360]	; (801e90c <wiz_tls_init+0x2ac>)
 801e7a4:	68a0      	ldr	r0, [r4, #8]
 801e7a6:	4641      	mov	r1, r8
 801e7a8:	4a59      	ldr	r2, [pc, #356]	; (801e910 <wiz_tls_init+0x2b0>)
 801e7aa:	9300      	str	r3, [sp, #0]
 801e7ac:	4b59      	ldr	r3, [pc, #356]	; (801e914 <wiz_tls_init+0x2b4>)
 801e7ae:	f00f fb85 	bl	802debc <mbedtls_ssl_set_bio>

    PRT_SSL("return 1\r\n");
 801e7b2:	4950      	ldr	r1, [pc, #320]	; (801e8f4 <wiz_tls_init+0x294>)
 801e7b4:	4858      	ldr	r0, [pc, #352]	; (801e918 <wiz_tls_init+0x2b8>)
 801e7b6:	f7f9 fb45 	bl	8017e44 <WIZ_SECURE_printf>
	return 1;
 801e7ba:	2001      	movs	r0, #1
}
 801e7bc:	b002      	add	sp, #8
 801e7be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        g_clica_buf = FLASH_CLICA_ADDR;
 801e7c2:	4b56      	ldr	r3, [pc, #344]	; (801e91c <wiz_tls_init+0x2bc>)
 801e7c4:	4e56      	ldr	r6, [pc, #344]	; (801e920 <wiz_tls_init+0x2c0>)
        memset(g_pkey_buf, NULL, PKEY_BUF_SIZE);
 801e7c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801e7ca:	2100      	movs	r1, #0
 801e7cc:	4855      	ldr	r0, [pc, #340]	; (801e924 <wiz_tls_init+0x2c4>)
        g_clica_buf = FLASH_CLICA_ADDR;
 801e7ce:	6033      	str	r3, [r6, #0]
        memset(g_pkey_buf, NULL, PKEY_BUF_SIZE);
 801e7d0:	f011 fb49 	bl	802fe66 <memset>
        SECURE_FLASH_READ(STORAGE_PKEY, (uint8_t *)g_pkey_buf, ssl_option->pkey_len);
 801e7d4:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 801e7d8:	4952      	ldr	r1, [pc, #328]	; (801e924 <wiz_tls_init+0x2c4>)
 801e7da:	b292      	uxth	r2, r2
 801e7dc:	200b      	movs	r0, #11
 801e7de:	f012 ff73 	bl	80316c8 <__SECURE_FLASH_READ_veneer>
    	ret = mbedtls_x509_crt_parse((tlsContext->clicert), (const char *)g_clica_buf, ssl_option->clica_len + 1);
 801e7e2:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
 801e7e6:	6831      	ldr	r1, [r6, #0]
 801e7e8:	6960      	ldr	r0, [r4, #20]
 801e7ea:	3201      	adds	r2, #1
 801e7ec:	f011 f9ce 	bl	802fb8c <mbedtls_x509_crt_parse>
    	if(ret != 0) {
 801e7f0:	4606      	mov	r6, r0
 801e7f2:	2800      	cmp	r0, #0
 801e7f4:	d14b      	bne.n	801e88e <wiz_tls_init+0x22e>
        PRT_SSL("ok! mbedtls_x509_crt_parse returned -0x%x while parsing device cert\r\n", -ret);
 801e7f6:	4602      	mov	r2, r0
 801e7f8:	493e      	ldr	r1, [pc, #248]	; (801e8f4 <wiz_tls_init+0x294>)
 801e7fa:	484b      	ldr	r0, [pc, #300]	; (801e928 <wiz_tls_init+0x2c8>)
 801e7fc:	f7f9 fb22 	bl	8017e44 <WIZ_SECURE_printf>
        ret = mbedtls_pk_parse_key(tlsContext->pkey, (const char *)g_pkey_buf, ssl_option->pkey_len + 1, NULL, 0);
 801e800:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 801e804:	9600      	str	r6, [sp, #0]
 801e806:	3201      	adds	r2, #1
 801e808:	4633      	mov	r3, r6
 801e80a:	4946      	ldr	r1, [pc, #280]	; (801e924 <wiz_tls_init+0x2c4>)
 801e80c:	69a0      	ldr	r0, [r4, #24]
 801e80e:	f009 f8ed 	bl	80279ec <mbedtls_pk_parse_key>
    	if(ret != 0) {
 801e812:	4602      	mov	r2, r0
 801e814:	2800      	cmp	r0, #0
 801e816:	d15a      	bne.n	801e8ce <wiz_tls_init+0x26e>
        PRT_SSL("ok! mbedtls_pk_parse_key returned -0x%x while parsing private key\r\n", -ret);
 801e818:	4936      	ldr	r1, [pc, #216]	; (801e8f4 <wiz_tls_init+0x294>)
 801e81a:	4844      	ldr	r0, [pc, #272]	; (801e92c <wiz_tls_init+0x2cc>)
 801e81c:	f7f9 fb12 	bl	8017e44 <WIZ_SECURE_printf>
 801e820:	e777      	b.n	801e712 <wiz_tls_init+0xb2>
		PRT_SSL(" failed mbedtls_ssl_set_hostname returned %d\r\n", ret);
 801e822:	4843      	ldr	r0, [pc, #268]	; (801e930 <wiz_tls_init+0x2d0>)
 801e824:	f7f9 fb0e 	bl	8017e44 <WIZ_SECURE_printf>
		return -1;
 801e828:	f04f 30ff 	mov.w	r0, #4294967295
}
 801e82c:	b002      	add	sp, #8
 801e82e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        PRT_SSL(" Loading the CA root certificate len = %d\r\n", ssl_option->rootca_len);
 801e832:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
 801e836:	492f      	ldr	r1, [pc, #188]	; (801e8f4 <wiz_tls_init+0x294>)
 801e838:	483e      	ldr	r0, [pc, #248]	; (801e934 <wiz_tls_init+0x2d4>)
 801e83a:	f7f9 fb03 	bl	8017e44 <WIZ_SECURE_printf>
        ret = mbedtls_x509_crt_parse(tlsContext->cacert, (const char *)g_rootca_buf, ssl_option->rootca_len + 1);
 801e83e:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
        g_rootca_buf = FLASH_ROOTCA_ADDR;
 801e842:	493d      	ldr	r1, [pc, #244]	; (801e938 <wiz_tls_init+0x2d8>)
 801e844:	4b3d      	ldr	r3, [pc, #244]	; (801e93c <wiz_tls_init+0x2dc>)
        ret = mbedtls_x509_crt_parse(tlsContext->cacert, (const char *)g_rootca_buf, ssl_option->rootca_len + 1);
 801e846:	3201      	adds	r2, #1
 801e848:	6920      	ldr	r0, [r4, #16]
        g_rootca_buf = FLASH_ROOTCA_ADDR;
 801e84a:	6019      	str	r1, [r3, #0]
        ret = mbedtls_x509_crt_parse(tlsContext->cacert, (const char *)g_rootca_buf, ssl_option->rootca_len + 1);
 801e84c:	f011 f99e 	bl	802fb8c <mbedtls_x509_crt_parse>
    	if(ret < 0) 
 801e850:	1e02      	subs	r2, r0, #0
    		PRT_SSL(" failed\r\n  !  mbedtls_x509_crt_parse returned -0x%x while parsing root cert\r\n", -ret);
 801e852:	4928      	ldr	r1, [pc, #160]	; (801e8f4 <wiz_tls_init+0x294>)
 801e854:	f1c2 0200 	rsb	r2, r2, #0
    	if(ret < 0) 
 801e858:	db29      	blt.n	801e8ae <wiz_tls_init+0x24e>
        PRT_SSL("ok! mbedtls_x509_crt_parse returned -0x%x while parsing root cert\r\n", -ret);
 801e85a:	4839      	ldr	r0, [pc, #228]	; (801e940 <wiz_tls_init+0x2e0>)
 801e85c:	f7f9 faf2 	bl	8017e44 <WIZ_SECURE_printf>
 801e860:	e753      	b.n	801e70a <wiz_tls_init+0xaa>
		PRT_SSL(" failed\r\n  ! mbedtls_ctr_drbg_seed returned -0x%x\r\n", -ret);
 801e862:	4242      	negs	r2, r0
 801e864:	4923      	ldr	r1, [pc, #140]	; (801e8f4 <wiz_tls_init+0x294>)
 801e866:	4837      	ldr	r0, [pc, #220]	; (801e944 <wiz_tls_init+0x2e4>)
 801e868:	f7f9 faec 	bl	8017e44 <WIZ_SECURE_printf>
		return -1;
 801e86c:	f04f 30ff 	mov.w	r0, #4294967295
}
 801e870:	b002      	add	sp, #8
 801e872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((ret = mbedtls_ssl_conf_own_cert(tlsContext->conf, tlsContext->clicert, tlsContext->pkey)) != 0) 
 801e876:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 801e87a:	68e0      	ldr	r0, [r4, #12]
 801e87c:	f00f fb2a 	bl	802ded4 <mbedtls_ssl_conf_own_cert>
    		PRT_SSL("failed! mbedtls_ssl_conf_own_cert returned %d\r\n", ret);
 801e880:	491c      	ldr	r1, [pc, #112]	; (801e8f4 <wiz_tls_init+0x294>)
        if((ret = mbedtls_ssl_conf_own_cert(tlsContext->conf, tlsContext->clicert, tlsContext->pkey)) != 0) 
 801e882:	4602      	mov	r2, r0
 801e884:	bb58      	cbnz	r0, 801e8de <wiz_tls_init+0x27e>
        PRT_SSL("ok! mbedtls_ssl_conf_own_cert returned %d\r\n", ret);
 801e886:	4830      	ldr	r0, [pc, #192]	; (801e948 <wiz_tls_init+0x2e8>)
 801e888:	f7f9 fadc 	bl	8017e44 <WIZ_SECURE_printf>
 801e88c:	e77a      	b.n	801e784 <wiz_tls_init+0x124>
    		PRT_SSL(" failed\r\n  !  mbedtls_x509_crt_parse returned -0x%x while parsing device cert\r\n", -ret);
 801e88e:	4242      	negs	r2, r0
 801e890:	4918      	ldr	r1, [pc, #96]	; (801e8f4 <wiz_tls_init+0x294>)
 801e892:	482e      	ldr	r0, [pc, #184]	; (801e94c <wiz_tls_init+0x2ec>)
 801e894:	f7f9 fad6 	bl	8017e44 <WIZ_SECURE_printf>
    		return -1;
 801e898:	f04f 30ff 	mov.w	r0, #4294967295
 801e89c:	e7c6      	b.n	801e82c <wiz_tls_init+0x1cc>
		PRT_SSL(" failed mbedtls_ssl_setup returned -0x%x\r\n", -ret);
 801e89e:	4242      	negs	r2, r0
 801e8a0:	4914      	ldr	r1, [pc, #80]	; (801e8f4 <wiz_tls_init+0x294>)
 801e8a2:	482b      	ldr	r0, [pc, #172]	; (801e950 <wiz_tls_init+0x2f0>)
 801e8a4:	f7f9 face 	bl	8017e44 <WIZ_SECURE_printf>
		return -1;
 801e8a8:	f04f 30ff 	mov.w	r0, #4294967295
 801e8ac:	e7be      	b.n	801e82c <wiz_tls_init+0x1cc>
    		PRT_SSL(" failed\r\n  !  mbedtls_x509_crt_parse returned -0x%x while parsing root cert\r\n", -ret);
 801e8ae:	4829      	ldr	r0, [pc, #164]	; (801e954 <wiz_tls_init+0x2f4>)
 801e8b0:	f7f9 fac8 	bl	8017e44 <WIZ_SECURE_printf>
    		return -1;
 801e8b4:	f04f 30ff 	mov.w	r0, #4294967295
 801e8b8:	e7b8      	b.n	801e82c <wiz_tls_init+0x1cc>
		PRT_SSL(" failed mbedtls_ssl_config_defaults returned %d\r\n", ret);
 801e8ba:	4602      	mov	r2, r0
 801e8bc:	490d      	ldr	r1, [pc, #52]	; (801e8f4 <wiz_tls_init+0x294>)
 801e8be:	4826      	ldr	r0, [pc, #152]	; (801e958 <wiz_tls_init+0x2f8>)
 801e8c0:	f7f9 fac0 	bl	8017e44 <WIZ_SECURE_printf>
		return -1;
 801e8c4:	f04f 30ff 	mov.w	r0, #4294967295
}
 801e8c8:	b002      	add	sp, #8
 801e8ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    		PRT_SSL(" failed\r\n  !  mbedtls_pk_parse_key returned -0x%x while parsing private key\r\n", -ret);
 801e8ce:	4242      	negs	r2, r0
 801e8d0:	4908      	ldr	r1, [pc, #32]	; (801e8f4 <wiz_tls_init+0x294>)
 801e8d2:	4822      	ldr	r0, [pc, #136]	; (801e95c <wiz_tls_init+0x2fc>)
 801e8d4:	f7f9 fab6 	bl	8017e44 <WIZ_SECURE_printf>
    		return -1;
 801e8d8:	f04f 30ff 	mov.w	r0, #4294967295
 801e8dc:	e7a6      	b.n	801e82c <wiz_tls_init+0x1cc>
    		PRT_SSL("failed! mbedtls_ssl_conf_own_cert returned %d\r\n", ret);
 801e8de:	4820      	ldr	r0, [pc, #128]	; (801e960 <wiz_tls_init+0x300>)
 801e8e0:	f7f9 fab0 	bl	8017e44 <WIZ_SECURE_printf>
    		return -1;
 801e8e4:	f04f 30ff 	mov.w	r0, #4294967295
 801e8e8:	e7a0      	b.n	801e82c <wiz_tls_init+0x1cc>
 801e8ea:	bf00      	nop
 801e8ec:	08024c9d 	.word	0x08024c9d
 801e8f0:	08033c1c 	.word	0x08033c1c
 801e8f4:	080342f8 	.word	0x080342f8
 801e8f8:	08033ea8 	.word	0x08033ea8
 801e8fc:	08033efc 	.word	0x08033efc
 801e900:	08033f74 	.word	0x08033f74
 801e904:	08033fa4 	.word	0x08033fa4
 801e908:	08024ae5 	.word	0x08024ae5
 801e90c:	0801e60d 	.word	0x0801e60d
 801e910:	0801e659 	.word	0x0801e659
 801e914:	0801e651 	.word	0x0801e651
 801e918:	0803406c 	.word	0x0803406c
 801e91c:	08072000 	.word	0x08072000
 801e920:	2001edbc 	.word	0x2001edbc
 801e924:	2001e5bc 	.word	0x2001e5bc
 801e928:	08033da8 	.word	0x08033da8
 801e92c:	08033e58 	.word	0x08033e58
 801e930:	08033ec0 	.word	0x08033ec0
 801e934:	08033c68 	.word	0x08033c68
 801e938:	08071000 	.word	0x08071000
 801e93c:	2001ddb8 	.word	0x2001ddb8
 801e940:	08033cfc 	.word	0x08033cfc
 801e944:	08033c28 	.word	0x08033c28
 801e948:	08033ffc 	.word	0x08033ffc
 801e94c:	08033d4c 	.word	0x08033d4c
 801e950:	08034034 	.word	0x08034034
 801e954:	08033ca0 	.word	0x08033ca0
 801e958:	08033f34 	.word	0x08033f34
 801e95c:	08033dfc 	.word	0x08033dfc
 801e960:	08033fc0 	.word	0x08033fc0

0801e964 <wiz_tls_deinit>:

/*Free the memory for ssl context*/
void wiz_tls_deinit(wiz_tls_context* tlsContext)
{
 801e964:	b510      	push	{r4, lr}
 801e966:	4604      	mov	r4, r0
	/*  free SSL context memory  */

    PRT_SSL("SSL Free\r\n");
 801e968:	4917      	ldr	r1, [pc, #92]	; (801e9c8 <wiz_tls_deinit+0x64>)
 801e96a:	4818      	ldr	r0, [pc, #96]	; (801e9cc <wiz_tls_deinit+0x68>)
 801e96c:	f7f9 fa6a 	bl	8017e44 <WIZ_SECURE_printf>
	mbedtls_ssl_free( tlsContext->ssl );
 801e970:	68a0      	ldr	r0, [r4, #8]
 801e972:	f00f fb49 	bl	802e008 <mbedtls_ssl_free>
	mbedtls_ssl_config_free( tlsContext->conf );
 801e976:	68e0      	ldr	r0, [r4, #12]
 801e978:	f00f fc08 	bl	802e18c <mbedtls_ssl_config_free>
	mbedtls_ctr_drbg_free( tlsContext->ctr_drbg );
 801e97c:	6860      	ldr	r0, [r4, #4]
 801e97e:	f005 ff9b 	bl	80248b8 <mbedtls_ctr_drbg_free>
#if defined (MBEDTLS_ENTROPY_C)
	mbedtls_entropy_free( tlsContext->entropy );
 801e982:	6820      	ldr	r0, [r4, #0]
 801e984:	f006 f97c 	bl	8024c80 <mbedtls_entropy_free>
#endif
	mbedtls_x509_crt_free( tlsContext->cacert );
 801e988:	6920      	ldr	r0, [r4, #16]
 801e98a:	f011 f9e9 	bl	802fd60 <mbedtls_x509_crt_free>
    mbedtls_x509_crt_free(tlsContext->clicert);
 801e98e:	6960      	ldr	r0, [r4, #20]
 801e990:	f011 f9e6 	bl	802fd60 <mbedtls_x509_crt_free>
    mbedtls_pk_free(tlsContext->pkey);
 801e994:	69a0      	ldr	r0, [r4, #24]
 801e996:	f008 fbf5 	bl	8027184 <mbedtls_pk_free>

#if defined (MBEDTLS_ENTROPY_C)
    free(tlsContext->entropy);
 801e99a:	6820      	ldr	r0, [r4, #0]
 801e99c:	f011 fa26 	bl	802fdec <free>
#endif
	free(tlsContext->ctr_drbg);
 801e9a0:	6860      	ldr	r0, [r4, #4]
 801e9a2:	f011 fa23 	bl	802fdec <free>
	free(tlsContext->ssl);
 801e9a6:	68a0      	ldr	r0, [r4, #8]
 801e9a8:	f011 fa20 	bl	802fdec <free>
	free(tlsContext->conf);
 801e9ac:	68e0      	ldr	r0, [r4, #12]
 801e9ae:	f011 fa1d 	bl	802fdec <free>
	free(tlsContext->cacert);
 801e9b2:	6920      	ldr	r0, [r4, #16]
 801e9b4:	f011 fa1a 	bl	802fdec <free>
    free(tlsContext->clicert);
 801e9b8:	6960      	ldr	r0, [r4, #20]
 801e9ba:	f011 fa17 	bl	802fdec <free>
    free(tlsContext->pkey);
 801e9be:	69a0      	ldr	r0, [r4, #24]
}
 801e9c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    free(tlsContext->pkey);
 801e9c4:	f011 ba12 	b.w	802fdec <free>
 801e9c8:	08034308 	.word	0x08034308
 801e9cc:	08034084 	.word	0x08034084

0801e9d0 <wiz_tls_socket>:

int wiz_tls_socket(wiz_tls_context* tlsContext, unsigned int port)
{
 801e9d0:	b508      	push	{r3, lr}
    /*socket open*/
    return socket((uint8_t)(tlsContext->ssl->p_bio), Sn_MR_TCP, (uint16_t)port, (SF_TCP_NODELAY));
 801e9d2:	6883      	ldr	r3, [r0, #8]
 801e9d4:	b28a      	uxth	r2, r1
 801e9d6:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 801e9da:	2101      	movs	r1, #1
 801e9dc:	2320      	movs	r3, #32
 801e9de:	f7fc fb3f 	bl	801b060 <socket>
}
 801e9e2:	bd08      	pop	{r3, pc}

0801e9e4 <wiz_tls_connect_timeout>:

    return( 0 );
}

int wiz_tls_connect_timeout(wiz_tls_context* tlsContext, char * addr, unsigned int port, uint32_t timeout)
{
 801e9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9e8:	4606      	mov	r6, r0
 801e9ea:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 801e9ee:	4614      	mov	r4, r2
 801e9f0:	460d      	mov	r5, r1
 801e9f2:	461f      	mov	r7, r3
 801e9f4:	9000      	str	r0, [sp, #0]
    int ret;
    uint32_t start_ms = millis(), flags;
 801e9f6:	f7f8 ff9b 	bl	8017930 <millis>
    uint8_t sock = (uint8_t)(tlsContext->ssl->p_bio);
 801e9fa:	68b3      	ldr	r3, [r6, #8]
    uint32_t start_ms = millis(), flags;
 801e9fc:	4606      	mov	r6, r0
    uint8_t sock = (uint8_t)(tlsContext->ssl->p_bio);
 801e9fe:	f893 a024 	ldrb.w	sl, [r3, #36]	; 0x24
    struct __ssl_option *ssl_option = (struct __ssl_option *)&(get_DevConfig_pointer()->ssl_option);
 801ea02:	f7f5 fb17 	bl	8014034 <get_DevConfig_pointer>

    /*Connect to the target*/
    do {
        ret = connect(sock, (uint8_t *)addr, (uint16_t)port);
        PRT_SSL("connect ret = %d\r\n", ret);
 801ea06:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 801eaf4 <wiz_tls_connect_timeout+0x110>
 801ea0a:	f8df 810c 	ldr.w	r8, [pc, #268]	; 801eb18 <wiz_tls_connect_timeout+0x134>
    struct __ssl_option *ssl_option = (struct __ssl_option *)&(get_DevConfig_pointer()->ssl_option);
 801ea0e:	9001      	str	r0, [sp, #4]
 801ea10:	b2a4      	uxth	r4, r4
 801ea12:	e007      	b.n	801ea24 <wiz_tls_connect_timeout+0x40>
        if((ret == SOCK_OK) || (ret == SOCKERR_TIMEOUT)) break;
 801ea14:	f11b 0f0d 	cmn.w	fp, #13
 801ea18:	d027      	beq.n	801ea6a <wiz_tls_connect_timeout+0x86>
    } while((millis() - start_ms) < timeout);
 801ea1a:	f7f8 ff89 	bl	8017930 <millis>
 801ea1e:	1b80      	subs	r0, r0, r6
 801ea20:	42b8      	cmp	r0, r7
 801ea22:	d227      	bcs.n	801ea74 <wiz_tls_connect_timeout+0x90>
        ret = connect(sock, (uint8_t *)addr, (uint16_t)port);
 801ea24:	4622      	mov	r2, r4
 801ea26:	4629      	mov	r1, r5
 801ea28:	4650      	mov	r0, sl
 801ea2a:	f7fc fc8d 	bl	801b348 <connect>
 801ea2e:	4683      	mov	fp, r0
        PRT_SSL("connect ret = %d\r\n", ret);
 801ea30:	4602      	mov	r2, r0
 801ea32:	4649      	mov	r1, r9
 801ea34:	4640      	mov	r0, r8
 801ea36:	f7f9 fa05 	bl	8017e44 <WIZ_SECURE_printf>
        if((ret == SOCK_OK) || (ret == SOCKERR_TIMEOUT)) break;
 801ea3a:	f1bb 0f01 	cmp.w	fp, #1
 801ea3e:	d1e9      	bne.n	801ea14 <wiz_tls_connect_timeout+0x30>

    if(ret == SOCK_BUSY) return -1;
    if(ret != SOCK_OK) return ret;

    PRT_SSL(" Performing the SSL/TLS handshake...\r\n");
 801ea40:	492c      	ldr	r1, [pc, #176]	; (801eaf4 <wiz_tls_connect_timeout+0x110>)
 801ea42:	482d      	ldr	r0, [pc, #180]	; (801eaf8 <wiz_tls_connect_timeout+0x114>)
 801ea44:	f7f9 f9fe 	bl	8017e44 <WIZ_SECURE_printf>

    while( ( ret = mbedtls_ssl_handshake( tlsContext->ssl ) ) != 0 )
 801ea48:	9c00      	ldr	r4, [sp, #0]
 801ea4a:	68a0      	ldr	r0, [r4, #8]
 801ea4c:	f00f fabc 	bl	802dfc8 <mbedtls_ssl_handshake>
    {
        if( ret != MBEDTLS_ERR_SSL_WANT_READ && ret != MBEDTLS_ERR_SSL_WANT_WRITE )
 801ea50:	f020 0380 	bic.w	r3, r0, #128	; 0x80
    while( ( ret = mbedtls_ssl_handshake( tlsContext->ssl ) ) != 0 )
 801ea54:	b1c0      	cbz	r0, 801ea88 <wiz_tls_connect_timeout+0xa4>
        if( ret != MBEDTLS_ERR_SSL_WANT_READ && ret != MBEDTLS_ERR_SSL_WANT_WRITE )
 801ea56:	f513 4fd2 	cmn.w	r3, #26880	; 0x6900
 801ea5a:	d0f6      	beq.n	801ea4a <wiz_tls_connect_timeout+0x66>
        {
            //mbedtls_strerror(ret, (char *) tempBuf, DEBUG_BUFFER_SIZE );
            //PRT_SSL( " failed\n\r  ! mbedtls_ssl_handshake returned %d: %s\n\r", ret, tempBuf );
        	PRT_SSL( " failed\n\r  ! mbedtls_ssl_handshake returned -0x%x\n\r", -ret);
 801ea5c:	4242      	negs	r2, r0
 801ea5e:	4925      	ldr	r1, [pc, #148]	; (801eaf4 <wiz_tls_connect_timeout+0x110>)
 801ea60:	4826      	ldr	r0, [pc, #152]	; (801eafc <wiz_tls_connect_timeout+0x118>)
 801ea62:	f7f9 f9ef 	bl	8017e44 <WIZ_SECURE_printf>
            return( -1 );
 801ea66:	f04f 3bff 	mov.w	fp, #4294967295
    	}
	}
    PRT_SSL( " ok\n\r    [ Ciphersuite is %s ]\n\r",
            mbedtls_ssl_get_ciphersuite( tlsContext->ssl ) );
    return( 0 );
}
 801ea6a:	4658      	mov	r0, fp
 801ea6c:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
 801ea70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(ret == SOCK_BUSY) return -1;
 801ea74:	f1bb 0f00 	cmp.w	fp, #0
 801ea78:	bf08      	it	eq
 801ea7a:	f04f 3bff 	moveq.w	fp, #4294967295
}
 801ea7e:	4658      	mov	r0, fp
 801ea80:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
 801ea84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ssl_option->root_ca_option == MBEDTLS_SSL_VERIFY_REQUIRED)
 801ea88:	9b01      	ldr	r3, [sp, #4]
 801ea8a:	4683      	mov	fp, r0
 801ea8c:	f893 210e 	ldrb.w	r2, [r3, #270]	; 0x10e
 801ea90:	2a02      	cmp	r2, #2
 801ea92:	d00d      	beq.n	801eab0 <wiz_tls_connect_timeout+0xcc>
    PRT_SSL( " ok\n\r    [ Ciphersuite is %s ]\n\r",
 801ea94:	9b00      	ldr	r3, [sp, #0]
 801ea96:	6898      	ldr	r0, [r3, #8]
 801ea98:	f00f fa8a 	bl	802dfb0 <mbedtls_ssl_get_ciphersuite>
 801ea9c:	4915      	ldr	r1, [pc, #84]	; (801eaf4 <wiz_tls_connect_timeout+0x110>)
 801ea9e:	4602      	mov	r2, r0
 801eaa0:	4817      	ldr	r0, [pc, #92]	; (801eb00 <wiz_tls_connect_timeout+0x11c>)
 801eaa2:	f7f9 f9cf 	bl	8017e44 <WIZ_SECURE_printf>
}
 801eaa6:	4658      	mov	r0, fp
 801eaa8:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
 801eaac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    	PRT_SSL("  . Verifying peer X.509 certificate...\r\n");
 801eab0:	4910      	ldr	r1, [pc, #64]	; (801eaf4 <wiz_tls_connect_timeout+0x110>)
 801eab2:	4814      	ldr	r0, [pc, #80]	; (801eb04 <wiz_tls_connect_timeout+0x120>)
 801eab4:	f7f9 f9c6 	bl	8017e44 <WIZ_SECURE_printf>
    	if((flags = mbedtls_ssl_get_verify_result(tlsContext->ssl)) != 0)
 801eab8:	9b00      	ldr	r3, [sp, #0]
 801eaba:	6898      	ldr	r0, [r3, #8]
 801eabc:	f00f fa6e 	bl	802df9c <mbedtls_ssl_get_verify_result>
    		PRT_SSL("failed\r\n");
 801eac0:	490c      	ldr	r1, [pc, #48]	; (801eaf4 <wiz_tls_connect_timeout+0x110>)
    	if((flags = mbedtls_ssl_get_verify_result(tlsContext->ssl)) != 0)
 801eac2:	4604      	mov	r4, r0
 801eac4:	b918      	cbnz	r0, 801eace <wiz_tls_connect_timeout+0xea>
    		PRT_SSL("ok\r\n");
 801eac6:	4810      	ldr	r0, [pc, #64]	; (801eb08 <wiz_tls_connect_timeout+0x124>)
 801eac8:	f7f9 f9bc 	bl	8017e44 <WIZ_SECURE_printf>
 801eacc:	e7e2      	b.n	801ea94 <wiz_tls_connect_timeout+0xb0>
    		PRT_SSL("failed\r\n");
 801eace:	480f      	ldr	r0, [pc, #60]	; (801eb0c <wiz_tls_connect_timeout+0x128>)
 801ead0:	f7f9 f9b8 	bl	8017e44 <WIZ_SECURE_printf>
    		mbedtls_x509_crt_verify_info(vrfy_buf, sizeof(vrfy_buf), "	! ", flags);
 801ead4:	4623      	mov	r3, r4
 801ead6:	f44f 7100 	mov.w	r1, #512	; 0x200
 801eada:	4a0d      	ldr	r2, [pc, #52]	; (801eb10 <wiz_tls_connect_timeout+0x12c>)
 801eadc:	a802      	add	r0, sp, #8
 801eade:	f011 f8f3 	bl	802fcc8 <mbedtls_x509_crt_verify_info>
    		PRT_SSL("%s\r\n", vrfy_buf);
 801eae2:	4904      	ldr	r1, [pc, #16]	; (801eaf4 <wiz_tls_connect_timeout+0x110>)
 801eae4:	480b      	ldr	r0, [pc, #44]	; (801eb14 <wiz_tls_connect_timeout+0x130>)
 801eae6:	aa02      	add	r2, sp, #8
 801eae8:	f7f9 f9ac 	bl	8017e44 <WIZ_SECURE_printf>
    		return -1;
 801eaec:	f04f 3bff 	mov.w	fp, #4294967295
 801eaf0:	e7bb      	b.n	801ea6a <wiz_tls_connect_timeout+0x86>
 801eaf2:	bf00      	nop
 801eaf4:	08034318 	.word	0x08034318
 801eaf8:	08034198 	.word	0x08034198
 801eafc:	080340bc 	.word	0x080340bc
 801eb00:	0803416c 	.word	0x0803416c
 801eb04:	080340fc 	.word	0x080340fc
 801eb08:	0803415c 	.word	0x0803415c
 801eb0c:	08034134 	.word	0x08034134
 801eb10:	08034148 	.word	0x08034148
 801eb14:	0803414c 	.word	0x0803414c
 801eb18:	0803409c 	.word	0x0803409c

0801eb1c <wiz_tls_socket_connect_timeout>:

    return( 0 );
}

int wiz_tls_socket_connect_timeout(wiz_tls_context* tlsContext, char * addr, unsigned int port, unsigned int local_port, uint32_t timeout)
{
 801eb1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eb20:	4605      	mov	r5, r0
 801eb22:	461c      	mov	r4, r3
 801eb24:	4688      	mov	r8, r1
 801eb26:	4691      	mov	r9, r2
 801eb28:	9e08      	ldr	r6, [sp, #32]
    int ret;
    uint32_t start_ms = millis();
 801eb2a:	f7f8 ff01 	bl	8017930 <millis>

    uint8_t sock = (uint8_t)(tlsContext->ssl->p_bio);
 801eb2e:	68ab      	ldr	r3, [r5, #8]

    PRT_SSL("tlsContext = %d\r\n", tlsContext);
 801eb30:	462a      	mov	r2, r5
    uint8_t sock = (uint8_t)(tlsContext->ssl->p_bio);
 801eb32:	f893 a024 	ldrb.w	sl, [r3, #36]	; 0x24
    PRT_SSL("tlsContext = %d\r\n", tlsContext);
 801eb36:	4925      	ldr	r1, [pc, #148]	; (801ebcc <wiz_tls_socket_connect_timeout+0xb0>)
    uint32_t start_ms = millis();
 801eb38:	4607      	mov	r7, r0
    PRT_SSL("tlsContext = %d\r\n", tlsContext);
 801eb3a:	4825      	ldr	r0, [pc, #148]	; (801ebd0 <wiz_tls_socket_connect_timeout+0xb4>)
 801eb3c:	f7f9 f982 	bl	8017e44 <WIZ_SECURE_printf>
    /*socket open*/
    ret = socket(sock, Sn_MR_TCP, local_port, 0x00);
 801eb40:	b2a2      	uxth	r2, r4
 801eb42:	4650      	mov	r0, sl
 801eb44:	2300      	movs	r3, #0
 801eb46:	2101      	movs	r1, #1
 801eb48:	f7fc fa8a 	bl	801b060 <socket>
    if(ret != sock)
 801eb4c:	4550      	cmp	r0, sl
    ret = socket(sock, Sn_MR_TCP, local_port, 0x00);
 801eb4e:	4604      	mov	r4, r0
    if(ret != sock)
 801eb50:	d002      	beq.n	801eb58 <wiz_tls_socket_connect_timeout+0x3c>
            mbedtls_ssl_get_ciphersuite( tlsContext->ssl ) );
#endif
    PRT_SSL( " ok\n\r    [ Ciphersuite is %s ]\n\r",
        mbedtls_ssl_get_ciphersuite( tlsContext->ssl ) );
    return( 0 );
}
 801eb52:	4620      	mov	r0, r4
 801eb54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = connect(sock, addr, port);
 801eb58:	4641      	mov	r1, r8
 801eb5a:	fa1f f289 	uxth.w	r2, r9
 801eb5e:	f7fc fbf3 	bl	801b348 <connect>
    if(ret != SOCK_OK)
 801eb62:	2801      	cmp	r0, #1
    ret = connect(sock, addr, port);
 801eb64:	4604      	mov	r4, r0
    if(ret != SOCK_OK)
 801eb66:	d1f4      	bne.n	801eb52 <wiz_tls_socket_connect_timeout+0x36>
    PRT_SSL("connect ret = %d\r\n", ret);
 801eb68:	4602      	mov	r2, r0
 801eb6a:	4918      	ldr	r1, [pc, #96]	; (801ebcc <wiz_tls_socket_connect_timeout+0xb0>)
 801eb6c:	4819      	ldr	r0, [pc, #100]	; (801ebd4 <wiz_tls_socket_connect_timeout+0xb8>)
 801eb6e:	f7f9 f969 	bl	8017e44 <WIZ_SECURE_printf>
    PRT_SSL(" Performing the SSL/TLS handshake...\r\n");
 801eb72:	4916      	ldr	r1, [pc, #88]	; (801ebcc <wiz_tls_socket_connect_timeout+0xb0>)
 801eb74:	4818      	ldr	r0, [pc, #96]	; (801ebd8 <wiz_tls_socket_connect_timeout+0xbc>)
 801eb76:	f7f9 f965 	bl	8017e44 <WIZ_SECURE_printf>
    while( ( ret = mbedtls_ssl_handshake( tlsContext->ssl ) ) != 0 )
 801eb7a:	68a8      	ldr	r0, [r5, #8]
 801eb7c:	f00f fa24 	bl	802dfc8 <mbedtls_ssl_handshake>
 801eb80:	4604      	mov	r4, r0
        if( ret != MBEDTLS_ERR_SSL_WANT_READ && ret != MBEDTLS_ERR_SSL_WANT_WRITE )
 801eb82:	f020 0380 	bic.w	r3, r0, #128	; 0x80
    while( ( ret = mbedtls_ssl_handshake( tlsContext->ssl ) ) != 0 )
 801eb86:	b1b8      	cbz	r0, 801ebb8 <wiz_tls_socket_connect_timeout+0x9c>
        if( ret != MBEDTLS_ERR_SSL_WANT_READ && ret != MBEDTLS_ERR_SSL_WANT_WRITE )
 801eb88:	f513 4fd2 	cmn.w	r3, #26880	; 0x6900
 801eb8c:	d007      	beq.n	801eb9e <wiz_tls_socket_connect_timeout+0x82>
            PRT_SSL( " failed\r\n  ! mbedtls_ssl_handshake returned -0x%x\n\r", -ret);
 801eb8e:	4262      	negs	r2, r4
 801eb90:	490e      	ldr	r1, [pc, #56]	; (801ebcc <wiz_tls_socket_connect_timeout+0xb0>)
 801eb92:	4812      	ldr	r0, [pc, #72]	; (801ebdc <wiz_tls_socket_connect_timeout+0xc0>)
 801eb94:	f7f9 f956 	bl	8017e44 <WIZ_SECURE_printf>
            return( -1 );
 801eb98:	f04f 34ff 	mov.w	r4, #4294967295
 801eb9c:	e7d9      	b.n	801eb52 <wiz_tls_socket_connect_timeout+0x36>
        if((millis() - start_ms) > timeout) // timeout
 801eb9e:	f7f8 fec7 	bl	8017930 <millis>
 801eba2:	1bc3      	subs	r3, r0, r7
 801eba4:	42b3      	cmp	r3, r6
 801eba6:	d9e8      	bls.n	801eb7a <wiz_tls_socket_connect_timeout+0x5e>
            PRT_SSL( " timeout\r\n  ! mbedtls_ssl_handshake returned -0x%x\n\r", ret);
 801eba8:	4622      	mov	r2, r4
 801ebaa:	4908      	ldr	r1, [pc, #32]	; (801ebcc <wiz_tls_socket_connect_timeout+0xb0>)
 801ebac:	480c      	ldr	r0, [pc, #48]	; (801ebe0 <wiz_tls_socket_connect_timeout+0xc4>)
 801ebae:	f7f9 f949 	bl	8017e44 <WIZ_SECURE_printf>
            return( -1 );
 801ebb2:	f04f 34ff 	mov.w	r4, #4294967295
 801ebb6:	e7cc      	b.n	801eb52 <wiz_tls_socket_connect_timeout+0x36>
    PRT_SSL( " ok\n\r    [ Ciphersuite is %s ]\n\r",
 801ebb8:	68a8      	ldr	r0, [r5, #8]
 801ebba:	f00f f9f9 	bl	802dfb0 <mbedtls_ssl_get_ciphersuite>
 801ebbe:	4903      	ldr	r1, [pc, #12]	; (801ebcc <wiz_tls_socket_connect_timeout+0xb0>)
 801ebc0:	4602      	mov	r2, r0
 801ebc2:	4808      	ldr	r0, [pc, #32]	; (801ebe4 <wiz_tls_socket_connect_timeout+0xc8>)
 801ebc4:	f7f9 f93e 	bl	8017e44 <WIZ_SECURE_printf>
    return( 0 );
 801ebc8:	e7c3      	b.n	801eb52 <wiz_tls_socket_connect_timeout+0x36>
 801ebca:	bf00      	nop
 801ebcc:	08034330 	.word	0x08034330
 801ebd0:	080341cc 	.word	0x080341cc
 801ebd4:	0803409c 	.word	0x0803409c
 801ebd8:	08034198 	.word	0x08034198
 801ebdc:	080341ec 	.word	0x080341ec
 801ebe0:	0803422c 	.word	0x0803422c
 801ebe4:	0803416c 	.word	0x0803416c

0801ebe8 <wiz_tls_read>:

unsigned int wiz_tls_read(wiz_tls_context* tlsContext, unsigned char* readbuf, unsigned int len)
{
	return mbedtls_ssl_read( tlsContext->ssl, readbuf, len );
 801ebe8:	6880      	ldr	r0, [r0, #8]
 801ebea:	f00e b8f7 	b.w	802cddc <mbedtls_ssl_read>
 801ebee:	bf00      	nop

0801ebf0 <wiz_tls_write>:
}

unsigned int wiz_tls_write(wiz_tls_context* tlsContext, unsigned char* writebuf, unsigned int len)
{
	return mbedtls_ssl_write( tlsContext->ssl, writebuf, len );
 801ebf0:	6880      	ldr	r0, [r0, #8]
 801ebf2:	f00e b9a3 	b.w	802cf3c <mbedtls_ssl_write>
 801ebf6:	bf00      	nop

0801ebf8 <wiz_tls_disconnect>:
}

int wiz_tls_disconnect(wiz_tls_context* tlsContext, uint32_t timeout)
{
 801ebf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret = 0;
    uint8_t sock = (uint8_t)(tlsContext->ssl->p_bio);
 801ebfa:	6883      	ldr	r3, [r0, #8]
{
 801ebfc:	460e      	mov	r6, r1
    uint8_t sock = (uint8_t)(tlsContext->ssl->p_bio);
 801ebfe:	f893 7024 	ldrb.w	r7, [r3, #36]	; 0x24
    uint32_t tickStart = millis();
 801ec02:	f7f8 fe95 	bl	8017930 <millis>
 801ec06:	4605      	mov	r5, r0
 801ec08:	e007      	b.n	801ec1a <wiz_tls_disconnect+0x22>

    do {
        ret = disconnect(sock);
        if((ret == SOCK_OK) || (ret == SOCKERR_TIMEOUT)) break;
 801ec0a:	f110 0f0d 	cmn.w	r0, #13
 801ec0e:	d00b      	beq.n	801ec28 <wiz_tls_disconnect+0x30>
    } while ((millis() - tickStart) < timeout);
 801ec10:	f7f8 fe8e 	bl	8017930 <millis>
 801ec14:	1b40      	subs	r0, r0, r5
 801ec16:	42b0      	cmp	r0, r6
 801ec18:	d206      	bcs.n	801ec28 <wiz_tls_disconnect+0x30>
        ret = disconnect(sock);
 801ec1a:	4638      	mov	r0, r7
 801ec1c:	f7fc fc0c 	bl	801b438 <disconnect>
        if((ret == SOCK_OK) || (ret == SOCKERR_TIMEOUT)) break;
 801ec20:	2801      	cmp	r0, #1
        ret = disconnect(sock);
 801ec22:	4604      	mov	r4, r0
        if((ret == SOCK_OK) || (ret == SOCKERR_TIMEOUT)) break;
 801ec24:	d1f1      	bne.n	801ec0a <wiz_tls_disconnect+0x12>

    if(ret == SOCK_OK)
        ret = sock; // socket number
 801ec26:	463c      	mov	r4, r7

    return ret;
}
 801ec28:	4620      	mov	r0, r4
 801ec2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ec2c <wiz_tls_close_notify>:
}


/* ssl Close notify */
unsigned int wiz_tls_close_notify(wiz_tls_context* tlsContext)
{
 801ec2c:	b510      	push	{r4, lr}
 801ec2e:	4604      	mov	r4, r0
	uint32_t rc;
	do rc = mbedtls_ssl_close_notify( tlsContext->ssl );
 801ec30:	68a0      	ldr	r0, [r4, #8]
 801ec32:	f00e f9bb 	bl	802cfac <mbedtls_ssl_close_notify>
	while( rc == MBEDTLS_ERR_SSL_WANT_WRITE );
 801ec36:	f510 4fd1 	cmn.w	r0, #26752	; 0x6880
 801ec3a:	d0f9      	beq.n	801ec30 <wiz_tls_close_notify+0x4>
	//SSLDeinit(tlsContext);
	return rc;
}
 801ec3c:	bd10      	pop	{r4, pc}
 801ec3e:	bf00      	nop

0801ec40 <wiz_tls_session_reset>:


/* ssl session reset */
int wiz_tls_session_reset(wiz_tls_context* tlsContext)
{
    return mbedtls_ssl_session_reset( tlsContext->ssl );
 801ec40:	6880      	ldr	r0, [r0, #8]
 801ec42:	f00f b8d5 	b.w	802ddf0 <mbedtls_ssl_session_reset>
 801ec46:	bf00      	nop

0801ec48 <check_ca>:
}


int check_ca(uint8_t *ca_data, uint32_t ca_len)
{
 801ec48:	b530      	push	{r4, r5, lr}
 801ec4a:	460c      	mov	r4, r1
 801ec4c:	4605      	mov	r5, r0
 801ec4e:	b0d7      	sub	sp, #348	; 0x15c
    int ret;

    mbedtls_x509_crt ca_cert;
    mbedtls_x509_crt_init(&ca_cert);
 801ec50:	a801      	add	r0, sp, #4
 801ec52:	f011 f87f 	bl	802fd54 <mbedtls_x509_crt_init>


    PRT_SSL("ca_len = %d\r\n", ca_len);
 801ec56:	4622      	mov	r2, r4
 801ec58:	490b      	ldr	r1, [pc, #44]	; (801ec88 <check_ca+0x40>)
 801ec5a:	480c      	ldr	r0, [pc, #48]	; (801ec8c <check_ca+0x44>)
 801ec5c:	f7f9 f8f2 	bl	8017e44 <WIZ_SECURE_printf>
    ret = mbedtls_x509_crt_parse(&ca_cert, (const char *)ca_data, ca_len + 1);
 801ec60:	4629      	mov	r1, r5
 801ec62:	1c62      	adds	r2, r4, #1
 801ec64:	a801      	add	r0, sp, #4
 801ec66:	f010 ff91 	bl	802fb8c <mbedtls_x509_crt_parse>
	if(ret < 0) 
 801ec6a:	1e04      	subs	r4, r0, #0
    {
		PRT_SSL(" failed\r\n  !  mbedtls_x509_crt_parse returned -0x%x while parsing root cert\r\n", -ret);
 801ec6c:	bfb4      	ite	lt
 801ec6e:	4808      	ldrlt	r0, [pc, #32]	; (801ec90 <check_ca+0x48>)
    }
    else
        PRT_SSL("ok! mbedtls_x509_crt_parse returned -0x%x while parsing root cert\r\n", -ret);
 801ec70:	4808      	ldrge	r0, [pc, #32]	; (801ec94 <check_ca+0x4c>)
		PRT_SSL(" failed\r\n  !  mbedtls_x509_crt_parse returned -0x%x while parsing root cert\r\n", -ret);
 801ec72:	4905      	ldr	r1, [pc, #20]	; (801ec88 <check_ca+0x40>)
 801ec74:	4262      	negs	r2, r4
        PRT_SSL("ok! mbedtls_x509_crt_parse returned -0x%x while parsing root cert\r\n", -ret);
 801ec76:	f7f9 f8e5 	bl	8017e44 <WIZ_SECURE_printf>

    mbedtls_x509_crt_free(&ca_cert);
 801ec7a:	a801      	add	r0, sp, #4
 801ec7c:	f011 f870 	bl	802fd60 <mbedtls_x509_crt_free>
    return ret;
}
 801ec80:	4620      	mov	r0, r4
 801ec82:	b057      	add	sp, #348	; 0x15c
 801ec84:	bd30      	pop	{r4, r5, pc}
 801ec86:	bf00      	nop
 801ec88:	08034350 	.word	0x08034350
 801ec8c:	0803426c 	.word	0x0803426c
 801ec90:	08033ca0 	.word	0x08033ca0
 801ec94:	08033cfc 	.word	0x08033cfc

0801ec98 <check_pkey>:

int check_pkey(uint8_t *pkey_data, uint32_t pkey_len)
{
 801ec98:	b530      	push	{r4, r5, lr}
 801ec9a:	460c      	mov	r4, r1
 801ec9c:	b085      	sub	sp, #20
 801ec9e:	4605      	mov	r5, r0
    int ret;

    mbedtls_pk_context pk_cert;
    mbedtls_pk_init(&pk_cert);
 801eca0:	a802      	add	r0, sp, #8
 801eca2:	f008 fa6b 	bl	802717c <mbedtls_pk_init>

    PRT_SSL("pkey_len = %d\r\n", pkey_len);
 801eca6:	4622      	mov	r2, r4
 801eca8:	4911      	ldr	r1, [pc, #68]	; (801ecf0 <check_pkey+0x58>)
 801ecaa:	4812      	ldr	r0, [pc, #72]	; (801ecf4 <check_pkey+0x5c>)
 801ecac:	f7f9 f8ca 	bl	8017e44 <WIZ_SECURE_printf>
    
    ret = mbedtls_pk_parse_key(&pk_cert, (const char *)pkey_data, pkey_len + 1, NULL, 0);
 801ecb0:	2300      	movs	r3, #0
 801ecb2:	1c62      	adds	r2, r4, #1
 801ecb4:	4629      	mov	r1, r5
 801ecb6:	a802      	add	r0, sp, #8
 801ecb8:	9300      	str	r3, [sp, #0]
 801ecba:	f008 fe97 	bl	80279ec <mbedtls_pk_parse_key>
    if(ret != 0) {
 801ecbe:	4604      	mov	r4, r0
 801ecc0:	b150      	cbz	r0, 801ecd8 <check_pkey+0x40>
        PRT_SSL(" failed\r\n  !  mbedtls_pk_parse_key returned -0x%x while parsing private key\r\n", -ret);
 801ecc2:	4242      	negs	r2, r0
 801ecc4:	490a      	ldr	r1, [pc, #40]	; (801ecf0 <check_pkey+0x58>)
 801ecc6:	480c      	ldr	r0, [pc, #48]	; (801ecf8 <check_pkey+0x60>)
 801ecc8:	f7f9 f8bc 	bl	8017e44 <WIZ_SECURE_printf>
    else
    {
        PRT_SSL(" ok !  mbedtls_pk_parse_key returned -0x%x while parsing private key\r\n", -ret);
    }

    mbedtls_pk_free(&pk_cert);
 801eccc:	a802      	add	r0, sp, #8
 801ecce:	f008 fa59 	bl	8027184 <mbedtls_pk_free>
    return ret;
}
 801ecd2:	4620      	mov	r0, r4
 801ecd4:	b005      	add	sp, #20
 801ecd6:	bd30      	pop	{r4, r5, pc}
        PRT_SSL(" ok !  mbedtls_pk_parse_key returned -0x%x while parsing private key\r\n", -ret);
 801ecd8:	4602      	mov	r2, r0
 801ecda:	4905      	ldr	r1, [pc, #20]	; (801ecf0 <check_pkey+0x58>)
 801ecdc:	4807      	ldr	r0, [pc, #28]	; (801ecfc <check_pkey+0x64>)
 801ecde:	f7f9 f8b1 	bl	8017e44 <WIZ_SECURE_printf>
    mbedtls_pk_free(&pk_cert);
 801ece2:	a802      	add	r0, sp, #8
 801ece4:	f008 fa4e 	bl	8027184 <mbedtls_pk_free>
}
 801ece8:	4620      	mov	r0, r4
 801ecea:	b005      	add	sp, #20
 801ecec:	bd30      	pop	{r4, r5, pc}
 801ecee:	bf00      	nop
 801ecf0:	0803435c 	.word	0x0803435c
 801ecf4:	08034288 	.word	0x08034288
 801ecf8:	08033dfc 	.word	0x08033dfc
 801ecfc:	080342a4 	.word	0x080342a4

0801ed00 <mbedtls_hardware_poll>:
int mbedtls_hardware_poll( void *Data, unsigned char *Output, size_t Len, size_t *oLen )
{
  uint32_t index;
  uint32_t randomValue;

  for (index = 0; index < Len/4; index++)
 801ed00:	0892      	lsrs	r2, r2, #2
 801ed02:	d020      	beq.n	801ed46 <mbedtls_hardware_poll+0x46>
{
 801ed04:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ed06:	461e      	mov	r6, r3
 801ed08:	460c      	mov	r4, r1
  {
    if (HAL_RNG_GenerateRandomNumber(&hrng, &randomValue) == HAL_OK)
 801ed0a:	4f10      	ldr	r7, [pc, #64]	; (801ed4c <mbedtls_hardware_poll+0x4c>)
{
 801ed0c:	b083      	sub	sp, #12
 801ed0e:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 801ed12:	e00a      	b.n	801ed2a <mbedtls_hardware_poll+0x2a>
    {
      *oLen += 4;
      memset(&(Output[index * 4]), (int)randomValue, 4);
 801ed14:	2204      	movs	r2, #4
      *oLen += 4;
 801ed16:	6831      	ldr	r1, [r6, #0]
      memset(&(Output[index * 4]), (int)randomValue, 4);
 801ed18:	4620      	mov	r0, r4
      *oLen += 4;
 801ed1a:	4411      	add	r1, r2
 801ed1c:	6031      	str	r1, [r6, #0]
      memset(&(Output[index * 4]), (int)randomValue, 4);
 801ed1e:	3404      	adds	r4, #4
 801ed20:	9901      	ldr	r1, [sp, #4]
 801ed22:	f011 f8a0 	bl	802fe66 <memset>
  for (index = 0; index < Len/4; index++)
 801ed26:	42ac      	cmp	r4, r5
 801ed28:	d00a      	beq.n	801ed40 <mbedtls_hardware_poll+0x40>
    if (HAL_RNG_GenerateRandomNumber(&hrng, &randomValue) == HAL_OK)
 801ed2a:	4638      	mov	r0, r7
 801ed2c:	a901      	add	r1, sp, #4
 801ed2e:	f7f3 f9f1 	bl	8012114 <HAL_RNG_GenerateRandomNumber>
 801ed32:	2800      	cmp	r0, #0
 801ed34:	d0ee      	beq.n	801ed14 <mbedtls_hardware_poll+0x14>
 801ed36:	3404      	adds	r4, #4
    }
    else
    {
      Error_Handler();
 801ed38:	f7f1 fde6 	bl	8010908 <Error_Handler>
  for (index = 0; index < Len/4; index++)
 801ed3c:	42ac      	cmp	r4, r5
 801ed3e:	d1f4      	bne.n	801ed2a <mbedtls_hardware_poll+0x2a>
    }
  }

  return 0;
}
 801ed40:	2000      	movs	r0, #0
 801ed42:	b003      	add	sp, #12
 801ed44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ed46:	2000      	movs	r0, #0
 801ed48:	4770      	bx	lr
 801ed4a:	bf00      	nop
 801ed4c:	2001bcf0 	.word	0x2001bcf0

0801ed50 <aes_gen_tables>:
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 801ed50:	2203      	movs	r2, #3
{
 801ed52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        log[x] = i;
 801ed56:	2000      	movs	r0, #0
        pow[i] = x;
 801ed58:	2401      	movs	r4, #1
        x = ( x ^ XTIME( x ) ) & 0xFF;
 801ed5a:	4613      	mov	r3, r2
{
 801ed5c:	f6ad 0d1c 	subw	sp, sp, #2076	; 0x81c
 801ed60:	a906      	add	r1, sp, #24
        pow[i] = x;
 801ed62:	9406      	str	r4, [sp, #24]
        log[x] = i;
 801ed64:	f8cd 041c 	str.w	r0, [sp, #1052]	; 0x41c
    for( i = 0, x = 1; i < 256; i++ )
 801ed68:	f20d 4514 	addw	r5, sp, #1044	; 0x414
        x = ( x ^ XTIME( x ) ) & 0xFF;
 801ed6c:	0058      	lsls	r0, r3, #1
 801ed6e:	ea83 0400 	eor.w	r4, r3, r0
 801ed72:	f012 0f80 	tst.w	r2, #128	; 0x80
        pow[i] = x;
 801ed76:	f841 3f04 	str.w	r3, [r1, #4]!
        x = ( x ^ XTIME( x ) ) & 0xFF;
 801ed7a:	f084 021b 	eor.w	r2, r4, #27
 801ed7e:	f040 813c 	bne.w	801effa <aes_gen_tables+0x2aa>
    for( i = 0, x = 1; i < 256; i++ )
 801ed82:	428d      	cmp	r5, r1
 801ed84:	4622      	mov	r2, r4
        x = ( x ^ XTIME( x ) ) & 0xFF;
 801ed86:	b2e3      	uxtb	r3, r4
    for( i = 0, x = 1; i < 256; i++ )
 801ed88:	d1f0      	bne.n	801ed6c <aes_gen_tables+0x1c>
 801ed8a:	2303      	movs	r3, #3
 801ed8c:	2201      	movs	r2, #1
 801ed8e:	4619      	mov	r1, r3
        log[x] = i;
 801ed90:	f50d 6083 	add.w	r0, sp, #1048	; 0x418
 801ed94:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        x = ( x ^ XTIME( x ) ) & 0xFF;
 801ed98:	0058      	lsls	r0, r3, #1
 801ed9a:	ea80 0403 	eor.w	r4, r0, r3
 801ed9e:	f011 0f80 	tst.w	r1, #128	; 0x80
 801eda2:	f084 011b 	eor.w	r1, r4, #27
 801eda6:	f040 8121 	bne.w	801efec <aes_gen_tables+0x29c>
    for( i = 0, x = 1; i < 256; i++ )
 801edaa:	3201      	adds	r2, #1
 801edac:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801edb0:	4621      	mov	r1, r4
        x = ( x ^ XTIME( x ) ) & 0xFF;
 801edb2:	b2e3      	uxtb	r3, r4
    for( i = 0, x = 1; i < 256; i++ )
 801edb4:	d1ec      	bne.n	801ed90 <aes_gen_tables+0x40>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 801edb6:	f04f 0a63 	mov.w	sl, #99	; 0x63
        RCON[i] = (uint32_t) x;
 801edba:	2401      	movs	r4, #1
 801edbc:	2720      	movs	r7, #32
 801edbe:	f04f 0902 	mov.w	r9, #2
 801edc2:	f04f 0c10 	mov.w	ip, #16
    FSb[0x00] = 0x63;
 801edc6:	4d8f      	ldr	r5, [pc, #572]	; (801f004 <aes_gen_tables+0x2b4>)
    RSb[0x63] = 0x00;

    for( i = 1; i < 256; i++ )
 801edc8:	4623      	mov	r3, r4
 801edca:	462a      	mov	r2, r5
    FSb[0x00] = 0x63;
 801edcc:	f885 a000 	strb.w	sl, [r5]
    RSb[0x63] = 0x00;
 801edd0:	4628      	mov	r0, r5
        RCON[i] = (uint32_t) x;
 801edd2:	4d8d      	ldr	r5, [pc, #564]	; (801f008 <aes_gen_tables+0x2b8>)
 801edd4:	f04f 0804 	mov.w	r8, #4
 801edd8:	e9c5 4900 	strd	r4, r9, [r5]
 801eddc:	e9c5 c704 	strd	ip, r7, [r5, #16]
 801ede0:	241b      	movs	r4, #27
 801ede2:	2780      	movs	r7, #128	; 0x80
 801ede4:	f04f 0e08 	mov.w	lr, #8
 801ede8:	e9c5 7407 	strd	r7, r4, [r5, #28]
 801edec:	f04f 0b40 	mov.w	fp, #64	; 0x40
    RSb[0x63] = 0x00;
 801edf0:	2600      	movs	r6, #0
        RCON[i] = (uint32_t) x;
 801edf2:	2436      	movs	r4, #54	; 0x36
 801edf4:	e9c5 8e02 	strd	r8, lr, [r5, #8]
    RSb[0x63] = 0x00;
 801edf8:	4690      	mov	r8, r2
 801edfa:	4f84      	ldr	r7, [pc, #528]	; (801f00c <aes_gen_tables+0x2bc>)
 801edfc:	f50d 6183 	add.w	r1, sp, #1048	; 0x418
        RCON[i] = (uint32_t) x;
 801ee00:	f8c5 b018 	str.w	fp, [r5, #24]
 801ee04:	626c      	str	r4, [r5, #36]	; 0x24
    RSb[0x63] = 0x00;
 801ee06:	f887 6063 	strb.w	r6, [r7, #99]	; 0x63
    {
        x = pow[255 - log[i]];
 801ee0a:	f851 4f04 	ldr.w	r4, [r1, #4]!
 801ee0e:	aa06      	add	r2, sp, #24
 801ee10:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 801ee14:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 801ee18:	11d5      	asrs	r5, r2, #7
 801ee1a:	ea45 0542 	orr.w	r5, r5, r2, lsl #1
 801ee1e:	fa5f fe85 	uxtb.w	lr, r5
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 801ee22:	f3c5 15c0 	ubfx	r5, r5, #7, #1
 801ee26:	ea45 054e 	orr.w	r5, r5, lr, lsl #1
 801ee2a:	fa5f fc85 	uxtb.w	ip, r5
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 801ee2e:	f3c5 15c0 	ubfx	r5, r5, #7, #1
 801ee32:	ea45 054c 	orr.w	r5, r5, ip, lsl #1
 801ee36:	b2ee      	uxtb	r6, r5
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 801ee38:	f3c5 15c0 	ubfx	r5, r5, #7, #1
 801ee3c:	ea45 0546 	orr.w	r5, r5, r6, lsl #1
 801ee40:	b2ec      	uxtb	r4, r5
 801ee42:	4054      	eors	r4, r2
 801ee44:	ea84 040e 	eor.w	r4, r4, lr
 801ee48:	ea84 040c 	eor.w	r4, r4, ip
 801ee4c:	4074      	eors	r4, r6
        x ^= y ^ 0x63;
 801ee4e:	f084 0463 	eor.w	r4, r4, #99	; 0x63

        FSb[i] = (unsigned char) x;
        RSb[x] = (unsigned char) i;
 801ee52:	553b      	strb	r3, [r7, r4]
    for( i = 1; i < 256; i++ )
 801ee54:	3301      	adds	r3, #1
 801ee56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
        FSb[i] = (unsigned char) x;
 801ee5a:	f800 4f01 	strb.w	r4, [r0, #1]!
    for( i = 1; i < 256; i++ )
 801ee5e:	d1d4      	bne.n	801ee0a <aes_gen_tables+0xba>
                 ( (uint32_t) z << 24 );

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        FT1[i] = ROTL8( FT0[i] );
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );
 801ee60:	4b6b      	ldr	r3, [pc, #428]	; (801f010 <aes_gen_tables+0x2c0>)
        FT0[i] = ( (uint32_t) y       ) ^
 801ee62:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 801f02c <aes_gen_tables+0x2dc>
 801ee66:	4619      	mov	r1, r3
 801ee68:	f8df e1c4 	ldr.w	lr, [pc, #452]	; 801f030 <aes_gen_tables+0x2e0>
        FT1[i] = ROTL8( FT0[i] );
 801ee6c:	4f69      	ldr	r7, [pc, #420]	; (801f014 <aes_gen_tables+0x2c4>)
        FT2[i] = ROTL8( FT1[i] );
 801ee6e:	4e6a      	ldr	r6, [pc, #424]	; (801f018 <aes_gen_tables+0x2c8>)
        FT0[i] = ( (uint32_t) y       ) ^
 801ee70:	f8cc e000 	str.w	lr, [ip]
 801ee74:	4642      	mov	r2, r8
        FT2[i] = ROTL8( FT1[i] );
 801ee76:	f8df e1bc 	ldr.w	lr, [pc, #444]	; 801f034 <aes_gen_tables+0x2e4>
        FT1[i] = ROTL8( FT0[i] );
 801ee7a:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 801f038 <aes_gen_tables+0x2e8>
        FT2[i] = ROTL8( FT1[i] );
 801ee7e:	f8c6 e000 	str.w	lr, [r6]
 801ee82:	463c      	mov	r4, r7
 801ee84:	4630      	mov	r0, r6
        FT1[i] = ROTL8( FT0[i] );
 801ee86:	f8c7 8000 	str.w	r8, [r7]

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 801ee8a:	f8dd 644c 	ldr.w	r6, [sp, #1100]	; 0x44c
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 801ee8e:	f8dd 7450 	ldr.w	r7, [sp, #1104]	; 0x450
 801ee92:	4665      	mov	r5, ip
 801ee94:	9702      	str	r7, [sp, #8]
        FT3[i] = ROTL8( FT2[i] );
 801ee96:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 801f03c <aes_gen_tables+0x2ec>
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 801ee9a:	f8dd 743c 	ldr.w	r7, [sp, #1084]	; 0x43c
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 801ee9e:	9604      	str	r6, [sp, #16]
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 801eea0:	f8dd 6444 	ldr.w	r6, [sp, #1092]	; 0x444
 801eea4:	f8df e198 	ldr.w	lr, [pc, #408]	; 801f040 <aes_gen_tables+0x2f0>
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 801eea8:	9703      	str	r7, [sp, #12]
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 801eeaa:	9605      	str	r6, [sp, #20]
        FT3[i] = ROTL8( FT2[i] );
 801eeac:	f8c3 c000 	str.w	ip, [r3]
        x = FSb[i];
 801eeb0:	f812 6f01 	ldrb.w	r6, [r2, #1]!
        y = XTIME( x ) & 0xFF;
 801eeb4:	f016 0f80 	tst.w	r6, #128	; 0x80
 801eeb8:	bf14      	ite	ne
 801eeba:	271b      	movne	r7, #27
 801eebc:	2700      	moveq	r7, #0
                 ( (uint32_t) x << 16 ) ^
 801eebe:	0433      	lsls	r3, r6, #16
        y = XTIME( x ) & 0xFF;
 801eec0:	ea87 0746 	eor.w	r7, r7, r6, lsl #1
 801eec4:	b2ff      	uxtb	r7, r7
                 ( (uint32_t) x <<  8 ) ^
 801eec6:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 801eeca:	407b      	eors	r3, r7
        z =  ( y ^ x ) & 0xFF;
 801eecc:	407e      	eors	r6, r7
                 ( (uint32_t) x << 16 ) ^
 801eece:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
        FT1[i] = ROTL8( FT0[i] );
 801eed2:	ea4f 6c33 	mov.w	ip, r3, ror #24
        FT2[i] = ROTL8( FT1[i] );
 801eed6:	ea4f 4733 	mov.w	r7, r3, ror #16
        FT3[i] = ROTL8( FT2[i] );
 801eeda:	ea4f 2633 	mov.w	r6, r3, ror #8
    for( i = 0; i < 256; i++ )
 801eede:	4596      	cmp	lr, r2
        FT0[i] = ( (uint32_t) y       ) ^
 801eee0:	f845 3f04 	str.w	r3, [r5, #4]!
        FT1[i] = ROTL8( FT0[i] );
 801eee4:	f844 cf04 	str.w	ip, [r4, #4]!
        FT2[i] = ROTL8( FT1[i] );
 801eee8:	f840 7f04 	str.w	r7, [r0, #4]!
        FT3[i] = ROTL8( FT2[i] );
 801eeec:	f841 6f04 	str.w	r6, [r1, #4]!
    for( i = 0; i < 256; i++ )
 801eef0:	d1de      	bne.n	801eeb0 <aes_gen_tables+0x160>
 801eef2:	4d4a      	ldr	r5, [pc, #296]	; (801f01c <aes_gen_tables+0x2cc>)
 801eef4:	f8df 814c 	ldr.w	r8, [pc, #332]	; 801f044 <aes_gen_tables+0x2f4>
 801eef8:	f8df e14c 	ldr.w	lr, [pc, #332]	; 801f048 <aes_gen_tables+0x2f8>
 801eefc:	f8df c14c 	ldr.w	ip, [pc, #332]	; 801f04c <aes_gen_tables+0x2fc>
 801ef00:	4f47      	ldr	r7, [pc, #284]	; (801f020 <aes_gen_tables+0x2d0>)
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 801ef02:	4e48      	ldr	r6, [pc, #288]	; (801f024 <aes_gen_tables+0x2d4>)
        x = RSb[i];
 801ef04:	f815 3f01 	ldrb.w	r3, [r5, #1]!
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 801ef08:	2b00      	cmp	r3, #0
 801ef0a:	d060      	beq.n	801efce <aes_gen_tables+0x27e>
 801ef0c:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
 801ef10:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 801ef14:	9b04      	ldr	r3, [sp, #16]
 801ef16:	eb02 0b03 	add.w	fp, r2, r3
 801ef1a:	fb86 130b 	smull	r1, r3, r6, fp
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 801ef1e:	9903      	ldr	r1, [sp, #12]
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 801ef20:	445b      	add	r3, fp
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 801ef22:	1850      	adds	r0, r2, r1
 801ef24:	fb86 4100 	smull	r4, r1, r6, r0
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 801ef28:	9c02      	ldr	r4, [sp, #8]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 801ef2a:	4401      	add	r1, r0
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 801ef2c:	eb04 0a02 	add.w	sl, r4, r2
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 801ef30:	9c05      	ldr	r4, [sp, #20]
 801ef32:	4422      	add	r2, r4
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 801ef34:	ea4f 74eb 	mov.w	r4, fp, asr #31
 801ef38:	ebc4 13e3 	rsb	r3, r4, r3, asr #7
 801ef3c:	9301      	str	r3, [sp, #4]
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 801ef3e:	fb86 940a 	smull	r9, r4, r6, sl
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 801ef42:	fb86 3902 	smull	r3, r9, r6, r2
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 801ef46:	9b01      	ldr	r3, [sp, #4]
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 801ef48:	4454      	add	r4, sl
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 801ef4a:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 801ef4e:	ebab 0303 	sub.w	r3, fp, r3
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 801ef52:	ea4f 7be0 	mov.w	fp, r0, asr #31
 801ef56:	ebcb 11e1 	rsb	r1, fp, r1, asr #7
 801ef5a:	ebc1 2b01 	rsb	fp, r1, r1, lsl #8
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 801ef5e:	a906      	add	r1, sp, #24
 801ef60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 801ef64:	eba0 010b 	sub.w	r1, r0, fp
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 801ef68:	ea4f 70ea 	mov.w	r0, sl, asr #31
 801ef6c:	ebc0 10e4 	rsb	r0, r0, r4, asr #7
 801ef70:	ebc0 2400 	rsb	r4, r0, r0, lsl #8
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 801ef74:	a806      	add	r0, sp, #24
 801ef76:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 801ef7a:	4491      	add	r9, r2
 801ef7c:	17d1      	asrs	r1, r2, #31
 801ef7e:	ebc1 11e9 	rsb	r1, r1, r9, asr #7
 801ef82:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 801ef86:	f10d 0918 	add.w	r9, sp, #24
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 801ef8a:	ebaa 0404 	sub.w	r4, sl, r4
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 801ef8e:	1a52      	subs	r2, r2, r1
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 801ef90:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 801ef94:	041b      	lsls	r3, r3, #16
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 801ef96:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 801ef9a:	ea83 2300 	eor.w	r3, r3, r0, lsl #8
 801ef9e:	4063      	eors	r3, r4
 801efa0:	ea83 6302 	eor.w	r3, r3, r2, lsl #24

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
 801efa4:	ea4f 6033 	mov.w	r0, r3, ror #24
        RT2[i] = ROTL8( RT1[i] );
 801efa8:	ea4f 4133 	mov.w	r1, r3, ror #16
        RT3[i] = ROTL8( RT2[i] );
 801efac:	ea4f 2233 	mov.w	r2, r3, ror #8
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 801efb0:	f848 3f04 	str.w	r3, [r8, #4]!
    for( i = 0; i < 256; i++ )
 801efb4:	4b1c      	ldr	r3, [pc, #112]	; (801f028 <aes_gen_tables+0x2d8>)
        RT1[i] = ROTL8( RT0[i] );
 801efb6:	f84e 0f04 	str.w	r0, [lr, #4]!
    for( i = 0; i < 256; i++ )
 801efba:	42ab      	cmp	r3, r5
        RT2[i] = ROTL8( RT1[i] );
 801efbc:	f84c 1f04 	str.w	r1, [ip, #4]!
        RT3[i] = ROTL8( RT2[i] );
 801efc0:	f847 2f04 	str.w	r2, [r7, #4]!
    for( i = 0; i < 256; i++ )
 801efc4:	d19e      	bne.n	801ef04 <aes_gen_tables+0x1b4>
#endif /* !MBEDTLS_AES_FEWER_TABLES */
    }
}
 801efc6:	f60d 0d1c 	addw	sp, sp, #2076	; 0x81c
 801efca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 801efce:	f848 3f04 	str.w	r3, [r8, #4]!
        RT1[i] = ROTL8( RT0[i] );
 801efd2:	f84e 3f04 	str.w	r3, [lr, #4]!
        RT2[i] = ROTL8( RT1[i] );
 801efd6:	f84c 3f04 	str.w	r3, [ip, #4]!
        RT3[i] = ROTL8( RT2[i] );
 801efda:	f847 3f04 	str.w	r3, [r7, #4]!
    for( i = 0; i < 256; i++ )
 801efde:	4b12      	ldr	r3, [pc, #72]	; (801f028 <aes_gen_tables+0x2d8>)
 801efe0:	42ab      	cmp	r3, r5
 801efe2:	d18f      	bne.n	801ef04 <aes_gen_tables+0x1b4>
}
 801efe4:	f60d 0d1c 	addw	sp, sp, #2076	; 0x81c
 801efe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for( i = 0, x = 1; i < 256; i++ )
 801efec:	3201      	adds	r2, #1
 801efee:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
        x = ( x ^ XTIME( x ) ) & 0xFF;
 801eff2:	b2cb      	uxtb	r3, r1
    for( i = 0, x = 1; i < 256; i++ )
 801eff4:	f47f aecc 	bne.w	801ed90 <aes_gen_tables+0x40>
 801eff8:	e6dd      	b.n	801edb6 <aes_gen_tables+0x66>
 801effa:	428d      	cmp	r5, r1
        x = ( x ^ XTIME( x ) ) & 0xFF;
 801effc:	b2d3      	uxtb	r3, r2
    for( i = 0, x = 1; i < 256; i++ )
 801effe:	f47f aeb5 	bne.w	801ed6c <aes_gen_tables+0x1c>
 801f002:	e6c2      	b.n	801ed8a <aes_gen_tables+0x3a>
 801f004:	20019a08 	.word	0x20019a08
 801f008:	2001ab08 	.word	0x2001ab08
 801f00c:	2001ab30 	.word	0x2001ab30
 801f010:	2001a708 	.word	0x2001a708
 801f014:	20019f08 	.word	0x20019f08
 801f018:	2001a308 	.word	0x2001a308
 801f01c:	2001ab2f 	.word	0x2001ab2f
 801f020:	2001b82c 	.word	0x2001b82c
 801f024:	80808081 	.word	0x80808081
 801f028:	2001ac2f 	.word	0x2001ac2f
 801f02c:	20019b08 	.word	0x20019b08
 801f030:	a56363c6 	.word	0xa56363c6
 801f034:	63c6a563 	.word	0x63c6a563
 801f038:	6363c6a5 	.word	0x6363c6a5
 801f03c:	c6a56363 	.word	0xc6a56363
 801f040:	20019b07 	.word	0x20019b07
 801f044:	2001ac2c 	.word	0x2001ac2c
 801f048:	2001b02c 	.word	0x2001b02c
 801f04c:	2001b42c 	.word	0x2001b42c

0801f050 <mbedtls_aes_init>:

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 801f050:	f44f 728c 	mov.w	r2, #280	; 0x118
 801f054:	2100      	movs	r1, #0
 801f056:	f010 bf06 	b.w	802fe66 <memset>
 801f05a:	bf00      	nop

0801f05c <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
 801f05c:	b118      	cbz	r0, 801f066 <mbedtls_aes_free+0xa>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 801f05e:	f44f 718c 	mov.w	r1, #280	; 0x118
 801f062:	f008 bd63 	b.w	8027b2c <mbedtls_platform_zeroize>
}
 801f066:	4770      	bx	lr

0801f068 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 801f068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
 801f06c:	2ac0      	cmp	r2, #192	; 0xc0
{
 801f06e:	4615      	mov	r5, r2
 801f070:	4680      	mov	r8, r0
 801f072:	b083      	sub	sp, #12
    switch( keybits )
 801f074:	d009      	beq.n	801f08a <mbedtls_aes_setkey_enc+0x22>
 801f076:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801f07a:	d043      	beq.n	801f104 <mbedtls_aes_setkey_enc+0x9c>
 801f07c:	2a80      	cmp	r2, #128	; 0x80
 801f07e:	d02f      	beq.n	801f0e0 <mbedtls_aes_setkey_enc+0x78>
 801f080:	f06f 001f 	mvn.w	r0, #31
            }
            break;
    }

    return( 0 );
}
 801f084:	b003      	add	sp, #12
 801f086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        case 192: ctx->nr = 12; break;
 801f08a:	230c      	movs	r3, #12
 801f08c:	6003      	str	r3, [r0, #0]
    if( aes_init_done == 0 )
 801f08e:	4ccb      	ldr	r4, [pc, #812]	; (801f3bc <mbedtls_aes_setkey_enc+0x354>)
 801f090:	6823      	ldr	r3, [r4, #0]
 801f092:	b35b      	cbz	r3, 801f0ec <mbedtls_aes_setkey_enc+0x84>
    ctx->rk = RK = ctx->buf;
 801f094:	f108 0308 	add.w	r3, r8, #8
    for( i = 0; i < ( keybits >> 5 ); i++ )
 801f098:	096d      	lsrs	r5, r5, #5
    ctx->rk = RK = ctx->buf;
 801f09a:	f8c8 3004 	str.w	r3, [r8, #4]
{
 801f09e:	2400      	movs	r4, #0
 801f0a0:	1f1e      	subs	r6, r3, #4
        GET_UINT32_LE( RK[i], key, i << 2 );
 801f0a2:	788a      	ldrb	r2, [r1, #2]
 801f0a4:	7848      	ldrb	r0, [r1, #1]
 801f0a6:	780f      	ldrb	r7, [r1, #0]
 801f0a8:	0412      	lsls	r2, r2, #16
 801f0aa:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 801f0ae:	78c8      	ldrb	r0, [r1, #3]
 801f0b0:	433a      	orrs	r2, r7
    for( i = 0; i < ( keybits >> 5 ); i++ )
 801f0b2:	3401      	adds	r4, #1
        GET_UINT32_LE( RK[i], key, i << 2 );
 801f0b4:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
    for( i = 0; i < ( keybits >> 5 ); i++ )
 801f0b8:	42a5      	cmp	r5, r4
        GET_UINT32_LE( RK[i], key, i << 2 );
 801f0ba:	f846 2f04 	str.w	r2, [r6, #4]!
    for( i = 0; i < ( keybits >> 5 ); i++ )
 801f0be:	f101 0104 	add.w	r1, r1, #4
 801f0c2:	d8ee      	bhi.n	801f0a2 <mbedtls_aes_setkey_enc+0x3a>
    switch( ctx->nr )
 801f0c4:	f8d8 2000 	ldr.w	r2, [r8]
 801f0c8:	2a0c      	cmp	r2, #12
 801f0ca:	d01e      	beq.n	801f10a <mbedtls_aes_setkey_enc+0xa2>
 801f0cc:	2a0e      	cmp	r2, #14
 801f0ce:	f000 817b 	beq.w	801f3c8 <mbedtls_aes_setkey_enc+0x360>
 801f0d2:	2a0a      	cmp	r2, #10
 801f0d4:	f000 81d1 	beq.w	801f47a <mbedtls_aes_setkey_enc+0x412>
 801f0d8:	2000      	movs	r0, #0
}
 801f0da:	b003      	add	sp, #12
 801f0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        case 128: ctx->nr = 10; break;
 801f0e0:	230a      	movs	r3, #10
    if( aes_init_done == 0 )
 801f0e2:	4cb6      	ldr	r4, [pc, #728]	; (801f3bc <mbedtls_aes_setkey_enc+0x354>)
        case 128: ctx->nr = 10; break;
 801f0e4:	6003      	str	r3, [r0, #0]
    if( aes_init_done == 0 )
 801f0e6:	6823      	ldr	r3, [r4, #0]
 801f0e8:	2b00      	cmp	r3, #0
 801f0ea:	d1d3      	bne.n	801f094 <mbedtls_aes_setkey_enc+0x2c>
        aes_init_done = 1;
 801f0ec:	2601      	movs	r6, #1
 801f0ee:	9101      	str	r1, [sp, #4]
        aes_gen_tables();
 801f0f0:	f7ff fe2e 	bl	801ed50 <aes_gen_tables>
    ctx->rk = RK = ctx->buf;
 801f0f4:	f108 0308 	add.w	r3, r8, #8
 801f0f8:	9901      	ldr	r1, [sp, #4]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 801f0fa:	096d      	lsrs	r5, r5, #5
        aes_init_done = 1;
 801f0fc:	6026      	str	r6, [r4, #0]
    ctx->rk = RK = ctx->buf;
 801f0fe:	f8c8 3004 	str.w	r3, [r8, #4]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 801f102:	e7cc      	b.n	801f09e <mbedtls_aes_setkey_enc+0x36>
        case 256: ctx->nr = 14; break;
 801f104:	230e      	movs	r3, #14
 801f106:	6003      	str	r3, [r0, #0]
 801f108:	e7c1      	b.n	801f08e <mbedtls_aes_setkey_enc+0x26>
 801f10a:	695c      	ldr	r4, [r3, #20]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f10c:	4eac      	ldr	r6, [pc, #688]	; (801f3c0 <mbedtls_aes_setkey_enc+0x358>)
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 801f10e:	48ad      	ldr	r0, [pc, #692]	; (801f3c4 <mbedtls_aes_setkey_enc+0x35c>)
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f110:	6837      	ldr	r7, [r6, #0]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 801f112:	f3c4 2107 	ubfx	r1, r4, #8, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f116:	681a      	ldr	r2, [r3, #0]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 801f118:	5c45      	ldrb	r5, [r0, r1]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f11a:	0e21      	lsrs	r1, r4, #24
 801f11c:	407a      	eors	r2, r7
 801f11e:	5c47      	ldrb	r7, [r0, r1]
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 801f120:	b2e1      	uxtb	r1, r4
 801f122:	5c41      	ldrb	r1, [r0, r1]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f124:	406a      	eors	r2, r5
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 801f126:	f3c4 4507 	ubfx	r5, r4, #16, #8
 801f12a:	5d45      	ldrb	r5, [r0, r5]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f12c:	ea82 4207 	eor.w	r2, r2, r7, lsl #16
 801f130:	ea82 6201 	eor.w	r2, r2, r1, lsl #24
 801f134:	6859      	ldr	r1, [r3, #4]
 801f136:	ea82 2205 	eor.w	r2, r2, r5, lsl #8
 801f13a:	689d      	ldr	r5, [r3, #8]
                RK[7]  = RK[1] ^ RK[6];
 801f13c:	4051      	eors	r1, r2
                RK[8]  = RK[2] ^ RK[7];
 801f13e:	ea85 0801 	eor.w	r8, r5, r1
                RK[9]  = RK[3] ^ RK[8];
 801f142:	e9d3 6703 	ldrd	r6, r7, [r3, #12]
 801f146:	ea86 0c08 	eor.w	ip, r6, r8
                RK[7]  = RK[1] ^ RK[6];
 801f14a:	e9c3 2106 	strd	r2, r1, [r3, #24]
                RK[9]  = RK[3] ^ RK[8];
 801f14e:	e9c3 8c08 	strd	r8, ip, [r3, #32]
                RK[10] = RK[4] ^ RK[9];
 801f152:	ea87 0e0c 	eor.w	lr, r7, ip
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f156:	4e9a      	ldr	r6, [pc, #616]	; (801f3c0 <mbedtls_aes_setkey_enc+0x358>)
                RK[10] = RK[4] ^ RK[9];
 801f158:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
                RK[11] = RK[5] ^ RK[10];
 801f15c:	ea84 040e 	eor.w	r4, r4, lr
 801f160:	62dc      	str	r4, [r3, #44]	; 0x2c
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f162:	6876      	ldr	r6, [r6, #4]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 801f164:	f3c4 2e07 	ubfx	lr, r4, #8, #8
 801f168:	f810 e00e 	ldrb.w	lr, [r0, lr]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f16c:	ea4f 6814 	mov.w	r8, r4, lsr #24
 801f170:	f810 9008 	ldrb.w	r9, [r0, r8]
 801f174:	4072      	eors	r2, r6
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 801f176:	fa5f f884 	uxtb.w	r8, r4
 801f17a:	f810 8008 	ldrb.w	r8, [r0, r8]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f17e:	ea8e 0202 	eor.w	r2, lr, r2
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 801f182:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801f186:	f810 e00e 	ldrb.w	lr, [r0, lr]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f18a:	ea82 4209 	eor.w	r2, r2, r9, lsl #16
 801f18e:	ea82 6208 	eor.w	r2, r2, r8, lsl #24
 801f192:	ea82 220e 	eor.w	r2, r2, lr, lsl #8
                RK[8]  = RK[2] ^ RK[7];
 801f196:	4055      	eors	r5, r2
                RK[10] = RK[4] ^ RK[9];
 801f198:	ea87 0805 	eor.w	r8, r7, r5
                RK[11] = RK[5] ^ RK[10];
 801f19c:	ea84 0e08 	eor.w	lr, r4, r8
                RK[7]  = RK[1] ^ RK[6];
 801f1a0:	4051      	eors	r1, r2
 801f1a2:	e9c3 150d 	strd	r1, r5, [r3, #52]	; 0x34
                RK[11] = RK[5] ^ RK[10];
 801f1a6:	e9c3 8e10 	strd	r8, lr, [r3, #64]	; 0x40
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f1aa:	4e85      	ldr	r6, [pc, #532]	; (801f3c0 <mbedtls_aes_setkey_enc+0x358>)
                RK[9]  = RK[3] ^ RK[8];
 801f1ac:	ea8c 0905 	eor.w	r9, ip, r5
                RK[6]  = RK[0] ^ RCON[i] ^
 801f1b0:	631a      	str	r2, [r3, #48]	; 0x30
                RK[9]  = RK[3] ^ RK[8];
 801f1b2:	f8c3 903c 	str.w	r9, [r3, #60]	; 0x3c
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f1b6:	68b6      	ldr	r6, [r6, #8]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 801f1b8:	f3ce 2907 	ubfx	r9, lr, #8, #8
 801f1bc:	f810 9009 	ldrb.w	r9, [r0, r9]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f1c0:	ea4f 6a1e 	mov.w	sl, lr, lsr #24
 801f1c4:	f810 a00a 	ldrb.w	sl, [r0, sl]
 801f1c8:	4072      	eors	r2, r6
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 801f1ca:	fa5f fb8e 	uxtb.w	fp, lr
 801f1ce:	f810 b00b 	ldrb.w	fp, [r0, fp]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f1d2:	ea89 0202 	eor.w	r2, r9, r2
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 801f1d6:	f3ce 4e07 	ubfx	lr, lr, #16, #8
 801f1da:	f810 e00e 	ldrb.w	lr, [r0, lr]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f1de:	ea82 420a 	eor.w	r2, r2, sl, lsl #16
 801f1e2:	ea82 620b 	eor.w	r2, r2, fp, lsl #24
 801f1e6:	ea82 220e 	eor.w	r2, r2, lr, lsl #8
                RK[7]  = RK[1] ^ RK[6];
 801f1ea:	4051      	eors	r1, r2
                RK[9]  = RK[3] ^ RK[8];
 801f1ec:	ea8c 0c01 	eor.w	ip, ip, r1
                RK[10] = RK[4] ^ RK[9];
 801f1f0:	ea88 0e0c 	eor.w	lr, r8, ip
                RK[9]  = RK[3] ^ RK[8];
 801f1f4:	e9c3 ce15 	strd	ip, lr, [r3, #84]	; 0x54
                RK[6]  = RK[0] ^ RCON[i] ^
 801f1f8:	e9c3 2112 	strd	r2, r1, [r3, #72]	; 0x48
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f1fc:	4e70      	ldr	r6, [pc, #448]	; (801f3c0 <mbedtls_aes_setkey_enc+0x358>)
                RK[11] = RK[5] ^ RK[10];
 801f1fe:	ea84 080c 	eor.w	r8, r4, ip
                RK[8]  = RK[2] ^ RK[7];
 801f202:	ea85 0901 	eor.w	r9, r5, r1
                RK[11] = RK[5] ^ RK[10];
 801f206:	f8c3 805c 	str.w	r8, [r3, #92]	; 0x5c
                RK[8]  = RK[2] ^ RK[7];
 801f20a:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f20e:	68f6      	ldr	r6, [r6, #12]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 801f210:	f3c8 2e07 	ubfx	lr, r8, #8, #8
 801f214:	f810 e00e 	ldrb.w	lr, [r0, lr]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f218:	ea4f 6918 	mov.w	r9, r8, lsr #24
 801f21c:	f810 a009 	ldrb.w	sl, [r0, r9]
 801f220:	4072      	eors	r2, r6
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 801f222:	fa5f f988 	uxtb.w	r9, r8
 801f226:	f810 9009 	ldrb.w	r9, [r0, r9]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f22a:	ea8e 0e02 	eor.w	lr, lr, r2
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 801f22e:	f3c8 4207 	ubfx	r2, r8, #16, #8
 801f232:	5c82      	ldrb	r2, [r0, r2]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f234:	ea8e 4e0a 	eor.w	lr, lr, sl, lsl #16
 801f238:	ea8e 6e09 	eor.w	lr, lr, r9, lsl #24
 801f23c:	ea8e 2202 	eor.w	r2, lr, r2, lsl #8
                RK[7]  = RK[1] ^ RK[6];
 801f240:	4051      	eors	r1, r2
                RK[6]  = RK[0] ^ RCON[i] ^
 801f242:	e9c3 2118 	strd	r2, r1, [r3, #96]	; 0x60
                RK[10] = RK[4] ^ RK[9];
 801f246:	4057      	eors	r7, r2
                RK[8]  = RK[2] ^ RK[7];
 801f248:	4055      	eors	r5, r2
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f24a:	4e5d      	ldr	r6, [pc, #372]	; (801f3c0 <mbedtls_aes_setkey_enc+0x358>)
                RK[11] = RK[5] ^ RK[10];
 801f24c:	ea88 0807 	eor.w	r8, r8, r7
                RK[9]  = RK[3] ^ RK[8];
 801f250:	ea8c 0a05 	eor.w	sl, ip, r5
                RK[11] = RK[5] ^ RK[10];
 801f254:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
                RK[8]  = RK[2] ^ RK[7];
 801f258:	669d      	str	r5, [r3, #104]	; 0x68
                RK[10] = RK[4] ^ RK[9];
 801f25a:	671f      	str	r7, [r3, #112]	; 0x70
                RK[9]  = RK[3] ^ RK[8];
 801f25c:	f8c3 a06c 	str.w	sl, [r3, #108]	; 0x6c
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f260:	6936      	ldr	r6, [r6, #16]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 801f262:	f3c8 2907 	ubfx	r9, r8, #8, #8
 801f266:	f810 9009 	ldrb.w	r9, [r0, r9]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f26a:	ea4f 6a18 	mov.w	sl, r8, lsr #24
 801f26e:	f810 e00a 	ldrb.w	lr, [r0, sl]
 801f272:	4072      	eors	r2, r6
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 801f274:	fa5f fa88 	uxtb.w	sl, r8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f278:	ea89 0202 	eor.w	r2, r9, r2
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 801f27c:	f3c8 4807 	ubfx	r8, r8, #16, #8
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 801f280:	f810 900a 	ldrb.w	r9, [r0, sl]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f284:	ea82 420e 	eor.w	r2, r2, lr, lsl #16
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 801f288:	f810 e008 	ldrb.w	lr, [r0, r8]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f28c:	ea82 6209 	eor.w	r2, r2, r9, lsl #24
 801f290:	ea82 220e 	eor.w	r2, r2, lr, lsl #8
                RK[7]  = RK[1] ^ RK[6];
 801f294:	4051      	eors	r1, r2
                RK[6]  = RK[0] ^ RCON[i] ^
 801f296:	e9c3 211e 	strd	r2, r1, [r3, #120]	; 0x78
                RK[9]  = RK[3] ^ RK[8];
 801f29a:	ea8c 0c01 	eor.w	ip, ip, r1
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f29e:	4e48      	ldr	r6, [pc, #288]	; (801f3c0 <mbedtls_aes_setkey_enc+0x358>)
                RK[11] = RK[5] ^ RK[10];
 801f2a0:	404c      	eors	r4, r1
                RK[10] = RK[4] ^ RK[9];
 801f2a2:	ea87 0e0c 	eor.w	lr, r7, ip
                RK[8]  = RK[2] ^ RK[7];
 801f2a6:	ea85 0801 	eor.w	r8, r5, r1
                RK[9]  = RK[3] ^ RK[8];
 801f2aa:	f8c3 c084 	str.w	ip, [r3, #132]	; 0x84
                RK[11] = RK[5] ^ RK[10];
 801f2ae:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
                RK[10] = RK[4] ^ RK[9];
 801f2b2:	f8c3 e088 	str.w	lr, [r3, #136]	; 0x88
                RK[8]  = RK[2] ^ RK[7];
 801f2b6:	f8c3 8080 	str.w	r8, [r3, #128]	; 0x80
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f2ba:	6976      	ldr	r6, [r6, #20]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 801f2bc:	f3c4 2e07 	ubfx	lr, r4, #8, #8
 801f2c0:	f810 e00e 	ldrb.w	lr, [r0, lr]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f2c4:	ea4f 6814 	mov.w	r8, r4, lsr #24
 801f2c8:	f810 9008 	ldrb.w	r9, [r0, r8]
 801f2cc:	4072      	eors	r2, r6
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 801f2ce:	fa5f f884 	uxtb.w	r8, r4
 801f2d2:	f810 8008 	ldrb.w	r8, [r0, r8]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f2d6:	ea8e 0202 	eor.w	r2, lr, r2
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 801f2da:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801f2de:	f810 e00e 	ldrb.w	lr, [r0, lr]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f2e2:	ea82 4209 	eor.w	r2, r2, r9, lsl #16
 801f2e6:	ea82 6208 	eor.w	r2, r2, r8, lsl #24
 801f2ea:	ea82 220e 	eor.w	r2, r2, lr, lsl #8
                RK[8]  = RK[2] ^ RK[7];
 801f2ee:	4055      	eors	r5, r2
                RK[10] = RK[4] ^ RK[9];
 801f2f0:	ea87 0e05 	eor.w	lr, r7, r5
                RK[11] = RK[5] ^ RK[10];
 801f2f4:	ea84 090e 	eor.w	r9, r4, lr
                RK[7]  = RK[1] ^ RK[6];
 801f2f8:	4051      	eors	r1, r2
 801f2fa:	e9c3 1525 	strd	r1, r5, [r3, #148]	; 0x94
                RK[11] = RK[5] ^ RK[10];
 801f2fe:	e9c3 e928 	strd	lr, r9, [r3, #160]	; 0xa0
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f302:	4e2f      	ldr	r6, [pc, #188]	; (801f3c0 <mbedtls_aes_setkey_enc+0x358>)
                RK[9]  = RK[3] ^ RK[8];
 801f304:	ea8c 0805 	eor.w	r8, ip, r5
                RK[6]  = RK[0] ^ RCON[i] ^
 801f308:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                RK[9]  = RK[3] ^ RK[8];
 801f30c:	f8c3 809c 	str.w	r8, [r3, #156]	; 0x9c
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f310:	69b6      	ldr	r6, [r6, #24]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 801f312:	f3c9 2807 	ubfx	r8, r9, #8, #8
 801f316:	f810 8008 	ldrb.w	r8, [r0, r8]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f31a:	ea4f 6a19 	mov.w	sl, r9, lsr #24
 801f31e:	f810 a00a 	ldrb.w	sl, [r0, sl]
 801f322:	4072      	eors	r2, r6
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 801f324:	fa5f fb89 	uxtb.w	fp, r9
 801f328:	f810 b00b 	ldrb.w	fp, [r0, fp]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f32c:	ea88 0802 	eor.w	r8, r8, r2
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 801f330:	f3c9 4207 	ubfx	r2, r9, #16, #8
 801f334:	5c82      	ldrb	r2, [r0, r2]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f336:	ea88 480a 	eor.w	r8, r8, sl, lsl #16
 801f33a:	ea88 680b 	eor.w	r8, r8, fp, lsl #24
 801f33e:	ea88 2802 	eor.w	r8, r8, r2, lsl #8
                RK[7]  = RK[1] ^ RK[6];
 801f342:	ea81 0108 	eor.w	r1, r1, r8
                RK[9]  = RK[3] ^ RK[8];
 801f346:	ea8c 0c01 	eor.w	ip, ip, r1
                RK[11] = RK[5] ^ RK[10];
 801f34a:	ea84 040c 	eor.w	r4, r4, ip
                RK[10] = RK[4] ^ RK[9];
 801f34e:	ea8e 020c 	eor.w	r2, lr, ip
                RK[11] = RK[5] ^ RK[10];
 801f352:	e9c3 242e 	strd	r2, r4, [r3, #184]	; 0xb8
                RK[6]  = RK[0] ^ RCON[i] ^
 801f356:	e9c3 812a 	strd	r8, r1, [r3, #168]	; 0xa8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f35a:	4e19      	ldr	r6, [pc, #100]	; (801f3c0 <mbedtls_aes_setkey_enc+0x358>)
                RK[8]  = RK[2] ^ RK[7];
 801f35c:	ea85 0901 	eor.w	r9, r5, r1
                RK[9]  = RK[3] ^ RK[8];
 801f360:	f8c3 c0b4 	str.w	ip, [r3, #180]	; 0xb4
                RK[8]  = RK[2] ^ RK[7];
 801f364:	f8c3 90b0 	str.w	r9, [r3, #176]	; 0xb0
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f368:	f8d6 e01c 	ldr.w	lr, [r6, #28]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 801f36c:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801f370:	5c82      	ldrb	r2, [r0, r2]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f372:	0e26      	lsrs	r6, r4, #24
 801f374:	f810 9006 	ldrb.w	r9, [r0, r6]
 801f378:	ea88 080e 	eor.w	r8, r8, lr
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 801f37c:	b2e6      	uxtb	r6, r4
 801f37e:	5d86      	ldrb	r6, [r0, r6]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 801f380:	f3c4 4e07 	ubfx	lr, r4, #16, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f384:	ea82 0208 	eor.w	r2, r2, r8
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 801f388:	f810 000e 	ldrb.w	r0, [r0, lr]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 801f38c:	ea82 4209 	eor.w	r2, r2, r9, lsl #16
 801f390:	ea82 6206 	eor.w	r2, r2, r6, lsl #24
 801f394:	ea82 2200 	eor.w	r2, r2, r0, lsl #8
                RK[8]  = RK[2] ^ RK[7];
 801f398:	4055      	eors	r5, r2
                RK[10] = RK[4] ^ RK[9];
 801f39a:	4057      	eors	r7, r2
                RK[9]  = RK[3] ^ RK[8];
 801f39c:	ea85 060c 	eor.w	r6, r5, ip
                RK[11] = RK[5] ^ RK[10];
 801f3a0:	407c      	eors	r4, r7
                RK[7]  = RK[1] ^ RK[6];
 801f3a2:	4051      	eors	r1, r2
                RK[6]  = RK[0] ^ RCON[i] ^
 801f3a4:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
                RK[9]  = RK[3] ^ RK[8];
 801f3a8:	f8c3 60cc 	str.w	r6, [r3, #204]	; 0xcc
                RK[11] = RK[5] ^ RK[10];
 801f3ac:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
                RK[8]  = RK[2] ^ RK[7];
 801f3b0:	f8c3 50c8 	str.w	r5, [r3, #200]	; 0xc8
                RK[10] = RK[4] ^ RK[9];
 801f3b4:	f8c3 70d0 	str.w	r7, [r3, #208]	; 0xd0
 801f3b8:	e68e      	b.n	801f0d8 <mbedtls_aes_setkey_enc+0x70>
 801f3ba:	bf00      	nop
 801f3bc:	2001bc30 	.word	0x2001bc30
 801f3c0:	2001ab08 	.word	0x2001ab08
 801f3c4:	20019a08 	.word	0x20019a08
 801f3c8:	f8df 8358 	ldr.w	r8, [pc, #856]	; 801f724 <mbedtls_aes_setkey_enc+0x6bc>
 801f3cc:	69dc      	ldr	r4, [r3, #28]
 801f3ce:	681a      	ldr	r2, [r3, #0]
 801f3d0:	48d1      	ldr	r0, [pc, #836]	; (801f718 <mbedtls_aes_setkey_enc+0x6b0>)
 801f3d2:	e9d3 6701 	ldrd	r6, r7, [r3, #4]
 801f3d6:	9601      	str	r6, [sp, #4]
 801f3d8:	e9d3 ce05 	ldrd	ip, lr, [r3, #20]
 801f3dc:	e9d3 5103 	ldrd	r5, r1, [r3, #12]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 801f3e0:	f858 bf04 	ldr.w	fp, [r8, #4]!
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 801f3e4:	f3c4 2907 	ubfx	r9, r4, #8, #8
 801f3e8:	f810 a009 	ldrb.w	sl, [r0, r9]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 801f3ec:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801f3f0:	ea82 020b 	eor.w	r2, r2, fp
 801f3f4:	f810 b009 	ldrb.w	fp, [r0, r9]
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 801f3f8:	fa5f f984 	uxtb.w	r9, r4
 801f3fc:	f810 9009 	ldrb.w	r9, [r0, r9]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 801f400:	ea8a 0202 	eor.w	r2, sl, r2
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 801f404:	f3c4 4a07 	ubfx	sl, r4, #16, #8
 801f408:	f810 a00a 	ldrb.w	sl, [r0, sl]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 801f40c:	ea82 420b 	eor.w	r2, r2, fp, lsl #16
                RK[9]  = RK[1] ^ RK[8];
 801f410:	9e01      	ldr	r6, [sp, #4]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 801f412:	ea82 6209 	eor.w	r2, r2, r9, lsl #24
 801f416:	ea82 220a 	eor.w	r2, r2, sl, lsl #8
                RK[9]  = RK[1] ^ RK[8];
 801f41a:	4056      	eors	r6, r2
                RK[10] = RK[2] ^ RK[9];
 801f41c:	4077      	eors	r7, r6
                RK[11] = RK[3] ^ RK[10];
 801f41e:	407d      	eors	r5, r7
                RK[8]  = RK[0] ^ RCON[i] ^
 801f420:	e9c3 2608 	strd	r2, r6, [r3, #32]
                RK[10] = RK[2] ^ RK[9];
 801f424:	e9c3 750a 	strd	r7, r5, [r3, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 801f428:	fa5f f985 	uxtb.w	r9, r5
 801f42c:	f810 a009 	ldrb.w	sl, [r0, r9]
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 801f430:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801f434:	f810 b009 	ldrb.w	fp, [r0, r9]
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 801f438:	f3c5 2907 	ubfx	r9, r5, #8, #8
 801f43c:	f810 9009 	ldrb.w	r9, [r0, r9]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 801f440:	ea8a 0101 	eor.w	r1, sl, r1
 801f444:	f3c5 4a07 	ubfx	sl, r5, #16, #8
 801f448:	f810 a00a 	ldrb.w	sl, [r0, sl]
 801f44c:	ea81 610b 	eor.w	r1, r1, fp, lsl #24
 801f450:	ea81 2109 	eor.w	r1, r1, r9, lsl #8
 801f454:	ea81 410a 	eor.w	r1, r1, sl, lsl #16
                RK[13] = RK[5] ^ RK[12];
 801f458:	ea8c 0c01 	eor.w	ip, ip, r1
                RK[9]  = RK[1] ^ RK[8];
 801f45c:	9601      	str	r6, [sp, #4]
            for( i = 0; i < 7; i++, RK += 8 )
 801f45e:	4eaf      	ldr	r6, [pc, #700]	; (801f71c <mbedtls_aes_setkey_enc+0x6b4>)
                RK[14] = RK[6] ^ RK[13];
 801f460:	ea8e 0e0c 	eor.w	lr, lr, ip
                RK[15] = RK[7] ^ RK[14];
 801f464:	ea84 040e 	eor.w	r4, r4, lr
            for( i = 0; i < 7; i++, RK += 8 )
 801f468:	4546      	cmp	r6, r8
                RK[14] = RK[6] ^ RK[13];
 801f46a:	e9c3 e40e 	strd	lr, r4, [r3, #56]	; 0x38
                RK[12] = RK[4] ^
 801f46e:	e9c3 1c0c 	strd	r1, ip, [r3, #48]	; 0x30
            for( i = 0; i < 7; i++, RK += 8 )
 801f472:	f103 0320 	add.w	r3, r3, #32
 801f476:	d1b3      	bne.n	801f3e0 <mbedtls_aes_setkey_enc+0x378>
 801f478:	e62e      	b.n	801f0d8 <mbedtls_aes_setkey_enc+0x70>
                RK[4]  = RK[0] ^ RCON[i] ^
 801f47a:	4ea9      	ldr	r6, [pc, #676]	; (801f720 <mbedtls_aes_setkey_enc+0x6b8>)
 801f47c:	68da      	ldr	r2, [r3, #12]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 801f47e:	48a6      	ldr	r0, [pc, #664]	; (801f718 <mbedtls_aes_setkey_enc+0x6b0>)
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f480:	6831      	ldr	r1, [r6, #0]
 801f482:	681d      	ldr	r5, [r3, #0]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 801f484:	f3c2 2407 	ubfx	r4, r2, #8, #8
 801f488:	5d07      	ldrb	r7, [r0, r4]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f48a:	0e14      	lsrs	r4, r2, #24
 801f48c:	4069      	eors	r1, r5
 801f48e:	5d05      	ldrb	r5, [r0, r4]
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 801f490:	b2d4      	uxtb	r4, r2
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f492:	404f      	eors	r7, r1
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 801f494:	5d01      	ldrb	r1, [r0, r4]
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 801f496:	f3c2 4407 	ubfx	r4, r2, #16, #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f49a:	ea87 4705 	eor.w	r7, r7, r5, lsl #16
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 801f49e:	5d05      	ldrb	r5, [r0, r4]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f4a0:	ea87 6701 	eor.w	r7, r7, r1, lsl #24
 801f4a4:	6859      	ldr	r1, [r3, #4]
 801f4a6:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801f4aa:	ea87 2705 	eor.w	r7, r7, r5, lsl #8
                RK[5]  = RK[1] ^ RK[4];
 801f4ae:	4079      	eors	r1, r7
                RK[6]  = RK[2] ^ RK[5];
 801f4b0:	ea81 0508 	eor.w	r5, r1, r8
                RK[7]  = RK[3] ^ RK[6];
 801f4b4:	406a      	eors	r2, r5
                RK[5]  = RK[1] ^ RK[4];
 801f4b6:	e9c3 7104 	strd	r7, r1, [r3, #16]
                RK[6]  = RK[2] ^ RK[5];
 801f4ba:	e9c3 5206 	strd	r5, r2, [r3, #24]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 801f4be:	f3c2 2507 	ubfx	r5, r2, #8, #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f4c2:	6874      	ldr	r4, [r6, #4]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 801f4c4:	5d45      	ldrb	r5, [r0, r5]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f4c6:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801f4ca:	f810 e00c 	ldrb.w	lr, [r0, ip]
 801f4ce:	4067      	eors	r7, r4
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 801f4d0:	fa5f fc82 	uxtb.w	ip, r2
 801f4d4:	f810 c00c 	ldrb.w	ip, [r0, ip]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f4d8:	407d      	eors	r5, r7
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 801f4da:	f3c2 4707 	ubfx	r7, r2, #16, #8
 801f4de:	5dc7      	ldrb	r7, [r0, r7]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f4e0:	ea85 450e 	eor.w	r5, r5, lr, lsl #16
 801f4e4:	ea85 650c 	eor.w	r5, r5, ip, lsl #24
 801f4e8:	ea85 2507 	eor.w	r5, r5, r7, lsl #8
                RK[6]  = RK[2] ^ RK[5];
 801f4ec:	ea88 0405 	eor.w	r4, r8, r5
                RK[5]  = RK[1] ^ RK[4];
 801f4f0:	4069      	eors	r1, r5
 801f4f2:	e9c3 1409 	strd	r1, r4, [r3, #36]	; 0x24
                RK[7]  = RK[3] ^ RK[6];
 801f4f6:	ea84 0e02 	eor.w	lr, r4, r2
                RK[4]  = RK[0] ^ RCON[i] ^
 801f4fa:	621d      	str	r5, [r3, #32]
                RK[7]  = RK[3] ^ RK[6];
 801f4fc:	f8c3 e02c 	str.w	lr, [r3, #44]	; 0x2c
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f500:	68b7      	ldr	r7, [r6, #8]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 801f502:	f3ce 2c07 	ubfx	ip, lr, #8, #8
 801f506:	f810 c00c 	ldrb.w	ip, [r0, ip]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f50a:	407d      	eors	r5, r7
 801f50c:	ea4f 671e 	mov.w	r7, lr, lsr #24
 801f510:	f810 8007 	ldrb.w	r8, [r0, r7]
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 801f514:	fa5f f78e 	uxtb.w	r7, lr
 801f518:	5dc7      	ldrb	r7, [r0, r7]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f51a:	ea8c 0505 	eor.w	r5, ip, r5
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 801f51e:	f3ce 4e07 	ubfx	lr, lr, #16, #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f522:	ea85 4c08 	eor.w	ip, r5, r8, lsl #16
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 801f526:	f810 500e 	ldrb.w	r5, [r0, lr]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f52a:	ea8c 6c07 	eor.w	ip, ip, r7, lsl #24
 801f52e:	ea8c 2c05 	eor.w	ip, ip, r5, lsl #8
                RK[5]  = RK[1] ^ RK[4];
 801f532:	ea8c 0101 	eor.w	r1, ip, r1
                RK[4]  = RK[0] ^ RCON[i] ^
 801f536:	e9c3 c10c 	strd	ip, r1, [r3, #48]	; 0x30
                RK[7]  = RK[3] ^ RK[6];
 801f53a:	404a      	eors	r2, r1
                RK[6]  = RK[2] ^ RK[5];
 801f53c:	ea81 0704 	eor.w	r7, r1, r4
                RK[7]  = RK[3] ^ RK[6];
 801f540:	63da      	str	r2, [r3, #60]	; 0x3c
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 801f542:	f3c2 2507 	ubfx	r5, r2, #8, #8
                RK[6]  = RK[2] ^ RK[5];
 801f546:	639f      	str	r7, [r3, #56]	; 0x38
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 801f548:	5d45      	ldrb	r5, [r0, r5]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f54a:	68f7      	ldr	r7, [r6, #12]
 801f54c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801f550:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801f554:	ea8c 0707 	eor.w	r7, ip, r7
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 801f558:	fa5f fc82 	uxtb.w	ip, r2
 801f55c:	f810 c00c 	ldrb.w	ip, [r0, ip]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f560:	407d      	eors	r5, r7
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 801f562:	f3c2 4707 	ubfx	r7, r2, #16, #8
 801f566:	5dc7      	ldrb	r7, [r0, r7]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f568:	ea85 450e 	eor.w	r5, r5, lr, lsl #16
 801f56c:	ea85 650c 	eor.w	r5, r5, ip, lsl #24
 801f570:	ea85 2507 	eor.w	r5, r5, r7, lsl #8
                RK[6]  = RK[2] ^ RK[5];
 801f574:	406c      	eors	r4, r5
                RK[5]  = RK[1] ^ RK[4];
 801f576:	4069      	eors	r1, r5
 801f578:	e9c3 1411 	strd	r1, r4, [r3, #68]	; 0x44
                RK[7]  = RK[3] ^ RK[6];
 801f57c:	ea82 0e04 	eor.w	lr, r2, r4
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f580:	6937      	ldr	r7, [r6, #16]
                RK[4]  = RK[0] ^ RCON[i] ^
 801f582:	641d      	str	r5, [r3, #64]	; 0x40
                RK[7]  = RK[3] ^ RK[6];
 801f584:	f8c3 e04c 	str.w	lr, [r3, #76]	; 0x4c
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 801f588:	f3ce 2c07 	ubfx	ip, lr, #8, #8
 801f58c:	f810 c00c 	ldrb.w	ip, [r0, ip]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f590:	407d      	eors	r5, r7
 801f592:	ea4f 671e 	mov.w	r7, lr, lsr #24
 801f596:	f810 8007 	ldrb.w	r8, [r0, r7]
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 801f59a:	fa5f f78e 	uxtb.w	r7, lr
 801f59e:	5dc7      	ldrb	r7, [r0, r7]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f5a0:	ea8c 0505 	eor.w	r5, ip, r5
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 801f5a4:	f3ce 4e07 	ubfx	lr, lr, #16, #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f5a8:	ea85 4c08 	eor.w	ip, r5, r8, lsl #16
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 801f5ac:	f810 500e 	ldrb.w	r5, [r0, lr]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f5b0:	ea8c 6c07 	eor.w	ip, ip, r7, lsl #24
 801f5b4:	ea8c 2705 	eor.w	r7, ip, r5, lsl #8
                RK[5]  = RK[1] ^ RK[4];
 801f5b8:	4079      	eors	r1, r7
                RK[4]  = RK[0] ^ RCON[i] ^
 801f5ba:	e9c3 7114 	strd	r7, r1, [r3, #80]	; 0x50
                RK[7]  = RK[3] ^ RK[6];
 801f5be:	404a      	eors	r2, r1
                RK[6]  = RK[2] ^ RK[5];
 801f5c0:	ea84 0501 	eor.w	r5, r4, r1
                RK[7]  = RK[3] ^ RK[6];
 801f5c4:	65da      	str	r2, [r3, #92]	; 0x5c
                RK[6]  = RK[2] ^ RK[5];
 801f5c6:	659d      	str	r5, [r3, #88]	; 0x58
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 801f5c8:	f3c2 2507 	ubfx	r5, r2, #8, #8
 801f5cc:	f810 8005 	ldrb.w	r8, [r0, r5]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f5d0:	6975      	ldr	r5, [r6, #20]
 801f5d2:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801f5d6:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801f5da:	406f      	eors	r7, r5
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 801f5dc:	fa5f fc82 	uxtb.w	ip, r2
 801f5e0:	f810 c00c 	ldrb.w	ip, [r0, ip]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f5e4:	ea88 0507 	eor.w	r5, r8, r7
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 801f5e8:	f3c2 4707 	ubfx	r7, r2, #16, #8
 801f5ec:	5dc7      	ldrb	r7, [r0, r7]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f5ee:	ea85 450e 	eor.w	r5, r5, lr, lsl #16
 801f5f2:	ea85 650c 	eor.w	r5, r5, ip, lsl #24
 801f5f6:	ea85 2507 	eor.w	r5, r5, r7, lsl #8
                RK[6]  = RK[2] ^ RK[5];
 801f5fa:	406c      	eors	r4, r5
                RK[5]  = RK[1] ^ RK[4];
 801f5fc:	4069      	eors	r1, r5
 801f5fe:	e9c3 1419 	strd	r1, r4, [r3, #100]	; 0x64
                RK[7]  = RK[3] ^ RK[6];
 801f602:	ea82 0e04 	eor.w	lr, r2, r4
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f606:	69b7      	ldr	r7, [r6, #24]
                RK[4]  = RK[0] ^ RCON[i] ^
 801f608:	661d      	str	r5, [r3, #96]	; 0x60
                RK[7]  = RK[3] ^ RK[6];
 801f60a:	f8c3 e06c 	str.w	lr, [r3, #108]	; 0x6c
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 801f60e:	f3ce 2c07 	ubfx	ip, lr, #8, #8
 801f612:	f810 c00c 	ldrb.w	ip, [r0, ip]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f616:	407d      	eors	r5, r7
 801f618:	ea4f 671e 	mov.w	r7, lr, lsr #24
 801f61c:	f810 8007 	ldrb.w	r8, [r0, r7]
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 801f620:	fa5f f78e 	uxtb.w	r7, lr
 801f624:	5dc7      	ldrb	r7, [r0, r7]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f626:	ea8c 0505 	eor.w	r5, ip, r5
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 801f62a:	f3ce 4e07 	ubfx	lr, lr, #16, #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f62e:	ea85 4c08 	eor.w	ip, r5, r8, lsl #16
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 801f632:	f810 500e 	ldrb.w	r5, [r0, lr]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f636:	ea8c 6c07 	eor.w	ip, ip, r7, lsl #24
 801f63a:	ea8c 2705 	eor.w	r7, ip, r5, lsl #8
                RK[5]  = RK[1] ^ RK[4];
 801f63e:	4079      	eors	r1, r7
                RK[7]  = RK[3] ^ RK[6];
 801f640:	404a      	eors	r2, r1
                RK[6]  = RK[2] ^ RK[5];
 801f642:	ea84 0501 	eor.w	r5, r4, r1
                RK[5]  = RK[1] ^ RK[4];
 801f646:	e9c3 711c 	strd	r7, r1, [r3, #112]	; 0x70
                RK[6]  = RK[2] ^ RK[5];
 801f64a:	e9c3 521e 	strd	r5, r2, [r3, #120]	; 0x78
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 801f64e:	f3c2 2507 	ubfx	r5, r2, #8, #8
 801f652:	f810 8005 	ldrb.w	r8, [r0, r5]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f656:	69f5      	ldr	r5, [r6, #28]
 801f658:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801f65c:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801f660:	406f      	eors	r7, r5
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 801f662:	fa5f fc82 	uxtb.w	ip, r2
 801f666:	f810 c00c 	ldrb.w	ip, [r0, ip]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f66a:	ea88 0507 	eor.w	r5, r8, r7
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 801f66e:	f3c2 4707 	ubfx	r7, r2, #16, #8
 801f672:	5dc7      	ldrb	r7, [r0, r7]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f674:	ea85 450e 	eor.w	r5, r5, lr, lsl #16
 801f678:	ea85 650c 	eor.w	r5, r5, ip, lsl #24
 801f67c:	ea85 2507 	eor.w	r5, r5, r7, lsl #8
                RK[6]  = RK[2] ^ RK[5];
 801f680:	406c      	eors	r4, r5
                RK[5]  = RK[1] ^ RK[4];
 801f682:	4069      	eors	r1, r5
 801f684:	e9c3 1421 	strd	r1, r4, [r3, #132]	; 0x84
                RK[7]  = RK[3] ^ RK[6];
 801f688:	ea82 0c04 	eor.w	ip, r2, r4
                RK[4]  = RK[0] ^ RCON[i] ^
 801f68c:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
                RK[7]  = RK[3] ^ RK[6];
 801f690:	f8c3 c08c 	str.w	ip, [r3, #140]	; 0x8c
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 801f694:	f3cc 2707 	ubfx	r7, ip, #8, #8
 801f698:	f810 9007 	ldrb.w	r9, [r0, r7]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f69c:	6a37      	ldr	r7, [r6, #32]
 801f69e:	ea4f 6e1c 	mov.w	lr, ip, lsr #24
 801f6a2:	f810 800e 	ldrb.w	r8, [r0, lr]
 801f6a6:	407d      	eors	r5, r7
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 801f6a8:	fa5f f78c 	uxtb.w	r7, ip
 801f6ac:	f810 e007 	ldrb.w	lr, [r0, r7]
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 801f6b0:	f3cc 4c07 	ubfx	ip, ip, #16, #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f6b4:	ea85 0509 	eor.w	r5, r5, r9
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 801f6b8:	f810 700c 	ldrb.w	r7, [r0, ip]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f6bc:	ea85 4508 	eor.w	r5, r5, r8, lsl #16
 801f6c0:	ea85 650e 	eor.w	r5, r5, lr, lsl #24
 801f6c4:	ea85 2507 	eor.w	r5, r5, r7, lsl #8
                RK[5]  = RK[1] ^ RK[4];
 801f6c8:	4069      	eors	r1, r5
                RK[4]  = RK[0] ^ RCON[i] ^
 801f6ca:	e9c3 5124 	strd	r5, r1, [r3, #144]	; 0x90
                RK[7]  = RK[3] ^ RK[6];
 801f6ce:	404a      	eors	r2, r1
                RK[6]  = RK[2] ^ RK[5];
 801f6d0:	ea84 0701 	eor.w	r7, r4, r1
                RK[7]  = RK[3] ^ RK[6];
 801f6d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                RK[6]  = RK[2] ^ RK[5];
 801f6d8:	f8c3 7098 	str.w	r7, [r3, #152]	; 0x98
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f6dc:	f8d6 c024 	ldr.w	ip, [r6, #36]	; 0x24
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 801f6e0:	f3c2 2607 	ubfx	r6, r2, #8, #8
 801f6e4:	5d86      	ldrb	r6, [r0, r6]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f6e6:	0e17      	lsrs	r7, r2, #24
 801f6e8:	ea85 050c 	eor.w	r5, r5, ip
 801f6ec:	f810 c007 	ldrb.w	ip, [r0, r7]
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 801f6f0:	b2d7      	uxtb	r7, r2
 801f6f2:	5dc7      	ldrb	r7, [r0, r7]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f6f4:	4075      	eors	r5, r6
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 801f6f6:	f3c2 4607 	ubfx	r6, r2, #16, #8
 801f6fa:	5d86      	ldrb	r6, [r0, r6]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 801f6fc:	ea85 450c 	eor.w	r5, r5, ip, lsl #16
 801f700:	ea85 6007 	eor.w	r0, r5, r7, lsl #24
 801f704:	ea80 2006 	eor.w	r0, r0, r6, lsl #8
                RK[6]  = RK[2] ^ RK[5];
 801f708:	4044      	eors	r4, r0
                RK[7]  = RK[3] ^ RK[6];
 801f70a:	4062      	eors	r2, r4
                RK[5]  = RK[1] ^ RK[4];
 801f70c:	4041      	eors	r1, r0
                RK[6]  = RK[2] ^ RK[5];
 801f70e:	e9c3 422a 	strd	r4, r2, [r3, #168]	; 0xa8
                RK[4]  = RK[0] ^ RCON[i] ^
 801f712:	e9c3 0128 	strd	r0, r1, [r3, #160]	; 0xa0
            for( i = 0; i < 10; i++, RK += 4 )
 801f716:	e4df      	b.n	801f0d8 <mbedtls_aes_setkey_enc+0x70>
 801f718:	20019a08 	.word	0x20019a08
 801f71c:	2001ab20 	.word	0x2001ab20
 801f720:	2001ab08 	.word	0x2001ab08
 801f724:	2001ab04 	.word	0x2001ab04

0801f728 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 801f728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f72c:	4604      	mov	r4, r0
 801f72e:	460d      	mov	r5, r1
 801f730:	4616      	mov	r6, r2
 801f732:	b0cb      	sub	sp, #300	; 0x12c
    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 801f734:	f44f 728c 	mov.w	r2, #280	; 0x118
 801f738:	2100      	movs	r1, #0
 801f73a:	a804      	add	r0, sp, #16
 801f73c:	f010 fb93 	bl	802fe66 <memset>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 801f740:	f104 0308 	add.w	r3, r4, #8

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 801f744:	4632      	mov	r2, r6
 801f746:	4629      	mov	r1, r5
    ctx->rk = RK = ctx->buf;
 801f748:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 801f74a:	a804      	add	r0, sp, #16
 801f74c:	f7ff fc8c 	bl	801f068 <mbedtls_aes_setkey_enc>
 801f750:	9002      	str	r0, [sp, #8]
 801f752:	2800      	cmp	r0, #0
 801f754:	f040 80c7 	bne.w	801f8e6 <mbedtls_aes_setkey_dec+0x1be>
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 801f758:	e9dd e104 	ldrd	lr, r1, [sp, #16]
 801f75c:	ea4f 130e 	mov.w	r3, lr, lsl #4

    *RK++ = *SK++;
 801f760:	58cb      	ldr	r3, [r1, r3]
    SK = cty.rk + cty.nr * 4;
 801f762:	eb01 110e 	add.w	r1, r1, lr, lsl #4
    *RK++ = *SK++;
 801f766:	60a3      	str	r3, [r4, #8]
    *RK++ = *SK++;
 801f768:	684b      	ldr	r3, [r1, #4]
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 801f76a:	f10e 32ff 	add.w	r2, lr, #4294967295
    *RK++ = *SK++;
 801f76e:	60e3      	str	r3, [r4, #12]
    *RK++ = *SK++;
 801f770:	688b      	ldr	r3, [r1, #8]
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 801f772:	2a00      	cmp	r2, #0
    *RK++ = *SK++;
 801f774:	6123      	str	r3, [r4, #16]
    *RK++ = *SK++;
 801f776:	68cb      	ldr	r3, [r1, #12]
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 801f778:	4694      	mov	ip, r2
    *RK++ = *SK++;
 801f77a:	6163      	str	r3, [r4, #20]
 801f77c:	f104 0318 	add.w	r3, r4, #24
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 801f780:	9203      	str	r2, [sp, #12]
    ctx->nr = cty.nr;
 801f782:	f8c4 e000 	str.w	lr, [r4]
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 801f786:	f1a1 0810 	sub.w	r8, r1, #16
    *RK++ = *SK++;
 801f78a:	9301      	str	r3, [sp, #4]
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 801f78c:	f340 809e 	ble.w	801f8cc <mbedtls_aes_setkey_dec+0x1a4>
 801f790:	4859      	ldr	r0, [pc, #356]	; (801f8f8 <mbedtls_aes_setkey_dec+0x1d0>)
 801f792:	4b5a      	ldr	r3, [pc, #360]	; (801f8fc <mbedtls_aes_setkey_dec+0x1d4>)
 801f794:	4f5a      	ldr	r7, [pc, #360]	; (801f900 <mbedtls_aes_setkey_dec+0x1d8>)
 801f796:	4e5b      	ldr	r6, [pc, #364]	; (801f904 <mbedtls_aes_setkey_dec+0x1dc>)
 801f798:	4d5b      	ldr	r5, [pc, #364]	; (801f908 <mbedtls_aes_setkey_dec+0x1e0>)
 801f79a:	3920      	subs	r1, #32
 801f79c:	3428      	adds	r4, #40	; 0x28
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 801f79e:	f8d1 a010 	ldr.w	sl, [r1, #16]
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 801f7a2:	f1bc 0c01 	subs.w	ip, ip, #1
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 801f7a6:	ea4f 691a 	mov.w	r9, sl, lsr #24
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 801f7aa:	fa5f f28a 	uxtb.w	r2, sl
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 801f7ae:	f813 b009 	ldrb.w	fp, [r3, r9]
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 801f7b2:	5c9a      	ldrb	r2, [r3, r2]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 801f7b4:	f3ca 2907 	ubfx	r9, sl, #8, #8
 801f7b8:	f813 9009 	ldrb.w	r9, [r3, r9]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 801f7bc:	f3ca 4a07 	ubfx	sl, sl, #16, #8
 801f7c0:	f857 b02b 	ldr.w	fp, [r7, fp, lsl #2]
 801f7c4:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801f7c8:	f813 a00a 	ldrb.w	sl, [r3, sl]
 801f7cc:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 801f7d0:	f855 a02a 	ldr.w	sl, [r5, sl, lsl #2]
 801f7d4:	ea82 020b 	eor.w	r2, r2, fp
 801f7d8:	ea82 0209 	eor.w	r2, r2, r9
 801f7dc:	ea82 020a 	eor.w	r2, r2, sl
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 801f7e0:	f844 2c10 	str.w	r2, [r4, #-16]
 801f7e4:	f8d1 a014 	ldr.w	sl, [r1, #20]
 801f7e8:	f104 0410 	add.w	r4, r4, #16
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 801f7ec:	ea4f 691a 	mov.w	r9, sl, lsr #24
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 801f7f0:	fa5f f28a 	uxtb.w	r2, sl
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 801f7f4:	f813 b009 	ldrb.w	fp, [r3, r9]
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 801f7f8:	5c9a      	ldrb	r2, [r3, r2]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 801f7fa:	f3ca 2907 	ubfx	r9, sl, #8, #8
 801f7fe:	f813 9009 	ldrb.w	r9, [r3, r9]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 801f802:	f3ca 4a07 	ubfx	sl, sl, #16, #8
 801f806:	f857 b02b 	ldr.w	fp, [r7, fp, lsl #2]
 801f80a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801f80e:	f813 a00a 	ldrb.w	sl, [r3, sl]
 801f812:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 801f816:	f855 a02a 	ldr.w	sl, [r5, sl, lsl #2]
 801f81a:	ea82 020b 	eor.w	r2, r2, fp
 801f81e:	ea82 0209 	eor.w	r2, r2, r9
 801f822:	ea82 020a 	eor.w	r2, r2, sl
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 801f826:	f844 2c1c 	str.w	r2, [r4, #-28]
 801f82a:	f8d1 a018 	ldr.w	sl, [r1, #24]
 801f82e:	f1a1 0110 	sub.w	r1, r1, #16
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 801f832:	ea4f 691a 	mov.w	r9, sl, lsr #24
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 801f836:	fa5f f28a 	uxtb.w	r2, sl
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 801f83a:	f813 b009 	ldrb.w	fp, [r3, r9]
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 801f83e:	5c9a      	ldrb	r2, [r3, r2]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 801f840:	f3ca 2907 	ubfx	r9, sl, #8, #8
 801f844:	f813 9009 	ldrb.w	r9, [r3, r9]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 801f848:	f3ca 4a07 	ubfx	sl, sl, #16, #8
 801f84c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801f850:	f857 b02b 	ldr.w	fp, [r7, fp, lsl #2]
 801f854:	f813 a00a 	ldrb.w	sl, [r3, sl]
 801f858:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 801f85c:	f855 a02a 	ldr.w	sl, [r5, sl, lsl #2]
 801f860:	ea82 020b 	eor.w	r2, r2, fp
 801f864:	ea82 0209 	eor.w	r2, r2, r9
 801f868:	ea82 020a 	eor.w	r2, r2, sl
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 801f86c:	f844 2c18 	str.w	r2, [r4, #-24]
 801f870:	f8d1 a02c 	ldr.w	sl, [r1, #44]	; 0x2c
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 801f874:	ea4f 691a 	mov.w	r9, sl, lsr #24
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 801f878:	fa5f f28a 	uxtb.w	r2, sl
 801f87c:	5c9a      	ldrb	r2, [r3, r2]
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 801f87e:	f813 b009 	ldrb.w	fp, [r3, r9]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 801f882:	f3ca 2907 	ubfx	r9, sl, #8, #8
 801f886:	f813 9009 	ldrb.w	r9, [r3, r9]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 801f88a:	f3ca 4a07 	ubfx	sl, sl, #16, #8
 801f88e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801f892:	f857 b02b 	ldr.w	fp, [r7, fp, lsl #2]
 801f896:	f813 a00a 	ldrb.w	sl, [r3, sl]
 801f89a:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 801f89e:	f855 a02a 	ldr.w	sl, [r5, sl, lsl #2]
 801f8a2:	ea82 020b 	eor.w	r2, r2, fp
 801f8a6:	ea82 0209 	eor.w	r2, r2, r9
 801f8aa:	ea82 020a 	eor.w	r2, r2, sl
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 801f8ae:	f844 2c14 	str.w	r2, [r4, #-20]
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 801f8b2:	f47f af74 	bne.w	801f79e <mbedtls_aes_setkey_dec+0x76>
 801f8b6:	9b01      	ldr	r3, [sp, #4]
 801f8b8:	9a03      	ldr	r2, [sp, #12]
 801f8ba:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 801f8be:	eb08 180e 	add.w	r8, r8, lr, lsl #4
 801f8c2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801f8c6:	f108 0810 	add.w	r8, r8, #16
 801f8ca:	9301      	str	r3, [sp, #4]
        }
    }

    *RK++ = *SK++;
 801f8cc:	f8d8 3000 	ldr.w	r3, [r8]
 801f8d0:	9a01      	ldr	r2, [sp, #4]
 801f8d2:	6013      	str	r3, [r2, #0]
    *RK++ = *SK++;
 801f8d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801f8d8:	6053      	str	r3, [r2, #4]
    *RK++ = *SK++;
 801f8da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801f8de:	6093      	str	r3, [r2, #8]
    *RK++ = *SK++;
 801f8e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801f8e4:	60d3      	str	r3, [r2, #12]
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 801f8e6:	a804      	add	r0, sp, #16
 801f8e8:	f44f 718c 	mov.w	r1, #280	; 0x118
 801f8ec:	f008 f91e 	bl	8027b2c <mbedtls_platform_zeroize>

exit:
    mbedtls_aes_free( &cty );

    return( ret );
}
 801f8f0:	9802      	ldr	r0, [sp, #8]
 801f8f2:	b04b      	add	sp, #300	; 0x12c
 801f8f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f8f8:	2001ac30 	.word	0x2001ac30
 801f8fc:	20019a08 	.word	0x20019a08
 801f900:	2001b830 	.word	0x2001b830
 801f904:	2001b030 	.word	0x2001b030
 801f908:	2001b430 	.word	0x2001b430

0801f90c <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 801f90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK = ctx->rk;
 801f910:	6844      	ldr	r4, [r0, #4]
    GET_UINT32_LE( t.X[0], input,  0 ); t.X[0] ^= *RK++;
    GET_UINT32_LE( t.X[1], input,  4 ); t.X[1] ^= *RK++;
    GET_UINT32_LE( t.X[2], input,  8 ); t.X[2] ^= *RK++;
    GET_UINT32_LE( t.X[3], input, 12 ); t.X[3] ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 801f912:	6800      	ldr	r0, [r0, #0]
{
 801f914:	b091      	sub	sp, #68	; 0x44
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 801f916:	1040      	asrs	r0, r0, #1
 801f918:	3801      	subs	r0, #1
{
 801f91a:	9206      	str	r2, [sp, #24]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 801f91c:	4602      	mov	r2, r0
    GET_UINT32_LE( t.X[0], input,  0 ); t.X[0] ^= *RK++;
 801f91e:	680d      	ldr	r5, [r1, #0]
    GET_UINT32_LE( t.X[1], input,  4 ); t.X[1] ^= *RK++;
 801f920:	684b      	ldr	r3, [r1, #4]
    GET_UINT32_LE( t.X[0], input,  0 ); t.X[0] ^= *RK++;
 801f922:	9508      	str	r5, [sp, #32]
 801f924:	6826      	ldr	r6, [r4, #0]
    GET_UINT32_LE( t.X[3], input, 12 ); t.X[3] ^= *RK++;
 801f926:	68cf      	ldr	r7, [r1, #12]
    GET_UINT32_LE( t.X[0], input,  0 ); t.X[0] ^= *RK++;
 801f928:	ea85 0b06 	eor.w	fp, r5, r6
    GET_UINT32_LE( t.X[1], input,  4 ); t.X[1] ^= *RK++;
 801f92c:	e9cd b308 	strd	fp, r3, [sp, #32]
 801f930:	6865      	ldr	r5, [r4, #4]
    GET_UINT32_LE( t.X[2], input,  8 ); t.X[2] ^= *RK++;
 801f932:	688e      	ldr	r6, [r1, #8]
    GET_UINT32_LE( t.X[1], input,  4 ); t.X[1] ^= *RK++;
 801f934:	406b      	eors	r3, r5
    GET_UINT32_LE( t.X[2], input,  8 ); t.X[2] ^= *RK++;
 801f936:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
 801f93a:	68a5      	ldr	r5, [r4, #8]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 801f93c:	9007      	str	r0, [sp, #28]
    GET_UINT32_LE( t.X[2], input,  8 ); t.X[2] ^= *RK++;
 801f93e:	ea86 0105 	eor.w	r1, r6, r5
    GET_UINT32_LE( t.X[3], input, 12 ); t.X[3] ^= *RK++;
 801f942:	e9cd 170a 	strd	r1, r7, [sp, #40]	; 0x28
 801f946:	68e5      	ldr	r5, [r4, #12]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 801f948:	9002      	str	r0, [sp, #8]
    GET_UINT32_LE( t.X[3], input, 12 ); t.X[3] ^= *RK++;
 801f94a:	ea87 0805 	eor.w	r8, r7, r5
 801f94e:	f104 0010 	add.w	r0, r4, #16
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 801f952:	2a00      	cmp	r2, #0
 801f954:	f8df c39c 	ldr.w	ip, [pc, #924]	; 801fcf4 <mbedtls_internal_aes_encrypt+0x3e8>
 801f958:	f8df e39c 	ldr.w	lr, [pc, #924]	; 801fcf8 <mbedtls_internal_aes_encrypt+0x3ec>
 801f95c:	4ee2      	ldr	r6, [pc, #904]	; (801fce8 <mbedtls_internal_aes_encrypt+0x3dc>)
 801f95e:	4de3      	ldr	r5, [pc, #908]	; (801fcec <mbedtls_internal_aes_encrypt+0x3e0>)
    GET_UINT32_LE( t.X[3], input, 12 ); t.X[3] ^= *RK++;
 801f960:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801f964:	9005      	str	r0, [sp, #20]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 801f966:	f340 80e4 	ble.w	801fb32 <mbedtls_internal_aes_encrypt+0x226>
 801f96a:	4640      	mov	r0, r8
 801f96c:	3430      	adds	r4, #48	; 0x30
 801f96e:	f8cd b004 	str.w	fp, [sp, #4]
    {
        AES_FROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 801f972:	f8dd b004 	ldr.w	fp, [sp, #4]
 801f976:	f854 2c20 	ldr.w	r2, [r4, #-32]
 801f97a:	fa5f f78b 	uxtb.w	r7, fp
 801f97e:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801f982:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 801f986:	f85e a028 	ldr.w	sl, [lr, r8, lsl #2]
 801f98a:	f3c3 2807 	ubfx	r8, r3, #8, #8
 801f98e:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 801f992:	4057      	eors	r7, r2
 801f994:	f3c1 4907 	ubfx	r9, r1, #16, #8
 801f998:	f855 9029 	ldr.w	r9, [r5, r9, lsl #2]
 801f99c:	ea87 070a 	eor.w	r7, r7, sl
 801f9a0:	ea87 0708 	eor.w	r7, r7, r8
 801f9a4:	ea87 0209 	eor.w	r2, r7, r9
 801f9a8:	920c      	str	r2, [sp, #48]	; 0x30
 801f9aa:	fa5f f883 	uxtb.w	r8, r3
 801f9ae:	f85c 7028 	ldr.w	r7, [ip, r8, lsl #2]
 801f9b2:	9203      	str	r2, [sp, #12]
 801f9b4:	ea4f 681b 	mov.w	r8, fp, lsr #24
 801f9b8:	f854 2c1c 	ldr.w	r2, [r4, #-28]
 801f9bc:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
 801f9c0:	f3c1 2907 	ubfx	r9, r1, #8, #8
 801f9c4:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 801f9c8:	4057      	eors	r7, r2
 801f9ca:	f3c0 4a07 	ubfx	sl, r0, #16, #8
 801f9ce:	f855 a02a 	ldr.w	sl, [r5, sl, lsl #2]
 801f9d2:	ea87 0708 	eor.w	r7, r7, r8
 801f9d6:	ea87 0809 	eor.w	r8, r7, r9
 801f9da:	ea88 080a 	eor.w	r8, r8, sl
 801f9de:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 801f9e2:	fa5f f981 	uxtb.w	r9, r1
 801f9e6:	f854 2c18 	ldr.w	r2, [r4, #-24]
 801f9ea:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 801f9ee:	ea4f 6913 	mov.w	r9, r3, lsr #24
 801f9f2:	407a      	eors	r2, r7
 801f9f4:	9204      	str	r2, [sp, #16]
 801f9f6:	465a      	mov	r2, fp
 801f9f8:	f85e a029 	ldr.w	sl, [lr, r9, lsl #2]
 801f9fc:	9f04      	ldr	r7, [sp, #16]
 801f9fe:	f3c0 2907 	ubfx	r9, r0, #8, #8
 801fa02:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 801fa06:	f3cb 4b07 	ubfx	fp, fp, #16, #8
 801fa0a:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 801fa0e:	ea87 070a 	eor.w	r7, r7, sl
 801fa12:	ea87 0709 	eor.w	r7, r7, r9
 801fa16:	ea87 070b 	eor.w	r7, r7, fp
 801fa1a:	970e      	str	r7, [sp, #56]	; 0x38
 801fa1c:	b2c0      	uxtb	r0, r0
 801fa1e:	f85c b020 	ldr.w	fp, [ip, r0, lsl #2]
 801fa22:	ea4f 6911 	mov.w	r9, r1, lsr #24
 801fa26:	f854 1c14 	ldr.w	r1, [r4, #-20]
 801fa2a:	f85e 0029 	ldr.w	r0, [lr, r9, lsl #2]
 801fa2e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801fa32:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 801fa36:	ea8b 0901 	eor.w	r9, fp, r1
 801fa3a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801fa3e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801fa42:	ea89 0900 	eor.w	r9, r9, r0
        AES_FROUND( t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3] );
 801fa46:	f8dd b00c 	ldr.w	fp, [sp, #12]
        AES_FROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 801fa4a:	ea89 0902 	eor.w	r9, r9, r2
 801fa4e:	ea89 0903 	eor.w	r9, r9, r3
        AES_FROUND( t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3] );
 801fa52:	ea4f 6219 	mov.w	r2, r9, lsr #24
 801fa56:	fa5f f38b 	uxtb.w	r3, fp
 801fa5a:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
        AES_FROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 801fa5e:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
        AES_FROUND( t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3] );
 801fa62:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 801fa66:	f854 3c10 	ldr.w	r3, [r4, #-16]
 801fa6a:	f3c8 2107 	ubfx	r1, r8, #8, #8
 801fa6e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801fa72:	4042      	eors	r2, r0
 801fa74:	f3c7 4007 	ubfx	r0, r7, #16, #8
 801fa78:	405a      	eors	r2, r3
 801fa7a:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 801fa7e:	404a      	eors	r2, r1
 801fa80:	405a      	eors	r2, r3
 801fa82:	465b      	mov	r3, fp
 801fa84:	fa5f f188 	uxtb.w	r1, r8
 801fa88:	0e1b      	lsrs	r3, r3, #24
 801fa8a:	9208      	str	r2, [sp, #32]
 801fa8c:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 801fa90:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 801fa94:	9201      	str	r2, [sp, #4]
 801fa96:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 801fa9a:	404b      	eors	r3, r1
 801fa9c:	ea83 0102 	eor.w	r1, r3, r2
 801faa0:	465a      	mov	r2, fp
 801faa2:	f3c7 2007 	ubfx	r0, r7, #8, #8
 801faa6:	f3c9 4a07 	ubfx	sl, r9, #16, #8
 801faaa:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801faae:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
 801fab2:	4041      	eors	r1, r0
 801fab4:	404b      	eors	r3, r1
 801fab6:	b2f8      	uxtb	r0, r7
 801fab8:	ea4f 6118 	mov.w	r1, r8, lsr #24
 801fabc:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 801fac0:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 801fac4:	9309      	str	r3, [sp, #36]	; 0x24
 801fac6:	4041      	eors	r1, r0
 801fac8:	f3c9 2a07 	ubfx	sl, r9, #8, #8
 801facc:	f854 0c08 	ldr.w	r0, [r4, #-8]
 801fad0:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
 801fad4:	f3cb 4b07 	ubfx	fp, fp, #16, #8
 801fad8:	4048      	eors	r0, r1
 801fada:	f855 102b 	ldr.w	r1, [r5, fp, lsl #2]
 801fade:	ea80 000a 	eor.w	r0, r0, sl
 801fae2:	0e3f      	lsrs	r7, r7, #24
 801fae4:	fa5f f989 	uxtb.w	r9, r9
 801fae8:	4041      	eors	r1, r0
 801faea:	910a      	str	r1, [sp, #40]	; 0x28
 801faec:	f85e 0027 	ldr.w	r0, [lr, r7, lsl #2]
 801faf0:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 801faf4:	f3c2 2907 	ubfx	r9, r2, #8, #8
 801faf8:	f854 2c04 	ldr.w	r2, [r4, #-4]
 801fafc:	4078      	eors	r0, r7
 801fafe:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 801fb02:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801fb06:	4050      	eors	r0, r2
 801fb08:	f855 7028 	ldr.w	r7, [r5, r8, lsl #2]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 801fb0c:	9a02      	ldr	r2, [sp, #8]
        AES_FROUND( t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3] );
 801fb0e:	ea80 0009 	eor.w	r0, r0, r9
 801fb12:	4078      	eors	r0, r7
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 801fb14:	3a01      	subs	r2, #1
        AES_FROUND( t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3] );
 801fb16:	900b      	str	r0, [sp, #44]	; 0x2c
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 801fb18:	f104 0420 	add.w	r4, r4, #32
 801fb1c:	9202      	str	r2, [sp, #8]
 801fb1e:	f47f af28 	bne.w	801f972 <mbedtls_internal_aes_encrypt+0x66>
 801fb22:	9a05      	ldr	r2, [sp, #20]
 801fb24:	4680      	mov	r8, r0
 801fb26:	9807      	ldr	r0, [sp, #28]
 801fb28:	f8dd b004 	ldr.w	fp, [sp, #4]
 801fb2c:	eb02 1240 	add.w	r2, r2, r0, lsl #5
 801fb30:	9205      	str	r2, [sp, #20]
    }

    AES_FROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 801fb32:	fa5f f08b 	uxtb.w	r0, fp
 801fb36:	ea4f 6218 	mov.w	r2, r8, lsr #24
 801fb3a:	f85c 7020 	ldr.w	r7, [ip, r0, lsl #2]
 801fb3e:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 801fb42:	9a05      	ldr	r2, [sp, #20]
 801fb44:	f3c3 2407 	ubfx	r4, r3, #8, #8
 801fb48:	6812      	ldr	r2, [r2, #0]
 801fb4a:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 801fb4e:	4078      	eors	r0, r7
 801fb50:	f3c1 4707 	ubfx	r7, r1, #16, #8
 801fb54:	4050      	eors	r0, r2
 801fb56:	f855 2027 	ldr.w	r2, [r5, r7, lsl #2]
 801fb5a:	4060      	eors	r0, r4
 801fb5c:	4050      	eors	r0, r2
 801fb5e:	900c      	str	r0, [sp, #48]	; 0x30
 801fb60:	9001      	str	r0, [sp, #4]
 801fb62:	b2dc      	uxtb	r4, r3
 801fb64:	9805      	ldr	r0, [sp, #20]
 801fb66:	ea4f 621b 	mov.w	r2, fp, lsr #24
 801fb6a:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 801fb6e:	f85e 4022 	ldr.w	r4, [lr, r2, lsl #2]
 801fb72:	f3c1 2907 	ubfx	r9, r1, #8, #8
 801fb76:	6842      	ldr	r2, [r0, #4]
 801fb78:	407c      	eors	r4, r7
 801fb7a:	f856 7029 	ldr.w	r7, [r6, r9, lsl #2]
 801fb7e:	f3c8 4907 	ubfx	r9, r8, #16, #8
 801fb82:	4062      	eors	r2, r4
 801fb84:	f855 4029 	ldr.w	r4, [r5, r9, lsl #2]
 801fb88:	4057      	eors	r7, r2
 801fb8a:	4067      	eors	r7, r4
 801fb8c:	0e1a      	lsrs	r2, r3, #24
 801fb8e:	b2cc      	uxtb	r4, r1
 801fb90:	970d      	str	r7, [sp, #52]	; 0x34
 801fb92:	f85c a024 	ldr.w	sl, [ip, r4, lsl #2]
 801fb96:	f85e 4022 	ldr.w	r4, [lr, r2, lsl #2]
 801fb9a:	f3c8 2907 	ubfx	r9, r8, #8, #8
 801fb9e:	6882      	ldr	r2, [r0, #8]
 801fba0:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 801fba4:	ea8a 0404 	eor.w	r4, sl, r4
 801fba8:	f3cb 4a07 	ubfx	sl, fp, #16, #8
 801fbac:	4062      	eors	r2, r4
 801fbae:	f855 402a 	ldr.w	r4, [r5, sl, lsl #2]
 801fbb2:	ea82 0209 	eor.w	r2, r2, r9
 801fbb6:	4062      	eors	r2, r4
 801fbb8:	0e09      	lsrs	r1, r1, #24
 801fbba:	fa5f f888 	uxtb.w	r8, r8
 801fbbe:	920e      	str	r2, [sp, #56]	; 0x38
 801fbc0:	f85e 4021 	ldr.w	r4, [lr, r1, lsl #2]
 801fbc4:	f85c 1028 	ldr.w	r1, [ip, r8, lsl #2]
 801fbc8:	68c0      	ldr	r0, [r0, #12]
 801fbca:	f3cb 2c07 	ubfx	ip, fp, #8, #8
 801fbce:	f856 602c 	ldr.w	r6, [r6, ip, lsl #2]
 801fbd2:	404c      	eors	r4, r1
 801fbd4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801fbd8:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 801fbdc:	ea84 0300 	eor.w	r3, r4, r0

    t.X[0] = *RK++ ^ \
            ( (uint32_t) FSb[ ( t.Y[0]       ) & 0xFF ]       ) ^
 801fbe0:	f8dd e004 	ldr.w	lr, [sp, #4]
    AES_FROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 801fbe4:	4073      	eors	r3, r6
 801fbe6:	406b      	eors	r3, r5
            ( (uint32_t) FSb[ ( t.Y[1] >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( t.Y[2] >> 16 ) & 0xFF ] << 16 ) ^
 801fbe8:	9805      	ldr	r0, [sp, #20]
            ( (uint32_t) FSb[ ( t.Y[0]       ) & 0xFF ]       ) ^
 801fbea:	4d41      	ldr	r5, [pc, #260]	; (801fcf0 <mbedtls_internal_aes_encrypt+0x3e4>)
    AES_FROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 801fbec:	930f      	str	r3, [sp, #60]	; 0x3c
            ( (uint32_t) FSb[ ( t.Y[0]       ) & 0xFF ]       ) ^
 801fbee:	fa5f f18e 	uxtb.w	r1, lr
            ( (uint32_t) FSb[ ( t.Y[2] >> 16 ) & 0xFF ] << 16 ) ^
 801fbf2:	6904      	ldr	r4, [r0, #16]
            ( (uint32_t) FSb[ ( t.Y[0]       ) & 0xFF ]       ) ^
 801fbf4:	5c69      	ldrb	r1, [r5, r1]
            ( (uint32_t) FSb[ ( t.Y[3] >> 24 ) & 0xFF ] << 24 );
 801fbf6:	0e1e      	lsrs	r6, r3, #24
 801fbf8:	f815 c006 	ldrb.w	ip, [r5, r6]
            ( (uint32_t) FSb[ ( t.Y[1] >>  8 ) & 0xFF ] <<  8 ) ^
 801fbfc:	f3c7 2607 	ubfx	r6, r7, #8, #8
 801fc00:	5dae      	ldrb	r6, [r5, r6]
            ( (uint32_t) FSb[ ( t.Y[2] >> 16 ) & 0xFF ] << 16 ) ^
 801fc02:	4061      	eors	r1, r4
 801fc04:	f3c2 4407 	ubfx	r4, r2, #16, #8
 801fc08:	5d2c      	ldrb	r4, [r5, r4]
 801fc0a:	ea81 610c 	eor.w	r1, r1, ip, lsl #24
 801fc0e:	ea81 2106 	eor.w	r1, r1, r6, lsl #8

    t.X[1] = *RK++ ^ \
            ( (uint32_t) FSb[ ( t.Y[1]       ) & 0xFF ]       ) ^
 801fc12:	fa5f fc87 	uxtb.w	ip, r7
 801fc16:	f815 c00c 	ldrb.w	ip, [r5, ip]
            ( (uint32_t) FSb[ ( t.Y[2] >> 16 ) & 0xFF ] << 16 ) ^
 801fc1a:	ea81 4104 	eor.w	r1, r1, r4, lsl #16
            ( (uint32_t) FSb[ ( t.Y[2] >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( t.Y[3] >> 16 ) & 0xFF ] << 16 ) ^
 801fc1e:	6944      	ldr	r4, [r0, #20]
            ( (uint32_t) FSb[ ( t.Y[0] >> 24 ) & 0xFF ] << 24 );

    t.X[2] = *RK++ ^ \
            ( (uint32_t) FSb[ ( t.Y[2]       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( t.Y[3] >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( t.Y[0] >> 16 ) & 0xFF ] << 16 ) ^
 801fc20:	9805      	ldr	r0, [sp, #20]
            ( (uint32_t) FSb[ ( t.Y[0] >> 24 ) & 0xFF ] << 24 );
 801fc22:	ea4f 681e 	mov.w	r8, lr, lsr #24
            ( (uint32_t) FSb[ ( t.Y[1] >> 24 ) & 0xFF ] << 24 );

    t.X[3] = *RK++ ^ \
            ( (uint32_t) FSb[ ( t.Y[3]       ) & 0xFF ]       ) ^
 801fc26:	b2de      	uxtb	r6, r3
            ( (uint32_t) FSb[ ( t.Y[2]       ) & 0xFF ]       ) ^
 801fc28:	fa5f fe82 	uxtb.w	lr, r2
 801fc2c:	f815 e00e 	ldrb.w	lr, [r5, lr]
            ( (uint32_t) FSb[ ( t.Y[0] >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( t.Y[1] >> 16 ) & 0xFF ] << 16 ) ^
 801fc30:	f8d0 901c 	ldr.w	r9, [r0, #28]
    t.X[0] = *RK++ ^ \
 801fc34:	9102      	str	r1, [sp, #8]
 801fc36:	9108      	str	r1, [sp, #32]
            ( (uint32_t) FSb[ ( t.Y[1] >> 24 ) & 0xFF ] << 24 );
 801fc38:	ea4f 6a17 	mov.w	sl, r7, lsr #24
            ( (uint32_t) FSb[ ( t.Y[0] >> 24 ) & 0xFF ] << 24 );
 801fc3c:	f815 1008 	ldrb.w	r1, [r5, r8]
            ( (uint32_t) FSb[ ( t.Y[3] >> 16 ) & 0xFF ] << 16 ) ^
 801fc40:	ea8c 0c04 	eor.w	ip, ip, r4
            ( (uint32_t) FSb[ ( t.Y[3]       ) & 0xFF ]       ) ^
 801fc44:	f815 8006 	ldrb.w	r8, [r5, r6]
            ( (uint32_t) FSb[ ( t.Y[3] >>  8 ) & 0xFF ] <<  8 ) ^
 801fc48:	f3c3 2407 	ubfx	r4, r3, #8, #8
            ( (uint32_t) FSb[ ( t.Y[0] >> 16 ) & 0xFF ] << 16 ) ^
 801fc4c:	6986      	ldr	r6, [r0, #24]
            ( (uint32_t) FSb[ ( t.Y[3] >> 16 ) & 0xFF ] << 16 ) ^
 801fc4e:	f3c3 4307 	ubfx	r3, r3, #16, #8
            ( (uint32_t) FSb[ ( t.Y[0] >>  8 ) & 0xFF ] <<  8 ) ^
 801fc52:	9801      	ldr	r0, [sp, #4]
            ( (uint32_t) FSb[ ( t.Y[1] >> 24 ) & 0xFF ] << 24 );
 801fc54:	f815 a00a 	ldrb.w	sl, [r5, sl]
            ( (uint32_t) FSb[ ( t.Y[3] >> 16 ) & 0xFF ] << 16 ) ^
 801fc58:	9303      	str	r3, [sp, #12]
            ( (uint32_t) FSb[ ( t.Y[2] >> 24 ) & 0xFF ] << 24 );
 801fc5a:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801fc5e:	f815 b00b 	ldrb.w	fp, [r5, fp]
            ( (uint32_t) FSb[ ( t.Y[3] >>  8 ) & 0xFF ] <<  8 ) ^
 801fc62:	5d2c      	ldrb	r4, [r5, r4]
            ( (uint32_t) FSb[ ( t.Y[3] >> 16 ) & 0xFF ] << 16 ) ^
 801fc64:	9b03      	ldr	r3, [sp, #12]
            ( (uint32_t) FSb[ ( t.Y[1] >> 16 ) & 0xFF ] << 16 ) ^
 801fc66:	ea88 0809 	eor.w	r8, r8, r9
            ( (uint32_t) FSb[ ( t.Y[0] >> 16 ) & 0xFF ] << 16 ) ^
 801fc6a:	ea8e 0606 	eor.w	r6, lr, r6
            ( (uint32_t) FSb[ ( t.Y[0] >>  8 ) & 0xFF ] <<  8 ) ^
 801fc6e:	f3c0 2907 	ubfx	r9, r0, #8, #8
            ( (uint32_t) FSb[ ( t.Y[0] >> 16 ) & 0xFF ] << 16 ) ^
 801fc72:	f3c0 4007 	ubfx	r0, r0, #16, #8
            ( (uint32_t) FSb[ ( t.Y[0] >>  8 ) & 0xFF ] <<  8 ) ^
 801fc76:	f815 9009 	ldrb.w	r9, [r5, r9]
            ( (uint32_t) FSb[ ( t.Y[0] >> 16 ) & 0xFF ] << 16 ) ^
 801fc7a:	5c28      	ldrb	r0, [r5, r0]
 801fc7c:	ea86 660a 	eor.w	r6, r6, sl, lsl #24
            ( (uint32_t) FSb[ ( t.Y[3] >> 16 ) & 0xFF ] << 16 ) ^
 801fc80:	ea8c 6c01 	eor.w	ip, ip, r1, lsl #24
            ( (uint32_t) FSb[ ( t.Y[2] >>  8 ) & 0xFF ] <<  8 ) ^
 801fc84:	f3c2 2207 	ubfx	r2, r2, #8, #8

    PUT_UINT32_LE( t.X[0], output,  0 );
 801fc88:	9902      	ldr	r1, [sp, #8]
            ( (uint32_t) FSb[ ( t.Y[1] >> 16 ) & 0xFF ] << 16 ) ^
 801fc8a:	f3c7 4707 	ubfx	r7, r7, #16, #8
            ( (uint32_t) FSb[ ( t.Y[3] >> 16 ) & 0xFF ] << 16 ) ^
 801fc8e:	f815 e003 	ldrb.w	lr, [r5, r3]
            ( (uint32_t) FSb[ ( t.Y[2] >>  8 ) & 0xFF ] <<  8 ) ^
 801fc92:	5caa      	ldrb	r2, [r5, r2]
            ( (uint32_t) FSb[ ( t.Y[1] >> 16 ) & 0xFF ] << 16 ) ^
 801fc94:	5def      	ldrb	r7, [r5, r7]
            ( (uint32_t) FSb[ ( t.Y[0] >> 16 ) & 0xFF ] << 16 ) ^
 801fc96:	ea86 2304 	eor.w	r3, r6, r4, lsl #8
            ( (uint32_t) FSb[ ( t.Y[1] >> 16 ) & 0xFF ] << 16 ) ^
 801fc9a:	ea88 680b 	eor.w	r8, r8, fp, lsl #24
            ( (uint32_t) FSb[ ( t.Y[0] >> 16 ) & 0xFF ] << 16 ) ^
 801fc9e:	ea83 4300 	eor.w	r3, r3, r0, lsl #16
    PUT_UINT32_LE( t.X[0], output,  0 );
 801fca2:	9e02      	ldr	r6, [sp, #8]
            ( (uint32_t) FSb[ ( t.Y[1] >> 16 ) & 0xFF ] << 16 ) ^
 801fca4:	ea88 2809 	eor.w	r8, r8, r9, lsl #8
    PUT_UINT32_LE( t.X[0], output,  0 );
 801fca8:	0a08      	lsrs	r0, r1, #8
 801fcaa:	ea4f 4b11 	mov.w	fp, r1, lsr #16
 801fcae:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801fcb2:	9906      	ldr	r1, [sp, #24]
            ( (uint32_t) FSb[ ( t.Y[3] >> 16 ) & 0xFF ] << 16 ) ^
 801fcb4:	ea8c 2c02 	eor.w	ip, ip, r2, lsl #8
            ( (uint32_t) FSb[ ( t.Y[1] >> 16 ) & 0xFF ] << 16 ) ^
 801fcb8:	ea88 4207 	eor.w	r2, r8, r7, lsl #16
            ( (uint32_t) FSb[ ( t.Y[3] >> 16 ) & 0xFF ] << 16 ) ^
 801fcbc:	ea8c 440e 	eor.w	r4, ip, lr, lsl #16
    PUT_UINT32_LE( t.X[0], output,  0 );
 801fcc0:	700e      	strb	r6, [r1, #0]
    PUT_UINT32_LE( t.X[1], output,  4 );
    PUT_UINT32_LE( t.X[2], output,  8 );
    PUT_UINT32_LE( t.X[3], output, 12 );
 801fcc2:	0e16      	lsrs	r6, r2, #24
 801fcc4:	730a      	strb	r2, [r1, #12]
    PUT_UINT32_LE( t.X[2], output,  8 );
 801fcc6:	720b      	strb	r3, [r1, #8]
    PUT_UINT32_LE( t.X[0], output,  0 );
 801fcc8:	7048      	strb	r0, [r1, #1]
    PUT_UINT32_LE( t.X[1], output,  4 );
 801fcca:	710c      	strb	r4, [r1, #4]
    PUT_UINT32_LE( t.X[0], output,  0 );
 801fccc:	f881 b002 	strb.w	fp, [r1, #2]
 801fcd0:	f881 a003 	strb.w	sl, [r1, #3]
    PUT_UINT32_LE( t.X[3], output, 12 );
 801fcd4:	73ce      	strb	r6, [r1, #15]
    PUT_UINT32_LE( t.X[2], output,  8 );
 801fcd6:	0a1e      	lsrs	r6, r3, #8
 801fcd8:	0e18      	lsrs	r0, r3, #24
    PUT_UINT32_LE( t.X[1], output,  4 );
 801fcda:	ea4f 6e14 	mov.w	lr, r4, lsr #24
    PUT_UINT32_LE( t.X[3], output, 12 );
 801fcde:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 801fce2:	0c17      	lsrs	r7, r2, #16
    PUT_UINT32_LE( t.X[2], output,  8 );
 801fce4:	724e      	strb	r6, [r1, #9]
 801fce6:	e009      	b.n	801fcfc <mbedtls_internal_aes_encrypt+0x3f0>
 801fce8:	20019f08 	.word	0x20019f08
 801fcec:	2001a308 	.word	0x2001a308
 801fcf0:	20019a08 	.word	0x20019a08
 801fcf4:	20019b08 	.word	0x20019b08
 801fcf8:	2001a708 	.word	0x2001a708
    PUT_UINT32_LE( t.X[1], output,  4 );
 801fcfc:	ea4f 2914 	mov.w	r9, r4, lsr #8
    PUT_UINT32_LE( t.X[2], output,  8 );
 801fd00:	0c1e      	lsrs	r6, r3, #16
    PUT_UINT32_LE( t.X[1], output,  4 );
 801fd02:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801fd06:	f881 9005 	strb.w	r9, [r1, #5]
 801fd0a:	f881 8006 	strb.w	r8, [r1, #6]
 801fd0e:	f881 e007 	strb.w	lr, [r1, #7]
    PUT_UINT32_LE( t.X[3], output, 12 );
 801fd12:	f881 c00d 	strb.w	ip, [r1, #13]
 801fd16:	738f      	strb	r7, [r1, #14]
    PUT_UINT32_LE( t.X[2], output,  8 );
 801fd18:	728e      	strb	r6, [r1, #10]
 801fd1a:	72c8      	strb	r0, [r1, #11]

    mbedtls_platform_zeroize( &t, sizeof( t ) );
 801fd1c:	2120      	movs	r1, #32
 801fd1e:	eb0d 0001 	add.w	r0, sp, r1
    t.X[2] = *RK++ ^ \
 801fd22:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    t.X[1] = *RK++ ^ \
 801fd26:	9409      	str	r4, [sp, #36]	; 0x24
    mbedtls_platform_zeroize( &t, sizeof( t ) );
 801fd28:	f007 ff00 	bl	8027b2c <mbedtls_platform_zeroize>

    return( 0 );
}
 801fd2c:	2000      	movs	r0, #0
 801fd2e:	b011      	add	sp, #68	; 0x44
 801fd30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fd34 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 801fd34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    {
        uint32_t X[4];
        uint32_t Y[4];
    } t;

    GET_UINT32_LE( t.X[0], input,  0 ); t.X[0] ^= *RK++;
 801fd38:	680d      	ldr	r5, [r1, #0]
{
 801fd3a:	b091      	sub	sp, #68	; 0x44
    uint32_t *RK = ctx->rk;
 801fd3c:	6844      	ldr	r4, [r0, #4]
    GET_UINT32_LE( t.X[0], input,  0 ); t.X[0] ^= *RK++;
 801fd3e:	9508      	str	r5, [sp, #32]
 801fd40:	6826      	ldr	r6, [r4, #0]
    GET_UINT32_LE( t.X[1], input,  4 ); t.X[1] ^= *RK++;
 801fd42:	684b      	ldr	r3, [r1, #4]
    GET_UINT32_LE( t.X[0], input,  0 ); t.X[0] ^= *RK++;
 801fd44:	ea85 0b06 	eor.w	fp, r5, r6
    GET_UINT32_LE( t.X[1], input,  4 ); t.X[1] ^= *RK++;
 801fd48:	e9cd b308 	strd	fp, r3, [sp, #32]
 801fd4c:	6865      	ldr	r5, [r4, #4]
    GET_UINT32_LE( t.X[2], input,  8 ); t.X[2] ^= *RK++;
 801fd4e:	688f      	ldr	r7, [r1, #8]
    GET_UINT32_LE( t.X[1], input,  4 ); t.X[1] ^= *RK++;
 801fd50:	406b      	eors	r3, r5
    GET_UINT32_LE( t.X[2], input,  8 ); t.X[2] ^= *RK++;
 801fd52:	e9cd 3709 	strd	r3, r7, [sp, #36]	; 0x24
 801fd56:	68a5      	ldr	r5, [r4, #8]
    GET_UINT32_LE( t.X[3], input, 12 ); t.X[3] ^= *RK++;
 801fd58:	68ce      	ldr	r6, [r1, #12]
    GET_UINT32_LE( t.X[2], input,  8 ); t.X[2] ^= *RK++;
 801fd5a:	ea87 0105 	eor.w	r1, r7, r5
    GET_UINT32_LE( t.X[3], input, 12 ); t.X[3] ^= *RK++;
 801fd5e:	e9cd 160a 	strd	r1, r6, [sp, #40]	; 0x28

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 801fd62:	6805      	ldr	r5, [r0, #0]
    GET_UINT32_LE( t.X[3], input, 12 ); t.X[3] ^= *RK++;
 801fd64:	68e0      	ldr	r0, [r4, #12]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 801fd66:	106d      	asrs	r5, r5, #1
 801fd68:	3d01      	subs	r5, #1
    GET_UINT32_LE( t.X[3], input, 12 ); t.X[3] ^= *RK++;
 801fd6a:	ea86 0900 	eor.w	r9, r6, r0
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 801fd6e:	2d00      	cmp	r5, #0
    GET_UINT32_LE( t.X[3], input, 12 ); t.X[3] ^= *RK++;
 801fd70:	f104 0010 	add.w	r0, r4, #16
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 801fd74:	9507      	str	r5, [sp, #28]
 801fd76:	9503      	str	r5, [sp, #12]
 801fd78:	f8df e394 	ldr.w	lr, [pc, #916]	; 8020110 <mbedtls_internal_aes_decrypt+0x3dc>
 801fd7c:	f8df c394 	ldr.w	ip, [pc, #916]	; 8020114 <mbedtls_internal_aes_decrypt+0x3e0>
 801fd80:	4ee0      	ldr	r6, [pc, #896]	; (8020104 <mbedtls_internal_aes_decrypt+0x3d0>)
 801fd82:	4de1      	ldr	r5, [pc, #900]	; (8020108 <mbedtls_internal_aes_decrypt+0x3d4>)
{
 801fd84:	9206      	str	r2, [sp, #24]
    GET_UINT32_LE( t.X[3], input, 12 ); t.X[3] ^= *RK++;
 801fd86:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 801fd8a:	9005      	str	r0, [sp, #20]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 801fd8c:	f340 80e5 	ble.w	801ff5a <mbedtls_internal_aes_decrypt+0x226>
 801fd90:	4648      	mov	r0, r9
 801fd92:	e9cd 3b01 	strd	r3, fp, [sp, #4]
 801fd96:	3430      	adds	r4, #48	; 0x30
    {
        AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 801fd98:	9b02      	ldr	r3, [sp, #8]
 801fd9a:	9a01      	ldr	r2, [sp, #4]
 801fd9c:	b2df      	uxtb	r7, r3
 801fd9e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801fda2:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 801fda6:	f854 2c20 	ldr.w	r2, [r4, #-32]
 801fdaa:	f85c a028 	ldr.w	sl, [ip, r8, lsl #2]
 801fdae:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801fdb2:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 801fdb6:	4057      	eors	r7, r2
 801fdb8:	f3c1 4907 	ubfx	r9, r1, #16, #8
 801fdbc:	f855 9029 	ldr.w	r9, [r5, r9, lsl #2]
 801fdc0:	ea87 070a 	eor.w	r7, r7, sl
 801fdc4:	ea87 0708 	eor.w	r7, r7, r8
 801fdc8:	ea87 0709 	eor.w	r7, r7, r9
 801fdcc:	f89d 8004 	ldrb.w	r8, [sp, #4]
 801fdd0:	970c      	str	r7, [sp, #48]	; 0x30
 801fdd2:	f854 2c1c 	ldr.w	r2, [r4, #-28]
 801fdd6:	9704      	str	r7, [sp, #16]
 801fdd8:	f85e 7028 	ldr.w	r7, [lr, r8, lsl #2]
 801fddc:	ea4f 6811 	mov.w	r8, r1, lsr #24
 801fde0:	f85c 8028 	ldr.w	r8, [ip, r8, lsl #2]
 801fde4:	f3c3 2907 	ubfx	r9, r3, #8, #8
 801fde8:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 801fdec:	4057      	eors	r7, r2
 801fdee:	f3c0 4a07 	ubfx	sl, r0, #16, #8
 801fdf2:	f855 a02a 	ldr.w	sl, [r5, sl, lsl #2]
 801fdf6:	ea87 0708 	eor.w	r7, r7, r8
 801fdfa:	ea87 0809 	eor.w	r8, r7, r9
 801fdfe:	ea88 080a 	eor.w	r8, r8, sl
 801fe02:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 801fe06:	fa5f f981 	uxtb.w	r9, r1
 801fe0a:	f854 2c18 	ldr.w	r2, [r4, #-24]
 801fe0e:	f85e 7029 	ldr.w	r7, [lr, r9, lsl #2]
 801fe12:	9b01      	ldr	r3, [sp, #4]
 801fe14:	ea4f 6910 	mov.w	r9, r0, lsr #24
 801fe18:	4057      	eors	r7, r2
 801fe1a:	9a02      	ldr	r2, [sp, #8]
 801fe1c:	f85c a029 	ldr.w	sl, [ip, r9, lsl #2]
 801fe20:	f3c3 2907 	ubfx	r9, r3, #8, #8
 801fe24:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 801fe28:	f3c2 4b07 	ubfx	fp, r2, #16, #8
 801fe2c:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 801fe30:	ea87 070a 	eor.w	r7, r7, sl
 801fe34:	ea87 0709 	eor.w	r7, r7, r9
 801fe38:	ea87 070b 	eor.w	r7, r7, fp
 801fe3c:	9b01      	ldr	r3, [sp, #4]
 801fe3e:	970e      	str	r7, [sp, #56]	; 0x38
 801fe40:	b2c0      	uxtb	r0, r0
 801fe42:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 801fe46:	f3c3 4b07 	ubfx	fp, r3, #16, #8
 801fe4a:	0e12      	lsrs	r2, r2, #24
 801fe4c:	f854 3c14 	ldr.w	r3, [r4, #-20]
 801fe50:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 801fe54:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801fe58:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801fe5c:	ea80 0903 	eor.w	r9, r0, r3
 801fe60:	ea89 0902 	eor.w	r9, r9, r2
 801fe64:	f855 302b 	ldr.w	r3, [r5, fp, lsl #2]
        AES_RROUND( t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3] );
 801fe68:	f8dd b010 	ldr.w	fp, [sp, #16]
        AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 801fe6c:	ea89 0901 	eor.w	r9, r9, r1
 801fe70:	ea89 0903 	eor.w	r9, r9, r3
        AES_RROUND( t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3] );
 801fe74:	ea4f 6218 	mov.w	r2, r8, lsr #24
 801fe78:	fa5f f38b 	uxtb.w	r3, fp
        AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 801fe7c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
        AES_RROUND( t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3] );
 801fe80:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 801fe84:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 801fe88:	f3c9 2107 	ubfx	r1, r9, #8, #8
 801fe8c:	f854 3c10 	ldr.w	r3, [r4, #-16]
 801fe90:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801fe94:	4042      	eors	r2, r0
 801fe96:	f3c7 4007 	ubfx	r0, r7, #16, #8
 801fe9a:	405a      	eors	r2, r3
 801fe9c:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 801fea0:	404a      	eors	r2, r1
 801fea2:	405a      	eors	r2, r3
 801fea4:	fa5f f188 	uxtb.w	r1, r8
 801fea8:	0e3b      	lsrs	r3, r7, #24
 801feaa:	9208      	str	r2, [sp, #32]
 801feac:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 801feb0:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 801feb4:	f3cb 2007 	ubfx	r0, fp, #8, #8
 801feb8:	9202      	str	r2, [sp, #8]
 801feba:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 801febe:	f3c9 4a07 	ubfx	sl, r9, #16, #8
 801fec2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801fec6:	404b      	eors	r3, r1
 801fec8:	ea83 0102 	eor.w	r1, r3, r2
 801fecc:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
 801fed0:	4041      	eors	r1, r0
 801fed2:	404b      	eors	r3, r1
 801fed4:	9309      	str	r3, [sp, #36]	; 0x24
 801fed6:	9301      	str	r3, [sp, #4]
 801fed8:	465b      	mov	r3, fp
 801feda:	ea4f 6119 	mov.w	r1, r9, lsr #24
 801fede:	b2f8      	uxtb	r0, r7
 801fee0:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 801fee4:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 801fee8:	f854 2c08 	ldr.w	r2, [r4, #-8]
 801feec:	f3c8 2a07 	ubfx	sl, r8, #8, #8
 801fef0:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
 801fef4:	4041      	eors	r1, r0
 801fef6:	f3cb 4b07 	ubfx	fp, fp, #16, #8
 801fefa:	ea81 0002 	eor.w	r0, r1, r2
 801fefe:	f855 102b 	ldr.w	r1, [r5, fp, lsl #2]
 801ff02:	ea80 000a 	eor.w	r0, r0, sl
 801ff06:	fa5f f989 	uxtb.w	r9, r9
 801ff0a:	4041      	eors	r1, r0
 801ff0c:	ea4f 6a13 	mov.w	sl, r3, lsr #24
 801ff10:	f85e 0029 	ldr.w	r0, [lr, r9, lsl #2]
 801ff14:	910a      	str	r1, [sp, #40]	; 0x28
 801ff16:	f85c 902a 	ldr.w	r9, [ip, sl, lsl #2]
 801ff1a:	f854 2c04 	ldr.w	r2, [r4, #-4]
 801ff1e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801ff22:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 801ff26:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801ff2a:	ea80 0009 	eor.w	r0, r0, r9
 801ff2e:	4050      	eors	r0, r2
 801ff30:	f855 8028 	ldr.w	r8, [r5, r8, lsl #2]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 801ff34:	9a03      	ldr	r2, [sp, #12]
        AES_RROUND( t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3] );
 801ff36:	4078      	eors	r0, r7
 801ff38:	ea80 0008 	eor.w	r0, r0, r8
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 801ff3c:	3a01      	subs	r2, #1
        AES_RROUND( t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3] );
 801ff3e:	900b      	str	r0, [sp, #44]	; 0x2c
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 801ff40:	f104 0420 	add.w	r4, r4, #32
 801ff44:	9203      	str	r2, [sp, #12]
 801ff46:	f47f af27 	bne.w	801fd98 <mbedtls_internal_aes_decrypt+0x64>
 801ff4a:	e9dd 3b01 	ldrd	r3, fp, [sp, #4]
 801ff4e:	9a05      	ldr	r2, [sp, #20]
 801ff50:	4681      	mov	r9, r0
 801ff52:	9807      	ldr	r0, [sp, #28]
 801ff54:	eb02 1240 	add.w	r2, r2, r0, lsl #5
 801ff58:	9205      	str	r2, [sp, #20]
    }

    AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 801ff5a:	fa5f f08b 	uxtb.w	r0, fp
 801ff5e:	0e1a      	lsrs	r2, r3, #24
 801ff60:	f85e 7020 	ldr.w	r7, [lr, r0, lsl #2]
 801ff64:	f85c 0022 	ldr.w	r0, [ip, r2, lsl #2]
 801ff68:	9a05      	ldr	r2, [sp, #20]
 801ff6a:	f3c9 2407 	ubfx	r4, r9, #8, #8
 801ff6e:	6812      	ldr	r2, [r2, #0]
 801ff70:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 801ff74:	4078      	eors	r0, r7
 801ff76:	f3c1 4707 	ubfx	r7, r1, #16, #8
 801ff7a:	4050      	eors	r0, r2
 801ff7c:	f855 2027 	ldr.w	r2, [r5, r7, lsl #2]
 801ff80:	4060      	eors	r0, r4
 801ff82:	4050      	eors	r0, r2
 801ff84:	900c      	str	r0, [sp, #48]	; 0x30
 801ff86:	9001      	str	r0, [sp, #4]
 801ff88:	b2dc      	uxtb	r4, r3
 801ff8a:	9805      	ldr	r0, [sp, #20]
 801ff8c:	0e0a      	lsrs	r2, r1, #24
 801ff8e:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 801ff92:	f85c 4022 	ldr.w	r4, [ip, r2, lsl #2]
 801ff96:	f3cb 2807 	ubfx	r8, fp, #8, #8
 801ff9a:	6842      	ldr	r2, [r0, #4]
 801ff9c:	407c      	eors	r4, r7
 801ff9e:	f856 7028 	ldr.w	r7, [r6, r8, lsl #2]
 801ffa2:	f3c9 4807 	ubfx	r8, r9, #16, #8
 801ffa6:	4062      	eors	r2, r4
 801ffa8:	f855 4028 	ldr.w	r4, [r5, r8, lsl #2]
 801ffac:	4057      	eors	r7, r2
 801ffae:	4067      	eors	r7, r4
 801ffb0:	ea4f 6219 	mov.w	r2, r9, lsr #24
 801ffb4:	b2cc      	uxtb	r4, r1
 801ffb6:	970d      	str	r7, [sp, #52]	; 0x34
 801ffb8:	f85e a024 	ldr.w	sl, [lr, r4, lsl #2]
 801ffbc:	f85c 4022 	ldr.w	r4, [ip, r2, lsl #2]
 801ffc0:	f3c3 2807 	ubfx	r8, r3, #8, #8
 801ffc4:	6882      	ldr	r2, [r0, #8]
 801ffc6:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 801ffca:	ea8a 0404 	eor.w	r4, sl, r4
 801ffce:	f3cb 4a07 	ubfx	sl, fp, #16, #8
 801ffd2:	4062      	eors	r2, r4
 801ffd4:	f855 402a 	ldr.w	r4, [r5, sl, lsl #2]
 801ffd8:	ea82 0208 	eor.w	r2, r2, r8
 801ffdc:	4054      	eors	r4, r2
 801ffde:	fa5f f989 	uxtb.w	r9, r9
 801ffe2:	ea4f 621b 	mov.w	r2, fp, lsr #24
 801ffe6:	940e      	str	r4, [sp, #56]	; 0x38
 801ffe8:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 801ffec:	f85e e029 	ldr.w	lr, [lr, r9, lsl #2]
 801fff0:	68c0      	ldr	r0, [r0, #12]
 801fff2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801fff6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801fffa:	ea8e 0e02 	eor.w	lr, lr, r2
 801fffe:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8020002:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 8020006:	ea8e 0300 	eor.w	r3, lr, r0

    t.X[0] = *RK++ ^ \
            ( (uint32_t) RSb[ ( t.Y[0]       ) & 0xFF ]       ) ^
 802000a:	f8dd 9004 	ldr.w	r9, [sp, #4]
    AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 802000e:	404b      	eors	r3, r1
            ( (uint32_t) RSb[ ( t.Y[3] >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( t.Y[2] >> 16 ) & 0xFF ] << 16 ) ^
 8020010:	9805      	ldr	r0, [sp, #20]
    AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8020012:	406b      	eors	r3, r5
            ( (uint32_t) RSb[ ( t.Y[0]       ) & 0xFF ]       ) ^
 8020014:	4d3d      	ldr	r5, [pc, #244]	; (802010c <mbedtls_internal_aes_decrypt+0x3d8>)
    AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8020016:	930f      	str	r3, [sp, #60]	; 0x3c
            ( (uint32_t) RSb[ ( t.Y[0]       ) & 0xFF ]       ) ^
 8020018:	fa5f f189 	uxtb.w	r1, r9
            ( (uint32_t) RSb[ ( t.Y[2] >> 16 ) & 0xFF ] << 16 ) ^
 802001c:	6902      	ldr	r2, [r0, #16]
            ( (uint32_t) RSb[ ( t.Y[0]       ) & 0xFF ]       ) ^
 802001e:	5c69      	ldrb	r1, [r5, r1]
            ( (uint32_t) RSb[ ( t.Y[1] >> 24 ) & 0xFF ] << 24 );
 8020020:	0e3e      	lsrs	r6, r7, #24
 8020022:	f815 c006 	ldrb.w	ip, [r5, r6]
            ( (uint32_t) RSb[ ( t.Y[3] >>  8 ) & 0xFF ] <<  8 ) ^
 8020026:	f3c3 2607 	ubfx	r6, r3, #8, #8
 802002a:	5dae      	ldrb	r6, [r5, r6]
            ( (uint32_t) RSb[ ( t.Y[2] >> 16 ) & 0xFF ] << 16 ) ^
 802002c:	4051      	eors	r1, r2
 802002e:	f3c4 4207 	ubfx	r2, r4, #16, #8
 8020032:	5caa      	ldrb	r2, [r5, r2]
 8020034:	ea81 610c 	eor.w	r1, r1, ip, lsl #24
 8020038:	ea81 2106 	eor.w	r1, r1, r6, lsl #8
 802003c:	ea81 4102 	eor.w	r1, r1, r2, lsl #16
    t.X[0] = *RK++ ^ \
 8020040:	9102      	str	r1, [sp, #8]
 8020042:	9108      	str	r1, [sp, #32]

    t.X[1] = *RK++ ^ \
            ( (uint32_t) RSb[ ( t.Y[1]       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( t.Y[0] >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( t.Y[3] >> 16 ) & 0xFF ] << 16 ) ^
 8020044:	4601      	mov	r1, r0
            ( (uint32_t) RSb[ ( t.Y[2] >> 24 ) & 0xFF ] << 24 );
 8020046:	ea4f 6814 	mov.w	r8, r4, lsr #24
            ( (uint32_t) RSb[ ( t.Y[3] >> 16 ) & 0xFF ] << 16 ) ^
 802004a:	6942      	ldr	r2, [r0, #20]
            ( (uint32_t) RSb[ ( t.Y[1] >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( t.Y[0] >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( t.Y[3] >> 24 ) & 0xFF ] << 24 );

    t.X[3] = *RK++ ^ \
            ( (uint32_t) RSb[ ( t.Y[3]       ) & 0xFF ]       ) ^
 802004c:	b2de      	uxtb	r6, r3
            ( (uint32_t) RSb[ ( t.Y[2] >> 24 ) & 0xFF ] << 24 );
 802004e:	f815 0008 	ldrb.w	r0, [r5, r8]
            ( (uint32_t) RSb[ ( t.Y[1]       ) & 0xFF ]       ) ^
 8020052:	fa5f fc87 	uxtb.w	ip, r7
            ( (uint32_t) RSb[ ( t.Y[2]       ) & 0xFF ]       ) ^
 8020056:	fa5f fe84 	uxtb.w	lr, r4
            ( (uint32_t) RSb[ ( t.Y[2] >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( t.Y[1] >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( t.Y[0] >> 24 ) & 0xFF ] << 24 );
 802005a:	ea4f 6a19 	mov.w	sl, r9, lsr #24
            ( (uint32_t) RSb[ ( t.Y[3]       ) & 0xFF ]       ) ^
 802005e:	f815 9006 	ldrb.w	r9, [r5, r6]
            ( (uint32_t) RSb[ ( t.Y[2]       ) & 0xFF ]       ) ^
 8020062:	f815 e00e 	ldrb.w	lr, [r5, lr]
            ( (uint32_t) RSb[ ( t.Y[1]       ) & 0xFF ]       ) ^
 8020066:	f815 c00c 	ldrb.w	ip, [r5, ip]
            ( (uint32_t) RSb[ ( t.Y[2] >> 24 ) & 0xFF ] << 24 );
 802006a:	9003      	str	r0, [sp, #12]
            ( (uint32_t) RSb[ ( t.Y[3] >> 24 ) & 0xFF ] << 24 );
 802006c:	ea4f 6b13 	mov.w	fp, r3, lsr #24
            ( (uint32_t) RSb[ ( t.Y[0] >>  8 ) & 0xFF ] <<  8 ) ^
 8020070:	9801      	ldr	r0, [sp, #4]
            ( (uint32_t) RSb[ ( t.Y[3] >> 24 ) & 0xFF ] << 24 );
 8020072:	f815 b00b 	ldrb.w	fp, [r5, fp]
            ( (uint32_t) RSb[ ( t.Y[1] >> 16 ) & 0xFF ] << 16 ) ^
 8020076:	e9d1 6806 	ldrd	r6, r8, [r1, #24]
            ( (uint32_t) RSb[ ( t.Y[3] >> 16 ) & 0xFF ] << 16 ) ^
 802007a:	9903      	ldr	r1, [sp, #12]
            ( (uint32_t) RSb[ ( t.Y[1] >> 16 ) & 0xFF ] << 16 ) ^
 802007c:	ea89 0908 	eor.w	r9, r9, r8
            ( (uint32_t) RSb[ ( t.Y[1] >>  8 ) & 0xFF ] <<  8 ) ^
 8020080:	f3c7 2807 	ubfx	r8, r7, #8, #8
            ( (uint32_t) RSb[ ( t.Y[0] >> 24 ) & 0xFF ] << 24 );
 8020084:	f815 a00a 	ldrb.w	sl, [r5, sl]
            ( (uint32_t) RSb[ ( t.Y[3] >> 16 ) & 0xFF ] << 16 ) ^
 8020088:	ea8c 0c02 	eor.w	ip, ip, r2
            ( (uint32_t) RSb[ ( t.Y[0] >> 16 ) & 0xFF ] << 16 ) ^
 802008c:	ea8e 0606 	eor.w	r6, lr, r6
            ( (uint32_t) RSb[ ( t.Y[0] >>  8 ) & 0xFF ] <<  8 ) ^
 8020090:	f3c0 2207 	ubfx	r2, r0, #8, #8
            ( (uint32_t) RSb[ ( t.Y[1] >>  8 ) & 0xFF ] <<  8 ) ^
 8020094:	f815 e008 	ldrb.w	lr, [r5, r8]
            ( (uint32_t) RSb[ ( t.Y[2] >>  8 ) & 0xFF ] <<  8 ) ^
 8020098:	f3c4 2407 	ubfx	r4, r4, #8, #8
            ( (uint32_t) RSb[ ( t.Y[0] >> 16 ) & 0xFF ] << 16 ) ^
 802009c:	f3c0 4007 	ubfx	r0, r0, #16, #8
            ( (uint32_t) RSb[ ( t.Y[0] >>  8 ) & 0xFF ] <<  8 ) ^
 80200a0:	5caa      	ldrb	r2, [r5, r2]
            ( (uint32_t) RSb[ ( t.Y[2] >>  8 ) & 0xFF ] <<  8 ) ^
 80200a2:	5d2c      	ldrb	r4, [r5, r4]
            ( (uint32_t) RSb[ ( t.Y[0] >> 16 ) & 0xFF ] << 16 ) ^
 80200a4:	5c28      	ldrb	r0, [r5, r0]
 80200a6:	ea86 660b 	eor.w	r6, r6, fp, lsl #24
            ( (uint32_t) RSb[ ( t.Y[3] >> 16 ) & 0xFF ] << 16 ) ^
 80200aa:	f3c3 4307 	ubfx	r3, r3, #16, #8
            ( (uint32_t) RSb[ ( t.Y[1] >> 16 ) & 0xFF ] << 16 ) ^
 80200ae:	f3c7 4707 	ubfx	r7, r7, #16, #8
            ( (uint32_t) RSb[ ( t.Y[3] >> 16 ) & 0xFF ] << 16 ) ^
 80200b2:	ea8c 6c01 	eor.w	ip, ip, r1, lsl #24

    PUT_UINT32_LE( t.X[0], output,  0 );
 80200b6:	9902      	ldr	r1, [sp, #8]
            ( (uint32_t) RSb[ ( t.Y[3] >> 16 ) & 0xFF ] << 16 ) ^
 80200b8:	f815 8003 	ldrb.w	r8, [r5, r3]
            ( (uint32_t) RSb[ ( t.Y[1] >> 16 ) & 0xFF ] << 16 ) ^
 80200bc:	ea89 690a 	eor.w	r9, r9, sl, lsl #24
 80200c0:	5ded      	ldrb	r5, [r5, r7]
            ( (uint32_t) RSb[ ( t.Y[0] >> 16 ) & 0xFF ] << 16 ) ^
 80200c2:	ea86 2e0e 	eor.w	lr, r6, lr, lsl #8
            ( (uint32_t) RSb[ ( t.Y[3] >> 16 ) & 0xFF ] << 16 ) ^
 80200c6:	ea8c 2c02 	eor.w	ip, ip, r2, lsl #8
    PUT_UINT32_LE( t.X[0], output,  0 );
 80200ca:	9e02      	ldr	r6, [sp, #8]
            ( (uint32_t) RSb[ ( t.Y[0] >> 16 ) & 0xFF ] << 16 ) ^
 80200cc:	ea8e 4200 	eor.w	r2, lr, r0, lsl #16
            ( (uint32_t) RSb[ ( t.Y[1] >> 16 ) & 0xFF ] << 16 ) ^
 80200d0:	ea89 2304 	eor.w	r3, r9, r4, lsl #8
    PUT_UINT32_LE( t.X[0], output,  0 );
 80200d4:	0a08      	lsrs	r0, r1, #8
 80200d6:	ea4f 4b11 	mov.w	fp, r1, lsr #16
 80200da:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80200de:	9906      	ldr	r1, [sp, #24]
            ( (uint32_t) RSb[ ( t.Y[3] >> 16 ) & 0xFF ] << 16 ) ^
 80200e0:	ea8c 4408 	eor.w	r4, ip, r8, lsl #16
            ( (uint32_t) RSb[ ( t.Y[1] >> 16 ) & 0xFF ] << 16 ) ^
 80200e4:	ea83 4305 	eor.w	r3, r3, r5, lsl #16
    PUT_UINT32_LE( t.X[0], output,  0 );
 80200e8:	700e      	strb	r6, [r1, #0]
    PUT_UINT32_LE( t.X[1], output,  4 );
 80200ea:	ea4f 2914 	mov.w	r9, r4, lsr #8
    PUT_UINT32_LE( t.X[2], output,  8 );
    PUT_UINT32_LE( t.X[3], output, 12 );
 80200ee:	0e1e      	lsrs	r6, r3, #24
 80200f0:	730b      	strb	r3, [r1, #12]
    PUT_UINT32_LE( t.X[2], output,  8 );
 80200f2:	720a      	strb	r2, [r1, #8]
    PUT_UINT32_LE( t.X[0], output,  0 );
 80200f4:	7048      	strb	r0, [r1, #1]
    PUT_UINT32_LE( t.X[1], output,  4 );
 80200f6:	710c      	strb	r4, [r1, #4]
    PUT_UINT32_LE( t.X[0], output,  0 );
 80200f8:	f881 b002 	strb.w	fp, [r1, #2]
 80200fc:	f881 a003 	strb.w	sl, [r1, #3]
 8020100:	e00a      	b.n	8020118 <mbedtls_internal_aes_decrypt+0x3e4>
 8020102:	bf00      	nop
 8020104:	2001b030 	.word	0x2001b030
 8020108:	2001b430 	.word	0x2001b430
 802010c:	2001ab30 	.word	0x2001ab30
 8020110:	2001ac30 	.word	0x2001ac30
 8020114:	2001b830 	.word	0x2001b830
    PUT_UINT32_LE( t.X[1], output,  4 );
 8020118:	f881 9005 	strb.w	r9, [r1, #5]
    PUT_UINT32_LE( t.X[3], output, 12 );
 802011c:	73ce      	strb	r6, [r1, #15]
    PUT_UINT32_LE( t.X[2], output,  8 );
 802011e:	0a16      	lsrs	r6, r2, #8
 8020120:	0e10      	lsrs	r0, r2, #24
    PUT_UINT32_LE( t.X[1], output,  4 );
 8020122:	ea4f 6e14 	mov.w	lr, r4, lsr #24
    PUT_UINT32_LE( t.X[3], output, 12 );
 8020126:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 802012a:	0c1f      	lsrs	r7, r3, #16
    PUT_UINT32_LE( t.X[2], output,  8 );
 802012c:	724e      	strb	r6, [r1, #9]
    PUT_UINT32_LE( t.X[1], output,  4 );
 802012e:	ea4f 4814 	mov.w	r8, r4, lsr #16
    PUT_UINT32_LE( t.X[2], output,  8 );
 8020132:	0c16      	lsrs	r6, r2, #16
    PUT_UINT32_LE( t.X[1], output,  4 );
 8020134:	f881 8006 	strb.w	r8, [r1, #6]
 8020138:	f881 e007 	strb.w	lr, [r1, #7]
    PUT_UINT32_LE( t.X[3], output, 12 );
 802013c:	f881 c00d 	strb.w	ip, [r1, #13]
 8020140:	738f      	strb	r7, [r1, #14]
    PUT_UINT32_LE( t.X[2], output,  8 );
 8020142:	728e      	strb	r6, [r1, #10]
 8020144:	72c8      	strb	r0, [r1, #11]

    mbedtls_platform_zeroize( &t, sizeof( t ) );
 8020146:	2120      	movs	r1, #32
 8020148:	eb0d 0001 	add.w	r0, sp, r1
    t.X[2] = *RK++ ^ \
 802014c:	e9cd 4209 	strd	r4, r2, [sp, #36]	; 0x24
    t.X[3] = *RK++ ^ \
 8020150:	930b      	str	r3, [sp, #44]	; 0x2c
    mbedtls_platform_zeroize( &t, sizeof( t ) );
 8020152:	f007 fceb 	bl	8027b2c <mbedtls_platform_zeroize>

    return( 0 );
}
 8020156:	2000      	movs	r0, #0
 8020158:	b011      	add	sp, #68	; 0x44
 802015a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802015e:	bf00      	nop

08020160 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
 8020160:	b410      	push	{r4}
 8020162:	460c      	mov	r4, r1
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 8020164:	2c01      	cmp	r4, #1
{
 8020166:	4611      	mov	r1, r2
 8020168:	461a      	mov	r2, r3
    if( mode == MBEDTLS_AES_ENCRYPT )
 802016a:	d003      	beq.n	8020174 <mbedtls_aes_crypt_ecb+0x14>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
 802016c:	f85d 4b04 	ldr.w	r4, [sp], #4
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 8020170:	f7ff bde0 	b.w	801fd34 <mbedtls_internal_aes_decrypt>
}
 8020174:	f85d 4b04 	ldr.w	r4, [sp], #4
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 8020178:	f7ff bbc8 	b.w	801f90c <mbedtls_internal_aes_encrypt>

0802017c <mbedtls_aes_crypt_cbc>:
                      mode == MBEDTLS_AES_DECRYPT );
    AES_VALIDATE_RET( iv != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    if( length % 16 )
 802017c:	f012 0f0f 	tst.w	r2, #15
 8020180:	f040 8113 	bne.w	80203aa <mbedtls_aes_crypt_cbc+0x22e>
{
 8020184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020188:	4680      	mov	r8, r0
 802018a:	4689      	mov	r9, r1
 802018c:	461d      	mov	r5, r3
 802018e:	b085      	sub	sp, #20
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
 8020190:	2900      	cmp	r1, #0
 8020192:	f000 8085 	beq.w	80202a0 <mbedtls_aes_crypt_cbc+0x124>
            length -= 16;
        }
    }
    else
    {
        while( length > 0 )
 8020196:	2a00      	cmp	r2, #0
 8020198:	f000 8103 	beq.w	80203a2 <mbedtls_aes_crypt_cbc+0x226>
 802019c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80201a0:	f103 0610 	add.w	r6, r3, #16
 80201a4:	18a7      	adds	r7, r4, r2
 80201a6:	e012      	b.n	80201ce <mbedtls_aes_crypt_cbc+0x52>
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 80201a8:	4622      	mov	r2, r4
 80201aa:	4621      	mov	r1, r4
 80201ac:	4640      	mov	r0, r8
 80201ae:	f7ff fdc1 	bl	801fd34 <mbedtls_internal_aes_decrypt>
        {
            for( i = 0; i < 16; i++ )
                output[i] = (unsigned char)( input[i] ^ iv[i] );

            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
            memcpy( iv, output, 16 );
 80201b2:	6820      	ldr	r0, [r4, #0]
 80201b4:	6861      	ldr	r1, [r4, #4]
 80201b6:	68a2      	ldr	r2, [r4, #8]
 80201b8:	68e3      	ldr	r3, [r4, #12]

            input  += 16;
            output += 16;
 80201ba:	3410      	adds	r4, #16
        while( length > 0 )
 80201bc:	42bc      	cmp	r4, r7
 80201be:	f106 0610 	add.w	r6, r6, #16
            memcpy( iv, output, 16 );
 80201c2:	6028      	str	r0, [r5, #0]
 80201c4:	6069      	str	r1, [r5, #4]
 80201c6:	60aa      	str	r2, [r5, #8]
 80201c8:	60eb      	str	r3, [r5, #12]
        while( length > 0 )
 80201ca:	f000 80ea 	beq.w	80203a2 <mbedtls_aes_crypt_cbc+0x226>
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 80201ce:	782a      	ldrb	r2, [r5, #0]
 80201d0:	f816 3c10 	ldrb.w	r3, [r6, #-16]
    if( mode == MBEDTLS_AES_ENCRYPT )
 80201d4:	f1b9 0f01 	cmp.w	r9, #1
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 80201d8:	ea83 0302 	eor.w	r3, r3, r2
 80201dc:	7023      	strb	r3, [r4, #0]
 80201de:	786a      	ldrb	r2, [r5, #1]
 80201e0:	f816 3c0f 	ldrb.w	r3, [r6, #-15]
 80201e4:	ea83 0302 	eor.w	r3, r3, r2
 80201e8:	7063      	strb	r3, [r4, #1]
 80201ea:	78aa      	ldrb	r2, [r5, #2]
 80201ec:	f816 3c0e 	ldrb.w	r3, [r6, #-14]
 80201f0:	ea83 0302 	eor.w	r3, r3, r2
 80201f4:	70a3      	strb	r3, [r4, #2]
 80201f6:	78ea      	ldrb	r2, [r5, #3]
 80201f8:	f816 3c0d 	ldrb.w	r3, [r6, #-13]
 80201fc:	ea83 0302 	eor.w	r3, r3, r2
 8020200:	70e3      	strb	r3, [r4, #3]
 8020202:	792a      	ldrb	r2, [r5, #4]
 8020204:	f816 3c0c 	ldrb.w	r3, [r6, #-12]
 8020208:	ea83 0302 	eor.w	r3, r3, r2
 802020c:	7123      	strb	r3, [r4, #4]
 802020e:	796a      	ldrb	r2, [r5, #5]
 8020210:	f816 3c0b 	ldrb.w	r3, [r6, #-11]
 8020214:	ea83 0302 	eor.w	r3, r3, r2
 8020218:	7163      	strb	r3, [r4, #5]
 802021a:	79aa      	ldrb	r2, [r5, #6]
 802021c:	f816 3c0a 	ldrb.w	r3, [r6, #-10]
 8020220:	ea83 0302 	eor.w	r3, r3, r2
 8020224:	71a3      	strb	r3, [r4, #6]
 8020226:	79ea      	ldrb	r2, [r5, #7]
 8020228:	f816 3c09 	ldrb.w	r3, [r6, #-9]
 802022c:	ea83 0302 	eor.w	r3, r3, r2
 8020230:	71e3      	strb	r3, [r4, #7]
 8020232:	7a2a      	ldrb	r2, [r5, #8]
 8020234:	f816 3c08 	ldrb.w	r3, [r6, #-8]
 8020238:	ea83 0302 	eor.w	r3, r3, r2
 802023c:	7223      	strb	r3, [r4, #8]
 802023e:	7a6a      	ldrb	r2, [r5, #9]
 8020240:	f816 3c07 	ldrb.w	r3, [r6, #-7]
 8020244:	ea83 0302 	eor.w	r3, r3, r2
 8020248:	7263      	strb	r3, [r4, #9]
 802024a:	7aaa      	ldrb	r2, [r5, #10]
 802024c:	f816 3c06 	ldrb.w	r3, [r6, #-6]
 8020250:	ea83 0302 	eor.w	r3, r3, r2
 8020254:	72a3      	strb	r3, [r4, #10]
 8020256:	7aea      	ldrb	r2, [r5, #11]
 8020258:	f816 3c05 	ldrb.w	r3, [r6, #-5]
 802025c:	ea83 0302 	eor.w	r3, r3, r2
 8020260:	72e3      	strb	r3, [r4, #11]
 8020262:	7b2a      	ldrb	r2, [r5, #12]
 8020264:	f816 3c04 	ldrb.w	r3, [r6, #-4]
 8020268:	ea83 0302 	eor.w	r3, r3, r2
 802026c:	7323      	strb	r3, [r4, #12]
 802026e:	7b6a      	ldrb	r2, [r5, #13]
 8020270:	f816 3c03 	ldrb.w	r3, [r6, #-3]
 8020274:	ea83 0302 	eor.w	r3, r3, r2
 8020278:	7363      	strb	r3, [r4, #13]
 802027a:	7baa      	ldrb	r2, [r5, #14]
 802027c:	f816 3c02 	ldrb.w	r3, [r6, #-2]
 8020280:	ea83 0302 	eor.w	r3, r3, r2
 8020284:	73a3      	strb	r3, [r4, #14]
 8020286:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802028a:	7bea      	ldrb	r2, [r5, #15]
 802028c:	ea83 0302 	eor.w	r3, r3, r2
 8020290:	73e3      	strb	r3, [r4, #15]
    if( mode == MBEDTLS_AES_ENCRYPT )
 8020292:	d189      	bne.n	80201a8 <mbedtls_aes_crypt_cbc+0x2c>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 8020294:	4622      	mov	r2, r4
 8020296:	4621      	mov	r1, r4
 8020298:	4640      	mov	r0, r8
 802029a:	f7ff fb37 	bl	801f90c <mbedtls_internal_aes_encrypt>
            memcpy( iv, output, 16 );
 802029e:	e788      	b.n	80201b2 <mbedtls_aes_crypt_cbc+0x36>
        while( length > 0 )
 80202a0:	2a00      	cmp	r2, #0
 80202a2:	d07e      	beq.n	80203a2 <mbedtls_aes_crypt_cbc+0x226>
 80202a4:	e9dd 630c 	ldrd	r6, r3, [sp, #48]	; 0x30
 80202a8:	f103 0410 	add.w	r4, r3, #16
 80202ac:	eb06 0902 	add.w	r9, r6, r2
            memcpy( temp, input, 16 );
 80202b0:	466f      	mov	r7, sp
 80202b2:	6830      	ldr	r0, [r6, #0]
 80202b4:	6871      	ldr	r1, [r6, #4]
 80202b6:	68b2      	ldr	r2, [r6, #8]
 80202b8:	68f3      	ldr	r3, [r6, #12]
 80202ba:	c70f      	stmia	r7!, {r0, r1, r2, r3}
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 80202bc:	4631      	mov	r1, r6
 80202be:	f1a4 0210 	sub.w	r2, r4, #16
 80202c2:	4640      	mov	r0, r8
 80202c4:	f7ff fd36 	bl	801fd34 <mbedtls_internal_aes_decrypt>
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 80202c8:	782a      	ldrb	r2, [r5, #0]
 80202ca:	f814 1c10 	ldrb.w	r1, [r4, #-16]
 80202ce:	f814 3c0f 	ldrb.w	r3, [r4, #-15]
 80202d2:	404a      	eors	r2, r1
 80202d4:	f804 2c10 	strb.w	r2, [r4, #-16]
 80202d8:	7869      	ldrb	r1, [r5, #1]
 80202da:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
 80202de:	404b      	eors	r3, r1
 80202e0:	f804 3c0f 	strb.w	r3, [r4, #-15]
 80202e4:	78a9      	ldrb	r1, [r5, #2]
 80202e6:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
 80202ea:	404a      	eors	r2, r1
 80202ec:	f804 2c0e 	strb.w	r2, [r4, #-14]
 80202f0:	78e9      	ldrb	r1, [r5, #3]
 80202f2:	f814 2c0c 	ldrb.w	r2, [r4, #-12]
 80202f6:	404b      	eors	r3, r1
 80202f8:	f804 3c0d 	strb.w	r3, [r4, #-13]
 80202fc:	7929      	ldrb	r1, [r5, #4]
 80202fe:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 8020302:	404a      	eors	r2, r1
 8020304:	f804 2c0c 	strb.w	r2, [r4, #-12]
 8020308:	7969      	ldrb	r1, [r5, #5]
 802030a:	f814 2c0a 	ldrb.w	r2, [r4, #-10]
 802030e:	404b      	eors	r3, r1
 8020310:	f804 3c0b 	strb.w	r3, [r4, #-11]
 8020314:	79a9      	ldrb	r1, [r5, #6]
 8020316:	f814 3c09 	ldrb.w	r3, [r4, #-9]
 802031a:	404a      	eors	r2, r1
 802031c:	f804 2c0a 	strb.w	r2, [r4, #-10]
 8020320:	79ea      	ldrb	r2, [r5, #7]
            memcpy( iv, temp, 16 );
 8020322:	466f      	mov	r7, sp
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 8020324:	4053      	eors	r3, r2
 8020326:	f804 3c09 	strb.w	r3, [r4, #-9]
 802032a:	7a29      	ldrb	r1, [r5, #8]
 802032c:	f814 3c08 	ldrb.w	r3, [r4, #-8]
 8020330:	f814 2c07 	ldrb.w	r2, [r4, #-7]
 8020334:	404b      	eors	r3, r1
 8020336:	f804 3c08 	strb.w	r3, [r4, #-8]
 802033a:	7a69      	ldrb	r1, [r5, #9]
 802033c:	f814 3c06 	ldrb.w	r3, [r4, #-6]
 8020340:	404a      	eors	r2, r1
 8020342:	f804 2c07 	strb.w	r2, [r4, #-7]
 8020346:	7aaa      	ldrb	r2, [r5, #10]
            input  += 16;
 8020348:	3610      	adds	r6, #16
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 802034a:	4053      	eors	r3, r2
 802034c:	f804 3c06 	strb.w	r3, [r4, #-6]
 8020350:	7ae9      	ldrb	r1, [r5, #11]
 8020352:	f814 2c05 	ldrb.w	r2, [r4, #-5]
 8020356:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 802035a:	404a      	eors	r2, r1
 802035c:	f804 2c05 	strb.w	r2, [r4, #-5]
 8020360:	7b29      	ldrb	r1, [r5, #12]
 8020362:	f814 2c03 	ldrb.w	r2, [r4, #-3]
 8020366:	404b      	eors	r3, r1
 8020368:	f804 3c04 	strb.w	r3, [r4, #-4]
 802036c:	7b69      	ldrb	r1, [r5, #13]
 802036e:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8020372:	404a      	eors	r2, r1
 8020374:	f804 2c03 	strb.w	r2, [r4, #-3]
 8020378:	7baa      	ldrb	r2, [r5, #14]
 802037a:	f814 cc01 	ldrb.w	ip, [r4, #-1]
 802037e:	4053      	eors	r3, r2
 8020380:	f804 3c02 	strb.w	r3, [r4, #-2]
 8020384:	f895 e00f 	ldrb.w	lr, [r5, #15]
            memcpy( iv, temp, 16 );
 8020388:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
        while( length > 0 )
 802038a:	454e      	cmp	r6, r9
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 802038c:	ea8c 070e 	eor.w	r7, ip, lr
 8020390:	f804 7c01 	strb.w	r7, [r4, #-1]
            memcpy( iv, temp, 16 );
 8020394:	f104 0410 	add.w	r4, r4, #16
 8020398:	6028      	str	r0, [r5, #0]
 802039a:	6069      	str	r1, [r5, #4]
 802039c:	60aa      	str	r2, [r5, #8]
 802039e:	60eb      	str	r3, [r5, #12]
        while( length > 0 )
 80203a0:	d186      	bne.n	80202b0 <mbedtls_aes_crypt_cbc+0x134>
            length -= 16;
        }
    }

    return( 0 );
 80203a2:	2000      	movs	r0, #0
}
 80203a4:	b005      	add	sp, #20
 80203a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
 80203aa:	f06f 0021 	mvn.w	r0, #33	; 0x21
}
 80203ae:	4770      	bx	lr

080203b0 <mbedtls_asn1_get_len>:
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    if( ( end - *p ) < 1 )
 80203b0:	6803      	ldr	r3, [r0, #0]
{
 80203b2:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
 80203b4:	1acd      	subs	r5, r1, r3
 80203b6:	2d00      	cmp	r5, #0
 80203b8:	dd3e      	ble.n	8020438 <mbedtls_asn1_get_len+0x88>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( **p & 0x80 ) == 0 )
 80203ba:	f993 6000 	ldrsb.w	r6, [r3]
 80203be:	781c      	ldrb	r4, [r3, #0]
 80203c0:	2e00      	cmp	r6, #0
 80203c2:	db09      	blt.n	80203d8 <mbedtls_asn1_get_len+0x28>
        *len = *(*p)++;
 80203c4:	1c5d      	adds	r5, r3, #1
 80203c6:	6005      	str	r5, [r0, #0]
 80203c8:	781c      	ldrb	r4, [r3, #0]
 80203ca:	6014      	str	r4, [r2, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
 80203cc:	1b49      	subs	r1, r1, r5
 80203ce:	42a1      	cmp	r1, r4
 80203d0:	d332      	bcc.n	8020438 <mbedtls_asn1_get_len+0x88>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
 80203d2:	2000      	movs	r0, #0
}
 80203d4:	bc70      	pop	{r4, r5, r6}
 80203d6:	4770      	bx	lr
        switch( **p & 0x7F )
 80203d8:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 80203dc:	3c01      	subs	r4, #1
 80203de:	2c03      	cmp	r4, #3
 80203e0:	d82d      	bhi.n	802043e <mbedtls_asn1_get_len+0x8e>
 80203e2:	e8df f004 	tbb	[pc, r4]
 80203e6:	1822      	.short	0x1822
 80203e8:	020b      	.short	0x020b
            if( ( end - *p ) < 5 )
 80203ea:	2d04      	cmp	r5, #4
 80203ec:	dd24      	ble.n	8020438 <mbedtls_asn1_get_len+0x88>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 80203ee:	f8d3 4001 	ldr.w	r4, [r3, #1]
            (*p) += 5;
 80203f2:	1d5d      	adds	r5, r3, #5
 80203f4:	ba24      	rev	r4, r4
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 80203f6:	6014      	str	r4, [r2, #0]
            (*p) += 5;
 80203f8:	6005      	str	r5, [r0, #0]
            break;
 80203fa:	e7e7      	b.n	80203cc <mbedtls_asn1_get_len+0x1c>
            if( ( end - *p ) < 4 )
 80203fc:	2d03      	cmp	r5, #3
 80203fe:	dd1b      	ble.n	8020438 <mbedtls_asn1_get_len+0x88>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 8020400:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
 8020402:	785e      	ldrb	r6, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 8020404:	78dd      	ldrb	r5, [r3, #3]
 8020406:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
 8020408:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 802040c:	432c      	orrs	r4, r5
            (*p) += 4;
 802040e:	1d1d      	adds	r5, r3, #4
            *len = ( (size_t)(*p)[1] << 16 ) |
 8020410:	6014      	str	r4, [r2, #0]
            (*p) += 4;
 8020412:	6005      	str	r5, [r0, #0]
            break;
 8020414:	e7da      	b.n	80203cc <mbedtls_asn1_get_len+0x1c>
            if( ( end - *p ) < 3 )
 8020416:	2d02      	cmp	r5, #2
 8020418:	dd0e      	ble.n	8020438 <mbedtls_asn1_get_len+0x88>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 802041a:	f8b3 4001 	ldrh.w	r4, [r3, #1]
            (*p) += 3;
 802041e:	1cdd      	adds	r5, r3, #3
 8020420:	ba64      	rev16	r4, r4
 8020422:	b2a4      	uxth	r4, r4
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 8020424:	6014      	str	r4, [r2, #0]
            (*p) += 3;
 8020426:	6005      	str	r5, [r0, #0]
            break;
 8020428:	e7d0      	b.n	80203cc <mbedtls_asn1_get_len+0x1c>
            if( ( end - *p ) < 2 )
 802042a:	2d01      	cmp	r5, #1
 802042c:	d004      	beq.n	8020438 <mbedtls_asn1_get_len+0x88>
            *len = (*p)[1];
 802042e:	785c      	ldrb	r4, [r3, #1]
            (*p) += 2;
 8020430:	1c9d      	adds	r5, r3, #2
            *len = (*p)[1];
 8020432:	6014      	str	r4, [r2, #0]
            (*p) += 2;
 8020434:	6005      	str	r5, [r0, #0]
            break;
 8020436:	e7c9      	b.n	80203cc <mbedtls_asn1_get_len+0x1c>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8020438:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 802043c:	e7ca      	b.n	80203d4 <mbedtls_asn1_get_len+0x24>
    if( ( **p & 0x80 ) == 0 )
 802043e:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8020442:	e7c7      	b.n	80203d4 <mbedtls_asn1_get_len+0x24>

08020444 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
 8020444:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
 8020446:	6804      	ldr	r4, [r0, #0]
 8020448:	1b0d      	subs	r5, r1, r4
 802044a:	2d00      	cmp	r5, #0
 802044c:	dd48      	ble.n	80204e0 <mbedtls_asn1_get_tag+0x9c>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
 802044e:	7825      	ldrb	r5, [r4, #0]
 8020450:	429d      	cmp	r5, r3
 8020452:	d142      	bne.n	80204da <mbedtls_asn1_get_tag+0x96>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 8020454:	1c63      	adds	r3, r4, #1
    if( ( end - *p ) < 1 )
 8020456:	1acd      	subs	r5, r1, r3
 8020458:	2d00      	cmp	r5, #0
    (*p)++;
 802045a:	6003      	str	r3, [r0, #0]
    if( ( end - *p ) < 1 )
 802045c:	dd40      	ble.n	80204e0 <mbedtls_asn1_get_tag+0x9c>
    if( ( **p & 0x80 ) == 0 )
 802045e:	f994 6001 	ldrsb.w	r6, [r4, #1]
 8020462:	7863      	ldrb	r3, [r4, #1]
 8020464:	2e00      	cmp	r6, #0
 8020466:	db09      	blt.n	802047c <mbedtls_asn1_get_tag+0x38>
        *len = *(*p)++;
 8020468:	1ca5      	adds	r5, r4, #2
 802046a:	6005      	str	r5, [r0, #0]
 802046c:	7863      	ldrb	r3, [r4, #1]
 802046e:	6013      	str	r3, [r2, #0]
    if( *len > (size_t) ( end - *p ) )
 8020470:	1b49      	subs	r1, r1, r5
 8020472:	428b      	cmp	r3, r1
 8020474:	d834      	bhi.n	80204e0 <mbedtls_asn1_get_tag+0x9c>
    return( 0 );
 8020476:	2000      	movs	r0, #0

    return( mbedtls_asn1_get_len( p, end, len ) );
}
 8020478:	bc70      	pop	{r4, r5, r6}
 802047a:	4770      	bx	lr
        switch( **p & 0x7F )
 802047c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8020480:	3b01      	subs	r3, #1
 8020482:	2b03      	cmp	r3, #3
 8020484:	d82f      	bhi.n	80204e6 <mbedtls_asn1_get_tag+0xa2>
 8020486:	e8df f003 	tbb	[pc, r3]
 802048a:	1821      	.short	0x1821
 802048c:	020b      	.short	0x020b
            if( ( end - *p ) < 5 )
 802048e:	2d04      	cmp	r5, #4
 8020490:	dd26      	ble.n	80204e0 <mbedtls_asn1_get_tag+0x9c>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 8020492:	f8d4 3002 	ldr.w	r3, [r4, #2]
            (*p) += 5;
 8020496:	1da5      	adds	r5, r4, #6
 8020498:	ba1b      	rev	r3, r3
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 802049a:	6013      	str	r3, [r2, #0]
            (*p) += 5;
 802049c:	6005      	str	r5, [r0, #0]
            break;
 802049e:	e7e7      	b.n	8020470 <mbedtls_asn1_get_tag+0x2c>
            if( ( end - *p ) < 4 )
 80204a0:	2d03      	cmp	r5, #3
 80204a2:	dd1d      	ble.n	80204e0 <mbedtls_asn1_get_tag+0x9c>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 80204a4:	78e3      	ldrb	r3, [r4, #3]
            *len = ( (size_t)(*p)[1] << 16 ) |
 80204a6:	78a6      	ldrb	r6, [r4, #2]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 80204a8:	7925      	ldrb	r5, [r4, #4]
 80204aa:	021b      	lsls	r3, r3, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
 80204ac:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 80204b0:	432b      	orrs	r3, r5
            (*p) += 4;
 80204b2:	1d65      	adds	r5, r4, #5
            *len = ( (size_t)(*p)[1] << 16 ) |
 80204b4:	6013      	str	r3, [r2, #0]
            (*p) += 4;
 80204b6:	6005      	str	r5, [r0, #0]
            break;
 80204b8:	e7da      	b.n	8020470 <mbedtls_asn1_get_tag+0x2c>
            if( ( end - *p ) < 3 )
 80204ba:	2d02      	cmp	r5, #2
 80204bc:	dd10      	ble.n	80204e0 <mbedtls_asn1_get_tag+0x9c>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 80204be:	8863      	ldrh	r3, [r4, #2]
            (*p) += 3;
 80204c0:	1d25      	adds	r5, r4, #4
 80204c2:	ba5b      	rev16	r3, r3
 80204c4:	b29b      	uxth	r3, r3
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 80204c6:	6013      	str	r3, [r2, #0]
            (*p) += 3;
 80204c8:	6005      	str	r5, [r0, #0]
            break;
 80204ca:	e7d1      	b.n	8020470 <mbedtls_asn1_get_tag+0x2c>
            if( ( end - *p ) < 2 )
 80204cc:	2d01      	cmp	r5, #1
 80204ce:	d007      	beq.n	80204e0 <mbedtls_asn1_get_tag+0x9c>
            *len = (*p)[1];
 80204d0:	78a3      	ldrb	r3, [r4, #2]
            (*p) += 2;
 80204d2:	1ce5      	adds	r5, r4, #3
            *len = (*p)[1];
 80204d4:	6013      	str	r3, [r2, #0]
            (*p) += 2;
 80204d6:	6005      	str	r5, [r0, #0]
            break;
 80204d8:	e7ca      	b.n	8020470 <mbedtls_asn1_get_tag+0x2c>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80204da:	f06f 0061 	mvn.w	r0, #97	; 0x61
 80204de:	e7cb      	b.n	8020478 <mbedtls_asn1_get_tag+0x34>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80204e0:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 80204e4:	e7c8      	b.n	8020478 <mbedtls_asn1_get_tag+0x34>
    if( ( **p & 0x80 ) == 0 )
 80204e6:	f06f 0063 	mvn.w	r0, #99	; 0x63
 80204ea:	e7c5      	b.n	8020478 <mbedtls_asn1_get_tag+0x34>

080204ec <mbedtls_asn1_get_bool>:
    if( ( end - *p ) < 1 )
 80204ec:	6803      	ldr	r3, [r0, #0]

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 80204ee:	b470      	push	{r4, r5, r6}
 80204f0:	4605      	mov	r5, r0
    if( ( end - *p ) < 1 )
 80204f2:	1ac8      	subs	r0, r1, r3
 80204f4:	2800      	cmp	r0, #0
 80204f6:	dd4d      	ble.n	8020594 <mbedtls_asn1_get_bool+0xa8>
    if( **p != tag )
 80204f8:	7818      	ldrb	r0, [r3, #0]
 80204fa:	2801      	cmp	r0, #1
 80204fc:	d147      	bne.n	802058e <mbedtls_asn1_get_bool+0xa2>
    (*p)++;
 80204fe:	1c58      	adds	r0, r3, #1
    if( ( end - *p ) < 1 )
 8020500:	1a0c      	subs	r4, r1, r0
 8020502:	2c00      	cmp	r4, #0
    (*p)++;
 8020504:	6028      	str	r0, [r5, #0]
    if( ( end - *p ) < 1 )
 8020506:	dd45      	ble.n	8020594 <mbedtls_asn1_get_bool+0xa8>
    if( ( **p & 0x80 ) == 0 )
 8020508:	f993 6001 	ldrsb.w	r6, [r3, #1]
 802050c:	7858      	ldrb	r0, [r3, #1]
 802050e:	2e00      	cmp	r6, #0
 8020510:	db11      	blt.n	8020536 <mbedtls_asn1_get_bool+0x4a>
        *len = *(*p)++;
 8020512:	1c9c      	adds	r4, r3, #2
 8020514:	602c      	str	r4, [r5, #0]
 8020516:	785b      	ldrb	r3, [r3, #1]
    if( *len > (size_t) ( end - *p ) )
 8020518:	1b09      	subs	r1, r1, r4
 802051a:	4299      	cmp	r1, r3
 802051c:	d33a      	bcc.n	8020594 <mbedtls_asn1_get_bool+0xa8>
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
        return( ret );

    if( len != 1 )
 802051e:	2b01      	cmp	r3, #1
 8020520:	d13b      	bne.n	802059a <mbedtls_asn1_get_bool+0xae>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = ( **p != 0 ) ? 1 : 0;
    (*p)++;

    return( 0 );
 8020522:	2000      	movs	r0, #0
    *val = ( **p != 0 ) ? 1 : 0;
 8020524:	f814 3b01 	ldrb.w	r3, [r4], #1
 8020528:	1a1b      	subs	r3, r3, r0
 802052a:	bf18      	it	ne
 802052c:	2301      	movne	r3, #1
 802052e:	6013      	str	r3, [r2, #0]
    (*p)++;
 8020530:	602c      	str	r4, [r5, #0]
}
 8020532:	bc70      	pop	{r4, r5, r6}
 8020534:	4770      	bx	lr
        switch( **p & 0x7F )
 8020536:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 802053a:	3801      	subs	r0, #1
 802053c:	2803      	cmp	r0, #3
 802053e:	d82c      	bhi.n	802059a <mbedtls_asn1_get_bool+0xae>
 8020540:	e8df f000 	tbb	[pc, r0]
 8020544:	020a171f 	.word	0x020a171f
            if( ( end - *p ) < 5 )
 8020548:	2c04      	cmp	r4, #4
 802054a:	dd23      	ble.n	8020594 <mbedtls_asn1_get_bool+0xa8>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 802054c:	f8d3 0002 	ldr.w	r0, [r3, #2]
            (*p) += 5;
 8020550:	1d9c      	adds	r4, r3, #6
 8020552:	602c      	str	r4, [r5, #0]
 8020554:	ba03      	rev	r3, r0
            break;
 8020556:	e7df      	b.n	8020518 <mbedtls_asn1_get_bool+0x2c>
            if( ( end - *p ) < 4 )
 8020558:	2c03      	cmp	r4, #3
 802055a:	dd1b      	ble.n	8020594 <mbedtls_asn1_get_bool+0xa8>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 802055c:	78d8      	ldrb	r0, [r3, #3]
            *len = ( (size_t)(*p)[1] << 16 ) |
 802055e:	789c      	ldrb	r4, [r3, #2]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 8020560:	791e      	ldrb	r6, [r3, #4]
 8020562:	0200      	lsls	r0, r0, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
 8020564:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
            (*p) += 4;
 8020568:	1d5c      	adds	r4, r3, #5
 802056a:	602c      	str	r4, [r5, #0]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 802056c:	ea40 0306 	orr.w	r3, r0, r6
            break;
 8020570:	e7d2      	b.n	8020518 <mbedtls_asn1_get_bool+0x2c>
            if( ( end - *p ) < 3 )
 8020572:	2c02      	cmp	r4, #2
 8020574:	dd0e      	ble.n	8020594 <mbedtls_asn1_get_bool+0xa8>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 8020576:	8858      	ldrh	r0, [r3, #2]
            (*p) += 3;
 8020578:	1d1c      	adds	r4, r3, #4
 802057a:	ba43      	rev16	r3, r0
 802057c:	b29b      	uxth	r3, r3
 802057e:	602c      	str	r4, [r5, #0]
            break;
 8020580:	e7ca      	b.n	8020518 <mbedtls_asn1_get_bool+0x2c>
            if( ( end - *p ) < 2 )
 8020582:	2c01      	cmp	r4, #1
 8020584:	d006      	beq.n	8020594 <mbedtls_asn1_get_bool+0xa8>
            (*p) += 2;
 8020586:	1cdc      	adds	r4, r3, #3
            *len = (*p)[1];
 8020588:	789b      	ldrb	r3, [r3, #2]
            (*p) += 2;
 802058a:	602c      	str	r4, [r5, #0]
            break;
 802058c:	e7c4      	b.n	8020518 <mbedtls_asn1_get_bool+0x2c>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 802058e:	f06f 0061 	mvn.w	r0, #97	; 0x61
 8020592:	e7ce      	b.n	8020532 <mbedtls_asn1_get_bool+0x46>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8020594:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 8020598:	e7cb      	b.n	8020532 <mbedtls_asn1_get_bool+0x46>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 802059a:	f06f 0063 	mvn.w	r0, #99	; 0x63
 802059e:	e7c8      	b.n	8020532 <mbedtls_asn1_get_bool+0x46>

080205a0 <mbedtls_asn1_get_int>:
}

int mbedtls_asn1_get_int( unsigned char **p,
                          const unsigned char *end,
                          int *val )
{
 80205a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( ( end - *p ) < 1 )
 80205a2:	6803      	ldr	r3, [r0, #0]
{
 80205a4:	4616      	mov	r6, r2
    if( ( end - *p ) < 1 )
 80205a6:	1aca      	subs	r2, r1, r3
 80205a8:	2a00      	cmp	r2, #0
{
 80205aa:	b083      	sub	sp, #12
    if( ( end - *p ) < 1 )
 80205ac:	dd43      	ble.n	8020636 <mbedtls_asn1_get_int+0x96>
    if( **p != tag )
 80205ae:	781a      	ldrb	r2, [r3, #0]
 80205b0:	2a02      	cmp	r2, #2
 80205b2:	d13d      	bne.n	8020630 <mbedtls_asn1_get_int+0x90>
    (*p)++;
 80205b4:	3301      	adds	r3, #1
 80205b6:	6003      	str	r3, [r0, #0]
    return( mbedtls_asn1_get_len( p, end, len ) );
 80205b8:	aa01      	add	r2, sp, #4
 80205ba:	4604      	mov	r4, r0
 80205bc:	f7ff fef8 	bl	80203b0 <mbedtls_asn1_get_len>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, tag ) ) != 0 )
 80205c0:	bb48      	cbnz	r0, 8020616 <mbedtls_asn1_get_int+0x76>
    if( len == 0 )
 80205c2:	9901      	ldr	r1, [sp, #4]
 80205c4:	2900      	cmp	r1, #0
 80205c6:	d030      	beq.n	802062a <mbedtls_asn1_get_int+0x8a>
    if( ( **p & 0x80 ) != 0 )
 80205c8:	6823      	ldr	r3, [r4, #0]
 80205ca:	f993 5000 	ldrsb.w	r5, [r3]
 80205ce:	781a      	ldrb	r2, [r3, #0]
 80205d0:	2d00      	cmp	r5, #0
 80205d2:	db2a      	blt.n	802062a <mbedtls_asn1_get_int+0x8a>
    while( len > 0 && **p == 0 )
 80205d4:	b93a      	cbnz	r2, 80205e6 <mbedtls_asn1_get_int+0x46>
        ++( *p );
 80205d6:	3301      	adds	r3, #1
        --len;
 80205d8:	3901      	subs	r1, #1
        ++( *p );
 80205da:	6023      	str	r3, [r4, #0]
        --len;
 80205dc:	9101      	str	r1, [sp, #4]
    while( len > 0 && **p == 0 )
 80205de:	b309      	cbz	r1, 8020624 <mbedtls_asn1_get_int+0x84>
 80205e0:	781a      	ldrb	r2, [r3, #0]
 80205e2:	2a00      	cmp	r2, #0
 80205e4:	d0f7      	beq.n	80205d6 <mbedtls_asn1_get_int+0x36>
    if( len > sizeof( int ) )
 80205e6:	2904      	cmp	r1, #4
 80205e8:	d81f      	bhi.n	802062a <mbedtls_asn1_get_int+0x8a>
    if( len == sizeof( int ) && ( **p & 0x80 ) != 0 )
 80205ea:	d116      	bne.n	802061a <mbedtls_asn1_get_int+0x7a>
 80205ec:	0612      	lsls	r2, r2, #24
 80205ee:	d41c      	bmi.n	802062a <mbedtls_asn1_get_int+0x8a>
    *val = 0;
 80205f0:	2500      	movs	r5, #0
    while( len-- > 0 )
 80205f2:	2203      	movs	r2, #3
    *val = 0;
 80205f4:	6035      	str	r5, [r6, #0]
    while( len-- > 0 )
 80205f6:	9201      	str	r2, [sp, #4]
 80205f8:	461d      	mov	r5, r3
 80205fa:	2700      	movs	r7, #0
 80205fc:	440b      	add	r3, r1
 80205fe:	442a      	add	r2, r5
        *val = ( *val << 8 ) | **p;
 8020600:	f815 1b01 	ldrb.w	r1, [r5], #1
 8020604:	ea41 2707 	orr.w	r7, r1, r7, lsl #8
    while( len-- > 0 )
 8020608:	42ab      	cmp	r3, r5
 802060a:	eba2 0105 	sub.w	r1, r2, r5
        *val = ( *val << 8 ) | **p;
 802060e:	6037      	str	r7, [r6, #0]
    while( len-- > 0 )
 8020610:	9101      	str	r1, [sp, #4]
        (*p)++;
 8020612:	6025      	str	r5, [r4, #0]
    while( len-- > 0 )
 8020614:	d1f4      	bne.n	8020600 <mbedtls_asn1_get_int+0x60>
    return( asn1_get_tagged_int( p, end, MBEDTLS_ASN1_INTEGER, val) );
}
 8020616:	b003      	add	sp, #12
 8020618:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *val = 0;
 802061a:	2500      	movs	r5, #0
    while( len-- > 0 )
 802061c:	1e4a      	subs	r2, r1, #1
    *val = 0;
 802061e:	6035      	str	r5, [r6, #0]
    while( len-- > 0 )
 8020620:	9201      	str	r2, [sp, #4]
 8020622:	e7e9      	b.n	80205f8 <mbedtls_asn1_get_int+0x58>
    *val = 0;
 8020624:	6031      	str	r1, [r6, #0]
}
 8020626:	b003      	add	sp, #12
 8020628:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 802062a:	f06f 0063 	mvn.w	r0, #99	; 0x63
 802062e:	e7f2      	b.n	8020616 <mbedtls_asn1_get_int+0x76>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 8020630:	f06f 0061 	mvn.w	r0, #97	; 0x61
    return( asn1_get_tagged_int( p, end, MBEDTLS_ASN1_INTEGER, val) );
 8020634:	e7ef      	b.n	8020616 <mbedtls_asn1_get_int+0x76>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8020636:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 802063a:	e7ec      	b.n	8020616 <mbedtls_asn1_get_int+0x76>

0802063c <mbedtls_asn1_get_mpi>:
    if( ( end - *p ) < 1 )
 802063c:	6803      	ldr	r3, [r0, #0]

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 802063e:	b570      	push	{r4, r5, r6, lr}
 8020640:	4604      	mov	r4, r0
    if( ( end - *p ) < 1 )
 8020642:	1ac8      	subs	r0, r1, r3
 8020644:	2800      	cmp	r0, #0
 8020646:	dd49      	ble.n	80206dc <mbedtls_asn1_get_mpi+0xa0>
    if( **p != tag )
 8020648:	7818      	ldrb	r0, [r3, #0]
 802064a:	2802      	cmp	r0, #2
 802064c:	d143      	bne.n	80206d6 <mbedtls_asn1_get_mpi+0x9a>
    (*p)++;
 802064e:	1c58      	adds	r0, r3, #1
    if( ( end - *p ) < 1 )
 8020650:	1a0d      	subs	r5, r1, r0
 8020652:	2d00      	cmp	r5, #0
    (*p)++;
 8020654:	6020      	str	r0, [r4, #0]
    if( ( end - *p ) < 1 )
 8020656:	dd41      	ble.n	80206dc <mbedtls_asn1_get_mpi+0xa0>
    if( ( **p & 0x80 ) == 0 )
 8020658:	f993 6001 	ldrsb.w	r6, [r3, #1]
 802065c:	7858      	ldrb	r0, [r3, #1]
 802065e:	2e00      	cmp	r6, #0
 8020660:	db0e      	blt.n	8020680 <mbedtls_asn1_get_mpi+0x44>
        *len = *(*p)++;
 8020662:	1c98      	adds	r0, r3, #2
 8020664:	6020      	str	r0, [r4, #0]
 8020666:	785d      	ldrb	r5, [r3, #1]
    if( *len > (size_t) ( end - *p ) )
 8020668:	1a0b      	subs	r3, r1, r0
 802066a:	42ab      	cmp	r3, r5
 802066c:	d336      	bcc.n	80206dc <mbedtls_asn1_get_mpi+0xa0>
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
 802066e:	4601      	mov	r1, r0
 8020670:	4610      	mov	r0, r2
 8020672:	462a      	mov	r2, r5
 8020674:	f000 fe90 	bl	8021398 <mbedtls_mpi_read_binary>

    *p += len;
 8020678:	6822      	ldr	r2, [r4, #0]
 802067a:	442a      	add	r2, r5
 802067c:	6022      	str	r2, [r4, #0]

    return( ret );
}
 802067e:	bd70      	pop	{r4, r5, r6, pc}
        switch( **p & 0x7F )
 8020680:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8020684:	3801      	subs	r0, #1
 8020686:	2803      	cmp	r0, #3
 8020688:	d82b      	bhi.n	80206e2 <mbedtls_asn1_get_mpi+0xa6>
 802068a:	e8df f000 	tbb	[pc, r0]
 802068e:	161e      	.short	0x161e
 8020690:	020a      	.short	0x020a
            if( ( end - *p ) < 5 )
 8020692:	2d04      	cmp	r5, #4
 8020694:	dd22      	ble.n	80206dc <mbedtls_asn1_get_mpi+0xa0>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 8020696:	f8d3 5002 	ldr.w	r5, [r3, #2]
            (*p) += 5;
 802069a:	1d98      	adds	r0, r3, #6
 802069c:	ba2d      	rev	r5, r5
 802069e:	6020      	str	r0, [r4, #0]
            break;
 80206a0:	e7e2      	b.n	8020668 <mbedtls_asn1_get_mpi+0x2c>
            if( ( end - *p ) < 4 )
 80206a2:	2d03      	cmp	r5, #3
 80206a4:	dd1a      	ble.n	80206dc <mbedtls_asn1_get_mpi+0xa0>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 80206a6:	78dd      	ldrb	r5, [r3, #3]
            *len = ( (size_t)(*p)[1] << 16 ) |
 80206a8:	7898      	ldrb	r0, [r3, #2]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 80206aa:	791e      	ldrb	r6, [r3, #4]
 80206ac:	022d      	lsls	r5, r5, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
 80206ae:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
            (*p) += 4;
 80206b2:	1d58      	adds	r0, r3, #5
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 80206b4:	4335      	orrs	r5, r6
            (*p) += 4;
 80206b6:	6020      	str	r0, [r4, #0]
            break;
 80206b8:	e7d6      	b.n	8020668 <mbedtls_asn1_get_mpi+0x2c>
            if( ( end - *p ) < 3 )
 80206ba:	2d02      	cmp	r5, #2
 80206bc:	dd0e      	ble.n	80206dc <mbedtls_asn1_get_mpi+0xa0>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 80206be:	885d      	ldrh	r5, [r3, #2]
            (*p) += 3;
 80206c0:	1d18      	adds	r0, r3, #4
 80206c2:	ba6d      	rev16	r5, r5
 80206c4:	b2ad      	uxth	r5, r5
 80206c6:	6020      	str	r0, [r4, #0]
            break;
 80206c8:	e7ce      	b.n	8020668 <mbedtls_asn1_get_mpi+0x2c>
            if( ( end - *p ) < 2 )
 80206ca:	2d01      	cmp	r5, #1
 80206cc:	d006      	beq.n	80206dc <mbedtls_asn1_get_mpi+0xa0>
            (*p) += 2;
 80206ce:	1cd8      	adds	r0, r3, #3
            *len = (*p)[1];
 80206d0:	789d      	ldrb	r5, [r3, #2]
            (*p) += 2;
 80206d2:	6020      	str	r0, [r4, #0]
            break;
 80206d4:	e7c8      	b.n	8020668 <mbedtls_asn1_get_mpi+0x2c>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80206d6:	f06f 0061 	mvn.w	r0, #97	; 0x61
}
 80206da:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80206dc:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
 80206e0:	bd70      	pop	{r4, r5, r6, pc}
    if( ( **p & 0x80 ) == 0 )
 80206e2:	f06f 0063 	mvn.w	r0, #99	; 0x63
}
 80206e6:	bd70      	pop	{r4, r5, r6, pc}

080206e8 <mbedtls_asn1_get_bitstring>:
    if( ( end - *p ) < 1 )
 80206e8:	6803      	ldr	r3, [r0, #0]
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
 80206ea:	b470      	push	{r4, r5, r6}
 80206ec:	4605      	mov	r5, r0
    if( ( end - *p ) < 1 )
 80206ee:	1ac8      	subs	r0, r1, r3
 80206f0:	2800      	cmp	r0, #0
 80206f2:	dd59      	ble.n	80207a8 <mbedtls_asn1_get_bitstring+0xc0>
    if( **p != tag )
 80206f4:	7818      	ldrb	r0, [r3, #0]
 80206f6:	2803      	cmp	r0, #3
 80206f8:	d153      	bne.n	80207a2 <mbedtls_asn1_get_bitstring+0xba>
    (*p)++;
 80206fa:	1c58      	adds	r0, r3, #1
    if( ( end - *p ) < 1 )
 80206fc:	1a0c      	subs	r4, r1, r0
 80206fe:	2c00      	cmp	r4, #0
    (*p)++;
 8020700:	6028      	str	r0, [r5, #0]
    if( ( end - *p ) < 1 )
 8020702:	dd51      	ble.n	80207a8 <mbedtls_asn1_get_bitstring+0xc0>
    if( ( **p & 0x80 ) == 0 )
 8020704:	f993 6001 	ldrsb.w	r6, [r3, #1]
 8020708:	7858      	ldrb	r0, [r3, #1]
 802070a:	2e00      	cmp	r6, #0
 802070c:	db1a      	blt.n	8020744 <mbedtls_asn1_get_bitstring+0x5c>
        *len = *(*p)++;
 802070e:	1c98      	adds	r0, r3, #2
 8020710:	6028      	str	r0, [r5, #0]
 8020712:	785c      	ldrb	r4, [r3, #1]
 8020714:	6014      	str	r4, [r2, #0]
    if( *len > (size_t) ( end - *p ) )
 8020716:	1a0b      	subs	r3, r1, r0
 8020718:	42a3      	cmp	r3, r4
 802071a:	d345      	bcc.n	80207a8 <mbedtls_asn1_get_bitstring+0xc0>
    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
 802071c:	2c00      	cmp	r4, #0
 802071e:	d043      	beq.n	80207a8 <mbedtls_asn1_get_bitstring+0xc0>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bs->len -= 1;
 8020720:	1e63      	subs	r3, r4, #1
 8020722:	6013      	str	r3, [r2, #0]

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
 8020724:	7803      	ldrb	r3, [r0, #0]
    if( bs->unused_bits > 7 )
 8020726:	2b07      	cmp	r3, #7
    bs->unused_bits = **p;
 8020728:	7113      	strb	r3, [r2, #4]
    if( bs->unused_bits > 7 )
 802072a:	d840      	bhi.n	80207ae <mbedtls_asn1_get_bitstring+0xc6>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;
 802072c:	682b      	ldr	r3, [r5, #0]

    /* Get actual bitstring */
    bs->p = *p;
    *p += bs->len;
 802072e:	441c      	add	r4, r3

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8020730:	428c      	cmp	r4, r1
 8020732:	bf0c      	ite	eq
 8020734:	2000      	moveq	r0, #0
 8020736:	f06f 0065 	mvnne.w	r0, #101	; 0x65
    (*p)++;
 802073a:	3301      	adds	r3, #1
    bs->p = *p;
 802073c:	6093      	str	r3, [r2, #8]
    *p += bs->len;
 802073e:	602c      	str	r4, [r5, #0]

    return( 0 );
}
 8020740:	bc70      	pop	{r4, r5, r6}
 8020742:	4770      	bx	lr
        switch( **p & 0x7F )
 8020744:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8020748:	3801      	subs	r0, #1
 802074a:	2803      	cmp	r0, #3
 802074c:	d82f      	bhi.n	80207ae <mbedtls_asn1_get_bitstring+0xc6>
 802074e:	e8df f000 	tbb	[pc, r0]
 8020752:	1821      	.short	0x1821
 8020754:	020b      	.short	0x020b
            if( ( end - *p ) < 5 )
 8020756:	2c04      	cmp	r4, #4
 8020758:	dd26      	ble.n	80207a8 <mbedtls_asn1_get_bitstring+0xc0>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 802075a:	f8d3 4002 	ldr.w	r4, [r3, #2]
            (*p) += 5;
 802075e:	1d98      	adds	r0, r3, #6
 8020760:	ba24      	rev	r4, r4
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 8020762:	6014      	str	r4, [r2, #0]
            (*p) += 5;
 8020764:	6028      	str	r0, [r5, #0]
            break;
 8020766:	e7d6      	b.n	8020716 <mbedtls_asn1_get_bitstring+0x2e>
            if( ( end - *p ) < 4 )
 8020768:	2c03      	cmp	r4, #3
 802076a:	dd1d      	ble.n	80207a8 <mbedtls_asn1_get_bitstring+0xc0>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 802076c:	78dc      	ldrb	r4, [r3, #3]
            *len = ( (size_t)(*p)[1] << 16 ) |
 802076e:	789e      	ldrb	r6, [r3, #2]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 8020770:	7918      	ldrb	r0, [r3, #4]
 8020772:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
 8020774:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 8020778:	4304      	orrs	r4, r0
            (*p) += 4;
 802077a:	1d58      	adds	r0, r3, #5
            *len = ( (size_t)(*p)[1] << 16 ) |
 802077c:	6014      	str	r4, [r2, #0]
            (*p) += 4;
 802077e:	6028      	str	r0, [r5, #0]
            break;
 8020780:	e7c9      	b.n	8020716 <mbedtls_asn1_get_bitstring+0x2e>
            if( ( end - *p ) < 3 )
 8020782:	2c02      	cmp	r4, #2
 8020784:	dd10      	ble.n	80207a8 <mbedtls_asn1_get_bitstring+0xc0>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 8020786:	885c      	ldrh	r4, [r3, #2]
            (*p) += 3;
 8020788:	1d18      	adds	r0, r3, #4
 802078a:	ba64      	rev16	r4, r4
 802078c:	b2a4      	uxth	r4, r4
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 802078e:	6014      	str	r4, [r2, #0]
            (*p) += 3;
 8020790:	6028      	str	r0, [r5, #0]
            break;
 8020792:	e7c0      	b.n	8020716 <mbedtls_asn1_get_bitstring+0x2e>
            if( ( end - *p ) < 2 )
 8020794:	2c01      	cmp	r4, #1
 8020796:	d007      	beq.n	80207a8 <mbedtls_asn1_get_bitstring+0xc0>
            *len = (*p)[1];
 8020798:	789c      	ldrb	r4, [r3, #2]
            (*p) += 2;
 802079a:	1cd8      	adds	r0, r3, #3
            *len = (*p)[1];
 802079c:	6014      	str	r4, [r2, #0]
            (*p) += 2;
 802079e:	6028      	str	r0, [r5, #0]
            break;
 80207a0:	e7b9      	b.n	8020716 <mbedtls_asn1_get_bitstring+0x2e>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80207a2:	f06f 0061 	mvn.w	r0, #97	; 0x61
 80207a6:	e7cb      	b.n	8020740 <mbedtls_asn1_get_bitstring+0x58>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80207a8:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 80207ac:	e7c8      	b.n	8020740 <mbedtls_asn1_get_bitstring+0x58>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 80207ae:	f06f 0063 	mvn.w	r0, #99	; 0x63
 80207b2:	e7c5      	b.n	8020740 <mbedtls_asn1_get_bitstring+0x58>

080207b4 <mbedtls_asn1_get_bitstring_null>:
    if( ( end - *p ) < 1 )
 80207b4:	6803      	ldr	r3, [r0, #0]
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 80207b6:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
 80207b8:	1acc      	subs	r4, r1, r3
 80207ba:	2c00      	cmp	r4, #0
 80207bc:	dd51      	ble.n	8020862 <mbedtls_asn1_get_bitstring_null+0xae>
    if( **p != tag )
 80207be:	781c      	ldrb	r4, [r3, #0]
 80207c0:	2c03      	cmp	r4, #3
 80207c2:	d14b      	bne.n	802085c <mbedtls_asn1_get_bitstring_null+0xa8>
    (*p)++;
 80207c4:	1c5c      	adds	r4, r3, #1
    if( ( end - *p ) < 1 )
 80207c6:	1b0d      	subs	r5, r1, r4
 80207c8:	2d00      	cmp	r5, #0
    (*p)++;
 80207ca:	6004      	str	r4, [r0, #0]
    if( ( end - *p ) < 1 )
 80207cc:	dd49      	ble.n	8020862 <mbedtls_asn1_get_bitstring_null+0xae>
    if( ( **p & 0x80 ) == 0 )
 80207ce:	f993 6001 	ldrsb.w	r6, [r3, #1]
 80207d2:	785c      	ldrb	r4, [r3, #1]
 80207d4:	2e00      	cmp	r6, #0
 80207d6:	db12      	blt.n	80207fe <mbedtls_asn1_get_bitstring_null+0x4a>
        *len = *(*p)++;
 80207d8:	1c9d      	adds	r5, r3, #2
 80207da:	6005      	str	r5, [r0, #0]
 80207dc:	785c      	ldrb	r4, [r3, #1]
 80207de:	6014      	str	r4, [r2, #0]
    if( *len > (size_t) ( end - *p ) )
 80207e0:	1b49      	subs	r1, r1, r5
 80207e2:	42a1      	cmp	r1, r4
 80207e4:	d33d      	bcc.n	8020862 <mbedtls_asn1_get_bitstring_null+0xae>
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
        return( ret );

    if( *len == 0 )
 80207e6:	2c00      	cmp	r4, #0
 80207e8:	d03e      	beq.n	8020868 <mbedtls_asn1_get_bitstring_null+0xb4>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
    --( *len );
 80207ea:	3c01      	subs	r4, #1
 80207ec:	6014      	str	r4, [r2, #0]

    if( **p != 0 )
 80207ee:	782b      	ldrb	r3, [r5, #0]
 80207f0:	2b00      	cmp	r3, #0
 80207f2:	d139      	bne.n	8020868 <mbedtls_asn1_get_bitstring_null+0xb4>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
    ++( *p );
 80207f4:	3501      	adds	r5, #1
 80207f6:	6005      	str	r5, [r0, #0]

    return( 0 );
 80207f8:	4618      	mov	r0, r3
}
 80207fa:	bc70      	pop	{r4, r5, r6}
 80207fc:	4770      	bx	lr
        switch( **p & 0x7F )
 80207fe:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8020802:	3c01      	subs	r4, #1
 8020804:	2c03      	cmp	r4, #3
 8020806:	d832      	bhi.n	802086e <mbedtls_asn1_get_bitstring_null+0xba>
 8020808:	e8df f004 	tbb	[pc, r4]
 802080c:	020b1821 	.word	0x020b1821
            if( ( end - *p ) < 5 )
 8020810:	2d04      	cmp	r5, #4
 8020812:	dd26      	ble.n	8020862 <mbedtls_asn1_get_bitstring_null+0xae>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 8020814:	f8d3 4002 	ldr.w	r4, [r3, #2]
            (*p) += 5;
 8020818:	1d9d      	adds	r5, r3, #6
 802081a:	ba24      	rev	r4, r4
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 802081c:	6014      	str	r4, [r2, #0]
            (*p) += 5;
 802081e:	6005      	str	r5, [r0, #0]
            break;
 8020820:	e7de      	b.n	80207e0 <mbedtls_asn1_get_bitstring_null+0x2c>
            if( ( end - *p ) < 4 )
 8020822:	2d03      	cmp	r5, #3
 8020824:	dd1d      	ble.n	8020862 <mbedtls_asn1_get_bitstring_null+0xae>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 8020826:	78dc      	ldrb	r4, [r3, #3]
            *len = ( (size_t)(*p)[1] << 16 ) |
 8020828:	789e      	ldrb	r6, [r3, #2]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 802082a:	791d      	ldrb	r5, [r3, #4]
 802082c:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
 802082e:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 8020832:	432c      	orrs	r4, r5
            (*p) += 4;
 8020834:	1d5d      	adds	r5, r3, #5
            *len = ( (size_t)(*p)[1] << 16 ) |
 8020836:	6014      	str	r4, [r2, #0]
            (*p) += 4;
 8020838:	6005      	str	r5, [r0, #0]
            break;
 802083a:	e7d1      	b.n	80207e0 <mbedtls_asn1_get_bitstring_null+0x2c>
            if( ( end - *p ) < 3 )
 802083c:	2d02      	cmp	r5, #2
 802083e:	dd10      	ble.n	8020862 <mbedtls_asn1_get_bitstring_null+0xae>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 8020840:	885c      	ldrh	r4, [r3, #2]
            (*p) += 3;
 8020842:	1d1d      	adds	r5, r3, #4
 8020844:	ba64      	rev16	r4, r4
 8020846:	b2a4      	uxth	r4, r4
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 8020848:	6014      	str	r4, [r2, #0]
            (*p) += 3;
 802084a:	6005      	str	r5, [r0, #0]
            break;
 802084c:	e7c8      	b.n	80207e0 <mbedtls_asn1_get_bitstring_null+0x2c>
            if( ( end - *p ) < 2 )
 802084e:	2d01      	cmp	r5, #1
 8020850:	d007      	beq.n	8020862 <mbedtls_asn1_get_bitstring_null+0xae>
            *len = (*p)[1];
 8020852:	789c      	ldrb	r4, [r3, #2]
            (*p) += 2;
 8020854:	1cdd      	adds	r5, r3, #3
            *len = (*p)[1];
 8020856:	6014      	str	r4, [r2, #0]
            (*p) += 2;
 8020858:	6005      	str	r5, [r0, #0]
            break;
 802085a:	e7c1      	b.n	80207e0 <mbedtls_asn1_get_bitstring_null+0x2c>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 802085c:	f06f 0061 	mvn.w	r0, #97	; 0x61
 8020860:	e7cb      	b.n	80207fa <mbedtls_asn1_get_bitstring_null+0x46>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8020862:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 8020866:	e7c8      	b.n	80207fa <mbedtls_asn1_get_bitstring_null+0x46>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 8020868:	f06f 0067 	mvn.w	r0, #103	; 0x67
 802086c:	e7c5      	b.n	80207fa <mbedtls_asn1_get_bitstring_null+0x46>
    if( ( **p & 0x80 ) == 0 )
 802086e:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8020872:	e7c2      	b.n	80207fa <mbedtls_asn1_get_bitstring_null+0x46>

08020874 <mbedtls_asn1_get_sequence_of>:
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
 8020874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020878:	4616      	mov	r6, r2
    asn1_get_sequence_of_cb_ctx_t cb_ctx = { tag, cur };
    memset( cur, 0, sizeof( mbedtls_asn1_sequence ) );
 802087a:	2200      	movs	r2, #0
 802087c:	6032      	str	r2, [r6, #0]
 802087e:	6072      	str	r2, [r6, #4]
 8020880:	60b2      	str	r2, [r6, #8]
 8020882:	60f2      	str	r2, [r6, #12]
    if( ( end - *p ) < 1 )
 8020884:	6802      	ldr	r2, [r0, #0]
{
 8020886:	469a      	mov	sl, r3
    if( ( end - *p ) < 1 )
 8020888:	1a8b      	subs	r3, r1, r2
 802088a:	2b00      	cmp	r3, #0
{
 802088c:	b085      	sub	sp, #20
    if( ( end - *p ) < 1 )
 802088e:	f340 8089 	ble.w	80209a4 <mbedtls_asn1_get_sequence_of+0x130>
    if( **p != tag )
 8020892:	7813      	ldrb	r3, [r2, #0]
 8020894:	2b30      	cmp	r3, #48	; 0x30
 8020896:	d17f      	bne.n	8020998 <mbedtls_asn1_get_sequence_of+0x124>
    (*p)++;
 8020898:	3201      	adds	r2, #1
 802089a:	6002      	str	r2, [r0, #0]
    return( mbedtls_asn1_get_len( p, end, len ) );
 802089c:	aa03      	add	r2, sp, #12
 802089e:	4607      	mov	r7, r0
 80208a0:	4688      	mov	r8, r1
 80208a2:	f7ff fd85 	bl	80203b0 <mbedtls_asn1_get_len>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80208a6:	4683      	mov	fp, r0
 80208a8:	2800      	cmp	r0, #0
 80208aa:	d171      	bne.n	8020990 <mbedtls_asn1_get_sequence_of+0x11c>
    if( *p + len != end )
 80208ac:	683c      	ldr	r4, [r7, #0]
 80208ae:	9b03      	ldr	r3, [sp, #12]
 80208b0:	4423      	add	r3, r4
 80208b2:	4598      	cmp	r8, r3
 80208b4:	d17c      	bne.n	80209b0 <mbedtls_asn1_get_sequence_of+0x13c>
    while( *p < end )
 80208b6:	45a0      	cmp	r8, r4
 80208b8:	d96a      	bls.n	8020990 <mbedtls_asn1_get_sequence_of+0x11c>
    return( mbedtls_asn1_traverse_sequence_of(
 80208ba:	fa5f f38a 	uxtb.w	r3, sl
 80208be:	9301      	str	r3, [sp, #4]
 80208c0:	e01d      	b.n	80208fe <mbedtls_asn1_get_sequence_of+0x8a>
        *len = *(*p)++;
 80208c2:	f104 0902 	add.w	r9, r4, #2
 80208c6:	f8c7 9000 	str.w	r9, [r7]
 80208ca:	7865      	ldrb	r5, [r4, #1]
 80208cc:	9503      	str	r5, [sp, #12]
    if( *len > (size_t) ( end - *p ) )
 80208ce:	eba8 0209 	sub.w	r2, r8, r9
 80208d2:	4295      	cmp	r5, r2
 80208d4:	d866      	bhi.n	80209a4 <mbedtls_asn1_get_sequence_of+0x130>
    if( cur->buf.p != NULL )
 80208d6:	68b2      	ldr	r2, [r6, #8]
 80208d8:	b13a      	cbz	r2, 80208ea <mbedtls_asn1_get_sequence_of+0x76>
            mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );
 80208da:	2110      	movs	r1, #16
 80208dc:	2001      	movs	r0, #1
 80208de:	f00f fa4b 	bl	802fd78 <calloc>
        cur->next =
 80208e2:	60f0      	str	r0, [r6, #12]
        if( cur->next == NULL )
 80208e4:	2800      	cmp	r0, #0
 80208e6:	d051      	beq.n	802098c <mbedtls_asn1_get_sequence_of+0x118>
 80208e8:	4606      	mov	r6, r0
    cur->buf.p = start;
 80208ea:	f8c6 9008 	str.w	r9, [r6, #8]
        *p += len;
 80208ee:	683c      	ldr	r4, [r7, #0]
    cur->buf.len = len;
 80208f0:	6075      	str	r5, [r6, #4]
        *p += len;
 80208f2:	442c      	add	r4, r5
    while( *p < end )
 80208f4:	45a0      	cmp	r8, r4
    cur->buf.tag = tag;
 80208f6:	f8c6 a000 	str.w	sl, [r6]
        *p += len;
 80208fa:	603c      	str	r4, [r7, #0]
    while( *p < end )
 80208fc:	d948      	bls.n	8020990 <mbedtls_asn1_get_sequence_of+0x11c>
        unsigned char const tag = *(*p)++;
 80208fe:	1c62      	adds	r2, r4, #1
 8020900:	603a      	str	r2, [r7, #0]
 8020902:	f894 a000 	ldrb.w	sl, [r4]
        if( ( tag & tag_must_mask ) != tag_must_val )
 8020906:	9b01      	ldr	r3, [sp, #4]
 8020908:	4553      	cmp	r3, sl
 802090a:	d145      	bne.n	8020998 <mbedtls_asn1_get_sequence_of+0x124>
    if( ( end - *p ) < 1 )
 802090c:	eba8 0202 	sub.w	r2, r8, r2
 8020910:	2a00      	cmp	r2, #0
 8020912:	dd47      	ble.n	80209a4 <mbedtls_asn1_get_sequence_of+0x130>
    if( ( **p & 0x80 ) == 0 )
 8020914:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8020918:	7861      	ldrb	r1, [r4, #1]
 802091a:	2800      	cmp	r0, #0
 802091c:	dad1      	bge.n	80208c2 <mbedtls_asn1_get_sequence_of+0x4e>
        switch( **p & 0x7F )
 802091e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8020922:	3901      	subs	r1, #1
 8020924:	2903      	cmp	r1, #3
 8020926:	d846      	bhi.n	80209b6 <mbedtls_asn1_get_sequence_of+0x142>
 8020928:	e8df f001 	tbb	[pc, r1]
 802092c:	020d1c27 	.word	0x020d1c27
            if( ( end - *p ) < 5 )
 8020930:	2a04      	cmp	r2, #4
 8020932:	dd37      	ble.n	80209a4 <mbedtls_asn1_get_sequence_of+0x130>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 8020934:	f8d4 5002 	ldr.w	r5, [r4, #2]
            (*p) += 5;
 8020938:	f104 0906 	add.w	r9, r4, #6
 802093c:	ba2d      	rev	r5, r5
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 802093e:	9503      	str	r5, [sp, #12]
            (*p) += 5;
 8020940:	f8c7 9000 	str.w	r9, [r7]
            break;
 8020944:	e7c3      	b.n	80208ce <mbedtls_asn1_get_sequence_of+0x5a>
            if( ( end - *p ) < 4 )
 8020946:	2a03      	cmp	r2, #3
 8020948:	dd2c      	ble.n	80209a4 <mbedtls_asn1_get_sequence_of+0x130>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 802094a:	78e5      	ldrb	r5, [r4, #3]
            *len = ( (size_t)(*p)[1] << 16 ) |
 802094c:	78a1      	ldrb	r1, [r4, #2]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 802094e:	7922      	ldrb	r2, [r4, #4]
 8020950:	022d      	lsls	r5, r5, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
 8020952:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 8020956:	4315      	orrs	r5, r2
            (*p) += 4;
 8020958:	f104 0905 	add.w	r9, r4, #5
            *len = ( (size_t)(*p)[1] << 16 ) |
 802095c:	9503      	str	r5, [sp, #12]
            (*p) += 4;
 802095e:	f8c7 9000 	str.w	r9, [r7]
            break;
 8020962:	e7b4      	b.n	80208ce <mbedtls_asn1_get_sequence_of+0x5a>
            if( ( end - *p ) < 3 )
 8020964:	2a02      	cmp	r2, #2
 8020966:	dd1d      	ble.n	80209a4 <mbedtls_asn1_get_sequence_of+0x130>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 8020968:	8865      	ldrh	r5, [r4, #2]
            (*p) += 3;
 802096a:	f104 0904 	add.w	r9, r4, #4
 802096e:	ba6d      	rev16	r5, r5
 8020970:	b2ad      	uxth	r5, r5
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 8020972:	9503      	str	r5, [sp, #12]
            (*p) += 3;
 8020974:	f8c7 9000 	str.w	r9, [r7]
            break;
 8020978:	e7a9      	b.n	80208ce <mbedtls_asn1_get_sequence_of+0x5a>
            if( ( end - *p ) < 2 )
 802097a:	2a01      	cmp	r2, #1
 802097c:	d012      	beq.n	80209a4 <mbedtls_asn1_get_sequence_of+0x130>
            *len = (*p)[1];
 802097e:	78a5      	ldrb	r5, [r4, #2]
            (*p) += 2;
 8020980:	f104 0903 	add.w	r9, r4, #3
            *len = (*p)[1];
 8020984:	9503      	str	r5, [sp, #12]
            (*p) += 2;
 8020986:	f8c7 9000 	str.w	r9, [r7]
            break;
 802098a:	e7a0      	b.n	80208ce <mbedtls_asn1_get_sequence_of+0x5a>
            return( MBEDTLS_ERR_ASN1_ALLOC_FAILED );
 802098c:	f06f 0b69 	mvn.w	fp, #105	; 0x69
                p, end, 0xFF, tag, 0, 0,
                asn1_get_sequence_of_cb, &cb_ctx ) );
}
 8020990:	4658      	mov	r0, fp
 8020992:	b005      	add	sp, #20
 8020994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 8020998:	f06f 0b61 	mvn.w	fp, #97	; 0x61
}
 802099c:	4658      	mov	r0, fp
 802099e:	b005      	add	sp, #20
 80209a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80209a4:	f06f 0b5f 	mvn.w	fp, #95	; 0x5f
}
 80209a8:	4658      	mov	r0, fp
 80209aa:	b005      	add	sp, #20
 80209ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80209b0:	f06f 0b65 	mvn.w	fp, #101	; 0x65
 80209b4:	e7ec      	b.n	8020990 <mbedtls_asn1_get_sequence_of+0x11c>
    if( ( **p & 0x80 ) == 0 )
 80209b6:	f06f 0b63 	mvn.w	fp, #99	; 0x63
 80209ba:	e7e9      	b.n	8020990 <mbedtls_asn1_get_sequence_of+0x11c>

080209bc <mbedtls_asn1_get_alg>:

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 80209bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( ( end - *p ) < 1 )
 80209be:	6805      	ldr	r5, [r0, #0]
{
 80209c0:	4604      	mov	r4, r0
    if( ( end - *p ) < 1 )
 80209c2:	1b48      	subs	r0, r1, r5
 80209c4:	2800      	cmp	r0, #0
 80209c6:	f340 80b3 	ble.w	8020b30 <mbedtls_asn1_get_alg+0x174>
 80209ca:	461f      	mov	r7, r3
    if( **p != tag )
 80209cc:	782b      	ldrb	r3, [r5, #0]
 80209ce:	2b30      	cmp	r3, #48	; 0x30
 80209d0:	f040 8085 	bne.w	8020ade <mbedtls_asn1_get_alg+0x122>
    (*p)++;
 80209d4:	1c6b      	adds	r3, r5, #1
    if( ( end - *p ) < 1 )
 80209d6:	1ac8      	subs	r0, r1, r3
 80209d8:	2800      	cmp	r0, #0
    (*p)++;
 80209da:	6023      	str	r3, [r4, #0]
    if( ( end - *p ) < 1 )
 80209dc:	f340 80a8 	ble.w	8020b30 <mbedtls_asn1_get_alg+0x174>
    if( ( **p & 0x80 ) == 0 )
 80209e0:	f995 6001 	ldrsb.w	r6, [r5, #1]
 80209e4:	786b      	ldrb	r3, [r5, #1]
 80209e6:	2e00      	cmp	r6, #0
 80209e8:	db47      	blt.n	8020a7a <mbedtls_asn1_get_alg+0xbe>
        *len = *(*p)++;
 80209ea:	1ca8      	adds	r0, r5, #2
 80209ec:	6020      	str	r0, [r4, #0]
 80209ee:	786d      	ldrb	r5, [r5, #1]
    if( *len > (size_t) ( end - *p ) )
 80209f0:	1a09      	subs	r1, r1, r0
 80209f2:	42a9      	cmp	r1, r5
 80209f4:	f0c0 809c 	bcc.w	8020b30 <mbedtls_asn1_get_alg+0x174>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
 80209f8:	2900      	cmp	r1, #0
 80209fa:	f340 8099 	ble.w	8020b30 <mbedtls_asn1_get_alg+0x174>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
 80209fe:	7803      	ldrb	r3, [r0, #0]
    if( ( end - *p ) < 1 )
 8020a00:	2d00      	cmp	r5, #0
    end = *p + len;
 8020a02:	eb00 0605 	add.w	r6, r0, r5
    alg->tag = **p;
 8020a06:	6013      	str	r3, [r2, #0]
    if( ( end - *p ) < 1 )
 8020a08:	f340 8092 	ble.w	8020b30 <mbedtls_asn1_get_alg+0x174>
    if( **p != tag )
 8020a0c:	7803      	ldrb	r3, [r0, #0]
 8020a0e:	2b06      	cmp	r3, #6
 8020a10:	d165      	bne.n	8020ade <mbedtls_asn1_get_alg+0x122>
    (*p)++;
 8020a12:	1c43      	adds	r3, r0, #1
    if( ( end - *p ) < 1 )
 8020a14:	3d01      	subs	r5, #1
    (*p)++;
 8020a16:	6023      	str	r3, [r4, #0]
    if( ( end - *p ) < 1 )
 8020a18:	f000 808a 	beq.w	8020b30 <mbedtls_asn1_get_alg+0x174>
    if( ( **p & 0x80 ) == 0 )
 8020a1c:	f990 1001 	ldrsb.w	r1, [r0, #1]
 8020a20:	7843      	ldrb	r3, [r0, #1]
 8020a22:	2900      	cmp	r1, #0
 8020a24:	db20      	blt.n	8020a68 <mbedtls_asn1_get_alg+0xac>
        *len = *(*p)++;
 8020a26:	1c81      	adds	r1, r0, #2
 8020a28:	6021      	str	r1, [r4, #0]
 8020a2a:	7843      	ldrb	r3, [r0, #1]
 8020a2c:	6053      	str	r3, [r2, #4]
    if( *len > (size_t) ( end - *p ) )
 8020a2e:	1a70      	subs	r0, r6, r1
 8020a30:	4298      	cmp	r0, r3
 8020a32:	d37d      	bcc.n	8020b30 <mbedtls_asn1_get_alg+0x174>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( ret );

    alg->p = *p;
    *p += alg->len;
 8020a34:	18c8      	adds	r0, r1, r3

    if( *p == end )
 8020a36:	42b0      	cmp	r0, r6
    alg->p = *p;
 8020a38:	6091      	str	r1, [r2, #8]
    *p += alg->len;
 8020a3a:	6020      	str	r0, [r4, #0]
    if( *p == end )
 8020a3c:	d049      	beq.n	8020ad2 <mbedtls_asn1_get_alg+0x116>
    {
        mbedtls_platform_zeroize( params, sizeof(mbedtls_asn1_buf) );
        return( 0 );
    }

    params->tag = **p;
 8020a3e:	463a      	mov	r2, r7
 8020a40:	5ccb      	ldrb	r3, [r1, r3]
    (*p)++;
 8020a42:	3001      	adds	r0, #1
    params->tag = **p;
 8020a44:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 8020a48:	4631      	mov	r1, r6
    (*p)++;
 8020a4a:	6020      	str	r0, [r4, #0]
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 8020a4c:	4620      	mov	r0, r4
 8020a4e:	f7ff fcaf 	bl	80203b0 <mbedtls_asn1_get_len>
 8020a52:	b940      	cbnz	r0, 8020a66 <mbedtls_asn1_get_alg+0xaa>
        return( ret );

    params->p = *p;
 8020a54:	6823      	ldr	r3, [r4, #0]
    *p += params->len;
 8020a56:	687a      	ldr	r2, [r7, #4]
    params->p = *p;
 8020a58:	60bb      	str	r3, [r7, #8]
    *p += params->len;
 8020a5a:	4413      	add	r3, r2

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8020a5c:	42b3      	cmp	r3, r6
 8020a5e:	bf18      	it	ne
 8020a60:	f06f 0065 	mvnne.w	r0, #101	; 0x65
    *p += params->len;
 8020a64:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 8020a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        switch( **p & 0x7F )
 8020a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8020a6c:	3b01      	subs	r3, #1
 8020a6e:	2b03      	cmp	r3, #3
 8020a70:	d861      	bhi.n	8020b36 <mbedtls_asn1_get_alg+0x17a>
 8020a72:	e8df f003 	tbb	[pc, r3]
 8020a76:	4740      	.short	0x4740
 8020a78:	3750      	.short	0x3750
 8020a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8020a7e:	3b01      	subs	r3, #1
 8020a80:	2b03      	cmp	r3, #3
 8020a82:	d858      	bhi.n	8020b36 <mbedtls_asn1_get_alg+0x17a>
 8020a84:	e8df f003 	tbb	[pc, r3]
 8020a88:	020a171f 	.word	0x020a171f
            if( ( end - *p ) < 5 )
 8020a8c:	2804      	cmp	r0, #4
 8020a8e:	dd4f      	ble.n	8020b30 <mbedtls_asn1_get_alg+0x174>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 8020a90:	f8d5 6002 	ldr.w	r6, [r5, #2]
            (*p) += 5;
 8020a94:	1da8      	adds	r0, r5, #6
 8020a96:	6020      	str	r0, [r4, #0]
 8020a98:	ba35      	rev	r5, r6
            break;
 8020a9a:	e7a9      	b.n	80209f0 <mbedtls_asn1_get_alg+0x34>
            if( ( end - *p ) < 4 )
 8020a9c:	2803      	cmp	r0, #3
 8020a9e:	dd47      	ble.n	8020b30 <mbedtls_asn1_get_alg+0x174>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 8020aa0:	78eb      	ldrb	r3, [r5, #3]
            *len = ( (size_t)(*p)[1] << 16 ) |
 8020aa2:	78a8      	ldrb	r0, [r5, #2]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 8020aa4:	792e      	ldrb	r6, [r5, #4]
 8020aa6:	021b      	lsls	r3, r3, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
 8020aa8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
            (*p) += 4;
 8020aac:	1d68      	adds	r0, r5, #5
 8020aae:	6020      	str	r0, [r4, #0]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 8020ab0:	ea43 0506 	orr.w	r5, r3, r6
            break;
 8020ab4:	e79c      	b.n	80209f0 <mbedtls_asn1_get_alg+0x34>
            if( ( end - *p ) < 3 )
 8020ab6:	2802      	cmp	r0, #2
 8020ab8:	dd3a      	ble.n	8020b30 <mbedtls_asn1_get_alg+0x174>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 8020aba:	886b      	ldrh	r3, [r5, #2]
            (*p) += 3;
 8020abc:	1d28      	adds	r0, r5, #4
 8020abe:	ba5d      	rev16	r5, r3
 8020ac0:	b2ad      	uxth	r5, r5
 8020ac2:	6020      	str	r0, [r4, #0]
            break;
 8020ac4:	e794      	b.n	80209f0 <mbedtls_asn1_get_alg+0x34>
            if( ( end - *p ) < 2 )
 8020ac6:	2801      	cmp	r0, #1
 8020ac8:	d032      	beq.n	8020b30 <mbedtls_asn1_get_alg+0x174>
            (*p) += 2;
 8020aca:	1ce8      	adds	r0, r5, #3
            *len = (*p)[1];
 8020acc:	78ad      	ldrb	r5, [r5, #2]
            (*p) += 2;
 8020ace:	6020      	str	r0, [r4, #0]
            break;
 8020ad0:	e78e      	b.n	80209f0 <mbedtls_asn1_get_alg+0x34>
        mbedtls_platform_zeroize( params, sizeof(mbedtls_asn1_buf) );
 8020ad2:	4638      	mov	r0, r7
 8020ad4:	210c      	movs	r1, #12
 8020ad6:	f007 f829 	bl	8027b2c <mbedtls_platform_zeroize>
        return( 0 );
 8020ada:	2000      	movs	r0, #0
}
 8020adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 8020ade:	f06f 0061 	mvn.w	r0, #97	; 0x61
}
 8020ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( ( end - *p ) < 5 )
 8020ae4:	2d04      	cmp	r5, #4
 8020ae6:	dd23      	ble.n	8020b30 <mbedtls_asn1_get_alg+0x174>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 8020ae8:	f8d0 3002 	ldr.w	r3, [r0, #2]
            (*p) += 5;
 8020aec:	1d81      	adds	r1, r0, #6
 8020aee:	ba1b      	rev	r3, r3
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 8020af0:	6053      	str	r3, [r2, #4]
            (*p) += 5;
 8020af2:	6021      	str	r1, [r4, #0]
            break;
 8020af4:	e79b      	b.n	8020a2e <mbedtls_asn1_get_alg+0x72>
            if( ( end - *p ) < 2 )
 8020af6:	2d01      	cmp	r5, #1
 8020af8:	d01a      	beq.n	8020b30 <mbedtls_asn1_get_alg+0x174>
            *len = (*p)[1];
 8020afa:	7883      	ldrb	r3, [r0, #2]
            (*p) += 2;
 8020afc:	1cc1      	adds	r1, r0, #3
            *len = (*p)[1];
 8020afe:	6053      	str	r3, [r2, #4]
            (*p) += 2;
 8020b00:	6021      	str	r1, [r4, #0]
            break;
 8020b02:	e794      	b.n	8020a2e <mbedtls_asn1_get_alg+0x72>
            if( ( end - *p ) < 3 )
 8020b04:	2d02      	cmp	r5, #2
 8020b06:	dd13      	ble.n	8020b30 <mbedtls_asn1_get_alg+0x174>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 8020b08:	8843      	ldrh	r3, [r0, #2]
            (*p) += 3;
 8020b0a:	1d01      	adds	r1, r0, #4
 8020b0c:	ba5b      	rev16	r3, r3
 8020b0e:	b29b      	uxth	r3, r3
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 8020b10:	6053      	str	r3, [r2, #4]
            (*p) += 3;
 8020b12:	6021      	str	r1, [r4, #0]
            break;
 8020b14:	e78b      	b.n	8020a2e <mbedtls_asn1_get_alg+0x72>
            if( ( end - *p ) < 4 )
 8020b16:	2d03      	cmp	r5, #3
 8020b18:	dd0a      	ble.n	8020b30 <mbedtls_asn1_get_alg+0x174>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 8020b1a:	78c3      	ldrb	r3, [r0, #3]
            *len = ( (size_t)(*p)[1] << 16 ) |
 8020b1c:	7885      	ldrb	r5, [r0, #2]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 8020b1e:	7901      	ldrb	r1, [r0, #4]
 8020b20:	021b      	lsls	r3, r3, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
 8020b22:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 8020b26:	430b      	orrs	r3, r1
            (*p) += 4;
 8020b28:	1d41      	adds	r1, r0, #5
            *len = ( (size_t)(*p)[1] << 16 ) |
 8020b2a:	6053      	str	r3, [r2, #4]
            (*p) += 4;
 8020b2c:	6021      	str	r1, [r4, #0]
            break;
 8020b2e:	e77e      	b.n	8020a2e <mbedtls_asn1_get_alg+0x72>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8020b30:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
 8020b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8020b36:	f06f 0063 	mvn.w	r0, #99	; 0x63
}
 8020b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08020b3c <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 8020b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020b40:	f8dd c020 	ldr.w	ip, [sp, #32]
 8020b44:	4691      	mov	r9, r2
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 8020b46:	f1bc 0f00 	cmp.w	ip, #0
 8020b4a:	f000 8097 	beq.w	8020c7c <mbedtls_base64_decode+0x140>
 8020b4e:	2200      	movs	r2, #0
 8020b50:	4696      	mov	lr, r2
 8020b52:	4614      	mov	r4, r2
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 8020b54:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8020c9c <mbedtls_base64_decode+0x160>
        x = 0;
 8020b58:	2600      	movs	r6, #0
 8020b5a:	1e65      	subs	r5, r4, #1
 8020b5c:	441d      	add	r5, r3
        while( i < slen && src[i] == ' ' )
 8020b5e:	f815 7f01 	ldrb.w	r7, [r5, #1]!
 8020b62:	2f20      	cmp	r7, #32
 8020b64:	d104      	bne.n	8020b70 <mbedtls_base64_decode+0x34>
            ++i;
 8020b66:	3401      	adds	r4, #1
        while( i < slen && src[i] == ' ' )
 8020b68:	45a4      	cmp	ip, r4
            ++x;
 8020b6a:	f106 0601 	add.w	r6, r6, #1
        while( i < slen && src[i] == ' ' )
 8020b6e:	d8f6      	bhi.n	8020b5e <mbedtls_base64_decode+0x22>
        if( i == slen )
 8020b70:	4564      	cmp	r4, ip
 8020b72:	d01c      	beq.n	8020bae <mbedtls_base64_decode+0x72>
        if( ( slen - i ) >= 2 &&
 8020b74:	ebac 0504 	sub.w	r5, ip, r4
 8020b78:	2d01      	cmp	r5, #1
            src[i] == '\r' && src[i + 1] == '\n' )
 8020b7a:	5d1d      	ldrb	r5, [r3, r4]
        if( ( slen - i ) >= 2 &&
 8020b7c:	d901      	bls.n	8020b82 <mbedtls_base64_decode+0x46>
 8020b7e:	2d0d      	cmp	r5, #13
 8020b80:	d06f      	beq.n	8020c62 <mbedtls_base64_decode+0x126>
        if( src[i] == '\n' )
 8020b82:	2d0a      	cmp	r5, #10
 8020b84:	d00f      	beq.n	8020ba6 <mbedtls_base64_decode+0x6a>
        if( x != 0 )
 8020b86:	2e00      	cmp	r6, #0
 8020b88:	d167      	bne.n	8020c5a <mbedtls_base64_decode+0x11e>
        if( src[i] == '=' && ++j > 2 )
 8020b8a:	2d3d      	cmp	r5, #61	; 0x3d
 8020b8c:	d062      	beq.n	8020c54 <mbedtls_base64_decode+0x118>
        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 8020b8e:	062e      	lsls	r6, r5, #24
 8020b90:	d463      	bmi.n	8020c5a <mbedtls_base64_decode+0x11e>
 8020b92:	f818 5005 	ldrb.w	r5, [r8, r5]
 8020b96:	2d7f      	cmp	r5, #127	; 0x7f
 8020b98:	d05f      	beq.n	8020c5a <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 8020b9a:	2d3f      	cmp	r5, #63	; 0x3f
 8020b9c:	d801      	bhi.n	8020ba2 <mbedtls_base64_decode+0x66>
 8020b9e:	2a00      	cmp	r2, #0
 8020ba0:	d15b      	bne.n	8020c5a <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
 8020ba2:	f10e 0e01 	add.w	lr, lr, #1
 8020ba6:	3401      	adds	r4, #1
    for( i = n = j = 0; i < slen; i++ )
 8020ba8:	45a4      	cmp	ip, r4
 8020baa:	d8d5      	bhi.n	8020b58 <mbedtls_base64_decode+0x1c>
 8020bac:	46a4      	mov	ip, r4
    }

    if( n == 0 )
 8020bae:	f1be 0f00 	cmp.w	lr, #0
 8020bb2:	d063      	beq.n	8020c7c <mbedtls_base64_decode+0x140>

    /* The following expression is to calculate the following formula without
     * risk of integer overflow in n:
     *     n = ( ( n * 6 ) + 7 ) >> 3;
     */
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
 8020bb4:	f00e 0407 	and.w	r4, lr, #7
 8020bb8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020bbc:	ea4f 0ede 	mov.w	lr, lr, lsr #3
 8020bc0:	0064      	lsls	r4, r4, #1
 8020bc2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020bc6:	3407      	adds	r4, #7
    n -= j;
 8020bc8:	ebc2 024e 	rsb	r2, r2, lr, lsl #1
 8020bcc:	eb02 02d4 	add.w	r2, r2, r4, lsr #3

    if( dst == NULL || dlen < n )
 8020bd0:	2800      	cmp	r0, #0
 8020bd2:	d05b      	beq.n	8020c8c <mbedtls_base64_decode+0x150>
 8020bd4:	428a      	cmp	r2, r1
 8020bd6:	d859      	bhi.n	8020c8c <mbedtls_base64_decode+0x150>
    {
        *olen = n;
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 8020bd8:	f1bc 0f00 	cmp.w	ip, #0
 8020bdc:	d035      	beq.n	8020c4a <mbedtls_base64_decode+0x10e>
 8020bde:	2600      	movs	r6, #0
 8020be0:	3b01      	subs	r3, #1
 8020be2:	4607      	mov	r7, r0
 8020be4:	4634      	mov	r4, r6
 8020be6:	2503      	movs	r5, #3
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 8020be8:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 8020c9c <mbedtls_base64_decode+0x160>
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 8020bec:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8020ca0 <mbedtls_base64_decode+0x164>
 8020bf0:	449c      	add	ip, r3
 8020bf2:	e001      	b.n	8020bf8 <mbedtls_base64_decode+0xbc>
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 8020bf4:	459c      	cmp	ip, r3
 8020bf6:	d026      	beq.n	8020c46 <mbedtls_base64_decode+0x10a>
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 8020bf8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8020bfc:	f1a1 020a 	sub.w	r2, r1, #10
 8020c00:	b2d2      	uxtb	r2, r2
 8020c02:	2a16      	cmp	r2, #22
 8020c04:	d803      	bhi.n	8020c0e <mbedtls_base64_decode+0xd2>
 8020c06:	fa28 f202 	lsr.w	r2, r8, r2
 8020c0a:	07d2      	lsls	r2, r2, #31
 8020c0c:	d4f2      	bmi.n	8020bf4 <mbedtls_base64_decode+0xb8>
        j -= ( base64_dec_map[*src] == 64 );
 8020c0e:	f81e 2001 	ldrb.w	r2, [lr, r1]
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
 8020c12:	3401      	adds	r4, #1
        j -= ( base64_dec_map[*src] == 64 );
 8020c14:	2a40      	cmp	r2, #64	; 0x40
 8020c16:	bf08      	it	eq
 8020c18:	3d01      	subeq	r5, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 8020c1a:	f002 013f 	and.w	r1, r2, #63	; 0x3f
        if( ++n == 4 )
 8020c1e:	2c04      	cmp	r4, #4
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 8020c20:	ea41 1686 	orr.w	r6, r1, r6, lsl #6
        if( ++n == 4 )
 8020c24:	d1e6      	bne.n	8020bf4 <mbedtls_base64_decode+0xb8>
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 8020c26:	b33d      	cbz	r5, 8020c78 <mbedtls_base64_decode+0x13c>
 8020c28:	0c32      	lsrs	r2, r6, #16
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 8020c2a:	2d01      	cmp	r5, #1
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 8020c2c:	703a      	strb	r2, [r7, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 8020c2e:	d032      	beq.n	8020c96 <mbedtls_base64_decode+0x15a>
 8020c30:	0a32      	lsrs	r2, r6, #8
            if( j > 2 ) *p++ = (unsigned char)( x       );
 8020c32:	2d02      	cmp	r5, #2
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 8020c34:	707a      	strb	r2, [r7, #1]
            if( j > 2 ) *p++ = (unsigned char)( x       );
 8020c36:	d026      	beq.n	8020c86 <mbedtls_base64_decode+0x14a>
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 8020c38:	459c      	cmp	ip, r3
            if( j > 2 ) *p++ = (unsigned char)( x       );
 8020c3a:	70be      	strb	r6, [r7, #2]
            n = 0;
 8020c3c:	f04f 0400 	mov.w	r4, #0
            if( j > 2 ) *p++ = (unsigned char)( x       );
 8020c40:	f107 0703 	add.w	r7, r7, #3
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 8020c44:	d1d8      	bne.n	8020bf8 <mbedtls_base64_decode+0xbc>
 8020c46:	eba7 0c00 	sub.w	ip, r7, r0
        }
    }

    *olen = p - dst;

    return( 0 );
 8020c4a:	2000      	movs	r0, #0
    *olen = p - dst;
 8020c4c:	f8c9 c000 	str.w	ip, [r9]
}
 8020c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( src[i] == '=' && ++j > 2 )
 8020c54:	3201      	adds	r2, #1
 8020c56:	2a02      	cmp	r2, #2
 8020c58:	d9a3      	bls.n	8020ba2 <mbedtls_base64_decode+0x66>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 8020c5a:	f06f 002b 	mvn.w	r0, #43	; 0x2b
}
 8020c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            src[i] == '\r' && src[i + 1] == '\n' )
 8020c62:	1c67      	adds	r7, r4, #1
 8020c64:	f813 a007 	ldrb.w	sl, [r3, r7]
 8020c68:	f1ba 0f0a 	cmp.w	sl, #10
 8020c6c:	d002      	beq.n	8020c74 <mbedtls_base64_decode+0x138>
        if( x != 0 )
 8020c6e:	2e00      	cmp	r6, #0
 8020c70:	d08f      	beq.n	8020b92 <mbedtls_base64_decode+0x56>
 8020c72:	e7f2      	b.n	8020c5a <mbedtls_base64_decode+0x11e>
 8020c74:	463c      	mov	r4, r7
 8020c76:	e797      	b.n	8020ba8 <mbedtls_base64_decode+0x6c>
            n = 0;
 8020c78:	462c      	mov	r4, r5
 8020c7a:	e7bb      	b.n	8020bf4 <mbedtls_base64_decode+0xb8>
        *olen = 0;
 8020c7c:	2000      	movs	r0, #0
 8020c7e:	f8c9 0000 	str.w	r0, [r9]
}
 8020c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            n = 0;
 8020c86:	2400      	movs	r4, #0
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 8020c88:	3702      	adds	r7, #2
 8020c8a:	e7b3      	b.n	8020bf4 <mbedtls_base64_decode+0xb8>
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 8020c8c:	f06f 0029 	mvn.w	r0, #41	; 0x29
        *olen = n;
 8020c90:	f8c9 2000 	str.w	r2, [r9]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 8020c94:	e7e3      	b.n	8020c5e <mbedtls_base64_decode+0x122>
            n = 0;
 8020c96:	2400      	movs	r4, #0
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 8020c98:	3701      	adds	r7, #1
 8020c9a:	e7ab      	b.n	8020bf4 <mbedtls_base64_decode+0xb8>
 8020c9c:	08034368 	.word	0x08034368
 8020ca0:	00400009 	.word	0x00400009

08020ca4 <mpi_mul_hlp>:
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 8020ca4:	280f      	cmp	r0, #15
{
 8020ca6:	b4f0      	push	{r4, r5, r6, r7}
 8020ca8:	4606      	mov	r6, r0
 8020caa:	460d      	mov	r5, r1
    for( ; i >= 16; i -= 16 )
 8020cac:	f240 80fa 	bls.w	8020ea4 <mpi_mul_hlp+0x200>
 8020cb0:	4607      	mov	r7, r0
    mbedtls_mpi_uint c = 0, t = 0;
 8020cb2:	2400      	movs	r4, #0
    {
        MULADDC_INIT
 8020cb4:	f855 0b04 	ldr.w	r0, [r5], #4
 8020cb8:	6811      	ldr	r1, [r2, #0]
 8020cba:	fbe3 1460 	umaal	r1, r4, r3, r0
 8020cbe:	f842 1b04 	str.w	r1, [r2], #4
 8020cc2:	f855 0b04 	ldr.w	r0, [r5], #4
 8020cc6:	6811      	ldr	r1, [r2, #0]
 8020cc8:	fbe3 1460 	umaal	r1, r4, r3, r0
 8020ccc:	f842 1b04 	str.w	r1, [r2], #4
 8020cd0:	f855 0b04 	ldr.w	r0, [r5], #4
 8020cd4:	6811      	ldr	r1, [r2, #0]
 8020cd6:	fbe3 1460 	umaal	r1, r4, r3, r0
 8020cda:	f842 1b04 	str.w	r1, [r2], #4
 8020cde:	f855 0b04 	ldr.w	r0, [r5], #4
 8020ce2:	6811      	ldr	r1, [r2, #0]
 8020ce4:	fbe3 1460 	umaal	r1, r4, r3, r0
 8020ce8:	f842 1b04 	str.w	r1, [r2], #4
 8020cec:	f855 0b04 	ldr.w	r0, [r5], #4
 8020cf0:	6811      	ldr	r1, [r2, #0]
 8020cf2:	fbe3 1460 	umaal	r1, r4, r3, r0
 8020cf6:	f842 1b04 	str.w	r1, [r2], #4
 8020cfa:	f855 0b04 	ldr.w	r0, [r5], #4
 8020cfe:	6811      	ldr	r1, [r2, #0]
 8020d00:	fbe3 1460 	umaal	r1, r4, r3, r0
 8020d04:	f842 1b04 	str.w	r1, [r2], #4
 8020d08:	f855 0b04 	ldr.w	r0, [r5], #4
 8020d0c:	6811      	ldr	r1, [r2, #0]
 8020d0e:	fbe3 1460 	umaal	r1, r4, r3, r0
 8020d12:	f842 1b04 	str.w	r1, [r2], #4
 8020d16:	f855 0b04 	ldr.w	r0, [r5], #4
 8020d1a:	6811      	ldr	r1, [r2, #0]
 8020d1c:	fbe3 1460 	umaal	r1, r4, r3, r0
 8020d20:	f842 1b04 	str.w	r1, [r2], #4
 8020d24:	f855 0b04 	ldr.w	r0, [r5], #4
 8020d28:	6811      	ldr	r1, [r2, #0]
 8020d2a:	fbe3 1460 	umaal	r1, r4, r3, r0
 8020d2e:	f842 1b04 	str.w	r1, [r2], #4
 8020d32:	f855 0b04 	ldr.w	r0, [r5], #4
 8020d36:	6811      	ldr	r1, [r2, #0]
 8020d38:	fbe3 1460 	umaal	r1, r4, r3, r0
 8020d3c:	f842 1b04 	str.w	r1, [r2], #4
 8020d40:	f855 0b04 	ldr.w	r0, [r5], #4
 8020d44:	6811      	ldr	r1, [r2, #0]
 8020d46:	fbe3 1460 	umaal	r1, r4, r3, r0
 8020d4a:	f842 1b04 	str.w	r1, [r2], #4
 8020d4e:	f855 0b04 	ldr.w	r0, [r5], #4
 8020d52:	6811      	ldr	r1, [r2, #0]
 8020d54:	fbe3 1460 	umaal	r1, r4, r3, r0
 8020d58:	f842 1b04 	str.w	r1, [r2], #4
 8020d5c:	f855 0b04 	ldr.w	r0, [r5], #4
 8020d60:	6811      	ldr	r1, [r2, #0]
 8020d62:	fbe3 1460 	umaal	r1, r4, r3, r0
 8020d66:	f842 1b04 	str.w	r1, [r2], #4
 8020d6a:	f855 0b04 	ldr.w	r0, [r5], #4
 8020d6e:	6811      	ldr	r1, [r2, #0]
 8020d70:	fbe3 1460 	umaal	r1, r4, r3, r0
 8020d74:	f842 1b04 	str.w	r1, [r2], #4
 8020d78:	f855 0b04 	ldr.w	r0, [r5], #4
 8020d7c:	6811      	ldr	r1, [r2, #0]
 8020d7e:	fbe3 1460 	umaal	r1, r4, r3, r0
 8020d82:	f842 1b04 	str.w	r1, [r2], #4
 8020d86:	f855 0b04 	ldr.w	r0, [r5], #4
 8020d8a:	6811      	ldr	r1, [r2, #0]
 8020d8c:	fbe3 1460 	umaal	r1, r4, r3, r0
 8020d90:	f842 1b04 	str.w	r1, [r2], #4
    for( ; i >= 16; i -= 16 )
 8020d94:	3f10      	subs	r7, #16
 8020d96:	2f0f      	cmp	r7, #15
 8020d98:	d88c      	bhi.n	8020cb4 <mpi_mul_hlp+0x10>
 8020d9a:	f006 060f 	and.w	r6, r6, #15
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
 8020d9e:	2e07      	cmp	r6, #7
 8020da0:	d938      	bls.n	8020e14 <mpi_mul_hlp+0x170>
    {
        MULADDC_INIT
 8020da2:	f855 0b04 	ldr.w	r0, [r5], #4
 8020da6:	6811      	ldr	r1, [r2, #0]
 8020da8:	fbe3 1460 	umaal	r1, r4, r3, r0
 8020dac:	f842 1b04 	str.w	r1, [r2], #4
 8020db0:	f855 0b04 	ldr.w	r0, [r5], #4
 8020db4:	6811      	ldr	r1, [r2, #0]
 8020db6:	fbe3 1460 	umaal	r1, r4, r3, r0
 8020dba:	f842 1b04 	str.w	r1, [r2], #4
 8020dbe:	f855 0b04 	ldr.w	r0, [r5], #4
 8020dc2:	6811      	ldr	r1, [r2, #0]
 8020dc4:	fbe3 1460 	umaal	r1, r4, r3, r0
 8020dc8:	f842 1b04 	str.w	r1, [r2], #4
 8020dcc:	f855 0b04 	ldr.w	r0, [r5], #4
 8020dd0:	6811      	ldr	r1, [r2, #0]
 8020dd2:	fbe3 1460 	umaal	r1, r4, r3, r0
 8020dd6:	f842 1b04 	str.w	r1, [r2], #4
 8020dda:	f855 0b04 	ldr.w	r0, [r5], #4
 8020dde:	6811      	ldr	r1, [r2, #0]
 8020de0:	fbe3 1460 	umaal	r1, r4, r3, r0
 8020de4:	f842 1b04 	str.w	r1, [r2], #4
 8020de8:	f855 0b04 	ldr.w	r0, [r5], #4
 8020dec:	6811      	ldr	r1, [r2, #0]
 8020dee:	fbe3 1460 	umaal	r1, r4, r3, r0
 8020df2:	f842 1b04 	str.w	r1, [r2], #4
 8020df6:	f855 0b04 	ldr.w	r0, [r5], #4
 8020dfa:	6811      	ldr	r1, [r2, #0]
 8020dfc:	fbe3 1460 	umaal	r1, r4, r3, r0
 8020e00:	f842 1b04 	str.w	r1, [r2], #4
 8020e04:	f855 0b04 	ldr.w	r0, [r5], #4
 8020e08:	6811      	ldr	r1, [r2, #0]
 8020e0a:	fbe3 1460 	umaal	r1, r4, r3, r0
 8020e0e:	f842 1b04 	str.w	r1, [r2], #4
    for( ; i >= 8; i -= 8 )
 8020e12:	3e08      	subs	r6, #8
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 8020e14:	2e00      	cmp	r6, #0
 8020e16:	d03c      	beq.n	8020e92 <mpi_mul_hlp+0x1ee>
    {
        MULADDC_INIT
 8020e18:	f855 0b04 	ldr.w	r0, [r5], #4
 8020e1c:	6811      	ldr	r1, [r2, #0]
 8020e1e:	fbe3 1460 	umaal	r1, r4, r3, r0
 8020e22:	f842 1b04 	str.w	r1, [r2], #4
    for( ; i > 0; i-- )
 8020e26:	2e01      	cmp	r6, #1
 8020e28:	d033      	beq.n	8020e92 <mpi_mul_hlp+0x1ee>
        MULADDC_INIT
 8020e2a:	f855 0b04 	ldr.w	r0, [r5], #4
 8020e2e:	6811      	ldr	r1, [r2, #0]
 8020e30:	fbe3 1460 	umaal	r1, r4, r3, r0
 8020e34:	f842 1b04 	str.w	r1, [r2], #4
    for( ; i > 0; i-- )
 8020e38:	2e02      	cmp	r6, #2
 8020e3a:	d02a      	beq.n	8020e92 <mpi_mul_hlp+0x1ee>
        MULADDC_INIT
 8020e3c:	f855 0b04 	ldr.w	r0, [r5], #4
 8020e40:	6811      	ldr	r1, [r2, #0]
 8020e42:	fbe3 1460 	umaal	r1, r4, r3, r0
 8020e46:	f842 1b04 	str.w	r1, [r2], #4
    for( ; i > 0; i-- )
 8020e4a:	2e03      	cmp	r6, #3
 8020e4c:	d021      	beq.n	8020e92 <mpi_mul_hlp+0x1ee>
        MULADDC_INIT
 8020e4e:	f855 0b04 	ldr.w	r0, [r5], #4
 8020e52:	6811      	ldr	r1, [r2, #0]
 8020e54:	fbe3 1460 	umaal	r1, r4, r3, r0
 8020e58:	f842 1b04 	str.w	r1, [r2], #4
    for( ; i > 0; i-- )
 8020e5c:	2e04      	cmp	r6, #4
 8020e5e:	d018      	beq.n	8020e92 <mpi_mul_hlp+0x1ee>
        MULADDC_INIT
 8020e60:	f855 0b04 	ldr.w	r0, [r5], #4
 8020e64:	6811      	ldr	r1, [r2, #0]
 8020e66:	fbe3 1460 	umaal	r1, r4, r3, r0
 8020e6a:	f842 1b04 	str.w	r1, [r2], #4
    for( ; i > 0; i-- )
 8020e6e:	3e05      	subs	r6, #5
 8020e70:	d00f      	beq.n	8020e92 <mpi_mul_hlp+0x1ee>
        MULADDC_INIT
 8020e72:	f855 0b04 	ldr.w	r0, [r5], #4
 8020e76:	6811      	ldr	r1, [r2, #0]
 8020e78:	fbe3 1460 	umaal	r1, r4, r3, r0
 8020e7c:	f842 1b04 	str.w	r1, [r2], #4
    for( ; i > 0; i-- )
 8020e80:	2e01      	cmp	r6, #1
 8020e82:	d006      	beq.n	8020e92 <mpi_mul_hlp+0x1ee>
        MULADDC_INIT
 8020e84:	f855 0b04 	ldr.w	r0, [r5], #4
 8020e88:	6811      	ldr	r1, [r2, #0]
 8020e8a:	fbe3 1460 	umaal	r1, r4, r3, r0
 8020e8e:	f842 1b04 	str.w	r1, [r2], #4
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
 8020e92:	6813      	ldr	r3, [r2, #0]
 8020e94:	191c      	adds	r4, r3, r4
 8020e96:	f842 4b04 	str.w	r4, [r2], #4
 8020e9a:	f04f 0401 	mov.w	r4, #1
    }
    while( c != 0 );
 8020e9e:	d2f8      	bcs.n	8020e92 <mpi_mul_hlp+0x1ee>
}
 8020ea0:	bcf0      	pop	{r4, r5, r6, r7}
 8020ea2:	4770      	bx	lr
    mbedtls_mpi_uint c = 0, t = 0;
 8020ea4:	2400      	movs	r4, #0
 8020ea6:	e77a      	b.n	8020d9e <mpi_mul_hlp+0xfa>

08020ea8 <mpi_montmul.isra.0>:
 *                      Its initial content is unused and
 *                      its final content is indeterminate.
 *                      Note that unlike the usual convention in the library
 *                      for `const mbedtls_mpi*`, the content of T can change.
 */
static void mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
 8020ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020eac:	461d      	mov	r5, r3
 8020eae:	460c      	mov	r4, r1
 8020eb0:	b083      	sub	sp, #12
 8020eb2:	4681      	mov	r9, r0
 8020eb4:	4693      	mov	fp, r2
 8020eb6:	e9dd 260e 	ldrd	r2, r6, [sp, #56]	; 0x38
                         const mbedtls_mpi *T )
{
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    memset( T->p, 0, T->n * ciL );
 8020eba:	2100      	movs	r1, #0
 8020ebc:	0092      	lsls	r2, r2, #2
 8020ebe:	6830      	ldr	r0, [r6, #0]
 8020ec0:	f00e ffd1 	bl	802fe66 <memset>

    d = T->p;
    n = N->n;
 8020ec4:	682f      	ldr	r7, [r5, #0]
    m = ( B->n < n ) ? B->n : n;
 8020ec6:	6823      	ldr	r3, [r4, #0]
    d = T->p;
 8020ec8:	6832      	ldr	r2, [r6, #0]
    m = ( B->n < n ) ? B->n : n;
 8020eca:	42bb      	cmp	r3, r7
 8020ecc:	bf28      	it	cs
 8020ece:	463b      	movcs	r3, r7
    d = T->p;
 8020ed0:	9200      	str	r2, [sp, #0]

    for( i = 0; i < n; i++ )
 8020ed2:	2f00      	cmp	r7, #0
 8020ed4:	d076      	beq.n	8020fc4 <mpi_montmul.isra.0+0x11c>
 8020ed6:	2500      	movs	r5, #0
    d = T->p;
 8020ed8:	4692      	mov	sl, r2
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
 8020eda:	f107 0801 	add.w	r8, r7, #1
 8020ede:	ee07 3a90 	vmov	s15, r3
 8020ee2:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8020ee6:	9301      	str	r3, [sp, #4]
 8020ee8:	eb02 0888 	add.w	r8, r2, r8, lsl #2
        u0 = A->p[i];
 8020eec:	f8d9 3000 	ldr.w	r3, [r9]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 8020ef0:	f8db 1000 	ldr.w	r1, [fp]
        u0 = A->p[i];
 8020ef4:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 8020ef8:	680c      	ldr	r4, [r1, #0]
 8020efa:	f8da 3000 	ldr.w	r3, [sl]
 8020efe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020f00:	fb04 3406 	mla	r4, r4, r6, r3
 8020f04:	fb02 f404 	mul.w	r4, r2, r4
        mpi_mul_hlp( m, B->p, d, u0 );
 8020f08:	ee17 0a90 	vmov	r0, s15
 8020f0c:	4652      	mov	r2, sl
 8020f0e:	4633      	mov	r3, r6
 8020f10:	f7ff fec8 	bl	8020ca4 <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
 8020f14:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020f16:	4623      	mov	r3, r4
 8020f18:	4652      	mov	r2, sl
 8020f1a:	4638      	mov	r0, r7
 8020f1c:	6809      	ldr	r1, [r1, #0]
 8020f1e:	f7ff fec1 	bl	8020ca4 <mpi_mul_hlp>
        *d++ = u0; d[n + 1] = 0;
 8020f22:	2300      	movs	r3, #0
    for( i = 0; i < n; i++ )
 8020f24:	3501      	adds	r5, #1
 8020f26:	42af      	cmp	r7, r5
        *d++ = u0; d[n + 1] = 0;
 8020f28:	f84a 6b04 	str.w	r6, [sl], #4
 8020f2c:	f848 3f04 	str.w	r3, [r8, #4]!
    for( i = 0; i < n; i++ )
 8020f30:	d1dc      	bne.n	8020eec <mpi_montmul.isra.0+0x44>
    memcpy( A->p, d, n * ciL );
    /* If d >= N then we want to set A to d - N. To prevent timing attacks,
     * do the calculation without using conditional tests. */
    /* Set d to d0 + (2^biL)^n - N where d0 is the current value of d. */
    d[n] += 1;
    d[n] -= mpi_sub_hlp( n, d, N->p );
 8020f32:	2500      	movs	r5, #0
 8020f34:	9b01      	ldr	r3, [sp, #4]
 8020f36:	9a00      	ldr	r2, [sp, #0]
 8020f38:	1f1c      	subs	r4, r3, #4
 8020f3a:	1916      	adds	r6, r2, r4
    memcpy( A->p, d, n * ciL );
 8020f3c:	4631      	mov	r1, r6
 8020f3e:	4622      	mov	r2, r4
 8020f40:	f8d9 0000 	ldr.w	r0, [r9]
 8020f44:	f00e ff68 	bl	802fe18 <memcpy>
    d[n] += 1;
 8020f48:	9a00      	ldr	r2, [sp, #0]
    d[n] -= mpi_sub_hlp( n, d, N->p );
 8020f4a:	980c      	ldr	r0, [sp, #48]	; 0x30
    d[n] += 1;
 8020f4c:	f852 3014 	ldr.w	r3, [r2, r4, lsl #1]
 8020f50:	1f31      	subs	r1, r6, #4
 8020f52:	3301      	adds	r3, #1
    d[n] -= mpi_sub_hlp( n, d, N->p );
 8020f54:	f8d0 e000 	ldr.w	lr, [r0]
 8020f58:	46b8      	mov	r8, r7
    d[n] += 1;
 8020f5a:	f842 3014 	str.w	r3, [r2, r4, lsl #1]
    d[n] -= mpi_sub_hlp( n, d, N->p );
 8020f5e:	4608      	mov	r0, r1
 8020f60:	462a      	mov	r2, r5
        z = ( *d <  c );     *d -=  c;
 8020f62:	f850 6f04 	ldr.w	r6, [r0, #4]!
    for( i = c = 0; i < n; i++, s++, d++ )
 8020f66:	3501      	adds	r5, #1
        z = ( *d <  c );     *d -=  c;
 8020f68:	1ab3      	subs	r3, r6, r2
 8020f6a:	6003      	str	r3, [r0, #0]
        c = ( *d < *s ) + z; *d -= *s;
 8020f6c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8020f70:	42bb      	cmp	r3, r7
 8020f72:	bf2c      	ite	cs
 8020f74:	f04f 0c00 	movcs.w	ip, #0
 8020f78:	f04f 0c01 	movcc.w	ip, #1
 8020f7c:	1bdb      	subs	r3, r3, r7
 8020f7e:	4296      	cmp	r6, r2
 8020f80:	bf2c      	ite	cs
 8020f82:	4662      	movcs	r2, ip
 8020f84:	f10c 0201 	addcc.w	r2, ip, #1
    for( i = c = 0; i < n; i++, s++, d++ )
 8020f88:	45a8      	cmp	r8, r5
        c = ( *d < *s ) + z; *d -= *s;
 8020f8a:	6003      	str	r3, [r0, #0]
    for( i = c = 0; i < n; i++, s++, d++ )
 8020f8c:	d1e9      	bne.n	8020f62 <mpi_montmul.isra.0+0xba>
    d[n] -= mpi_sub_hlp( n, d, N->p );
 8020f8e:	9e00      	ldr	r6, [sp, #0]
     * so d[n] == 0 and we want to keep A as it is.
     * If d0 >= N then d >= (2^biL)^n, and d <= (2^biL)^n + N < 2 * (2^biL)^n
     * so d[n] == 1 and we want to set A to the result of the subtraction
     * which is d - (2^biL)^n, i.e. the n least significant limbs of d.
     * This exactly corresponds to a conditional assignment. */
    mpi_safe_cond_assign( n, A->p, d, (unsigned char) d[n] );
 8020f90:	f8d9 3000 	ldr.w	r3, [r9]
    d[n] -= mpi_sub_hlp( n, d, N->p );
 8020f94:	f856 0014 	ldr.w	r0, [r6, r4, lsl #1]
 8020f98:	3b04      	subs	r3, #4
 8020f9a:	1a82      	subs	r2, r0, r2
 8020f9c:	b2d5      	uxtb	r5, r2
 8020f9e:	f846 2014 	str.w	r2, [r6, r4, lsl #1]
    for( i = 0; i < n; i++ )
 8020fa2:	191a      	adds	r2, r3, r4
 8020fa4:	f1c5 0601 	rsb	r6, r5, #1
        dest[i] = dest[i] * ( 1 - assign ) + src[i] * assign;
 8020fa8:	f851 4f04 	ldr.w	r4, [r1, #4]!
 8020fac:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8020fb0:	fb04 f405 	mul.w	r4, r4, r5
 8020fb4:	fb00 4006 	mla	r0, r0, r6, r4
    for( i = 0; i < n; i++ )
 8020fb8:	4293      	cmp	r3, r2
        dest[i] = dest[i] * ( 1 - assign ) + src[i] * assign;
 8020fba:	6018      	str	r0, [r3, #0]
    for( i = 0; i < n; i++ )
 8020fbc:	d1f4      	bne.n	8020fa8 <mpi_montmul.isra.0+0x100>
}
 8020fbe:	b003      	add	sp, #12
 8020fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d[n] += 1;
 8020fc4:	6813      	ldr	r3, [r2, #0]
 8020fc6:	3301      	adds	r3, #1
 8020fc8:	6013      	str	r3, [r2, #0]
}
 8020fca:	b003      	add	sp, #12
 8020fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020fd0 <mbedtls_mpi_cmp_mpi.constprop.1>:
    for( i = X->n; i > 0; i-- )
 8020fd0:	6843      	ldr	r3, [r0, #4]
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
 8020fd2:	b430      	push	{r4, r5}
    for( i = X->n; i > 0; i-- )
 8020fd4:	b17b      	cbz	r3, 8020ff6 <mbedtls_mpi_cmp_mpi.constprop.1+0x26>
        if( X->p[i - 1] != 0 )
 8020fd6:	6885      	ldr	r5, [r0, #8]
 8020fd8:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8020fdc:	e001      	b.n	8020fe2 <mbedtls_mpi_cmp_mpi.constprop.1+0x12>
    for( i = X->n; i > 0; i-- )
 8020fde:	3b01      	subs	r3, #1
 8020fe0:	d009      	beq.n	8020ff6 <mbedtls_mpi_cmp_mpi.constprop.1+0x26>
        if( X->p[i - 1] != 0 )
 8020fe2:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 8020fe6:	2c00      	cmp	r4, #0
 8020fe8:	d0f9      	beq.n	8020fde <mbedtls_mpi_cmp_mpi.constprop.1+0xe>
        if( Y->p[j - 1] != 0 )
 8020fea:	688a      	ldr	r2, [r1, #8]
 8020fec:	6812      	ldr	r2, [r2, #0]
 8020fee:	b952      	cbnz	r2, 8021006 <mbedtls_mpi_cmp_mpi.constprop.1+0x36>
}
 8020ff0:	bc30      	pop	{r4, r5}
    if( i > j ) return(  X->s );
 8020ff2:	6800      	ldr	r0, [r0, #0]
}
 8020ff4:	4770      	bx	lr
        if( Y->p[j - 1] != 0 )
 8020ff6:	688b      	ldr	r3, [r1, #8]
 8020ff8:	6818      	ldr	r0, [r3, #0]
 8020ffa:	3800      	subs	r0, #0
 8020ffc:	bf18      	it	ne
 8020ffe:	2001      	movne	r0, #1
 8021000:	4240      	negs	r0, r0
}
 8021002:	bc30      	pop	{r4, r5}
 8021004:	4770      	bx	lr
    if( i > j ) return(  X->s );
 8021006:	2b01      	cmp	r3, #1
 8021008:	d8f2      	bhi.n	8020ff0 <mbedtls_mpi_cmp_mpi.constprop.1+0x20>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
 802100a:	6800      	ldr	r0, [r0, #0]
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 802100c:	2800      	cmp	r0, #0
 802100e:	db07      	blt.n	8021020 <mbedtls_mpi_cmp_mpi.constprop.1+0x50>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 8021010:	682b      	ldr	r3, [r5, #0]
 8021012:	4293      	cmp	r3, r2
 8021014:	d8f5      	bhi.n	8021002 <mbedtls_mpi_cmp_mpi.constprop.1+0x32>
    return( 0 );
 8021016:	bf28      	it	cs
 8021018:	2000      	movcs	r0, #0
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 802101a:	d3f1      	bcc.n	8021000 <mbedtls_mpi_cmp_mpi.constprop.1+0x30>
}
 802101c:	bc30      	pop	{r4, r5}
 802101e:	4770      	bx	lr
    if( j > i ) return( -Y->s );
 8021020:	f04f 30ff 	mov.w	r0, #4294967295
 8021024:	e7ed      	b.n	8021002 <mbedtls_mpi_cmp_mpi.constprop.1+0x32>
 8021026:	bf00      	nop

08021028 <mpi_check_small_factors.part.0>:
    mbedtls_mpi_uint r;

    if( ( X->p[0] & 1 ) == 0 )
        return( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );

    for( i = 0; small_prime[i] > 0; i++ )
 8021028:	2303      	movs	r3, #3
static int mpi_check_small_factors( const mbedtls_mpi *X )
 802102a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802102c:	6846      	ldr	r6, [r0, #4]
 802102e:	4f22      	ldr	r7, [pc, #136]	; (80210b8 <mpi_check_small_factors.part.0+0x90>)
 8021030:	ea4f 0c86 	mov.w	ip, r6, lsl #2
    for( i = X->n; i > 0; i-- )
 8021034:	b3b6      	cbz	r6, 80210a4 <mpi_check_small_factors.part.0+0x7c>
        if( X->p[i - 1] != 0 )
 8021036:	f8d0 e008 	ldr.w	lr, [r0, #8]
 802103a:	4632      	mov	r2, r6
 802103c:	eb0e 050c 	add.w	r5, lr, ip
 8021040:	4629      	mov	r1, r5
 8021042:	e001      	b.n	8021048 <mpi_check_small_factors.part.0+0x20>
    for( i = X->n; i > 0; i-- )
 8021044:	3a01      	subs	r2, #1
 8021046:	d02d      	beq.n	80210a4 <mpi_check_small_factors.part.0+0x7c>
        if( X->p[i - 1] != 0 )
 8021048:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802104c:	2c00      	cmp	r4, #0
 802104e:	d0f9      	beq.n	8021044 <mpi_check_small_factors.part.0+0x1c>
    if( i > j ) return(  X->s );
 8021050:	2a01      	cmp	r2, #1
 8021052:	d920      	bls.n	8021096 <mpi_check_small_factors.part.0+0x6e>
 8021054:	6801      	ldr	r1, [r0, #0]
    {
        if( mbedtls_mpi_cmp_int( X, small_prime[i] ) <= 0 )
 8021056:	2900      	cmp	r1, #0
 8021058:	dd24      	ble.n	80210a4 <mpi_check_small_factors.part.0+0x7c>
    if( b == 1 )
 802105a:	2b01      	cmp	r3, #1
 802105c:	d024      	beq.n	80210a8 <mpi_check_small_factors.part.0+0x80>
    if( b == 2 )
 802105e:	2b02      	cmp	r3, #2
 8021060:	d025      	beq.n	80210ae <mpi_check_small_factors.part.0+0x86>
    for( i = A->n, y = 0; i > 0; i-- )
 8021062:	2200      	movs	r2, #0
        x  = A->p[i - 1];
 8021064:	f855 1d04 	ldr.w	r1, [r5, #-4]!
        y  = ( y << biH ) | ( x >> biH );
 8021068:	0c0c      	lsrs	r4, r1, #16
 802106a:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
        y  = ( y << biH ) | ( x >> biH );
 802106e:	fbb2 f4f3 	udiv	r4, r2, r3
 8021072:	fb03 2214 	mls	r2, r3, r4, r2
 8021076:	b289      	uxth	r1, r1
 8021078:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 802107c:	fbb2 f1f3 	udiv	r1, r2, r3
    for( i = A->n, y = 0; i > 0; i-- )
 8021080:	45ae      	cmp	lr, r5
 8021082:	fb03 2211 	mls	r2, r3, r1, r2
 8021086:	d1ed      	bne.n	8021064 <mpi_check_small_factors.part.0+0x3c>
            return( 1 );

        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_int( &r, X, small_prime[i] ) );

        if( r == 0 )
 8021088:	b172      	cbz	r2, 80210a8 <mpi_check_small_factors.part.0+0x80>
    for( i = 0; small_prime[i] > 0; i++ )
 802108a:	f857 3f04 	ldr.w	r3, [r7, #4]!
 802108e:	2b00      	cmp	r3, #0
 8021090:	dcd0      	bgt.n	8021034 <mpi_check_small_factors.part.0+0xc>
            return( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );
    }

cleanup:
 8021092:	2000      	movs	r0, #0
    return( ret );
}
 8021094:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( X->s > 0 && Y->s < 0 ) return(  1 );
 8021096:	6801      	ldr	r1, [r0, #0]
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 8021098:	2900      	cmp	r1, #0
 802109a:	db03      	blt.n	80210a4 <mpi_check_small_factors.part.0+0x7c>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 802109c:	f8de 2000 	ldr.w	r2, [lr]
 80210a0:	4293      	cmp	r3, r2
 80210a2:	d3d8      	bcc.n	8021056 <mpi_check_small_factors.part.0+0x2e>
            return( 1 );
 80210a4:	2001      	movs	r0, #1
}
 80210a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );
 80210a8:	f06f 000d 	mvn.w	r0, #13
}
 80210ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *r = A->p[0] & 1;
 80210ae:	f8de 2000 	ldr.w	r2, [lr]
 80210b2:	f002 0201 	and.w	r2, r2, #1
        return( 0 );
 80210b6:	e7e7      	b.n	8021088 <mpi_check_small_factors.part.0+0x60>
 80210b8:	080343e8 	.word	0x080343e8

080210bc <mbedtls_mpi_shift_r.constprop.0>:
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
 80210bc:	b570      	push	{r4, r5, r6, lr}
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 80210be:	6844      	ldr	r4, [r0, #4]
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
 80210c0:	4605      	mov	r5, r0
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 80210c2:	b174      	cbz	r4, 80210e2 <mbedtls_mpi_shift_r.constprop.0+0x26>
    mbedtls_mpi_uint r0 = 0, r1;
 80210c4:	2300      	movs	r3, #0
            r1 = X->p[i - 1] << (biL - v1);
 80210c6:	6880      	ldr	r0, [r0, #8]
 80210c8:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 80210cc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
            X->p[i - 1] |= r0;
 80210d0:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
        for( i = X->n; i > 0; i-- )
 80210d4:	4290      	cmp	r0, r2
            X->p[i - 1] |= r0;
 80210d6:	6013      	str	r3, [r2, #0]
            r1 = X->p[i - 1] << (biL - v1);
 80210d8:	ea4f 73c1 	mov.w	r3, r1, lsl #31
        for( i = X->n; i > 0; i-- )
 80210dc:	d1f6      	bne.n	80210cc <mbedtls_mpi_shift_r.constprop.0+0x10>
    return( 0 );
 80210de:	2000      	movs	r0, #0
}
 80210e0:	bd70      	pop	{r4, r5, r6, pc}
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 80210e2:	2104      	movs	r1, #4
 80210e4:	2001      	movs	r0, #1
 80210e6:	f00e fe47 	bl	802fd78 <calloc>
 80210ea:	4606      	mov	r6, r0
 80210ec:	b170      	cbz	r0, 802110c <mbedtls_mpi_shift_r.constprop.0+0x50>
        if( X->p != NULL )
 80210ee:	68a8      	ldr	r0, [r5, #8]
 80210f0:	b128      	cbz	r0, 80210fe <mbedtls_mpi_shift_r.constprop.0+0x42>
    mbedtls_platform_zeroize( v, ciL * n );
 80210f2:	4621      	mov	r1, r4
 80210f4:	f006 fd1a 	bl	8027b2c <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
 80210f8:	68a8      	ldr	r0, [r5, #8]
 80210fa:	f00e fe77 	bl	802fdec <free>
        X->n = nblimbs;
 80210fe:	2201      	movs	r2, #1
    X->p[0] = ( z < 0 ) ? -z : z;
 8021100:	2000      	movs	r0, #0
        X->n = nblimbs;
 8021102:	e9c5 2601 	strd	r2, r6, [r5, #4]
    X->s    = ( z < 0 ) ? -1 : 1;
 8021106:	602a      	str	r2, [r5, #0]
    X->p[0] = ( z < 0 ) ? -z : z;
 8021108:	6030      	str	r0, [r6, #0]
}
 802110a:	bd70      	pop	{r4, r5, r6, pc}
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 802110c:	f06f 000f 	mvn.w	r0, #15
}
 8021110:	bd70      	pop	{r4, r5, r6, pc}
 8021112:	bf00      	nop

08021114 <mbedtls_mpi_init>:
    X->n = 0;
 8021114:	2300      	movs	r3, #0
 8021116:	2201      	movs	r2, #1
    X->p = NULL;
 8021118:	6083      	str	r3, [r0, #8]
    X->n = 0;
 802111a:	e9c0 2300 	strd	r2, r3, [r0]
}
 802111e:	4770      	bx	lr

08021120 <mbedtls_mpi_free>:
    if( X == NULL )
 8021120:	b180      	cbz	r0, 8021144 <mbedtls_mpi_free+0x24>
{
 8021122:	b510      	push	{r4, lr}
 8021124:	4604      	mov	r4, r0
    if( X->p != NULL )
 8021126:	6880      	ldr	r0, [r0, #8]
 8021128:	b130      	cbz	r0, 8021138 <mbedtls_mpi_free+0x18>
    mbedtls_platform_zeroize( v, ciL * n );
 802112a:	6861      	ldr	r1, [r4, #4]
 802112c:	0089      	lsls	r1, r1, #2
 802112e:	f006 fcfd 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 8021132:	68a0      	ldr	r0, [r4, #8]
 8021134:	f00e fe5a 	bl	802fdec <free>
    X->n = 0;
 8021138:	2300      	movs	r3, #0
 802113a:	2201      	movs	r2, #1
    X->p = NULL;
 802113c:	60a3      	str	r3, [r4, #8]
    X->n = 0;
 802113e:	e9c4 2300 	strd	r2, r3, [r4]
}
 8021142:	bd10      	pop	{r4, pc}
 8021144:	4770      	bx	lr
 8021146:	bf00      	nop

08021148 <mbedtls_mpi_copy>:
    if( X == Y )
 8021148:	4288      	cmp	r0, r1
 802114a:	d05d      	beq.n	8021208 <mbedtls_mpi_copy+0xc0>
{
 802114c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021150:	460e      	mov	r6, r1
    if( Y->n == 0 )
 8021152:	6849      	ldr	r1, [r1, #4]
 8021154:	4605      	mov	r5, r0
 8021156:	2900      	cmp	r1, #0
 8021158:	d058      	beq.n	802120c <mbedtls_mpi_copy+0xc4>
    for( i = Y->n - 1; i > 0; i-- )
 802115a:	1e4b      	subs	r3, r1, #1
 802115c:	d017      	beq.n	802118e <mbedtls_mpi_copy+0x46>
 802115e:	68b2      	ldr	r2, [r6, #8]
 8021160:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8021164:	e001      	b.n	802116a <mbedtls_mpi_copy+0x22>
 8021166:	3b01      	subs	r3, #1
 8021168:	d011      	beq.n	802118e <mbedtls_mpi_copy+0x46>
        if( Y->p[i] != 0 )
 802116a:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 802116e:	2c00      	cmp	r4, #0
 8021170:	d0f9      	beq.n	8021166 <mbedtls_mpi_copy+0x1e>
    if( X->n < i )
 8021172:	f8d5 9004 	ldr.w	r9, [r5, #4]
    X->s = Y->s;
 8021176:	6832      	ldr	r2, [r6, #0]
    i++;
 8021178:	1c5c      	adds	r4, r3, #1
    if( X->n < i )
 802117a:	45a1      	cmp	r9, r4
    X->s = Y->s;
 802117c:	602a      	str	r2, [r5, #0]
    if( X->n < i )
 802117e:	d240      	bcs.n	8021202 <mbedtls_mpi_copy+0xba>
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 8021180:	f242 7310 	movw	r3, #10000	; 0x2710
 8021184:	429c      	cmp	r4, r3
 8021186:	d90a      	bls.n	802119e <mbedtls_mpi_copy+0x56>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8021188:	f06f 000f 	mvn.w	r0, #15
 802118c:	e037      	b.n	80211fe <mbedtls_mpi_copy+0xb6>
    X->s = Y->s;
 802118e:	6833      	ldr	r3, [r6, #0]
    if( X->n < i )
 8021190:	f8d5 9004 	ldr.w	r9, [r5, #4]
    X->s = Y->s;
 8021194:	602b      	str	r3, [r5, #0]
    if( X->n < i )
 8021196:	f1b9 0f00 	cmp.w	r9, #0
 802119a:	d11e      	bne.n	80211da <mbedtls_mpi_copy+0x92>
    i++;
 802119c:	2401      	movs	r4, #1
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 802119e:	2104      	movs	r1, #4
 80211a0:	4620      	mov	r0, r4
 80211a2:	f00e fde9 	bl	802fd78 <calloc>
 80211a6:	4607      	mov	r7, r0
 80211a8:	2800      	cmp	r0, #0
 80211aa:	d0ed      	beq.n	8021188 <mbedtls_mpi_copy+0x40>
        if( X->p != NULL )
 80211ac:	f8d5 8008 	ldr.w	r8, [r5, #8]
 80211b0:	f1b8 0f00 	cmp.w	r8, #0
 80211b4:	d00c      	beq.n	80211d0 <mbedtls_mpi_copy+0x88>
            memcpy( p, X->p, X->n * ciL );
 80211b6:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80211ba:	464a      	mov	r2, r9
 80211bc:	4641      	mov	r1, r8
 80211be:	f00e fe2b 	bl	802fe18 <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
 80211c2:	4640      	mov	r0, r8
 80211c4:	4649      	mov	r1, r9
 80211c6:	f006 fcb1 	bl	8027b2c <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
 80211ca:	68a8      	ldr	r0, [r5, #8]
 80211cc:	f00e fe0e 	bl	802fdec <free>
        X->p = p;
 80211d0:	e9c5 4701 	strd	r4, r7, [r5, #4]
 80211d4:	ea4f 0884 	mov.w	r8, r4, lsl #2
 80211d8:	e00b      	b.n	80211f2 <mbedtls_mpi_copy+0xaa>
    if( X->n < i )
 80211da:	f04f 0804 	mov.w	r8, #4
    i++;
 80211de:	2401      	movs	r4, #1
        memset( X->p + i, 0, ( X->n - i ) * ciL );
 80211e0:	68a8      	ldr	r0, [r5, #8]
 80211e2:	eba9 0204 	sub.w	r2, r9, r4
 80211e6:	2100      	movs	r1, #0
 80211e8:	0092      	lsls	r2, r2, #2
 80211ea:	4440      	add	r0, r8
 80211ec:	f00e fe3b 	bl	802fe66 <memset>
 80211f0:	68af      	ldr	r7, [r5, #8]
    memcpy( X->p, Y->p, i * ciL );
 80211f2:	4642      	mov	r2, r8
 80211f4:	4638      	mov	r0, r7
 80211f6:	68b1      	ldr	r1, [r6, #8]
 80211f8:	f00e fe0e 	bl	802fe18 <memcpy>
 80211fc:	2000      	movs	r0, #0
}
 80211fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021202:	ea4f 0884 	mov.w	r8, r4, lsl #2
 8021206:	e7eb      	b.n	80211e0 <mbedtls_mpi_copy+0x98>
        return( 0 );
 8021208:	2000      	movs	r0, #0
}
 802120a:	4770      	bx	lr
    if( X == NULL )
 802120c:	2800      	cmp	r0, #0
 802120e:	d0f5      	beq.n	80211fc <mbedtls_mpi_copy+0xb4>
    if( X->p != NULL )
 8021210:	6880      	ldr	r0, [r0, #8]
 8021212:	b130      	cbz	r0, 8021222 <mbedtls_mpi_copy+0xda>
    mbedtls_platform_zeroize( v, ciL * n );
 8021214:	6869      	ldr	r1, [r5, #4]
 8021216:	0089      	lsls	r1, r1, #2
 8021218:	f006 fc88 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 802121c:	68a8      	ldr	r0, [r5, #8]
 802121e:	f00e fde5 	bl	802fdec <free>
    X->n = 0;
 8021222:	2000      	movs	r0, #0
 8021224:	2301      	movs	r3, #1
    X->p = NULL;
 8021226:	60a8      	str	r0, [r5, #8]
    X->n = 0;
 8021228:	e9c5 3000 	strd	r3, r0, [r5]
}
 802122c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08021230 <mbedtls_mpi_lset>:
{
 8021230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( X->n < nblimbs )
 8021232:	6845      	ldr	r5, [r0, #4]
{
 8021234:	4604      	mov	r4, r0
 8021236:	460f      	mov	r7, r1
    if( X->n < nblimbs )
 8021238:	b19d      	cbz	r5, 8021262 <mbedtls_mpi_lset+0x32>
 802123a:	6886      	ldr	r6, [r0, #8]
 802123c:	00aa      	lsls	r2, r5, #2
    memset( X->p, 0, X->n * ciL );
 802123e:	4630      	mov	r0, r6
 8021240:	2100      	movs	r1, #0
 8021242:	f00e fe10 	bl	802fe66 <memset>
    X->s    = ( z < 0 ) ? -1 : 1;
 8021246:	2f00      	cmp	r7, #0
 8021248:	bfb4      	ite	lt
 802124a:	f04f 33ff 	movlt.w	r3, #4294967295
 802124e:	2301      	movge	r3, #1
    X->p[0] = ( z < 0 ) ? -z : z;
 8021250:	68a2      	ldr	r2, [r4, #8]
 8021252:	ea87 71e7 	eor.w	r1, r7, r7, asr #31
 8021256:	eba1 71e7 	sub.w	r1, r1, r7, asr #31
 802125a:	6011      	str	r1, [r2, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 802125c:	2000      	movs	r0, #0
 802125e:	6023      	str	r3, [r4, #0]
}
 8021260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 8021262:	2104      	movs	r1, #4
 8021264:	2001      	movs	r0, #1
 8021266:	f00e fd87 	bl	802fd78 <calloc>
 802126a:	4606      	mov	r6, r0
 802126c:	b160      	cbz	r0, 8021288 <mbedtls_mpi_lset+0x58>
        if( X->p != NULL )
 802126e:	68a0      	ldr	r0, [r4, #8]
 8021270:	b128      	cbz	r0, 802127e <mbedtls_mpi_lset+0x4e>
    mbedtls_platform_zeroize( v, ciL * n );
 8021272:	4629      	mov	r1, r5
 8021274:	f006 fc5a 	bl	8027b2c <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
 8021278:	68a0      	ldr	r0, [r4, #8]
 802127a:	f00e fdb7 	bl	802fdec <free>
        X->n = nblimbs;
 802127e:	2301      	movs	r3, #1
        X->p = p;
 8021280:	2204      	movs	r2, #4
        X->n = nblimbs;
 8021282:	e9c4 3601 	strd	r3, r6, [r4, #4]
        X->p = p;
 8021286:	e7da      	b.n	802123e <mbedtls_mpi_lset+0xe>
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8021288:	f06f 000f 	mvn.w	r0, #15
}
 802128c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802128e:	bf00      	nop

08021290 <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
 8021290:	6843      	ldr	r3, [r0, #4]
 8021292:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
 8021296:	d20a      	bcs.n	80212ae <mbedtls_mpi_get_bit+0x1e>
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
 8021298:	6883      	ldr	r3, [r0, #8]
 802129a:	094a      	lsrs	r2, r1, #5
 802129c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80212a0:	f001 011f 	and.w	r1, r1, #31
 80212a4:	fa20 f101 	lsr.w	r1, r0, r1
 80212a8:	f001 0001 	and.w	r0, r1, #1
 80212ac:	4770      	bx	lr
        return( 0 );
 80212ae:	2000      	movs	r0, #0
}
 80212b0:	4770      	bx	lr
 80212b2:	bf00      	nop

080212b4 <mbedtls_mpi_lsb>:
{
 80212b4:	b470      	push	{r4, r5, r6}
    for( i = 0; i < X->n; i++ )
 80212b6:	6845      	ldr	r5, [r0, #4]
 80212b8:	b1d5      	cbz	r5, 80212f0 <mbedtls_mpi_lsb+0x3c>
 80212ba:	4603      	mov	r3, r0
    size_t i, j, count = 0;
 80212bc:	2000      	movs	r0, #0
    for( i = 0; i < X->n; i++ )
 80212be:	4606      	mov	r6, r0
 80212c0:	689c      	ldr	r4, [r3, #8]
 80212c2:	3c04      	subs	r4, #4
        for( j = 0; j < biL; j++, count++ )
 80212c4:	2200      	movs	r2, #0
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 80212c6:	f854 1f04 	ldr.w	r1, [r4, #4]!
 80212ca:	e003      	b.n	80212d4 <mbedtls_mpi_lsb+0x20>
        for( j = 0; j < biL; j++, count++ )
 80212cc:	2a20      	cmp	r2, #32
 80212ce:	f100 0001 	add.w	r0, r0, #1
 80212d2:	d008      	beq.n	80212e6 <mbedtls_mpi_lsb+0x32>
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 80212d4:	fa21 f302 	lsr.w	r3, r1, r2
 80212d8:	f013 0301 	ands.w	r3, r3, #1
 80212dc:	f102 0201 	add.w	r2, r2, #1
 80212e0:	d0f4      	beq.n	80212cc <mbedtls_mpi_lsb+0x18>
}
 80212e2:	bc70      	pop	{r4, r5, r6}
 80212e4:	4770      	bx	lr
    for( i = 0; i < X->n; i++ )
 80212e6:	3601      	adds	r6, #1
 80212e8:	42b5      	cmp	r5, r6
 80212ea:	d1eb      	bne.n	80212c4 <mbedtls_mpi_lsb+0x10>
    return( 0 );
 80212ec:	4618      	mov	r0, r3
 80212ee:	e7f8      	b.n	80212e2 <mbedtls_mpi_lsb+0x2e>
 80212f0:	4628      	mov	r0, r5
 80212f2:	e7f6      	b.n	80212e2 <mbedtls_mpi_lsb+0x2e>

080212f4 <mbedtls_mpi_bitlen>:
{
 80212f4:	4603      	mov	r3, r0
    if( X->n == 0 )
 80212f6:	6840      	ldr	r0, [r0, #4]
 80212f8:	b1c8      	cbz	r0, 802132e <mbedtls_mpi_bitlen+0x3a>
    for( i = X->n - 1; i > 0; i-- )
 80212fa:	1e41      	subs	r1, r0, #1
 80212fc:	d01b      	beq.n	8021336 <mbedtls_mpi_bitlen+0x42>
        if( X->p[i] != 0 )
 80212fe:	689b      	ldr	r3, [r3, #8]
 8021300:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8021304:	e001      	b.n	802130a <mbedtls_mpi_bitlen+0x16>
    for( i = X->n - 1; i > 0; i-- )
 8021306:	3901      	subs	r1, #1
 8021308:	d012      	beq.n	8021330 <mbedtls_mpi_bitlen+0x3c>
        if( X->p[i] != 0 )
 802130a:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 802130e:	2a00      	cmp	r2, #0
 8021310:	d0f9      	beq.n	8021306 <mbedtls_mpi_bitlen+0x12>
 8021312:	3101      	adds	r1, #1
 8021314:	0149      	lsls	r1, r1, #5
    for( j = 0; j < biL; j++ )
 8021316:	2000      	movs	r0, #0
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 8021318:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802131c:	e002      	b.n	8021324 <mbedtls_mpi_bitlen+0x30>
    for( j = 0; j < biL; j++ )
 802131e:	3001      	adds	r0, #1
 8021320:	2820      	cmp	r0, #32
 8021322:	d003      	beq.n	802132c <mbedtls_mpi_bitlen+0x38>
        if( x & mask ) break;
 8021324:	4213      	tst	r3, r2
        mask >>= 1;
 8021326:	ea4f 0353 	mov.w	r3, r3, lsr #1
        if( x & mask ) break;
 802132a:	d0f8      	beq.n	802131e <mbedtls_mpi_bitlen+0x2a>
    return( ( i * biL ) + j );
 802132c:	1a08      	subs	r0, r1, r0
}
 802132e:	4770      	bx	lr
    for( i = X->n - 1; i > 0; i-- )
 8021330:	2120      	movs	r1, #32
 8021332:	681a      	ldr	r2, [r3, #0]
 8021334:	e7ef      	b.n	8021316 <mbedtls_mpi_bitlen+0x22>
 8021336:	689b      	ldr	r3, [r3, #8]
 8021338:	2120      	movs	r1, #32
 802133a:	681a      	ldr	r2, [r3, #0]
 802133c:	e7eb      	b.n	8021316 <mbedtls_mpi_bitlen+0x22>
 802133e:	bf00      	nop

08021340 <mbedtls_mpi_size>:
{
 8021340:	4602      	mov	r2, r0
    if( X->n == 0 )
 8021342:	6840      	ldr	r0, [r0, #4]
 8021344:	b1f8      	cbz	r0, 8021386 <mbedtls_mpi_size+0x46>
    for( i = X->n - 1; i > 0; i-- )
 8021346:	1e43      	subs	r3, r0, #1
{
 8021348:	b410      	push	{r4}
    for( i = X->n - 1; i > 0; i-- )
 802134a:	d020      	beq.n	802138e <mbedtls_mpi_size+0x4e>
        if( X->p[i] != 0 )
 802134c:	6892      	ldr	r2, [r2, #8]
 802134e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8021352:	e001      	b.n	8021358 <mbedtls_mpi_size+0x18>
    for( i = X->n - 1; i > 0; i-- )
 8021354:	3b01      	subs	r3, #1
 8021356:	d017      	beq.n	8021388 <mbedtls_mpi_size+0x48>
        if( X->p[i] != 0 )
 8021358:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 802135c:	2c00      	cmp	r4, #0
 802135e:	d0f9      	beq.n	8021354 <mbedtls_mpi_size+0x14>
 8021360:	3301      	adds	r3, #1
 8021362:	015b      	lsls	r3, r3, #5
    for( j = 0; j < biL; j++ )
 8021364:	2200      	movs	r2, #0
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 8021366:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 802136a:	e002      	b.n	8021372 <mbedtls_mpi_size+0x32>
    for( j = 0; j < biL; j++ )
 802136c:	3201      	adds	r2, #1
 802136e:	2a20      	cmp	r2, #32
 8021370:	d003      	beq.n	802137a <mbedtls_mpi_size+0x3a>
        if( x & mask ) break;
 8021372:	4221      	tst	r1, r4
        mask >>= 1;
 8021374:	ea4f 0151 	mov.w	r1, r1, lsr #1
        if( x & mask ) break;
 8021378:	d0f8      	beq.n	802136c <mbedtls_mpi_size+0x2c>
    return( ( i * biL ) + j );
 802137a:	1dd8      	adds	r0, r3, #7
 802137c:	1a80      	subs	r0, r0, r2
 802137e:	08c0      	lsrs	r0, r0, #3
}
 8021380:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021384:	4770      	bx	lr
 8021386:	4770      	bx	lr
    for( i = X->n - 1; i > 0; i-- )
 8021388:	2320      	movs	r3, #32
 802138a:	6814      	ldr	r4, [r2, #0]
 802138c:	e7ea      	b.n	8021364 <mbedtls_mpi_size+0x24>
 802138e:	6892      	ldr	r2, [r2, #8]
 8021390:	2320      	movs	r3, #32
 8021392:	6814      	ldr	r4, [r2, #0]
 8021394:	e7e6      	b.n	8021364 <mbedtls_mpi_size+0x24>
 8021396:	bf00      	nop

08021398 <mbedtls_mpi_read_binary>:
{
 8021398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
 802139c:	f012 0503 	ands.w	r5, r2, #3
 80213a0:	bf18      	it	ne
 80213a2:	2501      	movne	r5, #1
    if( X->n != limbs )
 80213a4:	6843      	ldr	r3, [r0, #4]
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
 80213a6:	eb05 0592 	add.w	r5, r5, r2, lsr #2
    if( X->n != limbs )
 80213aa:	42ab      	cmp	r3, r5
{
 80213ac:	4616      	mov	r6, r2
 80213ae:	4604      	mov	r4, r0
 80213b0:	4688      	mov	r8, r1
    size_t const overhead = ( limbs * ciL ) - buflen;
 80213b2:	ea4f 0785 	mov.w	r7, r5, lsl #2
    if( X->n != limbs )
 80213b6:	d061      	beq.n	802147c <mbedtls_mpi_read_binary+0xe4>
    if( X->p != NULL )
 80213b8:	6880      	ldr	r0, [r0, #8]
 80213ba:	b128      	cbz	r0, 80213c8 <mbedtls_mpi_read_binary+0x30>
    mbedtls_platform_zeroize( v, ciL * n );
 80213bc:	0099      	lsls	r1, r3, #2
 80213be:	f006 fbb5 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 80213c2:	68a0      	ldr	r0, [r4, #8]
 80213c4:	f00e fd12 	bl	802fdec <free>
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 80213c8:	f242 7310 	movw	r3, #10000	; 0x2710
    X->n = 0;
 80213cc:	f04f 0900 	mov.w	r9, #0
    X->s = 1;
 80213d0:	f04f 0a01 	mov.w	sl, #1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 80213d4:	429d      	cmp	r5, r3
    X->n = 0;
 80213d6:	e9c4 a900 	strd	sl, r9, [r4]
    X->p = NULL;
 80213da:	f8c4 9008 	str.w	r9, [r4, #8]
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 80213de:	d853      	bhi.n	8021488 <mbedtls_mpi_read_binary+0xf0>
    if( X->n < nblimbs )
 80213e0:	2d00      	cmp	r5, #0
 80213e2:	d136      	bne.n	8021452 <mbedtls_mpi_read_binary+0xba>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 80213e4:	2104      	movs	r1, #4
 80213e6:	2001      	movs	r0, #1
 80213e8:	f00e fcc6 	bl	802fd78 <calloc>
 80213ec:	4681      	mov	r9, r0
 80213ee:	2800      	cmp	r0, #0
 80213f0:	d04a      	beq.n	8021488 <mbedtls_mpi_read_binary+0xf0>
        if( X->p != NULL )
 80213f2:	68a0      	ldr	r0, [r4, #8]
 80213f4:	b128      	cbz	r0, 8021402 <mbedtls_mpi_read_binary+0x6a>
    mbedtls_platform_zeroize( v, ciL * n );
 80213f6:	2100      	movs	r1, #0
 80213f8:	f006 fb98 	bl	8027b2c <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
 80213fc:	68a0      	ldr	r0, [r4, #8]
 80213fe:	f00e fcf5 	bl	802fdec <free>
        X->n = nblimbs;
 8021402:	2301      	movs	r3, #1
        X->p = p;
 8021404:	2204      	movs	r2, #4
        X->n = nblimbs;
 8021406:	e9c4 3901 	strd	r3, r9, [r4, #4]
    memset( X->p, 0, X->n * ciL );
 802140a:	2100      	movs	r1, #0
 802140c:	4648      	mov	r0, r9
 802140e:	f00e fd2a 	bl	802fe66 <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
 8021412:	2100      	movs	r1, #0
    X->s    = ( z < 0 ) ? -1 : 1;
 8021414:	2201      	movs	r2, #1
    X->p[0] = ( z < 0 ) ? -z : z;
 8021416:	68a3      	ldr	r3, [r4, #8]
 8021418:	6019      	str	r1, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 802141a:	6022      	str	r2, [r4, #0]
    if( buf != NULL )
 802141c:	f1b8 0f00 	cmp.w	r8, #0
 8021420:	d014      	beq.n	802144c <mbedtls_mpi_read_binary+0xb4>
    size_t const overhead = ( limbs * ciL ) - buflen;
 8021422:	1bb8      	subs	r0, r7, r6
        memcpy( Xp + overhead, buf, buflen );
 8021424:	4641      	mov	r1, r8
 8021426:	4632      	mov	r2, r6
 8021428:	4418      	add	r0, r3
 802142a:	f00e fcf5 	bl	802fe18 <memcpy>
    if( limbs == 0 )
 802142e:	b16d      	cbz	r5, 802144c <mbedtls_mpi_read_binary+0xb4>
        mpi_bigendian_to_host( X->p, limbs );
 8021430:	68a3      	ldr	r3, [r4, #8]
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
 8021432:	1f3a      	subs	r2, r7, #4
 8021434:	189a      	adds	r2, r3, r2
 8021436:	d209      	bcs.n	802144c <mbedtls_mpi_read_binary+0xb4>
            return( __builtin_bswap32(x) );
 8021438:	6810      	ldr	r0, [r2, #0]
        tmp             = mpi_uint_bigendian_to_host( *cur_limb_left  );
 802143a:	6819      	ldr	r1, [r3, #0]
            return( __builtin_bswap32(x) );
 802143c:	ba00      	rev	r0, r0
 802143e:	ba09      	rev	r1, r1
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
 8021440:	f843 0b04 	str.w	r0, [r3], #4
        *cur_limb_right = tmp;
 8021444:	f842 1904 	str.w	r1, [r2], #-4
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
 8021448:	4293      	cmp	r3, r2
 802144a:	d9f5      	bls.n	8021438 <mbedtls_mpi_read_binary+0xa0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 802144c:	2000      	movs	r0, #0
}
 802144e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 8021452:	2104      	movs	r1, #4
 8021454:	4628      	mov	r0, r5
 8021456:	f00e fc8f 	bl	802fd78 <calloc>
 802145a:	b1a8      	cbz	r0, 8021488 <mbedtls_mpi_read_binary+0xf0>
        X->p = p;
 802145c:	e9c4 5001 	strd	r5, r0, [r4, #4]
    X->p[0] = ( z < 0 ) ? -z : z;
 8021460:	f8c0 9000 	str.w	r9, [r0]
    X->s    = ( z < 0 ) ? -1 : 1;
 8021464:	f8c4 a000 	str.w	sl, [r4]
    if( buf != NULL )
 8021468:	f1b8 0f00 	cmp.w	r8, #0
 802146c:	d0ee      	beq.n	802144c <mbedtls_mpi_read_binary+0xb4>
    size_t const overhead = ( limbs * ciL ) - buflen;
 802146e:	1bbb      	subs	r3, r7, r6
        memcpy( Xp + overhead, buf, buflen );
 8021470:	4641      	mov	r1, r8
 8021472:	4632      	mov	r2, r6
 8021474:	4418      	add	r0, r3
 8021476:	f00e fccf 	bl	802fe18 <memcpy>
    if( limbs == 0 )
 802147a:	e7d9      	b.n	8021430 <mbedtls_mpi_read_binary+0x98>
    if( X->n < nblimbs )
 802147c:	2d00      	cmp	r5, #0
 802147e:	d0b1      	beq.n	80213e4 <mbedtls_mpi_read_binary+0x4c>
 8021480:	463a      	mov	r2, r7
 8021482:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8021486:	e7c0      	b.n	802140a <mbedtls_mpi_read_binary+0x72>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8021488:	f06f 000f 	mvn.w	r0, #15
 802148c:	e7df      	b.n	802144e <mbedtls_mpi_read_binary+0xb6>
 802148e:	bf00      	nop

08021490 <mbedtls_mpi_write_binary>:
{
 8021490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    stored_bytes = X->n * ciL;
 8021492:	6847      	ldr	r7, [r0, #4]
{
 8021494:	4605      	mov	r5, r0
    stored_bytes = X->n * ciL;
 8021496:	00bf      	lsls	r7, r7, #2
    if( stored_bytes < buflen )
 8021498:	4297      	cmp	r7, r2
 802149a:	d332      	bcc.n	8021502 <mbedtls_mpi_write_binary+0x72>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
 802149c:	d91e      	bls.n	80214dc <mbedtls_mpi_write_binary+0x4c>
            if( GET_BYTE( X, i ) != 0 )
 802149e:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80214a2:	f022 0303 	bic.w	r3, r2, #3
 80214a6:	f85c 3003 	ldr.w	r3, [ip, r3]
 80214aa:	f002 0003 	and.w	r0, r2, #3
 80214ae:	00c0      	lsls	r0, r0, #3
 80214b0:	40c3      	lsrs	r3, r0
 80214b2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80214b6:	d12d      	bne.n	8021514 <mbedtls_mpi_write_binary+0x84>
 80214b8:	4613      	mov	r3, r2
 80214ba:	e006      	b.n	80214ca <mbedtls_mpi_write_binary+0x3a>
 80214bc:	f85c 6000 	ldr.w	r6, [ip, r0]
 80214c0:	fa26 f404 	lsr.w	r4, r6, r4
 80214c4:	f014 0fff 	tst.w	r4, #255	; 0xff
 80214c8:	d124      	bne.n	8021514 <mbedtls_mpi_write_binary+0x84>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
 80214ca:	3301      	adds	r3, #1
            if( GET_BYTE( X, i ) != 0 )
 80214cc:	f003 0403 	and.w	r4, r3, #3
        for( i = bytes_to_copy; i < stored_bytes; i++ )
 80214d0:	429f      	cmp	r7, r3
            if( GET_BYTE( X, i ) != 0 )
 80214d2:	f023 0003 	bic.w	r0, r3, #3
 80214d6:	ea4f 04c4 	mov.w	r4, r4, lsl #3
        for( i = bytes_to_copy; i < stored_bytes; i++ )
 80214da:	d1ef      	bne.n	80214bc <mbedtls_mpi_write_binary+0x2c>
    for( i = 0; i < bytes_to_copy; i++ )
 80214dc:	b17a      	cbz	r2, 80214fe <mbedtls_mpi_write_binary+0x6e>
 80214de:	1888      	adds	r0, r1, r2
 80214e0:	4602      	mov	r2, r0
 80214e2:	1a83      	subs	r3, r0, r2
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
 80214e4:	68ae      	ldr	r6, [r5, #8]
 80214e6:	f023 0403 	bic.w	r4, r3, #3
 80214ea:	5934      	ldr	r4, [r6, r4]
 80214ec:	f003 0303 	and.w	r3, r3, #3
 80214f0:	00db      	lsls	r3, r3, #3
 80214f2:	fa24 f303 	lsr.w	r3, r4, r3
 80214f6:	f802 3d01 	strb.w	r3, [r2, #-1]!
    for( i = 0; i < bytes_to_copy; i++ )
 80214fa:	4291      	cmp	r1, r2
 80214fc:	d1f1      	bne.n	80214e2 <mbedtls_mpi_write_binary+0x52>
    return( 0 );
 80214fe:	2000      	movs	r0, #0
}
 8021500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        p = buf + buflen - stored_bytes;
 8021502:	1bd2      	subs	r2, r2, r7
 8021504:	188c      	adds	r4, r1, r2
        memset( buf, 0, buflen - stored_bytes );
 8021506:	4608      	mov	r0, r1
 8021508:	2100      	movs	r1, #0
 802150a:	f00e fcac 	bl	802fe66 <memset>
        p = buf + buflen - stored_bytes;
 802150e:	4621      	mov	r1, r4
 8021510:	463a      	mov	r2, r7
 8021512:	e7e3      	b.n	80214dc <mbedtls_mpi_write_binary+0x4c>
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
 8021514:	f06f 0007 	mvn.w	r0, #7
}
 8021518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802151a:	bf00      	nop

0802151c <mbedtls_mpi_shift_l>:
{
 802151c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( X->n == 0 )
 8021520:	6844      	ldr	r4, [r0, #4]
{
 8021522:	4606      	mov	r6, r0
 8021524:	460d      	mov	r5, r1
    v0 = count / (biL    );
 8021526:	ea4f 1851 	mov.w	r8, r1, lsr #5
    t1 = count & (biL - 1);
 802152a:	f001 071f 	and.w	r7, r1, #31
    if( X->n == 0 )
 802152e:	2c00      	cmp	r4, #0
 8021530:	d058      	beq.n	80215e4 <mbedtls_mpi_shift_l+0xc8>
    for( i = X->n - 1; i > 0; i-- )
 8021532:	1e63      	subs	r3, r4, #1
 8021534:	f000 8086 	beq.w	8021644 <mbedtls_mpi_shift_l+0x128>
        if( X->p[i] != 0 )
 8021538:	6881      	ldr	r1, [r0, #8]
 802153a:	eb01 0284 	add.w	r2, r1, r4, lsl #2
 802153e:	e001      	b.n	8021544 <mbedtls_mpi_shift_l+0x28>
    for( i = X->n - 1; i > 0; i-- )
 8021540:	3b01      	subs	r3, #1
 8021542:	d07a      	beq.n	802163a <mbedtls_mpi_shift_l+0x11e>
        if( X->p[i] != 0 )
 8021544:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8021548:	2800      	cmp	r0, #0
 802154a:	d0f9      	beq.n	8021540 <mbedtls_mpi_shift_l+0x24>
 802154c:	3301      	adds	r3, #1
 802154e:	015b      	lsls	r3, r3, #5
    for( j = 0; j < biL; j++ )
 8021550:	2200      	movs	r2, #0
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 8021552:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8021556:	e002      	b.n	802155e <mbedtls_mpi_shift_l+0x42>
    for( j = 0; j < biL; j++ )
 8021558:	3201      	adds	r2, #1
 802155a:	2a20      	cmp	r2, #32
 802155c:	d003      	beq.n	8021566 <mbedtls_mpi_shift_l+0x4a>
        if( x & mask ) break;
 802155e:	4201      	tst	r1, r0
        mask >>= 1;
 8021560:	ea4f 0151 	mov.w	r1, r1, lsr #1
        if( x & mask ) break;
 8021564:	d0f8      	beq.n	8021558 <mbedtls_mpi_shift_l+0x3c>
    if( X->n * biL < i )
 8021566:	442b      	add	r3, r5
 8021568:	1a9b      	subs	r3, r3, r2
 802156a:	ebb3 1f44 	cmp.w	r3, r4, lsl #5
 802156e:	d83d      	bhi.n	80215ec <mbedtls_mpi_shift_l+0xd0>
    if( v0 > 0 )
 8021570:	2d1f      	cmp	r5, #31
 8021572:	d919      	bls.n	80215a8 <mbedtls_mpi_shift_l+0x8c>
        for( i = X->n; i > v0; i-- )
 8021574:	45a0      	cmp	r8, r4
 8021576:	d263      	bcs.n	8021640 <mbedtls_mpi_shift_l+0x124>
 8021578:	eba4 0308 	sub.w	r3, r4, r8
            X->p[i - 1] = X->p[i - v0 - 1];
 802157c:	68b5      	ldr	r5, [r6, #8]
 802157e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8021582:	3b01      	subs	r3, #1
 8021584:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8021588:	eb05 0184 	add.w	r1, r5, r4, lsl #2
 802158c:	6818      	ldr	r0, [r3, #0]
        for( i = X->n; i > v0; i-- )
 802158e:	429d      	cmp	r5, r3
            X->p[i - 1] = X->p[i - v0 - 1];
 8021590:	f841 0d04 	str.w	r0, [r1, #-4]!
        for( i = X->n; i > v0; i-- )
 8021594:	f1a3 0304 	sub.w	r3, r3, #4
 8021598:	d1f8      	bne.n	802158c <mbedtls_mpi_shift_l+0x70>
 802159a:	4642      	mov	r2, r8
        for( ; i > 0; i-- )
 802159c:	b122      	cbz	r2, 80215a8 <mbedtls_mpi_shift_l+0x8c>
 802159e:	2100      	movs	r1, #0
 80215a0:	68b0      	ldr	r0, [r6, #8]
 80215a2:	0092      	lsls	r2, r2, #2
 80215a4:	f00e fc5f 	bl	802fe66 <memset>
    if( t1 > 0 )
 80215a8:	b1cf      	cbz	r7, 80215de <mbedtls_mpi_shift_l+0xc2>
        for( i = v0; i < X->n; i++ )
 80215aa:	45a0      	cmp	r8, r4
 80215ac:	d217      	bcs.n	80215de <mbedtls_mpi_shift_l+0xc2>
    mbedtls_mpi_uint r0 = 0, r1;
 80215ae:	2200      	movs	r2, #0
            r1 = X->p[i] >> (biL - t1);
 80215b0:	68b3      	ldr	r3, [r6, #8]
 80215b2:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80215b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80215ba:	1f19      	subs	r1, r3, #4
 80215bc:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 80215c0:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 80215c4:	f1c7 0020 	rsb	r0, r7, #32
 80215c8:	f858 1f04 	ldr.w	r1, [r8, #4]!
            X->p[i] <<= t1;
 80215cc:	fa01 f307 	lsl.w	r3, r1, r7
            X->p[i] |= r0;
 80215d0:	431a      	orrs	r2, r3
        for( i = v0; i < X->n; i++ )
 80215d2:	45a0      	cmp	r8, r4
            X->p[i] |= r0;
 80215d4:	f8c8 2000 	str.w	r2, [r8]
            r1 = X->p[i] >> (biL - t1);
 80215d8:	fa21 f200 	lsr.w	r2, r1, r0
        for( i = v0; i < X->n; i++ )
 80215dc:	d1f4      	bne.n	80215c8 <mbedtls_mpi_shift_l+0xac>
    ret = 0;
 80215de:	2000      	movs	r0, #0
}
 80215e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80215e4:	460b      	mov	r3, r1
    if( X->n * biL < i )
 80215e6:	ebb3 1f44 	cmp.w	r3, r4, lsl #5
 80215ea:	d9c1      	bls.n	8021570 <mbedtls_mpi_shift_l+0x54>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 80215ec:	f013 021f 	ands.w	r2, r3, #31
 80215f0:	bf18      	it	ne
 80215f2:	2201      	movne	r2, #1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 80215f4:	f242 7110 	movw	r1, #10000	; 0x2710
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 80215f8:	eb02 1953 	add.w	r9, r2, r3, lsr #5
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 80215fc:	4589      	cmp	r9, r1
 80215fe:	d825      	bhi.n	802164c <mbedtls_mpi_shift_l+0x130>
    if( X->n < nblimbs )
 8021600:	45a1      	cmp	r9, r4
 8021602:	d9b5      	bls.n	8021570 <mbedtls_mpi_shift_l+0x54>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 8021604:	2104      	movs	r1, #4
 8021606:	4648      	mov	r0, r9
 8021608:	f00e fbb6 	bl	802fd78 <calloc>
 802160c:	4682      	mov	sl, r0
 802160e:	b1e8      	cbz	r0, 802164c <mbedtls_mpi_shift_l+0x130>
        if( X->p != NULL )
 8021610:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8021614:	f1bb 0f00 	cmp.w	fp, #0
 8021618:	d00b      	beq.n	8021632 <mbedtls_mpi_shift_l+0x116>
            memcpy( p, X->p, X->n * ciL );
 802161a:	00a4      	lsls	r4, r4, #2
 802161c:	4622      	mov	r2, r4
 802161e:	4659      	mov	r1, fp
 8021620:	f00e fbfa 	bl	802fe18 <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
 8021624:	4658      	mov	r0, fp
 8021626:	4621      	mov	r1, r4
 8021628:	f006 fa80 	bl	8027b2c <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
 802162c:	68b0      	ldr	r0, [r6, #8]
 802162e:	f00e fbdd 	bl	802fdec <free>
        X->p = p;
 8021632:	464c      	mov	r4, r9
 8021634:	e9c6 9a01 	strd	r9, sl, [r6, #4]
 8021638:	e79a      	b.n	8021570 <mbedtls_mpi_shift_l+0x54>
    for( i = X->n - 1; i > 0; i-- )
 802163a:	2320      	movs	r3, #32
 802163c:	6808      	ldr	r0, [r1, #0]
 802163e:	e787      	b.n	8021550 <mbedtls_mpi_shift_l+0x34>
        for( i = X->n; i > v0; i-- )
 8021640:	4622      	mov	r2, r4
 8021642:	e7ab      	b.n	802159c <mbedtls_mpi_shift_l+0x80>
 8021644:	6882      	ldr	r2, [r0, #8]
    for( i = X->n - 1; i > 0; i-- )
 8021646:	2320      	movs	r3, #32
 8021648:	6810      	ldr	r0, [r2, #0]
 802164a:	e781      	b.n	8021550 <mbedtls_mpi_shift_l+0x34>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 802164c:	f06f 000f 	mvn.w	r0, #15
 8021650:	e7c6      	b.n	80215e0 <mbedtls_mpi_shift_l+0xc4>
 8021652:	bf00      	nop

08021654 <mbedtls_mpi_shift_r>:
{
 8021654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 8021658:	6844      	ldr	r4, [r0, #4]
    v0 = count /  biL;
 802165a:	094b      	lsrs	r3, r1, #5
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 802165c:	429c      	cmp	r4, r3
{
 802165e:	4606      	mov	r6, r0
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 8021660:	d34f      	bcc.n	8021702 <mbedtls_mpi_shift_r+0xae>
 8021662:	f001 051f 	and.w	r5, r1, #31
 8021666:	d04b      	beq.n	8021700 <mbedtls_mpi_shift_r+0xac>
    if( v0 > 0 )
 8021668:	291f      	cmp	r1, #31
 802166a:	d943      	bls.n	80216f4 <mbedtls_mpi_shift_r+0xa0>
        for( i = 0; i < X->n - v0; i++ )
 802166c:	1ae0      	subs	r0, r4, r3
 802166e:	d024      	beq.n	80216ba <mbedtls_mpi_shift_r+0x66>
            X->p[i] = X->p[i + v0];
 8021670:	68b7      	ldr	r7, [r6, #8]
 8021672:	1e42      	subs	r2, r0, #1
 8021674:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 8021678:	f107 0c08 	add.w	ip, r7, #8
 802167c:	4561      	cmp	r1, ip
 802167e:	bf28      	it	cs
 8021680:	2a0b      	cmpcs	r2, #11
 8021682:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8021686:	d961      	bls.n	802174c <mbedtls_mpi_shift_r+0xf8>
 8021688:	ea47 0201 	orr.w	r2, r7, r1
 802168c:	0752      	lsls	r2, r2, #29
 802168e:	d15d      	bne.n	802174c <mbedtls_mpi_shift_r+0xf8>
 8021690:	463a      	mov	r2, r7
 8021692:	ea4f 0c50 	mov.w	ip, r0, lsr #1
 8021696:	3908      	subs	r1, #8
 8021698:	eb07 0ccc 	add.w	ip, r7, ip, lsl #3
 802169c:	e9f1 8902 	ldrd	r8, r9, [r1, #8]!
 80216a0:	e8e2 8902 	strd	r8, r9, [r2], #8
        for( i = 0; i < X->n - v0; i++ )
 80216a4:	4562      	cmp	r2, ip
 80216a6:	d1f9      	bne.n	802169c <mbedtls_mpi_shift_r+0x48>
 80216a8:	07c1      	lsls	r1, r0, #31
 80216aa:	f020 0201 	bic.w	r2, r0, #1
 80216ae:	d504      	bpl.n	80216ba <mbedtls_mpi_shift_r+0x66>
            X->p[i] = X->p[i + v0];
 80216b0:	4413      	add	r3, r2
 80216b2:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 80216b6:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
        for( ; i < X->n; i++ )
 80216ba:	4284      	cmp	r4, r0
 80216bc:	d91a      	bls.n	80216f4 <mbedtls_mpi_shift_r+0xa0>
            X->p[i] = 0;
 80216be:	68b6      	ldr	r6, [r6, #8]
 80216c0:	1a22      	subs	r2, r4, r0
 80216c2:	2100      	movs	r1, #0
 80216c4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 80216c8:	0092      	lsls	r2, r2, #2
 80216ca:	f00e fbcc 	bl	802fe66 <memset>
    if( v1 > 0 )
 80216ce:	b175      	cbz	r5, 80216ee <mbedtls_mpi_shift_r+0x9a>
            X->p[i] = X->p[i + v0];
 80216d0:	2300      	movs	r3, #0
 80216d2:	eb06 0284 	add.w	r2, r6, r4, lsl #2
 80216d6:	f1c5 0420 	rsb	r4, r5, #32
            r1 = X->p[i - 1] << (biL - v1);
 80216da:	f852 0d04 	ldr.w	r0, [r2, #-4]!
            X->p[i - 1] >>= v1;
 80216de:	fa20 f105 	lsr.w	r1, r0, r5
            X->p[i - 1] |= r0;
 80216e2:	430b      	orrs	r3, r1
        for( i = X->n; i > 0; i-- )
 80216e4:	42b2      	cmp	r2, r6
            X->p[i - 1] |= r0;
 80216e6:	6013      	str	r3, [r2, #0]
            r1 = X->p[i - 1] << (biL - v1);
 80216e8:	fa00 f304 	lsl.w	r3, r0, r4
        for( i = X->n; i > 0; i-- )
 80216ec:	d1f5      	bne.n	80216da <mbedtls_mpi_shift_r+0x86>
    return( 0 );
 80216ee:	2000      	movs	r0, #0
}
 80216f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if( v1 > 0 )
 80216f4:	2d00      	cmp	r5, #0
 80216f6:	d0fa      	beq.n	80216ee <mbedtls_mpi_shift_r+0x9a>
        for( i = X->n; i > 0; i-- )
 80216f8:	2c00      	cmp	r4, #0
 80216fa:	d0f8      	beq.n	80216ee <mbedtls_mpi_shift_r+0x9a>
 80216fc:	68b6      	ldr	r6, [r6, #8]
 80216fe:	e7e7      	b.n	80216d0 <mbedtls_mpi_shift_r+0x7c>
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 8021700:	b175      	cbz	r5, 8021720 <mbedtls_mpi_shift_r+0xcc>
    if( X->n < nblimbs )
 8021702:	b184      	cbz	r4, 8021726 <mbedtls_mpi_shift_r+0xd2>
 8021704:	68b5      	ldr	r5, [r6, #8]
 8021706:	00a2      	lsls	r2, r4, #2
    memset( X->p, 0, X->n * ciL );
 8021708:	4628      	mov	r0, r5
 802170a:	2100      	movs	r1, #0
 802170c:	f00e fbab 	bl	802fe66 <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
 8021710:	2300      	movs	r3, #0
    X->s    = ( z < 0 ) ? -1 : 1;
 8021712:	2201      	movs	r2, #1
    X->p[0] = ( z < 0 ) ? -z : z;
 8021714:	68b1      	ldr	r1, [r6, #8]
    X->s    = ( z < 0 ) ? -1 : 1;
 8021716:	4618      	mov	r0, r3
    X->p[0] = ( z < 0 ) ? -z : z;
 8021718:	600b      	str	r3, [r1, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 802171a:	6032      	str	r2, [r6, #0]
}
 802171c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if( v0 > 0 )
 8021720:	291f      	cmp	r1, #31
 8021722:	d9e4      	bls.n	80216ee <mbedtls_mpi_shift_r+0x9a>
 8021724:	e7a2      	b.n	802166c <mbedtls_mpi_shift_r+0x18>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 8021726:	2104      	movs	r1, #4
 8021728:	2001      	movs	r0, #1
 802172a:	f00e fb25 	bl	802fd78 <calloc>
 802172e:	4605      	mov	r5, r0
 8021730:	b1c8      	cbz	r0, 8021766 <mbedtls_mpi_shift_r+0x112>
        if( X->p != NULL )
 8021732:	68b0      	ldr	r0, [r6, #8]
 8021734:	b128      	cbz	r0, 8021742 <mbedtls_mpi_shift_r+0xee>
    mbedtls_platform_zeroize( v, ciL * n );
 8021736:	4621      	mov	r1, r4
 8021738:	f006 f9f8 	bl	8027b2c <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
 802173c:	68b0      	ldr	r0, [r6, #8]
 802173e:	f00e fb55 	bl	802fdec <free>
        X->n = nblimbs;
 8021742:	2301      	movs	r3, #1
        X->p = p;
 8021744:	2204      	movs	r2, #4
        X->n = nblimbs;
 8021746:	e9c6 3501 	strd	r3, r5, [r6, #4]
        X->p = p;
 802174a:	e7dd      	b.n	8021708 <mbedtls_mpi_shift_r+0xb4>
 802174c:	f1ae 0304 	sub.w	r3, lr, #4
 8021750:	1f3a      	subs	r2, r7, #4
 8021752:	443b      	add	r3, r7
 8021754:	eb02 0780 	add.w	r7, r2, r0, lsl #2
            X->p[i] = X->p[i + v0];
 8021758:	f853 1f04 	ldr.w	r1, [r3, #4]!
 802175c:	f842 1f04 	str.w	r1, [r2, #4]!
        for( i = 0; i < X->n - v0; i++ )
 8021760:	42ba      	cmp	r2, r7
 8021762:	d1f9      	bne.n	8021758 <mbedtls_mpi_shift_r+0x104>
 8021764:	e7a9      	b.n	80216ba <mbedtls_mpi_shift_r+0x66>
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8021766:	f06f 000f 	mvn.w	r0, #15
 802176a:	e7c1      	b.n	80216f0 <mbedtls_mpi_shift_r+0x9c>

0802176c <mbedtls_mpi_cmp_abs>:
    for( i = X->n; i > 0; i-- )
 802176c:	6843      	ldr	r3, [r0, #4]
{
 802176e:	b430      	push	{r4, r5}
    for( i = X->n; i > 0; i-- )
 8021770:	2b00      	cmp	r3, #0
 8021772:	d03a      	beq.n	80217ea <mbedtls_mpi_cmp_abs+0x7e>
 8021774:	6882      	ldr	r2, [r0, #8]
 8021776:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802177a:	e001      	b.n	8021780 <mbedtls_mpi_cmp_abs+0x14>
 802177c:	3b01      	subs	r3, #1
 802177e:	d02e      	beq.n	80217de <mbedtls_mpi_cmp_abs+0x72>
        if( X->p[i - 1] != 0 )
 8021780:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 8021784:	2c00      	cmp	r4, #0
 8021786:	d0f9      	beq.n	802177c <mbedtls_mpi_cmp_abs+0x10>
    for( j = Y->n; j > 0; j-- )
 8021788:	684a      	ldr	r2, [r1, #4]
 802178a:	b302      	cbz	r2, 80217ce <mbedtls_mpi_cmp_abs+0x62>
        if( Y->p[j - 1] != 0 )
 802178c:	688d      	ldr	r5, [r1, #8]
 802178e:	eb05 0182 	add.w	r1, r5, r2, lsl #2
 8021792:	e001      	b.n	8021798 <mbedtls_mpi_cmp_abs+0x2c>
    for( j = Y->n; j > 0; j-- )
 8021794:	3a01      	subs	r2, #1
 8021796:	d01d      	beq.n	80217d4 <mbedtls_mpi_cmp_abs+0x68>
        if( Y->p[j - 1] != 0 )
 8021798:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802179c:	2c00      	cmp	r4, #0
 802179e:	d0f9      	beq.n	8021794 <mbedtls_mpi_cmp_abs+0x28>
    if( i > j ) return(  1 );
 80217a0:	429a      	cmp	r2, r3
 80217a2:	d314      	bcc.n	80217ce <mbedtls_mpi_cmp_abs+0x62>
    if( j > i ) return( -1 );
 80217a4:	d903      	bls.n	80217ae <mbedtls_mpi_cmp_abs+0x42>
 80217a6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80217aa:	bc30      	pop	{r4, r5}
 80217ac:	4770      	bx	lr
    for( ; i > 0; i-- )
 80217ae:	b1cb      	cbz	r3, 80217e4 <mbedtls_mpi_cmp_abs+0x78>
 80217b0:	6881      	ldr	r1, [r0, #8]
 80217b2:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80217b6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80217ba:	e002      	b.n	80217c2 <mbedtls_mpi_cmp_abs+0x56>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 80217bc:	d3f3      	bcc.n	80217a6 <mbedtls_mpi_cmp_abs+0x3a>
    for( ; i > 0; i-- )
 80217be:	3b01      	subs	r3, #1
 80217c0:	d010      	beq.n	80217e4 <mbedtls_mpi_cmp_abs+0x78>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 80217c2:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80217c6:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 80217ca:	4284      	cmp	r4, r0
 80217cc:	d9f6      	bls.n	80217bc <mbedtls_mpi_cmp_abs+0x50>
    if( i > j ) return(  1 );
 80217ce:	2001      	movs	r0, #1
}
 80217d0:	bc30      	pop	{r4, r5}
 80217d2:	4770      	bx	lr
    if( i == 0 && j == 0 )
 80217d4:	1e18      	subs	r0, r3, #0
 80217d6:	bf18      	it	ne
 80217d8:	2001      	movne	r0, #1
}
 80217da:	bc30      	pop	{r4, r5}
 80217dc:	4770      	bx	lr
    for( j = Y->n; j > 0; j-- )
 80217de:	684a      	ldr	r2, [r1, #4]
 80217e0:	2a00      	cmp	r2, #0
 80217e2:	d1d3      	bne.n	802178c <mbedtls_mpi_cmp_abs+0x20>
        return( 0 );
 80217e4:	4618      	mov	r0, r3
}
 80217e6:	bc30      	pop	{r4, r5}
 80217e8:	4770      	bx	lr
    for( j = Y->n; j > 0; j-- )
 80217ea:	684a      	ldr	r2, [r1, #4]
 80217ec:	2a00      	cmp	r2, #0
 80217ee:	d1cd      	bne.n	802178c <mbedtls_mpi_cmp_abs+0x20>
        return( 0 );
 80217f0:	4610      	mov	r0, r2
 80217f2:	e7da      	b.n	80217aa <mbedtls_mpi_cmp_abs+0x3e>

080217f4 <mbedtls_mpi_cmp_mpi>:
    for( i = X->n; i > 0; i-- )
 80217f4:	6843      	ldr	r3, [r0, #4]
{
 80217f6:	b4f0      	push	{r4, r5, r6, r7}
 80217f8:	4607      	mov	r7, r0
    for( i = X->n; i > 0; i-- )
 80217fa:	2b00      	cmp	r3, #0
 80217fc:	d049      	beq.n	8021892 <mbedtls_mpi_cmp_mpi+0x9e>
 80217fe:	6882      	ldr	r2, [r0, #8]
 8021800:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8021804:	e001      	b.n	802180a <mbedtls_mpi_cmp_mpi+0x16>
 8021806:	3b01      	subs	r3, #1
 8021808:	d032      	beq.n	8021870 <mbedtls_mpi_cmp_mpi+0x7c>
        if( X->p[i - 1] != 0 )
 802180a:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 802180e:	2c00      	cmp	r4, #0
 8021810:	d0f9      	beq.n	8021806 <mbedtls_mpi_cmp_mpi+0x12>
    for( j = Y->n; j > 0; j-- )
 8021812:	6848      	ldr	r0, [r1, #4]
 8021814:	b348      	cbz	r0, 802186a <mbedtls_mpi_cmp_mpi+0x76>
        if( Y->p[j - 1] != 0 )
 8021816:	688e      	ldr	r6, [r1, #8]
 8021818:	eb06 0480 	add.w	r4, r6, r0, lsl #2
 802181c:	e001      	b.n	8021822 <mbedtls_mpi_cmp_mpi+0x2e>
    for( j = Y->n; j > 0; j-- )
 802181e:	3801      	subs	r0, #1
 8021820:	d022      	beq.n	8021868 <mbedtls_mpi_cmp_mpi+0x74>
        if( Y->p[j - 1] != 0 )
 8021822:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8021826:	2d00      	cmp	r5, #0
 8021828:	d0f9      	beq.n	802181e <mbedtls_mpi_cmp_mpi+0x2a>
    if( i > j ) return(  X->s );
 802182a:	4283      	cmp	r3, r0
 802182c:	d81d      	bhi.n	802186a <mbedtls_mpi_cmp_mpi+0x76>
    if( j > i ) return( -Y->s );
 802182e:	d203      	bcs.n	8021838 <mbedtls_mpi_cmp_mpi+0x44>
 8021830:	6808      	ldr	r0, [r1, #0]
 8021832:	4240      	negs	r0, r0
}
 8021834:	bcf0      	pop	{r4, r5, r6, r7}
 8021836:	4770      	bx	lr
    if( X->s > 0 && Y->s < 0 ) return(  1 );
 8021838:	6838      	ldr	r0, [r7, #0]
 802183a:	680a      	ldr	r2, [r1, #0]
 802183c:	2800      	cmp	r0, #0
 802183e:	dd1f      	ble.n	8021880 <mbedtls_mpi_cmp_mpi+0x8c>
 8021840:	2a00      	cmp	r2, #0
 8021842:	db1b      	blt.n	802187c <mbedtls_mpi_cmp_mpi+0x88>
    for( ; i > 0; i-- )
 8021844:	b1bb      	cbz	r3, 8021876 <mbedtls_mpi_cmp_mpi+0x82>
 8021846:	68b9      	ldr	r1, [r7, #8]
 8021848:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 802184c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8021850:	e002      	b.n	8021858 <mbedtls_mpi_cmp_mpi+0x64>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 8021852:	d31c      	bcc.n	802188e <mbedtls_mpi_cmp_mpi+0x9a>
    for( ; i > 0; i-- )
 8021854:	3b01      	subs	r3, #1
 8021856:	d00e      	beq.n	8021876 <mbedtls_mpi_cmp_mpi+0x82>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 8021858:	f851 5d04 	ldr.w	r5, [r1, #-4]!
 802185c:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 8021860:	42a5      	cmp	r5, r4
 8021862:	d9f6      	bls.n	8021852 <mbedtls_mpi_cmp_mpi+0x5e>
}
 8021864:	bcf0      	pop	{r4, r5, r6, r7}
 8021866:	4770      	bx	lr
    if( i == 0 && j == 0 )
 8021868:	b12b      	cbz	r3, 8021876 <mbedtls_mpi_cmp_mpi+0x82>
    if( i > j ) return(  X->s );
 802186a:	6838      	ldr	r0, [r7, #0]
}
 802186c:	bcf0      	pop	{r4, r5, r6, r7}
 802186e:	4770      	bx	lr
    for( j = Y->n; j > 0; j-- )
 8021870:	6848      	ldr	r0, [r1, #4]
 8021872:	2800      	cmp	r0, #0
 8021874:	d1cf      	bne.n	8021816 <mbedtls_mpi_cmp_mpi+0x22>
        return( 0 );
 8021876:	4618      	mov	r0, r3
}
 8021878:	bcf0      	pop	{r4, r5, r6, r7}
 802187a:	4770      	bx	lr
    if( X->s > 0 && Y->s < 0 ) return(  1 );
 802187c:	2001      	movs	r0, #1
 802187e:	e7d9      	b.n	8021834 <mbedtls_mpi_cmp_mpi+0x40>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 8021880:	2a00      	cmp	r2, #0
 8021882:	dddf      	ble.n	8021844 <mbedtls_mpi_cmp_mpi+0x50>
 8021884:	2800      	cmp	r0, #0
 8021886:	d0dd      	beq.n	8021844 <mbedtls_mpi_cmp_mpi+0x50>
 8021888:	f04f 30ff 	mov.w	r0, #4294967295
 802188c:	e7d2      	b.n	8021834 <mbedtls_mpi_cmp_mpi+0x40>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 802188e:	4240      	negs	r0, r0
 8021890:	e7d0      	b.n	8021834 <mbedtls_mpi_cmp_mpi+0x40>
    for( j = Y->n; j > 0; j-- )
 8021892:	6848      	ldr	r0, [r1, #4]
 8021894:	2800      	cmp	r0, #0
 8021896:	d1be      	bne.n	8021816 <mbedtls_mpi_cmp_mpi+0x22>
 8021898:	e7cc      	b.n	8021834 <mbedtls_mpi_cmp_mpi+0x40>
 802189a:	bf00      	nop

0802189c <mbedtls_mpi_cmp_int>:
    for( i = X->n; i > 0; i-- )
 802189c:	6843      	ldr	r3, [r0, #4]
    Y.s = ( z < 0 ) ? -1 : 1;
 802189e:	2900      	cmp	r1, #0
{
 80218a0:	b4f0      	push	{r4, r5, r6, r7}
    *p  = ( z < 0 ) ? -z : z;
 80218a2:	ea81 76e1 	eor.w	r6, r1, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
 80218a6:	bfb5      	itete	lt
 80218a8:	2201      	movlt	r2, #1
 80218aa:	f04f 32ff 	movge.w	r2, #4294967295
 80218ae:	f04f 3cff 	movlt.w	ip, #4294967295
 80218b2:	f04f 0c01 	movge.w	ip, #1
    *p  = ( z < 0 ) ? -z : z;
 80218b6:	eba6 76e1 	sub.w	r6, r6, r1, asr #31
    for( i = X->n; i > 0; i-- )
 80218ba:	b1e3      	cbz	r3, 80218f6 <mbedtls_mpi_cmp_int+0x5a>
        if( X->p[i - 1] != 0 )
 80218bc:	6885      	ldr	r5, [r0, #8]
 80218be:	eb05 0483 	add.w	r4, r5, r3, lsl #2
 80218c2:	e001      	b.n	80218c8 <mbedtls_mpi_cmp_int+0x2c>
    for( i = X->n; i > 0; i-- )
 80218c4:	3b01      	subs	r3, #1
 80218c6:	d016      	beq.n	80218f6 <mbedtls_mpi_cmp_int+0x5a>
        if( X->p[i - 1] != 0 )
 80218c8:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 80218cc:	2f00      	cmp	r7, #0
 80218ce:	d0f9      	beq.n	80218c4 <mbedtls_mpi_cmp_int+0x28>
    if( i > j ) return(  X->s );
 80218d0:	6802      	ldr	r2, [r0, #0]
        if( Y->p[j - 1] != 0 )
 80218d2:	b199      	cbz	r1, 80218fc <mbedtls_mpi_cmp_int+0x60>
    if( i > j ) return(  X->s );
 80218d4:	2b01      	cmp	r3, #1
 80218d6:	d811      	bhi.n	80218fc <mbedtls_mpi_cmp_int+0x60>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
 80218d8:	2a00      	cmp	r2, #0
 80218da:	dd12      	ble.n	8021902 <mbedtls_mpi_cmp_int+0x66>
 80218dc:	f1bc 3fff 	cmp.w	ip, #4294967295
 80218e0:	d017      	beq.n	8021912 <mbedtls_mpi_cmp_int+0x76>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 80218e2:	682b      	ldr	r3, [r5, #0]
 80218e4:	429e      	cmp	r6, r3
 80218e6:	d309      	bcc.n	80218fc <mbedtls_mpi_cmp_int+0x60>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 80218e8:	bf88      	it	hi
 80218ea:	4252      	neghi	r2, r2
 80218ec:	d806      	bhi.n	80218fc <mbedtls_mpi_cmp_int+0x60>
}
 80218ee:	bcf0      	pop	{r4, r5, r6, r7}
        return( 0 );
 80218f0:	2200      	movs	r2, #0
}
 80218f2:	4610      	mov	r0, r2
 80218f4:	4770      	bx	lr
        return( 0 );
 80218f6:	2900      	cmp	r1, #0
 80218f8:	bf08      	it	eq
 80218fa:	2200      	moveq	r2, #0
}
 80218fc:	bcf0      	pop	{r4, r5, r6, r7}
 80218fe:	4610      	mov	r0, r2
 8021900:	4770      	bx	lr
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 8021902:	f1bc 0f01 	cmp.w	ip, #1
 8021906:	d1ec      	bne.n	80218e2 <mbedtls_mpi_cmp_int+0x46>
 8021908:	2a00      	cmp	r2, #0
 802190a:	d0ea      	beq.n	80218e2 <mbedtls_mpi_cmp_int+0x46>
 802190c:	f04f 32ff 	mov.w	r2, #4294967295
 8021910:	e7f4      	b.n	80218fc <mbedtls_mpi_cmp_int+0x60>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
 8021912:	2201      	movs	r2, #1
 8021914:	e7f2      	b.n	80218fc <mbedtls_mpi_cmp_int+0x60>
 8021916:	bf00      	nop

08021918 <mbedtls_mpi_add_abs>:
    if( X == B )
 8021918:	4290      	cmp	r0, r2
{
 802191a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802191e:	4607      	mov	r7, r0
 8021920:	460c      	mov	r4, r1
    if( X == B )
 8021922:	d007      	beq.n	8021934 <mbedtls_mpi_add_abs+0x1c>
    if( X != A )
 8021924:	4288      	cmp	r0, r1
 8021926:	4615      	mov	r5, r2
 8021928:	d003      	beq.n	8021932 <mbedtls_mpi_add_abs+0x1a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 802192a:	f7ff fc0d 	bl	8021148 <mbedtls_mpi_copy>
 802192e:	2800      	cmp	r0, #0
 8021930:	d167      	bne.n	8021a02 <mbedtls_mpi_add_abs+0xea>
{
 8021932:	462c      	mov	r4, r5
    X->s = 1;
 8021934:	2301      	movs	r3, #1
    for( j = B->n; j > 0; j-- )
 8021936:	6865      	ldr	r5, [r4, #4]
    X->s = 1;
 8021938:	603b      	str	r3, [r7, #0]
    for( j = B->n; j > 0; j-- )
 802193a:	2d00      	cmp	r5, #0
 802193c:	d07f      	beq.n	8021a3e <mbedtls_mpi_add_abs+0x126>
        if( B->p[j - 1] != 0 )
 802193e:	68a0      	ldr	r0, [r4, #8]
 8021940:	eb00 0385 	add.w	r3, r0, r5, lsl #2
 8021944:	e001      	b.n	802194a <mbedtls_mpi_add_abs+0x32>
    for( j = B->n; j > 0; j-- )
 8021946:	3d01      	subs	r5, #1
 8021948:	d079      	beq.n	8021a3e <mbedtls_mpi_add_abs+0x126>
        if( B->p[j - 1] != 0 )
 802194a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 802194e:	2a00      	cmp	r2, #0
 8021950:	d0f9      	beq.n	8021946 <mbedtls_mpi_add_abs+0x2e>
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 8021952:	f242 7310 	movw	r3, #10000	; 0x2710
 8021956:	429d      	cmp	r5, r3
 8021958:	d851      	bhi.n	80219fe <mbedtls_mpi_add_abs+0xe6>
    if( X->n < nblimbs )
 802195a:	f8d7 8004 	ldr.w	r8, [r7, #4]
 802195e:	4545      	cmp	r5, r8
 8021960:	d970      	bls.n	8021a44 <mbedtls_mpi_add_abs+0x12c>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 8021962:	2104      	movs	r1, #4
 8021964:	4628      	mov	r0, r5
 8021966:	f00e fa07 	bl	802fd78 <calloc>
 802196a:	4606      	mov	r6, r0
 802196c:	2800      	cmp	r0, #0
 802196e:	d046      	beq.n	80219fe <mbedtls_mpi_add_abs+0xe6>
        if( X->p != NULL )
 8021970:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8021974:	f1b9 0f00 	cmp.w	r9, #0
 8021978:	d00c      	beq.n	8021994 <mbedtls_mpi_add_abs+0x7c>
            memcpy( p, X->p, X->n * ciL );
 802197a:	ea4f 0888 	mov.w	r8, r8, lsl #2
 802197e:	4642      	mov	r2, r8
 8021980:	4649      	mov	r1, r9
 8021982:	f00e fa49 	bl	802fe18 <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
 8021986:	4648      	mov	r0, r9
 8021988:	4641      	mov	r1, r8
 802198a:	f006 f8cf 	bl	8027b2c <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
 802198e:	68b8      	ldr	r0, [r7, #8]
 8021990:	f00e fa2c 	bl	802fdec <free>
        X->p = p;
 8021994:	60be      	str	r6, [r7, #8]
 8021996:	68a0      	ldr	r0, [r4, #8]
        X->n = nblimbs;
 8021998:	607d      	str	r5, [r7, #4]
    o = B->p; p = X->p; c = 0;
 802199a:	2400      	movs	r4, #0
 802199c:	f1a0 0c04 	sub.w	ip, r0, #4
{
 80219a0:	4631      	mov	r1, r6
    for( i = 0; i < j; i++, o++, p++ )
 80219a2:	4620      	mov	r0, r4
        *p +=  c; c  = ( *p <  c );
 80219a4:	680b      	ldr	r3, [r1, #0]
 80219a6:	f85c 2f04 	ldr.w	r2, [ip, #4]!
 80219aa:	191b      	adds	r3, r3, r4
 80219ac:	bf2c      	ite	cs
 80219ae:	2401      	movcs	r4, #1
 80219b0:	2400      	movcc	r4, #0
        *p += tmp; c += ( *p < tmp );
 80219b2:	189b      	adds	r3, r3, r2
 80219b4:	bf2c      	ite	cs
 80219b6:	2201      	movcs	r2, #1
 80219b8:	2200      	movcc	r2, #0
    for( i = 0; i < j; i++, o++, p++ )
 80219ba:	3001      	adds	r0, #1
 80219bc:	4285      	cmp	r5, r0
        *p += tmp; c += ( *p < tmp );
 80219be:	f841 3b04 	str.w	r3, [r1], #4
 80219c2:	4414      	add	r4, r2
    for( i = 0; i < j; i++, o++, p++ )
 80219c4:	d1ee      	bne.n	80219a4 <mbedtls_mpi_add_abs+0x8c>
 80219c6:	eb06 0685 	add.w	r6, r6, r5, lsl #2
    while( c != 0 )
 80219ca:	b3c4      	cbz	r4, 8021a3e <mbedtls_mpi_add_abs+0x126>
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 80219cc:	f242 7810 	movw	r8, #10000	; 0x2710
 80219d0:	e007      	b.n	80219e2 <mbedtls_mpi_add_abs+0xca>
        *p += c; c = ( *p < c ); i++; p++;
 80219d2:	6833      	ldr	r3, [r6, #0]
 80219d4:	464d      	mov	r5, r9
 80219d6:	191c      	adds	r4, r3, r4
 80219d8:	f846 4b04 	str.w	r4, [r6], #4
 80219dc:	f04f 0401 	mov.w	r4, #1
    while( c != 0 )
 80219e0:	d32d      	bcc.n	8021a3e <mbedtls_mpi_add_abs+0x126>
        if( i >= X->n )
 80219e2:	f8d7 a004 	ldr.w	sl, [r7, #4]
 80219e6:	f105 0901 	add.w	r9, r5, #1
 80219ea:	45aa      	cmp	sl, r5
 80219ec:	d8f1      	bhi.n	80219d2 <mbedtls_mpi_add_abs+0xba>
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 80219ee:	45c1      	cmp	r9, r8
 80219f0:	d805      	bhi.n	80219fe <mbedtls_mpi_add_abs+0xe6>
    if( X->n < nblimbs )
 80219f2:	45ca      	cmp	sl, r9
 80219f4:	d307      	bcc.n	8021a06 <mbedtls_mpi_add_abs+0xee>
 80219f6:	68be      	ldr	r6, [r7, #8]
            p = X->p + i;
 80219f8:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 80219fc:	e7e9      	b.n	80219d2 <mbedtls_mpi_add_abs+0xba>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 80219fe:	f06f 000f 	mvn.w	r0, #15
}
 8021a02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 8021a06:	2104      	movs	r1, #4
 8021a08:	4648      	mov	r0, r9
 8021a0a:	f00e f9b5 	bl	802fd78 <calloc>
 8021a0e:	4606      	mov	r6, r0
 8021a10:	2800      	cmp	r0, #0
 8021a12:	d0f4      	beq.n	80219fe <mbedtls_mpi_add_abs+0xe6>
        if( X->p != NULL )
 8021a14:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8021a18:	f1bb 0f00 	cmp.w	fp, #0
 8021a1c:	d00c      	beq.n	8021a38 <mbedtls_mpi_add_abs+0x120>
            memcpy( p, X->p, X->n * ciL );
 8021a1e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8021a22:	4652      	mov	r2, sl
 8021a24:	4659      	mov	r1, fp
 8021a26:	f00e f9f7 	bl	802fe18 <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
 8021a2a:	4658      	mov	r0, fp
 8021a2c:	4651      	mov	r1, sl
 8021a2e:	f006 f87d 	bl	8027b2c <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
 8021a32:	68b8      	ldr	r0, [r7, #8]
 8021a34:	f00e f9da 	bl	802fdec <free>
        X->p = p;
 8021a38:	e9c7 9601 	strd	r9, r6, [r7, #4]
 8021a3c:	e7dc      	b.n	80219f8 <mbedtls_mpi_add_abs+0xe0>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8021a3e:	2000      	movs	r0, #0
}
 8021a40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a44:	68be      	ldr	r6, [r7, #8]
 8021a46:	e7a8      	b.n	802199a <mbedtls_mpi_add_abs+0x82>

08021a48 <mbedtls_mpi_sub_abs>:
{
 8021a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021a4c:	4614      	mov	r4, r2
    X->n = 0;
 8021a4e:	2300      	movs	r3, #0
    X->s = 1;
 8021a50:	2201      	movs	r2, #1
{
 8021a52:	b084      	sub	sp, #16
    if( X == B )
 8021a54:	42a0      	cmp	r0, r4
{
 8021a56:	4680      	mov	r8, r0
 8021a58:	460e      	mov	r6, r1
    X->n = 0;
 8021a5a:	e9cd 2301 	strd	r2, r3, [sp, #4]
    X->p = NULL;
 8021a5e:	9303      	str	r3, [sp, #12]
    if( X == B )
 8021a60:	d069      	beq.n	8021b36 <mbedtls_mpi_sub_abs+0xee>
    if( X != A )
 8021a62:	45b0      	cmp	r8, r6
 8021a64:	d006      	beq.n	8021a74 <mbedtls_mpi_sub_abs+0x2c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 8021a66:	4631      	mov	r1, r6
 8021a68:	4640      	mov	r0, r8
 8021a6a:	f7ff fb6d 	bl	8021148 <mbedtls_mpi_copy>
 8021a6e:	4605      	mov	r5, r0
 8021a70:	2800      	cmp	r0, #0
 8021a72:	d144      	bne.n	8021afe <mbedtls_mpi_sub_abs+0xb6>
    X->s = 1;
 8021a74:	2201      	movs	r2, #1
    for( n = B->n; n > 0; n-- )
 8021a76:	6863      	ldr	r3, [r4, #4]
    X->s = 1;
 8021a78:	f8c8 2000 	str.w	r2, [r8]
    for( n = B->n; n > 0; n-- )
 8021a7c:	2b00      	cmp	r3, #0
 8021a7e:	d03d      	beq.n	8021afc <mbedtls_mpi_sub_abs+0xb4>
        if( B->p[n - 1] != 0 )
 8021a80:	68a0      	ldr	r0, [r4, #8]
 8021a82:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8021a86:	e001      	b.n	8021a8c <mbedtls_mpi_sub_abs+0x44>
    for( n = B->n; n > 0; n-- )
 8021a88:	3b01      	subs	r3, #1
 8021a8a:	d037      	beq.n	8021afc <mbedtls_mpi_sub_abs+0xb4>
        if( B->p[n - 1] != 0 )
 8021a8c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8021a90:	2900      	cmp	r1, #0
 8021a92:	d0f9      	beq.n	8021a88 <mbedtls_mpi_sub_abs+0x40>
    for( i = c = 0; i < n; i++, s++, d++ )
 8021a94:	2400      	movs	r4, #0
 8021a96:	4625      	mov	r5, r4
    carry = mpi_sub_hlp( n, X->p, B->p );
 8021a98:	f8d8 c008 	ldr.w	ip, [r8, #8]
    for( i = c = 0; i < n; i++, s++, d++ )
 8021a9c:	f1ac 0104 	sub.w	r1, ip, #4
        z = ( *d <  c );     *d -=  c;
 8021aa0:	f851 6f04 	ldr.w	r6, [r1, #4]!
    for( i = c = 0; i < n; i++, s++, d++ )
 8021aa4:	3401      	adds	r4, #1
        z = ( *d <  c );     *d -=  c;
 8021aa6:	1b72      	subs	r2, r6, r5
 8021aa8:	600a      	str	r2, [r1, #0]
        c = ( *d < *s ) + z; *d -= *s;
 8021aaa:	f850 7b04 	ldr.w	r7, [r0], #4
 8021aae:	42ba      	cmp	r2, r7
 8021ab0:	bf2c      	ite	cs
 8021ab2:	f04f 0e00 	movcs.w	lr, #0
 8021ab6:	f04f 0e01 	movcc.w	lr, #1
 8021aba:	1bd2      	subs	r2, r2, r7
 8021abc:	42ae      	cmp	r6, r5
 8021abe:	bf2c      	ite	cs
 8021ac0:	4675      	movcs	r5, lr
 8021ac2:	f10e 0501 	addcc.w	r5, lr, #1
    for( i = c = 0; i < n; i++, s++, d++ )
 8021ac6:	429c      	cmp	r4, r3
        c = ( *d < *s ) + z; *d -= *s;
 8021ac8:	600a      	str	r2, [r1, #0]
    for( i = c = 0; i < n; i++, s++, d++ )
 8021aca:	d1e9      	bne.n	8021aa0 <mbedtls_mpi_sub_abs+0x58>
    if( carry != 0 )
 8021acc:	b1b5      	cbz	r5, 8021afc <mbedtls_mpi_sub_abs+0xb4>
        for( ; n < X->n && X->p[n] == 0; n++ )
 8021ace:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8021ad2:	4298      	cmp	r0, r3
 8021ad4:	d920      	bls.n	8021b18 <mbedtls_mpi_sub_abs+0xd0>
            --X->p[n];
 8021ad6:	f04f 35ff 	mov.w	r5, #4294967295
 8021ada:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8021ade:	e003      	b.n	8021ae8 <mbedtls_mpi_sub_abs+0xa0>
        for( ; n < X->n && X->p[n] == 0; n++ )
 8021ae0:	4283      	cmp	r3, r0
            --X->p[n];
 8021ae2:	f842 5c04 	str.w	r5, [r2, #-4]
        for( ; n < X->n && X->p[n] == 0; n++ )
 8021ae6:	d020      	beq.n	8021b2a <mbedtls_mpi_sub_abs+0xe2>
 8021ae8:	4614      	mov	r4, r2
 8021aea:	f852 1b04 	ldr.w	r1, [r2], #4
 8021aee:	3301      	adds	r3, #1
 8021af0:	2900      	cmp	r1, #0
 8021af2:	d0f5      	beq.n	8021ae0 <mbedtls_mpi_sub_abs+0x98>
        --X->p[n];
 8021af4:	3901      	subs	r1, #1
    ret = 0;
 8021af6:	2500      	movs	r5, #0
        --X->p[n];
 8021af8:	6021      	str	r1, [r4, #0]
 8021afa:	e000      	b.n	8021afe <mbedtls_mpi_sub_abs+0xb6>
    ret = 0;
 8021afc:	2500      	movs	r5, #0
    if( X->p != NULL )
 8021afe:	9803      	ldr	r0, [sp, #12]
 8021b00:	b130      	cbz	r0, 8021b10 <mbedtls_mpi_sub_abs+0xc8>
    mbedtls_platform_zeroize( v, ciL * n );
 8021b02:	9902      	ldr	r1, [sp, #8]
 8021b04:	0089      	lsls	r1, r1, #2
 8021b06:	f006 f811 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 8021b0a:	9803      	ldr	r0, [sp, #12]
 8021b0c:	f00e f96e 	bl	802fdec <free>
}
 8021b10:	4628      	mov	r0, r5
 8021b12:	b004      	add	sp, #16
 8021b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( n == X->n )
 8021b18:	d007      	beq.n	8021b2a <mbedtls_mpi_sub_abs+0xe2>
 8021b1a:	f85c 1024 	ldr.w	r1, [ip, r4, lsl #2]
 8021b1e:	eb0c 0484 	add.w	r4, ip, r4, lsl #2
        --X->p[n];
 8021b22:	3901      	subs	r1, #1
    ret = 0;
 8021b24:	2500      	movs	r5, #0
        --X->p[n];
 8021b26:	6021      	str	r1, [r4, #0]
 8021b28:	e7e9      	b.n	8021afe <mbedtls_mpi_sub_abs+0xb6>
            return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 8021b2a:	f06f 0509 	mvn.w	r5, #9
}
 8021b2e:	4628      	mov	r0, r5
 8021b30:	b004      	add	sp, #16
 8021b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 8021b36:	4641      	mov	r1, r8
 8021b38:	a801      	add	r0, sp, #4
 8021b3a:	f7ff fb05 	bl	8021148 <mbedtls_mpi_copy>
 8021b3e:	4605      	mov	r5, r0
 8021b40:	2800      	cmp	r0, #0
 8021b42:	d1dc      	bne.n	8021afe <mbedtls_mpi_sub_abs+0xb6>
        B = &TB;
 8021b44:	ac01      	add	r4, sp, #4
 8021b46:	e78c      	b.n	8021a62 <mbedtls_mpi_sub_abs+0x1a>

08021b48 <mbedtls_mpi_add_mpi>:
{
 8021b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
 8021b4a:	680f      	ldr	r7, [r1, #0]
    if( A->s * B->s < 0 )
 8021b4c:	6813      	ldr	r3, [r2, #0]
{
 8021b4e:	4606      	mov	r6, r0
    if( A->s * B->s < 0 )
 8021b50:	fb03 f307 	mul.w	r3, r3, r7
 8021b54:	2b00      	cmp	r3, #0
 8021b56:	da19      	bge.n	8021b8c <mbedtls_mpi_add_mpi+0x44>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 8021b58:	460d      	mov	r5, r1
 8021b5a:	4611      	mov	r1, r2
 8021b5c:	4628      	mov	r0, r5
 8021b5e:	4614      	mov	r4, r2
 8021b60:	f7ff fe04 	bl	802176c <mbedtls_mpi_cmp_abs>
 8021b64:	2800      	cmp	r0, #0
 8021b66:	db07      	blt.n	8021b78 <mbedtls_mpi_add_mpi+0x30>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 8021b68:	4622      	mov	r2, r4
 8021b6a:	4629      	mov	r1, r5
 8021b6c:	4630      	mov	r0, r6
 8021b6e:	f7ff ff6b 	bl	8021a48 <mbedtls_mpi_sub_abs>
 8021b72:	b900      	cbnz	r0, 8021b76 <mbedtls_mpi_add_mpi+0x2e>
        X->s = s;
 8021b74:	6037      	str	r7, [r6, #0]
}
 8021b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 8021b78:	462a      	mov	r2, r5
 8021b7a:	4621      	mov	r1, r4
 8021b7c:	4630      	mov	r0, r6
 8021b7e:	f7ff ff63 	bl	8021a48 <mbedtls_mpi_sub_abs>
 8021b82:	2800      	cmp	r0, #0
 8021b84:	d1f7      	bne.n	8021b76 <mbedtls_mpi_add_mpi+0x2e>
            X->s = -s;
 8021b86:	427f      	negs	r7, r7
 8021b88:	6037      	str	r7, [r6, #0]
}
 8021b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8021b8c:	f7ff fec4 	bl	8021918 <mbedtls_mpi_add_abs>
 8021b90:	2800      	cmp	r0, #0
 8021b92:	d0ef      	beq.n	8021b74 <mbedtls_mpi_add_mpi+0x2c>
}
 8021b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021b96:	bf00      	nop

08021b98 <mbedtls_mpi_sub_mpi>:
{
 8021b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
 8021b9a:	680f      	ldr	r7, [r1, #0]
    if( A->s * B->s > 0 )
 8021b9c:	6813      	ldr	r3, [r2, #0]
{
 8021b9e:	4606      	mov	r6, r0
    if( A->s * B->s > 0 )
 8021ba0:	fb03 f307 	mul.w	r3, r3, r7
 8021ba4:	2b00      	cmp	r3, #0
 8021ba6:	dd19      	ble.n	8021bdc <mbedtls_mpi_sub_mpi+0x44>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 8021ba8:	460d      	mov	r5, r1
 8021baa:	4611      	mov	r1, r2
 8021bac:	4628      	mov	r0, r5
 8021bae:	4614      	mov	r4, r2
 8021bb0:	f7ff fddc 	bl	802176c <mbedtls_mpi_cmp_abs>
 8021bb4:	2800      	cmp	r0, #0
 8021bb6:	db07      	blt.n	8021bc8 <mbedtls_mpi_sub_mpi+0x30>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 8021bb8:	4622      	mov	r2, r4
 8021bba:	4629      	mov	r1, r5
 8021bbc:	4630      	mov	r0, r6
 8021bbe:	f7ff ff43 	bl	8021a48 <mbedtls_mpi_sub_abs>
 8021bc2:	b900      	cbnz	r0, 8021bc6 <mbedtls_mpi_sub_mpi+0x2e>
        X->s = s;
 8021bc4:	6037      	str	r7, [r6, #0]
}
 8021bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 8021bc8:	462a      	mov	r2, r5
 8021bca:	4621      	mov	r1, r4
 8021bcc:	4630      	mov	r0, r6
 8021bce:	f7ff ff3b 	bl	8021a48 <mbedtls_mpi_sub_abs>
 8021bd2:	2800      	cmp	r0, #0
 8021bd4:	d1f7      	bne.n	8021bc6 <mbedtls_mpi_sub_mpi+0x2e>
            X->s = -s;
 8021bd6:	427f      	negs	r7, r7
 8021bd8:	6037      	str	r7, [r6, #0]
}
 8021bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8021bdc:	f7ff fe9c 	bl	8021918 <mbedtls_mpi_add_abs>
 8021be0:	2800      	cmp	r0, #0
 8021be2:	d0ef      	beq.n	8021bc4 <mbedtls_mpi_sub_mpi+0x2c>
}
 8021be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021be6:	bf00      	nop

08021be8 <mbedtls_mpi_add_int>:
    _B.s = ( b < 0 ) ? -1 : 1;
 8021be8:	2a00      	cmp	r2, #0
{
 8021bea:	b5f0      	push	{r4, r5, r6, r7, lr}
    _B.s = ( b < 0 ) ? -1 : 1;
 8021bec:	bfb4      	ite	lt
 8021bee:	f04f 37ff 	movlt.w	r7, #4294967295
 8021bf2:	2701      	movge	r7, #1
    _B.n = 1;
 8021bf4:	f04f 0e01 	mov.w	lr, #1
    s = A->s;
 8021bf8:	680d      	ldr	r5, [r1, #0]
    p[0] = ( b < 0 ) ? -b : b;
 8021bfa:	ea82 76e2 	eor.w	r6, r2, r2, asr #31
    if( A->s * B->s < 0 )
 8021bfe:	fb05 fc07 	mul.w	ip, r5, r7
{
 8021c02:	b085      	sub	sp, #20
    p[0] = ( b < 0 ) ? -b : b;
 8021c04:	eba6 76e2 	sub.w	r6, r6, r2, asr #31
    if( A->s * B->s < 0 )
 8021c08:	f1bc 0f00 	cmp.w	ip, #0
{
 8021c0c:	4604      	mov	r4, r0
    _B.s = ( b < 0 ) ? -1 : 1;
 8021c0e:	e9cd 6700 	strd	r6, r7, [sp]
    _B.n = 1;
 8021c12:	f8cd e008 	str.w	lr, [sp, #8]
    _B.p = p;
 8021c16:	f8cd d00c 	str.w	sp, [sp, #12]
    if( A->s * B->s < 0 )
 8021c1a:	da17      	bge.n	8021c4c <mbedtls_mpi_add_int+0x64>
    for( i = X->n; i > 0; i-- )
 8021c1c:	460b      	mov	r3, r1
 8021c1e:	6849      	ldr	r1, [r1, #4]
 8021c20:	b1d9      	cbz	r1, 8021c5a <mbedtls_mpi_add_int+0x72>
        if( X->p[i - 1] != 0 )
 8021c22:	689f      	ldr	r7, [r3, #8]
 8021c24:	eb07 0081 	add.w	r0, r7, r1, lsl #2
 8021c28:	e001      	b.n	8021c2e <mbedtls_mpi_add_int+0x46>
    for( i = X->n; i > 0; i-- )
 8021c2a:	3901      	subs	r1, #1
 8021c2c:	d015      	beq.n	8021c5a <mbedtls_mpi_add_int+0x72>
        if( X->p[i - 1] != 0 )
 8021c2e:	f850 cd04 	ldr.w	ip, [r0, #-4]!
 8021c32:	f1bc 0f00 	cmp.w	ip, #0
 8021c36:	d0f8      	beq.n	8021c2a <mbedtls_mpi_add_int+0x42>
        if( Y->p[j - 1] != 0 )
 8021c38:	b9d2      	cbnz	r2, 8021c70 <mbedtls_mpi_add_int+0x88>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 8021c3a:	4619      	mov	r1, r3
 8021c3c:	4620      	mov	r0, r4
 8021c3e:	aa01      	add	r2, sp, #4
 8021c40:	f7ff ff02 	bl	8021a48 <mbedtls_mpi_sub_abs>
 8021c44:	b900      	cbnz	r0, 8021c48 <mbedtls_mpi_add_int+0x60>
            X->s = -s;
 8021c46:	6025      	str	r5, [r4, #0]
}
 8021c48:	b005      	add	sp, #20
 8021c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8021c4c:	aa01      	add	r2, sp, #4
 8021c4e:	f7ff fe63 	bl	8021918 <mbedtls_mpi_add_abs>
 8021c52:	2800      	cmp	r0, #0
 8021c54:	d0f7      	beq.n	8021c46 <mbedtls_mpi_add_int+0x5e>
}
 8021c56:	b005      	add	sp, #20
 8021c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( Y->p[j - 1] != 0 )
 8021c5a:	2a00      	cmp	r2, #0
 8021c5c:	d0ed      	beq.n	8021c3a <mbedtls_mpi_add_int+0x52>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 8021c5e:	461a      	mov	r2, r3
 8021c60:	4620      	mov	r0, r4
 8021c62:	a901      	add	r1, sp, #4
 8021c64:	f7ff fef0 	bl	8021a48 <mbedtls_mpi_sub_abs>
 8021c68:	2800      	cmp	r0, #0
 8021c6a:	d1ed      	bne.n	8021c48 <mbedtls_mpi_add_int+0x60>
            X->s = -s;
 8021c6c:	426d      	negs	r5, r5
 8021c6e:	e7ea      	b.n	8021c46 <mbedtls_mpi_add_int+0x5e>
    if( i > j ) return(  1 );
 8021c70:	2901      	cmp	r1, #1
 8021c72:	d8e2      	bhi.n	8021c3a <mbedtls_mpi_add_int+0x52>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 8021c74:	683a      	ldr	r2, [r7, #0]
 8021c76:	4296      	cmp	r6, r2
 8021c78:	d3df      	bcc.n	8021c3a <mbedtls_mpi_add_int+0x52>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 8021c7a:	d9de      	bls.n	8021c3a <mbedtls_mpi_add_int+0x52>
 8021c7c:	e7ef      	b.n	8021c5e <mbedtls_mpi_add_int+0x76>
 8021c7e:	bf00      	nop

08021c80 <mbedtls_mpi_sub_int>:
    _B.s = ( b < 0 ) ? -1 : 1;
 8021c80:	2a00      	cmp	r2, #0
{
 8021c82:	b5f0      	push	{r4, r5, r6, r7, lr}
    _B.s = ( b < 0 ) ? -1 : 1;
 8021c84:	bfb4      	ite	lt
 8021c86:	f04f 37ff 	movlt.w	r7, #4294967295
 8021c8a:	2701      	movge	r7, #1
    _B.n = 1;
 8021c8c:	f04f 0e01 	mov.w	lr, #1
    s = A->s;
 8021c90:	680d      	ldr	r5, [r1, #0]
    p[0] = ( b < 0 ) ? -b : b;
 8021c92:	ea82 76e2 	eor.w	r6, r2, r2, asr #31
    if( A->s * B->s > 0 )
 8021c96:	fb05 fc07 	mul.w	ip, r5, r7
{
 8021c9a:	b085      	sub	sp, #20
    p[0] = ( b < 0 ) ? -b : b;
 8021c9c:	eba6 76e2 	sub.w	r6, r6, r2, asr #31
    if( A->s * B->s > 0 )
 8021ca0:	f1bc 0f00 	cmp.w	ip, #0
{
 8021ca4:	4604      	mov	r4, r0
    _B.s = ( b < 0 ) ? -1 : 1;
 8021ca6:	e9cd 6700 	strd	r6, r7, [sp]
    _B.n = 1;
 8021caa:	f8cd e008 	str.w	lr, [sp, #8]
    _B.p = p;
 8021cae:	f8cd d00c 	str.w	sp, [sp, #12]
    if( A->s * B->s > 0 )
 8021cb2:	dd22      	ble.n	8021cfa <mbedtls_mpi_sub_int+0x7a>
    for( i = X->n; i > 0; i-- )
 8021cb4:	460b      	mov	r3, r1
 8021cb6:	6849      	ldr	r1, [r1, #4]
 8021cb8:	b1a1      	cbz	r1, 8021ce4 <mbedtls_mpi_sub_int+0x64>
        if( X->p[i - 1] != 0 )
 8021cba:	689f      	ldr	r7, [r3, #8]
 8021cbc:	eb07 0081 	add.w	r0, r7, r1, lsl #2
 8021cc0:	e001      	b.n	8021cc6 <mbedtls_mpi_sub_int+0x46>
    for( i = X->n; i > 0; i-- )
 8021cc2:	3901      	subs	r1, #1
 8021cc4:	d00e      	beq.n	8021ce4 <mbedtls_mpi_sub_int+0x64>
        if( X->p[i - 1] != 0 )
 8021cc6:	f850 cd04 	ldr.w	ip, [r0, #-4]!
 8021cca:	f1bc 0f00 	cmp.w	ip, #0
 8021cce:	d0f8      	beq.n	8021cc2 <mbedtls_mpi_sub_int+0x42>
        if( Y->p[j - 1] != 0 )
 8021cd0:	b9ca      	cbnz	r2, 8021d06 <mbedtls_mpi_sub_int+0x86>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 8021cd2:	4619      	mov	r1, r3
 8021cd4:	4620      	mov	r0, r4
 8021cd6:	aa01      	add	r2, sp, #4
 8021cd8:	f7ff feb6 	bl	8021a48 <mbedtls_mpi_sub_abs>
 8021cdc:	b900      	cbnz	r0, 8021ce0 <mbedtls_mpi_sub_int+0x60>
            X->s = -s;
 8021cde:	6025      	str	r5, [r4, #0]
}
 8021ce0:	b005      	add	sp, #20
 8021ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( Y->p[j - 1] != 0 )
 8021ce4:	2a00      	cmp	r2, #0
 8021ce6:	d0f4      	beq.n	8021cd2 <mbedtls_mpi_sub_int+0x52>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 8021ce8:	461a      	mov	r2, r3
 8021cea:	4620      	mov	r0, r4
 8021cec:	a901      	add	r1, sp, #4
 8021cee:	f7ff feab 	bl	8021a48 <mbedtls_mpi_sub_abs>
 8021cf2:	2800      	cmp	r0, #0
 8021cf4:	d1f4      	bne.n	8021ce0 <mbedtls_mpi_sub_int+0x60>
            X->s = -s;
 8021cf6:	426d      	negs	r5, r5
 8021cf8:	e7f1      	b.n	8021cde <mbedtls_mpi_sub_int+0x5e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8021cfa:	aa01      	add	r2, sp, #4
 8021cfc:	f7ff fe0c 	bl	8021918 <mbedtls_mpi_add_abs>
 8021d00:	2800      	cmp	r0, #0
 8021d02:	d0ec      	beq.n	8021cde <mbedtls_mpi_sub_int+0x5e>
 8021d04:	e7ec      	b.n	8021ce0 <mbedtls_mpi_sub_int+0x60>
    if( i > j ) return(  1 );
 8021d06:	2901      	cmp	r1, #1
 8021d08:	d8e3      	bhi.n	8021cd2 <mbedtls_mpi_sub_int+0x52>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 8021d0a:	683a      	ldr	r2, [r7, #0]
 8021d0c:	4296      	cmp	r6, r2
 8021d0e:	d3e0      	bcc.n	8021cd2 <mbedtls_mpi_sub_int+0x52>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 8021d10:	d9df      	bls.n	8021cd2 <mbedtls_mpi_sub_int+0x52>
 8021d12:	e7e9      	b.n	8021ce8 <mbedtls_mpi_sub_int+0x68>

08021d14 <mbedtls_mpi_mul_mpi>:
{
 8021d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d18:	4606      	mov	r6, r0
    X->n = 0;
 8021d1a:	2300      	movs	r3, #0
    X->s = 1;
 8021d1c:	2001      	movs	r0, #1
{
 8021d1e:	b089      	sub	sp, #36	; 0x24
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 8021d20:	428e      	cmp	r6, r1
{
 8021d22:	4690      	mov	r8, r2
    X->p = NULL;
 8021d24:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8021d28:	e9cd 3306 	strd	r3, r3, [sp, #24]
    X->s = 1;
 8021d2c:	9002      	str	r0, [sp, #8]
 8021d2e:	9005      	str	r0, [sp, #20]
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 8021d30:	f000 80b0 	beq.w	8021e94 <mbedtls_mpi_mul_mpi+0x180>
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 8021d34:	4546      	cmp	r6, r8
 8021d36:	460f      	mov	r7, r1
 8021d38:	f000 80b6 	beq.w	8021ea8 <mbedtls_mpi_mul_mpi+0x194>
    for( i = A->n; i > 0; i-- )
 8021d3c:	687d      	ldr	r5, [r7, #4]
 8021d3e:	2d00      	cmp	r5, #0
 8021d40:	f000 809c 	beq.w	8021e7c <mbedtls_mpi_mul_mpi+0x168>
 8021d44:	68bb      	ldr	r3, [r7, #8]
 8021d46:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8021d4a:	e002      	b.n	8021d52 <mbedtls_mpi_mul_mpi+0x3e>
 8021d4c:	3d01      	subs	r5, #1
 8021d4e:	f000 8095 	beq.w	8021e7c <mbedtls_mpi_mul_mpi+0x168>
        if( A->p[i - 1] != 0 )
 8021d52:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8021d56:	2a00      	cmp	r2, #0
 8021d58:	d0f8      	beq.n	8021d4c <mbedtls_mpi_mul_mpi+0x38>
    for( j = B->n; j > 0; j-- )
 8021d5a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8021d5e:	2c00      	cmp	r4, #0
 8021d60:	f000 8096 	beq.w	8021e90 <mbedtls_mpi_mul_mpi+0x17c>
 8021d64:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021d68:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8021d6c:	e002      	b.n	8021d74 <mbedtls_mpi_mul_mpi+0x60>
 8021d6e:	3c01      	subs	r4, #1
 8021d70:	f000 808e 	beq.w	8021e90 <mbedtls_mpi_mul_mpi+0x17c>
        if( B->p[j - 1] != 0 )
 8021d74:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8021d78:	2a00      	cmp	r2, #0
 8021d7a:	d0f8      	beq.n	8021d6e <mbedtls_mpi_mul_mpi+0x5a>
 8021d7c:	eb04 0b05 	add.w	fp, r4, r5
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 8021d80:	f242 7310 	movw	r3, #10000	; 0x2710
 8021d84:	459b      	cmp	fp, r3
 8021d86:	f200 8099 	bhi.w	8021ebc <mbedtls_mpi_mul_mpi+0x1a8>
    if( X->n < nblimbs )
 8021d8a:	f8d6 9004 	ldr.w	r9, [r6, #4]
 8021d8e:	45d9      	cmp	r9, fp
 8021d90:	d341      	bcc.n	8021e16 <mbedtls_mpi_mul_mpi+0x102>
 8021d92:	f1b9 0f00 	cmp.w	r9, #0
 8021d96:	d05c      	beq.n	8021e52 <mbedtls_mpi_mul_mpi+0x13e>
 8021d98:	68b3      	ldr	r3, [r6, #8]
 8021d9a:	ea4f 0289 	mov.w	r2, r9, lsl #2
    memset( X->p, 0, X->n * ciL );
 8021d9e:	4618      	mov	r0, r3
 8021da0:	2100      	movs	r1, #0
 8021da2:	f00e f860 	bl	802fe66 <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
 8021da6:	2100      	movs	r1, #0
    X->s    = ( z < 0 ) ? -1 : 1;
 8021da8:	2301      	movs	r3, #1
    X->p[0] = ( z < 0 ) ? -z : z;
 8021daa:	68b2      	ldr	r2, [r6, #8]
 8021dac:	6011      	str	r1, [r2, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 8021dae:	6033      	str	r3, [r6, #0]
    for( ; j > 0; j-- )
 8021db0:	b17c      	cbz	r4, 8021dd2 <mbedtls_mpi_mul_mpi+0xbe>
 8021db2:	3c01      	subs	r4, #1
 8021db4:	e000      	b.n	8021db8 <mbedtls_mpi_mul_mpi+0xa4>
 8021db6:	68b2      	ldr	r2, [r6, #8]
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );
 8021db8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021dbc:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8021dc0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8021dc4:	4628      	mov	r0, r5
 8021dc6:	68b9      	ldr	r1, [r7, #8]
 8021dc8:	3c01      	subs	r4, #1
 8021dca:	f7fe ff6b 	bl	8020ca4 <mpi_mul_hlp>
    for( ; j > 0; j-- )
 8021dce:	1c63      	adds	r3, r4, #1
 8021dd0:	d1f1      	bne.n	8021db6 <mbedtls_mpi_mul_mpi+0xa2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 8021dd2:	2400      	movs	r4, #0
    X->s = A->s * B->s;
 8021dd4:	683a      	ldr	r2, [r7, #0]
 8021dd6:	f8d8 3000 	ldr.w	r3, [r8]
 8021dda:	fb03 f302 	mul.w	r3, r3, r2
 8021dde:	6033      	str	r3, [r6, #0]
    if( X->p != NULL )
 8021de0:	9807      	ldr	r0, [sp, #28]
 8021de2:	b130      	cbz	r0, 8021df2 <mbedtls_mpi_mul_mpi+0xde>
    mbedtls_platform_zeroize( v, ciL * n );
 8021de4:	9906      	ldr	r1, [sp, #24]
 8021de6:	0089      	lsls	r1, r1, #2
 8021de8:	f005 fea0 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 8021dec:	9807      	ldr	r0, [sp, #28]
 8021dee:	f00d fffd 	bl	802fdec <free>
    X->n = 0;
 8021df2:	2300      	movs	r3, #0
    X->s = 1;
 8021df4:	2201      	movs	r2, #1
    if( X->p != NULL )
 8021df6:	9804      	ldr	r0, [sp, #16]
    X->n = 0;
 8021df8:	e9cd 2305 	strd	r2, r3, [sp, #20]
    X->p = NULL;
 8021dfc:	9307      	str	r3, [sp, #28]
    if( X->p != NULL )
 8021dfe:	b130      	cbz	r0, 8021e0e <mbedtls_mpi_mul_mpi+0xfa>
    mbedtls_platform_zeroize( v, ciL * n );
 8021e00:	9903      	ldr	r1, [sp, #12]
 8021e02:	0089      	lsls	r1, r1, #2
 8021e04:	f005 fe92 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 8021e08:	9804      	ldr	r0, [sp, #16]
 8021e0a:	f00d ffef 	bl	802fdec <free>
}
 8021e0e:	4620      	mov	r0, r4
 8021e10:	b009      	add	sp, #36	; 0x24
 8021e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 8021e16:	2104      	movs	r1, #4
 8021e18:	4658      	mov	r0, fp
 8021e1a:	f00d ffad 	bl	802fd78 <calloc>
 8021e1e:	4682      	mov	sl, r0
 8021e20:	2800      	cmp	r0, #0
 8021e22:	d04b      	beq.n	8021ebc <mbedtls_mpi_mul_mpi+0x1a8>
        if( X->p != NULL )
 8021e24:	68b3      	ldr	r3, [r6, #8]
 8021e26:	b173      	cbz	r3, 8021e46 <mbedtls_mpi_mul_mpi+0x132>
            memcpy( p, X->p, X->n * ciL );
 8021e28:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8021e2c:	4619      	mov	r1, r3
 8021e2e:	464a      	mov	r2, r9
 8021e30:	9301      	str	r3, [sp, #4]
 8021e32:	f00d fff1 	bl	802fe18 <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
 8021e36:	9b01      	ldr	r3, [sp, #4]
 8021e38:	4649      	mov	r1, r9
 8021e3a:	4618      	mov	r0, r3
 8021e3c:	f005 fe76 	bl	8027b2c <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
 8021e40:	68b0      	ldr	r0, [r6, #8]
 8021e42:	f00d ffd3 	bl	802fdec <free>
        X->p = p;
 8021e46:	46d9      	mov	r9, fp
 8021e48:	e9c6 ba01 	strd	fp, sl, [r6, #4]
    if( X->n < nblimbs )
 8021e4c:	f1b9 0f00 	cmp.w	r9, #0
 8021e50:	d1a2      	bne.n	8021d98 <mbedtls_mpi_mul_mpi+0x84>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 8021e52:	2104      	movs	r1, #4
 8021e54:	2001      	movs	r0, #1
 8021e56:	f00d ff8f 	bl	802fd78 <calloc>
 8021e5a:	4603      	mov	r3, r0
 8021e5c:	b370      	cbz	r0, 8021ebc <mbedtls_mpi_mul_mpi+0x1a8>
        if( X->p != NULL )
 8021e5e:	68b0      	ldr	r0, [r6, #8]
 8021e60:	b138      	cbz	r0, 8021e72 <mbedtls_mpi_mul_mpi+0x15e>
    mbedtls_platform_zeroize( v, ciL * n );
 8021e62:	4649      	mov	r1, r9
 8021e64:	9301      	str	r3, [sp, #4]
 8021e66:	f005 fe61 	bl	8027b2c <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
 8021e6a:	68b0      	ldr	r0, [r6, #8]
 8021e6c:	f00d ffbe 	bl	802fdec <free>
 8021e70:	9b01      	ldr	r3, [sp, #4]
        X->n = nblimbs;
 8021e72:	2101      	movs	r1, #1
        X->p = p;
 8021e74:	2204      	movs	r2, #4
        X->n = nblimbs;
 8021e76:	e9c6 1301 	strd	r1, r3, [r6, #4]
        X->p = p;
 8021e7a:	e790      	b.n	8021d9e <mbedtls_mpi_mul_mpi+0x8a>
    for( j = B->n; j > 0; j-- )
 8021e7c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8021e80:	2500      	movs	r5, #0
 8021e82:	2c00      	cmp	r4, #0
 8021e84:	f47f af6e 	bne.w	8021d64 <mbedtls_mpi_mul_mpi+0x50>
    if( X->n < nblimbs )
 8021e88:	4625      	mov	r5, r4
 8021e8a:	f8d6 9004 	ldr.w	r9, [r6, #4]
 8021e8e:	e780      	b.n	8021d92 <mbedtls_mpi_mul_mpi+0x7e>
    for( j = B->n; j > 0; j-- )
 8021e90:	46ab      	mov	fp, r5
 8021e92:	e775      	b.n	8021d80 <mbedtls_mpi_mul_mpi+0x6c>
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 8021e94:	a802      	add	r0, sp, #8
 8021e96:	f7ff f957 	bl	8021148 <mbedtls_mpi_copy>
 8021e9a:	4604      	mov	r4, r0
 8021e9c:	2800      	cmp	r0, #0
 8021e9e:	d19f      	bne.n	8021de0 <mbedtls_mpi_mul_mpi+0xcc>
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 8021ea0:	4546      	cmp	r6, r8
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 8021ea2:	af02      	add	r7, sp, #8
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 8021ea4:	f47f af4a 	bne.w	8021d3c <mbedtls_mpi_mul_mpi+0x28>
 8021ea8:	4631      	mov	r1, r6
 8021eaa:	a805      	add	r0, sp, #20
 8021eac:	f7ff f94c 	bl	8021148 <mbedtls_mpi_copy>
 8021eb0:	4604      	mov	r4, r0
 8021eb2:	2800      	cmp	r0, #0
 8021eb4:	d194      	bne.n	8021de0 <mbedtls_mpi_mul_mpi+0xcc>
 8021eb6:	f10d 0814 	add.w	r8, sp, #20
 8021eba:	e73f      	b.n	8021d3c <mbedtls_mpi_mul_mpi+0x28>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8021ebc:	f06f 040f 	mvn.w	r4, #15
 8021ec0:	e78e      	b.n	8021de0 <mbedtls_mpi_mul_mpi+0xcc>
 8021ec2:	bf00      	nop

08021ec4 <mbedtls_mpi_div_mpi>:
{
 8021ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ec8:	ed2d 8b02 	vpush	{d8}
 8021ecc:	461c      	mov	r4, r3
    for( i = X->n; i > 0; i-- )
 8021ece:	685b      	ldr	r3, [r3, #4]
{
 8021ed0:	b09f      	sub	sp, #124	; 0x7c
    for( i = X->n; i > 0; i-- )
 8021ed2:	2b00      	cmp	r3, #0
 8021ed4:	f000 809a 	beq.w	802200c <mbedtls_mpi_div_mpi+0x148>
 8021ed8:	4616      	mov	r6, r2
 8021eda:	68a2      	ldr	r2, [r4, #8]
 8021edc:	4683      	mov	fp, r0
 8021ede:	468a      	mov	sl, r1
 8021ee0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8021ee4:	e002      	b.n	8021eec <mbedtls_mpi_div_mpi+0x28>
 8021ee6:	3b01      	subs	r3, #1
 8021ee8:	f000 8090 	beq.w	802200c <mbedtls_mpi_div_mpi+0x148>
        if( X->p[i - 1] != 0 )
 8021eec:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8021ef0:	2900      	cmp	r1, #0
 8021ef2:	d0f8      	beq.n	8021ee6 <mbedtls_mpi_div_mpi+0x22>
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 8021ef4:	6823      	ldr	r3, [r4, #0]
 8021ef6:	2b00      	cmp	r3, #0
 8021ef8:	f000 8088 	beq.w	802200c <mbedtls_mpi_div_mpi+0x148>
    X->s = 1;
 8021efc:	f04f 0801 	mov.w	r8, #1
    X->n = 0;
 8021f00:	2300      	movs	r3, #0
    T2.n = sizeof( TP2 ) / sizeof( *TP2 );
 8021f02:	2203      	movs	r2, #3
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 8021f04:	4621      	mov	r1, r4
 8021f06:	4630      	mov	r0, r6
    T2.p = TP2;
 8021f08:	af18      	add	r7, sp, #96	; 0x60
    X->p = NULL;
 8021f0a:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8021f0e:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8021f12:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 8021f16:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    T2.p = TP2;
 8021f1a:	e9cd 2716 	strd	r2, r7, [sp, #88]	; 0x58
    X->s = 1;
 8021f1e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8021f22:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8021f26:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8021f2a:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
    T2.s = 1;
 8021f2e:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 8021f32:	f7ff fc1b 	bl	802176c <mbedtls_mpi_cmp_abs>
 8021f36:	2800      	cmp	r0, #0
 8021f38:	da70      	bge.n	802201c <mbedtls_mpi_div_mpi+0x158>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 8021f3a:	f1bb 0f00 	cmp.w	fp, #0
 8021f3e:	d012      	beq.n	8021f66 <mbedtls_mpi_div_mpi+0xa2>
    if( X->n < nblimbs )
 8021f40:	f8db 4004 	ldr.w	r4, [fp, #4]
 8021f44:	2c00      	cmp	r4, #0
 8021f46:	f000 81a4 	beq.w	8022292 <mbedtls_mpi_div_mpi+0x3ce>
 8021f4a:	f8db 5008 	ldr.w	r5, [fp, #8]
 8021f4e:	00a2      	lsls	r2, r4, #2
    memset( X->p, 0, X->n * ciL );
 8021f50:	2100      	movs	r1, #0
 8021f52:	4628      	mov	r0, r5
 8021f54:	f00d ff87 	bl	802fe66 <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
 8021f58:	2100      	movs	r1, #0
    X->s    = ( z < 0 ) ? -1 : 1;
 8021f5a:	2301      	movs	r3, #1
    X->p[0] = ( z < 0 ) ? -z : z;
 8021f5c:	f8db 2008 	ldr.w	r2, [fp, #8]
 8021f60:	6011      	str	r1, [r2, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 8021f62:	f8cb 3000 	str.w	r3, [fp]
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 8021f66:	f1ba 0f00 	cmp.w	sl, #0
 8021f6a:	d048      	beq.n	8021ffe <mbedtls_mpi_div_mpi+0x13a>
 8021f6c:	4631      	mov	r1, r6
 8021f6e:	4650      	mov	r0, sl
 8021f70:	f7ff f8ea 	bl	8021148 <mbedtls_mpi_copy>
 8021f74:	4605      	mov	r5, r0
 8021f76:	2800      	cmp	r0, #0
 8021f78:	d041      	beq.n	8021ffe <mbedtls_mpi_div_mpi+0x13a>
    if( X->p != NULL )
 8021f7a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8021f7c:	b130      	cbz	r0, 8021f8c <mbedtls_mpi_div_mpi+0xc8>
    mbedtls_platform_zeroize( v, ciL * n );
 8021f7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021f80:	0089      	lsls	r1, r1, #2
 8021f82:	f005 fdd3 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 8021f86:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8021f88:	f00d ff30 	bl	802fdec <free>
    X->n = 0;
 8021f8c:	2300      	movs	r3, #0
    X->s = 1;
 8021f8e:	2201      	movs	r2, #1
    if( X->p != NULL )
 8021f90:	980e      	ldr	r0, [sp, #56]	; 0x38
    X->n = 0;
 8021f92:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
    X->p = NULL;
 8021f96:	930b      	str	r3, [sp, #44]	; 0x2c
    if( X->p != NULL )
 8021f98:	b130      	cbz	r0, 8021fa8 <mbedtls_mpi_div_mpi+0xe4>
    mbedtls_platform_zeroize( v, ciL * n );
 8021f9a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8021f9c:	0089      	lsls	r1, r1, #2
 8021f9e:	f005 fdc5 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 8021fa2:	980e      	ldr	r0, [sp, #56]	; 0x38
 8021fa4:	f00d ff22 	bl	802fdec <free>
    X->n = 0;
 8021fa8:	2300      	movs	r3, #0
    X->s = 1;
 8021faa:	2201      	movs	r2, #1
    if( X->p != NULL )
 8021fac:	9811      	ldr	r0, [sp, #68]	; 0x44
    X->n = 0;
 8021fae:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    X->p = NULL;
 8021fb2:	930e      	str	r3, [sp, #56]	; 0x38
    if( X->p != NULL )
 8021fb4:	b130      	cbz	r0, 8021fc4 <mbedtls_mpi_div_mpi+0x100>
    mbedtls_platform_zeroize( v, ciL * n );
 8021fb6:	9910      	ldr	r1, [sp, #64]	; 0x40
 8021fb8:	0089      	lsls	r1, r1, #2
 8021fba:	f005 fdb7 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 8021fbe:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021fc0:	f00d ff14 	bl	802fdec <free>
    X->n = 0;
 8021fc4:	2300      	movs	r3, #0
    X->s = 1;
 8021fc6:	2201      	movs	r2, #1
    if( X->p != NULL )
 8021fc8:	9814      	ldr	r0, [sp, #80]	; 0x50
    X->n = 0;
 8021fca:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
    X->p = NULL;
 8021fce:	9311      	str	r3, [sp, #68]	; 0x44
    if( X->p != NULL )
 8021fd0:	b130      	cbz	r0, 8021fe0 <mbedtls_mpi_div_mpi+0x11c>
    mbedtls_platform_zeroize( v, ciL * n );
 8021fd2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8021fd4:	0089      	lsls	r1, r1, #2
 8021fd6:	f005 fda9 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 8021fda:	9814      	ldr	r0, [sp, #80]	; 0x50
 8021fdc:	f00d ff06 	bl	802fdec <free>
    X->n = 0;
 8021fe0:	2300      	movs	r3, #0
    X->s = 1;
 8021fe2:	2201      	movs	r2, #1
    mbedtls_platform_zeroize( TP2, sizeof( TP2 ) );
 8021fe4:	4638      	mov	r0, r7
 8021fe6:	210c      	movs	r1, #12
    X->n = 0;
 8021fe8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    X->p = NULL;
 8021fec:	9314      	str	r3, [sp, #80]	; 0x50
    mbedtls_platform_zeroize( TP2, sizeof( TP2 ) );
 8021fee:	f005 fd9d 	bl	8027b2c <mbedtls_platform_zeroize>
}
 8021ff2:	4628      	mov	r0, r5
 8021ff4:	b01f      	add	sp, #124	; 0x7c
 8021ff6:	ecbd 8b02 	vpop	{d8}
 8021ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( 0 );
 8021ffe:	2500      	movs	r5, #0
}
 8022000:	4628      	mov	r0, r5
 8022002:	b01f      	add	sp, #124	; 0x7c
 8022004:	ecbd 8b02 	vpop	{d8}
 8022008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 802200c:	f06f 050b 	mvn.w	r5, #11
}
 8022010:	4628      	mov	r0, r5
 8022012:	b01f      	add	sp, #124	; 0x7c
 8022014:	ecbd 8b02 	vpop	{d8}
 8022018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 802201c:	4631      	mov	r1, r6
 802201e:	a809      	add	r0, sp, #36	; 0x24
 8022020:	f7ff f892 	bl	8021148 <mbedtls_mpi_copy>
 8022024:	4605      	mov	r5, r0
 8022026:	2800      	cmp	r0, #0
 8022028:	d1a7      	bne.n	8021f7a <mbedtls_mpi_div_mpi+0xb6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 802202a:	4621      	mov	r1, r4
 802202c:	a80c      	add	r0, sp, #48	; 0x30
 802202e:	f7ff f88b 	bl	8021148 <mbedtls_mpi_copy>
 8022032:	4605      	mov	r5, r0
 8022034:	2800      	cmp	r0, #0
 8022036:	d1a0      	bne.n	8021f7a <mbedtls_mpi_div_mpi+0xb6>
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 8022038:	f242 7310 	movw	r3, #10000	; 0x2710
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 802203c:	6875      	ldr	r5, [r6, #4]
    X.s = Y.s = 1;
 802203e:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 8022042:	3502      	adds	r5, #2
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 8022044:	429d      	cmp	r5, r3
    X.s = Y.s = 1;
 8022046:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 802204a:	f200 81d8 	bhi.w	80223fe <mbedtls_mpi_div_mpi+0x53a>
    if( X->n < nblimbs )
 802204e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8022052:	4545      	cmp	r5, r8
 8022054:	f200 8134 	bhi.w	80222c0 <mbedtls_mpi_div_mpi+0x3fc>
 8022058:	f1b8 0f00 	cmp.w	r8, #0
 802205c:	f000 8157 	beq.w	802230e <mbedtls_mpi_div_mpi+0x44a>
 8022060:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8022062:	ea4f 0288 	mov.w	r2, r8, lsl #2
    memset( X->p, 0, X->n * ciL );
 8022066:	4628      	mov	r0, r5
 8022068:	2100      	movs	r1, #0
 802206a:	f00d fefc 	bl	802fe66 <memset>
    X->s    = ( z < 0 ) ? -1 : 1;
 802206e:	2301      	movs	r3, #1
    X->p[0] = ( z < 0 ) ? -z : z;
 8022070:	2100      	movs	r1, #0
    if( X->n < nblimbs )
 8022072:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    X->p[0] = ( z < 0 ) ? -z : z;
 8022074:	9a11      	ldr	r2, [sp, #68]	; 0x44
    if( X->n < nblimbs )
 8022076:	429d      	cmp	r5, r3
    X->p[0] = ( z < 0 ) ? -z : z;
 8022078:	6011      	str	r1, [r2, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 802207a:	930f      	str	r3, [sp, #60]	; 0x3c
    if( X->n < nblimbs )
 802207c:	f240 817b 	bls.w	8022376 <mbedtls_mpi_div_mpi+0x4b2>
    if( X->n == 0 )
 8022080:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022082:	4690      	mov	r8, r2
 8022084:	2a00      	cmp	r2, #0
 8022086:	f000 8192 	beq.w	80223ae <mbedtls_mpi_div_mpi+0x4ea>
    for( i = X->n - 1; i > 0; i-- )
 802208a:	1e53      	subs	r3, r2, #1
 802208c:	9300      	str	r3, [sp, #0]
 802208e:	f000 822a 	beq.w	80224e6 <mbedtls_mpi_div_mpi+0x622>
        if( X->p[i] != 0 )
 8022092:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022094:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8022098:	e002      	b.n	80220a0 <mbedtls_mpi_div_mpi+0x1dc>
    for( i = X->n - 1; i > 0; i-- )
 802209a:	3b01      	subs	r3, #1
 802209c:	f000 818f 	beq.w	80223be <mbedtls_mpi_div_mpi+0x4fa>
        if( X->p[i] != 0 )
 80220a0:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 80220a4:	2800      	cmp	r0, #0
 80220a6:	d0f8      	beq.n	802209a <mbedtls_mpi_div_mpi+0x1d6>
 80220a8:	3301      	adds	r3, #1
 80220aa:	0159      	lsls	r1, r3, #5
    for( j = 0; j < biL; j++ )
 80220ac:	2200      	movs	r2, #0
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 80220ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80220b2:	e002      	b.n	80220ba <mbedtls_mpi_div_mpi+0x1f6>
    for( j = 0; j < biL; j++ )
 80220b4:	3201      	adds	r2, #1
 80220b6:	2a20      	cmp	r2, #32
 80220b8:	d003      	beq.n	80220c2 <mbedtls_mpi_div_mpi+0x1fe>
        if( x & mask ) break;
 80220ba:	4203      	tst	r3, r0
        mask >>= 1;
 80220bc:	ea4f 0353 	mov.w	r3, r3, lsr #1
        if( x & mask ) break;
 80220c0:	d0f8      	beq.n	80220b4 <mbedtls_mpi_div_mpi+0x1f0>
    return( ( i * biL ) + j );
 80220c2:	1a8b      	subs	r3, r1, r2
    k = mbedtls_mpi_bitlen( &Y ) % biL;
 80220c4:	f003 031f 	and.w	r3, r3, #31
    if( k < biL - 1 )
 80220c8:	2b1f      	cmp	r3, #31
 80220ca:	f000 8174 	beq.w	80223b6 <mbedtls_mpi_div_mpi+0x4f2>
 80220ce:	f1c3 031f 	rsb	r3, r3, #31
 80220d2:	ee08 3a90 	vmov	s17, r3
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 80220d6:	ee18 1a90 	vmov	r1, s17
 80220da:	a809      	add	r0, sp, #36	; 0x24
 80220dc:	f7ff fa1e 	bl	802151c <mbedtls_mpi_shift_l>
 80220e0:	4605      	mov	r5, r0
 80220e2:	2800      	cmp	r0, #0
 80220e4:	f47f af49 	bne.w	8021f7a <mbedtls_mpi_div_mpi+0xb6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
 80220e8:	ee18 1a90 	vmov	r1, s17
 80220ec:	a80c      	add	r0, sp, #48	; 0x30
 80220ee:	f7ff fa15 	bl	802151c <mbedtls_mpi_shift_l>
 80220f2:	4605      	mov	r5, r0
 80220f4:	2800      	cmp	r0, #0
 80220f6:	f47f af40 	bne.w	8021f7a <mbedtls_mpi_div_mpi+0xb6>
 80220fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80220fc:	4698      	mov	r8, r3
 80220fe:	3b01      	subs	r3, #1
 8022100:	9300      	str	r3, [sp, #0]
    n = X.n - 1;
 8022102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 8022104:	a80c      	add	r0, sp, #48	; 0x30
 8022106:	eba3 0908 	sub.w	r9, r3, r8
    n = X.n - 1;
 802210a:	9301      	str	r3, [sp, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 802210c:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8022110:	4619      	mov	r1, r3
 8022112:	ee08 3a10 	vmov	s16, r3
 8022116:	f7ff fa01 	bl	802151c <mbedtls_mpi_shift_l>
 802211a:	4605      	mov	r5, r0
 802211c:	2800      	cmp	r0, #0
 802211e:	f47f af2c 	bne.w	8021f7a <mbedtls_mpi_div_mpi+0xb6>
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 8022122:	a90c      	add	r1, sp, #48	; 0x30
 8022124:	a809      	add	r0, sp, #36	; 0x24
 8022126:	f7ff fb65 	bl	80217f4 <mbedtls_mpi_cmp_mpi>
 802212a:	2800      	cmp	r0, #0
        Z.p[n - t]++;
 802212c:	ea4f 0989 	mov.w	r9, r9, lsl #2
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 8022130:	db23      	blt.n	802217a <mbedtls_mpi_div_mpi+0x2b6>
    s = A->s;
 8022132:	9d09      	ldr	r5, [sp, #36]	; 0x24
    if( A->s * B->s > 0 )
 8022134:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        Z.p[n - t]++;
 8022136:	9911      	ldr	r1, [sp, #68]	; 0x44
    if( A->s * B->s > 0 )
 8022138:	fb03 f305 	mul.w	r3, r3, r5
        Z.p[n - t]++;
 802213c:	f851 2009 	ldr.w	r2, [r1, r9]
    if( A->s * B->s > 0 )
 8022140:	2b00      	cmp	r3, #0
        Z.p[n - t]++;
 8022142:	f102 0201 	add.w	r2, r2, #1
 8022146:	f841 2009 	str.w	r2, [r1, r9]
    if( A->s * B->s > 0 )
 802214a:	f340 80d6 	ble.w	80222fa <mbedtls_mpi_div_mpi+0x436>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 802214e:	a90c      	add	r1, sp, #48	; 0x30
 8022150:	a809      	add	r0, sp, #36	; 0x24
 8022152:	f7ff fb0b 	bl	802176c <mbedtls_mpi_cmp_abs>
 8022156:	2800      	cmp	r0, #0
 8022158:	f2c0 80ed 	blt.w	8022336 <mbedtls_mpi_div_mpi+0x472>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 802215c:	a909      	add	r1, sp, #36	; 0x24
 802215e:	4608      	mov	r0, r1
 8022160:	aa0c      	add	r2, sp, #48	; 0x30
 8022162:	f7ff fc71 	bl	8021a48 <mbedtls_mpi_sub_abs>
 8022166:	2800      	cmp	r0, #0
 8022168:	f040 80cf 	bne.w	802230a <mbedtls_mpi_div_mpi+0x446>
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 802216c:	a90c      	add	r1, sp, #48	; 0x30
 802216e:	a809      	add	r0, sp, #36	; 0x24
        X->s = s;
 8022170:	9509      	str	r5, [sp, #36]	; 0x24
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 8022172:	f7ff fb3f 	bl	80217f4 <mbedtls_mpi_cmp_mpi>
 8022176:	2800      	cmp	r0, #0
 8022178:	dadb      	bge.n	8022132 <mbedtls_mpi_div_mpi+0x26e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 802217a:	ee18 1a10 	vmov	r1, s16
 802217e:	a80c      	add	r0, sp, #48	; 0x30
 8022180:	f7ff fa68 	bl	8021654 <mbedtls_mpi_shift_r>
 8022184:	4605      	mov	r5, r0
 8022186:	2800      	cmp	r0, #0
 8022188:	f47f aef7 	bne.w	8021f7a <mbedtls_mpi_div_mpi+0xb6>
    n = X.n - 1;
 802218c:	9b01      	ldr	r3, [sp, #4]
    for( i = n; i > t ; i-- )
 802218e:	9a00      	ldr	r2, [sp, #0]
    n = X.n - 1;
 8022190:	3b01      	subs	r3, #1
    for( i = n; i > t ; i-- )
 8022192:	4293      	cmp	r3, r2
    n = X.n - 1;
 8022194:	9302      	str	r3, [sp, #8]
    for( i = n; i > t ; i-- )
 8022196:	f240 8170 	bls.w	802247a <mbedtls_mpi_div_mpi+0x5b6>
 802219a:	4611      	mov	r1, r2
 802219c:	9b01      	ldr	r3, [sp, #4]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 802219e:	f108 4280 	add.w	r2, r8, #1073741824	; 0x40000000
 80221a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80221a6:	3b02      	subs	r3, #2
 80221a8:	1a5b      	subs	r3, r3, r1
 80221aa:	ea4f 0983 	mov.w	r9, r3, lsl #2
        if( X.p[i] >= Y.p[t] )
 80221ae:	460b      	mov	r3, r1
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 80221b0:	3a02      	subs	r2, #2
 80221b2:	0092      	lsls	r2, r2, #2
        if( X.p[i] >= Y.p[t] )
 80221b4:	0089      	lsls	r1, r1, #2
 80221b6:	ee08 6a10 	vmov	s16, r6
 80221ba:	e9cd 0b04 	strd	r0, fp, [sp, #16]
 80221be:	4688      	mov	r8, r1
 80221c0:	4693      	mov	fp, r2
 80221c2:	461e      	mov	r6, r3
 80221c4:	f8cd a018 	str.w	sl, [sp, #24]
 80221c8:	9407      	str	r4, [sp, #28]
 80221ca:	9802      	ldr	r0, [sp, #8]
 80221cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80221ce:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80221d2:	f853 2008 	ldr.w	r2, [r3, r8]
 80221d6:	4603      	mov	r3, r0
 80221d8:	f85a 1020 	ldr.w	r1, [sl, r0, lsl #2]
 80221dc:	009b      	lsls	r3, r3, #2
 80221de:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 80221e2:	4291      	cmp	r1, r2
            Z.p[i - t - 1] = ~0;
 80221e4:	9d11      	ldr	r5, [sp, #68]	; 0x44
        if( X.p[i] >= Y.p[t] )
 80221e6:	9003      	str	r0, [sp, #12]
 80221e8:	9300      	str	r3, [sp, #0]
 80221ea:	f0c0 80eb 	bcc.w	80223c4 <mbedtls_mpi_div_mpi+0x500>
            Z.p[i - t - 1] = ~0;
 80221ee:	1f1c      	subs	r4, r3, #4
 80221f0:	f04f 33ff 	mov.w	r3, #4294967295
 80221f4:	f845 3009 	str.w	r3, [r5, r9]
 80221f8:	eb05 0309 	add.w	r3, r5, r9
 80221fc:	9301      	str	r3, [sp, #4]
 80221fe:	4454      	add	r4, sl
        T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 8022200:	9b02      	ldr	r3, [sp, #8]
 8022202:	2b01      	cmp	r3, #1
 8022204:	f000 80f9 	beq.w	80223fa <mbedtls_mpi_div_mpi+0x536>
 8022208:	9b03      	ldr	r3, [sp, #12]
 802220a:	f853 3c08 	ldr.w	r3, [r3, #-8]
 802220e:	9318      	str	r3, [sp, #96]	; 0x60
        T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 8022210:	6823      	ldr	r3, [r4, #0]
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 8022212:	2401      	movs	r4, #1
        T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 8022214:	9319      	str	r3, [sp, #100]	; 0x64
        T2.p[2] = X.p[i];
 8022216:	9b00      	ldr	r3, [sp, #0]
        Z.p[i - t - 1]++;
 8022218:	9a01      	ldr	r2, [sp, #4]
        T2.p[2] = X.p[i];
 802221a:	f85a 3003 	ldr.w	r3, [sl, r3]
 802221e:	931a      	str	r3, [sp, #104]	; 0x68
        Z.p[i - t - 1]++;
 8022220:	6813      	ldr	r3, [r2, #0]
 8022222:	4423      	add	r3, r4
 8022224:	6013      	str	r3, [r2, #0]
 8022226:	462a      	mov	r2, r5
 8022228:	e01d      	b.n	8022266 <mbedtls_mpi_div_mpi+0x3a2>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 802222a:	4631      	mov	r1, r6
 802222c:	6019      	str	r1, [r3, #0]
            T1.p[1] = Y.p[t];
 802222e:	f852 1008 	ldr.w	r1, [r2, r8]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 8022232:	9a11      	ldr	r2, [sp, #68]	; 0x44
            T1.p[1] = Y.p[t];
 8022234:	6059      	str	r1, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 8022236:	f852 3009 	ldr.w	r3, [r2, r9]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 802223a:	a912      	add	r1, sp, #72	; 0x48
    p[0] = b;
 802223c:	9308      	str	r3, [sp, #32]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 802223e:	4608      	mov	r0, r1
    _B.p = p;
 8022240:	ab08      	add	r3, sp, #32
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 8022242:	aa1b      	add	r2, sp, #108	; 0x6c
    _B.n = 1;
 8022244:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
    _B.p = p;
 8022248:	931d      	str	r3, [sp, #116]	; 0x74
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 802224a:	f7ff fd63 	bl	8021d14 <mbedtls_mpi_mul_mpi>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 802224e:	2800      	cmp	r0, #0
 8022250:	d15b      	bne.n	802230a <mbedtls_mpi_div_mpi+0x446>
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 8022252:	a915      	add	r1, sp, #84	; 0x54
 8022254:	a812      	add	r0, sp, #72	; 0x48
 8022256:	f7ff facd 	bl	80217f4 <mbedtls_mpi_cmp_mpi>
 802225a:	2800      	cmp	r0, #0
 802225c:	f340 80d2 	ble.w	8022404 <mbedtls_mpi_div_mpi+0x540>
 8022260:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022262:	f852 3009 	ldr.w	r3, [r2, r9]
    if( X->n < nblimbs )
 8022266:	9d13      	ldr	r5, [sp, #76]	; 0x4c
            Z.p[i - t - 1]--;
 8022268:	3b01      	subs	r3, #1
 802226a:	f842 3009 	str.w	r3, [r2, r9]
    if( X->n < nblimbs )
 802226e:	2d00      	cmp	r5, #0
 8022270:	d06c      	beq.n	802234c <mbedtls_mpi_div_mpi+0x488>
 8022272:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022274:	00aa      	lsls	r2, r5, #2
    memset( X->p, 0, X->n * ciL );
 8022276:	4618      	mov	r0, r3
 8022278:	2100      	movs	r1, #0
 802227a:	f00d fdf4 	bl	802fe66 <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
 802227e:	2200      	movs	r2, #0
 8022280:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022282:	601a      	str	r2, [r3, #0]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 8022284:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    X->s    = ( z < 0 ) ? -1 : 1;
 8022286:	9412      	str	r4, [sp, #72]	; 0x48
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 8022288:	2e00      	cmp	r6, #0
 802228a:	d0ce      	beq.n	802222a <mbedtls_mpi_div_mpi+0x366>
 802228c:	f852 100b 	ldr.w	r1, [r2, fp]
 8022290:	e7cc      	b.n	802222c <mbedtls_mpi_div_mpi+0x368>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 8022292:	4640      	mov	r0, r8
 8022294:	2104      	movs	r1, #4
 8022296:	f00d fd6f 	bl	802fd78 <calloc>
 802229a:	4605      	mov	r5, r0
 802229c:	2800      	cmp	r0, #0
 802229e:	f000 8148 	beq.w	8022532 <mbedtls_mpi_div_mpi+0x66e>
        if( X->p != NULL )
 80222a2:	f8db 0008 	ldr.w	r0, [fp, #8]
 80222a6:	b130      	cbz	r0, 80222b6 <mbedtls_mpi_div_mpi+0x3f2>
    mbedtls_platform_zeroize( v, ciL * n );
 80222a8:	4621      	mov	r1, r4
 80222aa:	f005 fc3f 	bl	8027b2c <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
 80222ae:	f8db 0008 	ldr.w	r0, [fp, #8]
 80222b2:	f00d fd9b 	bl	802fdec <free>
        X->n = nblimbs;
 80222b6:	2301      	movs	r3, #1
        X->p = p;
 80222b8:	2204      	movs	r2, #4
        X->n = nblimbs;
 80222ba:	e9cb 3501 	strd	r3, r5, [fp, #4]
        X->p = p;
 80222be:	e647      	b.n	8021f50 <mbedtls_mpi_div_mpi+0x8c>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 80222c0:	2104      	movs	r1, #4
 80222c2:	4628      	mov	r0, r5
 80222c4:	f00d fd58 	bl	802fd78 <calloc>
 80222c8:	4681      	mov	r9, r0
 80222ca:	2800      	cmp	r0, #0
 80222cc:	f000 8097 	beq.w	80223fe <mbedtls_mpi_div_mpi+0x53a>
        if( X->p != NULL )
 80222d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80222d2:	b173      	cbz	r3, 80222f2 <mbedtls_mpi_div_mpi+0x42e>
            memcpy( p, X->p, X->n * ciL );
 80222d4:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80222d8:	4619      	mov	r1, r3
 80222da:	4642      	mov	r2, r8
 80222dc:	9300      	str	r3, [sp, #0]
 80222de:	f00d fd9b 	bl	802fe18 <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
 80222e2:	9b00      	ldr	r3, [sp, #0]
 80222e4:	4641      	mov	r1, r8
 80222e6:	4618      	mov	r0, r3
 80222e8:	f005 fc20 	bl	8027b2c <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
 80222ec:	9811      	ldr	r0, [sp, #68]	; 0x44
 80222ee:	f00d fd7d 	bl	802fdec <free>
        X->p = p;
 80222f2:	46a8      	mov	r8, r5
 80222f4:	e9cd 5910 	strd	r5, r9, [sp, #64]	; 0x40
 80222f8:	e6ae      	b.n	8022058 <mbedtls_mpi_div_mpi+0x194>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 80222fa:	a909      	add	r1, sp, #36	; 0x24
 80222fc:	4608      	mov	r0, r1
 80222fe:	aa0c      	add	r2, sp, #48	; 0x30
 8022300:	f7ff fb0a 	bl	8021918 <mbedtls_mpi_add_abs>
 8022304:	2800      	cmp	r0, #0
 8022306:	f43f af31 	beq.w	802216c <mbedtls_mpi_div_mpi+0x2a8>
 802230a:	4605      	mov	r5, r0
 802230c:	e635      	b.n	8021f7a <mbedtls_mpi_div_mpi+0xb6>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 802230e:	2104      	movs	r1, #4
 8022310:	2001      	movs	r0, #1
 8022312:	f00d fd31 	bl	802fd78 <calloc>
 8022316:	4605      	mov	r5, r0
 8022318:	2800      	cmp	r0, #0
 802231a:	d070      	beq.n	80223fe <mbedtls_mpi_div_mpi+0x53a>
        if( X->p != NULL )
 802231c:	9811      	ldr	r0, [sp, #68]	; 0x44
 802231e:	b128      	cbz	r0, 802232c <mbedtls_mpi_div_mpi+0x468>
    mbedtls_platform_zeroize( v, ciL * n );
 8022320:	4641      	mov	r1, r8
 8022322:	f005 fc03 	bl	8027b2c <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
 8022326:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022328:	f00d fd60 	bl	802fdec <free>
        X->n = nblimbs;
 802232c:	2301      	movs	r3, #1
        X->p = p;
 802232e:	2204      	movs	r2, #4
        X->n = nblimbs;
 8022330:	e9cd 3510 	strd	r3, r5, [sp, #64]	; 0x40
        X->p = p;
 8022334:	e697      	b.n	8022066 <mbedtls_mpi_div_mpi+0x1a2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 8022336:	aa09      	add	r2, sp, #36	; 0x24
 8022338:	4610      	mov	r0, r2
 802233a:	a90c      	add	r1, sp, #48	; 0x30
 802233c:	f7ff fb84 	bl	8021a48 <mbedtls_mpi_sub_abs>
            X->s = -s;
 8022340:	426d      	negs	r5, r5
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 8022342:	2800      	cmp	r0, #0
 8022344:	f43f af12 	beq.w	802216c <mbedtls_mpi_div_mpi+0x2a8>
 8022348:	4605      	mov	r5, r0
 802234a:	e616      	b.n	8021f7a <mbedtls_mpi_div_mpi+0xb6>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 802234c:	2104      	movs	r1, #4
 802234e:	2001      	movs	r0, #1
 8022350:	f00d fd12 	bl	802fd78 <calloc>
 8022354:	4603      	mov	r3, r0
 8022356:	2800      	cmp	r0, #0
 8022358:	d051      	beq.n	80223fe <mbedtls_mpi_div_mpi+0x53a>
        if( X->p != NULL )
 802235a:	9814      	ldr	r0, [sp, #80]	; 0x50
 802235c:	b138      	cbz	r0, 802236e <mbedtls_mpi_div_mpi+0x4aa>
    mbedtls_platform_zeroize( v, ciL * n );
 802235e:	4629      	mov	r1, r5
 8022360:	9300      	str	r3, [sp, #0]
 8022362:	f005 fbe3 	bl	8027b2c <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
 8022366:	9814      	ldr	r0, [sp, #80]	; 0x50
 8022368:	f00d fd40 	bl	802fdec <free>
 802236c:	9b00      	ldr	r3, [sp, #0]
        X->p = p;
 802236e:	2204      	movs	r2, #4
 8022370:	e9cd 4313 	strd	r4, r3, [sp, #76]	; 0x4c
 8022374:	e77f      	b.n	8022276 <mbedtls_mpi_div_mpi+0x3b2>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 8022376:	2104      	movs	r1, #4
 8022378:	2002      	movs	r0, #2
 802237a:	f00d fcfd 	bl	802fd78 <calloc>
 802237e:	4680      	mov	r8, r0
 8022380:	2800      	cmp	r0, #0
 8022382:	d03c      	beq.n	80223fe <mbedtls_mpi_div_mpi+0x53a>
        if( X->p != NULL )
 8022384:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 8022388:	f1b9 0f00 	cmp.w	r9, #0
 802238c:	d00b      	beq.n	80223a6 <mbedtls_mpi_div_mpi+0x4e2>
            memcpy( p, X->p, X->n * ciL );
 802238e:	00ad      	lsls	r5, r5, #2
 8022390:	462a      	mov	r2, r5
 8022392:	4649      	mov	r1, r9
 8022394:	f00d fd40 	bl	802fe18 <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
 8022398:	4648      	mov	r0, r9
 802239a:	4629      	mov	r1, r5
 802239c:	f005 fbc6 	bl	8027b2c <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
 80223a0:	9814      	ldr	r0, [sp, #80]	; 0x50
 80223a2:	f00d fd23 	bl	802fdec <free>
        X->n = nblimbs;
 80223a6:	2302      	movs	r3, #2
 80223a8:	e9cd 3813 	strd	r3, r8, [sp, #76]	; 0x4c
        X->p = p;
 80223ac:	e668      	b.n	8022080 <mbedtls_mpi_div_mpi+0x1bc>
 80223ae:	231f      	movs	r3, #31
 80223b0:	ee08 3a90 	vmov	s17, r3
 80223b4:	e68f      	b.n	80220d6 <mbedtls_mpi_div_mpi+0x212>
    else k = 0;
 80223b6:	2300      	movs	r3, #0
 80223b8:	ee08 3a90 	vmov	s17, r3
 80223bc:	e6a1      	b.n	8022102 <mbedtls_mpi_div_mpi+0x23e>
 80223be:	6808      	ldr	r0, [r1, #0]
    for( i = X->n - 1; i > 0; i-- )
 80223c0:	2120      	movs	r1, #32
 80223c2:	e673      	b.n	80220ac <mbedtls_mpi_div_mpi+0x1e8>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 80223c4:	3b04      	subs	r3, #4
 80223c6:	eb05 0009 	add.w	r0, r5, r9
 80223ca:	9001      	str	r0, [sp, #4]
 80223cc:	eb0a 0403 	add.w	r4, sl, r3
 80223d0:	f85a 0003 	ldr.w	r0, [sl, r3]
    if( 0 == d || u1 >= d )
 80223d4:	2a00      	cmp	r2, #0
 80223d6:	f000 808a 	beq.w	80224ee <mbedtls_mpi_div_mpi+0x62a>
    quotient = dividend / d;
 80223da:	2300      	movs	r3, #0
 80223dc:	f7ed ff3e 	bl	801025c <__aeabi_uldivmod>
 80223e0:	460b      	mov	r3, r1
    return (mbedtls_mpi_uint) quotient;
 80223e2:	2100      	movs	r1, #0
    quotient = dividend / d;
 80223e4:	4602      	mov	r2, r0
    return (mbedtls_mpi_uint) quotient;
 80223e6:	f04f 30ff 	mov.w	r0, #4294967295
 80223ea:	4299      	cmp	r1, r3
 80223ec:	bf08      	it	eq
 80223ee:	4290      	cmpeq	r0, r2
 80223f0:	d200      	bcs.n	80223f4 <mbedtls_mpi_div_mpi+0x530>
 80223f2:	4602      	mov	r2, r0
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 80223f4:	9b01      	ldr	r3, [sp, #4]
 80223f6:	601a      	str	r2, [r3, #0]
 80223f8:	e702      	b.n	8022200 <mbedtls_mpi_div_mpi+0x33c>
        T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 80223fa:	2300      	movs	r3, #0
 80223fc:	e707      	b.n	802220e <mbedtls_mpi_div_mpi+0x34a>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 80223fe:	f06f 050f 	mvn.w	r5, #15
 8022402:	e5ba      	b.n	8021f7a <mbedtls_mpi_div_mpi+0xb6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 8022404:	9b11      	ldr	r3, [sp, #68]	; 0x44
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 8022406:	aa1b      	add	r2, sp, #108	; 0x6c
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 8022408:	f853 3009 	ldr.w	r3, [r3, r9]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 802240c:	a90c      	add	r1, sp, #48	; 0x30
    p[0] = b;
 802240e:	9308      	str	r3, [sp, #32]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 8022410:	a812      	add	r0, sp, #72	; 0x48
    _B.p = p;
 8022412:	ab08      	add	r3, sp, #32
    _B.n = 1;
 8022414:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
    _B.p = p;
 8022418:	931d      	str	r3, [sp, #116]	; 0x74
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 802241a:	f7ff fc7b 	bl	8021d14 <mbedtls_mpi_mul_mpi>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 802241e:	2800      	cmp	r0, #0
 8022420:	f47f af73 	bne.w	802230a <mbedtls_mpi_div_mpi+0x446>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 8022424:	ea4f 05c9 	mov.w	r5, r9, lsl #3
 8022428:	4629      	mov	r1, r5
 802242a:	a812      	add	r0, sp, #72	; 0x48
 802242c:	f7ff f876 	bl	802151c <mbedtls_mpi_shift_l>
 8022430:	2800      	cmp	r0, #0
 8022432:	f47f af6a 	bne.w	802230a <mbedtls_mpi_div_mpi+0x446>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 8022436:	a909      	add	r1, sp, #36	; 0x24
 8022438:	4608      	mov	r0, r1
 802243a:	aa12      	add	r2, sp, #72	; 0x48
 802243c:	f7ff fbac 	bl	8021b98 <mbedtls_mpi_sub_mpi>
 8022440:	4603      	mov	r3, r0
 8022442:	2800      	cmp	r0, #0
 8022444:	d173      	bne.n	802252e <mbedtls_mpi_div_mpi+0x66a>
    *p  = ( z < 0 ) ? -z : z;
 8022446:	9308      	str	r3, [sp, #32]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 8022448:	a91b      	add	r1, sp, #108	; 0x6c
    Y.p = p;
 802244a:	ab08      	add	r3, sp, #32
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 802244c:	a809      	add	r0, sp, #36	; 0x24
    Y.n = 1;
 802244e:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
    Y.p = p;
 8022452:	931d      	str	r3, [sp, #116]	; 0x74
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 8022454:	f7fe fdbc 	bl	8020fd0 <mbedtls_mpi_cmp_mpi.constprop.1>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
 8022458:	2800      	cmp	r0, #0
 802245a:	db4b      	blt.n	80224f4 <mbedtls_mpi_div_mpi+0x630>
    for( i = n; i > t ; i-- )
 802245c:	9b02      	ldr	r3, [sp, #8]
 802245e:	f1a9 0904 	sub.w	r9, r9, #4
 8022462:	3b01      	subs	r3, #1
 8022464:	42b3      	cmp	r3, r6
 8022466:	9302      	str	r3, [sp, #8]
 8022468:	f63f aeaf 	bhi.w	80221ca <mbedtls_mpi_div_mpi+0x306>
 802246c:	ee18 6a10 	vmov	r6, s16
 8022470:	e9dd 5b04 	ldrd	r5, fp, [sp, #16]
 8022474:	f8dd a018 	ldr.w	sl, [sp, #24]
 8022478:	9c07      	ldr	r4, [sp, #28]
    if( Q != NULL )
 802247a:	f1bb 0f00 	cmp.w	fp, #0
 802247e:	d00c      	beq.n	802249a <mbedtls_mpi_div_mpi+0x5d6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 8022480:	4658      	mov	r0, fp
 8022482:	a90f      	add	r1, sp, #60	; 0x3c
 8022484:	f7fe fe60 	bl	8021148 <mbedtls_mpi_copy>
 8022488:	2800      	cmp	r0, #0
 802248a:	f47f af3e 	bne.w	802230a <mbedtls_mpi_div_mpi+0x446>
        Q->s = A->s * B->s;
 802248e:	6823      	ldr	r3, [r4, #0]
 8022490:	6832      	ldr	r2, [r6, #0]
 8022492:	fb03 f302 	mul.w	r3, r3, r2
 8022496:	f8cb 3000 	str.w	r3, [fp]
    if( R != NULL )
 802249a:	f1ba 0f00 	cmp.w	sl, #0
 802249e:	f43f ad6c 	beq.w	8021f7a <mbedtls_mpi_div_mpi+0xb6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 80224a2:	ee18 1a90 	vmov	r1, s17
 80224a6:	a809      	add	r0, sp, #36	; 0x24
 80224a8:	f7ff f8d4 	bl	8021654 <mbedtls_mpi_shift_r>
 80224ac:	2800      	cmp	r0, #0
 80224ae:	f47f af2c 	bne.w	802230a <mbedtls_mpi_div_mpi+0x446>
        X.s = A->s;
 80224b2:	6833      	ldr	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 80224b4:	4650      	mov	r0, sl
 80224b6:	a909      	add	r1, sp, #36	; 0x24
        X.s = A->s;
 80224b8:	9309      	str	r3, [sp, #36]	; 0x24
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 80224ba:	f7fe fe45 	bl	8021148 <mbedtls_mpi_copy>
 80224be:	2800      	cmp	r0, #0
 80224c0:	f47f af23 	bne.w	802230a <mbedtls_mpi_div_mpi+0x446>
    Y.s = ( z < 0 ) ? -1 : 1;
 80224c4:	2401      	movs	r4, #1
    *p  = ( z < 0 ) ? -z : z;
 80224c6:	9008      	str	r0, [sp, #32]
    Y.p = p;
 80224c8:	ab08      	add	r3, sp, #32
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 80224ca:	4650      	mov	r0, sl
 80224cc:	a91b      	add	r1, sp, #108	; 0x6c
    Y.n = 1;
 80224ce:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
    Y.p = p;
 80224d2:	931d      	str	r3, [sp, #116]	; 0x74
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 80224d4:	f7fe fd7c 	bl	8020fd0 <mbedtls_mpi_cmp_mpi.constprop.1>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
 80224d8:	2800      	cmp	r0, #0
 80224da:	f47f ad4e 	bne.w	8021f7a <mbedtls_mpi_div_mpi+0xb6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 80224de:	4605      	mov	r5, r0
            R->s = 1;
 80224e0:	f8ca 4000 	str.w	r4, [sl]
 80224e4:	e549      	b.n	8021f7a <mbedtls_mpi_div_mpi+0xb6>
 80224e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    for( i = X->n - 1; i > 0; i-- )
 80224e8:	2120      	movs	r1, #32
 80224ea:	6818      	ldr	r0, [r3, #0]
 80224ec:	e5de      	b.n	80220ac <mbedtls_mpi_div_mpi+0x1e8>
        return ( ~0 );
 80224ee:	f04f 32ff 	mov.w	r2, #4294967295
 80224f2:	e77f      	b.n	80223f4 <mbedtls_mpi_div_mpi+0x530>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 80224f4:	a90c      	add	r1, sp, #48	; 0x30
 80224f6:	a812      	add	r0, sp, #72	; 0x48
 80224f8:	f7fe fe26 	bl	8021148 <mbedtls_mpi_copy>
 80224fc:	2800      	cmp	r0, #0
 80224fe:	f47f af04 	bne.w	802230a <mbedtls_mpi_div_mpi+0x446>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 8022502:	4629      	mov	r1, r5
 8022504:	a812      	add	r0, sp, #72	; 0x48
 8022506:	f7ff f809 	bl	802151c <mbedtls_mpi_shift_l>
 802250a:	2800      	cmp	r0, #0
 802250c:	f47f aefd 	bne.w	802230a <mbedtls_mpi_div_mpi+0x446>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 8022510:	a909      	add	r1, sp, #36	; 0x24
 8022512:	4608      	mov	r0, r1
 8022514:	aa12      	add	r2, sp, #72	; 0x48
 8022516:	f7ff fb17 	bl	8021b48 <mbedtls_mpi_add_mpi>
 802251a:	2800      	cmp	r0, #0
 802251c:	f47f aef5 	bne.w	802230a <mbedtls_mpi_div_mpi+0x446>
            Z.p[i - t - 1]--;
 8022520:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022522:	f852 3009 	ldr.w	r3, [r2, r9]
 8022526:	3b01      	subs	r3, #1
 8022528:	f842 3009 	str.w	r3, [r2, r9]
 802252c:	e796      	b.n	802245c <mbedtls_mpi_div_mpi+0x598>
 802252e:	4605      	mov	r5, r0
 8022530:	e523      	b.n	8021f7a <mbedtls_mpi_div_mpi+0xb6>
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8022532:	f06f 050f 	mvn.w	r5, #15
 8022536:	e529      	b.n	8021f8c <mbedtls_mpi_div_mpi+0xc8>

08022538 <mbedtls_mpi_mod_mpi>:
    for( i = X->n; i > 0; i-- )
 8022538:	6853      	ldr	r3, [r2, #4]
{
 802253a:	b570      	push	{r4, r5, r6, lr}
 802253c:	4615      	mov	r5, r2
 802253e:	4604      	mov	r4, r0
 8022540:	460a      	mov	r2, r1
    for( i = X->n; i > 0; i-- )
 8022542:	b163      	cbz	r3, 802255e <mbedtls_mpi_mod_mpi+0x26>
 8022544:	68a8      	ldr	r0, [r5, #8]
 8022546:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 802254a:	e001      	b.n	8022550 <mbedtls_mpi_mod_mpi+0x18>
 802254c:	3b01      	subs	r3, #1
 802254e:	d006      	beq.n	802255e <mbedtls_mpi_mod_mpi+0x26>
        if( X->p[i - 1] != 0 )
 8022550:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8022554:	2e00      	cmp	r6, #0
 8022556:	d0f9      	beq.n	802254c <mbedtls_mpi_mod_mpi+0x14>
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 8022558:	682b      	ldr	r3, [r5, #0]
 802255a:	2b00      	cmp	r3, #0
 802255c:	db6e      	blt.n	802263c <mbedtls_mpi_mod_mpi+0x104>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 802255e:	462b      	mov	r3, r5
 8022560:	4621      	mov	r1, r4
 8022562:	2000      	movs	r0, #0
 8022564:	f7ff fcae 	bl	8021ec4 <mbedtls_mpi_div_mpi>
 8022568:	2800      	cmp	r0, #0
 802256a:	d143      	bne.n	80225f4 <mbedtls_mpi_mod_mpi+0xbc>
    for( i = X->n; i > 0; i-- )
 802256c:	6863      	ldr	r3, [r4, #4]
 802256e:	b30b      	cbz	r3, 80225b4 <mbedtls_mpi_mod_mpi+0x7c>
 8022570:	68a2      	ldr	r2, [r4, #8]
 8022572:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8022576:	e001      	b.n	802257c <mbedtls_mpi_mod_mpi+0x44>
 8022578:	3b01      	subs	r3, #1
 802257a:	d01b      	beq.n	80225b4 <mbedtls_mpi_mod_mpi+0x7c>
        if( X->p[i - 1] != 0 )
 802257c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8022580:	2900      	cmp	r1, #0
 8022582:	d0f9      	beq.n	8022578 <mbedtls_mpi_mod_mpi+0x40>
    if( i > j ) return(  X->s );
 8022584:	6826      	ldr	r6, [r4, #0]
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 8022586:	2e00      	cmp	r6, #0
 8022588:	da14      	bge.n	80225b4 <mbedtls_mpi_mod_mpi+0x7c>
    if( A->s * B->s < 0 )
 802258a:	682b      	ldr	r3, [r5, #0]
 802258c:	fb03 f306 	mul.w	r3, r3, r6
 8022590:	2b00      	cmp	r3, #0
 8022592:	da30      	bge.n	80225f6 <mbedtls_mpi_mod_mpi+0xbe>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 8022594:	4629      	mov	r1, r5
 8022596:	4620      	mov	r0, r4
 8022598:	f7ff f8e8 	bl	802176c <mbedtls_mpi_cmp_abs>
 802259c:	2800      	cmp	r0, #0
 802259e:	db32      	blt.n	8022606 <mbedtls_mpi_mod_mpi+0xce>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 80225a0:	462a      	mov	r2, r5
 80225a2:	4621      	mov	r1, r4
 80225a4:	4620      	mov	r0, r4
 80225a6:	f7ff fa4f 	bl	8021a48 <mbedtls_mpi_sub_abs>
 80225aa:	bb18      	cbnz	r0, 80225f4 <mbedtls_mpi_mod_mpi+0xbc>
    for( i = X->n; i > 0; i-- )
 80225ac:	6863      	ldr	r3, [r4, #4]
        X->s = s;
 80225ae:	6026      	str	r6, [r4, #0]
    for( i = X->n; i > 0; i-- )
 80225b0:	2b00      	cmp	r3, #0
 80225b2:	d1dd      	bne.n	8022570 <mbedtls_mpi_mod_mpi+0x38>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 80225b4:	4629      	mov	r1, r5
 80225b6:	4620      	mov	r0, r4
 80225b8:	f7ff f91c 	bl	80217f4 <mbedtls_mpi_cmp_mpi>
 80225bc:	2800      	cmp	r0, #0
 80225be:	db18      	blt.n	80225f2 <mbedtls_mpi_mod_mpi+0xba>
    s = A->s;
 80225c0:	6826      	ldr	r6, [r4, #0]
    if( A->s * B->s > 0 )
 80225c2:	682b      	ldr	r3, [r5, #0]
 80225c4:	fb03 f306 	mul.w	r3, r3, r6
 80225c8:	2b00      	cmp	r3, #0
 80225ca:	dd2f      	ble.n	802262c <mbedtls_mpi_mod_mpi+0xf4>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 80225cc:	4629      	mov	r1, r5
 80225ce:	4620      	mov	r0, r4
 80225d0:	f7ff f8cc 	bl	802176c <mbedtls_mpi_cmp_abs>
 80225d4:	2800      	cmp	r0, #0
 80225d6:	db20      	blt.n	802261a <mbedtls_mpi_mod_mpi+0xe2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 80225d8:	462a      	mov	r2, r5
 80225da:	4621      	mov	r1, r4
 80225dc:	4620      	mov	r0, r4
 80225de:	f7ff fa33 	bl	8021a48 <mbedtls_mpi_sub_abs>
 80225e2:	b938      	cbnz	r0, 80225f4 <mbedtls_mpi_mod_mpi+0xbc>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 80225e4:	4629      	mov	r1, r5
 80225e6:	4620      	mov	r0, r4
        X->s = s;
 80225e8:	6026      	str	r6, [r4, #0]
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 80225ea:	f7ff f903 	bl	80217f4 <mbedtls_mpi_cmp_mpi>
 80225ee:	2800      	cmp	r0, #0
 80225f0:	dae6      	bge.n	80225c0 <mbedtls_mpi_mod_mpi+0x88>
cleanup:
 80225f2:	2000      	movs	r0, #0
}
 80225f4:	bd70      	pop	{r4, r5, r6, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 80225f6:	462a      	mov	r2, r5
 80225f8:	4621      	mov	r1, r4
 80225fa:	4620      	mov	r0, r4
 80225fc:	f7ff f98c 	bl	8021918 <mbedtls_mpi_add_abs>
 8022600:	2800      	cmp	r0, #0
 8022602:	d0d3      	beq.n	80225ac <mbedtls_mpi_mod_mpi+0x74>
}
 8022604:	bd70      	pop	{r4, r5, r6, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 8022606:	4622      	mov	r2, r4
 8022608:	4629      	mov	r1, r5
 802260a:	4620      	mov	r0, r4
 802260c:	f7ff fa1c 	bl	8021a48 <mbedtls_mpi_sub_abs>
 8022610:	2800      	cmp	r0, #0
 8022612:	d1ef      	bne.n	80225f4 <mbedtls_mpi_mod_mpi+0xbc>
            X->s = -s;
 8022614:	4276      	negs	r6, r6
 8022616:	6026      	str	r6, [r4, #0]
    return( ret );
 8022618:	e7a8      	b.n	802256c <mbedtls_mpi_mod_mpi+0x34>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 802261a:	4622      	mov	r2, r4
 802261c:	4629      	mov	r1, r5
 802261e:	4620      	mov	r0, r4
 8022620:	f7ff fa12 	bl	8021a48 <mbedtls_mpi_sub_abs>
            X->s = -s;
 8022624:	4276      	negs	r6, r6
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 8022626:	2800      	cmp	r0, #0
 8022628:	d0dc      	beq.n	80225e4 <mbedtls_mpi_mod_mpi+0xac>
}
 802262a:	bd70      	pop	{r4, r5, r6, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 802262c:	462a      	mov	r2, r5
 802262e:	4621      	mov	r1, r4
 8022630:	4620      	mov	r0, r4
 8022632:	f7ff f971 	bl	8021918 <mbedtls_mpi_add_abs>
 8022636:	2800      	cmp	r0, #0
 8022638:	d0d4      	beq.n	80225e4 <mbedtls_mpi_mod_mpi+0xac>
}
 802263a:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 802263c:	f06f 0009 	mvn.w	r0, #9
}
 8022640:	bd70      	pop	{r4, r5, r6, pc}
 8022642:	bf00      	nop

08022644 <mbedtls_mpi_exp_mod>:
{
 8022644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022648:	ed2d 8b04 	vpush	{d8-d9}
    for( i = X->n; i > 0; i-- )
 802264c:	685f      	ldr	r7, [r3, #4]
{
 802264e:	f5ad 7d5f 	sub.w	sp, sp, #892	; 0x37c
    for( i = X->n; i > 0; i-- )
 8022652:	2f00      	cmp	r7, #0
 8022654:	f000 8089 	beq.w	802276a <mbedtls_mpi_exp_mod+0x126>
 8022658:	4699      	mov	r9, r3
 802265a:	4682      	mov	sl, r0
        if( X->p[i - 1] != 0 )
 802265c:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8022660:	4690      	mov	r8, r2
 8022662:	460e      	mov	r6, r1
 8022664:	463b      	mov	r3, r7
 8022666:	eb00 0287 	add.w	r2, r0, r7, lsl #2
 802266a:	e001      	b.n	8022670 <mbedtls_mpi_exp_mod+0x2c>
    for( i = X->n; i > 0; i-- )
 802266c:	3b01      	subs	r3, #1
 802266e:	d07c      	beq.n	802276a <mbedtls_mpi_exp_mod+0x126>
        if( X->p[i - 1] != 0 )
 8022670:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8022674:	2900      	cmp	r1, #0
 8022676:	d0f9      	beq.n	802266c <mbedtls_mpi_exp_mod+0x28>
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 8022678:	f8d9 3000 	ldr.w	r3, [r9]
 802267c:	2b00      	cmp	r3, #0
 802267e:	dd74      	ble.n	802276a <mbedtls_mpi_exp_mod+0x126>
 8022680:	6800      	ldr	r0, [r0, #0]
 8022682:	f010 0301 	ands.w	r3, r0, #1
 8022686:	9305      	str	r3, [sp, #20]
 8022688:	d06f      	beq.n	802276a <mbedtls_mpi_exp_mod+0x126>
    for( i = X->n; i > 0; i-- )
 802268a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802268e:	b17d      	cbz	r5, 80226b0 <mbedtls_mpi_exp_mod+0x6c>
 8022690:	f8d8 2008 	ldr.w	r2, [r8, #8]
        if( X->p[i - 1] != 0 )
 8022694:	462b      	mov	r3, r5
 8022696:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 802269a:	e001      	b.n	80226a0 <mbedtls_mpi_exp_mod+0x5c>
    for( i = X->n; i > 0; i-- )
 802269c:	3b01      	subs	r3, #1
 802269e:	d007      	beq.n	80226b0 <mbedtls_mpi_exp_mod+0x6c>
        if( X->p[i - 1] != 0 )
 80226a0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80226a4:	2900      	cmp	r1, #0
 80226a6:	d0f9      	beq.n	802269c <mbedtls_mpi_exp_mod+0x58>
    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
 80226a8:	f8d8 3000 	ldr.w	r3, [r8]
 80226ac:	2b00      	cmp	r3, #0
 80226ae:	db5c      	blt.n	802276a <mbedtls_mpi_exp_mod+0x126>
    X->s = 1;
 80226b0:	2301      	movs	r3, #1
    X->n = 0;
 80226b2:	2100      	movs	r1, #0
    x += ( ( m0 + 2 ) & 4 ) << 1;
 80226b4:	1c84      	adds	r4, r0, #2
 80226b6:	409c      	lsls	r4, r3
 80226b8:	f004 0408 	and.w	r4, r4, #8
 80226bc:	4404      	add	r4, r0
        x *= ( 2 - ( m0 * x ) );
 80226be:	fb04 f200 	mul.w	r2, r4, r0
 80226c2:	f1c2 0202 	rsb	r2, r2, #2
 80226c6:	fb02 f404 	mul.w	r4, r2, r4
 80226ca:	fb04 f200 	mul.w	r2, r4, r0
 80226ce:	f1c2 0202 	rsb	r2, r2, #2
 80226d2:	fb04 f202 	mul.w	r2, r4, r2
 80226d6:	fb02 f000 	mul.w	r0, r2, r0
 80226da:	f1c0 0002 	rsb	r0, r0, #2
 80226de:	fb02 f200 	mul.w	r2, r2, r0
    memset( W, 0, sizeof( W ) );
 80226e2:	a81e      	add	r0, sp, #120	; 0x78
        x *= ( 2 - ( m0 * x ) );
 80226e4:	9207      	str	r2, [sp, #28]
    memset( W, 0, sizeof( W ) );
 80226e6:	f44f 7240 	mov.w	r2, #768	; 0x300
    X->p = NULL;
 80226ea:	e9cd 1113 	strd	r1, r1, [sp, #76]	; 0x4c
    X->n = 0;
 80226ee:	e9cd 3115 	strd	r3, r1, [sp, #84]	; 0x54
    X->s = 1;
 80226f2:	e9cd 1317 	strd	r1, r3, [sp, #92]	; 0x5c
    X->p = NULL;
 80226f6:	e9cd 1119 	strd	r1, r1, [sp, #100]	; 0x64
    X->s = 1;
 80226fa:	9312      	str	r3, [sp, #72]	; 0x48
    memset( W, 0, sizeof( W ) );
 80226fc:	f00d fbb3 	bl	802fe66 <memset>
    if( X->n == 0 )
 8022700:	2d00      	cmp	r5, #0
 8022702:	d03b      	beq.n	802277c <mbedtls_mpi_exp_mod+0x138>
    for( i = X->n - 1; i > 0; i-- )
 8022704:	1e6b      	subs	r3, r5, #1
 8022706:	f000 8278 	beq.w	8022bfa <mbedtls_mpi_exp_mod+0x5b6>
        if( X->p[i] != 0 )
 802270a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 802270e:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8022712:	e002      	b.n	802271a <mbedtls_mpi_exp_mod+0xd6>
    for( i = X->n - 1; i > 0; i-- )
 8022714:	3b01      	subs	r3, #1
 8022716:	f000 819d 	beq.w	8022a54 <mbedtls_mpi_exp_mod+0x410>
        if( X->p[i] != 0 )
 802271a:	f855 0d04 	ldr.w	r0, [r5, #-4]!
 802271e:	2800      	cmp	r0, #0
 8022720:	d0f8      	beq.n	8022714 <mbedtls_mpi_exp_mod+0xd0>
 8022722:	1c5a      	adds	r2, r3, #1
 8022724:	0151      	lsls	r1, r2, #5
    for( j = 0; j < biL; j++ )
 8022726:	2200      	movs	r2, #0
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 8022728:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802272c:	e002      	b.n	8022734 <mbedtls_mpi_exp_mod+0xf0>
    for( j = 0; j < biL; j++ )
 802272e:	3201      	adds	r2, #1
 8022730:	2a20      	cmp	r2, #32
 8022732:	d003      	beq.n	802273c <mbedtls_mpi_exp_mod+0xf8>
        if( x & mask ) break;
 8022734:	4218      	tst	r0, r3
        mask >>= 1;
 8022736:	ea4f 0353 	mov.w	r3, r3, lsr #1
        if( x & mask ) break;
 802273a:	d0f8      	beq.n	802272e <mbedtls_mpi_exp_mod+0xea>
    return( ( i * biL ) + j );
 802273c:	1a8a      	subs	r2, r1, r2
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
 802273e:	f5b2 7f28 	cmp.w	r2, #672	; 0x2a0
 8022742:	f080 813b 	bcs.w	80229bc <mbedtls_mpi_exp_mod+0x378>
 8022746:	2aef      	cmp	r2, #239	; 0xef
 8022748:	f200 8187 	bhi.w	8022a5a <mbedtls_mpi_exp_mod+0x416>
 802274c:	2a4f      	cmp	r2, #79	; 0x4f
 802274e:	f200 81ad 	bhi.w	8022aac <mbedtls_mpi_exp_mod+0x468>
 8022752:	2a17      	cmp	r2, #23
 8022754:	f240 8278 	bls.w	8022c48 <mbedtls_mpi_exp_mod+0x604>
 8022758:	2305      	movs	r3, #5
 802275a:	9308      	str	r3, [sp, #32]
 802275c:	2308      	movs	r3, #8
 802275e:	9304      	str	r3, [sp, #16]
 8022760:	2303      	movs	r3, #3
 8022762:	2404      	movs	r4, #4
 8022764:	2502      	movs	r5, #2
 8022766:	9306      	str	r3, [sp, #24]
 8022768:	e00e      	b.n	8022788 <mbedtls_mpi_exp_mod+0x144>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 802276a:	f06f 0703 	mvn.w	r7, #3
}
 802276e:	4638      	mov	r0, r7
 8022770:	f50d 7d5f 	add.w	sp, sp, #892	; 0x37c
 8022774:	ecbd 8b04 	vpop	{d8-d9}
 8022778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802277c:	9a05      	ldr	r2, [sp, #20]
 802277e:	2302      	movs	r3, #2
 8022780:	4614      	mov	r4, r2
 8022782:	9308      	str	r3, [sp, #32]
 8022784:	9304      	str	r3, [sp, #16]
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
 8022786:	9206      	str	r2, [sp, #24]
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 8022788:	f242 7310 	movw	r3, #10000	; 0x2710
    j = N->n + 1;
 802278c:	3701      	adds	r7, #1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 802278e:	429f      	cmp	r7, r3
 8022790:	f200 8367 	bhi.w	8022e62 <mbedtls_mpi_exp_mod+0x81e>
    if( X->n < nblimbs )
 8022794:	f8da 2004 	ldr.w	r2, [sl, #4]
 8022798:	4297      	cmp	r7, r2
 802279a:	f200 8118 	bhi.w	80229ce <mbedtls_mpi_exp_mod+0x38a>
 802279e:	2200      	movs	r2, #0
 80227a0:	4297      	cmp	r7, r2
 80227a2:	f200 8139 	bhi.w	8022a18 <mbedtls_mpi_exp_mod+0x3d4>
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 80227a6:	f242 7310 	movw	r3, #10000	; 0x2710
 80227aa:	ebb3 0f47 	cmp.w	r3, r7, lsl #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
 80227ae:	ea4f 0b47 	mov.w	fp, r7, lsl #1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 80227b2:	f0c0 8383 	bcc.w	8022ebc <mbedtls_mpi_exp_mod+0x878>
    if( X->n < nblimbs )
 80227b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80227b8:	4593      	cmp	fp, r2
 80227ba:	f200 8159 	bhi.w	8022a70 <mbedtls_mpi_exp_mod+0x42c>
    neg = ( A->s == -1 );
 80227be:	6833      	ldr	r3, [r6, #0]
 80227c0:	930b      	str	r3, [sp, #44]	; 0x2c
    if( neg )
 80227c2:	3301      	adds	r3, #1
 80227c4:	f000 821e 	beq.w	8022c04 <mbedtls_mpi_exp_mod+0x5c0>
    if( _RR == NULL || _RR->p == NULL )
 80227c8:	9bec      	ldr	r3, [sp, #944]	; 0x3b0
 80227ca:	2b00      	cmp	r3, #0
 80227cc:	f000 8177 	beq.w	8022abe <mbedtls_mpi_exp_mod+0x47a>
 80227d0:	689b      	ldr	r3, [r3, #8]
 80227d2:	2b00      	cmp	r3, #0
 80227d4:	f000 8173 	beq.w	8022abe <mbedtls_mpi_exp_mod+0x47a>
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
 80227d8:	9aec      	ldr	r2, [sp, #944]	; 0x3b0
 80227da:	ab12      	add	r3, sp, #72	; 0x48
 80227dc:	6810      	ldr	r0, [r2, #0]
 80227de:	6851      	ldr	r1, [r2, #4]
 80227e0:	6892      	ldr	r2, [r2, #8]
 80227e2:	c307      	stmia	r3!, {r0, r1, r2}
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
 80227e4:	4649      	mov	r1, r9
 80227e6:	4630      	mov	r0, r6
 80227e8:	f7ff f804 	bl	80217f4 <mbedtls_mpi_cmp_mpi>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
 80227ec:	f10d 0b84 	add.w	fp, sp, #132	; 0x84
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
 80227f0:	2800      	cmp	r0, #0
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
 80227f2:	4631      	mov	r1, r6
 80227f4:	4658      	mov	r0, fp
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
 80227f6:	f2c0 81e6 	blt.w	8022bc6 <mbedtls_mpi_exp_mod+0x582>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
 80227fa:	464a      	mov	r2, r9
 80227fc:	f7ff fe9c 	bl	8022538 <mbedtls_mpi_mod_mpi>
 8022800:	4607      	mov	r7, r0
 8022802:	2800      	cmp	r0, #0
 8022804:	f040 8175 	bne.w	8022af2 <mbedtls_mpi_exp_mod+0x4ae>
    *mm = ~x + 1;
 8022808:	9b07      	ldr	r3, [sp, #28]
    mpi_montmul( &W[1], &RR, N, mm, &T );
 802280a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    *mm = ~x + 1;
 802280c:	4259      	negs	r1, r3
    mpi_montmul( &W[1], &RR, N, mm, &T );
 802280e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8022812:	f109 0008 	add.w	r0, r9, #8
 8022816:	aa17      	add	r2, sp, #92	; 0x5c
 8022818:	f109 0304 	add.w	r3, r9, #4
    *mm = ~x + 1;
 802281c:	910a      	str	r1, [sp, #40]	; 0x28
    mpi_montmul( &W[1], &RR, N, mm, &T );
 802281e:	9009      	str	r0, [sp, #36]	; 0x24
 8022820:	9000      	str	r0, [sp, #0]
 8022822:	9203      	str	r2, [sp, #12]
 8022824:	a823      	add	r0, sp, #140	; 0x8c
 8022826:	aa14      	add	r2, sp, #80	; 0x50
 8022828:	a913      	add	r1, sp, #76	; 0x4c
 802282a:	9307      	str	r3, [sp, #28]
 802282c:	f7fe fb3c 	bl	8020ea8 <mpi_montmul.isra.0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
 8022830:	4650      	mov	r0, sl
 8022832:	a912      	add	r1, sp, #72	; 0x48
 8022834:	f7fe fc88 	bl	8021148 <mbedtls_mpi_copy>
 8022838:	4607      	mov	r7, r0
 802283a:	2800      	cmp	r0, #0
 802283c:	f040 8159 	bne.w	8022af2 <mbedtls_mpi_exp_mod+0x4ae>
    mbedtls_mpi_uint z = 1;
 8022840:	f04f 0c01 	mov.w	ip, #1
    mpi_montmul( A, &U, N, mm, T );
 8022844:	a917      	add	r1, sp, #92	; 0x5c
 8022846:	9103      	str	r1, [sp, #12]
 8022848:	990a      	ldr	r1, [sp, #40]	; 0x28
 802284a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802284c:	9101      	str	r1, [sp, #4]
 802284e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022850:	9b07      	ldr	r3, [sp, #28]
    mbedtls_mpi_uint z = 1;
 8022852:	f10a 0008 	add.w	r0, sl, #8
    mpi_montmul( A, &U, N, mm, T );
 8022856:	9100      	str	r1, [sp, #0]
 8022858:	9202      	str	r2, [sp, #8]
 802285a:	a91c      	add	r1, sp, #112	; 0x70
 802285c:	aa1d      	add	r2, sp, #116	; 0x74
    U.p = &z;
 802285e:	ae11      	add	r6, sp, #68	; 0x44
 8022860:	ee08 0a90 	vmov	s17, r0
    U.n = U.s = (int) z;
 8022864:	e9cd cc1b 	strd	ip, ip, [sp, #108]	; 0x6c
    mbedtls_mpi_uint z = 1;
 8022868:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
    U.p = &z;
 802286c:	961d      	str	r6, [sp, #116]	; 0x74
    mpi_montmul( A, &U, N, mm, T );
 802286e:	f7fe fb1b 	bl	8020ea8 <mpi_montmul.isra.0>
    if( wsize > 1 )
 8022872:	9b06      	ldr	r3, [sp, #24]
 8022874:	2b01      	cmp	r3, #1
 8022876:	9b07      	ldr	r3, [sp, #28]
 8022878:	f000 81f6 	beq.w	8022c68 <mbedtls_mpi_exp_mod+0x624>
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 802287c:	f242 7210 	movw	r2, #10000	; 0x2710
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
 8022880:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8022884:	3101      	adds	r1, #1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 8022886:	4291      	cmp	r1, r2
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
 8022888:	9107      	str	r1, [sp, #28]
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 802288a:	f200 8317 	bhi.w	8022ebc <mbedtls_mpi_exp_mod+0x878>
    if( X->n < nblimbs )
 802288e:	a81e      	add	r0, sp, #120	; 0x78
 8022890:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8022894:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8022898:	4616      	mov	r6, r2
 802289a:	6852      	ldr	r2, [r2, #4]
 802289c:	0060      	lsls	r0, r4, #1
 802289e:	4291      	cmp	r1, r2
 80228a0:	900c      	str	r0, [sp, #48]	; 0x30
 80228a2:	f200 82e1 	bhi.w	8022e68 <mbedtls_mpi_exp_mod+0x824>
 80228a6:	930c      	str	r3, [sp, #48]	; 0x30
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
 80228a8:	0063      	lsls	r3, r4, #1
 80228aa:	4423      	add	r3, r4
 80228ac:	461a      	mov	r2, r3
 80228ae:	ab1e      	add	r3, sp, #120	; 0x78
 80228b0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
 80228b4:	4659      	mov	r1, fp
 80228b6:	4610      	mov	r0, r2
 80228b8:	9207      	str	r2, [sp, #28]
 80228ba:	f7fe fc45 	bl	8021148 <mbedtls_mpi_copy>
 80228be:	2800      	cmp	r0, #0
 80228c0:	f040 82ff 	bne.w	8022ec2 <mbedtls_mpi_exp_mod+0x87e>
 80228c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80228c6:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80228ca:	46c1      	mov	r9, r8
 80228cc:	46a0      	mov	r8, r4
 80228ce:	4604      	mov	r4, r0
 80228d0:	9a07      	ldr	r2, [sp, #28]
 80228d2:	9e04      	ldr	r6, [sp, #16]
 80228d4:	f102 0b08 	add.w	fp, r2, #8
 80228d8:	1d11      	adds	r1, r2, #4
            mpi_montmul( &W[j], &W[j], N, mm, &T );
 80228da:	a817      	add	r0, sp, #92	; 0x5c
 80228dc:	9003      	str	r0, [sp, #12]
 80228de:	980a      	ldr	r0, [sp, #40]	; 0x28
 80228e0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80228e2:	9001      	str	r0, [sp, #4]
 80228e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80228e6:	9202      	str	r2, [sp, #8]
 80228e8:	9000      	str	r0, [sp, #0]
 80228ea:	465a      	mov	r2, fp
 80228ec:	4658      	mov	r0, fp
        for( i = 0; i < wsize - 1; i++ )
 80228ee:	3401      	adds	r4, #1
            mpi_montmul( &W[j], &W[j], N, mm, &T );
 80228f0:	9307      	str	r3, [sp, #28]
 80228f2:	9104      	str	r1, [sp, #16]
 80228f4:	f7fe fad8 	bl	8020ea8 <mpi_montmul.isra.0>
        for( i = 0; i < wsize - 1; i++ )
 80228f8:	42ac      	cmp	r4, r5
 80228fa:	9904      	ldr	r1, [sp, #16]
 80228fc:	9b07      	ldr	r3, [sp, #28]
 80228fe:	d3ec      	bcc.n	80228da <mbedtls_mpi_exp_mod+0x296>
        for( i = j + 1; i < ( one << wsize ); i++ )
 8022900:	9a08      	ldr	r2, [sp, #32]
 8022902:	4644      	mov	r4, r8
 8022904:	42b2      	cmp	r2, r6
 8022906:	46c8      	mov	r8, r9
 8022908:	4615      	mov	r5, r2
 802290a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 802290e:	9604      	str	r6, [sp, #16]
 8022910:	f080 81aa 	bcs.w	8022c68 <mbedtls_mpi_exp_mod+0x624>
 8022914:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022918:	a91e      	add	r1, sp, #120	; 0x78
            mpi_montmul( &W[i], &W[1], N, mm, &T );
 802291a:	e9cd 4a07 	strd	r4, sl, [sp, #28]
 802291e:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8022922:	46b2      	mov	sl, r6
 8022924:	4698      	mov	r8, r3
 8022926:	eb01 0b82 	add.w	fp, r1, r2, lsl #2
 802292a:	e01c      	b.n	8022966 <mbedtls_mpi_exp_mod+0x322>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
 802292c:	4658      	mov	r0, fp
 802292e:	f1ab 010c 	sub.w	r1, fp, #12
 8022932:	f7fe fc09 	bl	8021148 <mbedtls_mpi_copy>
 8022936:	4602      	mov	r2, r0
            mpi_montmul( &W[i], &W[1], N, mm, &T );
 8022938:	f10b 0008 	add.w	r0, fp, #8
 802293c:	f10b 0b0c 	add.w	fp, fp, #12
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
 8022940:	2a00      	cmp	r2, #0
 8022942:	f040 82c0 	bne.w	8022ec6 <mbedtls_mpi_exp_mod+0x882>
            mpi_montmul( &W[i], &W[1], N, mm, &T );
 8022946:	aa17      	add	r2, sp, #92	; 0x5c
 8022948:	9203      	str	r2, [sp, #12]
 802294a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802294c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802294e:	9201      	str	r2, [sp, #4]
 8022950:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022952:	9302      	str	r3, [sp, #8]
 8022954:	9200      	str	r2, [sp, #0]
 8022956:	4643      	mov	r3, r8
 8022958:	aa23      	add	r2, sp, #140	; 0x8c
 802295a:	a922      	add	r1, sp, #136	; 0x88
 802295c:	f7fe faa4 	bl	8020ea8 <mpi_montmul.isra.0>
        for( i = j + 1; i < ( one << wsize ); i++ )
 8022960:	4555      	cmp	r5, sl
 8022962:	f080 8179 	bcs.w	8022c58 <mbedtls_mpi_exp_mod+0x614>
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 8022966:	f242 7310 	movw	r3, #10000	; 0x2710
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
 802296a:	f8d9 4004 	ldr.w	r4, [r9, #4]
        for( i = j + 1; i < ( one << wsize ); i++ )
 802296e:	3501      	adds	r5, #1
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
 8022970:	3401      	adds	r4, #1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 8022972:	429c      	cmp	r4, r3
 8022974:	f200 829f 	bhi.w	8022eb6 <mbedtls_mpi_exp_mod+0x872>
    if( X->n < nblimbs )
 8022978:	f8db 6004 	ldr.w	r6, [fp, #4]
 802297c:	42b4      	cmp	r4, r6
 802297e:	d9d5      	bls.n	802292c <mbedtls_mpi_exp_mod+0x2e8>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 8022980:	2104      	movs	r1, #4
 8022982:	4620      	mov	r0, r4
 8022984:	f00d f9f8 	bl	802fd78 <calloc>
            memcpy( p, X->p, X->n * ciL );
 8022988:	00b2      	lsls	r2, r6, #2
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 802298a:	4606      	mov	r6, r0
 802298c:	2800      	cmp	r0, #0
 802298e:	f000 8292 	beq.w	8022eb6 <mbedtls_mpi_exp_mod+0x872>
        if( X->p != NULL )
 8022992:	f8db 3008 	ldr.w	r3, [fp, #8]
 8022996:	b173      	cbz	r3, 80229b6 <mbedtls_mpi_exp_mod+0x372>
            memcpy( p, X->p, X->n * ciL );
 8022998:	4619      	mov	r1, r3
 802299a:	920d      	str	r2, [sp, #52]	; 0x34
 802299c:	9304      	str	r3, [sp, #16]
 802299e:	f00d fa3b 	bl	802fe18 <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
 80229a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80229a4:	9b04      	ldr	r3, [sp, #16]
 80229a6:	4611      	mov	r1, r2
 80229a8:	4618      	mov	r0, r3
 80229aa:	f005 f8bf 	bl	8027b2c <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
 80229ae:	f8db 0008 	ldr.w	r0, [fp, #8]
 80229b2:	f00d fa1b 	bl	802fdec <free>
        X->p = p;
 80229b6:	e9cb 4601 	strd	r4, r6, [fp, #4]
 80229ba:	e7b7      	b.n	802292c <mbedtls_mpi_exp_mod+0x2e8>
 80229bc:	2321      	movs	r3, #33	; 0x21
 80229be:	9308      	str	r3, [sp, #32]
 80229c0:	2340      	movs	r3, #64	; 0x40
 80229c2:	9304      	str	r3, [sp, #16]
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
 80229c4:	2306      	movs	r3, #6
 80229c6:	2420      	movs	r4, #32
 80229c8:	2505      	movs	r5, #5
 80229ca:	9306      	str	r3, [sp, #24]
 80229cc:	e6dc      	b.n	8022788 <mbedtls_mpi_exp_mod+0x144>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 80229ce:	2104      	movs	r1, #4
 80229d0:	4638      	mov	r0, r7
 80229d2:	9209      	str	r2, [sp, #36]	; 0x24
 80229d4:	f00d f9d0 	bl	802fd78 <calloc>
 80229d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80229da:	4603      	mov	r3, r0
 80229dc:	2800      	cmp	r0, #0
 80229de:	f000 826d 	beq.w	8022ebc <mbedtls_mpi_exp_mod+0x878>
        if( X->p != NULL )
 80229e2:	f8da b008 	ldr.w	fp, [sl, #8]
 80229e6:	f1bb 0f00 	cmp.w	fp, #0
 80229ea:	d03f      	beq.n	8022a6c <mbedtls_mpi_exp_mod+0x428>
            memcpy( p, X->p, X->n * ciL );
 80229ec:	0092      	lsls	r2, r2, #2
 80229ee:	4659      	mov	r1, fp
 80229f0:	9209      	str	r2, [sp, #36]	; 0x24
 80229f2:	900a      	str	r0, [sp, #40]	; 0x28
 80229f4:	f00d fa10 	bl	802fe18 <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
 80229f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80229fa:	4658      	mov	r0, fp
 80229fc:	4611      	mov	r1, r2
 80229fe:	f005 f895 	bl	8027b2c <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
 8022a02:	f8da 0008 	ldr.w	r0, [sl, #8]
 8022a06:	f00d f9f1 	bl	802fdec <free>
 8022a0a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8022a0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if( X->n < nblimbs )
 8022a0e:	4297      	cmp	r7, r2
        X->p = p;
 8022a10:	e9ca 7301 	strd	r7, r3, [sl, #4]
    if( X->n < nblimbs )
 8022a14:	f67f aec7 	bls.w	80227a6 <mbedtls_mpi_exp_mod+0x162>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 8022a18:	2104      	movs	r1, #4
 8022a1a:	4638      	mov	r0, r7
 8022a1c:	9209      	str	r2, [sp, #36]	; 0x24
 8022a1e:	f00d f9ab 	bl	802fd78 <calloc>
 8022a22:	4683      	mov	fp, r0
 8022a24:	2800      	cmp	r0, #0
 8022a26:	f000 8249 	beq.w	8022ebc <mbedtls_mpi_exp_mod+0x878>
        if( X->p != NULL )
 8022a2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022a2c:	b17b      	cbz	r3, 8022a4e <mbedtls_mpi_exp_mod+0x40a>
            memcpy( p, X->p, X->n * ciL );
 8022a2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022a30:	4619      	mov	r1, r3
 8022a32:	0092      	lsls	r2, r2, #2
 8022a34:	920a      	str	r2, [sp, #40]	; 0x28
 8022a36:	9309      	str	r3, [sp, #36]	; 0x24
 8022a38:	f00d f9ee 	bl	802fe18 <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
 8022a3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022a40:	4611      	mov	r1, r2
 8022a42:	4618      	mov	r0, r3
 8022a44:	f005 f872 	bl	8027b2c <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
 8022a48:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8022a4a:	f00d f9cf 	bl	802fdec <free>
        X->p = p;
 8022a4e:	e9cd 7b22 	strd	r7, fp, [sp, #136]	; 0x88
 8022a52:	e6a8      	b.n	80227a6 <mbedtls_mpi_exp_mod+0x162>
    for( i = X->n - 1; i > 0; i-- )
 8022a54:	2120      	movs	r1, #32
 8022a56:	6810      	ldr	r0, [r2, #0]
 8022a58:	e665      	b.n	8022726 <mbedtls_mpi_exp_mod+0xe2>
 8022a5a:	2311      	movs	r3, #17
 8022a5c:	9308      	str	r3, [sp, #32]
 8022a5e:	2320      	movs	r3, #32
 8022a60:	9304      	str	r3, [sp, #16]
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
 8022a62:	2305      	movs	r3, #5
 8022a64:	2410      	movs	r4, #16
 8022a66:	2504      	movs	r5, #4
 8022a68:	9306      	str	r3, [sp, #24]
 8022a6a:	e68d      	b.n	8022788 <mbedtls_mpi_exp_mod+0x144>
 8022a6c:	465a      	mov	r2, fp
 8022a6e:	e7ce      	b.n	8022a0e <mbedtls_mpi_exp_mod+0x3ca>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 8022a70:	2104      	movs	r1, #4
 8022a72:	4658      	mov	r0, fp
 8022a74:	9209      	str	r2, [sp, #36]	; 0x24
 8022a76:	f00d f97f 	bl	802fd78 <calloc>
 8022a7a:	4607      	mov	r7, r0
 8022a7c:	2800      	cmp	r0, #0
 8022a7e:	f000 821d 	beq.w	8022ebc <mbedtls_mpi_exp_mod+0x878>
        if( X->p != NULL )
 8022a82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022a84:	b17b      	cbz	r3, 8022aa6 <mbedtls_mpi_exp_mod+0x462>
            memcpy( p, X->p, X->n * ciL );
 8022a86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022a88:	4619      	mov	r1, r3
 8022a8a:	0092      	lsls	r2, r2, #2
 8022a8c:	920a      	str	r2, [sp, #40]	; 0x28
 8022a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8022a90:	f00d f9c2 	bl	802fe18 <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
 8022a94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022a98:	4611      	mov	r1, r2
 8022a9a:	4618      	mov	r0, r3
 8022a9c:	f005 f846 	bl	8027b2c <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
 8022aa0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8022aa2:	f00d f9a3 	bl	802fdec <free>
        X->p = p;
 8022aa6:	e9cd b716 	strd	fp, r7, [sp, #88]	; 0x58
 8022aaa:	e688      	b.n	80227be <mbedtls_mpi_exp_mod+0x17a>
 8022aac:	2309      	movs	r3, #9
 8022aae:	9308      	str	r3, [sp, #32]
 8022ab0:	2310      	movs	r3, #16
 8022ab2:	9304      	str	r3, [sp, #16]
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
 8022ab4:	2304      	movs	r3, #4
 8022ab6:	2408      	movs	r4, #8
 8022ab8:	2503      	movs	r5, #3
 8022aba:	9306      	str	r3, [sp, #24]
 8022abc:	e664      	b.n	8022788 <mbedtls_mpi_exp_mod+0x144>
    if( X->n < nblimbs )
 8022abe:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 8022ac2:	f1bb 0f00 	cmp.w	fp, #0
 8022ac6:	f000 80aa 	beq.w	8022c1e <mbedtls_mpi_exp_mod+0x5da>
 8022aca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8022acc:	ea4f 028b 	mov.w	r2, fp, lsl #2
    memset( X->p, 0, X->n * ciL );
 8022ad0:	4638      	mov	r0, r7
 8022ad2:	2100      	movs	r1, #0
 8022ad4:	f00d f9c7 	bl	802fe66 <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
 8022ad8:	2301      	movs	r3, #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
 8022ada:	f8d9 1004 	ldr.w	r1, [r9, #4]
    X->p[0] = ( z < 0 ) ? -z : z;
 8022ade:	9a14      	ldr	r2, [sp, #80]	; 0x50
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
 8022ae0:	0189      	lsls	r1, r1, #6
    X->p[0] = ( z < 0 ) ? -z : z;
 8022ae2:	6013      	str	r3, [r2, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
 8022ae4:	a812      	add	r0, sp, #72	; 0x48
    X->s    = ( z < 0 ) ? -1 : 1;
 8022ae6:	9312      	str	r3, [sp, #72]	; 0x48
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
 8022ae8:	f7fe fd18 	bl	802151c <mbedtls_mpi_shift_l>
 8022aec:	4607      	mov	r7, r0
 8022aee:	2800      	cmp	r0, #0
 8022af0:	d070      	beq.n	8022bd4 <mbedtls_mpi_exp_mod+0x590>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 8022af2:	9b04      	ldr	r3, [sp, #16]
 8022af4:	42a3      	cmp	r3, r4
 8022af6:	d91c      	bls.n	8022b32 <mbedtls_mpi_exp_mod+0x4ee>
    X->s = 1;
 8022af8:	f04f 0801 	mov.w	r8, #1
    X->n = 0;
 8022afc:	f04f 0900 	mov.w	r9, #0
 8022b00:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8022b04:	ab1e      	add	r3, sp, #120	; 0x78
 8022b06:	9e04      	ldr	r6, [sp, #16]
 8022b08:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    if( X->p != NULL )
 8022b0c:	68a8      	ldr	r0, [r5, #8]
 8022b0e:	2800      	cmp	r0, #0
 8022b10:	d051      	beq.n	8022bb6 <mbedtls_mpi_exp_mod+0x572>
    mbedtls_platform_zeroize( v, ciL * n );
 8022b12:	6869      	ldr	r1, [r5, #4]
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 8022b14:	3401      	adds	r4, #1
    mbedtls_platform_zeroize( v, ciL * n );
 8022b16:	0089      	lsls	r1, r1, #2
 8022b18:	f005 f808 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 8022b1c:	68a8      	ldr	r0, [r5, #8]
 8022b1e:	f00d f965 	bl	802fdec <free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 8022b22:	42a6      	cmp	r6, r4
    X->n = 0;
 8022b24:	e9c5 8900 	strd	r8, r9, [r5]
    X->p = NULL;
 8022b28:	f8c5 9008 	str.w	r9, [r5, #8]
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 8022b2c:	f105 050c 	add.w	r5, r5, #12
 8022b30:	d8ec      	bhi.n	8022b0c <mbedtls_mpi_exp_mod+0x4c8>
    if( X->p != NULL )
 8022b32:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8022b34:	b130      	cbz	r0, 8022b44 <mbedtls_mpi_exp_mod+0x500>
    mbedtls_platform_zeroize( v, ciL * n );
 8022b36:	9922      	ldr	r1, [sp, #136]	; 0x88
 8022b38:	0089      	lsls	r1, r1, #2
 8022b3a:	f004 fff7 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 8022b3e:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8022b40:	f00d f954 	bl	802fdec <free>
    X->s = 1;
 8022b44:	2201      	movs	r2, #1
    X->n = 0;
 8022b46:	2300      	movs	r3, #0
    if( X->p != NULL )
 8022b48:	9817      	ldr	r0, [sp, #92]	; 0x5c
    X->p = NULL;
 8022b4a:	e9cd 3322 	strd	r3, r3, [sp, #136]	; 0x88
    X->s = 1;
 8022b4e:	9221      	str	r2, [sp, #132]	; 0x84
    if( X->p != NULL )
 8022b50:	b130      	cbz	r0, 8022b60 <mbedtls_mpi_exp_mod+0x51c>
    mbedtls_platform_zeroize( v, ciL * n );
 8022b52:	9916      	ldr	r1, [sp, #88]	; 0x58
 8022b54:	0089      	lsls	r1, r1, #2
 8022b56:	f004 ffe9 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 8022b5a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8022b5c:	f00d f946 	bl	802fdec <free>
    X->s = 1;
 8022b60:	2201      	movs	r2, #1
    X->n = 0;
 8022b62:	2300      	movs	r3, #0
    if( X->p != NULL )
 8022b64:	981a      	ldr	r0, [sp, #104]	; 0x68
    X->p = NULL;
 8022b66:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
    X->s = 1;
 8022b6a:	9215      	str	r2, [sp, #84]	; 0x54
    if( X->p != NULL )
 8022b6c:	b130      	cbz	r0, 8022b7c <mbedtls_mpi_exp_mod+0x538>
    mbedtls_platform_zeroize( v, ciL * n );
 8022b6e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8022b70:	0089      	lsls	r1, r1, #2
 8022b72:	f004 ffdb 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 8022b76:	981a      	ldr	r0, [sp, #104]	; 0x68
 8022b78:	f00d f938 	bl	802fdec <free>
    X->n = 0;
 8022b7c:	2300      	movs	r3, #0
 8022b7e:	2201      	movs	r2, #1
    X->p = NULL;
 8022b80:	931a      	str	r3, [sp, #104]	; 0x68
    X->n = 0;
 8022b82:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    if( _RR == NULL || _RR->p == NULL )
 8022b86:	9bec      	ldr	r3, [sp, #944]	; 0x3b0
 8022b88:	b11b      	cbz	r3, 8022b92 <mbedtls_mpi_exp_mod+0x54e>
 8022b8a:	689b      	ldr	r3, [r3, #8]
 8022b8c:	2b00      	cmp	r3, #0
 8022b8e:	f47f adee 	bne.w	802276e <mbedtls_mpi_exp_mod+0x12a>
    if( X->p != NULL )
 8022b92:	9814      	ldr	r0, [sp, #80]	; 0x50
 8022b94:	2800      	cmp	r0, #0
 8022b96:	f43f adea 	beq.w	802276e <mbedtls_mpi_exp_mod+0x12a>
    mbedtls_platform_zeroize( v, ciL * n );
 8022b9a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8022b9c:	0089      	lsls	r1, r1, #2
 8022b9e:	f004 ffc5 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 8022ba2:	9814      	ldr	r0, [sp, #80]	; 0x50
 8022ba4:	f00d f922 	bl	802fdec <free>
}
 8022ba8:	4638      	mov	r0, r7
 8022baa:	f50d 7d5f 	add.w	sp, sp, #892	; 0x37c
 8022bae:	ecbd 8b04 	vpop	{d8-d9}
 8022bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 8022bb6:	3401      	adds	r4, #1
 8022bb8:	42a6      	cmp	r6, r4
    X->n = 0;
 8022bba:	e9c5 8000 	strd	r8, r0, [r5]
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 8022bbe:	f105 050c 	add.w	r5, r5, #12
 8022bc2:	d8a3      	bhi.n	8022b0c <mbedtls_mpi_exp_mod+0x4c8>
 8022bc4:	e7b5      	b.n	8022b32 <mbedtls_mpi_exp_mod+0x4ee>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
 8022bc6:	f7fe fabf 	bl	8021148 <mbedtls_mpi_copy>
 8022bca:	4607      	mov	r7, r0
 8022bcc:	2800      	cmp	r0, #0
 8022bce:	f43f ae1b 	beq.w	8022808 <mbedtls_mpi_exp_mod+0x1c4>
 8022bd2:	e78e      	b.n	8022af2 <mbedtls_mpi_exp_mod+0x4ae>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
 8022bd4:	a912      	add	r1, sp, #72	; 0x48
 8022bd6:	464a      	mov	r2, r9
 8022bd8:	4608      	mov	r0, r1
 8022bda:	f7ff fcad 	bl	8022538 <mbedtls_mpi_mod_mpi>
 8022bde:	4607      	mov	r7, r0
 8022be0:	2800      	cmp	r0, #0
 8022be2:	d186      	bne.n	8022af2 <mbedtls_mpi_exp_mod+0x4ae>
        if( _RR != NULL )
 8022be4:	9bec      	ldr	r3, [sp, #944]	; 0x3b0
 8022be6:	2b00      	cmp	r3, #0
 8022be8:	f43f adfc 	beq.w	80227e4 <mbedtls_mpi_exp_mod+0x1a0>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
 8022bec:	ab12      	add	r3, sp, #72	; 0x48
 8022bee:	cb07      	ldmia	r3!, {r0, r1, r2}
 8022bf0:	9bec      	ldr	r3, [sp, #944]	; 0x3b0
 8022bf2:	6018      	str	r0, [r3, #0]
 8022bf4:	6059      	str	r1, [r3, #4]
 8022bf6:	609a      	str	r2, [r3, #8]
 8022bf8:	e5f4      	b.n	80227e4 <mbedtls_mpi_exp_mod+0x1a0>
 8022bfa:	f8d8 3008 	ldr.w	r3, [r8, #8]
    for( i = X->n - 1; i > 0; i-- )
 8022bfe:	2120      	movs	r1, #32
 8022c00:	6818      	ldr	r0, [r3, #0]
 8022c02:	e590      	b.n	8022726 <mbedtls_mpi_exp_mod+0xe2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
 8022c04:	4631      	mov	r1, r6
 8022c06:	a818      	add	r0, sp, #96	; 0x60
 8022c08:	f7fe fa9e 	bl	8021148 <mbedtls_mpi_copy>
 8022c0c:	4607      	mov	r7, r0
 8022c0e:	2800      	cmp	r0, #0
 8022c10:	f47f af6f 	bne.w	8022af2 <mbedtls_mpi_exp_mod+0x4ae>
        Apos.s = 1;
 8022c14:	2301      	movs	r3, #1
        A = &Apos;
 8022c16:	aa18      	add	r2, sp, #96	; 0x60
 8022c18:	4616      	mov	r6, r2
        Apos.s = 1;
 8022c1a:	9318      	str	r3, [sp, #96]	; 0x60
        A = &Apos;
 8022c1c:	e5d4      	b.n	80227c8 <mbedtls_mpi_exp_mod+0x184>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 8022c1e:	2104      	movs	r1, #4
 8022c20:	2001      	movs	r0, #1
 8022c22:	f00d f8a9 	bl	802fd78 <calloc>
 8022c26:	4607      	mov	r7, r0
 8022c28:	2800      	cmp	r0, #0
 8022c2a:	f000 8147 	beq.w	8022ebc <mbedtls_mpi_exp_mod+0x878>
        if( X->p != NULL )
 8022c2e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8022c30:	b128      	cbz	r0, 8022c3e <mbedtls_mpi_exp_mod+0x5fa>
    mbedtls_platform_zeroize( v, ciL * n );
 8022c32:	4659      	mov	r1, fp
 8022c34:	f004 ff7a 	bl	8027b2c <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
 8022c38:	9814      	ldr	r0, [sp, #80]	; 0x50
 8022c3a:	f00d f8d7 	bl	802fdec <free>
        X->n = nblimbs;
 8022c3e:	2301      	movs	r3, #1
        X->p = p;
 8022c40:	2204      	movs	r2, #4
        X->n = nblimbs;
 8022c42:	e9cd 3713 	strd	r3, r7, [sp, #76]	; 0x4c
        X->p = p;
 8022c46:	e743      	b.n	8022ad0 <mbedtls_mpi_exp_mod+0x48c>
 8022c48:	2302      	movs	r3, #2
 8022c4a:	9a05      	ldr	r2, [sp, #20]
 8022c4c:	2500      	movs	r5, #0
 8022c4e:	4614      	mov	r4, r2
 8022c50:	9308      	str	r3, [sp, #32]
 8022c52:	9304      	str	r3, [sp, #16]
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
 8022c54:	9206      	str	r2, [sp, #24]
 8022c56:	e597      	b.n	8022788 <mbedtls_mpi_exp_mod+0x144>
 8022c58:	4643      	mov	r3, r8
 8022c5a:	f8cd a010 	str.w	sl, [sp, #16]
 8022c5e:	9c07      	ldr	r4, [sp, #28]
 8022c60:	f8dd a020 	ldr.w	sl, [sp, #32]
 8022c64:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    state   = 0;
 8022c68:	2200      	movs	r2, #0
 8022c6a:	f10a 0104 	add.w	r1, sl, #4
 8022c6e:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
    nbits   = 0;
 8022c72:	4616      	mov	r6, r2
 8022c74:	46a1      	mov	r9, r4
    bufsize = 0;
 8022c76:	4615      	mov	r5, r2
 8022c78:	ee09 1a10 	vmov	s18, r1
 8022c7c:	4614      	mov	r4, r2
    nblimbs = E->n;
 8022c7e:	f8d8 b004 	ldr.w	fp, [r8, #4]
    wbits   = 0;
 8022c82:	9207      	str	r2, [sp, #28]
        if( bufsize == 0 )
 8022c84:	b1dd      	cbz	r5, 8022cbe <mbedtls_mpi_exp_mod+0x67a>
 8022c86:	3d01      	subs	r5, #1
        ei = (E->p[nblimbs] >> bufsize) & 1;
 8022c88:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8022c8c:	f852 202b 	ldr.w	r2, [r2, fp, lsl #2]
 8022c90:	40ea      	lsrs	r2, r5
        if( ei == 0 && state == 0 )
 8022c92:	f012 0201 	ands.w	r2, r2, #1
 8022c96:	d104      	bne.n	8022ca2 <mbedtls_mpi_exp_mod+0x65e>
 8022c98:	2c00      	cmp	r4, #0
 8022c9a:	d0f3      	beq.n	8022c84 <mbedtls_mpi_exp_mod+0x640>
        if( ei == 0 && state == 1 )
 8022c9c:	2c01      	cmp	r4, #1
 8022c9e:	f000 80cd 	beq.w	8022e3c <mbedtls_mpi_exp_mod+0x7f8>
        wbits |= ( ei << ( wsize - nbits ) );
 8022ca2:	9806      	ldr	r0, [sp, #24]
        nbits++;
 8022ca4:	1c71      	adds	r1, r6, #1
        wbits |= ( ei << ( wsize - nbits ) );
 8022ca6:	1a44      	subs	r4, r0, r1
 8022ca8:	40a2      	lsls	r2, r4
 8022caa:	9c07      	ldr	r4, [sp, #28]
        if( nbits == wsize )
 8022cac:	4288      	cmp	r0, r1
        wbits |= ( ei << ( wsize - nbits ) );
 8022cae:	ea44 0402 	orr.w	r4, r4, r2
 8022cb2:	9407      	str	r4, [sp, #28]
        if( nbits == wsize )
 8022cb4:	d00a      	beq.n	8022ccc <mbedtls_mpi_exp_mod+0x688>
 8022cb6:	460e      	mov	r6, r1
        state = 2;
 8022cb8:	2402      	movs	r4, #2
        if( bufsize == 0 )
 8022cba:	2d00      	cmp	r5, #0
 8022cbc:	d1e3      	bne.n	8022c86 <mbedtls_mpi_exp_mod+0x642>
            if( nblimbs == 0 )
 8022cbe:	f1bb 0f00 	cmp.w	fp, #0
 8022cc2:	d049      	beq.n	8022d58 <mbedtls_mpi_exp_mod+0x714>
            nblimbs--;
 8022cc4:	251f      	movs	r5, #31
 8022cc6:	f10b 3bff 	add.w	fp, fp, #4294967295
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
 8022cca:	e7dd      	b.n	8022c88 <mbedtls_mpi_exp_mod+0x644>
            for( i = 0; i < wsize; i++ )
 8022ccc:	ee08 7a10 	vmov	s16, r7
 8022cd0:	9508      	str	r5, [sp, #32]
 8022cd2:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8022cd6:	2400      	movs	r4, #0
 8022cd8:	461d      	mov	r5, r3
 8022cda:	ee18 aa90 	vmov	sl, s17
 8022cde:	ee19 7a10 	vmov	r7, s18
 8022ce2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8022ce6:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8022cea:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8022cee:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
                mpi_montmul( X, X, N, mm, &T );
 8022cf2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8022cf4:	ab17      	add	r3, sp, #92	; 0x5c
 8022cf6:	9303      	str	r3, [sp, #12]
 8022cf8:	9202      	str	r2, [sp, #8]
 8022cfa:	462b      	mov	r3, r5
 8022cfc:	4652      	mov	r2, sl
 8022cfe:	4639      	mov	r1, r7
 8022d00:	4650      	mov	r0, sl
 8022d02:	e9cd 8900 	strd	r8, r9, [sp]
 8022d06:	f7fe f8cf 	bl	8020ea8 <mpi_montmul.isra.0>
            for( i = 0; i < wsize; i++ )
 8022d0a:	42a6      	cmp	r6, r4
 8022d0c:	f104 0401 	add.w	r4, r4, #1
 8022d10:	d1ef      	bne.n	8022cf2 <mbedtls_mpi_exp_mod+0x6ae>
            mpi_montmul( X, &W[wbits], N, mm, &T );
 8022d12:	e9dd a80d 	ldrd	sl, r8, [sp, #52]	; 0x34
 8022d16:	462b      	mov	r3, r5
            nbits = 0;
 8022d18:	2600      	movs	r6, #0
            mpi_montmul( X, &W[wbits], N, mm, &T );
 8022d1a:	9a07      	ldr	r2, [sp, #28]
 8022d1c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8022d1e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8022d22:	aa1e      	add	r2, sp, #120	; 0x78
 8022d24:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8022d28:	aa17      	add	r2, sp, #92	; 0x5c
 8022d2a:	9203      	str	r2, [sp, #12]
 8022d2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022d2e:	9402      	str	r4, [sp, #8]
 8022d30:	9201      	str	r2, [sp, #4]
 8022d32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022d34:	ee18 0a90 	vmov	r0, s17
 8022d38:	9200      	str	r2, [sp, #0]
 8022d3a:	f101 0208 	add.w	r2, r1, #8
 8022d3e:	3104      	adds	r1, #4
 8022d40:	9d08      	ldr	r5, [sp, #32]
 8022d42:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8022d46:	9308      	str	r3, [sp, #32]
            nbits = 0;
 8022d48:	9607      	str	r6, [sp, #28]
 8022d4a:	ee18 7a10 	vmov	r7, s16
            mpi_montmul( X, &W[wbits], N, mm, &T );
 8022d4e:	f7fe f8ab 	bl	8020ea8 <mpi_montmul.isra.0>
            state--;
 8022d52:	9c05      	ldr	r4, [sp, #20]
 8022d54:	9b08      	ldr	r3, [sp, #32]
 8022d56:	e795      	b.n	8022c84 <mbedtls_mpi_exp_mod+0x640>
    for( i = 0; i < nbits; i++ )
 8022d58:	464c      	mov	r4, r9
 8022d5a:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8022d5e:	2e00      	cmp	r6, #0
 8022d60:	d03f      	beq.n	8022de2 <mbedtls_mpi_exp_mod+0x79e>
 8022d62:	f10a 0504 	add.w	r5, sl, #4
            mpi_montmul( X, &W[1], N, mm, &T );
 8022d66:	ee08 7a10 	vmov	s16, r7
 8022d6a:	9405      	str	r4, [sp, #20]
 8022d6c:	f8cd a018 	str.w	sl, [sp, #24]
 8022d70:	9c07      	ldr	r4, [sp, #28]
 8022d72:	46b2      	mov	sl, r6
 8022d74:	f8cd 801c 	str.w	r8, [sp, #28]
 8022d78:	f8cd 9020 	str.w	r9, [sp, #32]
 8022d7c:	46a8      	mov	r8, r5
 8022d7e:	ee18 7a90 	vmov	r7, s17
 8022d82:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8022d84:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8022d88:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8022d8a:	e001      	b.n	8022d90 <mbedtls_mpi_exp_mod+0x74c>
    for( i = 0; i < nbits; i++ )
 8022d8c:	45da      	cmp	sl, fp
 8022d8e:	d01f      	beq.n	8022dd0 <mbedtls_mpi_exp_mod+0x78c>
        mpi_montmul( X, X, N, mm, &T );
 8022d90:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8022d92:	a917      	add	r1, sp, #92	; 0x5c
 8022d94:	9103      	str	r1, [sp, #12]
 8022d96:	9202      	str	r2, [sp, #8]
 8022d98:	4641      	mov	r1, r8
 8022d9a:	463a      	mov	r2, r7
 8022d9c:	4638      	mov	r0, r7
 8022d9e:	e9cd 6500 	strd	r6, r5, [sp]
        wbits <<= 1;
 8022da2:	0064      	lsls	r4, r4, #1
        mpi_montmul( X, X, N, mm, &T );
 8022da4:	9304      	str	r3, [sp, #16]
 8022da6:	f7fe f87f 	bl	8020ea8 <mpi_montmul.isra.0>
        if( ( wbits & ( one << wsize ) ) != 0 )
 8022daa:	ea19 0f04 	tst.w	r9, r4
 8022dae:	9b04      	ldr	r3, [sp, #16]
    for( i = 0; i < nbits; i++ )
 8022db0:	f10b 0b01 	add.w	fp, fp, #1
        if( ( wbits & ( one << wsize ) ) != 0 )
 8022db4:	d0ea      	beq.n	8022d8c <mbedtls_mpi_exp_mod+0x748>
            mpi_montmul( X, &W[1], N, mm, &T );
 8022db6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8022db8:	a917      	add	r1, sp, #92	; 0x5c
 8022dba:	9103      	str	r1, [sp, #12]
 8022dbc:	9202      	str	r2, [sp, #8]
 8022dbe:	4638      	mov	r0, r7
 8022dc0:	e9cd 6500 	strd	r6, r5, [sp]
 8022dc4:	aa23      	add	r2, sp, #140	; 0x8c
 8022dc6:	a922      	add	r1, sp, #136	; 0x88
 8022dc8:	f7fe f86e 	bl	8020ea8 <mpi_montmul.isra.0>
 8022dcc:	9b04      	ldr	r3, [sp, #16]
 8022dce:	e7dd      	b.n	8022d8c <mbedtls_mpi_exp_mod+0x748>
 8022dd0:	ee18 7a10 	vmov	r7, s16
 8022dd4:	e9dd a806 	ldrd	sl, r8, [sp, #24]
 8022dd8:	f8cd 9010 	str.w	r9, [sp, #16]
 8022ddc:	9c05      	ldr	r4, [sp, #20]
 8022dde:	f8dd 9020 	ldr.w	r9, [sp, #32]
    mbedtls_mpi_uint z = 1;
 8022de2:	2501      	movs	r5, #1
    mpi_montmul( A, &U, N, mm, T );
 8022de4:	aa17      	add	r2, sp, #92	; 0x5c
 8022de6:	9203      	str	r2, [sp, #12]
 8022de8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022dea:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8022dec:	9201      	str	r2, [sp, #4]
 8022dee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022df0:	9602      	str	r6, [sp, #8]
 8022df2:	9200      	str	r2, [sp, #0]
 8022df4:	ee18 0a90 	vmov	r0, s17
 8022df8:	aa1d      	add	r2, sp, #116	; 0x74
 8022dfa:	a91c      	add	r1, sp, #112	; 0x70
    U.p = &z;
 8022dfc:	ae11      	add	r6, sp, #68	; 0x44
    U.n = U.s = (int) z;
 8022dfe:	e9cd 551b 	strd	r5, r5, [sp, #108]	; 0x6c
    U.p = &z;
 8022e02:	961d      	str	r6, [sp, #116]	; 0x74
    mbedtls_mpi_uint z = 1;
 8022e04:	9511      	str	r5, [sp, #68]	; 0x44
    mpi_montmul( A, &U, N, mm, T );
 8022e06:	f7fe f84f 	bl	8020ea8 <mpi_montmul.isra.0>
    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
 8022e0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022e0c:	3301      	adds	r3, #1
 8022e0e:	f47f ae70 	bne.w	8022af2 <mbedtls_mpi_exp_mod+0x4ae>
 8022e12:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8022e16:	2b00      	cmp	r3, #0
 8022e18:	f43f ae6b 	beq.w	8022af2 <mbedtls_mpi_exp_mod+0x4ae>
 8022e1c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8022e20:	681b      	ldr	r3, [r3, #0]
 8022e22:	07dd      	lsls	r5, r3, #31
 8022e24:	f57f ae65 	bpl.w	8022af2 <mbedtls_mpi_exp_mod+0x4ae>
        X->s = -1;
 8022e28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 8022e2a:	4649      	mov	r1, r9
 8022e2c:	4652      	mov	r2, sl
 8022e2e:	4650      	mov	r0, sl
        X->s = -1;
 8022e30:	f8ca 3000 	str.w	r3, [sl]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 8022e34:	f7fe fe88 	bl	8021b48 <mbedtls_mpi_add_mpi>
 8022e38:	4607      	mov	r7, r0
cleanup:
 8022e3a:	e65a      	b.n	8022af2 <mbedtls_mpi_exp_mod+0x4ae>
            mpi_montmul( X, X, N, mm, &T );
 8022e3c:	a917      	add	r1, sp, #92	; 0x5c
 8022e3e:	9103      	str	r1, [sp, #12]
 8022e40:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022e42:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8022e44:	9101      	str	r1, [sp, #4]
 8022e46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022e48:	9202      	str	r2, [sp, #8]
 8022e4a:	9100      	str	r1, [sp, #0]
 8022e4c:	ee18 2a90 	vmov	r2, s17
 8022e50:	ee19 1a10 	vmov	r1, s18
 8022e54:	ee18 0a90 	vmov	r0, s17
 8022e58:	9308      	str	r3, [sp, #32]
 8022e5a:	f7fe f825 	bl	8020ea8 <mpi_montmul.isra.0>
            continue;
 8022e5e:	9b08      	ldr	r3, [sp, #32]
 8022e60:	e710      	b.n	8022c84 <mbedtls_mpi_exp_mod+0x640>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8022e62:	f06f 070f 	mvn.w	r7, #15
 8022e66:	e647      	b.n	8022af8 <mbedtls_mpi_exp_mod+0x4b4>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 8022e68:	4608      	mov	r0, r1
 8022e6a:	2104      	movs	r1, #4
 8022e6c:	920f      	str	r2, [sp, #60]	; 0x3c
 8022e6e:	930d      	str	r3, [sp, #52]	; 0x34
 8022e70:	f00c ff82 	bl	802fd78 <calloc>
 8022e74:	900c      	str	r0, [sp, #48]	; 0x30
 8022e76:	b308      	cbz	r0, 8022ebc <mbedtls_mpi_exp_mod+0x878>
        if( X->p != NULL )
 8022e78:	68b1      	ldr	r1, [r6, #8]
 8022e7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022e7c:	b189      	cbz	r1, 8022ea2 <mbedtls_mpi_exp_mod+0x85e>
            memcpy( p, X->p, X->n * ciL );
 8022e7e:	ee08 1a10 	vmov	s16, r1
 8022e82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022e84:	930e      	str	r3, [sp, #56]	; 0x38
 8022e86:	0092      	lsls	r2, r2, #2
 8022e88:	920d      	str	r2, [sp, #52]	; 0x34
 8022e8a:	f00c ffc5 	bl	802fe18 <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
 8022e8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022e90:	ee18 0a10 	vmov	r0, s16
 8022e94:	4611      	mov	r1, r2
 8022e96:	f004 fe49 	bl	8027b2c <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
 8022e9a:	68b0      	ldr	r0, [r6, #8]
 8022e9c:	f00c ffa6 	bl	802fdec <free>
 8022ea0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        X->n = nblimbs;
 8022ea2:	0062      	lsls	r2, r4, #1
 8022ea4:	a91e      	add	r1, sp, #120	; 0x78
 8022ea6:	4422      	add	r2, r4
 8022ea8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8022eac:	9907      	ldr	r1, [sp, #28]
 8022eae:	6051      	str	r1, [r2, #4]
        X->p = p;
 8022eb0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022eb2:	6091      	str	r1, [r2, #8]
 8022eb4:	e4f7      	b.n	80228a6 <mbedtls_mpi_exp_mod+0x262>
 8022eb6:	9c07      	ldr	r4, [sp, #28]
 8022eb8:	f8cd a010 	str.w	sl, [sp, #16]
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8022ebc:	f06f 070f 	mvn.w	r7, #15
 8022ec0:	e617      	b.n	8022af2 <mbedtls_mpi_exp_mod+0x4ae>
 8022ec2:	4607      	mov	r7, r0
 8022ec4:	e615      	b.n	8022af2 <mbedtls_mpi_exp_mod+0x4ae>
 8022ec6:	4617      	mov	r7, r2
 8022ec8:	9c07      	ldr	r4, [sp, #28]
 8022eca:	f8cd a010 	str.w	sl, [sp, #16]
 8022ece:	e610      	b.n	8022af2 <mbedtls_mpi_exp_mod+0x4ae>

08022ed0 <mbedtls_mpi_gcd>:
{
 8022ed0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    X->n = 0;
 8022ed4:	2300      	movs	r3, #0
    X->s = 1;
 8022ed6:	2601      	movs	r6, #1
{
 8022ed8:	b087      	sub	sp, #28
 8022eda:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 8022edc:	4668      	mov	r0, sp
{
 8022ede:	4615      	mov	r5, r2
    X->p = NULL;
 8022ee0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8022ee4:	e9cd 3304 	strd	r3, r3, [sp, #16]
    X->s = 1;
 8022ee8:	9600      	str	r6, [sp, #0]
 8022eea:	9603      	str	r6, [sp, #12]
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 8022eec:	f7fe f92c 	bl	8021148 <mbedtls_mpi_copy>
 8022ef0:	4680      	mov	r8, r0
 8022ef2:	b1d0      	cbz	r0, 8022f2a <mbedtls_mpi_gcd+0x5a>
    if( X->p != NULL )
 8022ef4:	9802      	ldr	r0, [sp, #8]
 8022ef6:	b130      	cbz	r0, 8022f06 <mbedtls_mpi_gcd+0x36>
    mbedtls_platform_zeroize( v, ciL * n );
 8022ef8:	9901      	ldr	r1, [sp, #4]
 8022efa:	0089      	lsls	r1, r1, #2
 8022efc:	f004 fe16 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 8022f00:	9802      	ldr	r0, [sp, #8]
 8022f02:	f00c ff73 	bl	802fdec <free>
    X->n = 0;
 8022f06:	2300      	movs	r3, #0
    X->s = 1;
 8022f08:	2201      	movs	r2, #1
    if( X->p != NULL )
 8022f0a:	9805      	ldr	r0, [sp, #20]
    X->n = 0;
 8022f0c:	e9cd 2300 	strd	r2, r3, [sp]
    X->p = NULL;
 8022f10:	9302      	str	r3, [sp, #8]
    if( X->p != NULL )
 8022f12:	b130      	cbz	r0, 8022f22 <mbedtls_mpi_gcd+0x52>
    mbedtls_platform_zeroize( v, ciL * n );
 8022f14:	9904      	ldr	r1, [sp, #16]
 8022f16:	0089      	lsls	r1, r1, #2
 8022f18:	f004 fe08 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 8022f1c:	9805      	ldr	r0, [sp, #20]
 8022f1e:	f00c ff65 	bl	802fdec <free>
}
 8022f22:	4640      	mov	r0, r8
 8022f24:	b007      	add	sp, #28
 8022f26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 8022f2a:	4629      	mov	r1, r5
 8022f2c:	a803      	add	r0, sp, #12
 8022f2e:	f7fe f90b 	bl	8021148 <mbedtls_mpi_copy>
 8022f32:	4680      	mov	r8, r0
 8022f34:	2800      	cmp	r0, #0
 8022f36:	d1dd      	bne.n	8022ef4 <mbedtls_mpi_gcd+0x24>
    for( i = 0; i < X->n; i++ )
 8022f38:	9e01      	ldr	r6, [sp, #4]
 8022f3a:	2e00      	cmp	r6, #0
 8022f3c:	f000 8117 	beq.w	802316e <mbedtls_mpi_gcd+0x29e>
 8022f40:	4607      	mov	r7, r0
 8022f42:	9d02      	ldr	r5, [sp, #8]
 8022f44:	3d04      	subs	r5, #4
        for( j = 0; j < biL; j++, count++ )
 8022f46:	2200      	movs	r2, #0
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 8022f48:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8022f4c:	e004      	b.n	8022f58 <mbedtls_mpi_gcd+0x88>
        for( j = 0; j < biL; j++, count++ )
 8022f4e:	2a20      	cmp	r2, #32
 8022f50:	f100 0001 	add.w	r0, r0, #1
 8022f54:	f000 80ca 	beq.w	80230ec <mbedtls_mpi_gcd+0x21c>
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 8022f58:	fa21 f302 	lsr.w	r3, r1, r2
 8022f5c:	f013 0301 	ands.w	r3, r3, #1
 8022f60:	f102 0201 	add.w	r2, r2, #1
 8022f64:	d0f3      	beq.n	8022f4e <mbedtls_mpi_gcd+0x7e>
    for( i = 0; i < X->n; i++ )
 8022f66:	9d04      	ldr	r5, [sp, #16]
 8022f68:	b1bd      	cbz	r5, 8022f9a <mbedtls_mpi_gcd+0xca>
    size_t i, j, count = 0;
 8022f6a:	2100      	movs	r1, #0
    for( i = 0; i < X->n; i++ )
 8022f6c:	468c      	mov	ip, r1
 8022f6e:	9f05      	ldr	r7, [sp, #20]
 8022f70:	3f04      	subs	r7, #4
        for( j = 0; j < biL; j++, count++ )
 8022f72:	2200      	movs	r2, #0
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 8022f74:	f857 6f04 	ldr.w	r6, [r7, #4]!
 8022f78:	e004      	b.n	8022f84 <mbedtls_mpi_gcd+0xb4>
        for( j = 0; j < biL; j++, count++ )
 8022f7a:	2a20      	cmp	r2, #32
 8022f7c:	f101 0101 	add.w	r1, r1, #1
 8022f80:	f000 80ad 	beq.w	80230de <mbedtls_mpi_gcd+0x20e>
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 8022f84:	fa26 f302 	lsr.w	r3, r6, r2
 8022f88:	f013 0301 	ands.w	r3, r3, #1
 8022f8c:	f102 0201 	add.w	r2, r2, #1
 8022f90:	d0f3      	beq.n	8022f7a <mbedtls_mpi_gcd+0xaa>
 8022f92:	4288      	cmp	r0, r1
 8022f94:	bf28      	it	cs
 8022f96:	4608      	movcs	r0, r1
 8022f98:	4605      	mov	r5, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 8022f9a:	4629      	mov	r1, r5
 8022f9c:	4668      	mov	r0, sp
 8022f9e:	f7fe fb59 	bl	8021654 <mbedtls_mpi_shift_r>
 8022fa2:	4680      	mov	r8, r0
 8022fa4:	2800      	cmp	r0, #0
 8022fa6:	d1a5      	bne.n	8022ef4 <mbedtls_mpi_gcd+0x24>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 8022fa8:	4629      	mov	r1, r5
 8022faa:	a803      	add	r0, sp, #12
 8022fac:	f7fe fb52 	bl	8021654 <mbedtls_mpi_shift_r>
 8022fb0:	4680      	mov	r8, r0
 8022fb2:	2800      	cmp	r0, #0
 8022fb4:	d19e      	bne.n	8022ef4 <mbedtls_mpi_gcd+0x24>
    TA.s = TB.s = 1;
 8022fb6:	2301      	movs	r3, #1
    mbedtls_platform_zeroize( v, ciL * n );
 8022fb8:	4681      	mov	r9, r0
 8022fba:	9f01      	ldr	r7, [sp, #4]
    TA.s = TB.s = 1;
 8022fbc:	9303      	str	r3, [sp, #12]
 8022fbe:	9300      	str	r3, [sp, #0]
    for( i = X->n; i > 0; i-- )
 8022fc0:	2f00      	cmp	r7, #0
 8022fc2:	f000 80c6 	beq.w	8023152 <mbedtls_mpi_gcd+0x282>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 8022fc6:	2601      	movs	r6, #1
        if( X->p[i - 1] != 0 )
 8022fc8:	9802      	ldr	r0, [sp, #8]
 8022fca:	463b      	mov	r3, r7
 8022fcc:	eb00 0287 	add.w	r2, r0, r7, lsl #2
 8022fd0:	e002      	b.n	8022fd8 <mbedtls_mpi_gcd+0x108>
    for( i = X->n; i > 0; i-- )
 8022fd2:	3b01      	subs	r3, #1
 8022fd4:	f000 80bd 	beq.w	8023152 <mbedtls_mpi_gcd+0x282>
        if( X->p[i - 1] != 0 )
 8022fd8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8022fdc:	2900      	cmp	r1, #0
 8022fde:	d0f8      	beq.n	8022fd2 <mbedtls_mpi_gcd+0x102>
    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 8022fe0:	9b00      	ldr	r3, [sp, #0]
 8022fe2:	2b00      	cmp	r3, #0
 8022fe4:	f000 80b5 	beq.w	8023152 <mbedtls_mpi_gcd+0x282>
    size_t i, j, count = 0;
 8022fe8:	2100      	movs	r1, #0
    for( i = 0; i < X->n; i++ )
 8022fea:	468e      	mov	lr, r1
 8022fec:	f1a0 0c04 	sub.w	ip, r0, #4
        for( j = 0; j < biL; j++, count++ )
 8022ff0:	2200      	movs	r2, #0
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 8022ff2:	f85c 0f04 	ldr.w	r0, [ip, #4]!
 8022ff6:	e003      	b.n	8023000 <mbedtls_mpi_gcd+0x130>
        for( j = 0; j < biL; j++, count++ )
 8022ff8:	2a20      	cmp	r2, #32
 8022ffa:	f101 0101 	add.w	r1, r1, #1
 8022ffe:	d049      	beq.n	8023094 <mbedtls_mpi_gcd+0x1c4>
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 8023000:	fa20 f302 	lsr.w	r3, r0, r2
 8023004:	f013 0301 	ands.w	r3, r3, #1
 8023008:	f102 0201 	add.w	r2, r2, #1
 802300c:	d0f4      	beq.n	8022ff8 <mbedtls_mpi_gcd+0x128>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 802300e:	4668      	mov	r0, sp
 8023010:	f7fe fb20 	bl	8021654 <mbedtls_mpi_shift_r>
 8023014:	4680      	mov	r8, r0
 8023016:	2800      	cmp	r0, #0
 8023018:	f47f af6c 	bne.w	8022ef4 <mbedtls_mpi_gcd+0x24>
    for( i = 0; i < X->n; i++ )
 802301c:	9f04      	ldr	r7, [sp, #16]
 802301e:	2f00      	cmp	r7, #0
 8023020:	d06a      	beq.n	80230f8 <mbedtls_mpi_gcd+0x228>
 8023022:	9b05      	ldr	r3, [sp, #20]
 8023024:	f1a3 0c04 	sub.w	ip, r3, #4
        for( j = 0; j < biL; j++, count++ )
 8023028:	2200      	movs	r2, #0
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 802302a:	f85c 1f04 	ldr.w	r1, [ip, #4]!
 802302e:	e003      	b.n	8023038 <mbedtls_mpi_gcd+0x168>
        for( j = 0; j < biL; j++, count++ )
 8023030:	2a20      	cmp	r2, #32
 8023032:	f100 0001 	add.w	r0, r0, #1
 8023036:	d033      	beq.n	80230a0 <mbedtls_mpi_gcd+0x1d0>
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 8023038:	fa21 f302 	lsr.w	r3, r1, r2
 802303c:	f013 0301 	ands.w	r3, r3, #1
 8023040:	f102 0201 	add.w	r2, r2, #1
 8023044:	d0f4      	beq.n	8023030 <mbedtls_mpi_gcd+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 8023046:	4601      	mov	r1, r0
 8023048:	a803      	add	r0, sp, #12
 802304a:	f7fe fb03 	bl	8021654 <mbedtls_mpi_shift_r>
 802304e:	4680      	mov	r8, r0
 8023050:	2800      	cmp	r0, #0
 8023052:	f47f af4f 	bne.w	8022ef4 <mbedtls_mpi_gcd+0x24>
        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
 8023056:	4668      	mov	r0, sp
 8023058:	a903      	add	r1, sp, #12
 802305a:	f7fe fbcb 	bl	80217f4 <mbedtls_mpi_cmp_mpi>
 802305e:	2800      	cmp	r0, #0
 8023060:	db24      	blt.n	80230ac <mbedtls_mpi_gcd+0x1dc>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 8023062:	4669      	mov	r1, sp
 8023064:	4668      	mov	r0, sp
 8023066:	aa03      	add	r2, sp, #12
 8023068:	f7fe fcee 	bl	8021a48 <mbedtls_mpi_sub_abs>
 802306c:	4680      	mov	r8, r0
 802306e:	2800      	cmp	r0, #0
 8023070:	f47f af40 	bne.w	8022ef4 <mbedtls_mpi_gcd+0x24>
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 8023074:	9f01      	ldr	r7, [sp, #4]
 8023076:	2f00      	cmp	r7, #0
 8023078:	d040      	beq.n	80230fc <mbedtls_mpi_gcd+0x22c>
            r1 = X->p[i - 1] << (biL - v1);
 802307a:	9a02      	ldr	r2, [sp, #8]
 802307c:	eb02 0387 	add.w	r3, r2, r7, lsl #2
 8023080:	f853 1d04 	ldr.w	r1, [r3, #-4]!
            X->p[i - 1] |= r0;
 8023084:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
        for( i = X->n; i > 0; i-- )
 8023088:	429a      	cmp	r2, r3
            X->p[i - 1] |= r0;
 802308a:	6018      	str	r0, [r3, #0]
            r1 = X->p[i - 1] << (biL - v1);
 802308c:	ea4f 70c1 	mov.w	r0, r1, lsl #31
        for( i = X->n; i > 0; i-- )
 8023090:	d1f6      	bne.n	8023080 <mbedtls_mpi_gcd+0x1b0>
 8023092:	e795      	b.n	8022fc0 <mbedtls_mpi_gcd+0xf0>
    for( i = 0; i < X->n; i++ )
 8023094:	f10e 0e01 	add.w	lr, lr, #1
 8023098:	4577      	cmp	r7, lr
 802309a:	d1a9      	bne.n	8022ff0 <mbedtls_mpi_gcd+0x120>
    return( 0 );
 802309c:	4619      	mov	r1, r3
 802309e:	e7b6      	b.n	802300e <mbedtls_mpi_gcd+0x13e>
    for( i = 0; i < X->n; i++ )
 80230a0:	f108 0801 	add.w	r8, r8, #1
 80230a4:	45b8      	cmp	r8, r7
 80230a6:	d1bf      	bne.n	8023028 <mbedtls_mpi_gcd+0x158>
    return( 0 );
 80230a8:	4618      	mov	r0, r3
 80230aa:	e7cc      	b.n	8023046 <mbedtls_mpi_gcd+0x176>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 80230ac:	a903      	add	r1, sp, #12
 80230ae:	466a      	mov	r2, sp
 80230b0:	4608      	mov	r0, r1
 80230b2:	f7fe fcc9 	bl	8021a48 <mbedtls_mpi_sub_abs>
 80230b6:	4680      	mov	r8, r0
 80230b8:	2800      	cmp	r0, #0
 80230ba:	f47f af1b 	bne.w	8022ef4 <mbedtls_mpi_gcd+0x24>
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 80230be:	9e04      	ldr	r6, [sp, #16]
 80230c0:	b38e      	cbz	r6, 8023126 <mbedtls_mpi_gcd+0x256>
            r1 = X->p[i - 1] << (biL - v1);
 80230c2:	9a05      	ldr	r2, [sp, #20]
 80230c4:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 80230c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
            X->p[i - 1] |= r0;
 80230cc:	ea40 0051 	orr.w	r0, r0, r1, lsr #1
        for( i = X->n; i > 0; i-- )
 80230d0:	429a      	cmp	r2, r3
            X->p[i - 1] |= r0;
 80230d2:	6018      	str	r0, [r3, #0]
            r1 = X->p[i - 1] << (biL - v1);
 80230d4:	ea4f 70c1 	mov.w	r0, r1, lsl #31
        for( i = X->n; i > 0; i-- )
 80230d8:	d1f6      	bne.n	80230c8 <mbedtls_mpi_gcd+0x1f8>
 80230da:	9f01      	ldr	r7, [sp, #4]
 80230dc:	e770      	b.n	8022fc0 <mbedtls_mpi_gcd+0xf0>
    for( i = 0; i < X->n; i++ )
 80230de:	f10c 0c01 	add.w	ip, ip, #1
 80230e2:	45ac      	cmp	ip, r5
 80230e4:	f47f af45 	bne.w	8022f72 <mbedtls_mpi_gcd+0xa2>
 80230e8:	461d      	mov	r5, r3
 80230ea:	e756      	b.n	8022f9a <mbedtls_mpi_gcd+0xca>
 80230ec:	3701      	adds	r7, #1
 80230ee:	42b7      	cmp	r7, r6
 80230f0:	f47f af29 	bne.w	8022f46 <mbedtls_mpi_gcd+0x76>
    return( 0 );
 80230f4:	4618      	mov	r0, r3
 80230f6:	e736      	b.n	8022f66 <mbedtls_mpi_gcd+0x96>
 80230f8:	4638      	mov	r0, r7
 80230fa:	e7a4      	b.n	8023046 <mbedtls_mpi_gcd+0x176>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 80230fc:	2104      	movs	r1, #4
 80230fe:	2001      	movs	r0, #1
 8023100:	f00c fe3a 	bl	802fd78 <calloc>
 8023104:	4680      	mov	r8, r0
 8023106:	b3a0      	cbz	r0, 8023172 <mbedtls_mpi_gcd+0x2a2>
        if( X->p != NULL )
 8023108:	9802      	ldr	r0, [sp, #8]
 802310a:	b128      	cbz	r0, 8023118 <mbedtls_mpi_gcd+0x248>
    mbedtls_platform_zeroize( v, ciL * n );
 802310c:	4639      	mov	r1, r7
 802310e:	f004 fd0d 	bl	8027b2c <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
 8023112:	9802      	ldr	r0, [sp, #8]
 8023114:	f00c fe6a 	bl	802fdec <free>
    X->s    = ( z < 0 ) ? -1 : 1;
 8023118:	2701      	movs	r7, #1
        X->p = p;
 802311a:	e9cd 6801 	strd	r6, r8, [sp, #4]
    X->p[0] = ( z < 0 ) ? -z : z;
 802311e:	f8c8 9000 	str.w	r9, [r8]
    X->s    = ( z < 0 ) ? -1 : 1;
 8023122:	9600      	str	r6, [sp, #0]
    for( i = X->n; i > 0; i-- )
 8023124:	e750      	b.n	8022fc8 <mbedtls_mpi_gcd+0xf8>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 8023126:	2104      	movs	r1, #4
 8023128:	2001      	movs	r0, #1
 802312a:	f00c fe25 	bl	802fd78 <calloc>
 802312e:	4607      	mov	r7, r0
 8023130:	b1f8      	cbz	r0, 8023172 <mbedtls_mpi_gcd+0x2a2>
        if( X->p != NULL )
 8023132:	9805      	ldr	r0, [sp, #20]
 8023134:	b128      	cbz	r0, 8023142 <mbedtls_mpi_gcd+0x272>
    mbedtls_platform_zeroize( v, ciL * n );
 8023136:	4631      	mov	r1, r6
 8023138:	f004 fcf8 	bl	8027b2c <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
 802313c:	9805      	ldr	r0, [sp, #20]
 802313e:	f00c fe55 	bl	802fdec <free>
        X->n = nblimbs;
 8023142:	2301      	movs	r3, #1
        X->p = p;
 8023144:	9705      	str	r7, [sp, #20]
    X->p[0] = ( z < 0 ) ? -z : z;
 8023146:	f8c7 9000 	str.w	r9, [r7]
    X->s    = ( z < 0 ) ? -1 : 1;
 802314a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 802314e:	9f01      	ldr	r7, [sp, #4]
 8023150:	e736      	b.n	8022fc0 <mbedtls_mpi_gcd+0xf0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 8023152:	4629      	mov	r1, r5
 8023154:	a803      	add	r0, sp, #12
 8023156:	f7fe f9e1 	bl	802151c <mbedtls_mpi_shift_l>
 802315a:	4680      	mov	r8, r0
 802315c:	2800      	cmp	r0, #0
 802315e:	f47f aec9 	bne.w	8022ef4 <mbedtls_mpi_gcd+0x24>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
 8023162:	4620      	mov	r0, r4
 8023164:	a903      	add	r1, sp, #12
 8023166:	f7fd ffef 	bl	8021148 <mbedtls_mpi_copy>
 802316a:	4680      	mov	r8, r0
cleanup:
 802316c:	e6c2      	b.n	8022ef4 <mbedtls_mpi_gcd+0x24>
    return( 0 );
 802316e:	4630      	mov	r0, r6
 8023170:	e6f9      	b.n	8022f66 <mbedtls_mpi_gcd+0x96>
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8023172:	f06f 080f 	mvn.w	r8, #15
 8023176:	e6bd      	b.n	8022ef4 <mbedtls_mpi_gcd+0x24>

08023178 <mbedtls_mpi_fill_random>:
{
 8023178:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t const limbs = CHARS_TO_LIMBS( size );
 802317c:	f011 0503 	ands.w	r5, r1, #3
{
 8023180:	460f      	mov	r7, r1
    size_t const limbs = CHARS_TO_LIMBS( size );
 8023182:	bf18      	it	ne
 8023184:	2501      	movne	r5, #1
    if( X->n != limbs )
 8023186:	6841      	ldr	r1, [r0, #4]
    size_t const limbs = CHARS_TO_LIMBS( size );
 8023188:	eb05 0597 	add.w	r5, r5, r7, lsr #2
    if( X->n != limbs )
 802318c:	42a9      	cmp	r1, r5
{
 802318e:	4604      	mov	r4, r0
 8023190:	4690      	mov	r8, r2
 8023192:	4699      	mov	r9, r3
    size_t const overhead = ( limbs * ciL ) - size;
 8023194:	ea4f 0685 	mov.w	r6, r5, lsl #2
    if( X->n != limbs )
 8023198:	d05b      	beq.n	8023252 <mbedtls_mpi_fill_random+0xda>
    if( X->p != NULL )
 802319a:	6880      	ldr	r0, [r0, #8]
 802319c:	b128      	cbz	r0, 80231aa <mbedtls_mpi_fill_random+0x32>
    mbedtls_platform_zeroize( v, ciL * n );
 802319e:	0089      	lsls	r1, r1, #2
 80231a0:	f004 fcc4 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 80231a4:	68a0      	ldr	r0, [r4, #8]
 80231a6:	f00c fe21 	bl	802fdec <free>
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 80231aa:	f242 7310 	movw	r3, #10000	; 0x2710
    X->n = 0;
 80231ae:	f04f 0a00 	mov.w	sl, #0
    X->s = 1;
 80231b2:	f04f 0b01 	mov.w	fp, #1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 80231b6:	429d      	cmp	r5, r3
    X->n = 0;
 80231b8:	e9c4 ba00 	strd	fp, sl, [r4]
    X->p = NULL;
 80231bc:	f8c4 a008 	str.w	sl, [r4, #8]
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 80231c0:	d84d      	bhi.n	802325e <mbedtls_mpi_fill_random+0xe6>
    if( X->n < nblimbs )
 80231c2:	bb35      	cbnz	r5, 8023212 <mbedtls_mpi_fill_random+0x9a>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 80231c4:	2104      	movs	r1, #4
 80231c6:	2001      	movs	r0, #1
 80231c8:	f00c fdd6 	bl	802fd78 <calloc>
 80231cc:	4682      	mov	sl, r0
 80231ce:	2800      	cmp	r0, #0
 80231d0:	d045      	beq.n	802325e <mbedtls_mpi_fill_random+0xe6>
        if( X->p != NULL )
 80231d2:	68a0      	ldr	r0, [r4, #8]
 80231d4:	b128      	cbz	r0, 80231e2 <mbedtls_mpi_fill_random+0x6a>
    mbedtls_platform_zeroize( v, ciL * n );
 80231d6:	2100      	movs	r1, #0
 80231d8:	f004 fca8 	bl	8027b2c <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
 80231dc:	68a0      	ldr	r0, [r4, #8]
 80231de:	f00c fe05 	bl	802fdec <free>
        X->n = nblimbs;
 80231e2:	2301      	movs	r3, #1
        X->p = p;
 80231e4:	2204      	movs	r2, #4
        X->n = nblimbs;
 80231e6:	e9c4 3a01 	strd	r3, sl, [r4, #4]
    memset( X->p, 0, X->n * ciL );
 80231ea:	2100      	movs	r1, #0
 80231ec:	4650      	mov	r0, sl
 80231ee:	f00c fe3a 	bl	802fe66 <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
 80231f2:	2200      	movs	r2, #0
    X->s    = ( z < 0 ) ? -1 : 1;
 80231f4:	f04f 0c01 	mov.w	ip, #1
    X->p[0] = ( z < 0 ) ? -z : z;
 80231f8:	68a3      	ldr	r3, [r4, #8]
    size_t const overhead = ( limbs * ciL ) - size;
 80231fa:	1bf1      	subs	r1, r6, r7
    X->p[0] = ( z < 0 ) ? -z : z;
 80231fc:	601a      	str	r2, [r3, #0]
    f_rng( p_rng, Xp + overhead, size );
 80231fe:	4648      	mov	r0, r9
 8023200:	463a      	mov	r2, r7
 8023202:	4419      	add	r1, r3
    X->s    = ( z < 0 ) ? -1 : 1;
 8023204:	f8c4 c000 	str.w	ip, [r4]
    f_rng( p_rng, Xp + overhead, size );
 8023208:	47c0      	blx	r8
    if( limbs == 0 )
 802320a:	b99d      	cbnz	r5, 8023234 <mbedtls_mpi_fill_random+0xbc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 802320c:	2000      	movs	r0, #0
}
 802320e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 8023212:	2104      	movs	r1, #4
 8023214:	4628      	mov	r0, r5
 8023216:	f00c fdaf 	bl	802fd78 <calloc>
 802321a:	4601      	mov	r1, r0
 802321c:	b1f8      	cbz	r0, 802325e <mbedtls_mpi_fill_random+0xe6>
    size_t const overhead = ( limbs * ciL ) - size;
 802321e:	1bf3      	subs	r3, r6, r7
        X->p = p;
 8023220:	e9c4 5001 	strd	r5, r0, [r4, #4]
    f_rng( p_rng, Xp + overhead, size );
 8023224:	463a      	mov	r2, r7
    X->p[0] = ( z < 0 ) ? -z : z;
 8023226:	f8c1 a000 	str.w	sl, [r1]
    f_rng( p_rng, Xp + overhead, size );
 802322a:	4648      	mov	r0, r9
 802322c:	4419      	add	r1, r3
    X->s    = ( z < 0 ) ? -1 : 1;
 802322e:	f8c4 b000 	str.w	fp, [r4]
    f_rng( p_rng, Xp + overhead, size );
 8023232:	47c0      	blx	r8
    mpi_bigendian_to_host( X->p, limbs );
 8023234:	68a2      	ldr	r2, [r4, #8]
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
 8023236:	1f33      	subs	r3, r6, #4
 8023238:	18d3      	adds	r3, r2, r3
 802323a:	d2e7      	bcs.n	802320c <mbedtls_mpi_fill_random+0x94>
            return( __builtin_bswap32(x) );
 802323c:	6818      	ldr	r0, [r3, #0]
        tmp             = mpi_uint_bigendian_to_host( *cur_limb_left  );
 802323e:	6811      	ldr	r1, [r2, #0]
            return( __builtin_bswap32(x) );
 8023240:	ba00      	rev	r0, r0
 8023242:	ba09      	rev	r1, r1
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
 8023244:	f842 0b04 	str.w	r0, [r2], #4
        *cur_limb_right = tmp;
 8023248:	f843 1904 	str.w	r1, [r3], #-4
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
 802324c:	429a      	cmp	r2, r3
 802324e:	d9f5      	bls.n	802323c <mbedtls_mpi_fill_random+0xc4>
 8023250:	e7dc      	b.n	802320c <mbedtls_mpi_fill_random+0x94>
    if( X->n < nblimbs )
 8023252:	2d00      	cmp	r5, #0
 8023254:	d0b6      	beq.n	80231c4 <mbedtls_mpi_fill_random+0x4c>
 8023256:	4632      	mov	r2, r6
 8023258:	f8d0 a008 	ldr.w	sl, [r0, #8]
 802325c:	e7c5      	b.n	80231ea <mbedtls_mpi_fill_random+0x72>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 802325e:	f06f 000f 	mvn.w	r0, #15
 8023262:	e7d4      	b.n	802320e <mbedtls_mpi_fill_random+0x96>

08023264 <mpi_miller_rabin>:
 * Miller-Rabin pseudo-primality test  (HAC 4.24)
 */
static int mpi_miller_rabin( const mbedtls_mpi *X, size_t rounds,
                             int (*f_rng)(void *, unsigned char *, size_t),
                             void *p_rng )
{
 8023264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023268:	4605      	mov	r5, r0
    X->n = 0;
 802326a:	2000      	movs	r0, #0
    X->s = 1;
 802326c:	2601      	movs	r6, #1
    s = A->s;
 802326e:	682c      	ldr	r4, [r5, #0]
{
 8023270:	b09d      	sub	sp, #116	; 0x74
 8023272:	4699      	mov	r9, r3
    if( A->s * B->s > 0 )
 8023274:	4284      	cmp	r4, r0
    _B.p = p;
 8023276:	ab09      	add	r3, sp, #36	; 0x24
{
 8023278:	4690      	mov	r8, r2
    _B.n = 1;
 802327a:	e9cd 6619 	strd	r6, r6, [sp, #100]	; 0x64
    X->p = NULL;
 802327e:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
 8023282:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 8023286:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
 802328a:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
 802328e:	e9cd 0017 	strd	r0, r0, [sp, #92]	; 0x5c
{
 8023292:	9103      	str	r1, [sp, #12]
    X->s = 1;
 8023294:	960a      	str	r6, [sp, #40]	; 0x28
 8023296:	960d      	str	r6, [sp, #52]	; 0x34
 8023298:	9610      	str	r6, [sp, #64]	; 0x40
 802329a:	9613      	str	r6, [sp, #76]	; 0x4c
 802329c:	9616      	str	r6, [sp, #88]	; 0x58
    p[0] = ( b < 0 ) ? -b : b;
 802329e:	9609      	str	r6, [sp, #36]	; 0x24
    _B.p = p;
 80232a0:	931b      	str	r3, [sp, #108]	; 0x6c
    if( A->s * B->s > 0 )
 80232a2:	f340 8178 	ble.w	8023596 <mpi_miller_rabin+0x332>
    for( i = X->n; i > 0; i-- )
 80232a6:	686b      	ldr	r3, [r5, #4]
 80232a8:	2b00      	cmp	r3, #0
 80232aa:	f000 8145 	beq.w	8023538 <mpi_miller_rabin+0x2d4>
        if( X->p[i - 1] != 0 )
 80232ae:	68a8      	ldr	r0, [r5, #8]
 80232b0:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 80232b4:	e002      	b.n	80232bc <mpi_miller_rabin+0x58>
    for( i = X->n; i > 0; i-- )
 80232b6:	3b01      	subs	r3, #1
 80232b8:	f000 813e 	beq.w	8023538 <mpi_miller_rabin+0x2d4>
        if( X->p[i - 1] != 0 )
 80232bc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80232c0:	2900      	cmp	r1, #0
 80232c2:	d0f8      	beq.n	80232b6 <mpi_miller_rabin+0x52>
    if( i > j ) return(  1 );
 80232c4:	2b01      	cmp	r3, #1
 80232c6:	f240 8133 	bls.w	8023530 <mpi_miller_rabin+0x2cc>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 80232ca:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 80232ce:	4650      	mov	r0, sl
 80232d0:	4629      	mov	r1, r5
 80232d2:	aa19      	add	r2, sp, #100	; 0x64
 80232d4:	f7fe fbb8 	bl	8021a48 <mbedtls_mpi_sub_abs>
 80232d8:	4606      	mov	r6, r0
 80232da:	2800      	cmp	r0, #0
 80232dc:	f040 80e3 	bne.w	80234a6 <mpi_miller_rabin+0x242>
        X->s = s;
 80232e0:	940a      	str	r4, [sp, #40]	; 0x28
    for( i = 0; i < X->n; i++ )
 80232e2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80232e4:	2e00      	cmp	r6, #0
 80232e6:	f000 819f 	beq.w	8023628 <mpi_miller_rabin+0x3c4>
    size_t i, j, count = 0;
 80232ea:	2400      	movs	r4, #0
    for( i = 0; i < X->n; i++ )
 80232ec:	4627      	mov	r7, r4
 80232ee:	980c      	ldr	r0, [sp, #48]	; 0x30
 80232f0:	3804      	subs	r0, #4
        for( j = 0; j < biL; j++, count++ )
 80232f2:	2200      	movs	r2, #0
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 80232f4:	f850 1f04 	ldr.w	r1, [r0, #4]!
 80232f8:	e004      	b.n	8023304 <mpi_miller_rabin+0xa0>
        for( j = 0; j < biL; j++, count++ )
 80232fa:	2a20      	cmp	r2, #32
 80232fc:	f104 0401 	add.w	r4, r4, #1
 8023300:	f000 8143 	beq.w	802358a <mpi_miller_rabin+0x326>
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 8023304:	fa21 f302 	lsr.w	r3, r1, r2
 8023308:	f013 0301 	ands.w	r3, r3, #1
 802330c:	f102 0201 	add.w	r2, r2, #1
 8023310:	d0f3      	beq.n	80232fa <mpi_miller_rabin+0x96>
     * W = |X| - 1
     * R = W >> lsb( W )
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &W, X, 1 ) );
    s = mbedtls_mpi_lsb( &W );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R, &W ) );
 8023312:	4651      	mov	r1, sl
 8023314:	a80d      	add	r0, sp, #52	; 0x34
 8023316:	f7fd ff17 	bl	8021148 <mbedtls_mpi_copy>
 802331a:	4606      	mov	r6, r0
 802331c:	2800      	cmp	r0, #0
 802331e:	f040 80c2 	bne.w	80234a6 <mpi_miller_rabin+0x242>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &R, s ) );
 8023322:	4621      	mov	r1, r4
 8023324:	a80d      	add	r0, sp, #52	; 0x34
 8023326:	f7fe f995 	bl	8021654 <mbedtls_mpi_shift_r>
 802332a:	4606      	mov	r6, r0
 802332c:	2800      	cmp	r0, #0
 802332e:	f040 80ba 	bne.w	80234a6 <mpi_miller_rabin+0x242>

    for( i = 0; i < rounds; i++ )
 8023332:	9b03      	ldr	r3, [sp, #12]
 8023334:	2b00      	cmp	r3, #0
 8023336:	f000 80b6 	beq.w	80234a6 <mpi_miller_rabin+0x242>
 802333a:	e9cd 0004 	strd	r0, r0, [sp, #16]
    return( 0 );
 802333e:	2720      	movs	r7, #32
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &A, X->n * ciL, f_rng, p_rng ) );

            j = mbedtls_mpi_bitlen( &A );
            k = mbedtls_mpi_bitlen( &W );
            if (j > k) {
                A.p[A.n - 1] &= ( (mbedtls_mpi_uint) 1 << ( k - ( A.n - 1 ) * biL - 1 ) ) - 1;
 8023340:	f04f 3bff 	mov.w	fp, #4294967295
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &A, X->n * ciL, f_rng, p_rng ) );
 8023344:	6869      	ldr	r1, [r5, #4]
 8023346:	464b      	mov	r3, r9
 8023348:	4642      	mov	r2, r8
 802334a:	0089      	lsls	r1, r1, #2
 802334c:	a813      	add	r0, sp, #76	; 0x4c
 802334e:	f7ff ff13 	bl	8023178 <mbedtls_mpi_fill_random>
 8023352:	2800      	cmp	r0, #0
 8023354:	f040 812b 	bne.w	80235ae <mpi_miller_rabin+0x34a>
    if( X->n == 0 )
 8023358:	9e14      	ldr	r6, [sp, #80]	; 0x50
 802335a:	2e00      	cmp	r6, #0
 802335c:	f000 80f9 	beq.w	8023552 <mpi_miller_rabin+0x2ee>
    for( i = X->n - 1; i > 0; i-- )
 8023360:	1e71      	subs	r1, r6, #1
 8023362:	f000 8126 	beq.w	80235b2 <mpi_miller_rabin+0x34e>
        if( X->p[i] != 0 )
 8023366:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8023368:	eb02 0086 	add.w	r0, r2, r6, lsl #2
 802336c:	e002      	b.n	8023374 <mpi_miller_rabin+0x110>
    for( i = X->n - 1; i > 0; i-- )
 802336e:	3901      	subs	r1, #1
 8023370:	f000 80ff 	beq.w	8023572 <mpi_miller_rabin+0x30e>
        if( X->p[i] != 0 )
 8023374:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8023378:	2b00      	cmp	r3, #0
 802337a:	d0f8      	beq.n	802336e <mpi_miller_rabin+0x10a>
 802337c:	3101      	adds	r1, #1
 802337e:	0148      	lsls	r0, r1, #5
    for( j = 0; j < biL; j++ )
 8023380:	f04f 0e00 	mov.w	lr, #0
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 8023384:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8023388:	e004      	b.n	8023394 <mpi_miller_rabin+0x130>
    for( j = 0; j < biL; j++ )
 802338a:	f10e 0e01 	add.w	lr, lr, #1
 802338e:	f1be 0f20 	cmp.w	lr, #32
 8023392:	d003      	beq.n	802339c <mpi_miller_rabin+0x138>
        if( x & mask ) break;
 8023394:	4219      	tst	r1, r3
        mask >>= 1;
 8023396:	ea4f 0151 	mov.w	r1, r1, lsr #1
        if( x & mask ) break;
 802339a:	d0f6      	beq.n	802338a <mpi_miller_rabin+0x126>
    if( X->n == 0 )
 802339c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    return( ( i * biL ) + j );
 802339e:	eba0 030e 	sub.w	r3, r0, lr
    if( X->n == 0 )
 80233a2:	b30a      	cbz	r2, 80233e8 <mpi_miller_rabin+0x184>
    for( i = X->n - 1; i > 0; i-- )
 80233a4:	1e51      	subs	r1, r2, #1
 80233a6:	f000 80dc 	beq.w	8023562 <mpi_miller_rabin+0x2fe>
        if( X->p[i] != 0 )
 80233aa:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 80233ae:	eb0e 0c82 	add.w	ip, lr, r2, lsl #2
 80233b2:	e002      	b.n	80233ba <mpi_miller_rabin+0x156>
    for( i = X->n - 1; i > 0; i-- )
 80233b4:	3901      	subs	r1, #1
 80233b6:	f000 80d8 	beq.w	802356a <mpi_miller_rabin+0x306>
        if( X->p[i] != 0 )
 80233ba:	f85c 0d04 	ldr.w	r0, [ip, #-4]!
 80233be:	2800      	cmp	r0, #0
 80233c0:	d0f8      	beq.n	80233b4 <mpi_miller_rabin+0x150>
 80233c2:	3101      	adds	r1, #1
 80233c4:	0149      	lsls	r1, r1, #5
    for( j = 0; j < biL; j++ )
 80233c6:	f04f 0c00 	mov.w	ip, #0
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 80233ca:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
 80233ce:	e004      	b.n	80233da <mpi_miller_rabin+0x176>
    for( j = 0; j < biL; j++ )
 80233d0:	f10c 0c01 	add.w	ip, ip, #1
 80233d4:	f1bc 0f20 	cmp.w	ip, #32
 80233d8:	d004      	beq.n	80233e4 <mpi_miller_rabin+0x180>
        if( x & mask ) break;
 80233da:	ea1e 0f00 	tst.w	lr, r0
        mask >>= 1;
 80233de:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
        if( x & mask ) break;
 80233e2:	d0f5      	beq.n	80233d0 <mpi_miller_rabin+0x16c>
    return( ( i * biL ) + j );
 80233e4:	eba1 020c 	sub.w	r2, r1, ip
            if (j > k) {
 80233e8:	429a      	cmp	r2, r3
 80233ea:	d211      	bcs.n	8023410 <mpi_miller_rabin+0x1ac>
                A.p[A.n - 1] &= ( (mbedtls_mpi_uint) 1 << ( k - ( A.n - 1 ) * biL - 1 ) ) - 1;
 80233ec:	1e71      	subs	r1, r6, #1
 80233ee:	ea6f 1141 	mvn.w	r1, r1, lsl #5
 80233f2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80233f4:	f106 4e80 	add.w	lr, r6, #1073741824	; 0x40000000
 80233f8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80233fc:	eb01 0c02 	add.w	ip, r1, r2
 8023400:	f850 102e 	ldr.w	r1, [r0, lr, lsl #2]
 8023404:	fa0b fc0c 	lsl.w	ip, fp, ip
 8023408:	ea21 010c 	bic.w	r1, r1, ip
 802340c:	f840 102e 	str.w	r1, [r0, lr, lsl #2]
            }

            if (count++ > 30) {
 8023410:	3f01      	subs	r7, #1
 8023412:	f000 8106 	beq.w	8023622 <mpi_miller_rabin+0x3be>
                ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
                goto cleanup;
            }

        } while ( mbedtls_mpi_cmp_mpi( &A, &W ) >= 0 ||
 8023416:	4651      	mov	r1, sl
 8023418:	a813      	add	r0, sp, #76	; 0x4c
 802341a:	f7fe f9eb 	bl	80217f4 <mbedtls_mpi_cmp_mpi>
                  mbedtls_mpi_cmp_int( &A, 1 )  <= 0    );
 802341e:	2800      	cmp	r0, #0
 8023420:	da90      	bge.n	8023344 <mpi_miller_rabin+0xe0>
    for( i = X->n; i > 0; i-- )
 8023422:	2e00      	cmp	r6, #0
 8023424:	d08e      	beq.n	8023344 <mpi_miller_rabin+0xe0>
        if( X->p[i - 1] != 0 )
 8023426:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8023428:	eb02 0186 	add.w	r1, r2, r6, lsl #2
 802342c:	e001      	b.n	8023432 <mpi_miller_rabin+0x1ce>
    for( i = X->n; i > 0; i-- )
 802342e:	3e01      	subs	r6, #1
 8023430:	d088      	beq.n	8023344 <mpi_miller_rabin+0xe0>
        if( X->p[i - 1] != 0 )
 8023432:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8023436:	2b00      	cmp	r3, #0
 8023438:	d0f9      	beq.n	802342e <mpi_miller_rabin+0x1ca>
    if( i > j ) return(  X->s );
 802343a:	2e01      	cmp	r6, #1
 802343c:	f240 809c 	bls.w	8023578 <mpi_miller_rabin+0x314>
 8023440:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        } while ( mbedtls_mpi_cmp_mpi( &A, &W ) >= 0 ||
 8023442:	2b00      	cmp	r3, #0
 8023444:	f77f af7e 	ble.w	8023344 <mpi_miller_rabin+0xe0>

        /*
         * A = A^R mod |X|
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &A, &A, &R, X, &RR ) );
 8023448:	ab16      	add	r3, sp, #88	; 0x58
 802344a:	a913      	add	r1, sp, #76	; 0x4c
 802344c:	9300      	str	r3, [sp, #0]
 802344e:	4608      	mov	r0, r1
 8023450:	462b      	mov	r3, r5
 8023452:	aa0d      	add	r2, sp, #52	; 0x34
 8023454:	f7ff f8f6 	bl	8022644 <mbedtls_mpi_exp_mod>
 8023458:	2800      	cmp	r0, #0
 802345a:	f040 80a8 	bne.w	80235ae <mpi_miller_rabin+0x34a>

        if( mbedtls_mpi_cmp_mpi( &A, &W ) == 0 ||
 802345e:	4651      	mov	r1, sl
 8023460:	a813      	add	r0, sp, #76	; 0x4c
 8023462:	f7fe f9c7 	bl	80217f4 <mbedtls_mpi_cmp_mpi>
 8023466:	b1b0      	cbz	r0, 8023496 <mpi_miller_rabin+0x232>
    for( i = X->n; i > 0; i-- )
 8023468:	9f14      	ldr	r7, [sp, #80]	; 0x50
 802346a:	2f00      	cmp	r7, #0
 802346c:	f000 80a5 	beq.w	80235ba <mpi_miller_rabin+0x356>
        if( X->p[i - 1] != 0 )
 8023470:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023472:	463b      	mov	r3, r7
 8023474:	eb00 0287 	add.w	r2, r0, r7, lsl #2
 8023478:	e002      	b.n	8023480 <mpi_miller_rabin+0x21c>
    for( i = X->n; i > 0; i-- )
 802347a:	3b01      	subs	r3, #1
 802347c:	f000 809d 	beq.w	80235ba <mpi_miller_rabin+0x356>
        if( X->p[i - 1] != 0 )
 8023480:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8023484:	2900      	cmp	r1, #0
 8023486:	d0f8      	beq.n	802347a <mpi_miller_rabin+0x216>
    if( i > j ) return(  X->s );
 8023488:	2b01      	cmp	r3, #1
 802348a:	f240 80fa 	bls.w	8023682 <mpi_miller_rabin+0x41e>
 802348e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
        if( mbedtls_mpi_cmp_mpi( &A, &W ) == 0 ||
 8023490:	2a00      	cmp	r2, #0
 8023492:	f040 8092 	bne.w	80235ba <mpi_miller_rabin+0x356>
    for( i = 0; i < rounds; i++ )
 8023496:	9b04      	ldr	r3, [sp, #16]
 8023498:	9a03      	ldr	r2, [sp, #12]
 802349a:	3301      	adds	r3, #1
 802349c:	429a      	cmp	r2, r3
 802349e:	9304      	str	r3, [sp, #16]
 80234a0:	f47f af4d 	bne.w	802333e <mpi_miller_rabin+0xda>
 80234a4:	9e05      	ldr	r6, [sp, #20]
    if( X->p != NULL )
 80234a6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80234a8:	b130      	cbz	r0, 80234b8 <mpi_miller_rabin+0x254>
    mbedtls_platform_zeroize( v, ciL * n );
 80234aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80234ac:	0089      	lsls	r1, r1, #2
 80234ae:	f004 fb3d 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 80234b2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80234b4:	f00c fc9a 	bl	802fdec <free>
    X->n = 0;
 80234b8:	2300      	movs	r3, #0
    X->s = 1;
 80234ba:	2201      	movs	r2, #1
    if( X->p != NULL )
 80234bc:	980f      	ldr	r0, [sp, #60]	; 0x3c
    X->n = 0;
 80234be:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    X->p = NULL;
 80234c2:	930c      	str	r3, [sp, #48]	; 0x30
    if( X->p != NULL )
 80234c4:	b130      	cbz	r0, 80234d4 <mpi_miller_rabin+0x270>
    mbedtls_platform_zeroize( v, ciL * n );
 80234c6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80234c8:	0089      	lsls	r1, r1, #2
 80234ca:	f004 fb2f 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 80234ce:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80234d0:	f00c fc8c 	bl	802fdec <free>
    X->n = 0;
 80234d4:	2300      	movs	r3, #0
    X->s = 1;
 80234d6:	2201      	movs	r2, #1
    if( X->p != NULL )
 80234d8:	9812      	ldr	r0, [sp, #72]	; 0x48
    X->n = 0;
 80234da:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
    X->p = NULL;
 80234de:	930f      	str	r3, [sp, #60]	; 0x3c
    if( X->p != NULL )
 80234e0:	b130      	cbz	r0, 80234f0 <mpi_miller_rabin+0x28c>
    mbedtls_platform_zeroize( v, ciL * n );
 80234e2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80234e4:	0089      	lsls	r1, r1, #2
 80234e6:	f004 fb21 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 80234ea:	9812      	ldr	r0, [sp, #72]	; 0x48
 80234ec:	f00c fc7e 	bl	802fdec <free>
    X->n = 0;
 80234f0:	2300      	movs	r3, #0
    X->s = 1;
 80234f2:	2201      	movs	r2, #1
    if( X->p != NULL )
 80234f4:	9815      	ldr	r0, [sp, #84]	; 0x54
    X->n = 0;
 80234f6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    X->p = NULL;
 80234fa:	9312      	str	r3, [sp, #72]	; 0x48
    if( X->p != NULL )
 80234fc:	b130      	cbz	r0, 802350c <mpi_miller_rabin+0x2a8>
    mbedtls_platform_zeroize( v, ciL * n );
 80234fe:	9914      	ldr	r1, [sp, #80]	; 0x50
 8023500:	0089      	lsls	r1, r1, #2
 8023502:	f004 fb13 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 8023506:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023508:	f00c fc70 	bl	802fdec <free>
    X->n = 0;
 802350c:	2300      	movs	r3, #0
    X->s = 1;
 802350e:	2201      	movs	r2, #1
    if( X->p != NULL )
 8023510:	9818      	ldr	r0, [sp, #96]	; 0x60
    X->n = 0;
 8023512:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
    X->p = NULL;
 8023516:	9315      	str	r3, [sp, #84]	; 0x54
    if( X->p != NULL )
 8023518:	b130      	cbz	r0, 8023528 <mpi_miller_rabin+0x2c4>
    mbedtls_platform_zeroize( v, ciL * n );
 802351a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 802351c:	0089      	lsls	r1, r1, #2
 802351e:	f004 fb05 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 8023522:	9818      	ldr	r0, [sp, #96]	; 0x60
 8023524:	f00c fc62 	bl	802fdec <free>
    mbedtls_mpi_free( &W ); mbedtls_mpi_free( &R );
    mbedtls_mpi_free( &T ); mbedtls_mpi_free( &A );
    mbedtls_mpi_free( &RR );

    return( ret );
}
 8023528:	4630      	mov	r0, r6
 802352a:	b01d      	add	sp, #116	; 0x74
 802352c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 8023530:	6803      	ldr	r3, [r0, #0]
 8023532:	2b00      	cmp	r3, #0
 8023534:	f47f aec9 	bne.w	80232ca <mpi_miller_rabin+0x66>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 8023538:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 802353c:	4650      	mov	r0, sl
 802353e:	462a      	mov	r2, r5
 8023540:	a919      	add	r1, sp, #100	; 0x64
 8023542:	f7fe fa81 	bl	8021a48 <mbedtls_mpi_sub_abs>
 8023546:	4606      	mov	r6, r0
 8023548:	2800      	cmp	r0, #0
 802354a:	d1ac      	bne.n	80234a6 <mpi_miller_rabin+0x242>
            X->s = -s;
 802354c:	4264      	negs	r4, r4
 802354e:	940a      	str	r4, [sp, #40]	; 0x28
    return( ret );
 8023550:	e6c7      	b.n	80232e2 <mpi_miller_rabin+0x7e>
    if( X->n == 0 )
 8023552:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023554:	2a00      	cmp	r2, #0
 8023556:	f43f af5b 	beq.w	8023410 <mpi_miller_rabin+0x1ac>
    for( i = X->n - 1; i > 0; i-- )
 802355a:	1e51      	subs	r1, r2, #1
        return( 0 );
 802355c:	4633      	mov	r3, r6
    for( i = X->n - 1; i > 0; i-- )
 802355e:	f47f af24 	bne.w	80233aa <mpi_miller_rabin+0x146>
 8023562:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023564:	2120      	movs	r1, #32
 8023566:	6810      	ldr	r0, [r2, #0]
 8023568:	e72d      	b.n	80233c6 <mpi_miller_rabin+0x162>
 802356a:	2120      	movs	r1, #32
 802356c:	f8de 0000 	ldr.w	r0, [lr]
 8023570:	e729      	b.n	80233c6 <mpi_miller_rabin+0x162>
 8023572:	2020      	movs	r0, #32
 8023574:	6813      	ldr	r3, [r2, #0]
 8023576:	e703      	b.n	8023380 <mpi_miller_rabin+0x11c>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
 8023578:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 802357a:	2b00      	cmp	r3, #0
 802357c:	f6ff aee2 	blt.w	8023344 <mpi_miller_rabin+0xe0>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 8023580:	6811      	ldr	r1, [r2, #0]
 8023582:	2901      	cmp	r1, #1
 8023584:	f67f aede 	bls.w	8023344 <mpi_miller_rabin+0xe0>
 8023588:	e75b      	b.n	8023442 <mpi_miller_rabin+0x1de>
    for( i = 0; i < X->n; i++ )
 802358a:	3701      	adds	r7, #1
 802358c:	42b7      	cmp	r7, r6
 802358e:	f47f aeb0 	bne.w	80232f2 <mpi_miller_rabin+0x8e>
    return( 0 );
 8023592:	461c      	mov	r4, r3
 8023594:	e6bd      	b.n	8023312 <mpi_miller_rabin+0xae>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8023596:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 802359a:	4650      	mov	r0, sl
 802359c:	4629      	mov	r1, r5
 802359e:	aa19      	add	r2, sp, #100	; 0x64
 80235a0:	f7fe f9ba 	bl	8021918 <mbedtls_mpi_add_abs>
 80235a4:	4606      	mov	r6, r0
 80235a6:	2800      	cmp	r0, #0
 80235a8:	f43f ae9a 	beq.w	80232e0 <mpi_miller_rabin+0x7c>
 80235ac:	e77b      	b.n	80234a6 <mpi_miller_rabin+0x242>
 80235ae:	4606      	mov	r6, r0
 80235b0:	e779      	b.n	80234a6 <mpi_miller_rabin+0x242>
 80235b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
    for( i = X->n - 1; i > 0; i-- )
 80235b4:	2020      	movs	r0, #32
 80235b6:	681b      	ldr	r3, [r3, #0]
 80235b8:	e6e2      	b.n	8023380 <mpi_miller_rabin+0x11c>
        while( j < s && mbedtls_mpi_cmp_mpi( &A, &W ) != 0 )
 80235ba:	2c01      	cmp	r4, #1
 80235bc:	bf88      	it	hi
 80235be:	f04f 0b01 	movhi.w	fp, #1
 80235c2:	d929      	bls.n	8023618 <mpi_miller_rabin+0x3b4>
 80235c4:	4651      	mov	r1, sl
 80235c6:	a813      	add	r0, sp, #76	; 0x4c
 80235c8:	f7fe f914 	bl	80217f4 <mbedtls_mpi_cmp_mpi>
 80235cc:	b370      	cbz	r0, 802362c <mpi_miller_rabin+0x3c8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &A, &A ) );
 80235ce:	aa13      	add	r2, sp, #76	; 0x4c
 80235d0:	4611      	mov	r1, r2
 80235d2:	a810      	add	r0, sp, #64	; 0x40
 80235d4:	f7fe fb9e 	bl	8021d14 <mbedtls_mpi_mul_mpi>
 80235d8:	2800      	cmp	r0, #0
 80235da:	d1e8      	bne.n	80235ae <mpi_miller_rabin+0x34a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &A, &T, X  ) );
 80235dc:	462a      	mov	r2, r5
 80235de:	a910      	add	r1, sp, #64	; 0x40
 80235e0:	a813      	add	r0, sp, #76	; 0x4c
 80235e2:	f7fe ffa9 	bl	8022538 <mbedtls_mpi_mod_mpi>
 80235e6:	2800      	cmp	r0, #0
 80235e8:	d1e1      	bne.n	80235ae <mpi_miller_rabin+0x34a>
    for( i = X->n; i > 0; i-- )
 80235ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80235ec:	b187      	cbz	r7, 8023610 <mpi_miller_rabin+0x3ac>
        if( X->p[i - 1] != 0 )
 80235ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80235f0:	4639      	mov	r1, r7
 80235f2:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 80235f6:	eb03 0087 	add.w	r0, r3, r7, lsl #2
 80235fa:	e001      	b.n	8023600 <mpi_miller_rabin+0x39c>
    for( i = X->n; i > 0; i-- )
 80235fc:	3901      	subs	r1, #1
 80235fe:	d007      	beq.n	8023610 <mpi_miller_rabin+0x3ac>
        if( X->p[i - 1] != 0 )
 8023600:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8023604:	2e00      	cmp	r6, #0
 8023606:	d0f9      	beq.n	80235fc <mpi_miller_rabin+0x398>
    if( i > j ) return(  X->s );
 8023608:	2901      	cmp	r1, #1
 802360a:	d926      	bls.n	802365a <mpi_miller_rabin+0x3f6>
 802360c:	9813      	ldr	r0, [sp, #76]	; 0x4c
            if( mbedtls_mpi_cmp_int( &A, 1 ) == 0 )
 802360e:	b358      	cbz	r0, 8023668 <mpi_miller_rabin+0x404>
            j++;
 8023610:	f10b 0b01 	add.w	fp, fp, #1
        while( j < s && mbedtls_mpi_cmp_mpi( &A, &W ) != 0 )
 8023614:	45a3      	cmp	fp, r4
 8023616:	d1d5      	bne.n	80235c4 <mpi_miller_rabin+0x360>
        if( mbedtls_mpi_cmp_mpi( &A, &W ) != 0 ||
 8023618:	4651      	mov	r1, sl
 802361a:	a813      	add	r0, sp, #76	; 0x4c
 802361c:	f7fe f8ea 	bl	80217f4 <mbedtls_mpi_cmp_mpi>
 8023620:	b120      	cbz	r0, 802362c <mpi_miller_rabin+0x3c8>
            ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 8023622:	f06f 060d 	mvn.w	r6, #13
 8023626:	e73e      	b.n	80234a6 <mpi_miller_rabin+0x242>
    return( 0 );
 8023628:	4634      	mov	r4, r6
 802362a:	e672      	b.n	8023312 <mpi_miller_rabin+0xae>
    for( i = X->n; i > 0; i-- )
 802362c:	2f00      	cmp	r7, #0
 802362e:	f43f af32 	beq.w	8023496 <mpi_miller_rabin+0x232>
 8023632:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023634:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8023638:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 802363c:	e002      	b.n	8023644 <mpi_miller_rabin+0x3e0>
 802363e:	3f01      	subs	r7, #1
 8023640:	f43f af29 	beq.w	8023496 <mpi_miller_rabin+0x232>
        if( X->p[i - 1] != 0 )
 8023644:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8023648:	2900      	cmp	r1, #0
 802364a:	d0f8      	beq.n	802363e <mpi_miller_rabin+0x3da>
    if( i > j ) return(  X->s );
 802364c:	2f01      	cmp	r7, #1
 802364e:	d924      	bls.n	802369a <mpi_miller_rabin+0x436>
 8023650:	9a13      	ldr	r2, [sp, #76]	; 0x4c
        if( mbedtls_mpi_cmp_mpi( &A, &W ) != 0 ||
 8023652:	2a00      	cmp	r2, #0
 8023654:	f47f af1f 	bne.w	8023496 <mpi_miller_rabin+0x232>
 8023658:	e7e3      	b.n	8023622 <mpi_miller_rabin+0x3be>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
 802365a:	9813      	ldr	r0, [sp, #76]	; 0x4c
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 802365c:	2800      	cmp	r0, #0
 802365e:	dbd7      	blt.n	8023610 <mpi_miller_rabin+0x3ac>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 8023660:	6819      	ldr	r1, [r3, #0]
 8023662:	2901      	cmp	r1, #1
 8023664:	d8d3      	bhi.n	802360e <mpi_miller_rabin+0x3aa>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 8023666:	b151      	cbz	r1, 802367e <mpi_miller_rabin+0x41a>
        if( mbedtls_mpi_cmp_mpi( &A, &W ) != 0 ||
 8023668:	4651      	mov	r1, sl
 802366a:	a813      	add	r0, sp, #76	; 0x4c
 802366c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8023670:	f7fe f8c0 	bl	80217f4 <mbedtls_mpi_cmp_mpi>
 8023674:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8023678:	2800      	cmp	r0, #0
 802367a:	d0dd      	beq.n	8023638 <mpi_miller_rabin+0x3d4>
 802367c:	e7d1      	b.n	8023622 <mpi_miller_rabin+0x3be>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 802367e:	4240      	negs	r0, r0
 8023680:	e7c5      	b.n	802360e <mpi_miller_rabin+0x3aa>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
 8023682:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 8023684:	2a00      	cmp	r2, #0
 8023686:	db98      	blt.n	80235ba <mpi_miller_rabin+0x356>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 8023688:	6803      	ldr	r3, [r0, #0]
 802368a:	2b01      	cmp	r3, #1
 802368c:	f63f af00 	bhi.w	8023490 <mpi_miller_rabin+0x22c>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 8023690:	2b00      	cmp	r3, #0
 8023692:	f47f af00 	bne.w	8023496 <mpi_miller_rabin+0x232>
 8023696:	4252      	negs	r2, r2
 8023698:	e6fa      	b.n	8023490 <mpi_miller_rabin+0x22c>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
 802369a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 802369c:	2a00      	cmp	r2, #0
 802369e:	f6ff aefa 	blt.w	8023496 <mpi_miller_rabin+0x232>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 80236a2:	681b      	ldr	r3, [r3, #0]
 80236a4:	2b01      	cmp	r3, #1
 80236a6:	d8d4      	bhi.n	8023652 <mpi_miller_rabin+0x3ee>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 80236a8:	2b00      	cmp	r3, #0
 80236aa:	d1ba      	bne.n	8023622 <mpi_miller_rabin+0x3be>
 80236ac:	4252      	negs	r2, r2
        if( mbedtls_mpi_cmp_mpi( &A, &W ) != 0 ||
 80236ae:	2a00      	cmp	r2, #0
 80236b0:	f47f aef1 	bne.w	8023496 <mpi_miller_rabin+0x232>
 80236b4:	e7b5      	b.n	8023622 <mpi_miller_rabin+0x3be>
 80236b6:	bf00      	nop

080236b8 <mbedtls_mpi_inv_mod>:
{
 80236b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    for( i = X->n; i > 0; i-- )
 80236bc:	6853      	ldr	r3, [r2, #4]
{
 80236be:	b0a3      	sub	sp, #140	; 0x8c
    for( i = X->n; i > 0; i-- )
 80236c0:	2b00      	cmp	r3, #0
 80236c2:	f000 8188 	beq.w	80239d6 <mbedtls_mpi_inv_mod+0x31e>
 80236c6:	4606      	mov	r6, r0
        if( X->p[i - 1] != 0 )
 80236c8:	6890      	ldr	r0, [r2, #8]
 80236ca:	4615      	mov	r5, r2
 80236cc:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 80236d0:	e002      	b.n	80236d8 <mbedtls_mpi_inv_mod+0x20>
    for( i = X->n; i > 0; i-- )
 80236d2:	3b01      	subs	r3, #1
 80236d4:	f000 817f 	beq.w	80239d6 <mbedtls_mpi_inv_mod+0x31e>
        if( X->p[i - 1] != 0 )
 80236d8:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 80236dc:	2c00      	cmp	r4, #0
 80236de:	d0f8      	beq.n	80236d2 <mbedtls_mpi_inv_mod+0x1a>
    if( i > j ) return(  X->s );
 80236e0:	2b01      	cmp	r3, #1
 80236e2:	f240 8171 	bls.w	80239c8 <mbedtls_mpi_inv_mod+0x310>
 80236e6:	682a      	ldr	r2, [r5, #0]
    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 80236e8:	2a00      	cmp	r2, #0
 80236ea:	f340 8174 	ble.w	80239d6 <mbedtls_mpi_inv_mod+0x31e>
    X->s = 1;
 80236ee:	2401      	movs	r4, #1
    X->n = 0;
 80236f0:	2300      	movs	r3, #0
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 80236f2:	462a      	mov	r2, r5
 80236f4:	a804      	add	r0, sp, #16
    X->s = 1;
 80236f6:	9407      	str	r4, [sp, #28]
 80236f8:	940a      	str	r4, [sp, #40]	; 0x28
 80236fa:	940d      	str	r4, [sp, #52]	; 0x34
 80236fc:	9410      	str	r4, [sp, #64]	; 0x40
 80236fe:	9404      	str	r4, [sp, #16]
 8023700:	9413      	str	r4, [sp, #76]	; 0x4c
 8023702:	9416      	str	r4, [sp, #88]	; 0x58
 8023704:	9419      	str	r4, [sp, #100]	; 0x64
 8023706:	941c      	str	r4, [sp, #112]	; 0x70
    X->p = NULL;
 8023708:	e9cd 3308 	strd	r3, r3, [sp, #32]
 802370c:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8023710:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8023714:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8023718:	e9cd 3305 	strd	r3, r3, [sp, #20]
 802371c:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
 8023720:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 8023724:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
 8023728:	e9cd 331d 	strd	r3, r3, [sp, #116]	; 0x74
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 802372c:	9101      	str	r1, [sp, #4]
 802372e:	f7ff fbcf 	bl	8022ed0 <mbedtls_mpi_gcd>
 8023732:	4604      	mov	r4, r0
 8023734:	b9a8      	cbnz	r0, 8023762 <mbedtls_mpi_inv_mod+0xaa>
    for( i = X->n; i > 0; i-- )
 8023736:	9b05      	ldr	r3, [sp, #20]
 8023738:	b18b      	cbz	r3, 802375e <mbedtls_mpi_inv_mod+0xa6>
        if( X->p[i - 1] != 0 )
 802373a:	9806      	ldr	r0, [sp, #24]
 802373c:	9901      	ldr	r1, [sp, #4]
 802373e:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8023742:	e001      	b.n	8023748 <mbedtls_mpi_inv_mod+0x90>
    for( i = X->n; i > 0; i-- )
 8023744:	3b01      	subs	r3, #1
 8023746:	d00a      	beq.n	802375e <mbedtls_mpi_inv_mod+0xa6>
        if( X->p[i - 1] != 0 )
 8023748:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 802374c:	2c00      	cmp	r4, #0
 802374e:	d0f9      	beq.n	8023744 <mbedtls_mpi_inv_mod+0x8c>
    if( i > j ) return(  X->s );
 8023750:	2b01      	cmp	r3, #1
 8023752:	f240 8083 	bls.w	802385c <mbedtls_mpi_inv_mod+0x1a4>
 8023756:	9a04      	ldr	r2, [sp, #16]
    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 8023758:	2a00      	cmp	r2, #0
 802375a:	f000 808a 	beq.w	8023872 <mbedtls_mpi_inv_mod+0x1ba>
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 802375e:	f06f 040d 	mvn.w	r4, #13
    if( X->p != NULL )
 8023762:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023764:	b130      	cbz	r0, 8023774 <mbedtls_mpi_inv_mod+0xbc>
    mbedtls_platform_zeroize( v, ciL * n );
 8023766:	9908      	ldr	r1, [sp, #32]
 8023768:	0089      	lsls	r1, r1, #2
 802376a:	f004 f9df 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 802376e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023770:	f00c fb3c 	bl	802fdec <free>
    X->n = 0;
 8023774:	2300      	movs	r3, #0
    X->s = 1;
 8023776:	2201      	movs	r2, #1
    if( X->p != NULL )
 8023778:	980c      	ldr	r0, [sp, #48]	; 0x30
    X->n = 0;
 802377a:	e9cd 2307 	strd	r2, r3, [sp, #28]
    X->p = NULL;
 802377e:	9309      	str	r3, [sp, #36]	; 0x24
    if( X->p != NULL )
 8023780:	b130      	cbz	r0, 8023790 <mbedtls_mpi_inv_mod+0xd8>
    mbedtls_platform_zeroize( v, ciL * n );
 8023782:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023784:	0089      	lsls	r1, r1, #2
 8023786:	f004 f9d1 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 802378a:	980c      	ldr	r0, [sp, #48]	; 0x30
 802378c:	f00c fb2e 	bl	802fdec <free>
    X->n = 0;
 8023790:	2300      	movs	r3, #0
    X->s = 1;
 8023792:	2201      	movs	r2, #1
    if( X->p != NULL )
 8023794:	980f      	ldr	r0, [sp, #60]	; 0x3c
    X->n = 0;
 8023796:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    X->p = NULL;
 802379a:	930c      	str	r3, [sp, #48]	; 0x30
    if( X->p != NULL )
 802379c:	b130      	cbz	r0, 80237ac <mbedtls_mpi_inv_mod+0xf4>
    mbedtls_platform_zeroize( v, ciL * n );
 802379e:	990e      	ldr	r1, [sp, #56]	; 0x38
 80237a0:	0089      	lsls	r1, r1, #2
 80237a2:	f004 f9c3 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 80237a6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80237a8:	f00c fb20 	bl	802fdec <free>
    X->n = 0;
 80237ac:	2300      	movs	r3, #0
    X->s = 1;
 80237ae:	2201      	movs	r2, #1
    if( X->p != NULL )
 80237b0:	9812      	ldr	r0, [sp, #72]	; 0x48
    X->n = 0;
 80237b2:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
    X->p = NULL;
 80237b6:	930f      	str	r3, [sp, #60]	; 0x3c
    if( X->p != NULL )
 80237b8:	b130      	cbz	r0, 80237c8 <mbedtls_mpi_inv_mod+0x110>
    mbedtls_platform_zeroize( v, ciL * n );
 80237ba:	9911      	ldr	r1, [sp, #68]	; 0x44
 80237bc:	0089      	lsls	r1, r1, #2
 80237be:	f004 f9b5 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 80237c2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80237c4:	f00c fb12 	bl	802fdec <free>
    X->n = 0;
 80237c8:	2300      	movs	r3, #0
    X->s = 1;
 80237ca:	2201      	movs	r2, #1
    if( X->p != NULL )
 80237cc:	9806      	ldr	r0, [sp, #24]
    X->n = 0;
 80237ce:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    X->p = NULL;
 80237d2:	9312      	str	r3, [sp, #72]	; 0x48
    if( X->p != NULL )
 80237d4:	b130      	cbz	r0, 80237e4 <mbedtls_mpi_inv_mod+0x12c>
    mbedtls_platform_zeroize( v, ciL * n );
 80237d6:	9905      	ldr	r1, [sp, #20]
 80237d8:	0089      	lsls	r1, r1, #2
 80237da:	f004 f9a7 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 80237de:	9806      	ldr	r0, [sp, #24]
 80237e0:	f00c fb04 	bl	802fdec <free>
    X->n = 0;
 80237e4:	2300      	movs	r3, #0
    X->s = 1;
 80237e6:	2201      	movs	r2, #1
    if( X->p != NULL )
 80237e8:	9815      	ldr	r0, [sp, #84]	; 0x54
    X->n = 0;
 80237ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
    X->p = NULL;
 80237ee:	9306      	str	r3, [sp, #24]
    if( X->p != NULL )
 80237f0:	b130      	cbz	r0, 8023800 <mbedtls_mpi_inv_mod+0x148>
    mbedtls_platform_zeroize( v, ciL * n );
 80237f2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80237f4:	0089      	lsls	r1, r1, #2
 80237f6:	f004 f999 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 80237fa:	9815      	ldr	r0, [sp, #84]	; 0x54
 80237fc:	f00c faf6 	bl	802fdec <free>
    X->n = 0;
 8023800:	2300      	movs	r3, #0
    X->s = 1;
 8023802:	2201      	movs	r2, #1
    if( X->p != NULL )
 8023804:	9818      	ldr	r0, [sp, #96]	; 0x60
    X->n = 0;
 8023806:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
    X->p = NULL;
 802380a:	9315      	str	r3, [sp, #84]	; 0x54
    if( X->p != NULL )
 802380c:	b130      	cbz	r0, 802381c <mbedtls_mpi_inv_mod+0x164>
    mbedtls_platform_zeroize( v, ciL * n );
 802380e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8023810:	0089      	lsls	r1, r1, #2
 8023812:	f004 f98b 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 8023816:	9818      	ldr	r0, [sp, #96]	; 0x60
 8023818:	f00c fae8 	bl	802fdec <free>
    X->n = 0;
 802381c:	2300      	movs	r3, #0
    X->s = 1;
 802381e:	2201      	movs	r2, #1
    if( X->p != NULL )
 8023820:	981b      	ldr	r0, [sp, #108]	; 0x6c
    X->n = 0;
 8023822:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    X->p = NULL;
 8023826:	9318      	str	r3, [sp, #96]	; 0x60
    if( X->p != NULL )
 8023828:	b130      	cbz	r0, 8023838 <mbedtls_mpi_inv_mod+0x180>
    mbedtls_platform_zeroize( v, ciL * n );
 802382a:	991a      	ldr	r1, [sp, #104]	; 0x68
 802382c:	0089      	lsls	r1, r1, #2
 802382e:	f004 f97d 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 8023832:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8023834:	f00c fada 	bl	802fdec <free>
    X->n = 0;
 8023838:	2300      	movs	r3, #0
    X->s = 1;
 802383a:	2201      	movs	r2, #1
    if( X->p != NULL )
 802383c:	981e      	ldr	r0, [sp, #120]	; 0x78
    X->n = 0;
 802383e:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    X->p = NULL;
 8023842:	931b      	str	r3, [sp, #108]	; 0x6c
    if( X->p != NULL )
 8023844:	b130      	cbz	r0, 8023854 <mbedtls_mpi_inv_mod+0x19c>
    mbedtls_platform_zeroize( v, ciL * n );
 8023846:	991d      	ldr	r1, [sp, #116]	; 0x74
 8023848:	0089      	lsls	r1, r1, #2
 802384a:	f004 f96f 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 802384e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8023850:	f00c facc 	bl	802fdec <free>
}
 8023854:	4620      	mov	r0, r4
 8023856:	b023      	add	sp, #140	; 0x8c
 8023858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( X->s > 0 && Y->s < 0 ) return(  1 );
 802385c:	9a04      	ldr	r2, [sp, #16]
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 802385e:	2a00      	cmp	r2, #0
 8023860:	f6ff af7d 	blt.w	802375e <mbedtls_mpi_inv_mod+0xa6>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 8023864:	6803      	ldr	r3, [r0, #0]
 8023866:	2b01      	cmp	r3, #1
 8023868:	f63f af76 	bhi.w	8023758 <mbedtls_mpi_inv_mod+0xa0>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 802386c:	2b00      	cmp	r3, #0
 802386e:	f000 80b8 	beq.w	80239e2 <mbedtls_mpi_inv_mod+0x32a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 8023872:	462a      	mov	r2, r5
 8023874:	a807      	add	r0, sp, #28
 8023876:	f7fe fe5f 	bl	8022538 <mbedtls_mpi_mod_mpi>
 802387a:	4604      	mov	r4, r0
 802387c:	2800      	cmp	r0, #0
 802387e:	f47f af70 	bne.w	8023762 <mbedtls_mpi_inv_mod+0xaa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 8023882:	a80a      	add	r0, sp, #40	; 0x28
 8023884:	a907      	add	r1, sp, #28
 8023886:	f7fd fc5f 	bl	8021148 <mbedtls_mpi_copy>
 802388a:	4604      	mov	r4, r0
 802388c:	2800      	cmp	r0, #0
 802388e:	f47f af68 	bne.w	8023762 <mbedtls_mpi_inv_mod+0xaa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 8023892:	4629      	mov	r1, r5
 8023894:	a813      	add	r0, sp, #76	; 0x4c
 8023896:	f7fd fc57 	bl	8021148 <mbedtls_mpi_copy>
 802389a:	4604      	mov	r4, r0
 802389c:	2800      	cmp	r0, #0
 802389e:	f47f af60 	bne.w	8023762 <mbedtls_mpi_inv_mod+0xaa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 80238a2:	4629      	mov	r1, r5
 80238a4:	a816      	add	r0, sp, #88	; 0x58
 80238a6:	f7fd fc4f 	bl	8021148 <mbedtls_mpi_copy>
 80238aa:	4604      	mov	r4, r0
 80238ac:	2800      	cmp	r0, #0
 80238ae:	f47f af58 	bne.w	8023762 <mbedtls_mpi_inv_mod+0xaa>
    if( X->n < nblimbs )
 80238b2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80238b4:	2c00      	cmp	r4, #0
 80238b6:	f000 80f1 	beq.w	8023a9c <mbedtls_mpi_inv_mod+0x3e4>
 80238ba:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80238bc:	00a2      	lsls	r2, r4, #2
    memset( X->p, 0, X->n * ciL );
 80238be:	4638      	mov	r0, r7
 80238c0:	2100      	movs	r1, #0
 80238c2:	f00c fad0 	bl	802fe66 <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
 80238c6:	2001      	movs	r0, #1
 80238c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    if( X->n < nblimbs )
 80238ca:	9c11      	ldr	r4, [sp, #68]	; 0x44
    X->p[0] = ( z < 0 ) ? -z : z;
 80238cc:	6018      	str	r0, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 80238ce:	900d      	str	r0, [sp, #52]	; 0x34
    if( X->n < nblimbs )
 80238d0:	2c00      	cmp	r4, #0
 80238d2:	f000 80f8 	beq.w	8023ac6 <mbedtls_mpi_inv_mod+0x40e>
 80238d6:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80238d8:	00a2      	lsls	r2, r4, #2
    memset( X->p, 0, X->n * ciL );
 80238da:	4638      	mov	r0, r7
 80238dc:	2100      	movs	r1, #0
 80238de:	f00c fac2 	bl	802fe66 <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
 80238e2:	2200      	movs	r2, #0
    X->s    = ( z < 0 ) ? -1 : 1;
 80238e4:	2001      	movs	r0, #1
    X->p[0] = ( z < 0 ) ? -z : z;
 80238e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    if( X->n < nblimbs )
 80238e8:	9c1a      	ldr	r4, [sp, #104]	; 0x68
    X->p[0] = ( z < 0 ) ? -z : z;
 80238ea:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 80238ec:	9010      	str	r0, [sp, #64]	; 0x40
    if( X->n < nblimbs )
 80238ee:	2c00      	cmp	r4, #0
 80238f0:	f000 811e 	beq.w	8023b30 <mbedtls_mpi_inv_mod+0x478>
 80238f4:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80238f6:	00a2      	lsls	r2, r4, #2
    memset( X->p, 0, X->n * ciL );
 80238f8:	4638      	mov	r0, r7
 80238fa:	2100      	movs	r1, #0
 80238fc:	f00c fab3 	bl	802fe66 <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
 8023900:	2200      	movs	r2, #0
    X->s    = ( z < 0 ) ? -1 : 1;
 8023902:	2001      	movs	r0, #1
    X->p[0] = ( z < 0 ) ? -z : z;
 8023904:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    if( X->n < nblimbs )
 8023906:	9c1d      	ldr	r4, [sp, #116]	; 0x74
    X->p[0] = ( z < 0 ) ? -z : z;
 8023908:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 802390a:	9019      	str	r0, [sp, #100]	; 0x64
    if( X->n < nblimbs )
 802390c:	2c00      	cmp	r4, #0
 802390e:	f000 8123 	beq.w	8023b58 <mbedtls_mpi_inv_mod+0x4a0>
    memset( X->p, 0, X->n * ciL );
 8023912:	00a2      	lsls	r2, r4, #2
 8023914:	2100      	movs	r1, #0
 8023916:	981e      	ldr	r0, [sp, #120]	; 0x78
 8023918:	f00c faa5 	bl	802fe66 <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
 802391c:	2301      	movs	r3, #1
 802391e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8023920:	6013      	str	r3, [r2, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 8023922:	931c      	str	r3, [sp, #112]	; 0x70
        while( ( TU.p[0] & 1 ) == 0 )
 8023924:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023926:	681b      	ldr	r3, [r3, #0]
 8023928:	07d8      	lsls	r0, r3, #31
 802392a:	f100 8094 	bmi.w	8023a56 <mbedtls_mpi_inv_mod+0x39e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 802392e:	a80a      	add	r0, sp, #40	; 0x28
 8023930:	f7fd fbc4 	bl	80210bc <mbedtls_mpi_shift_r.constprop.0>
 8023934:	4604      	mov	r4, r0
 8023936:	2800      	cmp	r0, #0
 8023938:	f47f af13 	bne.w	8023762 <mbedtls_mpi_inv_mod+0xaa>
            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
 802393c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802393e:	681b      	ldr	r3, [r3, #0]
 8023940:	07df      	lsls	r7, r3, #31
 8023942:	d403      	bmi.n	802394c <mbedtls_mpi_inv_mod+0x294>
 8023944:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023946:	681b      	ldr	r3, [r3, #0]
 8023948:	07dc      	lsls	r4, r3, #31
 802394a:	d52f      	bpl.n	80239ac <mbedtls_mpi_inv_mod+0x2f4>
    s = A->s;
 802394c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    if( A->s * B->s < 0 )
 802394e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023950:	fb03 f307 	mul.w	r3, r3, r7
 8023954:	2b00      	cmp	r3, #0
 8023956:	f280 8113 	bge.w	8023b80 <mbedtls_mpi_inv_mod+0x4c8>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 802395a:	a913      	add	r1, sp, #76	; 0x4c
 802395c:	a80d      	add	r0, sp, #52	; 0x34
 802395e:	f7fd ff05 	bl	802176c <mbedtls_mpi_cmp_abs>
 8023962:	2800      	cmp	r0, #0
 8023964:	f2c0 8122 	blt.w	8023bac <mbedtls_mpi_inv_mod+0x4f4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 8023968:	a90d      	add	r1, sp, #52	; 0x34
 802396a:	4608      	mov	r0, r1
 802396c:	aa13      	add	r2, sp, #76	; 0x4c
 802396e:	f7fe f86b 	bl	8021a48 <mbedtls_mpi_sub_abs>
 8023972:	4604      	mov	r4, r0
 8023974:	2800      	cmp	r0, #0
 8023976:	f47f aef4 	bne.w	8023762 <mbedtls_mpi_inv_mod+0xaa>
        X->s = s;
 802397a:	970d      	str	r7, [sp, #52]	; 0x34
    s = A->s;
 802397c:	9f10      	ldr	r7, [sp, #64]	; 0x40
    if( A->s * B->s > 0 )
 802397e:	9b07      	ldr	r3, [sp, #28]
 8023980:	fb03 f307 	mul.w	r3, r3, r7
 8023984:	2b00      	cmp	r3, #0
 8023986:	f340 811d 	ble.w	8023bc4 <mbedtls_mpi_inv_mod+0x50c>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 802398a:	a810      	add	r0, sp, #64	; 0x40
 802398c:	a907      	add	r1, sp, #28
 802398e:	f7fd feed 	bl	802176c <mbedtls_mpi_cmp_abs>
 8023992:	2800      	cmp	r0, #0
 8023994:	f2c0 80fe 	blt.w	8023b94 <mbedtls_mpi_inv_mod+0x4dc>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 8023998:	a910      	add	r1, sp, #64	; 0x40
 802399a:	4608      	mov	r0, r1
 802399c:	aa07      	add	r2, sp, #28
 802399e:	f7fe f853 	bl	8021a48 <mbedtls_mpi_sub_abs>
 80239a2:	4604      	mov	r4, r0
 80239a4:	2800      	cmp	r0, #0
 80239a6:	f47f aedc 	bne.w	8023762 <mbedtls_mpi_inv_mod+0xaa>
        X->s = s;
 80239aa:	9710      	str	r7, [sp, #64]	; 0x40
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 80239ac:	a80d      	add	r0, sp, #52	; 0x34
 80239ae:	f7fd fb85 	bl	80210bc <mbedtls_mpi_shift_r.constprop.0>
 80239b2:	4604      	mov	r4, r0
 80239b4:	2800      	cmp	r0, #0
 80239b6:	f47f aed4 	bne.w	8023762 <mbedtls_mpi_inv_mod+0xaa>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 80239ba:	a810      	add	r0, sp, #64	; 0x40
 80239bc:	f7fd fb7e 	bl	80210bc <mbedtls_mpi_shift_r.constprop.0>
 80239c0:	4604      	mov	r4, r0
 80239c2:	2800      	cmp	r0, #0
 80239c4:	d0ae      	beq.n	8023924 <mbedtls_mpi_inv_mod+0x26c>
 80239c6:	e6cc      	b.n	8023762 <mbedtls_mpi_inv_mod+0xaa>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
 80239c8:	682a      	ldr	r2, [r5, #0]
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 80239ca:	2a00      	cmp	r2, #0
 80239cc:	db03      	blt.n	80239d6 <mbedtls_mpi_inv_mod+0x31e>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 80239ce:	6803      	ldr	r3, [r0, #0]
 80239d0:	2b01      	cmp	r3, #1
 80239d2:	f63f ae89 	bhi.w	80236e8 <mbedtls_mpi_inv_mod+0x30>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 80239d6:	f06f 0403 	mvn.w	r4, #3
}
 80239da:	4620      	mov	r0, r4
 80239dc:	b023      	add	sp, #140	; 0x8c
 80239de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 80239e2:	4252      	negs	r2, r2
    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 80239e4:	2a00      	cmp	r2, #0
 80239e6:	f43f af44 	beq.w	8023872 <mbedtls_mpi_inv_mod+0x1ba>
 80239ea:	e6b8      	b.n	802375e <mbedtls_mpi_inv_mod+0xa6>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 80239ec:	a913      	add	r1, sp, #76	; 0x4c
 80239ee:	a819      	add	r0, sp, #100	; 0x64
 80239f0:	f7fd febc 	bl	802176c <mbedtls_mpi_cmp_abs>
 80239f4:	2800      	cmp	r0, #0
 80239f6:	f2c0 808f 	blt.w	8023b18 <mbedtls_mpi_inv_mod+0x460>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 80239fa:	a919      	add	r1, sp, #100	; 0x64
 80239fc:	4608      	mov	r0, r1
 80239fe:	aa13      	add	r2, sp, #76	; 0x4c
 8023a00:	f7fe f822 	bl	8021a48 <mbedtls_mpi_sub_abs>
 8023a04:	4604      	mov	r4, r0
 8023a06:	2800      	cmp	r0, #0
 8023a08:	f47f aeab 	bne.w	8023762 <mbedtls_mpi_inv_mod+0xaa>
        X->s = s;
 8023a0c:	9719      	str	r7, [sp, #100]	; 0x64
    s = A->s;
 8023a0e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
    if( A->s * B->s > 0 )
 8023a10:	9b07      	ldr	r3, [sp, #28]
 8023a12:	fb03 f307 	mul.w	r3, r3, r7
 8023a16:	2b00      	cmp	r3, #0
 8023a18:	dd75      	ble.n	8023b06 <mbedtls_mpi_inv_mod+0x44e>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 8023a1a:	a907      	add	r1, sp, #28
 8023a1c:	a81c      	add	r0, sp, #112	; 0x70
 8023a1e:	f7fd fea5 	bl	802176c <mbedtls_mpi_cmp_abs>
 8023a22:	2800      	cmp	r0, #0
 8023a24:	db63      	blt.n	8023aee <mbedtls_mpi_inv_mod+0x436>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 8023a26:	a91c      	add	r1, sp, #112	; 0x70
 8023a28:	4608      	mov	r0, r1
 8023a2a:	aa07      	add	r2, sp, #28
 8023a2c:	f7fe f80c 	bl	8021a48 <mbedtls_mpi_sub_abs>
 8023a30:	4604      	mov	r4, r0
 8023a32:	2800      	cmp	r0, #0
 8023a34:	f47f ae95 	bne.w	8023762 <mbedtls_mpi_inv_mod+0xaa>
        X->s = s;
 8023a38:	971c      	str	r7, [sp, #112]	; 0x70
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 8023a3a:	a819      	add	r0, sp, #100	; 0x64
 8023a3c:	f7fd fb3e 	bl	80210bc <mbedtls_mpi_shift_r.constprop.0>
 8023a40:	4604      	mov	r4, r0
 8023a42:	2800      	cmp	r0, #0
 8023a44:	f47f ae8d 	bne.w	8023762 <mbedtls_mpi_inv_mod+0xaa>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 8023a48:	a81c      	add	r0, sp, #112	; 0x70
 8023a4a:	f7fd fb37 	bl	80210bc <mbedtls_mpi_shift_r.constprop.0>
 8023a4e:	4604      	mov	r4, r0
 8023a50:	2800      	cmp	r0, #0
 8023a52:	f47f ae86 	bne.w	8023762 <mbedtls_mpi_inv_mod+0xaa>
        while( ( TV.p[0] & 1 ) == 0 )
 8023a56:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023a58:	681b      	ldr	r3, [r3, #0]
 8023a5a:	07db      	lsls	r3, r3, #31
 8023a5c:	f100 80bc 	bmi.w	8023bd8 <mbedtls_mpi_inv_mod+0x520>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 8023a60:	a816      	add	r0, sp, #88	; 0x58
 8023a62:	f7fd fb2b 	bl	80210bc <mbedtls_mpi_shift_r.constprop.0>
 8023a66:	4604      	mov	r4, r0
 8023a68:	2800      	cmp	r0, #0
 8023a6a:	f47f ae7a 	bne.w	8023762 <mbedtls_mpi_inv_mod+0xaa>
            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
 8023a6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023a70:	681b      	ldr	r3, [r3, #0]
 8023a72:	07d9      	lsls	r1, r3, #31
 8023a74:	d403      	bmi.n	8023a7e <mbedtls_mpi_inv_mod+0x3c6>
 8023a76:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8023a78:	681b      	ldr	r3, [r3, #0]
 8023a7a:	07da      	lsls	r2, r3, #31
 8023a7c:	d5dd      	bpl.n	8023a3a <mbedtls_mpi_inv_mod+0x382>
    s = A->s;
 8023a7e:	9f19      	ldr	r7, [sp, #100]	; 0x64
    if( A->s * B->s < 0 )
 8023a80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023a82:	fb03 f307 	mul.w	r3, r3, r7
 8023a86:	2b00      	cmp	r3, #0
 8023a88:	dbb0      	blt.n	80239ec <mbedtls_mpi_inv_mod+0x334>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8023a8a:	a919      	add	r1, sp, #100	; 0x64
 8023a8c:	4608      	mov	r0, r1
 8023a8e:	aa13      	add	r2, sp, #76	; 0x4c
 8023a90:	f7fd ff42 	bl	8021918 <mbedtls_mpi_add_abs>
 8023a94:	4604      	mov	r4, r0
 8023a96:	2800      	cmp	r0, #0
 8023a98:	d0b8      	beq.n	8023a0c <mbedtls_mpi_inv_mod+0x354>
 8023a9a:	e662      	b.n	8023762 <mbedtls_mpi_inv_mod+0xaa>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 8023a9c:	2104      	movs	r1, #4
 8023a9e:	2001      	movs	r0, #1
 8023aa0:	f00c f96a 	bl	802fd78 <calloc>
 8023aa4:	4607      	mov	r7, r0
 8023aa6:	2800      	cmp	r0, #0
 8023aa8:	f000 80f8 	beq.w	8023c9c <mbedtls_mpi_inv_mod+0x5e4>
        if( X->p != NULL )
 8023aac:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023aae:	b128      	cbz	r0, 8023abc <mbedtls_mpi_inv_mod+0x404>
    mbedtls_platform_zeroize( v, ciL * n );
 8023ab0:	4621      	mov	r1, r4
 8023ab2:	f004 f83b 	bl	8027b2c <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
 8023ab6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023ab8:	f00c f998 	bl	802fdec <free>
        X->n = nblimbs;
 8023abc:	2301      	movs	r3, #1
        X->p = p;
 8023abe:	2204      	movs	r2, #4
        X->n = nblimbs;
 8023ac0:	e9cd 370e 	strd	r3, r7, [sp, #56]	; 0x38
        X->p = p;
 8023ac4:	e6fb      	b.n	80238be <mbedtls_mpi_inv_mod+0x206>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 8023ac6:	2104      	movs	r1, #4
 8023ac8:	f00c f956 	bl	802fd78 <calloc>
 8023acc:	4607      	mov	r7, r0
 8023ace:	2800      	cmp	r0, #0
 8023ad0:	f000 80e4 	beq.w	8023c9c <mbedtls_mpi_inv_mod+0x5e4>
        if( X->p != NULL )
 8023ad4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8023ad6:	b128      	cbz	r0, 8023ae4 <mbedtls_mpi_inv_mod+0x42c>
    mbedtls_platform_zeroize( v, ciL * n );
 8023ad8:	4621      	mov	r1, r4
 8023ada:	f004 f827 	bl	8027b2c <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
 8023ade:	9812      	ldr	r0, [sp, #72]	; 0x48
 8023ae0:	f00c f984 	bl	802fdec <free>
        X->n = nblimbs;
 8023ae4:	2301      	movs	r3, #1
        X->p = p;
 8023ae6:	2204      	movs	r2, #4
        X->n = nblimbs;
 8023ae8:	e9cd 3711 	strd	r3, r7, [sp, #68]	; 0x44
        X->p = p;
 8023aec:	e6f5      	b.n	80238da <mbedtls_mpi_inv_mod+0x222>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 8023aee:	aa1c      	add	r2, sp, #112	; 0x70
 8023af0:	4610      	mov	r0, r2
 8023af2:	a907      	add	r1, sp, #28
 8023af4:	f7fd ffa8 	bl	8021a48 <mbedtls_mpi_sub_abs>
 8023af8:	4604      	mov	r4, r0
 8023afa:	2800      	cmp	r0, #0
 8023afc:	f47f ae31 	bne.w	8023762 <mbedtls_mpi_inv_mod+0xaa>
            X->s = -s;
 8023b00:	427f      	negs	r7, r7
 8023b02:	971c      	str	r7, [sp, #112]	; 0x70
    return( ret );
 8023b04:	e799      	b.n	8023a3a <mbedtls_mpi_inv_mod+0x382>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8023b06:	a91c      	add	r1, sp, #112	; 0x70
 8023b08:	4608      	mov	r0, r1
 8023b0a:	aa07      	add	r2, sp, #28
 8023b0c:	f7fd ff04 	bl	8021918 <mbedtls_mpi_add_abs>
 8023b10:	4604      	mov	r4, r0
 8023b12:	2800      	cmp	r0, #0
 8023b14:	d090      	beq.n	8023a38 <mbedtls_mpi_inv_mod+0x380>
 8023b16:	e624      	b.n	8023762 <mbedtls_mpi_inv_mod+0xaa>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 8023b18:	aa19      	add	r2, sp, #100	; 0x64
 8023b1a:	4610      	mov	r0, r2
 8023b1c:	a913      	add	r1, sp, #76	; 0x4c
 8023b1e:	f7fd ff93 	bl	8021a48 <mbedtls_mpi_sub_abs>
 8023b22:	4604      	mov	r4, r0
 8023b24:	2800      	cmp	r0, #0
 8023b26:	f47f ae1c 	bne.w	8023762 <mbedtls_mpi_inv_mod+0xaa>
            X->s = -s;
 8023b2a:	427f      	negs	r7, r7
 8023b2c:	9719      	str	r7, [sp, #100]	; 0x64
    return( ret );
 8023b2e:	e76e      	b.n	8023a0e <mbedtls_mpi_inv_mod+0x356>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 8023b30:	2104      	movs	r1, #4
 8023b32:	f00c f921 	bl	802fd78 <calloc>
 8023b36:	4607      	mov	r7, r0
 8023b38:	2800      	cmp	r0, #0
 8023b3a:	f000 80af 	beq.w	8023c9c <mbedtls_mpi_inv_mod+0x5e4>
        if( X->p != NULL )
 8023b3e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8023b40:	b128      	cbz	r0, 8023b4e <mbedtls_mpi_inv_mod+0x496>
    mbedtls_platform_zeroize( v, ciL * n );
 8023b42:	4621      	mov	r1, r4
 8023b44:	f003 fff2 	bl	8027b2c <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
 8023b48:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8023b4a:	f00c f94f 	bl	802fdec <free>
        X->n = nblimbs;
 8023b4e:	2301      	movs	r3, #1
        X->p = p;
 8023b50:	2204      	movs	r2, #4
        X->n = nblimbs;
 8023b52:	e9cd 371a 	strd	r3, r7, [sp, #104]	; 0x68
        X->p = p;
 8023b56:	e6cf      	b.n	80238f8 <mbedtls_mpi_inv_mod+0x240>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 8023b58:	2104      	movs	r1, #4
 8023b5a:	f00c f90d 	bl	802fd78 <calloc>
 8023b5e:	4607      	mov	r7, r0
 8023b60:	2800      	cmp	r0, #0
 8023b62:	f000 809b 	beq.w	8023c9c <mbedtls_mpi_inv_mod+0x5e4>
        if( X->p != NULL )
 8023b66:	981e      	ldr	r0, [sp, #120]	; 0x78
 8023b68:	b128      	cbz	r0, 8023b76 <mbedtls_mpi_inv_mod+0x4be>
    mbedtls_platform_zeroize( v, ciL * n );
 8023b6a:	4621      	mov	r1, r4
 8023b6c:	f003 ffde 	bl	8027b2c <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
 8023b70:	981e      	ldr	r0, [sp, #120]	; 0x78
 8023b72:	f00c f93b 	bl	802fdec <free>
        X->n = nblimbs;
 8023b76:	2301      	movs	r3, #1
        X->p = p;
 8023b78:	461c      	mov	r4, r3
        X->n = nblimbs;
 8023b7a:	e9cd 371d 	strd	r3, r7, [sp, #116]	; 0x74
        X->p = p;
 8023b7e:	e6c8      	b.n	8023912 <mbedtls_mpi_inv_mod+0x25a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8023b80:	a90d      	add	r1, sp, #52	; 0x34
 8023b82:	4608      	mov	r0, r1
 8023b84:	aa13      	add	r2, sp, #76	; 0x4c
 8023b86:	f7fd fec7 	bl	8021918 <mbedtls_mpi_add_abs>
 8023b8a:	4604      	mov	r4, r0
 8023b8c:	2800      	cmp	r0, #0
 8023b8e:	f43f aef4 	beq.w	802397a <mbedtls_mpi_inv_mod+0x2c2>
 8023b92:	e5e6      	b.n	8023762 <mbedtls_mpi_inv_mod+0xaa>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 8023b94:	aa10      	add	r2, sp, #64	; 0x40
 8023b96:	4610      	mov	r0, r2
 8023b98:	a907      	add	r1, sp, #28
 8023b9a:	f7fd ff55 	bl	8021a48 <mbedtls_mpi_sub_abs>
 8023b9e:	4604      	mov	r4, r0
 8023ba0:	2800      	cmp	r0, #0
 8023ba2:	f47f adde 	bne.w	8023762 <mbedtls_mpi_inv_mod+0xaa>
            X->s = -s;
 8023ba6:	427f      	negs	r7, r7
 8023ba8:	9710      	str	r7, [sp, #64]	; 0x40
    return( ret );
 8023baa:	e6ff      	b.n	80239ac <mbedtls_mpi_inv_mod+0x2f4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 8023bac:	aa0d      	add	r2, sp, #52	; 0x34
 8023bae:	4610      	mov	r0, r2
 8023bb0:	a913      	add	r1, sp, #76	; 0x4c
 8023bb2:	f7fd ff49 	bl	8021a48 <mbedtls_mpi_sub_abs>
 8023bb6:	4604      	mov	r4, r0
 8023bb8:	2800      	cmp	r0, #0
 8023bba:	f47f add2 	bne.w	8023762 <mbedtls_mpi_inv_mod+0xaa>
            X->s = -s;
 8023bbe:	427f      	negs	r7, r7
 8023bc0:	970d      	str	r7, [sp, #52]	; 0x34
    return( ret );
 8023bc2:	e6db      	b.n	802397c <mbedtls_mpi_inv_mod+0x2c4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8023bc4:	a910      	add	r1, sp, #64	; 0x40
 8023bc6:	4608      	mov	r0, r1
 8023bc8:	aa07      	add	r2, sp, #28
 8023bca:	f7fd fea5 	bl	8021918 <mbedtls_mpi_add_abs>
 8023bce:	4604      	mov	r4, r0
 8023bd0:	2800      	cmp	r0, #0
 8023bd2:	f43f aeea 	beq.w	80239aa <mbedtls_mpi_inv_mod+0x2f2>
 8023bd6:	e5c4      	b.n	8023762 <mbedtls_mpi_inv_mod+0xaa>
        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
 8023bd8:	a916      	add	r1, sp, #88	; 0x58
 8023bda:	a80a      	add	r0, sp, #40	; 0x28
 8023bdc:	f7fd fe0a 	bl	80217f4 <mbedtls_mpi_cmp_mpi>
 8023be0:	2800      	cmp	r0, #0
 8023be2:	db40      	blt.n	8023c66 <mbedtls_mpi_inv_mod+0x5ae>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 8023be4:	a90a      	add	r1, sp, #40	; 0x28
 8023be6:	4608      	mov	r0, r1
 8023be8:	aa16      	add	r2, sp, #88	; 0x58
 8023bea:	f7fd ffd5 	bl	8021b98 <mbedtls_mpi_sub_mpi>
 8023bee:	4604      	mov	r4, r0
 8023bf0:	2800      	cmp	r0, #0
 8023bf2:	f47f adb6 	bne.w	8023762 <mbedtls_mpi_inv_mod+0xaa>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 8023bf6:	a90d      	add	r1, sp, #52	; 0x34
 8023bf8:	4608      	mov	r0, r1
 8023bfa:	aa19      	add	r2, sp, #100	; 0x64
 8023bfc:	f7fd ffcc 	bl	8021b98 <mbedtls_mpi_sub_mpi>
 8023c00:	4604      	mov	r4, r0
 8023c02:	2800      	cmp	r0, #0
 8023c04:	f47f adad 	bne.w	8023762 <mbedtls_mpi_inv_mod+0xaa>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
 8023c08:	a910      	add	r1, sp, #64	; 0x40
 8023c0a:	4608      	mov	r0, r1
 8023c0c:	aa1c      	add	r2, sp, #112	; 0x70
 8023c0e:	f7fd ffc3 	bl	8021b98 <mbedtls_mpi_sub_mpi>
 8023c12:	4604      	mov	r4, r0
 8023c14:	2800      	cmp	r0, #0
 8023c16:	f47f ada4 	bne.w	8023762 <mbedtls_mpi_inv_mod+0xaa>
    *p  = ( z < 0 ) ? -z : z;
 8023c1a:	2300      	movs	r3, #0
    Y.s = ( z < 0 ) ? -1 : 1;
 8023c1c:	2401      	movs	r4, #1
    Y.p = p;
 8023c1e:	af03      	add	r7, sp, #12
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 8023c20:	a91f      	add	r1, sp, #124	; 0x7c
 8023c22:	a80a      	add	r0, sp, #40	; 0x28
    Y.n = 1;
 8023c24:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
    *p  = ( z < 0 ) ? -z : z;
 8023c28:	9303      	str	r3, [sp, #12]
    Y.p = p;
 8023c2a:	9721      	str	r7, [sp, #132]	; 0x84
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 8023c2c:	f7fd f9d0 	bl	8020fd0 <mbedtls_mpi_cmp_mpi.constprop.1>
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
 8023c30:	2800      	cmp	r0, #0
 8023c32:	f47f ae77 	bne.w	8023924 <mbedtls_mpi_inv_mod+0x26c>
    *p  = ( z < 0 ) ? -z : z;
 8023c36:	4681      	mov	r9, r0
    Y.s = ( z < 0 ) ? -1 : 1;
 8023c38:	46a0      	mov	r8, r4
 8023c3a:	e008      	b.n	8023c4e <mbedtls_mpi_inv_mod+0x596>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 8023c3c:	a919      	add	r1, sp, #100	; 0x64
 8023c3e:	462a      	mov	r2, r5
 8023c40:	4608      	mov	r0, r1
 8023c42:	f7fd ff81 	bl	8021b48 <mbedtls_mpi_add_mpi>
 8023c46:	4604      	mov	r4, r0
 8023c48:	2800      	cmp	r0, #0
 8023c4a:	f47f ad8a 	bne.w	8023762 <mbedtls_mpi_inv_mod+0xaa>
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 8023c4e:	a91f      	add	r1, sp, #124	; 0x7c
 8023c50:	a819      	add	r0, sp, #100	; 0x64
    Y.n = 1;
 8023c52:	e9cd 881f 	strd	r8, r8, [sp, #124]	; 0x7c
    *p  = ( z < 0 ) ? -z : z;
 8023c56:	f8cd 900c 	str.w	r9, [sp, #12]
    Y.p = p;
 8023c5a:	9721      	str	r7, [sp, #132]	; 0x84
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 8023c5c:	f7fd f9b8 	bl	8020fd0 <mbedtls_mpi_cmp_mpi.constprop.1>
    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 8023c60:	2800      	cmp	r0, #0
 8023c62:	dbeb      	blt.n	8023c3c <mbedtls_mpi_inv_mod+0x584>
 8023c64:	e026      	b.n	8023cb4 <mbedtls_mpi_inv_mod+0x5fc>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 8023c66:	a916      	add	r1, sp, #88	; 0x58
 8023c68:	4608      	mov	r0, r1
 8023c6a:	aa0a      	add	r2, sp, #40	; 0x28
 8023c6c:	f7fd ff94 	bl	8021b98 <mbedtls_mpi_sub_mpi>
 8023c70:	4604      	mov	r4, r0
 8023c72:	2800      	cmp	r0, #0
 8023c74:	f47f ad75 	bne.w	8023762 <mbedtls_mpi_inv_mod+0xaa>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 8023c78:	a919      	add	r1, sp, #100	; 0x64
 8023c7a:	4608      	mov	r0, r1
 8023c7c:	aa0d      	add	r2, sp, #52	; 0x34
 8023c7e:	f7fd ff8b 	bl	8021b98 <mbedtls_mpi_sub_mpi>
 8023c82:	4604      	mov	r4, r0
 8023c84:	2800      	cmp	r0, #0
 8023c86:	f47f ad6c 	bne.w	8023762 <mbedtls_mpi_inv_mod+0xaa>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 8023c8a:	a91c      	add	r1, sp, #112	; 0x70
 8023c8c:	4608      	mov	r0, r1
 8023c8e:	aa10      	add	r2, sp, #64	; 0x40
 8023c90:	f7fd ff82 	bl	8021b98 <mbedtls_mpi_sub_mpi>
 8023c94:	4604      	mov	r4, r0
 8023c96:	2800      	cmp	r0, #0
 8023c98:	d0bf      	beq.n	8023c1a <mbedtls_mpi_inv_mod+0x562>
 8023c9a:	e562      	b.n	8023762 <mbedtls_mpi_inv_mod+0xaa>
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8023c9c:	f06f 040f 	mvn.w	r4, #15
 8023ca0:	e55f      	b.n	8023762 <mbedtls_mpi_inv_mod+0xaa>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 8023ca2:	a919      	add	r1, sp, #100	; 0x64
 8023ca4:	462a      	mov	r2, r5
 8023ca6:	4608      	mov	r0, r1
 8023ca8:	f7fd ff76 	bl	8021b98 <mbedtls_mpi_sub_mpi>
 8023cac:	4604      	mov	r4, r0
 8023cae:	2800      	cmp	r0, #0
 8023cb0:	f47f ad57 	bne.w	8023762 <mbedtls_mpi_inv_mod+0xaa>
    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 8023cb4:	4629      	mov	r1, r5
 8023cb6:	a819      	add	r0, sp, #100	; 0x64
 8023cb8:	f7fd fd9c 	bl	80217f4 <mbedtls_mpi_cmp_mpi>
 8023cbc:	2800      	cmp	r0, #0
 8023cbe:	daf0      	bge.n	8023ca2 <mbedtls_mpi_inv_mod+0x5ea>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
 8023cc0:	4630      	mov	r0, r6
 8023cc2:	a919      	add	r1, sp, #100	; 0x64
 8023cc4:	f7fd fa40 	bl	8021148 <mbedtls_mpi_copy>
 8023cc8:	4604      	mov	r4, r0
cleanup:
 8023cca:	e54a      	b.n	8023762 <mbedtls_mpi_inv_mod+0xaa>

08023ccc <mbedtls_mpi_is_prime_ext>:
 * Pseudo-primality test: small factors, then Miller-Rabin
 */
int mbedtls_mpi_is_prime_ext( const mbedtls_mpi *X, int rounds,
                              int (*f_rng)(void *, unsigned char *, size_t),
                              void *p_rng )
{
 8023ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    MPI_VALIDATE_RET( X     != NULL );
    MPI_VALIDATE_RET( f_rng != NULL );

    XX.s = 1;
    XX.n = X->n;
    XX.p = X->p;
 8023cd0:	e9d0 4501 	ldrd	r4, r5, [r0, #4]
    XX.s = 1;
 8023cd4:	2601      	movs	r6, #1
{
 8023cd6:	b085      	sub	sp, #20
    XX.p = X->p;
 8023cd8:	e9cd 4502 	strd	r4, r5, [sp, #8]
    XX.s = 1;
 8023cdc:	9601      	str	r6, [sp, #4]
    for( i = X->n; i > 0; i-- )
 8023cde:	b38c      	cbz	r4, 8023d44 <mbedtls_mpi_is_prime_ext+0x78>
 8023ce0:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 8023ce4:	4699      	mov	r9, r3
 8023ce6:	460f      	mov	r7, r1
 8023ce8:	4690      	mov	r8, r2
 8023cea:	4603      	mov	r3, r0
 8023cec:	4626      	mov	r6, r4
 8023cee:	e001      	b.n	8023cf4 <mbedtls_mpi_is_prime_ext+0x28>
 8023cf0:	3e01      	subs	r6, #1
 8023cf2:	d027      	beq.n	8023d44 <mbedtls_mpi_is_prime_ext+0x78>
        if( X->p[i - 1] != 0 )
 8023cf4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8023cf8:	2a00      	cmp	r2, #0
 8023cfa:	d0f9      	beq.n	8023cf0 <mbedtls_mpi_is_prime_ext+0x24>
 8023cfc:	4603      	mov	r3, r0
 8023cfe:	4626      	mov	r6, r4
 8023d00:	e001      	b.n	8023d06 <mbedtls_mpi_is_prime_ext+0x3a>
    for( i = X->n; i > 0; i-- )
 8023d02:	3e01      	subs	r6, #1
 8023d04:	d005      	beq.n	8023d12 <mbedtls_mpi_is_prime_ext+0x46>
        if( X->p[i - 1] != 0 )
 8023d06:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8023d0a:	2a00      	cmp	r2, #0
 8023d0c:	d0f9      	beq.n	8023d02 <mbedtls_mpi_is_prime_ext+0x36>
    if( i > j ) return(  X->s );
 8023d0e:	2e01      	cmp	r6, #1
 8023d10:	d915      	bls.n	8023d3e <mbedtls_mpi_is_prime_ext+0x72>
    if( j > i ) return( -Y->s );
 8023d12:	682d      	ldr	r5, [r5, #0]
 8023d14:	e001      	b.n	8023d1a <mbedtls_mpi_is_prime_ext+0x4e>
    for( i = X->n; i > 0; i-- )
 8023d16:	3c01      	subs	r4, #1
 8023d18:	d005      	beq.n	8023d26 <mbedtls_mpi_is_prime_ext+0x5a>
        if( X->p[i - 1] != 0 )
 8023d1a:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8023d1e:	2b00      	cmp	r3, #0
 8023d20:	d0f9      	beq.n	8023d16 <mbedtls_mpi_is_prime_ext+0x4a>
    if( i > j ) return(  X->s );
 8023d22:	2c01      	cmp	r4, #1
 8023d24:	d913      	bls.n	8023d4e <mbedtls_mpi_is_prime_ext+0x82>
    if( ( X->p[0] & 1 ) == 0 )
 8023d26:	07eb      	lsls	r3, r5, #31
 8023d28:	d50c      	bpl.n	8023d44 <mbedtls_mpi_is_prime_ext+0x78>
 8023d2a:	a801      	add	r0, sp, #4
 8023d2c:	f7fd f97c 	bl	8021028 <mpi_check_small_factors.part.0>
        return( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );

    if( mbedtls_mpi_cmp_int( &XX, 2 ) == 0 )
        return( 0 );

    if( ( ret = mpi_check_small_factors( &XX ) ) != 0 )
 8023d30:	b1a0      	cbz	r0, 8023d5c <mbedtls_mpi_is_prime_ext+0x90>
    {
        if( ret == 1 )
            return( 0 );
 8023d32:	2801      	cmp	r0, #1
 8023d34:	bf08      	it	eq
 8023d36:	2000      	moveq	r0, #0

        return( ret );
    }

    return( mpi_miller_rabin( &XX, rounds, f_rng, p_rng ) );
}
 8023d38:	b005      	add	sp, #20
 8023d3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 8023d3e:	682d      	ldr	r5, [r5, #0]
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 8023d40:	2d01      	cmp	r5, #1
 8023d42:	d1ea      	bne.n	8023d1a <mbedtls_mpi_is_prime_ext+0x4e>
        return( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );
 8023d44:	f06f 000d 	mvn.w	r0, #13
}
 8023d48:	b005      	add	sp, #20
 8023d4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 8023d4e:	2d02      	cmp	r5, #2
        return( 0 );
 8023d50:	bf08      	it	eq
 8023d52:	2000      	moveq	r0, #0
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 8023d54:	d1e7      	bne.n	8023d26 <mbedtls_mpi_is_prime_ext+0x5a>
}
 8023d56:	b005      	add	sp, #20
 8023d58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return( mpi_miller_rabin( &XX, rounds, f_rng, p_rng ) );
 8023d5c:	464b      	mov	r3, r9
 8023d5e:	4642      	mov	r2, r8
 8023d60:	4639      	mov	r1, r7
 8023d62:	a801      	add	r0, sp, #4
 8023d64:	f7ff fa7e 	bl	8023264 <mpi_miller_rabin>
 8023d68:	e7ee      	b.n	8023d48 <mbedtls_mpi_is_prime_ext+0x7c>
 8023d6a:	bf00      	nop

08023d6c <get_no_padding>:
 * but a trivial get_padding function
 */
static int get_no_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
    if( NULL == input || NULL == data_len )
 8023d6c:	b118      	cbz	r0, 8023d76 <get_no_padding+0xa>
 8023d6e:	b112      	cbz	r2, 8023d76 <get_no_padding+0xa>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *data_len = input_len;

    return( 0 );
 8023d70:	2000      	movs	r0, #0
    *data_len = input_len;
 8023d72:	6011      	str	r1, [r2, #0]
    return( 0 );
 8023d74:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8023d76:	4801      	ldr	r0, [pc, #4]	; (8023d7c <get_no_padding+0x10>)
}
 8023d78:	4770      	bx	lr
 8023d7a:	bf00      	nop
 8023d7c:	ffff9f00 	.word	0xffff9f00

08023d80 <mbedtls_cipher_info_from_type>:
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 8023d80:	4b07      	ldr	r3, [pc, #28]	; (8023da0 <mbedtls_cipher_info_from_type+0x20>)
{
 8023d82:	4601      	mov	r1, r0
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 8023d84:	6858      	ldr	r0, [r3, #4]
 8023d86:	b148      	cbz	r0, 8023d9c <mbedtls_cipher_info_from_type+0x1c>
 8023d88:	3308      	adds	r3, #8
 8023d8a:	e002      	b.n	8023d92 <mbedtls_cipher_info_from_type+0x12>
 8023d8c:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8023d90:	b120      	cbz	r0, 8023d9c <mbedtls_cipher_info_from_type+0x1c>
        if( def->type == cipher_type )
 8023d92:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8023d96:	3308      	adds	r3, #8
 8023d98:	428a      	cmp	r2, r1
 8023d9a:	d1f7      	bne.n	8023d8c <mbedtls_cipher_info_from_type+0xc>
}
 8023d9c:	4770      	bx	lr
 8023d9e:	bf00      	nop
 8023da0:	08034828 	.word	0x08034828

08023da4 <mbedtls_cipher_info_from_values>:
{
 8023da4:	b430      	push	{r4, r5}
 8023da6:	4605      	mov	r5, r0
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 8023da8:	4b07      	ldr	r3, [pc, #28]	; (8023dc8 <mbedtls_cipher_info_from_values+0x24>)
 8023daa:	6858      	ldr	r0, [r3, #4]
 8023dac:	b150      	cbz	r0, 8023dc4 <mbedtls_cipher_info_from_values+0x20>
        if( def->info->base->cipher == cipher_id &&
 8023dae:	6984      	ldr	r4, [r0, #24]
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 8023db0:	3308      	adds	r3, #8
        if( def->info->base->cipher == cipher_id &&
 8023db2:	7824      	ldrb	r4, [r4, #0]
 8023db4:	42ac      	cmp	r4, r5
 8023db6:	d1f8      	bne.n	8023daa <mbedtls_cipher_info_from_values+0x6>
 8023db8:	6844      	ldr	r4, [r0, #4]
 8023dba:	428c      	cmp	r4, r1
 8023dbc:	d1f5      	bne.n	8023daa <mbedtls_cipher_info_from_values+0x6>
            def->info->key_bitlen == (unsigned) key_bitlen &&
 8023dbe:	7844      	ldrb	r4, [r0, #1]
 8023dc0:	4294      	cmp	r4, r2
 8023dc2:	d1f2      	bne.n	8023daa <mbedtls_cipher_info_from_values+0x6>
}
 8023dc4:	bc30      	pop	{r4, r5}
 8023dc6:	4770      	bx	lr
 8023dc8:	08034828 	.word	0x08034828

08023dcc <mbedtls_cipher_init>:
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 8023dcc:	2240      	movs	r2, #64	; 0x40
 8023dce:	2100      	movs	r1, #0
 8023dd0:	f00c b849 	b.w	802fe66 <memset>

08023dd4 <mbedtls_cipher_free>:
    if( ctx == NULL )
 8023dd4:	b168      	cbz	r0, 8023df2 <mbedtls_cipher_free+0x1e>
{
 8023dd6:	b510      	push	{r4, lr}
 8023dd8:	4604      	mov	r4, r0
    if( ctx->cipher_ctx )
 8023dda:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8023ddc:	b118      	cbz	r0, 8023de6 <mbedtls_cipher_free+0x12>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
 8023dde:	6823      	ldr	r3, [r4, #0]
 8023de0:	699b      	ldr	r3, [r3, #24]
 8023de2:	699b      	ldr	r3, [r3, #24]
 8023de4:	4798      	blx	r3
    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
 8023de6:	4620      	mov	r0, r4
}
 8023de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
 8023dec:	2140      	movs	r1, #64	; 0x40
 8023dee:	f003 be9d 	b.w	8027b2c <mbedtls_platform_zeroize>
 8023df2:	4770      	bx	lr

08023df4 <mbedtls_cipher_setup>:
    if( cipher_info == NULL )
 8023df4:	b1a1      	cbz	r1, 8023e20 <mbedtls_cipher_setup+0x2c>
{
 8023df6:	b538      	push	{r3, r4, r5, lr}
 8023df8:	460c      	mov	r4, r1
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 8023dfa:	2240      	movs	r2, #64	; 0x40
 8023dfc:	2100      	movs	r1, #0
 8023dfe:	4605      	mov	r5, r0
 8023e00:	f00c f831 	bl	802fe66 <memset>
    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
 8023e04:	69a3      	ldr	r3, [r4, #24]
 8023e06:	695b      	ldr	r3, [r3, #20]
 8023e08:	4798      	blx	r3
 8023e0a:	63e8      	str	r0, [r5, #60]	; 0x3c
 8023e0c:	b150      	cbz	r0, 8023e24 <mbedtls_cipher_setup+0x30>
    ctx->cipher_info = cipher_info;
 8023e0e:	602c      	str	r4, [r5, #0]
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx,
                                     mbedtls_cipher_padding_t mode )
{
    CIPHER_VALIDATE_RET( ctx != NULL );

    if( NULL == ctx->cipher_info || MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
 8023e10:	7863      	ldrb	r3, [r4, #1]
    return( 0 );
 8023e12:	2000      	movs	r0, #0
    if( NULL == ctx->cipher_info || MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
 8023e14:	2b02      	cmp	r3, #2
 8023e16:	d102      	bne.n	8023e1e <mbedtls_cipher_setup+0x2a>
        ctx->get_padding = get_zeros_padding;
        break;
#endif
    case MBEDTLS_PADDING_NONE:
        ctx->add_padding = NULL;
        ctx->get_padding = get_no_padding;
 8023e18:	4b03      	ldr	r3, [pc, #12]	; (8023e28 <mbedtls_cipher_setup+0x34>)
 8023e1a:	e9c5 0303 	strd	r0, r3, [r5, #12]
}
 8023e1e:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8023e20:	4802      	ldr	r0, [pc, #8]	; (8023e2c <mbedtls_cipher_setup+0x38>)
}
 8023e22:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 8023e24:	4802      	ldr	r0, [pc, #8]	; (8023e30 <mbedtls_cipher_setup+0x3c>)
}
 8023e26:	bd38      	pop	{r3, r4, r5, pc}
 8023e28:	08023d6d 	.word	0x08023d6d
 8023e2c:	ffff9f00 	.word	0xffff9f00
 8023e30:	ffff9e80 	.word	0xffff9e80

08023e34 <mbedtls_cipher_setkey>:
{
 8023e34:	b430      	push	{r4, r5}
    if( ctx->cipher_info == NULL )
 8023e36:	6804      	ldr	r4, [r0, #0]
 8023e38:	b1c4      	cbz	r4, 8023e6c <mbedtls_cipher_setkey+0x38>
    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 8023e3a:	6925      	ldr	r5, [r4, #16]
 8023e3c:	07ad      	lsls	r5, r5, #30
 8023e3e:	d512      	bpl.n	8023e66 <mbedtls_cipher_setkey+0x32>
    if( MBEDTLS_ENCRYPT == operation ||
 8023e40:	2b01      	cmp	r3, #1
    ctx->key_bitlen = key_bitlen;
 8023e42:	6042      	str	r2, [r0, #4]
    ctx->operation = operation;
 8023e44:	7203      	strb	r3, [r0, #8]
    if( MBEDTLS_ENCRYPT == operation ||
 8023e46:	d009      	beq.n	8023e5c <mbedtls_cipher_setkey+0x28>
 8023e48:	7865      	ldrb	r5, [r4, #1]
 8023e4a:	3d03      	subs	r5, #3
 8023e4c:	2d02      	cmp	r5, #2
 8023e4e:	d905      	bls.n	8023e5c <mbedtls_cipher_setkey+0x28>
    if( MBEDTLS_DECRYPT == operation )
 8023e50:	b963      	cbnz	r3, 8023e6c <mbedtls_cipher_setkey+0x38>
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 8023e52:	69a3      	ldr	r3, [r4, #24]
 8023e54:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8023e56:	691b      	ldr	r3, [r3, #16]
}
 8023e58:	bc30      	pop	{r4, r5}
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 8023e5a:	4718      	bx	r3
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 8023e5c:	69a3      	ldr	r3, [r4, #24]
 8023e5e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8023e60:	68db      	ldr	r3, [r3, #12]
}
 8023e62:	bc30      	pop	{r4, r5}
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 8023e64:	4718      	bx	r3
    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 8023e66:	6865      	ldr	r5, [r4, #4]
 8023e68:	4295      	cmp	r5, r2
 8023e6a:	d0e9      	beq.n	8023e40 <mbedtls_cipher_setkey+0xc>
}
 8023e6c:	4801      	ldr	r0, [pc, #4]	; (8023e74 <mbedtls_cipher_setkey+0x40>)
 8023e6e:	bc30      	pop	{r4, r5}
 8023e70:	4770      	bx	lr
 8023e72:	bf00      	nop
 8023e74:	ffff9f00 	.word	0xffff9f00

08023e78 <mbedtls_cipher_update>:
{
 8023e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e7c:	4604      	mov	r4, r0
    if( ctx->cipher_info == NULL )
 8023e7e:	6800      	ldr	r0, [r0, #0]
{
 8023e80:	b085      	sub	sp, #20
 8023e82:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8023e86:	9303      	str	r3, [sp, #12]
    if( ctx->cipher_info == NULL )
 8023e88:	2800      	cmp	r0, #0
 8023e8a:	f000 8087 	beq.w	8023f9c <mbedtls_cipher_update+0x124>
    *olen = 0;
 8023e8e:	4615      	mov	r5, r2
 8023e90:	2200      	movs	r2, #0
 8023e92:	f8c9 2000 	str.w	r2, [r9]
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, 0 );
    if( ctx->cipher_info == NULL )
        return 0;

    return ctx->cipher_info->block_size;
 8023e96:	f8d0 8014 	ldr.w	r8, [r0, #20]
    if ( 0 == block_size )
 8023e9a:	f1b8 0f00 	cmp.w	r8, #0
 8023e9e:	f000 80b6 	beq.w	802400e <mbedtls_cipher_update+0x196>
    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 8023ea2:	7842      	ldrb	r2, [r0, #1]
 8023ea4:	460e      	mov	r6, r1
 8023ea6:	2a01      	cmp	r2, #1
 8023ea8:	d05d      	beq.n	8023f66 <mbedtls_cipher_update+0xee>
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
 8023eaa:	2a06      	cmp	r2, #6
 8023eac:	f000 80a3 	beq.w	8023ff6 <mbedtls_cipher_update+0x17e>
    if( input == output &&
 8023eb0:	4299      	cmp	r1, r3
 8023eb2:	d06b      	beq.n	8023f8c <mbedtls_cipher_update+0x114>
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CBC )
 8023eb4:	2a02      	cmp	r2, #2
 8023eb6:	f040 80a8 	bne.w	802400a <mbedtls_cipher_update+0x192>
        if( ( ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&
 8023eba:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8023ebe:	b9ab      	cbnz	r3, 8023eec <mbedtls_cipher_update+0x74>
 8023ec0:	68e3      	ldr	r3, [r4, #12]
                ilen <= block_size - ctx->unprocessed_len ) ||
 8023ec2:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
        if( ( ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&
 8023ec6:	b1ab      	cbz	r3, 8023ef4 <mbedtls_cipher_update+0x7c>
                ilen <= block_size - ctx->unprocessed_len ) ||
 8023ec8:	eba8 030a 	sub.w	r3, r8, sl
        if( ( ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&
 8023ecc:	42ab      	cmp	r3, r5
 8023ece:	d315      	bcc.n	8023efc <mbedtls_cipher_update+0x84>
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 8023ed0:	f10a 0014 	add.w	r0, sl, #20
 8023ed4:	462a      	mov	r2, r5
 8023ed6:	4631      	mov	r1, r6
 8023ed8:	4420      	add	r0, r4
 8023eda:	f00b ff9d 	bl	802fe18 <memcpy>
            return( 0 );
 8023ede:	2000      	movs	r0, #0
            ctx->unprocessed_len += ilen;
 8023ee0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8023ee2:	442a      	add	r2, r5
 8023ee4:	6262      	str	r2, [r4, #36]	; 0x24
}
 8023ee6:	b005      	add	sp, #20
 8023ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                ilen < block_size - ctx->unprocessed_len ) ||
 8023eec:	2b01      	cmp	r3, #1
                ilen < block_size - ctx->unprocessed_len ) )
 8023eee:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
                ilen < block_size - ctx->unprocessed_len ) ||
 8023ef2:	d103      	bne.n	8023efc <mbedtls_cipher_update+0x84>
                ilen < block_size - ctx->unprocessed_len ) )
 8023ef4:	eba8 030a 	sub.w	r3, r8, sl
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 8023ef8:	42ab      	cmp	r3, r5
 8023efa:	d8e9      	bhi.n	8023ed0 <mbedtls_cipher_update+0x58>
        if( 0 != ctx->unprocessed_len )
 8023efc:	f1ba 0f00 	cmp.w	sl, #0
 8023f00:	d14e      	bne.n	8023fa0 <mbedtls_cipher_update+0x128>
        if( 0 != ilen )
 8023f02:	2d00      	cmp	r5, #0
 8023f04:	d03e      	beq.n	8023f84 <mbedtls_cipher_update+0x10c>
            copy_len = ilen % block_size;
 8023f06:	fbb5 faf8 	udiv	sl, r5, r8
 8023f0a:	fb08 5a1a 	mls	sl, r8, sl, r5
            if( copy_len == 0 &&
 8023f0e:	f1ba 0f00 	cmp.w	sl, #0
 8023f12:	d105      	bne.n	8023f20 <mbedtls_cipher_update+0xa8>
                ctx->operation == MBEDTLS_DECRYPT &&
 8023f14:	f994 1008 	ldrsb.w	r1, [r4, #8]
            if( copy_len == 0 &&
 8023f18:	b981      	cbnz	r1, 8023f3c <mbedtls_cipher_update+0xc4>
                ctx->operation == MBEDTLS_DECRYPT &&
 8023f1a:	68e3      	ldr	r3, [r4, #12]
 8023f1c:	b173      	cbz	r3, 8023f3c <mbedtls_cipher_update+0xc4>
 8023f1e:	46c2      	mov	sl, r8
            memcpy( ctx->unprocessed_data, &( input[ilen - copy_len] ),
 8023f20:	eba5 050a 	sub.w	r5, r5, sl
 8023f24:	4652      	mov	r2, sl
 8023f26:	1971      	adds	r1, r6, r5
 8023f28:	f104 0014 	add.w	r0, r4, #20
 8023f2c:	f00b ff74 	bl	802fe18 <memcpy>
            ctx->unprocessed_len += copy_len;
 8023f30:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8023f32:	4452      	add	r2, sl
 8023f34:	6262      	str	r2, [r4, #36]	; 0x24
        if( ilen )
 8023f36:	b32d      	cbz	r5, 8023f84 <mbedtls_cipher_update+0x10c>
 8023f38:	f994 1008 	ldrsb.w	r1, [r4, #8]
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8023f3c:	6823      	ldr	r3, [r4, #0]
 8023f3e:	9a03      	ldr	r2, [sp, #12]
 8023f40:	699b      	ldr	r3, [r3, #24]
 8023f42:	e9cd 6200 	strd	r6, r2, [sp]
 8023f46:	462a      	mov	r2, r5
 8023f48:	689e      	ldr	r6, [r3, #8]
 8023f4a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8023f4c:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8023f50:	47b0      	blx	r6
 8023f52:	2800      	cmp	r0, #0
 8023f54:	d1c7      	bne.n	8023ee6 <mbedtls_cipher_update+0x6e>
            *olen += ilen;
 8023f56:	f8d9 2000 	ldr.w	r2, [r9]
 8023f5a:	442a      	add	r2, r5
 8023f5c:	f8c9 2000 	str.w	r2, [r9]
}
 8023f60:	b005      	add	sp, #20
 8023f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( ilen != block_size )
 8023f66:	4545      	cmp	r5, r8
 8023f68:	d153      	bne.n	8024012 <mbedtls_cipher_update+0x19a>
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 8023f6a:	6982      	ldr	r2, [r0, #24]
        *olen = ilen;
 8023f6c:	f8c9 5000 	str.w	r5, [r9]
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 8023f70:	6855      	ldr	r5, [r2, #4]
 8023f72:	460a      	mov	r2, r1
 8023f74:	46ac      	mov	ip, r5
 8023f76:	f994 1008 	ldrsb.w	r1, [r4, #8]
 8023f7a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8023f7c:	b005      	add	sp, #20
 8023f7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 8023f82:	4760      	bx	ip
        return( 0 );
 8023f84:	2000      	movs	r0, #0
}
 8023f86:	b005      	add	sp, #20
 8023f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( input == output &&
 8023f8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023f8e:	b92b      	cbnz	r3, 8023f9c <mbedtls_cipher_update+0x124>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 8023f90:	fbb5 f3f8 	udiv	r3, r5, r8
 8023f94:	fb08 5313 	mls	r3, r8, r3, r5
 8023f98:	2b00      	cmp	r3, #0
 8023f9a:	d08b      	beq.n	8023eb4 <mbedtls_cipher_update+0x3c>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8023f9c:	481e      	ldr	r0, [pc, #120]	; (8024018 <mbedtls_cipher_update+0x1a0>)
 8023f9e:	e7a2      	b.n	8023ee6 <mbedtls_cipher_update+0x6e>
            copy_len = block_size - ctx->unprocessed_len;
 8023fa0:	eba8 0b0a 	sub.w	fp, r8, sl
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 8023fa4:	f10a 0014 	add.w	r0, sl, #20
 8023fa8:	465a      	mov	r2, fp
 8023faa:	4631      	mov	r1, r6
 8023fac:	4420      	add	r0, r4
 8023fae:	f00b ff33 	bl	802fe18 <memcpy>
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8023fb2:	4622      	mov	r2, r4
 8023fb4:	f852 1b14 	ldr.w	r1, [r2], #20
 8023fb8:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8023fbc:	6989      	ldr	r1, [r1, #24]
 8023fbe:	9200      	str	r2, [sp, #0]
 8023fc0:	9a03      	ldr	r2, [sp, #12]
 8023fc2:	9201      	str	r2, [sp, #4]
 8023fc4:	688a      	ldr	r2, [r1, #8]
 8023fc6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8023fc8:	4617      	mov	r7, r2
 8023fca:	f994 1008 	ldrsb.w	r1, [r4, #8]
 8023fce:	4642      	mov	r2, r8
 8023fd0:	47b8      	blx	r7
 8023fd2:	2800      	cmp	r0, #0
 8023fd4:	d187      	bne.n	8023ee6 <mbedtls_cipher_update+0x6e>
            *olen += block_size;
 8023fd6:	f8d9 3000 	ldr.w	r3, [r9]
            output += block_size;
 8023fda:	9a03      	ldr	r2, [sp, #12]
 8023fdc:	eba5 0508 	sub.w	r5, r5, r8
            *olen += block_size;
 8023fe0:	4443      	add	r3, r8
            output += block_size;
 8023fe2:	4442      	add	r2, r8
            ilen -= copy_len;
 8023fe4:	4455      	add	r5, sl
            *olen += block_size;
 8023fe6:	f8c9 3000 	str.w	r3, [r9]
            output += block_size;
 8023fea:	9203      	str	r2, [sp, #12]
            input += copy_len;
 8023fec:	445e      	add	r6, fp
            ctx->unprocessed_len = 0;
 8023fee:	6260      	str	r0, [r4, #36]	; 0x24
        if( 0 != ilen )
 8023ff0:	2d00      	cmp	r5, #0
 8023ff2:	d188      	bne.n	8023f06 <mbedtls_cipher_update+0x8e>
 8023ff4:	e7c6      	b.n	8023f84 <mbedtls_cipher_update+0x10c>
        return( mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 8023ff6:	460a      	mov	r2, r1
 8023ff8:	4629      	mov	r1, r5
 8023ffa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        *olen = ilen;
 8023ffc:	f8c9 5000 	str.w	r5, [r9]
}
 8024000:	b005      	add	sp, #20
 8024002:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return( mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 8024006:	f001 bb6b 	b.w	80256e0 <mbedtls_gcm_update>
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 802400a:	4804      	ldr	r0, [pc, #16]	; (802401c <mbedtls_cipher_update+0x1a4>)
 802400c:	e76b      	b.n	8023ee6 <mbedtls_cipher_update+0x6e>
        return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
 802400e:	4804      	ldr	r0, [pc, #16]	; (8024020 <mbedtls_cipher_update+0x1a8>)
 8024010:	e769      	b.n	8023ee6 <mbedtls_cipher_update+0x6e>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 8024012:	4804      	ldr	r0, [pc, #16]	; (8024024 <mbedtls_cipher_update+0x1ac>)
 8024014:	e767      	b.n	8023ee6 <mbedtls_cipher_update+0x6e>
 8024016:	bf00      	nop
 8024018:	ffff9f00 	.word	0xffff9f00
 802401c:	ffff9f80 	.word	0xffff9f80
 8024020:	ffff9c80 	.word	0xffff9c80
 8024024:	ffff9d80 	.word	0xffff9d80

08024028 <mbedtls_cipher_finish>:
    if( ctx->cipher_info == NULL )
 8024028:	6803      	ldr	r3, [r0, #0]
 802402a:	2b00      	cmp	r3, #0
 802402c:	d062      	beq.n	80240f4 <mbedtls_cipher_finish+0xcc>
{
 802402e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024032:	4604      	mov	r4, r0
    *olen = 0;
 8024034:	2000      	movs	r0, #0
 8024036:	6010      	str	r0, [r2, #0]
    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 8024038:	4615      	mov	r5, r2
 802403a:	785a      	ldrb	r2, [r3, #1]
 802403c:	460e      	mov	r6, r1
 802403e:	1ed1      	subs	r1, r2, #3
 8024040:	2904      	cmp	r1, #4
{
 8024042:	b082      	sub	sp, #8
    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 8024044:	d917      	bls.n	8024076 <mbedtls_cipher_finish+0x4e>
        MBEDTLS_MODE_GCM == ctx->cipher_info->mode ||
 8024046:	2a09      	cmp	r2, #9
 8024048:	d015      	beq.n	8024076 <mbedtls_cipher_finish+0x4e>
    if ( ( MBEDTLS_CIPHER_CHACHA20          == ctx->cipher_info->type ) ||
 802404a:	7819      	ldrb	r1, [r3, #0]
 802404c:	3948      	subs	r1, #72	; 0x48
 802404e:	2901      	cmp	r1, #1
 8024050:	d911      	bls.n	8024076 <mbedtls_cipher_finish+0x4e>
    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
 8024052:	2a01      	cmp	r2, #1
 8024054:	d017      	beq.n	8024086 <mbedtls_cipher_finish+0x5e>
    if( MBEDTLS_MODE_CBC == ctx->cipher_info->mode )
 8024056:	2a02      	cmp	r2, #2
 8024058:	d148      	bne.n	80240ec <mbedtls_cipher_finish+0xc4>
        if( MBEDTLS_ENCRYPT == ctx->operation )
 802405a:	f994 1008 	ldrsb.w	r1, [r4, #8]
 802405e:	2901      	cmp	r1, #1
 8024060:	d00c      	beq.n	802407c <mbedtls_cipher_finish+0x54>
 8024062:	695a      	ldr	r2, [r3, #20]
        else if( mbedtls_cipher_get_block_size( ctx ) != ctx->unprocessed_len )
 8024064:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8024066:	4297      	cmp	r7, r2
 8024068:	d038      	beq.n	80240dc <mbedtls_cipher_finish+0xb4>
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
 802406a:	68e3      	ldr	r3, [r4, #12]
        return( 0 );
 802406c:	4822      	ldr	r0, [pc, #136]	; (80240f8 <mbedtls_cipher_finish+0xd0>)
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
 802406e:	b913      	cbnz	r3, 8024076 <mbedtls_cipher_finish+0x4e>
        return( 0 );
 8024070:	2f00      	cmp	r7, #0
 8024072:	bf08      	it	eq
 8024074:	2000      	moveq	r0, #0
}
 8024076:	b002      	add	sp, #8
 8024078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if( NULL == ctx->add_padding )
 802407c:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8024080:	f1b8 0f00 	cmp.w	r8, #0
 8024084:	d107      	bne.n	8024096 <mbedtls_cipher_finish+0x6e>
        if( ctx->unprocessed_len != 0 )
 8024086:	6a63      	ldr	r3, [r4, #36]	; 0x24
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 8024088:	481b      	ldr	r0, [pc, #108]	; (80240f8 <mbedtls_cipher_finish+0xd0>)
 802408a:	2b00      	cmp	r3, #0
 802408c:	bf08      	it	eq
 802408e:	2000      	moveq	r0, #0
}
 8024090:	b002      	add	sp, #8
 8024092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, 0 );
    if( ctx->cipher_info == NULL )
        return 0;

    if( ctx->iv_size != 0 )
 8024096:	6ba1      	ldr	r1, [r4, #56]	; 0x38
            ctx->add_padding( ctx->unprocessed_data, mbedtls_cipher_get_iv_size( ctx ),
 8024098:	f104 0714 	add.w	r7, r4, #20
 802409c:	b901      	cbnz	r1, 80240a0 <mbedtls_cipher_finish+0x78>
        return (int) ctx->iv_size;

    return (int) ctx->cipher_info->iv_size;
 802409e:	68d9      	ldr	r1, [r3, #12]
 80240a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80240a2:	4638      	mov	r0, r7
 80240a4:	47c0      	blx	r8
 80240a6:	6823      	ldr	r3, [r4, #0]
 80240a8:	f994 1008 	ldrsb.w	r1, [r4, #8]
 80240ac:	695a      	ldr	r2, [r3, #20]
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 80240ae:	699b      	ldr	r3, [r3, #24]
 80240b0:	e9cd 7600 	strd	r7, r6, [sp]
 80240b4:	689f      	ldr	r7, [r3, #8]
 80240b6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80240b8:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80240bc:	47b8      	blx	r7
 80240be:	2800      	cmp	r0, #0
 80240c0:	d1d9      	bne.n	8024076 <mbedtls_cipher_finish+0x4e>
        if( MBEDTLS_DECRYPT == ctx->operation )
 80240c2:	f994 3008 	ldrsb.w	r3, [r4, #8]
 80240c6:	b963      	cbnz	r3, 80240e2 <mbedtls_cipher_finish+0xba>
            return( ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 80240c8:	6821      	ldr	r1, [r4, #0]
 80240ca:	6923      	ldr	r3, [r4, #16]
    if( ctx->cipher_info == NULL )
 80240cc:	b101      	cbz	r1, 80240d0 <mbedtls_cipher_finish+0xa8>
    return ctx->cipher_info->block_size;
 80240ce:	6949      	ldr	r1, [r1, #20]
 80240d0:	462a      	mov	r2, r5
 80240d2:	4630      	mov	r0, r6
}
 80240d4:	b002      	add	sp, #8
 80240d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            return( ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 80240da:	4718      	bx	r3
 80240dc:	f104 0714 	add.w	r7, r4, #20
 80240e0:	e7e5      	b.n	80240ae <mbedtls_cipher_finish+0x86>
        *olen = mbedtls_cipher_get_block_size( ctx );
 80240e2:	6823      	ldr	r3, [r4, #0]
    if( ctx->cipher_info == NULL )
 80240e4:	b123      	cbz	r3, 80240f0 <mbedtls_cipher_finish+0xc8>
    return ctx->cipher_info->block_size;
 80240e6:	695b      	ldr	r3, [r3, #20]
 80240e8:	602b      	str	r3, [r5, #0]
        return( 0 );
 80240ea:	e7c4      	b.n	8024076 <mbedtls_cipher_finish+0x4e>
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80240ec:	4803      	ldr	r0, [pc, #12]	; (80240fc <mbedtls_cipher_finish+0xd4>)
 80240ee:	e7c2      	b.n	8024076 <mbedtls_cipher_finish+0x4e>
        return 0;
 80240f0:	4603      	mov	r3, r0
 80240f2:	e7f9      	b.n	80240e8 <mbedtls_cipher_finish+0xc0>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80240f4:	4802      	ldr	r0, [pc, #8]	; (8024100 <mbedtls_cipher_finish+0xd8>)
}
 80240f6:	4770      	bx	lr
 80240f8:	ffff9d80 	.word	0xffff9d80
 80240fc:	ffff9f80 	.word	0xffff9f80
 8024100:	ffff9f00 	.word	0xffff9f00

08024104 <mbedtls_cipher_set_padding_mode>:
    if( NULL == ctx->cipher_info || MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
 8024104:	6802      	ldr	r2, [r0, #0]
{
 8024106:	4603      	mov	r3, r0
    if( NULL == ctx->cipher_info || MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
 8024108:	b15a      	cbz	r2, 8024122 <mbedtls_cipher_set_padding_mode+0x1e>
 802410a:	7852      	ldrb	r2, [r2, #1]
 802410c:	2a02      	cmp	r2, #2
 802410e:	d108      	bne.n	8024122 <mbedtls_cipher_set_padding_mode+0x1e>
    switch( mode )
 8024110:	2904      	cmp	r1, #4
 8024112:	d104      	bne.n	802411e <mbedtls_cipher_set_padding_mode+0x1a>
        ctx->add_padding = NULL;
 8024114:	2000      	movs	r0, #0
        ctx->get_padding = get_no_padding;
 8024116:	4a04      	ldr	r2, [pc, #16]	; (8024128 <mbedtls_cipher_set_padding_mode+0x24>)
 8024118:	e9c3 0203 	strd	r0, r2, [r3, #12]

    default:
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 802411c:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 802411e:	4803      	ldr	r0, [pc, #12]	; (802412c <mbedtls_cipher_set_padding_mode+0x28>)
}
 8024120:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8024122:	4803      	ldr	r0, [pc, #12]	; (8024130 <mbedtls_cipher_set_padding_mode+0x2c>)
 8024124:	4770      	bx	lr
 8024126:	bf00      	nop
 8024128:	08023d6d 	.word	0x08023d6d
 802412c:	ffff9f80 	.word	0xffff9f80
 8024130:	ffff9f00 	.word	0xffff9f00

08024134 <mbedtls_cipher_crypt>:
 */
int mbedtls_cipher_crypt( mbedtls_cipher_context_t *ctx,
                  const unsigned char *iv, size_t iv_len,
                  const unsigned char *input, size_t ilen,
                  unsigned char *output, size_t *olen )
{
 8024134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( ctx->cipher_info == NULL )
 8024138:	6806      	ldr	r6, [r0, #0]
{
 802413a:	b085      	sub	sp, #20
 802413c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 802413e:	e9dd 980e 	ldrd	r9, r8, [sp, #56]	; 0x38
    if( ctx->cipher_info == NULL )
 8024142:	2e00      	cmp	r6, #0
 8024144:	f000 8091 	beq.w	802426a <mbedtls_cipher_crypt+0x136>
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
 8024148:	2a10      	cmp	r2, #16
 802414a:	4615      	mov	r5, r2
 802414c:	f200 809a 	bhi.w	8024284 <mbedtls_cipher_crypt+0x150>
    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_IV_LEN ) != 0 )
 8024150:	469a      	mov	sl, r3
 8024152:	6933      	ldr	r3, [r6, #16]
 8024154:	4604      	mov	r4, r0
 8024156:	07db      	lsls	r3, r3, #31
 8024158:	d548      	bpl.n	80241ec <mbedtls_cipher_crypt+0xb8>
    if ( actual_iv_size != 0 )
 802415a:	2d00      	cmp	r5, #0
 802415c:	d14c      	bne.n	80241f8 <mbedtls_cipher_crypt+0xc4>
    ctx->unprocessed_len = 0;
 802415e:	2300      	movs	r3, #0
 8024160:	6263      	str	r3, [r4, #36]	; 0x24
    *olen = 0;
 8024162:	603b      	str	r3, [r7, #0]
    return ctx->cipher_info->block_size;
 8024164:	6973      	ldr	r3, [r6, #20]
    if ( 0 == block_size )
 8024166:	2b00      	cmp	r3, #0
 8024168:	f000 808e 	beq.w	8024288 <mbedtls_cipher_crypt+0x154>
    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 802416c:	7872      	ldrb	r2, [r6, #1]
 802416e:	2a01      	cmp	r2, #1
 8024170:	d049      	beq.n	8024206 <mbedtls_cipher_crypt+0xd2>
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
 8024172:	2a06      	cmp	r2, #6
 8024174:	d07b      	beq.n	802426e <mbedtls_cipher_crypt+0x13a>
    if( input == output &&
 8024176:	45c2      	cmp	sl, r8
 8024178:	d071      	beq.n	802425e <mbedtls_cipher_crypt+0x12a>
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CBC )
 802417a:	2a02      	cmp	r2, #2
 802417c:	f040 8082 	bne.w	8024284 <mbedtls_cipher_crypt+0x150>
        if( ( ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&
 8024180:	f994 5008 	ldrsb.w	r5, [r4, #8]
 8024184:	2d00      	cmp	r5, #0
 8024186:	d15a      	bne.n	802423e <mbedtls_cipher_crypt+0x10a>
 8024188:	68e2      	ldr	r2, [r4, #12]
 802418a:	2a00      	cmp	r2, #0
 802418c:	d059      	beq.n	8024242 <mbedtls_cipher_crypt+0x10e>
 802418e:	4599      	cmp	r9, r3
 8024190:	d959      	bls.n	8024246 <mbedtls_cipher_crypt+0x112>
        if( 0 != ilen )
 8024192:	f1b9 0f00 	cmp.w	r9, #0
 8024196:	d045      	beq.n	8024224 <mbedtls_cipher_crypt+0xf0>
            copy_len = ilen % block_size;
 8024198:	fbb9 fbf3 	udiv	fp, r9, r3
 802419c:	fb03 9b1b 	mls	fp, r3, fp, r9
            if( copy_len == 0 &&
 80241a0:	f1bb 0f00 	cmp.w	fp, #0
 80241a4:	d103      	bne.n	80241ae <mbedtls_cipher_crypt+0x7a>
 80241a6:	b98d      	cbnz	r5, 80241cc <mbedtls_cipher_crypt+0x98>
                ctx->operation == MBEDTLS_DECRYPT &&
 80241a8:	68e2      	ldr	r2, [r4, #12]
 80241aa:	b17a      	cbz	r2, 80241cc <mbedtls_cipher_crypt+0x98>
 80241ac:	469b      	mov	fp, r3
            memcpy( ctx->unprocessed_data, &( input[ilen - copy_len] ),
 80241ae:	eba9 090b 	sub.w	r9, r9, fp
 80241b2:	465a      	mov	r2, fp
 80241b4:	eb0a 0109 	add.w	r1, sl, r9
 80241b8:	f104 0014 	add.w	r0, r4, #20
 80241bc:	f00b fe2c 	bl	802fe18 <memcpy>
            ctx->unprocessed_len += copy_len;
 80241c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80241c2:	445a      	add	r2, fp
 80241c4:	6262      	str	r2, [r4, #36]	; 0x24
        if( ilen )
 80241c6:	f1b9 0f00 	cmp.w	r9, #0
 80241ca:	d029      	beq.n	8024220 <mbedtls_cipher_crypt+0xec>
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 80241cc:	69b3      	ldr	r3, [r6, #24]
 80241ce:	e9cd a800 	strd	sl, r8, [sp]
 80241d2:	4629      	mov	r1, r5
 80241d4:	689e      	ldr	r6, [r3, #8]
 80241d6:	464a      	mov	r2, r9
 80241d8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80241da:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80241de:	47b0      	blx	r6
 80241e0:	bb50      	cbnz	r0, 8024238 <mbedtls_cipher_crypt+0x104>
            *olen += ilen;
 80241e2:	683b      	ldr	r3, [r7, #0]
 80241e4:	444b      	add	r3, r9
 80241e6:	603b      	str	r3, [r7, #0]
 80241e8:	4498      	add	r8, r3
 80241ea:	e01b      	b.n	8024224 <mbedtls_cipher_crypt+0xf0>
        actual_iv_size = ctx->cipher_info->iv_size;
 80241ec:	68f3      	ldr	r3, [r6, #12]
        if( actual_iv_size > iv_len )
 80241ee:	429a      	cmp	r2, r3
 80241f0:	d33b      	bcc.n	802426a <mbedtls_cipher_crypt+0x136>
 80241f2:	461d      	mov	r5, r3
    if ( actual_iv_size != 0 )
 80241f4:	2d00      	cmp	r5, #0
 80241f6:	d0b2      	beq.n	802415e <mbedtls_cipher_crypt+0x2a>
        memcpy( ctx->iv, iv, actual_iv_size );
 80241f8:	462a      	mov	r2, r5
 80241fa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80241fe:	f00b fe0b 	bl	802fe18 <memcpy>
        ctx->iv_size = actual_iv_size;
 8024202:	63a5      	str	r5, [r4, #56]	; 0x38
 8024204:	e7ab      	b.n	802415e <mbedtls_cipher_crypt+0x2a>
        if( ilen != block_size )
 8024206:	4599      	cmp	r9, r3
 8024208:	d140      	bne.n	802428c <mbedtls_cipher_crypt+0x158>
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 802420a:	69b3      	ldr	r3, [r6, #24]
        *olen = ilen;
 802420c:	f8c7 9000 	str.w	r9, [r7]
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 8024210:	685d      	ldr	r5, [r3, #4]
 8024212:	4652      	mov	r2, sl
 8024214:	4643      	mov	r3, r8
 8024216:	f994 1008 	ldrsb.w	r1, [r4, #8]
 802421a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 802421c:	47a8      	blx	r5
 802421e:	b958      	cbnz	r0, 8024238 <mbedtls_cipher_crypt+0x104>
 8024220:	683b      	ldr	r3, [r7, #0]
 8024222:	4498      	add	r8, r3

    if( ( ret = mbedtls_cipher_update( ctx, input, ilen,
                                       output, olen ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_cipher_finish( ctx, output + *olen,
 8024224:	4641      	mov	r1, r8
 8024226:	4620      	mov	r0, r4
 8024228:	aa03      	add	r2, sp, #12
 802422a:	f7ff fefd 	bl	8024028 <mbedtls_cipher_finish>
 802422e:	b918      	cbnz	r0, 8024238 <mbedtls_cipher_crypt+0x104>
                                       &finish_olen ) ) != 0 )
        return( ret );

    *olen += finish_olen;
 8024230:	683b      	ldr	r3, [r7, #0]
 8024232:	9a03      	ldr	r2, [sp, #12]
 8024234:	4413      	add	r3, r2
 8024236:	603b      	str	r3, [r7, #0]

    return( 0 );
}
 8024238:	b005      	add	sp, #20
 802423a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                ilen < block_size - ctx->unprocessed_len ) ||
 802423e:	2d01      	cmp	r5, #1
 8024240:	d1a7      	bne.n	8024192 <mbedtls_cipher_crypt+0x5e>
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 8024242:	4599      	cmp	r9, r3
 8024244:	d2a5      	bcs.n	8024192 <mbedtls_cipher_crypt+0x5e>
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 8024246:	4651      	mov	r1, sl
 8024248:	464a      	mov	r2, r9
 802424a:	f104 0014 	add.w	r0, r4, #20
 802424e:	f00b fde3 	bl	802fe18 <memcpy>
            ctx->unprocessed_len += ilen;
 8024252:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8024254:	444b      	add	r3, r9
 8024256:	6263      	str	r3, [r4, #36]	; 0x24
            return( 0 );
 8024258:	683b      	ldr	r3, [r7, #0]
 802425a:	4498      	add	r8, r3
 802425c:	e7e2      	b.n	8024224 <mbedtls_cipher_crypt+0xf0>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 802425e:	fbb9 f1f3 	udiv	r1, r9, r3
 8024262:	fb03 9111 	mls	r1, r3, r1, r9
 8024266:	2900      	cmp	r1, #0
 8024268:	d087      	beq.n	802417a <mbedtls_cipher_crypt+0x46>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 802426a:	4809      	ldr	r0, [pc, #36]	; (8024290 <mbedtls_cipher_crypt+0x15c>)
 802426c:	e7e4      	b.n	8024238 <mbedtls_cipher_crypt+0x104>
        return( mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 802426e:	4652      	mov	r2, sl
 8024270:	4649      	mov	r1, r9
 8024272:	4643      	mov	r3, r8
 8024274:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        *olen = ilen;
 8024276:	f8c7 9000 	str.w	r9, [r7]
        return( mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 802427a:	f001 fa31 	bl	80256e0 <mbedtls_gcm_update>
    if( ( ret = mbedtls_cipher_update( ctx, input, ilen,
 802427e:	2800      	cmp	r0, #0
 8024280:	d1da      	bne.n	8024238 <mbedtls_cipher_crypt+0x104>
 8024282:	e7cd      	b.n	8024220 <mbedtls_cipher_crypt+0xec>
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8024284:	4803      	ldr	r0, [pc, #12]	; (8024294 <mbedtls_cipher_crypt+0x160>)
 8024286:	e7d7      	b.n	8024238 <mbedtls_cipher_crypt+0x104>
        return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
 8024288:	4803      	ldr	r0, [pc, #12]	; (8024298 <mbedtls_cipher_crypt+0x164>)
 802428a:	e7d5      	b.n	8024238 <mbedtls_cipher_crypt+0x104>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 802428c:	4803      	ldr	r0, [pc, #12]	; (802429c <mbedtls_cipher_crypt+0x168>)
 802428e:	e7d3      	b.n	8024238 <mbedtls_cipher_crypt+0x104>
 8024290:	ffff9f00 	.word	0xffff9f00
 8024294:	ffff9f80 	.word	0xffff9f80
 8024298:	ffff9c80 	.word	0xffff9c80
 802429c:	ffff9d80 	.word	0xffff9d80

080242a0 <mbedtls_cipher_auth_encrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 80242a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return( 0 );
    }
#endif /* MBEDTLS_USE_PSA_CRYPTO */

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80242a4:	6804      	ldr	r4, [r0, #0]
{
 80242a6:	461d      	mov	r5, r3
 80242a8:	e9dd 980b 	ldrd	r9, r8, [sp, #44]	; 0x2c
 80242ac:	e9dd 3707 	ldrd	r3, r7, [sp, #28]
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80242b0:	7866      	ldrb	r6, [r4, #1]
{
 80242b2:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80242b6:	2e06      	cmp	r6, #6
{
 80242b8:	4614      	mov	r4, r2
 80242ba:	e9dd 2c09 	ldrd	r2, ip, [sp, #36]	; 0x24
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80242be:	d10f      	bne.n	80242e0 <mbedtls_cipher_auth_encrypt+0x40>
    {
        *olen = ilen;
 80242c0:	f8c9 2000 	str.w	r2, [r9]
        return( mbedtls_gcm_crypt_and_tag( ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT,
 80242c4:	e9cd 5308 	strd	r5, r3, [sp, #32]
 80242c8:	e9cd e80c 	strd	lr, r8, [sp, #48]	; 0x30
 80242cc:	e9cd 7c0a 	strd	r7, ip, [sp, #40]	; 0x28
 80242d0:	9407      	str	r4, [sp, #28]
 80242d2:	460b      	mov	r3, r1
        return( mbedtls_nist_kw_wrap( ctx->cipher_ctx, mode, input, ilen, output, olen, SIZE_MAX ) );
    }
#endif /* MBEDTLS_NIST_KW_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 80242d4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return( mbedtls_gcm_crypt_and_tag( ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT,
 80242d8:	2101      	movs	r1, #1
 80242da:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80242dc:	f001 bbce 	b.w	8025a7c <mbedtls_gcm_crypt_and_tag>
}
 80242e0:	4801      	ldr	r0, [pc, #4]	; (80242e8 <mbedtls_cipher_auth_encrypt+0x48>)
 80242e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80242e6:	bf00      	nop
 80242e8:	ffff9f80 	.word	0xffff9f80

080242ec <mbedtls_cipher_auth_decrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80242ec:	b530      	push	{r4, r5, lr}
        return( 0 );
    }
#endif /* MBEDTLS_USE_PSA_CRYPTO */

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80242ee:	6805      	ldr	r5, [r0, #0]
{
 80242f0:	b087      	sub	sp, #28
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80242f2:	786d      	ldrb	r5, [r5, #1]
{
 80242f4:	460c      	mov	r4, r1
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80242f6:	2d06      	cmp	r5, #6
{
 80242f8:	990c      	ldr	r1, [sp, #48]	; 0x30
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80242fa:	d118      	bne.n	802432e <mbedtls_cipher_auth_decrypt+0x42>
    {
        int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;

        *olen = ilen;
 80242fc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80242fe:	6029      	str	r1, [r5, #0]
        ret = mbedtls_gcm_auth_decrypt( ctx->cipher_ctx, ilen,
 8024300:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024302:	9505      	str	r5, [sp, #20]
 8024304:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024306:	9504      	str	r5, [sp, #16]
 8024308:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802430a:	9503      	str	r5, [sp, #12]
 802430c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802430e:	9502      	str	r5, [sp, #8]
 8024310:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8024312:	e9cd 3500 	strd	r3, r5, [sp]
 8024316:	4613      	mov	r3, r2
 8024318:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 802431a:	4622      	mov	r2, r4
 802431c:	f001 fbd4 	bl	8025ac8 <mbedtls_gcm_auth_decrypt>
                                iv, iv_len, ad, ad_len,
                                tag, tag_len, input, output );

        if( ret == MBEDTLS_ERR_GCM_AUTH_FAILED )
            ret = MBEDTLS_ERR_CIPHER_AUTH_FAILED;
 8024320:	4b04      	ldr	r3, [pc, #16]	; (8024334 <mbedtls_cipher_auth_decrypt+0x48>)
 8024322:	f110 0f12 	cmn.w	r0, #18
 8024326:	bf08      	it	eq
 8024328:	4618      	moveq	r0, r3
        return( mbedtls_nist_kw_unwrap( ctx->cipher_ctx, mode, input, ilen, output, olen, SIZE_MAX ) );
    }
#endif /* MBEDTLS_NIST_KW_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 802432a:	b007      	add	sp, #28
 802432c:	bd30      	pop	{r4, r5, pc}
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 802432e:	4802      	ldr	r0, [pc, #8]	; (8024338 <mbedtls_cipher_auth_decrypt+0x4c>)
}
 8024330:	b007      	add	sp, #28
 8024332:	bd30      	pop	{r4, r5, pc}
 8024334:	ffff9d00 	.word	0xffff9d00
 8024338:	ffff9f80 	.word	0xffff9f80

0802433c <gcm_ctx_free>:

    return( ctx );
}

static void gcm_ctx_free( void *ctx )
{
 802433c:	b510      	push	{r4, lr}
 802433e:	4604      	mov	r4, r0
    mbedtls_gcm_free( ctx );
 8024340:	f001 fc78 	bl	8025c34 <mbedtls_gcm_free>
    mbedtls_free( ctx );
 8024344:	4620      	mov	r0, r4
}
 8024346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 802434a:	f00b bd4f 	b.w	802fdec <free>
 802434e:	bf00      	nop

08024350 <gcm_ctx_alloc>:
{
 8024350:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
 8024352:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8024356:	2001      	movs	r0, #1
 8024358:	f00b fd0e 	bl	802fd78 <calloc>
    if( ctx != NULL )
 802435c:	4604      	mov	r4, r0
 802435e:	b108      	cbz	r0, 8024364 <gcm_ctx_alloc+0x14>
        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
 8024360:	f000 fe00 	bl	8024f64 <mbedtls_gcm_init>
}
 8024364:	4620      	mov	r0, r4
 8024366:	bd10      	pop	{r4, pc}

08024368 <gcm_aes_setkey_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_XTS */

#if defined(MBEDTLS_GCM_C)
static int gcm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 8024368:	b410      	push	{r4}
 802436a:	460c      	mov	r4, r1
 802436c:	4613      	mov	r3, r2
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 802436e:	2102      	movs	r1, #2
 8024370:	4622      	mov	r2, r4
                     key, key_bitlen );
}
 8024372:	f85d 4b04 	ldr.w	r4, [sp], #4
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 8024376:	f000 bdfb 	b.w	8024f70 <mbedtls_gcm_setkey>
 802437a:	bf00      	nop

0802437c <aes_ctx_free>:
{
 802437c:	b510      	push	{r4, lr}
 802437e:	4604      	mov	r4, r0
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
 8024380:	f7fa fe6c 	bl	801f05c <mbedtls_aes_free>
    mbedtls_free( ctx );
 8024384:	4620      	mov	r0, r4
}
 8024386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 802438a:	f00b bd2f 	b.w	802fdec <free>
 802438e:	bf00      	nop

08024390 <aes_ctx_alloc>:
{
 8024390:	b510      	push	{r4, lr}
    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 8024392:	f44f 718c 	mov.w	r1, #280	; 0x118
 8024396:	2001      	movs	r0, #1
 8024398:	f00b fcee 	bl	802fd78 <calloc>
    if( aes == NULL )
 802439c:	4604      	mov	r4, r0
 802439e:	b108      	cbz	r0, 80243a4 <aes_ctx_alloc+0x14>
    mbedtls_aes_init( aes );
 80243a0:	f7fa fe56 	bl	801f050 <mbedtls_aes_init>
}
 80243a4:	4620      	mov	r0, r4
 80243a6:	bd10      	pop	{r4, pc}

080243a8 <aes_setkey_dec_wrap>:
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
 80243a8:	f7fb b9be 	b.w	801f728 <mbedtls_aes_setkey_dec>

080243ac <aes_setkey_enc_wrap>:
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
 80243ac:	f7fa be5c 	b.w	801f068 <mbedtls_aes_setkey_enc>

080243b0 <aes_crypt_cbc_wrap>:
    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,
 80243b0:	f7fb bee4 	b.w	802017c <mbedtls_aes_crypt_cbc>

080243b4 <aes_crypt_ecb_wrap>:
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
 80243b4:	f7fb bed4 	b.w	8020160 <mbedtls_aes_crypt_ecb>

080243b8 <block_cipher_df>:
    ctx->reseed_interval = interval;
}

static int block_cipher_df( unsigned char *output,
                            const unsigned char *data, size_t data_len )
{
 80243b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    int i, j;
    size_t buf_len, use_len;

    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
 80243bc:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
{
 80243c0:	f5ad 7d5b 	sub.w	sp, sp, #876	; 0x36c
 80243c4:	9013      	str	r0, [sp, #76]	; 0x4c
    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
 80243c6:	f200 8150 	bhi.w	802466a <block_cipher_df+0x2b2>
 80243ca:	4616      	mov	r6, r2
 80243cc:	460d      	mov	r5, r1
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( buf, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT +
 80243ce:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80243d2:	2100      	movs	r1, #0
 80243d4:	a872      	add	r0, sp, #456	; 0x1c8
 80243d6:	f00b fd46 	bl	802fe66 <memset>
            MBEDTLS_CTR_DRBG_BLOCKSIZE + 16 );
    mbedtls_aes_init( &aes_ctx );
 80243da:	a82c      	add	r0, sp, #176	; 0xb0
 80243dc:	f7fa fe38 	bl	801f050 <mbedtls_aes_init>
     * S = Length input string (in 32-bits) || Length of output (in 32-bits) ||
     *     data || 0x80
     *     (Total is padded to a multiple of 16-bytes with zeroes)
     */
    p = buf + MBEDTLS_CTR_DRBG_BLOCKSIZE;
    *p++ = ( data_len >> 24 ) & 0xff;
 80243e0:	2400      	movs	r4, #0
    *p++ = ( data_len >> 16 ) & 0xff;
    *p++ = ( data_len >> 8  ) & 0xff;
    *p++ = ( data_len       ) & 0xff;
    p += 3;
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
 80243e2:	2330      	movs	r3, #48	; 0x30
    memcpy( p, data, data_len );
 80243e4:	af78      	add	r7, sp, #480	; 0x1e0
    *p++ = ( data_len >> 8  ) & 0xff;
 80243e6:	ba72      	rev16	r2, r6
    memcpy( p, data, data_len );
 80243e8:	4629      	mov	r1, r5
    *p++ = ( data_len >> 8  ) & 0xff;
 80243ea:	f8ad 21da 	strh.w	r2, [sp, #474]	; 0x1da
    memcpy( p, data, data_len );
 80243ee:	4638      	mov	r0, r7
 80243f0:	4632      	mov	r2, r6
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
 80243f2:	f88d 31df 	strb.w	r3, [sp, #479]	; 0x1df
    *p++ = ( data_len >> 24 ) & 0xff;
 80243f6:	f8ad 41d8 	strh.w	r4, [sp, #472]	; 0x1d8
    memcpy( p, data, data_len );
 80243fa:	f00b fd0d 	bl	802fe18 <memcpy>
    p[data_len] = 0x80;
 80243fe:	2280      	movs	r2, #128	; 0x80

    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;

    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 8024400:	4623      	mov	r3, r4
    p[data_len] = 0x80;
 8024402:	55ba      	strb	r2, [r7, r6]
    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 8024404:	f10d 015f 	add.w	r1, sp, #95	; 0x5f
        key[i] = i;
 8024408:	f801 3f01 	strb.w	r3, [r1, #1]!
    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 802440c:	3301      	adds	r3, #1
 802440e:	2b20      	cmp	r3, #32
 8024410:	d1fa      	bne.n	8024408 <block_cipher_df+0x50>

    if( ( ret = mbedtls_aes_setkey_enc( &aes_ctx, key,
 8024412:	f44f 7280 	mov.w	r2, #256	; 0x100
 8024416:	a918      	add	r1, sp, #96	; 0x60
 8024418:	a82c      	add	r0, sp, #176	; 0xb0
 802441a:	f7fa fe25 	bl	801f068 <mbedtls_aes_setkey_enc>
 802441e:	4605      	mov	r5, r0
 8024420:	2800      	cmp	r0, #0
 8024422:	f040 80ff 	bne.w	8024624 <block_cipher_df+0x26c>
    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;
 8024426:	f106 0319 	add.w	r3, r6, #25
 802442a:	ae14      	add	r6, sp, #80	; 0x50
 802442c:	4635      	mov	r5, r6
 802442e:	9311      	str	r3, [sp, #68]	; 0x44
 8024430:	ab20      	add	r3, sp, #128	; 0x80
    }

    /*
     * Reduce data to MBEDTLS_CTR_DRBG_SEEDLEN bytes of data
     */
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8024432:	9012      	str	r0, [sp, #72]	; 0x48
 8024434:	9310      	str	r3, [sp, #64]	; 0x40
    {
        p = buf;
        memset( chain, 0, MBEDTLS_CTR_DRBG_BLOCKSIZE );
        use_len = buf_len;
 8024436:	2300      	movs	r3, #0
 8024438:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802443a:	4699      	mov	r9, r3
 802443c:	9401      	str	r4, [sp, #4]
 802443e:	461a      	mov	r2, r3
 8024440:	461f      	mov	r7, r3
 8024442:	4619      	mov	r1, r3
 8024444:	469b      	mov	fp, r3
 8024446:	4618      	mov	r0, r3
 8024448:	461c      	mov	r4, r3
 802444a:	469c      	mov	ip, r3
 802444c:	469e      	mov	lr, r3
 802444e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8024452:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8024456:	9307      	str	r3, [sp, #28]
 8024458:	ae76      	add	r6, sp, #472	; 0x1d8
 802445a:	9302      	str	r3, [sp, #8]
 802445c:	9308      	str	r3, [sp, #32]
 802445e:	930f      	str	r3, [sp, #60]	; 0x3c
 8024460:	e01a      	b.n	8024498 <block_cipher_df+0xe0>
 8024462:	79eb      	ldrb	r3, [r5, #7]
 8024464:	7829      	ldrb	r1, [r5, #0]
 8024466:	930f      	str	r3, [sp, #60]	; 0x3c
 8024468:	7a6b      	ldrb	r3, [r5, #9]
 802446a:	7868      	ldrb	r0, [r5, #1]
 802446c:	9302      	str	r3, [sp, #8]
 802446e:	7aeb      	ldrb	r3, [r5, #11]
 8024470:	78ac      	ldrb	r4, [r5, #2]
 8024472:	9303      	str	r3, [sp, #12]
 8024474:	7b2b      	ldrb	r3, [r5, #12]
 8024476:	f895 c003 	ldrb.w	ip, [r5, #3]
 802447a:	9304      	str	r3, [sp, #16]
 802447c:	7b6b      	ldrb	r3, [r5, #13]
 802447e:	f895 e004 	ldrb.w	lr, [r5, #4]
 8024482:	9305      	str	r3, [sp, #20]
 8024484:	7bab      	ldrb	r3, [r5, #14]
 8024486:	796f      	ldrb	r7, [r5, #5]
 8024488:	9306      	str	r3, [sp, #24]
 802448a:	7beb      	ldrb	r3, [r5, #15]
 802448c:	79aa      	ldrb	r2, [r5, #6]
 802448e:	f895 9008 	ldrb.w	r9, [r5, #8]
 8024492:	f895 b00a 	ldrb.w	fp, [r5, #10]
 8024496:	9307      	str	r3, [sp, #28]

        while( use_len > 0 )
        {
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
                chain[i] ^= p[i];
 8024498:	f816 ac10 	ldrb.w	sl, [r6, #-16]
 802449c:	f816 8c0f 	ldrb.w	r8, [r6, #-15]
 80244a0:	ea81 010a 	eor.w	r1, r1, sl
 80244a4:	9108      	str	r1, [sp, #32]
 80244a6:	f816 1c0e 	ldrb.w	r1, [r6, #-14]
 80244aa:	ea80 0308 	eor.w	r3, r0, r8
 80244ae:	f816 0c0d 	ldrb.w	r0, [r6, #-13]
 80244b2:	404c      	eors	r4, r1
 80244b4:	f816 1c0c 	ldrb.w	r1, [r6, #-12]
 80244b8:	9309      	str	r3, [sp, #36]	; 0x24
 80244ba:	ea8c 0300 	eor.w	r3, ip, r0
 80244be:	930b      	str	r3, [sp, #44]	; 0x2c
 80244c0:	ea8e 0301 	eor.w	r3, lr, r1
 80244c4:	f816 ac09 	ldrb.w	sl, [r6, #-9]
 80244c8:	930c      	str	r3, [sp, #48]	; 0x30
 80244ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80244cc:	f816 8c05 	ldrb.w	r8, [r6, #-5]
 80244d0:	ea83 0a0a 	eor.w	sl, r3, sl
 80244d4:	f816 3c06 	ldrb.w	r3, [r6, #-6]
 80244d8:	f816 ec04 	ldrb.w	lr, [r6, #-4]
 80244dc:	ea8b 0b03 	eor.w	fp, fp, r3
 80244e0:	9b03      	ldr	r3, [sp, #12]
 80244e2:	f816 0c0b 	ldrb.w	r0, [r6, #-11]
 80244e6:	ea83 0808 	eor.w	r8, r3, r8
 80244ea:	9b04      	ldr	r3, [sp, #16]
 80244ec:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 80244f0:	ea83 0e0e 	eor.w	lr, r3, lr
 80244f4:	9b05      	ldr	r3, [sp, #20]
 80244f6:	4047      	eors	r7, r0
 80244f8:	ea83 0c0c 	eor.w	ip, r3, ip
 80244fc:	970d      	str	r7, [sp, #52]	; 0x34
 80244fe:	9b06      	ldr	r3, [sp, #24]
 8024500:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8024504:	f816 1c0a 	ldrb.w	r1, [r6, #-10]
 8024508:	407b      	eors	r3, r7
 802450a:	461f      	mov	r7, r3
 802450c:	404a      	eors	r2, r1
 802450e:	f816 1c08 	ldrb.w	r1, [r6, #-8]
 8024512:	9b07      	ldr	r3, [sp, #28]
 8024514:	940a      	str	r4, [sp, #40]	; 0x28
 8024516:	920e      	str	r2, [sp, #56]	; 0x38
 8024518:	f816 4c01 	ldrb.w	r4, [r6, #-1]
 802451c:	f816 2c07 	ldrb.w	r2, [r6, #-7]
 8024520:	ea89 0901 	eor.w	r9, r9, r1
 8024524:	9902      	ldr	r1, [sp, #8]
 8024526:	4063      	eors	r3, r4
 8024528:	4051      	eors	r1, r2
 802452a:	9102      	str	r1, [sp, #8]
 802452c:	9303      	str	r3, [sp, #12]
 802452e:	9808      	ldr	r0, [sp, #32]
 8024530:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024532:	7028      	strb	r0, [r5, #0]
 8024534:	70ac      	strb	r4, [r5, #2]
 8024536:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024538:	9809      	ldr	r0, [sp, #36]	; 0x24
 802453a:	70ec      	strb	r4, [r5, #3]
 802453c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
            p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
                       MBEDTLS_CTR_DRBG_BLOCKSIZE : use_len;

            if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT,
 802453e:	462b      	mov	r3, r5
                chain[i] ^= p[i];
 8024540:	712c      	strb	r4, [r5, #4]
 8024542:	9c0d      	ldr	r4, [sp, #52]	; 0x34
            if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT,
 8024544:	462a      	mov	r2, r5
                chain[i] ^= p[i];
 8024546:	716c      	strb	r4, [r5, #5]
 8024548:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802454a:	7068      	strb	r0, [r5, #1]
 802454c:	71ac      	strb	r4, [r5, #6]
 802454e:	9c02      	ldr	r4, [sp, #8]
            if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT,
 8024550:	2101      	movs	r1, #1
                chain[i] ^= p[i];
 8024552:	726c      	strb	r4, [r5, #9]
 8024554:	9c03      	ldr	r4, [sp, #12]
            if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT,
 8024556:	a82c      	add	r0, sp, #176	; 0xb0
                chain[i] ^= p[i];
 8024558:	f885 a007 	strb.w	sl, [r5, #7]
 802455c:	f885 9008 	strb.w	r9, [r5, #8]
 8024560:	f885 b00a 	strb.w	fp, [r5, #10]
 8024564:	f885 800b 	strb.w	r8, [r5, #11]
 8024568:	f885 e00c 	strb.w	lr, [r5, #12]
 802456c:	f885 c00d 	strb.w	ip, [r5, #13]
 8024570:	73af      	strb	r7, [r5, #14]
 8024572:	73ec      	strb	r4, [r5, #15]
            if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT,
 8024574:	f7fb fdf4 	bl	8020160 <mbedtls_aes_crypt_ecb>
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
 8024578:	9b01      	ldr	r3, [sp, #4]
 802457a:	461a      	mov	r2, r3
 802457c:	2b10      	cmp	r3, #16
 802457e:	bf94      	ite	ls
 8024580:	1ada      	subls	r2, r3, r3
 8024582:	3a10      	subhi	r2, #16
 8024584:	9201      	str	r2, [sp, #4]
            if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT,
 8024586:	2800      	cmp	r0, #0
 8024588:	d16c      	bne.n	8024664 <block_cipher_df+0x2ac>
 802458a:	3610      	adds	r6, #16
        while( use_len > 0 )
 802458c:	2a00      	cmp	r2, #0
 802458e:	f47f af68 	bne.w	8024462 <block_cipher_df+0xaa>
            {
                goto exit;
            }
        }

        memcpy( tmp + j, chain, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 8024592:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024594:	9f10      	ldr	r7, [sp, #64]	; 0x40

        /*
         * Update IV
         */
        buf[3]++;
 8024596:	f89d 31cb 	ldrb.w	r3, [sp, #459]	; 0x1cb
        memcpy( tmp + j, chain, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 802459a:	18bc      	adds	r4, r7, r2
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 802459c:	3210      	adds	r2, #16
 802459e:	4616      	mov	r6, r2
        buf[3]++;
 80245a0:	3301      	adds	r3, #1
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 80245a2:	2e30      	cmp	r6, #48	; 0x30
 80245a4:	9212      	str	r2, [sp, #72]	; 0x48
        buf[3]++;
 80245a6:	f88d 31cb 	strb.w	r3, [sp, #459]	; 0x1cb
        memcpy( tmp + j, chain, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 80245aa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80245ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 80245b2:	f47f af40 	bne.w	8024436 <block_cipher_df+0x7e>
    }

    /*
     * Do final encryption with reduced data
     */
    if( ( ret = mbedtls_aes_setkey_enc( &aes_ctx, tmp,
 80245b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80245ba:	4639      	mov	r1, r7
 80245bc:	a82c      	add	r0, sp, #176	; 0xb0
 80245be:	f7fa fd53 	bl	801f068 <mbedtls_aes_setkey_enc>
 80245c2:	462e      	mov	r6, r5
 80245c4:	4605      	mov	r5, r0
 80245c6:	bb80      	cbnz	r0, 802462a <block_cipher_df+0x272>
                                        MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
    {
        goto exit;
    }
    iv = tmp + MBEDTLS_CTR_DRBG_KEYSIZE;
    p = output;
 80245c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80245ca:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
 80245ce:	461c      	mov	r4, r3
 80245d0:	f103 0730 	add.w	r7, r3, #48	; 0x30

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
    {
        if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT,
 80245d4:	4643      	mov	r3, r8
 80245d6:	4642      	mov	r2, r8
 80245d8:	2101      	movs	r1, #1
 80245da:	a82c      	add	r0, sp, #176	; 0xb0
 80245dc:	f7fb fdc0 	bl	8020160 <mbedtls_aes_crypt_ecb>
 80245e0:	4605      	mov	r5, r0
 80245e2:	bb10      	cbnz	r0, 802462a <block_cipher_df+0x272>
                                           iv, iv ) ) != 0 )
        {
            goto exit;
        }
        memcpy( p, iv, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 80245e4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80245e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 80245ec:	3410      	adds	r4, #16
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 80245ee:	42bc      	cmp	r4, r7
 80245f0:	d1f0      	bne.n	80245d4 <block_cipher_df+0x21c>
    }
exit:
    mbedtls_aes_free( &aes_ctx );
 80245f2:	a82c      	add	r0, sp, #176	; 0xb0
 80245f4:	f7fa fd32 	bl	801f05c <mbedtls_aes_free>
    /*
    * tidy up the stack
    */
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 80245f8:	a872      	add	r0, sp, #456	; 0x1c8
 80245fa:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80245fe:	f003 fa95 	bl	8027b2c <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 8024602:	9810      	ldr	r0, [sp, #64]	; 0x40
 8024604:	2130      	movs	r1, #48	; 0x30
 8024606:	f003 fa91 	bl	8027b2c <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( key, sizeof( key ) );
 802460a:	a818      	add	r0, sp, #96	; 0x60
 802460c:	2120      	movs	r1, #32
 802460e:	f003 fa8d 	bl	8027b2c <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( chain, sizeof( chain ) );
 8024612:	4630      	mov	r0, r6
 8024614:	2110      	movs	r1, #16
 8024616:	f003 fa89 	bl	8027b2c <mbedtls_platform_zeroize>
        */
        mbedtls_platform_zeroize( output, MBEDTLS_CTR_DRBG_SEEDLEN );
    }

    return( ret );
}
 802461a:	4628      	mov	r0, r5
 802461c:	f50d 7d5b 	add.w	sp, sp, #876	; 0x36c
 8024620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024624:	ab20      	add	r3, sp, #128	; 0x80
 8024626:	ae14      	add	r6, sp, #80	; 0x50
 8024628:	9310      	str	r3, [sp, #64]	; 0x40
    mbedtls_aes_free( &aes_ctx );
 802462a:	a82c      	add	r0, sp, #176	; 0xb0
 802462c:	f7fa fd16 	bl	801f05c <mbedtls_aes_free>
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 8024630:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8024634:	a872      	add	r0, sp, #456	; 0x1c8
 8024636:	f003 fa79 	bl	8027b2c <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 802463a:	2130      	movs	r1, #48	; 0x30
 802463c:	9810      	ldr	r0, [sp, #64]	; 0x40
 802463e:	f003 fa75 	bl	8027b2c <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( key, sizeof( key ) );
 8024642:	2120      	movs	r1, #32
 8024644:	a818      	add	r0, sp, #96	; 0x60
 8024646:	f003 fa71 	bl	8027b2c <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( chain, sizeof( chain ) );
 802464a:	4630      	mov	r0, r6
 802464c:	2110      	movs	r1, #16
 802464e:	f003 fa6d 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_platform_zeroize( output, MBEDTLS_CTR_DRBG_SEEDLEN );
 8024652:	2130      	movs	r1, #48	; 0x30
 8024654:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8024656:	f003 fa69 	bl	8027b2c <mbedtls_platform_zeroize>
}
 802465a:	4628      	mov	r0, r5
 802465c:	f50d 7d5b 	add.w	sp, sp, #876	; 0x36c
 8024660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024664:	462e      	mov	r6, r5
 8024666:	4605      	mov	r5, r0
 8024668:	e7df      	b.n	802462a <block_cipher_df+0x272>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 802466a:	f06f 0537 	mvn.w	r5, #55	; 0x37
 802466e:	e7f4      	b.n	802465a <block_cipher_df+0x2a2>

08024670 <ctr_drbg_update_internal>:
 *   ctx->aes_ctx = Key
 *   ctx->counter = V
 */
static int ctr_drbg_update_internal( mbedtls_ctr_drbg_context *ctx,
                          const unsigned char data[MBEDTLS_CTR_DRBG_SEEDLEN] )
{
 8024670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024674:	b08c      	sub	sp, #48	; 0x30
 8024676:	4604      	mov	r4, r0
 8024678:	460d      	mov	r5, r1
    unsigned char tmp[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char *p = tmp;
    int i, j;
    int ret = 0;

    memset( tmp, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 802467a:	4668      	mov	r0, sp
 802467c:	2230      	movs	r2, #48	; 0x30
 802467e:	2100      	movs	r1, #0
 8024680:	f00b fbf1 	bl	802fe66 <memset>
    unsigned char *p = tmp;
 8024684:	466f      	mov	r7, sp
 8024686:	f104 0620 	add.w	r6, r4, #32
    {
        /*
         * Increase counter
         */
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
            if( ++ctx->counter[i - 1] != 0 )
 802468a:	7be2      	ldrb	r2, [r4, #15]
 802468c:	3201      	adds	r2, #1
 802468e:	b2d2      	uxtb	r2, r2
 8024690:	73e2      	strb	r2, [r4, #15]
 8024692:	2a00      	cmp	r2, #0
 8024694:	d14d      	bne.n	8024732 <ctr_drbg_update_internal+0xc2>
 8024696:	7ba2      	ldrb	r2, [r4, #14]
 8024698:	3201      	adds	r2, #1
 802469a:	b2d2      	uxtb	r2, r2
 802469c:	73a2      	strb	r2, [r4, #14]
 802469e:	2a00      	cmp	r2, #0
 80246a0:	d147      	bne.n	8024732 <ctr_drbg_update_internal+0xc2>
 80246a2:	7b63      	ldrb	r3, [r4, #13]
 80246a4:	3301      	adds	r3, #1
 80246a6:	b2db      	uxtb	r3, r3
 80246a8:	7363      	strb	r3, [r4, #13]
 80246aa:	2b00      	cmp	r3, #0
 80246ac:	d141      	bne.n	8024732 <ctr_drbg_update_internal+0xc2>
 80246ae:	7b23      	ldrb	r3, [r4, #12]
 80246b0:	3301      	adds	r3, #1
 80246b2:	b2db      	uxtb	r3, r3
 80246b4:	7323      	strb	r3, [r4, #12]
 80246b6:	2b00      	cmp	r3, #0
 80246b8:	d13b      	bne.n	8024732 <ctr_drbg_update_internal+0xc2>
 80246ba:	7ae3      	ldrb	r3, [r4, #11]
 80246bc:	3301      	adds	r3, #1
 80246be:	b2db      	uxtb	r3, r3
 80246c0:	72e3      	strb	r3, [r4, #11]
 80246c2:	2b00      	cmp	r3, #0
 80246c4:	d135      	bne.n	8024732 <ctr_drbg_update_internal+0xc2>
 80246c6:	7aa3      	ldrb	r3, [r4, #10]
 80246c8:	3301      	adds	r3, #1
 80246ca:	b2db      	uxtb	r3, r3
 80246cc:	72a3      	strb	r3, [r4, #10]
 80246ce:	2b00      	cmp	r3, #0
 80246d0:	d12f      	bne.n	8024732 <ctr_drbg_update_internal+0xc2>
 80246d2:	7a63      	ldrb	r3, [r4, #9]
 80246d4:	3301      	adds	r3, #1
 80246d6:	b2db      	uxtb	r3, r3
 80246d8:	7263      	strb	r3, [r4, #9]
 80246da:	bb53      	cbnz	r3, 8024732 <ctr_drbg_update_internal+0xc2>
 80246dc:	7a23      	ldrb	r3, [r4, #8]
 80246de:	3301      	adds	r3, #1
 80246e0:	b2db      	uxtb	r3, r3
 80246e2:	7223      	strb	r3, [r4, #8]
 80246e4:	bb2b      	cbnz	r3, 8024732 <ctr_drbg_update_internal+0xc2>
 80246e6:	79e3      	ldrb	r3, [r4, #7]
 80246e8:	3301      	adds	r3, #1
 80246ea:	b2db      	uxtb	r3, r3
 80246ec:	71e3      	strb	r3, [r4, #7]
 80246ee:	bb03      	cbnz	r3, 8024732 <ctr_drbg_update_internal+0xc2>
 80246f0:	79a3      	ldrb	r3, [r4, #6]
 80246f2:	3301      	adds	r3, #1
 80246f4:	b2db      	uxtb	r3, r3
 80246f6:	71a3      	strb	r3, [r4, #6]
 80246f8:	b9db      	cbnz	r3, 8024732 <ctr_drbg_update_internal+0xc2>
 80246fa:	7963      	ldrb	r3, [r4, #5]
 80246fc:	3301      	adds	r3, #1
 80246fe:	b2db      	uxtb	r3, r3
 8024700:	7163      	strb	r3, [r4, #5]
 8024702:	b9b3      	cbnz	r3, 8024732 <ctr_drbg_update_internal+0xc2>
 8024704:	7923      	ldrb	r3, [r4, #4]
 8024706:	3301      	adds	r3, #1
 8024708:	b2db      	uxtb	r3, r3
 802470a:	7123      	strb	r3, [r4, #4]
 802470c:	b98b      	cbnz	r3, 8024732 <ctr_drbg_update_internal+0xc2>
 802470e:	78e3      	ldrb	r3, [r4, #3]
 8024710:	3301      	adds	r3, #1
 8024712:	b2db      	uxtb	r3, r3
 8024714:	70e3      	strb	r3, [r4, #3]
 8024716:	b963      	cbnz	r3, 8024732 <ctr_drbg_update_internal+0xc2>
 8024718:	78a3      	ldrb	r3, [r4, #2]
 802471a:	3301      	adds	r3, #1
 802471c:	b2db      	uxtb	r3, r3
 802471e:	70a3      	strb	r3, [r4, #2]
 8024720:	b93b      	cbnz	r3, 8024732 <ctr_drbg_update_internal+0xc2>
 8024722:	7863      	ldrb	r3, [r4, #1]
 8024724:	3301      	adds	r3, #1
 8024726:	b2db      	uxtb	r3, r3
 8024728:	7063      	strb	r3, [r4, #1]
 802472a:	b913      	cbnz	r3, 8024732 <ctr_drbg_update_internal+0xc2>
 802472c:	7823      	ldrb	r3, [r4, #0]
 802472e:	3301      	adds	r3, #1
 8024730:	7023      	strb	r3, [r4, #0]
                break;

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT,
 8024732:	463b      	mov	r3, r7
 8024734:	4622      	mov	r2, r4
 8024736:	2101      	movs	r1, #1
 8024738:	4630      	mov	r0, r6
 802473a:	f7fb fd11 	bl	8020160 <mbedtls_aes_crypt_ecb>
 802473e:	4680      	mov	r8, r0
 8024740:	2800      	cmp	r0, #0
 8024742:	d13b      	bne.n	80247bc <ctr_drbg_update_internal+0x14c>
                                           ctx->counter, p ) ) != 0 )
        {
            goto exit;
        }

        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 8024744:	3710      	adds	r7, #16
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8024746:	ab0c      	add	r3, sp, #48	; 0x30
 8024748:	429f      	cmp	r7, r3
 802474a:	d19e      	bne.n	802468a <ctr_drbg_update_internal+0x1a>
    }

    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
        tmp[i] ^= data[i];
 802474c:	9901      	ldr	r1, [sp, #4]
 802474e:	682b      	ldr	r3, [r5, #0]
 8024750:	9800      	ldr	r0, [sp, #0]
 8024752:	686a      	ldr	r2, [r5, #4]
 8024754:	4058      	eors	r0, r3
 8024756:	404a      	eors	r2, r1
 8024758:	68ab      	ldr	r3, [r5, #8]
 802475a:	9902      	ldr	r1, [sp, #8]
 802475c:	9000      	str	r0, [sp, #0]
 802475e:	4059      	eors	r1, r3
 8024760:	9803      	ldr	r0, [sp, #12]
 8024762:	68eb      	ldr	r3, [r5, #12]
 8024764:	9201      	str	r2, [sp, #4]
 8024766:	4043      	eors	r3, r0
 8024768:	692a      	ldr	r2, [r5, #16]
 802476a:	9804      	ldr	r0, [sp, #16]
 802476c:	9102      	str	r1, [sp, #8]
 802476e:	4050      	eors	r0, r2
 8024770:	9905      	ldr	r1, [sp, #20]
 8024772:	696a      	ldr	r2, [r5, #20]
 8024774:	9303      	str	r3, [sp, #12]
 8024776:	4051      	eors	r1, r2
 8024778:	69ab      	ldr	r3, [r5, #24]
 802477a:	9a06      	ldr	r2, [sp, #24]
 802477c:	9004      	str	r0, [sp, #16]
 802477e:	405a      	eors	r2, r3
 8024780:	9807      	ldr	r0, [sp, #28]
 8024782:	69eb      	ldr	r3, [r5, #28]
 8024784:	9105      	str	r1, [sp, #20]
 8024786:	4058      	eors	r0, r3
 8024788:	9908      	ldr	r1, [sp, #32]
 802478a:	6a2b      	ldr	r3, [r5, #32]
 802478c:	9206      	str	r2, [sp, #24]
 802478e:	4059      	eors	r1, r3
 8024790:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024792:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8024794:	9007      	str	r0, [sp, #28]
 8024796:	405a      	eors	r2, r3
 8024798:	980a      	ldr	r0, [sp, #40]	; 0x28
 802479a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 802479c:	9108      	str	r1, [sp, #32]
 802479e:	4043      	eors	r3, r0
 80247a0:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
 80247a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80247a6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c

    /*
     * Update key and counter
     */
    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, tmp,
 80247a8:	4630      	mov	r0, r6
        tmp[i] ^= data[i];
 80247aa:	4053      	eors	r3, r2
    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, tmp,
 80247ac:	4669      	mov	r1, sp
 80247ae:	f44f 7280 	mov.w	r2, #256	; 0x100
        tmp[i] ^= data[i];
 80247b2:	930b      	str	r3, [sp, #44]	; 0x2c
    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, tmp,
 80247b4:	f7fa fc58 	bl	801f068 <mbedtls_aes_setkey_enc>
 80247b8:	4680      	mov	r8, r0
 80247ba:	b138      	cbz	r0, 80247cc <ctr_drbg_update_internal+0x15c>
    }
    memcpy( ctx->counter, tmp + MBEDTLS_CTR_DRBG_KEYSIZE,
            MBEDTLS_CTR_DRBG_BLOCKSIZE );

exit:
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 80247bc:	4668      	mov	r0, sp
 80247be:	2130      	movs	r1, #48	; 0x30
 80247c0:	f003 f9b4 	bl	8027b2c <mbedtls_platform_zeroize>
    return( ret );
}
 80247c4:	4640      	mov	r0, r8
 80247c6:	b00c      	add	sp, #48	; 0x30
 80247c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    memcpy( ctx->counter, tmp + MBEDTLS_CTR_DRBG_KEYSIZE,
 80247cc:	ad08      	add	r5, sp, #32
 80247ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80247d0:	6020      	str	r0, [r4, #0]
 80247d2:	6061      	str	r1, [r4, #4]
 80247d4:	60a2      	str	r2, [r4, #8]
 80247d6:	60e3      	str	r3, [r4, #12]
 80247d8:	e7f0      	b.n	80247bc <ctr_drbg_update_internal+0x14c>
 80247da:	bf00      	nop

080247dc <mbedtls_ctr_drbg_reseed_internal>:
 */
static int mbedtls_ctr_drbg_reseed_internal( mbedtls_ctr_drbg_context *ctx,
                                             const unsigned char *additional,
                                             size_t len,
                                             size_t nonce_len )
{
 80247dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unsigned char seed[MBEDTLS_CTR_DRBG_MAX_SEED_INPUT];
    size_t seedlen = 0;
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;

    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
 80247e0:	f8d0 8018 	ldr.w	r8, [r0, #24]
{
 80247e4:	b0e0      	sub	sp, #384	; 0x180
    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
 80247e6:	f5b8 7fc0 	cmp.w	r8, #384	; 0x180
 80247ea:	d852      	bhi.n	8024892 <mbedtls_ctr_drbg_reseed_internal+0xb6>
 80247ec:	461d      	mov	r5, r3
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
    if( nonce_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT - ctx->entropy_len )
 80247ee:	f5c8 73c0 	rsb	r3, r8, #384	; 0x180
 80247f2:	42ab      	cmp	r3, r5
 80247f4:	d34d      	bcc.n	8024892 <mbedtls_ctr_drbg_reseed_internal+0xb6>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
    if( len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT - ctx->entropy_len - nonce_len )
 80247f6:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
 80247fa:	eba3 0308 	sub.w	r3, r3, r8
 80247fe:	4293      	cmp	r3, r2
 8024800:	4616      	mov	r6, r2
 8024802:	d346      	bcc.n	8024892 <mbedtls_ctr_drbg_reseed_internal+0xb6>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( seed, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT );
 8024804:	4604      	mov	r4, r0
 8024806:	f44f 72c0 	mov.w	r2, #384	; 0x180
 802480a:	460f      	mov	r7, r1
 802480c:	4668      	mov	r0, sp
 802480e:	2100      	movs	r1, #0
 8024810:	f00b fb29 	bl	802fe66 <memset>

    /* Gather entropy_len bytes of entropy to seed state. */
    if( 0 != ctx->f_entropy( ctx->p_entropy, seed, ctx->entropy_len ) )
 8024814:	e9d4 304e 	ldrd	r3, r0, [r4, #312]	; 0x138
 8024818:	4642      	mov	r2, r8
 802481a:	4669      	mov	r1, sp
 802481c:	4798      	blx	r3
 802481e:	2800      	cmp	r0, #0
 8024820:	d13a      	bne.n	8024898 <mbedtls_ctr_drbg_reseed_internal+0xbc>
    {
        return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );
    }
    seedlen += ctx->entropy_len;
 8024822:	f8d4 8018 	ldr.w	r8, [r4, #24]

    /* Gather entropy for a nonce if requested. */
    if( nonce_len != 0 )
 8024826:	b145      	cbz	r5, 802483a <mbedtls_ctr_drbg_reseed_internal+0x5e>
    {
        if( 0 != ctx->f_entropy( ctx->p_entropy, seed, nonce_len ) )
 8024828:	462a      	mov	r2, r5
 802482a:	4669      	mov	r1, sp
 802482c:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8024830:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8024834:	4798      	blx	r3
 8024836:	bb78      	cbnz	r0, 8024898 <mbedtls_ctr_drbg_reseed_internal+0xbc>
        {
            return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );
        }
        seedlen += nonce_len;
 8024838:	44a8      	add	r8, r5
    }

    /* Add additional data if provided. */
    if( additional != NULL && len != 0 )
 802483a:	b107      	cbz	r7, 802483e <mbedtls_ctr_drbg_reseed_internal+0x62>
 802483c:	b9ce      	cbnz	r6, 8024872 <mbedtls_ctr_drbg_reseed_internal+0x96>
        memcpy( seed + seedlen, additional, len );
        seedlen += len;
    }

    /* Reduce to 384 bits. */
    if( ( ret = block_cipher_df( seed, seed, seedlen ) ) != 0 )
 802483e:	4642      	mov	r2, r8
 8024840:	4669      	mov	r1, sp
 8024842:	4668      	mov	r0, sp
 8024844:	f7ff fdb8 	bl	80243b8 <block_cipher_df>
 8024848:	4605      	mov	r5, r0
 802484a:	b140      	cbz	r0, 802485e <mbedtls_ctr_drbg_reseed_internal+0x82>
    if( ( ret = ctr_drbg_update_internal( ctx, seed ) ) != 0 )
        goto exit;
    ctx->reseed_counter = 1;

exit:
    mbedtls_platform_zeroize( seed, sizeof( seed ) );
 802484c:	4668      	mov	r0, sp
 802484e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8024852:	f003 f96b 	bl	8027b2c <mbedtls_platform_zeroize>
    return( ret );
}
 8024856:	4628      	mov	r0, r5
 8024858:	b060      	add	sp, #384	; 0x180
 802485a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ( ret = ctr_drbg_update_internal( ctx, seed ) ) != 0 )
 802485e:	4669      	mov	r1, sp
 8024860:	4620      	mov	r0, r4
 8024862:	f7ff ff05 	bl	8024670 <ctr_drbg_update_internal>
 8024866:	4605      	mov	r5, r0
 8024868:	2800      	cmp	r0, #0
 802486a:	d1ef      	bne.n	802484c <mbedtls_ctr_drbg_reseed_internal+0x70>
    ctx->reseed_counter = 1;
 802486c:	2301      	movs	r3, #1
 802486e:	6123      	str	r3, [r4, #16]
 8024870:	e7ec      	b.n	802484c <mbedtls_ctr_drbg_reseed_internal+0x70>
        memcpy( seed + seedlen, additional, len );
 8024872:	4639      	mov	r1, r7
 8024874:	4632      	mov	r2, r6
 8024876:	eb0d 0008 	add.w	r0, sp, r8
        seedlen += len;
 802487a:	44b0      	add	r8, r6
        memcpy( seed + seedlen, additional, len );
 802487c:	f00b facc 	bl	802fe18 <memcpy>
    if( ( ret = block_cipher_df( seed, seed, seedlen ) ) != 0 )
 8024880:	4642      	mov	r2, r8
 8024882:	4669      	mov	r1, sp
 8024884:	4668      	mov	r0, sp
 8024886:	f7ff fd97 	bl	80243b8 <block_cipher_df>
 802488a:	4605      	mov	r5, r0
 802488c:	2800      	cmp	r0, #0
 802488e:	d1dd      	bne.n	802484c <mbedtls_ctr_drbg_reseed_internal+0x70>
 8024890:	e7e5      	b.n	802485e <mbedtls_ctr_drbg_reseed_internal+0x82>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 8024892:	f06f 0537 	mvn.w	r5, #55	; 0x37
 8024896:	e7de      	b.n	8024856 <mbedtls_ctr_drbg_reseed_internal+0x7a>
        return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );
 8024898:	f06f 0533 	mvn.w	r5, #51	; 0x33
 802489c:	e7db      	b.n	8024856 <mbedtls_ctr_drbg_reseed_internal+0x7a>
 802489e:	bf00      	nop

080248a0 <mbedtls_ctr_drbg_init>:
{
 80248a0:	b510      	push	{r4, lr}
    memset( ctx, 0, sizeof( mbedtls_ctr_drbg_context ) );
 80248a2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80248a6:	2100      	movs	r1, #0
{
 80248a8:	4604      	mov	r4, r0
    memset( ctx, 0, sizeof( mbedtls_ctr_drbg_context ) );
 80248aa:	f00b fadc 	bl	802fe66 <memset>
    ctx->reseed_counter = -1;
 80248ae:	f04f 33ff 	mov.w	r3, #4294967295
 80248b2:	6123      	str	r3, [r4, #16]
}
 80248b4:	bd10      	pop	{r4, pc}
 80248b6:	bf00      	nop

080248b8 <mbedtls_ctr_drbg_free>:
    if( ctx == NULL )
 80248b8:	b158      	cbz	r0, 80248d2 <mbedtls_ctr_drbg_free+0x1a>
{
 80248ba:	b510      	push	{r4, lr}
 80248bc:	4604      	mov	r4, r0
    mbedtls_aes_free( &ctx->aes_ctx );
 80248be:	3020      	adds	r0, #32
 80248c0:	f7fa fbcc 	bl	801f05c <mbedtls_aes_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ctr_drbg_context ) );
 80248c4:	4620      	mov	r0, r4
}
 80248c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ctr_drbg_context ) );
 80248ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80248ce:	f003 b92d 	b.w	8027b2c <mbedtls_platform_zeroize>
 80248d2:	4770      	bx	lr

080248d4 <mbedtls_ctr_drbg_seed>:
int mbedtls_ctr_drbg_seed( mbedtls_ctr_drbg_context *ctx,
                           int (*f_entropy)(void *, unsigned char *, size_t),
                           void *p_entropy,
                           const unsigned char *custom,
                           size_t len )
{
 80248d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    unsigned char key[MBEDTLS_CTR_DRBG_KEYSIZE];
    size_t nonce_len;

    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 80248d8:	f04f 0920 	mov.w	r9, #32
{
 80248dc:	4604      	mov	r4, r0
 80248de:	460f      	mov	r7, r1
 80248e0:	4616      	mov	r6, r2
 80248e2:	b088      	sub	sp, #32
    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 80248e4:	2100      	movs	r1, #0
 80248e6:	464a      	mov	r2, r9

    mbedtls_aes_init( &ctx->aes_ctx );
 80248e8:	eb00 0a09 	add.w	sl, r0, r9
    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 80248ec:	4668      	mov	r0, sp
{
 80248ee:	4698      	mov	r8, r3
    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 80248f0:	f00b fab9 	bl	802fe66 <memset>
    mbedtls_aes_init( &ctx->aes_ctx );
 80248f4:	4650      	mov	r0, sl
 80248f6:	f7fa fbab 	bl	801f050 <mbedtls_aes_init>

    ctx->f_entropy = f_entropy;
    ctx->p_entropy = p_entropy;

    if( ctx->entropy_len == 0 )
 80248fa:	69a5      	ldr	r5, [r4, #24]
    ctx->p_entropy = p_entropy;
 80248fc:	e9c4 764e 	strd	r7, r6, [r4, #312]	; 0x138
        ctx->entropy_len = MBEDTLS_CTR_DRBG_ENTROPY_LEN;
    /* ctx->reseed_counter contains the desired amount of entropy to
     * grab for a nonce (see mbedtls_ctr_drbg_set_nonce_len()).
     * If it's -1, indicating that the entropy nonce length was not set
     * explicitly, use a sufficiently large nonce for security. */
    nonce_len = ( ctx->reseed_counter >= 0 ?
 8024900:	6921      	ldr	r1, [r4, #16]
    if( ctx->entropy_len == 0 )
 8024902:	b9dd      	cbnz	r5, 802493c <mbedtls_ctr_drbg_seed+0x68>
                  (size_t) ctx->reseed_counter :
 8024904:	2900      	cmp	r1, #0
        ctx->entropy_len = MBEDTLS_CTR_DRBG_ENTROPY_LEN;
 8024906:	f8c4 9018 	str.w	r9, [r4, #24]
                  (size_t) ctx->reseed_counter :
 802490a:	db13      	blt.n	8024934 <mbedtls_ctr_drbg_seed+0x60>
 802490c:	460d      	mov	r5, r1
                  good_nonce_len( ctx->entropy_len ) );

    ctx->reseed_interval = MBEDTLS_CTR_DRBG_RESEED_INTERVAL;
 802490e:	f242 7310 	movw	r3, #10000	; 0x2710

    /* Initialize with an empty key. */
    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, key,
 8024912:	4669      	mov	r1, sp
 8024914:	4650      	mov	r0, sl
 8024916:	f44f 7280 	mov.w	r2, #256	; 0x100
    ctx->reseed_interval = MBEDTLS_CTR_DRBG_RESEED_INTERVAL;
 802491a:	61e3      	str	r3, [r4, #28]
    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, key,
 802491c:	f7fa fba4 	bl	801f068 <mbedtls_aes_setkey_enc>
 8024920:	b928      	cbnz	r0, 802492e <mbedtls_ctr_drbg_seed+0x5a>
    {
        return( ret );
    }

    /* Do the initial seeding. */
    if( ( ret = mbedtls_ctr_drbg_reseed_internal( ctx, custom, len,
 8024922:	462b      	mov	r3, r5
 8024924:	4641      	mov	r1, r8
 8024926:	4620      	mov	r0, r4
 8024928:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802492a:	f7ff ff57 	bl	80247dc <mbedtls_ctr_drbg_reseed_internal>
                                                  nonce_len ) ) != 0 )
    {
        return( ret );
    }
    return( 0 );
}
 802492e:	b008      	add	sp, #32
 8024930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                  good_nonce_len( ctx->entropy_len ) );
 8024934:	464d      	mov	r5, r9
        return( ( entropy_len + 1 ) / 2 );
 8024936:	3501      	adds	r5, #1
 8024938:	086d      	lsrs	r5, r5, #1
 802493a:	e7e8      	b.n	802490e <mbedtls_ctr_drbg_seed+0x3a>
                  (size_t) ctx->reseed_counter :
 802493c:	2900      	cmp	r1, #0
 802493e:	dae5      	bge.n	802490c <mbedtls_ctr_drbg_seed+0x38>
    if( entropy_len >= MBEDTLS_CTR_DRBG_KEYSIZE * 3 / 2 )
 8024940:	2d2f      	cmp	r5, #47	; 0x2f
        return( 0 );
 8024942:	bf88      	it	hi
 8024944:	2500      	movhi	r5, #0
    if( entropy_len >= MBEDTLS_CTR_DRBG_KEYSIZE * 3 / 2 )
 8024946:	d8e2      	bhi.n	802490e <mbedtls_ctr_drbg_seed+0x3a>
 8024948:	e7f5      	b.n	8024936 <mbedtls_ctr_drbg_seed+0x62>
 802494a:	bf00      	nop

0802494c <mbedtls_ctr_drbg_random_with_add>:
 *   ctx contains new_working_state
 */
int mbedtls_ctr_drbg_random_with_add( void *p_rng,
                              unsigned char *output, size_t output_len,
                              const unsigned char *additional, size_t add_len )
{
 802494c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    unsigned char *p = output;
    unsigned char tmp[MBEDTLS_CTR_DRBG_BLOCKSIZE];
    int i;
    size_t use_len;

    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )
 8024950:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
{
 8024954:	b091      	sub	sp, #68	; 0x44
 8024956:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )
 802495a:	f200 80c0 	bhi.w	8024ade <mbedtls_ctr_drbg_random_with_add+0x192>
        return( MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG );

    if( add_len > MBEDTLS_CTR_DRBG_MAX_INPUT )
 802495e:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
 8024962:	f200 80b9 	bhi.w	8024ad8 <mbedtls_ctr_drbg_random_with_add+0x18c>
 8024966:	4604      	mov	r4, r0
 8024968:	4615      	mov	r5, r2
 802496a:	460e      	mov	r6, r1
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( add_input, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 802496c:	2230      	movs	r2, #48	; 0x30
 802496e:	2100      	movs	r1, #0
 8024970:	a804      	add	r0, sp, #16
 8024972:	461f      	mov	r7, r3
 8024974:	f00b fa77 	bl	802fe66 <memset>

    if( ctx->reseed_counter > ctx->reseed_interval ||
 8024978:	6922      	ldr	r2, [r4, #16]
 802497a:	69e3      	ldr	r3, [r4, #28]
 802497c:	429a      	cmp	r2, r3
 802497e:	dc03      	bgt.n	8024988 <mbedtls_ctr_drbg_random_with_add+0x3c>
 8024980:	6963      	ldr	r3, [r4, #20]
 8024982:	2b00      	cmp	r3, #0
 8024984:	f000 8088 	beq.w	8024a98 <mbedtls_ctr_drbg_random_with_add+0x14c>
    return( mbedtls_ctr_drbg_reseed_internal( ctx, additional, len, 0 ) );
 8024988:	4642      	mov	r2, r8
 802498a:	4639      	mov	r1, r7
 802498c:	2300      	movs	r3, #0
 802498e:	4620      	mov	r0, r4
 8024990:	f7ff ff24 	bl	80247dc <mbedtls_ctr_drbg_reseed_internal>
        ctx->prediction_resistance )
    {
        if( ( ret = mbedtls_ctr_drbg_reseed( ctx, additional, add_len ) ) != 0 )
 8024994:	4681      	mov	r9, r0
 8024996:	2800      	cmp	r0, #0
 8024998:	d17a      	bne.n	8024a90 <mbedtls_ctr_drbg_random_with_add+0x144>
            goto exit;
        if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
            goto exit;
    }

    while( output_len > 0 )
 802499a:	46e8      	mov	r8, sp
 802499c:	2d00      	cmp	r5, #0
 802499e:	f000 8090 	beq.w	8024ac2 <mbedtls_ctr_drbg_random_with_add+0x176>
 80249a2:	46e8      	mov	r8, sp
 80249a4:	f104 0720 	add.w	r7, r4, #32
 80249a8:	e00d      	b.n	80249c6 <mbedtls_ctr_drbg_random_with_add+0x7a>
                                           ctx->counter, tmp ) ) != 0 )
        {
            goto exit;
        }

        use_len = ( output_len > MBEDTLS_CTR_DRBG_BLOCKSIZE )
 80249aa:	2d10      	cmp	r5, #16
 80249ac:	46a9      	mov	r9, r5
 80249ae:	bf28      	it	cs
 80249b0:	f04f 0910 	movcs.w	r9, #16
            ? MBEDTLS_CTR_DRBG_BLOCKSIZE : output_len;
        /*
         * Copy random block to destination
         */
        memcpy( p, tmp, use_len );
 80249b4:	4630      	mov	r0, r6
 80249b6:	4641      	mov	r1, r8
 80249b8:	464a      	mov	r2, r9
 80249ba:	f00b fa2d 	bl	802fe18 <memcpy>
    while( output_len > 0 )
 80249be:	ebb5 0509 	subs.w	r5, r5, r9
        p += use_len;
 80249c2:	444e      	add	r6, r9
    while( output_len > 0 )
 80249c4:	d07d      	beq.n	8024ac2 <mbedtls_ctr_drbg_random_with_add+0x176>
            if( ++ctx->counter[i - 1] != 0 )
 80249c6:	7be0      	ldrb	r0, [r4, #15]
 80249c8:	3001      	adds	r0, #1
 80249ca:	b2c0      	uxtb	r0, r0
 80249cc:	73e0      	strb	r0, [r4, #15]
 80249ce:	2800      	cmp	r0, #0
 80249d0:	d14d      	bne.n	8024a6e <mbedtls_ctr_drbg_random_with_add+0x122>
 80249d2:	7ba0      	ldrb	r0, [r4, #14]
 80249d4:	3001      	adds	r0, #1
 80249d6:	b2c0      	uxtb	r0, r0
 80249d8:	73a0      	strb	r0, [r4, #14]
 80249da:	2800      	cmp	r0, #0
 80249dc:	d147      	bne.n	8024a6e <mbedtls_ctr_drbg_random_with_add+0x122>
 80249de:	7b63      	ldrb	r3, [r4, #13]
 80249e0:	3301      	adds	r3, #1
 80249e2:	b2db      	uxtb	r3, r3
 80249e4:	7363      	strb	r3, [r4, #13]
 80249e6:	2b00      	cmp	r3, #0
 80249e8:	d141      	bne.n	8024a6e <mbedtls_ctr_drbg_random_with_add+0x122>
 80249ea:	7b23      	ldrb	r3, [r4, #12]
 80249ec:	3301      	adds	r3, #1
 80249ee:	b2db      	uxtb	r3, r3
 80249f0:	7323      	strb	r3, [r4, #12]
 80249f2:	2b00      	cmp	r3, #0
 80249f4:	d13b      	bne.n	8024a6e <mbedtls_ctr_drbg_random_with_add+0x122>
 80249f6:	7ae3      	ldrb	r3, [r4, #11]
 80249f8:	3301      	adds	r3, #1
 80249fa:	b2db      	uxtb	r3, r3
 80249fc:	72e3      	strb	r3, [r4, #11]
 80249fe:	2b00      	cmp	r3, #0
 8024a00:	d135      	bne.n	8024a6e <mbedtls_ctr_drbg_random_with_add+0x122>
 8024a02:	7aa3      	ldrb	r3, [r4, #10]
 8024a04:	3301      	adds	r3, #1
 8024a06:	b2db      	uxtb	r3, r3
 8024a08:	72a3      	strb	r3, [r4, #10]
 8024a0a:	2b00      	cmp	r3, #0
 8024a0c:	d12f      	bne.n	8024a6e <mbedtls_ctr_drbg_random_with_add+0x122>
 8024a0e:	7a63      	ldrb	r3, [r4, #9]
 8024a10:	3301      	adds	r3, #1
 8024a12:	b2db      	uxtb	r3, r3
 8024a14:	7263      	strb	r3, [r4, #9]
 8024a16:	bb53      	cbnz	r3, 8024a6e <mbedtls_ctr_drbg_random_with_add+0x122>
 8024a18:	7a23      	ldrb	r3, [r4, #8]
 8024a1a:	3301      	adds	r3, #1
 8024a1c:	b2db      	uxtb	r3, r3
 8024a1e:	7223      	strb	r3, [r4, #8]
 8024a20:	bb2b      	cbnz	r3, 8024a6e <mbedtls_ctr_drbg_random_with_add+0x122>
 8024a22:	79e3      	ldrb	r3, [r4, #7]
 8024a24:	3301      	adds	r3, #1
 8024a26:	b2db      	uxtb	r3, r3
 8024a28:	71e3      	strb	r3, [r4, #7]
 8024a2a:	bb03      	cbnz	r3, 8024a6e <mbedtls_ctr_drbg_random_with_add+0x122>
 8024a2c:	79a3      	ldrb	r3, [r4, #6]
 8024a2e:	3301      	adds	r3, #1
 8024a30:	b2db      	uxtb	r3, r3
 8024a32:	71a3      	strb	r3, [r4, #6]
 8024a34:	b9db      	cbnz	r3, 8024a6e <mbedtls_ctr_drbg_random_with_add+0x122>
 8024a36:	7963      	ldrb	r3, [r4, #5]
 8024a38:	3301      	adds	r3, #1
 8024a3a:	b2db      	uxtb	r3, r3
 8024a3c:	7163      	strb	r3, [r4, #5]
 8024a3e:	b9b3      	cbnz	r3, 8024a6e <mbedtls_ctr_drbg_random_with_add+0x122>
 8024a40:	7923      	ldrb	r3, [r4, #4]
 8024a42:	3301      	adds	r3, #1
 8024a44:	b2db      	uxtb	r3, r3
 8024a46:	7123      	strb	r3, [r4, #4]
 8024a48:	b98b      	cbnz	r3, 8024a6e <mbedtls_ctr_drbg_random_with_add+0x122>
 8024a4a:	78e3      	ldrb	r3, [r4, #3]
 8024a4c:	3301      	adds	r3, #1
 8024a4e:	b2db      	uxtb	r3, r3
 8024a50:	70e3      	strb	r3, [r4, #3]
 8024a52:	b963      	cbnz	r3, 8024a6e <mbedtls_ctr_drbg_random_with_add+0x122>
 8024a54:	78a3      	ldrb	r3, [r4, #2]
 8024a56:	3301      	adds	r3, #1
 8024a58:	b2db      	uxtb	r3, r3
 8024a5a:	70a3      	strb	r3, [r4, #2]
 8024a5c:	b93b      	cbnz	r3, 8024a6e <mbedtls_ctr_drbg_random_with_add+0x122>
 8024a5e:	7863      	ldrb	r3, [r4, #1]
 8024a60:	3301      	adds	r3, #1
 8024a62:	b2db      	uxtb	r3, r3
 8024a64:	7063      	strb	r3, [r4, #1]
 8024a66:	b913      	cbnz	r3, 8024a6e <mbedtls_ctr_drbg_random_with_add+0x122>
 8024a68:	7823      	ldrb	r3, [r4, #0]
 8024a6a:	3301      	adds	r3, #1
 8024a6c:	7023      	strb	r3, [r4, #0]
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT,
 8024a6e:	4643      	mov	r3, r8
 8024a70:	4622      	mov	r2, r4
 8024a72:	2101      	movs	r1, #1
 8024a74:	4638      	mov	r0, r7
 8024a76:	f7fb fb73 	bl	8020160 <mbedtls_aes_crypt_ecb>
 8024a7a:	4681      	mov	r9, r0
 8024a7c:	2800      	cmp	r0, #0
 8024a7e:	d094      	beq.n	80249aa <mbedtls_ctr_drbg_random_with_add+0x5e>
        goto exit;

    ctx->reseed_counter++;

exit:
    mbedtls_platform_zeroize( add_input, sizeof( add_input ) );
 8024a80:	2130      	movs	r1, #48	; 0x30
 8024a82:	a804      	add	r0, sp, #16
 8024a84:	f003 f852 	bl	8027b2c <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 8024a88:	4640      	mov	r0, r8
 8024a8a:	2110      	movs	r1, #16
 8024a8c:	f003 f84e 	bl	8027b2c <mbedtls_platform_zeroize>
    return( ret );
}
 8024a90:	4648      	mov	r0, r9
 8024a92:	b011      	add	sp, #68	; 0x44
 8024a94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( add_len > 0 )
 8024a98:	f1b8 0f00 	cmp.w	r8, #0
 8024a9c:	f43f af7d 	beq.w	802499a <mbedtls_ctr_drbg_random_with_add+0x4e>
        if( ( ret = block_cipher_df( add_input, additional, add_len ) ) != 0 )
 8024aa0:	4642      	mov	r2, r8
 8024aa2:	4639      	mov	r1, r7
 8024aa4:	a804      	add	r0, sp, #16
 8024aa6:	f7ff fc87 	bl	80243b8 <block_cipher_df>
 8024aaa:	4681      	mov	r9, r0
 8024aac:	b938      	cbnz	r0, 8024abe <mbedtls_ctr_drbg_random_with_add+0x172>
        if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
 8024aae:	4620      	mov	r0, r4
 8024ab0:	a904      	add	r1, sp, #16
 8024ab2:	f7ff fddd 	bl	8024670 <ctr_drbg_update_internal>
 8024ab6:	4681      	mov	r9, r0
 8024ab8:	2800      	cmp	r0, #0
 8024aba:	f43f af6e 	beq.w	802499a <mbedtls_ctr_drbg_random_with_add+0x4e>
 8024abe:	46e8      	mov	r8, sp
 8024ac0:	e7de      	b.n	8024a80 <mbedtls_ctr_drbg_random_with_add+0x134>
    if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
 8024ac2:	4620      	mov	r0, r4
 8024ac4:	a904      	add	r1, sp, #16
 8024ac6:	f7ff fdd3 	bl	8024670 <ctr_drbg_update_internal>
 8024aca:	4681      	mov	r9, r0
 8024acc:	2800      	cmp	r0, #0
 8024ace:	d1d7      	bne.n	8024a80 <mbedtls_ctr_drbg_random_with_add+0x134>
    ctx->reseed_counter++;
 8024ad0:	6923      	ldr	r3, [r4, #16]
 8024ad2:	3301      	adds	r3, #1
 8024ad4:	6123      	str	r3, [r4, #16]
 8024ad6:	e7d3      	b.n	8024a80 <mbedtls_ctr_drbg_random_with_add+0x134>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 8024ad8:	f06f 0937 	mvn.w	r9, #55	; 0x37
 8024adc:	e7d8      	b.n	8024a90 <mbedtls_ctr_drbg_random_with_add+0x144>
        return( MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG );
 8024ade:	f06f 0935 	mvn.w	r9, #53	; 0x35
 8024ae2:	e7d5      	b.n	8024a90 <mbedtls_ctr_drbg_random_with_add+0x144>

08024ae4 <mbedtls_ctr_drbg_random>:
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    ret = mbedtls_ctr_drbg_random_with_add( ctx, output, output_len, NULL, 0 );
 8024ae4:	2300      	movs	r3, #0
{
 8024ae6:	b500      	push	{lr}
 8024ae8:	b083      	sub	sp, #12
    ret = mbedtls_ctr_drbg_random_with_add( ctx, output, output_len, NULL, 0 );
 8024aea:	9300      	str	r3, [sp, #0]
 8024aec:	f7ff ff2e 	bl	802494c <mbedtls_ctr_drbg_random_with_add>
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
}
 8024af0:	b003      	add	sp, #12
 8024af2:	f85d fb04 	ldr.w	pc, [sp], #4
 8024af6:	bf00      	nop

08024af8 <entropy_gather_internal.part.0>:
}

/*
 * Run through the different sources to add entropy to our accumulator
 */
static int entropy_gather_internal( mbedtls_entropy_context *ctx )
 8024af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024afc:	ed2d 8b02 	vpush	{d8}
        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );

    /*
     * Run through our entropy sources
     */
    for( i = 0; i < ctx->source_count; i++ )
 8024b00:	6f03      	ldr	r3, [r0, #112]	; 0x70
static int entropy_gather_internal( mbedtls_entropy_context *ctx )
 8024b02:	b0ad      	sub	sp, #180	; 0xb4
    for( i = 0; i < ctx->source_count; i++ )
 8024b04:	2b00      	cmp	r3, #0
 8024b06:	f340 808b 	ble.w	8024c20 <entropy_gather_internal.part.0+0x128>
    int have_one_strong = 0;
 8024b0a:	f04f 0800 	mov.w	r8, #0
 8024b0e:	4681      	mov	r9, r0
 8024b10:	4604      	mov	r4, r0
    for( i = 0; i < ctx->source_count; i++ )
 8024b12:	4646      	mov	r6, r8
 8024b14:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8024b18:	e006      	b.n	8024b28 <entropy_gather_internal.part.0+0x30>
 8024b1a:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 8024b1e:	3601      	adds	r6, #1
 8024b20:	429e      	cmp	r6, r3
 8024b22:	f104 0414 	add.w	r4, r4, #20
 8024b26:	da48      	bge.n	8024bba <entropy_gather_internal.part.0+0xc2>
    {
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
            have_one_strong = 1;

        olen = 0;
 8024b28:	2200      	movs	r2, #0
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
 8024b2a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,
 8024b2e:	6f65      	ldr	r5, [r4, #116]	; 0x74
            have_one_strong = 1;
 8024b30:	2b01      	cmp	r3, #1
        olen = 0;
 8024b32:	9203      	str	r2, [sp, #12]
        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,
 8024b34:	4651      	mov	r1, sl
 8024b36:	f04f 0280 	mov.w	r2, #128	; 0x80
 8024b3a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8024b3c:	ab03      	add	r3, sp, #12
            have_one_strong = 1;
 8024b3e:	bf08      	it	eq
 8024b40:	f04f 0801 	moveq.w	r8, #1
        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,
 8024b44:	47a8      	blx	r5
 8024b46:	4605      	mov	r5, r0
 8024b48:	2800      	cmp	r0, #0
 8024b4a:	d139      	bne.n	8024bc0 <entropy_gather_internal.part.0+0xc8>
        }

        /*
         * Add if we actually gathered something
         */
        if( olen > 0 )
 8024b4c:	9f03      	ldr	r7, [sp, #12]
 8024b4e:	2f00      	cmp	r7, #0
 8024b50:	d0e3      	beq.n	8024b1a <entropy_gather_internal.part.0+0x22>
    if( use_len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 8024b52:	2f20      	cmp	r7, #32
 8024b54:	fa5f fb86 	uxtb.w	fp, r6
 8024b58:	d852      	bhi.n	8024c00 <entropy_gather_internal.part.0+0x108>
 8024b5a:	a904      	add	r1, sp, #16
    const unsigned char *p = data;
 8024b5c:	4653      	mov	r3, sl
 8024b5e:	ee08 1a10 	vmov	s16, r1
 8024b62:	b2fa      	uxtb	r2, r7
    if( ctx->accumulator_started == 0 &&
 8024b64:	f8d9 1000 	ldr.w	r1, [r9]
    header[0] = source_id;
 8024b68:	f88d b008 	strb.w	fp, [sp, #8]
    header[1] = use_len & 0xFF;
 8024b6c:	f88d 2009 	strb.w	r2, [sp, #9]
    if( ctx->accumulator_started == 0 &&
 8024b70:	b381      	cbz	r1, 8024bd4 <entropy_gather_internal.part.0+0xdc>
 8024b72:	f109 0b04 	add.w	fp, r9, #4
        ctx->accumulator_started = 1;
 8024b76:	2101      	movs	r1, #1
    if( ( ret = mbedtls_sha256_update_ret( &ctx->accumulator, header, 2 ) ) != 0 )
 8024b78:	2202      	movs	r2, #2
        ctx->accumulator_started = 1;
 8024b7a:	f8c9 1000 	str.w	r1, [r9]
    if( ( ret = mbedtls_sha256_update_ret( &ctx->accumulator, header, 2 ) ) != 0 )
 8024b7e:	4658      	mov	r0, fp
 8024b80:	a902      	add	r1, sp, #8
 8024b82:	9301      	str	r3, [sp, #4]
 8024b84:	f005 fef6 	bl	802a974 <mbedtls_sha256_update_ret>
 8024b88:	bb68      	cbnz	r0, 8024be6 <entropy_gather_internal.part.0+0xee>
    ret = mbedtls_sha256_update_ret( &ctx->accumulator, p, use_len );
 8024b8a:	9b01      	ldr	r3, [sp, #4]
 8024b8c:	463a      	mov	r2, r7
 8024b8e:	4619      	mov	r1, r3
 8024b90:	4658      	mov	r0, fp
 8024b92:	f005 feef 	bl	802a974 <mbedtls_sha256_update_ret>
 8024b96:	4607      	mov	r7, r0
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 8024b98:	2120      	movs	r1, #32
 8024b9a:	ee18 0a10 	vmov	r0, s16
 8024b9e:	f002 ffc5 	bl	8027b2c <mbedtls_platform_zeroize>
        {
            if( ( ret = entropy_update( ctx, (unsigned char) i,
 8024ba2:	2f00      	cmp	r7, #0
 8024ba4:	d145      	bne.n	8024c32 <entropy_gather_internal.part.0+0x13a>
                                        buf, olen ) ) != 0 )
                return( ret );
            ctx->source[i].size += olen;
 8024ba6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8024ba8:	9a03      	ldr	r2, [sp, #12]
    for( i = 0; i < ctx->source_count; i++ )
 8024baa:	3601      	adds	r6, #1
            ctx->source[i].size += olen;
 8024bac:	4413      	add	r3, r2
 8024bae:	67e3      	str	r3, [r4, #124]	; 0x7c
    for( i = 0; i < ctx->source_count; i++ )
 8024bb0:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 8024bb4:	3414      	adds	r4, #20
 8024bb6:	429e      	cmp	r6, r3
 8024bb8:	dbb6      	blt.n	8024b28 <entropy_gather_internal.part.0+0x30>
        }
    }

    if( have_one_strong == 0 )
 8024bba:	f1b8 0f00 	cmp.w	r8, #0
 8024bbe:	d031      	beq.n	8024c24 <entropy_gather_internal.part.0+0x12c>
        ret = MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE;

cleanup:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 8024bc0:	4650      	mov	r0, sl
 8024bc2:	2180      	movs	r1, #128	; 0x80
 8024bc4:	f002 ffb2 	bl	8027b2c <mbedtls_platform_zeroize>

    return( ret );
}
 8024bc8:	4628      	mov	r0, r5
 8024bca:	b02d      	add	sp, #180	; 0xb4
 8024bcc:	ecbd 8b02 	vpop	{d8}
 8024bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ( ret = mbedtls_sha256_starts_ret( &ctx->accumulator, 0 ) ) != 0 )
 8024bd4:	f109 0b04 	add.w	fp, r9, #4
 8024bd8:	4658      	mov	r0, fp
 8024bda:	9301      	str	r3, [sp, #4]
 8024bdc:	f005 f970 	bl	8029ec0 <mbedtls_sha256_starts_ret>
    if( ctx->accumulator_started == 0 &&
 8024be0:	9b01      	ldr	r3, [sp, #4]
 8024be2:	2800      	cmp	r0, #0
 8024be4:	d0c7      	beq.n	8024b76 <entropy_gather_internal.part.0+0x7e>
 8024be6:	4602      	mov	r2, r0
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 8024be8:	2120      	movs	r1, #32
 8024bea:	ee18 0a10 	vmov	r0, s16
 8024bee:	4615      	mov	r5, r2
 8024bf0:	f002 ff9c 	bl	8027b2c <mbedtls_platform_zeroize>
}
 8024bf4:	4628      	mov	r0, r5
 8024bf6:	b02d      	add	sp, #180	; 0xb4
 8024bf8:	ecbd 8b02 	vpop	{d8}
 8024bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( ( ret = mbedtls_sha256_ret( data, len, tmp, 0 ) ) != 0 )
 8024c00:	ab04      	add	r3, sp, #16
 8024c02:	ee08 3a10 	vmov	s16, r3
 8024c06:	461a      	mov	r2, r3
 8024c08:	4639      	mov	r1, r7
 8024c0a:	4603      	mov	r3, r0
 8024c0c:	4650      	mov	r0, sl
 8024c0e:	f005 ff3b 	bl	802aa88 <mbedtls_sha256_ret>
 8024c12:	2800      	cmp	r0, #0
 8024c14:	d1e7      	bne.n	8024be6 <entropy_gather_internal.part.0+0xee>
 8024c16:	2220      	movs	r2, #32
        p = tmp;
 8024c18:	ee18 3a10 	vmov	r3, s16
        use_len = MBEDTLS_ENTROPY_BLOCK_SIZE;
 8024c1c:	4617      	mov	r7, r2
 8024c1e:	e7a1      	b.n	8024b64 <entropy_gather_internal.part.0+0x6c>
 8024c20:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 8024c24:	4650      	mov	r0, sl
 8024c26:	2180      	movs	r1, #128	; 0x80
        ret = MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE;
 8024c28:	f06f 053c 	mvn.w	r5, #60	; 0x3c
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 8024c2c:	f002 ff7e 	bl	8027b2c <mbedtls_platform_zeroize>
    return( ret );
 8024c30:	e7ca      	b.n	8024bc8 <entropy_gather_internal.part.0+0xd0>
    ret = mbedtls_sha256_update_ret( &ctx->accumulator, p, use_len );
 8024c32:	463d      	mov	r5, r7
 8024c34:	e7de      	b.n	8024bf4 <entropy_gather_internal.part.0+0xfc>
 8024c36:	bf00      	nop

08024c38 <mbedtls_entropy_init>:
{
 8024c38:	b570      	push	{r4, r5, r6, lr}
    ctx->source_count = 0;
 8024c3a:	2500      	movs	r5, #0
{
 8024c3c:	4604      	mov	r4, r0
    memset( ctx->source, 0, sizeof( ctx->source ) );
 8024c3e:	4629      	mov	r1, r5
 8024c40:	22c8      	movs	r2, #200	; 0xc8
    ctx->source_count = 0;
 8024c42:	6705      	str	r5, [r0, #112]	; 0x70
    memset( ctx->source, 0, sizeof( ctx->source ) );
 8024c44:	3074      	adds	r0, #116	; 0x74
 8024c46:	f00b f90e 	bl	802fe66 <memset>
    ctx->accumulator_started = 0;
 8024c4a:	4620      	mov	r0, r4
 8024c4c:	f840 5b04 	str.w	r5, [r0], #4
    mbedtls_sha256_init( &ctx->accumulator );
 8024c50:	f005 f926 	bl	8029ea0 <mbedtls_sha256_init>
    idx = ctx->source_count;
 8024c54:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if( idx >= MBEDTLS_ENTROPY_MAX_SOURCES )
 8024c56:	2b09      	cmp	r3, #9
 8024c58:	dc0e      	bgt.n	8024c78 <mbedtls_entropy_init+0x40>
    ctx->source[idx].strong    = strong;
 8024c5a:	2101      	movs	r1, #1
    ctx->source[idx].threshold = threshold;
 8024c5c:	2620      	movs	r6, #32
    ctx->source[idx].f_source  = f_source;
 8024c5e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8024c62:	4806      	ldr	r0, [pc, #24]	; (8024c7c <mbedtls_entropy_init+0x44>)
 8024c64:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ctx->source_count++;
 8024c68:	440b      	add	r3, r1
    ctx->source[idx].p_source  = p_source;
 8024c6a:	6795      	str	r5, [r2, #120]	; 0x78
    ctx->source[idx].threshold = threshold;
 8024c6c:	f8c2 6080 	str.w	r6, [r2, #128]	; 0x80
    ctx->source[idx].f_source  = f_source;
 8024c70:	6750      	str	r0, [r2, #116]	; 0x74
    ctx->source[idx].strong    = strong;
 8024c72:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    ctx->source_count++;
 8024c76:	6723      	str	r3, [r4, #112]	; 0x70
}
 8024c78:	bd70      	pop	{r4, r5, r6, pc}
 8024c7a:	bf00      	nop
 8024c7c:	0801ed01 	.word	0x0801ed01

08024c80 <mbedtls_entropy_free>:
{
 8024c80:	b538      	push	{r3, r4, r5, lr}
 8024c82:	4604      	mov	r4, r0
    ctx->source_count = 0;
 8024c84:	2500      	movs	r5, #0
    mbedtls_sha256_free( &ctx->accumulator );
 8024c86:	3004      	adds	r0, #4
 8024c88:	f005 f90e 	bl	8029ea8 <mbedtls_sha256_free>
    mbedtls_platform_zeroize( ctx->source, sizeof( ctx->source ) );
 8024c8c:	21c8      	movs	r1, #200	; 0xc8
    ctx->source_count = 0;
 8024c8e:	6725      	str	r5, [r4, #112]	; 0x70
    mbedtls_platform_zeroize( ctx->source, sizeof( ctx->source ) );
 8024c90:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8024c94:	f002 ff4a 	bl	8027b2c <mbedtls_platform_zeroize>
    ctx->accumulator_started = 0;
 8024c98:	6025      	str	r5, [r4, #0]
}
 8024c9a:	bd38      	pop	{r3, r4, r5, pc}

08024c9c <mbedtls_entropy_func>:

    return( ret );
}

int mbedtls_entropy_func( void *data, unsigned char *output, size_t len )
{
 8024c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret, count = 0, i, thresholds_reached;
    size_t strong_size;
    mbedtls_entropy_context *ctx = (mbedtls_entropy_context *) data;
    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];

    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 8024ca0:	2a20      	cmp	r2, #32
{
 8024ca2:	b089      	sub	sp, #36	; 0x24
    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 8024ca4:	f200 80a5 	bhi.w	8024df2 <mbedtls_entropy_func+0x156>
 8024ca8:	4690      	mov	r8, r2
 8024caa:	4605      	mov	r5, r0
 8024cac:	4689      	mov	r9, r1
 8024cae:	f240 1601 	movw	r6, #257	; 0x101
 8024cb2:	6f03      	ldr	r3, [r0, #112]	; 0x70
    if( ctx->source_count == 0 )
 8024cb4:	2b00      	cmp	r3, #0
 8024cb6:	f000 8091 	beq.w	8024ddc <mbedtls_entropy_func+0x140>
 8024cba:	4628      	mov	r0, r5
 8024cbc:	f7ff ff1c 	bl	8024af8 <entropy_gather_internal.part.0>
        {
            ret = MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
            goto exit;
        }

        if( ( ret = entropy_gather_internal( ctx ) ) != 0 )
 8024cc0:	4604      	mov	r4, r0
 8024cc2:	2800      	cmp	r0, #0
 8024cc4:	f040 808c 	bne.w	8024de0 <mbedtls_entropy_func+0x144>
            goto exit;

        thresholds_reached = 1;
        strong_size = 0;
        for( i = 0; i < ctx->source_count; i++ )
 8024cc8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8024cca:	2b00      	cmp	r3, #0
 8024ccc:	dd13      	ble.n	8024cf6 <mbedtls_entropy_func+0x5a>
 8024cce:	46ab      	mov	fp, r5
        strong_size = 0;
 8024cd0:	4682      	mov	sl, r0
        for( i = 0; i < ctx->source_count; i++ )
 8024cd2:	462c      	mov	r4, r5
        thresholds_reached = 1;
 8024cd4:	2201      	movs	r2, #1
        {
            if( ctx->source[i].size < ctx->source[i].threshold )
 8024cd6:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
                thresholds_reached = 0;
 8024cd8:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
        for( i = 0; i < ctx->source_count; i++ )
 8024cdc:	3001      	adds	r0, #1
                thresholds_reached = 0;
 8024cde:	42b9      	cmp	r1, r7
 8024ce0:	bf38      	it	cc
 8024ce2:	2200      	movcc	r2, #0
            if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
 8024ce4:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
 8024ce8:	3414      	adds	r4, #20
 8024cea:	2f01      	cmp	r7, #1
                strong_size += ctx->source[i].size;
 8024cec:	bf08      	it	eq
 8024cee:	448a      	addeq	sl, r1
        for( i = 0; i < ctx->source_count; i++ )
 8024cf0:	4283      	cmp	r3, r0
 8024cf2:	d1f0      	bne.n	8024cd6 <mbedtls_entropy_func+0x3a>
        }
    }
    while( ! thresholds_reached || strong_size < MBEDTLS_ENTROPY_BLOCK_SIZE );
 8024cf4:	b92a      	cbnz	r2, 8024d02 <mbedtls_entropy_func+0x66>
        if( count++ > ENTROPY_MAX_LOOP )
 8024cf6:	3e01      	subs	r6, #1
 8024cf8:	d1dc      	bne.n	8024cb4 <mbedtls_entropy_func+0x18>
            ret = MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
 8024cfa:	f06f 043b 	mvn.w	r4, #59	; 0x3b
 8024cfe:	466e      	mov	r6, sp
 8024d00:	e06f      	b.n	8024de2 <mbedtls_entropy_func+0x146>
    while( ! thresholds_reached || strong_size < MBEDTLS_ENTROPY_BLOCK_SIZE );
 8024d02:	f1ba 0f1f 	cmp.w	sl, #31
 8024d06:	d9f6      	bls.n	8024cf6 <mbedtls_entropy_func+0x5a>

    memset( buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE );
 8024d08:	466e      	mov	r6, sp
 8024d0a:	2220      	movs	r2, #32
 8024d0c:	2100      	movs	r1, #0
 8024d0e:	4630      	mov	r0, r6
     */
    if( ( ret = mbedtls_sha512_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
                                    buf, 0 ) ) != 0 )
        goto exit;
#else /* MBEDTLS_ENTROPY_SHA512_ACCUMULATOR */
    if( ( ret = mbedtls_sha256_finish_ret( &ctx->accumulator, buf ) ) != 0 )
 8024d10:	f105 0a04 	add.w	sl, r5, #4
    memset( buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE );
 8024d14:	f00b f8a7 	bl	802fe66 <memset>
    if( ( ret = mbedtls_sha256_finish_ret( &ctx->accumulator, buf ) ) != 0 )
 8024d18:	4631      	mov	r1, r6
 8024d1a:	4650      	mov	r0, sl
 8024d1c:	f005 fe30 	bl	802a980 <mbedtls_sha256_finish_ret>
 8024d20:	4604      	mov	r4, r0
 8024d22:	2800      	cmp	r0, #0
 8024d24:	d15d      	bne.n	8024de2 <mbedtls_entropy_func+0x146>
        goto exit;

    /*
     * Reset accumulator and counters and recycle existing entropy
     */
    mbedtls_sha256_free( &ctx->accumulator );
 8024d26:	4650      	mov	r0, sl
 8024d28:	f005 f8be 	bl	8029ea8 <mbedtls_sha256_free>
    mbedtls_sha256_init( &ctx->accumulator );
 8024d2c:	4650      	mov	r0, sl
 8024d2e:	f005 f8b7 	bl	8029ea0 <mbedtls_sha256_init>
    if( ( ret = mbedtls_sha256_starts_ret( &ctx->accumulator, 0 ) ) != 0 )
 8024d32:	4621      	mov	r1, r4
 8024d34:	4650      	mov	r0, sl
 8024d36:	f005 f8c3 	bl	8029ec0 <mbedtls_sha256_starts_ret>
 8024d3a:	4604      	mov	r4, r0
 8024d3c:	2800      	cmp	r0, #0
 8024d3e:	d150      	bne.n	8024de2 <mbedtls_entropy_func+0x146>
        goto exit;
    if( ( ret = mbedtls_sha256_update_ret( &ctx->accumulator, buf,
 8024d40:	4650      	mov	r0, sl
 8024d42:	2220      	movs	r2, #32
 8024d44:	4631      	mov	r1, r6
 8024d46:	f005 fe15 	bl	802a974 <mbedtls_sha256_update_ret>
 8024d4a:	4604      	mov	r4, r0
 8024d4c:	2800      	cmp	r0, #0
 8024d4e:	d148      	bne.n	8024de2 <mbedtls_entropy_func+0x146>
        goto exit;

    /*
     * Perform second SHA-256 on entropy
     */
    if( ( ret = mbedtls_sha256_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
 8024d50:	4603      	mov	r3, r0
 8024d52:	4632      	mov	r2, r6
 8024d54:	2120      	movs	r1, #32
 8024d56:	4630      	mov	r0, r6
 8024d58:	f005 fe96 	bl	802aa88 <mbedtls_sha256_ret>
 8024d5c:	4604      	mov	r4, r0
 8024d5e:	2800      	cmp	r0, #0
 8024d60:	d13f      	bne.n	8024de2 <mbedtls_entropy_func+0x146>
                                    buf, 0 ) ) != 0 )
        goto exit;
#endif /* MBEDTLS_ENTROPY_SHA512_ACCUMULATOR */

    for( i = 0; i < ctx->source_count; i++ )
 8024d62:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8024d64:	2b00      	cmp	r3, #0
 8024d66:	dd33      	ble.n	8024dd0 <mbedtls_entropy_func+0x134>
 8024d68:	2b01      	cmp	r3, #1
        ctx->source[i].size = 0;
 8024d6a:	67e8      	str	r0, [r5, #124]	; 0x7c
    for( i = 0; i < ctx->source_count; i++ )
 8024d6c:	d030      	beq.n	8024dd0 <mbedtls_entropy_func+0x134>
 8024d6e:	2b02      	cmp	r3, #2
        ctx->source[i].size = 0;
 8024d70:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
    for( i = 0; i < ctx->source_count; i++ )
 8024d74:	d02c      	beq.n	8024dd0 <mbedtls_entropy_func+0x134>
        ctx->source[i].size = 0;
 8024d76:	2200      	movs	r2, #0
    for( i = 0; i < ctx->source_count; i++ )
 8024d78:	2b03      	cmp	r3, #3
        ctx->source[i].size = 0;
 8024d7a:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
    for( i = 0; i < ctx->source_count; i++ )
 8024d7e:	d027      	beq.n	8024dd0 <mbedtls_entropy_func+0x134>
 8024d80:	2b04      	cmp	r3, #4
        ctx->source[i].size = 0;
 8024d82:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
    for( i = 0; i < ctx->source_count; i++ )
 8024d86:	d023      	beq.n	8024dd0 <mbedtls_entropy_func+0x134>
 8024d88:	2b05      	cmp	r3, #5
        ctx->source[i].size = 0;
 8024d8a:	f8c5 20cc 	str.w	r2, [r5, #204]	; 0xcc
    for( i = 0; i < ctx->source_count; i++ )
 8024d8e:	d01f      	beq.n	8024dd0 <mbedtls_entropy_func+0x134>
 8024d90:	2b06      	cmp	r3, #6
        ctx->source[i].size = 0;
 8024d92:	f8c5 20e0 	str.w	r2, [r5, #224]	; 0xe0
    for( i = 0; i < ctx->source_count; i++ )
 8024d96:	d01b      	beq.n	8024dd0 <mbedtls_entropy_func+0x134>
 8024d98:	2b07      	cmp	r3, #7
        ctx->source[i].size = 0;
 8024d9a:	f8c5 20f4 	str.w	r2, [r5, #244]	; 0xf4
    for( i = 0; i < ctx->source_count; i++ )
 8024d9e:	d017      	beq.n	8024dd0 <mbedtls_entropy_func+0x134>
 8024da0:	2b08      	cmp	r3, #8
        ctx->source[i].size = 0;
 8024da2:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
    for( i = 0; i < ctx->source_count; i++ )
 8024da6:	d013      	beq.n	8024dd0 <mbedtls_entropy_func+0x134>
 8024da8:	2b09      	cmp	r3, #9
        ctx->source[i].size = 0;
 8024daa:	f8c5 211c 	str.w	r2, [r5, #284]	; 0x11c
    for( i = 0; i < ctx->source_count; i++ )
 8024dae:	d00f      	beq.n	8024dd0 <mbedtls_entropy_func+0x134>
 8024db0:	2b0a      	cmp	r3, #10
        ctx->source[i].size = 0;
 8024db2:	f8c5 2130 	str.w	r2, [r5, #304]	; 0x130
    for( i = 0; i < ctx->source_count; i++ )
 8024db6:	d00b      	beq.n	8024dd0 <mbedtls_entropy_func+0x134>
 8024db8:	2b0b      	cmp	r3, #11
        ctx->source[i].size = 0;
 8024dba:	f8c5 2144 	str.w	r2, [r5, #324]	; 0x144
    for( i = 0; i < ctx->source_count; i++ )
 8024dbe:	d007      	beq.n	8024dd0 <mbedtls_entropy_func+0x134>
 8024dc0:	210b      	movs	r1, #11
 8024dc2:	3101      	adds	r1, #1
 8024dc4:	4299      	cmp	r1, r3
        ctx->source[i].size = 0;
 8024dc6:	f8cb 2158 	str.w	r2, [fp, #344]	; 0x158
    for( i = 0; i < ctx->source_count; i++ )
 8024dca:	f10b 0b14 	add.w	fp, fp, #20
 8024dce:	d1f8      	bne.n	8024dc2 <mbedtls_entropy_func+0x126>

    memcpy( output, buf, len );
 8024dd0:	4642      	mov	r2, r8
 8024dd2:	4648      	mov	r0, r9
 8024dd4:	4631      	mov	r1, r6
 8024dd6:	f00b f81f 	bl	802fe18 <memcpy>

    ret = 0;
 8024dda:	e002      	b.n	8024de2 <mbedtls_entropy_func+0x146>
        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );
 8024ddc:	f06f 043f 	mvn.w	r4, #63	; 0x3f
 8024de0:	466e      	mov	r6, sp

exit:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 8024de2:	4630      	mov	r0, r6
 8024de4:	2120      	movs	r1, #32
 8024de6:	f002 fea1 	bl	8027b2c <mbedtls_platform_zeroize>
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
}
 8024dea:	4620      	mov	r0, r4
 8024dec:	b009      	add	sp, #36	; 0x24
 8024dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );
 8024df2:	f06f 043b 	mvn.w	r4, #59	; 0x3b
 8024df6:	e7f8      	b.n	8024dea <mbedtls_entropy_func+0x14e>

08024df8 <gcm_mult>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
 8024df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024dfc:	4683      	mov	fp, r0
        mbedtls_aesni_gcm_mult( output, x, h );
        return;
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;
 8024dfe:	f811 7f0f 	ldrb.w	r7, [r1, #15]!
{
 8024e02:	b083      	sub	sp, #12
 8024e04:	f007 000f 	and.w	r0, r7, #15
 8024e08:	093f      	lsrs	r7, r7, #4
 8024e0a:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 8024e0e:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 8024e12:	f8d7 60c4 	ldr.w	r6, [r7, #196]	; 0xc4

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];
 8024e16:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8024e18:	9600      	str	r6, [sp, #0]
        }

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
 8024e1a:	4e51      	ldr	r6, [pc, #324]	; (8024f60 <gcm_mult+0x168>)
 8024e1c:	f003 050f 	and.w	r5, r3, #15
    zh = ctx->HH[lo];
 8024e20:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
        zh ^= (uint64_t) last4[rem] << 48;
 8024e24:	f856 5035 	ldr.w	r5, [r6, r5, lsl #3]
 8024e28:	9e00      	ldr	r6, [sp, #0]
{
 8024e2a:	9201      	str	r2, [sp, #4]
    zh = ctx->HH[lo];
 8024e2c:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
    zl = ctx->HL[lo];
 8024e30:	ea86 1614 	eor.w	r6, r6, r4, lsr #4
 8024e34:	6c40      	ldr	r0, [r0, #68]	; 0x44
        zh ^= ctx->HH[hi];
 8024e36:	ea86 4605 	eor.w	r6, r6, r5, lsl #16
        zh = ( zh >> 4 );
 8024e3a:	0915      	lsrs	r5, r2, #4
 8024e3c:	ea45 7504 	orr.w	r5, r5, r4, lsl #28
        zl = ( zh << 60 ) | ( zl >> 4 );
 8024e40:	091b      	lsrs	r3, r3, #4
 8024e42:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8024e46:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 8024e4a:	ea4f 7e02 	mov.w	lr, r2, lsl #28
 8024e4e:	ea4e 1e10 	orr.w	lr, lr, r0, lsr #4
        zh ^= ctx->HH[hi];
 8024e52:	4065      	eors	r5, r4
        zl ^= ctx->HL[hi];
 8024e54:	e9d7 0210 	ldrd	r0, r2, [r7, #64]	; 0x40
 8024e58:	4043      	eors	r3, r0
    for( i = 15; i >= 0; i-- )
 8024e5a:	f04f 080e 	mov.w	r8, #14
        zl ^= ctx->HL[hi];
 8024e5e:	4628      	mov	r0, r5
 8024e60:	468a      	mov	sl, r1
 8024e62:	461d      	mov	r5, r3
 8024e64:	ea8e 0e02 	eor.w	lr, lr, r2
        lo = x[i] & 0xf;
 8024e68:	f81a 7d01 	ldrb.w	r7, [sl, #-1]!
            zl = ( zh << 60 ) | ( zl >> 4 );
 8024e6c:	092b      	lsrs	r3, r5, #4
 8024e6e:	f007 020f 	and.w	r2, r7, #15
 8024e72:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
            zl ^= ctx->HL[lo];
 8024e76:	6c11      	ldr	r1, [r2, #64]	; 0x40
            zl = ( zh << 60 ) | ( zl >> 4 );
 8024e78:	ea43 730e 	orr.w	r3, r3, lr, lsl #28
            zl ^= ctx->HL[lo];
 8024e7c:	404b      	eors	r3, r1
 8024e7e:	9300      	str	r3, [sp, #0]
            zh ^= (uint64_t) last4[rem] << 48;
 8024e80:	4b37      	ldr	r3, [pc, #220]	; (8024f60 <gcm_mult+0x168>)
 8024e82:	f005 050f 	and.w	r5, r5, #15
 8024e86:	f853 5035 	ldr.w	r5, [r3, r5, lsl #3]
            zh = ( zh >> 4 );
 8024e8a:	0901      	lsrs	r1, r0, #4
        zh ^= (uint64_t) last4[rem] << 48;
 8024e8c:	9b00      	ldr	r3, [sp, #0]
            zh = ( zh >> 4 );
 8024e8e:	ea41 7106 	orr.w	r1, r1, r6, lsl #28
 8024e92:	e9d2 c430 	ldrd	ip, r4, [r2, #192]	; 0xc0
 8024e96:	ea81 010c 	eor.w	r1, r1, ip
        zh ^= (uint64_t) last4[rem] << 48;
 8024e9a:	f003 0c0f 	and.w	ip, r3, #15
 8024e9e:	4b30      	ldr	r3, [pc, #192]	; (8024f60 <gcm_mult+0x168>)
 8024ea0:	093f      	lsrs	r7, r7, #4
 8024ea2:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 8024ea6:	f853 c03c 	ldr.w	ip, [r3, ip, lsl #3]
            zl ^= ctx->HL[lo];
 8024eaa:	6c52      	ldr	r2, [r2, #68]	; 0x44
        zl = ( zh << 60 ) | ( zl >> 4 );
 8024eac:	9b00      	ldr	r3, [sp, #0]
            zl = ( zh << 60 ) | ( zl >> 4 );
 8024eae:	0700      	lsls	r0, r0, #28
 8024eb0:	ea40 101e 	orr.w	r0, r0, lr, lsr #4
            zh ^= ctx->HH[lo];
 8024eb4:	ea84 1416 	eor.w	r4, r4, r6, lsr #4
 8024eb8:	f8d7 60c4 	ldr.w	r6, [r7, #196]	; 0xc4
 8024ebc:	ea84 4405 	eor.w	r4, r4, r5, lsl #16
            zl ^= ctx->HL[lo];
 8024ec0:	4042      	eors	r2, r0
        zl = ( zh << 60 ) | ( zl >> 4 );
 8024ec2:	f8d7 90c0 	ldr.w	r9, [r7, #192]	; 0xc0
        zh = ( zh >> 4 );
 8024ec6:	0908      	lsrs	r0, r1, #4
        zl = ( zh << 60 ) | ( zl >> 4 );
 8024ec8:	091b      	lsrs	r3, r3, #4
 8024eca:	0709      	lsls	r1, r1, #28
    for( i = 15; i >= 0; i-- )
 8024ecc:	f108 38ff 	add.w	r8, r8, #4294967295
        zh = ( zh >> 4 );
 8024ed0:	ea40 7004 	orr.w	r0, r0, r4, lsl #28
        zl = ( zh << 60 ) | ( zl >> 4 );
 8024ed4:	ea41 1112 	orr.w	r1, r1, r2, lsr #4
 8024ed8:	ea86 1414 	eor.w	r4, r6, r4, lsr #4
 8024edc:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    for( i = 15; i >= 0; i-- )
 8024ee0:	f1b8 3fff 	cmp.w	r8, #4294967295
        zl ^= ctx->HL[hi];
 8024ee4:	e9d7 5e10 	ldrd	r5, lr, [r7, #64]	; 0x40
        zh ^= ctx->HH[hi];
 8024ee8:	ea80 0009 	eor.w	r0, r0, r9
        zl ^= ctx->HL[hi];
 8024eec:	ea81 0e0e 	eor.w	lr, r1, lr
        zh ^= ctx->HH[hi];
 8024ef0:	ea84 460c 	eor.w	r6, r4, ip, lsl #16
        zl ^= ctx->HL[hi];
 8024ef4:	ea85 0503 	eor.w	r5, r5, r3
    for( i = 15; i >= 0; i-- )
 8024ef8:	d1b6      	bne.n	8024e68 <gcm_mult+0x70>
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 8024efa:	2100      	movs	r1, #0
    PUT_UINT32_BE( zh, output, 4 );
    PUT_UINT32_BE( zl >> 32, output, 8 );
 8024efc:	460a      	mov	r2, r1
 8024efe:	462b      	mov	r3, r5
 8024f00:	4605      	mov	r5, r0
    PUT_UINT32_BE( zh >> 32, output, 0 );
 8024f02:	0e30      	lsrs	r0, r6, #24
 8024f04:	f360 0107 	bfi	r1, r0, #0, #8
 8024f08:	0c30      	lsrs	r0, r6, #16
 8024f0a:	f360 210f 	bfi	r1, r0, #8, #8
    PUT_UINT32_BE( zl >> 32, output, 8 );
 8024f0e:	ea4f 601e 	mov.w	r0, lr, lsr #24
 8024f12:	f360 0207 	bfi	r2, r0, #0, #8
    PUT_UINT32_BE( zh >> 32, output, 0 );
 8024f16:	0a30      	lsrs	r0, r6, #8
 8024f18:	f360 4117 	bfi	r1, r0, #16, #8
    PUT_UINT32_BE( zl >> 32, output, 8 );
 8024f1c:	ea4f 401e 	mov.w	r0, lr, lsr #16
    PUT_UINT32_BE( zh, output, 4 );
 8024f20:	9c01      	ldr	r4, [sp, #4]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 8024f22:	f360 220f 	bfi	r2, r0, #8, #8
 8024f26:	ea4f 201e 	mov.w	r0, lr, lsr #8
    PUT_UINT32_BE( zh >> 32, output, 0 );
 8024f2a:	f366 611f 	bfi	r1, r6, #24, #8
    PUT_UINT32_BE( zl >> 32, output, 8 );
 8024f2e:	f360 4217 	bfi	r2, r0, #16, #8
 8024f32:	f36e 621f 	bfi	r2, lr, #24, #8
    PUT_UINT32_BE( zl, output, 12 );
 8024f36:	0e18      	lsrs	r0, r3, #24
    PUT_UINT32_BE( zh, output, 4 );
 8024f38:	0e2f      	lsrs	r7, r5, #24
 8024f3a:	0c2e      	lsrs	r6, r5, #16
 8024f3c:	ea4f 2c15 	mov.w	ip, r5, lsr #8
    PUT_UINT32_BE( zl, output, 12 );
 8024f40:	73e3      	strb	r3, [r4, #15]
    PUT_UINT32_BE( zh >> 32, output, 0 );
 8024f42:	6021      	str	r1, [r4, #0]
    PUT_UINT32_BE( zl, output, 12 );
 8024f44:	0c19      	lsrs	r1, r3, #16
 8024f46:	0a1b      	lsrs	r3, r3, #8
    PUT_UINT32_BE( zh, output, 4 );
 8024f48:	71e5      	strb	r5, [r4, #7]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 8024f4a:	60a2      	str	r2, [r4, #8]
    PUT_UINT32_BE( zh, output, 4 );
 8024f4c:	7127      	strb	r7, [r4, #4]
 8024f4e:	7166      	strb	r6, [r4, #5]
 8024f50:	f884 c006 	strb.w	ip, [r4, #6]
    PUT_UINT32_BE( zl, output, 12 );
 8024f54:	7320      	strb	r0, [r4, #12]
 8024f56:	7361      	strb	r1, [r4, #13]
 8024f58:	73a3      	strb	r3, [r4, #14]
}
 8024f5a:	b003      	add	sp, #12
 8024f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024f60:	08034878 	.word	0x08034878

08024f64 <mbedtls_gcm_init>:
    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
 8024f64:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8024f68:	2100      	movs	r1, #0
 8024f6a:	f00a bf7c 	b.w	802fe66 <memset>
 8024f6e:	bf00      	nop

08024f70 <mbedtls_gcm_setkey>:
{
 8024f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f74:	4604      	mov	r4, r0
 8024f76:	4617      	mov	r7, r2
    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits,
 8024f78:	4608      	mov	r0, r1
{
 8024f7a:	b089      	sub	sp, #36	; 0x24
    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits,
 8024f7c:	4619      	mov	r1, r3
 8024f7e:	2201      	movs	r2, #1
{
 8024f80:	461e      	mov	r6, r3
    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits,
 8024f82:	f7fe ff0f 	bl	8023da4 <mbedtls_cipher_info_from_values>
    if( cipher_info == NULL )
 8024f86:	2800      	cmp	r0, #0
 8024f88:	f000 811b 	beq.w	80251c2 <mbedtls_gcm_setkey+0x252>
    if( cipher_info->block_size != 16 )
 8024f8c:	f8d0 8014 	ldr.w	r8, [r0, #20]
 8024f90:	4605      	mov	r5, r0
 8024f92:	f1b8 0f10 	cmp.w	r8, #16
 8024f96:	f040 8114 	bne.w	80251c2 <mbedtls_gcm_setkey+0x252>
    mbedtls_cipher_free( &ctx->cipher_ctx );
 8024f9a:	4620      	mov	r0, r4
 8024f9c:	f7fe ff1a 	bl	8023dd4 <mbedtls_cipher_free>
    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 8024fa0:	4629      	mov	r1, r5
 8024fa2:	4620      	mov	r0, r4
 8024fa4:	f7fe ff26 	bl	8023df4 <mbedtls_cipher_setup>
 8024fa8:	b110      	cbz	r0, 8024fb0 <mbedtls_gcm_setkey+0x40>
}
 8024faa:	b009      	add	sp, #36	; 0x24
 8024fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 8024fb0:	4632      	mov	r2, r6
 8024fb2:	4639      	mov	r1, r7
 8024fb4:	2301      	movs	r3, #1
 8024fb6:	4620      	mov	r0, r4
 8024fb8:	f7fe ff3c 	bl	8023e34 <mbedtls_cipher_setkey>
 8024fbc:	2800      	cmp	r0, #0
 8024fbe:	d1f4      	bne.n	8024faa <mbedtls_gcm_setkey+0x3a>
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
 8024fc0:	ab03      	add	r3, sp, #12
 8024fc2:	9300      	str	r3, [sp, #0]
 8024fc4:	ab04      	add	r3, sp, #16
    memset( h, 0, 16 );
 8024fc6:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8024fca:	e9cd 0005 	strd	r0, r0, [sp, #20]
 8024fce:	9007      	str	r0, [sp, #28]
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
 8024fd0:	4642      	mov	r2, r8
 8024fd2:	4619      	mov	r1, r3
 8024fd4:	4620      	mov	r0, r4
 8024fd6:	f7fe ff4f 	bl	8023e78 <mbedtls_cipher_update>
 8024fda:	2800      	cmp	r0, #0
 8024fdc:	d1e5      	bne.n	8024faa <mbedtls_gcm_setkey+0x3a>
    GET_UINT32_BE( lo, h,  4  );
 8024fde:	e9dd 2506 	ldrd	r2, r5, [sp, #24]
    ctx->HH[0] = 0;
 8024fe2:	2600      	movs	r6, #0
 8024fe4:	2700      	movs	r7, #0
        ctx->HH[i] = vh;
 8024fe6:	f04f 0903 	mov.w	r9, #3
    for( i = 2; i <= 8; i *= 2 )
 8024fea:	2102      	movs	r1, #2
 8024fec:	9b05      	ldr	r3, [sp, #20]
 8024fee:	fa95 fe85 	rev.w	lr, r5
 8024ff2:	fa93 fa83 	rev.w	sl, r3
    ctx->HL[8] = vl;
 8024ff6:	fa92 f882 	rev.w	r8, r2
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 8024ffa:	f00e 0c01 	and.w	ip, lr, #1
 8024ffe:	9b04      	ldr	r3, [sp, #16]
        vl  = ( vh << 63 ) | ( vl >> 1 );
 8025000:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8025004:	ea45 75c8 	orr.w	r5, r5, r8, lsl #31
    ctx->HH[0] = 0;
 8025008:	e9c4 6730 	strd	r6, r7, [r4, #192]	; 0xc0
    ctx->HL[0] = 0;
 802500c:	e9c4 6710 	strd	r6, r7, [r4, #64]	; 0x40
        vl  = ( vh << 63 ) | ( vl >> 1 );
 8025010:	ea4f 72ca 	mov.w	r2, sl, lsl #31
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 8025014:	ea4f 174c 	mov.w	r7, ip, lsl #5
 8025018:	fa93 fb83 	rev.w	fp, r3
        vl  = ( vh << 63 ) | ( vl >> 1 );
 802501c:	ea42 0258 	orr.w	r2, r2, r8, lsr #1
 8025020:	086b      	lsrs	r3, r5, #1
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 8025022:	ebac 0707 	sub.w	r7, ip, r7
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 8025026:	ea4f 065a 	mov.w	r6, sl, lsr #1
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 802502a:	f005 0c01 	and.w	ip, r5, #1
        vl  = ( vh << 63 ) | ( vl >> 1 );
 802502e:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 8025032:	ea46 76cb 	orr.w	r6, r6, fp, lsl #31
        ctx->HL[i] = vl;
 8025036:	6625      	str	r5, [r4, #96]	; 0x60
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 8025038:	ea4f 154c 	mov.w	r5, ip, lsl #5
 802503c:	ebac 0505 	sub.w	r5, ip, r5
 8025040:	063f      	lsls	r7, r7, #24
 8025042:	f003 0c01 	and.w	ip, r3, #1
    ctx->HL[8] = vl;
 8025046:	f8c4 e080 	str.w	lr, [r4, #128]	; 0x80
        ctx->HH[i] = vh;
 802504a:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 802504e:	ea4f 0e56 	mov.w	lr, r6, lsr #1
        vl  = ( vh << 63 ) | ( vl >> 1 );
 8025052:	07f6      	lsls	r6, r6, #31
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 8025054:	ea87 075b 	eor.w	r7, r7, fp, lsr #1
        ctx->HL[i] = vl;
 8025058:	6662      	str	r2, [r4, #100]	; 0x64
        vl  = ( vh << 63 ) | ( vl >> 1 );
 802505a:	ea46 0252 	orr.w	r2, r6, r2, lsr #1
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 802505e:	ea4f 164c 	mov.w	r6, ip, lsl #5
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 8025062:	ea4e 7ec7 	orr.w	lr, lr, r7, lsl #31
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 8025066:	ebac 0606 	sub.w	r6, ip, r6
 802506a:	062d      	lsls	r5, r5, #24
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 802506c:	ea85 0557 	eor.w	r5, r5, r7, lsr #1
        ctx->HL[i] = vl;
 8025070:	6523      	str	r3, [r4, #80]	; 0x50
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 8025072:	0636      	lsls	r6, r6, #24
        vl  = ( vh << 63 ) | ( vl >> 1 );
 8025074:	085b      	lsrs	r3, r3, #1
        ctx->HH[i] = vh;
 8025076:	f8c4 70e4 	str.w	r7, [r4, #228]	; 0xe4
        vl  = ( vh << 63 ) | ( vl >> 1 );
 802507a:	ea4f 7cce 	mov.w	ip, lr, lsl #31
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 802507e:	ea4f 075e 	mov.w	r7, lr, lsr #1
        vl  = ( vh << 63 ) | ( vl >> 1 );
 8025082:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 8025086:	ea86 0655 	eor.w	r6, r6, r5, lsr #1
        ctx->HL[i] = vl;
 802508a:	6562      	str	r2, [r4, #84]	; 0x54
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 802508c:	ea47 77c5 	orr.w	r7, r7, r5, lsl #31
        vl  = ( vh << 63 ) | ( vl >> 1 );
 8025090:	ea4c 0252 	orr.w	r2, ip, r2, lsr #1
        ctx->HL[i] = vl;
 8025094:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
        ctx->HH[i] = vh;
 8025098:	e9c4 7632 	strd	r7, r6, [r4, #200]	; 0xc8
    ctx->HH[8] = vh;
 802509c:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
 80250a0:	f8c4 b104 	str.w	fp, [r4, #260]	; 0x104
    ctx->HL[8] = vl;
 80250a4:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
        ctx->HH[i] = vh;
 80250a8:	f8c4 e0d0 	str.w	lr, [r4, #208]	; 0xd0
 80250ac:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
    for( i = 4; i > 0; i >>= 1 )
 80250b0:	f104 0a40 	add.w	sl, r4, #64	; 0x40
 80250b4:	f104 0bc0 	add.w	fp, r4, #192	; 0xc0
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
 80250b8:	eb0b 02c1 	add.w	r2, fp, r1, lsl #3
        vh = *HiH;
 80250bc:	f85b 5031 	ldr.w	r5, [fp, r1, lsl #3]
 80250c0:	f8d2 c004 	ldr.w	ip, [r2, #4]
            HiH[j] = vh ^ ctx->HH[j];
 80250c4:	e9d4 3632 	ldrd	r3, r6, [r4, #200]	; 0xc8
 80250c8:	ea83 0705 	eor.w	r7, r3, r5
 80250cc:	ea86 060c 	eor.w	r6, r6, ip
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
 80250d0:	eb0a 03c1 	add.w	r3, sl, r1, lsl #3
        vl = *HiL;
 80250d4:	f85a e031 	ldr.w	lr, [sl, r1, lsl #3]
 80250d8:	f8d3 8004 	ldr.w	r8, [r3, #4]
            HiH[j] = vh ^ ctx->HH[j];
 80250dc:	e9c2 7602 	strd	r7, r6, [r2, #8]
        for( j = 1; j < i; j++ )
 80250e0:	2902      	cmp	r1, #2
            HiL[j] = vl ^ ctx->HL[j];
 80250e2:	e9d4 7612 	ldrd	r7, r6, [r4, #72]	; 0x48
 80250e6:	ea87 070e 	eor.w	r7, r7, lr
 80250ea:	ea86 0608 	eor.w	r6, r6, r8
 80250ee:	e9c3 7602 	strd	r7, r6, [r3, #8]
        for( j = 1; j < i; j++ )
 80250f2:	d05d      	beq.n	80251b0 <mbedtls_gcm_setkey+0x240>
            HiH[j] = vh ^ ctx->HH[j];
 80250f4:	e9d4 7634 	ldrd	r7, r6, [r4, #208]	; 0xd0
 80250f8:	406f      	eors	r7, r5
 80250fa:	ea86 060c 	eor.w	r6, r6, ip
 80250fe:	e9c2 7604 	strd	r7, r6, [r2, #16]
            HiL[j] = vl ^ ctx->HL[j];
 8025102:	e9d4 7614 	ldrd	r7, r6, [r4, #80]	; 0x50
 8025106:	ea87 070e 	eor.w	r7, r7, lr
 802510a:	ea86 0608 	eor.w	r6, r6, r8
 802510e:	e9c3 7604 	strd	r7, r6, [r3, #16]
            HiH[j] = vh ^ ctx->HH[j];
 8025112:	e9d4 7636 	ldrd	r7, r6, [r4, #216]	; 0xd8
 8025116:	406f      	eors	r7, r5
 8025118:	ea86 060c 	eor.w	r6, r6, ip
 802511c:	e9c2 7606 	strd	r7, r6, [r2, #24]
        for( j = 1; j < i; j++ )
 8025120:	2904      	cmp	r1, #4
            HiL[j] = vl ^ ctx->HL[j];
 8025122:	e9d4 7616 	ldrd	r7, r6, [r4, #88]	; 0x58
 8025126:	ea87 070e 	eor.w	r7, r7, lr
 802512a:	ea86 0608 	eor.w	r6, r6, r8
 802512e:	e9c3 7606 	strd	r7, r6, [r3, #24]
        for( j = 1; j < i; j++ )
 8025132:	d03d      	beq.n	80251b0 <mbedtls_gcm_setkey+0x240>
            HiH[j] = vh ^ ctx->HH[j];
 8025134:	e9d4 7638 	ldrd	r7, r6, [r4, #224]	; 0xe0
 8025138:	406f      	eors	r7, r5
 802513a:	ea86 060c 	eor.w	r6, r6, ip
 802513e:	e9c2 7608 	strd	r7, r6, [r2, #32]
            HiL[j] = vl ^ ctx->HL[j];
 8025142:	e9d4 7618 	ldrd	r7, r6, [r4, #96]	; 0x60
 8025146:	ea87 070e 	eor.w	r7, r7, lr
 802514a:	ea86 0608 	eor.w	r6, r6, r8
 802514e:	e9c3 7608 	strd	r7, r6, [r3, #32]
            HiH[j] = vh ^ ctx->HH[j];
 8025152:	e9d4 763a 	ldrd	r7, r6, [r4, #232]	; 0xe8
 8025156:	406f      	eors	r7, r5
 8025158:	ea86 060c 	eor.w	r6, r6, ip
 802515c:	e9c2 760a 	strd	r7, r6, [r2, #40]	; 0x28
        for( j = 1; j < i; j++ )
 8025160:	2906      	cmp	r1, #6
            HiL[j] = vl ^ ctx->HL[j];
 8025162:	e9d4 761a 	ldrd	r7, r6, [r4, #104]	; 0x68
 8025166:	ea87 070e 	eor.w	r7, r7, lr
 802516a:	ea86 0608 	eor.w	r6, r6, r8
 802516e:	e9c3 760a 	strd	r7, r6, [r3, #40]	; 0x28
        for( j = 1; j < i; j++ )
 8025172:	d01d      	beq.n	80251b0 <mbedtls_gcm_setkey+0x240>
            HiH[j] = vh ^ ctx->HH[j];
 8025174:	e9d4 763c 	ldrd	r7, r6, [r4, #240]	; 0xf0
 8025178:	406f      	eors	r7, r5
 802517a:	ea86 060c 	eor.w	r6, r6, ip
 802517e:	e9c2 760c 	strd	r7, r6, [r2, #48]	; 0x30
            HiL[j] = vl ^ ctx->HL[j];
 8025182:	e9d4 761c 	ldrd	r7, r6, [r4, #112]	; 0x70
 8025186:	ea87 070e 	eor.w	r7, r7, lr
 802518a:	ea86 0608 	eor.w	r6, r6, r8
 802518e:	e9c3 760c 	strd	r7, r6, [r3, #48]	; 0x30
            HiH[j] = vh ^ ctx->HH[j];
 8025192:	e9d4 763e 	ldrd	r7, r6, [r4, #248]	; 0xf8
 8025196:	407d      	eors	r5, r7
 8025198:	ea86 060c 	eor.w	r6, r6, ip
 802519c:	e9c2 560e 	strd	r5, r6, [r2, #56]	; 0x38
            HiL[j] = vl ^ ctx->HL[j];
 80251a0:	e9d4 521e 	ldrd	r5, r2, [r4, #120]	; 0x78
 80251a4:	ea85 050e 	eor.w	r5, r5, lr
 80251a8:	ea82 0208 	eor.w	r2, r2, r8
 80251ac:	e9c3 520e 	strd	r5, r2, [r3, #56]	; 0x38
    for( i = 2; i <= 8; i *= 2 )
 80251b0:	f1b9 0901 	subs.w	r9, r9, #1
 80251b4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80251b8:	f47f af7e 	bne.w	80250b8 <mbedtls_gcm_setkey+0x148>
}
 80251bc:	b009      	add	sp, #36	; 0x24
 80251be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80251c2:	f06f 0013 	mvn.w	r0, #19
 80251c6:	e6f0      	b.n	8024faa <mbedtls_gcm_setkey+0x3a>

080251c8 <mbedtls_gcm_starts>:
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 80251c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 80251cc:	2700      	movs	r7, #0
{
 80251ce:	b08b      	sub	sp, #44	; 0x2c
    size_t use_len, olen = 0;
 80251d0:	9705      	str	r7, [sp, #20]
{
 80251d2:	e9dd 6814 	ldrd	r6, r8, [sp, #80]	; 0x50
    GCM_VALIDATE_RET( iv != NULL );
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );

    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
 80251d6:	2b00      	cmp	r3, #0
 80251d8:	f000 826f 	beq.w	80256ba <mbedtls_gcm_starts+0x4f2>
 80251dc:	4604      	mov	r4, r0
 80251de:	468c      	mov	ip, r1

    memset( ctx->y, 0x00, sizeof(ctx->y) );
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );

    ctx->mode = mode;
    ctx->len = 0;
 80251e0:	2000      	movs	r0, #0
 80251e2:	2100      	movs	r1, #0
    ctx->add_len = 0;

    if( iv_len == 12 )
 80251e4:	2b0c      	cmp	r3, #12
 80251e6:	4615      	mov	r5, r2
 80251e8:	469b      	mov	fp, r3
    ctx->len = 0;
 80251ea:	e9c4 0150 	strd	r0, r1, [r4, #320]	; 0x140
    ctx->add_len = 0;
 80251ee:	e9c4 0152 	strd	r0, r1, [r4, #328]	; 0x148
    memset( ctx->y, 0x00, sizeof(ctx->y) );
 80251f2:	f8c4 7160 	str.w	r7, [r4, #352]	; 0x160
 80251f6:	f8c4 7164 	str.w	r7, [r4, #356]	; 0x164
 80251fa:	f8c4 7168 	str.w	r7, [r4, #360]	; 0x168
 80251fe:	f8c4 716c 	str.w	r7, [r4, #364]	; 0x16c
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 8025202:	f8c4 7170 	str.w	r7, [r4, #368]	; 0x170
 8025206:	f8c4 7174 	str.w	r7, [r4, #372]	; 0x174
 802520a:	f8c4 7178 	str.w	r7, [r4, #376]	; 0x178
 802520e:	f8c4 717c 	str.w	r7, [r4, #380]	; 0x17c
    ctx->mode = mode;
 8025212:	f8c4 c180 	str.w	ip, [r4, #384]	; 0x180
    memset( ctx->y, 0x00, sizeof(ctx->y) );
 8025216:	f504 7ab0 	add.w	sl, r4, #352	; 0x160
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 802521a:	f504 79b8 	add.w	r9, r4, #368	; 0x170
    if( iv_len == 12 )
 802521e:	f000 8252 	beq.w	80256c6 <mbedtls_gcm_starts+0x4fe>
        ctx->y[15] = 1;
    }
    else
    {
        memset( work_buf, 0x00, 16 );
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 8025222:	00da      	lsls	r2, r3, #3
 8025224:	f3c3 5047 	ubfx	r0, r3, #21, #8
 8025228:	f3c3 314f 	ubfx	r1, r3, #13, #16
 802522c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
 8025230:	f3c3 1257 	ubfx	r2, r3, #5, #24
 8025234:	f504 73b2 	add.w	r3, r4, #356	; 0x164
        memset( work_buf, 0x00, 16 );
 8025238:	e9cd 7706 	strd	r7, r7, [sp, #24]
 802523c:	9708      	str	r7, [sp, #32]
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 802523e:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
 8025242:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
 8025246:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26

        p = iv;
        while( iv_len > 0 )
 802524a:	9303      	str	r3, [sp, #12]
 802524c:	e021      	b.n	8025292 <mbedtls_gcm_starts+0xca>
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;

            for( i = 0; i < use_len; i++ )
                ctx->y[i] ^= p[i];
 802524e:	6869      	ldr	r1, [r5, #4]
 8025250:	f8d4 2164 	ldr.w	r2, [r4, #356]	; 0x164
 8025254:	2802      	cmp	r0, #2
 8025256:	ea82 0201 	eor.w	r2, r2, r1
 802525a:	f8c4 2164 	str.w	r2, [r4, #356]	; 0x164
            for( i = 0; i < use_len; i++ )
 802525e:	d033      	beq.n	80252c8 <mbedtls_gcm_starts+0x100>
                ctx->y[i] ^= p[i];
 8025260:	68a9      	ldr	r1, [r5, #8]
 8025262:	f8d4 2168 	ldr.w	r2, [r4, #360]	; 0x168
 8025266:	2804      	cmp	r0, #4
 8025268:	ea82 0201 	eor.w	r2, r2, r1
 802526c:	f8c4 2168 	str.w	r2, [r4, #360]	; 0x168
            for( i = 0; i < use_len; i++ )
 8025270:	d12a      	bne.n	80252c8 <mbedtls_gcm_starts+0x100>
                ctx->y[i] ^= p[i];
 8025272:	68ea      	ldr	r2, [r5, #12]
 8025274:	f8d4 116c 	ldr.w	r1, [r4, #364]	; 0x16c
 8025278:	404a      	eors	r2, r1
 802527a:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c

            gcm_mult( ctx, ctx->y, ctx->y );
 802527e:	4652      	mov	r2, sl
 8025280:	4651      	mov	r1, sl
 8025282:	4620      	mov	r0, r4
 8025284:	f7ff fdb8 	bl	8024df8 <gcm_mult>
        while( iv_len > 0 )
 8025288:	ebbb 0b07 	subs.w	fp, fp, r7

            iv_len -= use_len;
            p += use_len;
 802528c:	443d      	add	r5, r7
        while( iv_len > 0 )
 802528e:	f000 80e5 	beq.w	802545c <mbedtls_gcm_starts+0x294>
            use_len = ( iv_len < 16 ) ? iv_len : 16;
 8025292:	9b03      	ldr	r3, [sp, #12]
 8025294:	465f      	mov	r7, fp
 8025296:	429d      	cmp	r5, r3
 8025298:	bf34      	ite	cc
 802529a:	2200      	movcc	r2, #0
 802529c:	2201      	movcs	r2, #1
 802529e:	1d29      	adds	r1, r5, #4
 80252a0:	4551      	cmp	r1, sl
 80252a2:	bf98      	it	ls
 80252a4:	f042 0201 	orrls.w	r2, r2, #1
 80252a8:	2f10      	cmp	r7, #16
 80252aa:	bf28      	it	cs
 80252ac:	2710      	movcs	r7, #16
            for( i = 0; i < use_len; i++ )
 80252ae:	b372      	cbz	r2, 802530e <mbedtls_gcm_starts+0x146>
 80252b0:	1e7a      	subs	r2, r7, #1
 80252b2:	2a04      	cmp	r2, #4
 80252b4:	d92b      	bls.n	802530e <mbedtls_gcm_starts+0x146>
                ctx->y[i] ^= p[i];
 80252b6:	682a      	ldr	r2, [r5, #0]
 80252b8:	f8d4 1160 	ldr.w	r1, [r4, #352]	; 0x160
 80252bc:	08b8      	lsrs	r0, r7, #2
 80252be:	404a      	eors	r2, r1
 80252c0:	2801      	cmp	r0, #1
 80252c2:	f8c4 2160 	str.w	r2, [r4, #352]	; 0x160
            for( i = 0; i < use_len; i++ )
 80252c6:	d1c2      	bne.n	802524e <mbedtls_gcm_starts+0x86>
 80252c8:	07b9      	lsls	r1, r7, #30
 80252ca:	f027 0203 	bic.w	r2, r7, #3
 80252ce:	d0d6      	beq.n	802527e <mbedtls_gcm_starts+0xb6>
                ctx->y[i] ^= p[i];
 80252d0:	eb04 0c02 	add.w	ip, r4, r2
 80252d4:	f89c e160 	ldrb.w	lr, [ip, #352]	; 0x160
 80252d8:	5ca9      	ldrb	r1, [r5, r2]
            for( i = 0; i < use_len; i++ )
 80252da:	1c50      	adds	r0, r2, #1
                ctx->y[i] ^= p[i];
 80252dc:	ea81 010e 	eor.w	r1, r1, lr
            for( i = 0; i < use_len; i++ )
 80252e0:	4287      	cmp	r7, r0
                ctx->y[i] ^= p[i];
 80252e2:	f88c 1160 	strb.w	r1, [ip, #352]	; 0x160
            for( i = 0; i < use_len; i++ )
 80252e6:	d9ca      	bls.n	802527e <mbedtls_gcm_starts+0xb6>
                ctx->y[i] ^= p[i];
 80252e8:	eb04 0c00 	add.w	ip, r4, r0
 80252ec:	5c29      	ldrb	r1, [r5, r0]
 80252ee:	f89c 0160 	ldrb.w	r0, [ip, #352]	; 0x160
            for( i = 0; i < use_len; i++ )
 80252f2:	3202      	adds	r2, #2
                ctx->y[i] ^= p[i];
 80252f4:	4041      	eors	r1, r0
            for( i = 0; i < use_len; i++ )
 80252f6:	4297      	cmp	r7, r2
                ctx->y[i] ^= p[i];
 80252f8:	f88c 1160 	strb.w	r1, [ip, #352]	; 0x160
            for( i = 0; i < use_len; i++ )
 80252fc:	d9bf      	bls.n	802527e <mbedtls_gcm_starts+0xb6>
                ctx->y[i] ^= p[i];
 80252fe:	18a1      	adds	r1, r4, r2
 8025300:	f891 0160 	ldrb.w	r0, [r1, #352]	; 0x160
 8025304:	5caa      	ldrb	r2, [r5, r2]
 8025306:	4042      	eors	r2, r0
 8025308:	f881 2160 	strb.w	r2, [r1, #352]	; 0x160
            for( i = 0; i < use_len; i++ )
 802530c:	e7b7      	b.n	802527e <mbedtls_gcm_starts+0xb6>
                ctx->y[i] ^= p[i];
 802530e:	f894 2160 	ldrb.w	r2, [r4, #352]	; 0x160
 8025312:	7829      	ldrb	r1, [r5, #0]
            for( i = 0; i < use_len; i++ )
 8025314:	f1bb 0f01 	cmp.w	fp, #1
                ctx->y[i] ^= p[i];
 8025318:	ea82 0201 	eor.w	r2, r2, r1
 802531c:	f884 2160 	strb.w	r2, [r4, #352]	; 0x160
            for( i = 0; i < use_len; i++ )
 8025320:	d0ad      	beq.n	802527e <mbedtls_gcm_starts+0xb6>
                ctx->y[i] ^= p[i];
 8025322:	f894 2161 	ldrb.w	r2, [r4, #353]	; 0x161
 8025326:	7869      	ldrb	r1, [r5, #1]
            for( i = 0; i < use_len; i++ )
 8025328:	f1bb 0f02 	cmp.w	fp, #2
                ctx->y[i] ^= p[i];
 802532c:	ea82 0201 	eor.w	r2, r2, r1
 8025330:	f884 2161 	strb.w	r2, [r4, #353]	; 0x161
            for( i = 0; i < use_len; i++ )
 8025334:	d0a3      	beq.n	802527e <mbedtls_gcm_starts+0xb6>
                ctx->y[i] ^= p[i];
 8025336:	f894 2162 	ldrb.w	r2, [r4, #354]	; 0x162
 802533a:	78a9      	ldrb	r1, [r5, #2]
            for( i = 0; i < use_len; i++ )
 802533c:	f1bb 0f03 	cmp.w	fp, #3
                ctx->y[i] ^= p[i];
 8025340:	ea82 0201 	eor.w	r2, r2, r1
 8025344:	f884 2162 	strb.w	r2, [r4, #354]	; 0x162
            for( i = 0; i < use_len; i++ )
 8025348:	d099      	beq.n	802527e <mbedtls_gcm_starts+0xb6>
                ctx->y[i] ^= p[i];
 802534a:	f894 2163 	ldrb.w	r2, [r4, #355]	; 0x163
 802534e:	78e9      	ldrb	r1, [r5, #3]
            for( i = 0; i < use_len; i++ )
 8025350:	f1bb 0f04 	cmp.w	fp, #4
                ctx->y[i] ^= p[i];
 8025354:	ea82 0201 	eor.w	r2, r2, r1
 8025358:	f884 2163 	strb.w	r2, [r4, #355]	; 0x163
            for( i = 0; i < use_len; i++ )
 802535c:	d08f      	beq.n	802527e <mbedtls_gcm_starts+0xb6>
                ctx->y[i] ^= p[i];
 802535e:	f894 2164 	ldrb.w	r2, [r4, #356]	; 0x164
 8025362:	7929      	ldrb	r1, [r5, #4]
            for( i = 0; i < use_len; i++ )
 8025364:	f1bb 0f05 	cmp.w	fp, #5
                ctx->y[i] ^= p[i];
 8025368:	ea82 0201 	eor.w	r2, r2, r1
 802536c:	f884 2164 	strb.w	r2, [r4, #356]	; 0x164
            for( i = 0; i < use_len; i++ )
 8025370:	d085      	beq.n	802527e <mbedtls_gcm_starts+0xb6>
                ctx->y[i] ^= p[i];
 8025372:	f894 2165 	ldrb.w	r2, [r4, #357]	; 0x165
 8025376:	7969      	ldrb	r1, [r5, #5]
            for( i = 0; i < use_len; i++ )
 8025378:	f1bb 0f06 	cmp.w	fp, #6
                ctx->y[i] ^= p[i];
 802537c:	ea82 0201 	eor.w	r2, r2, r1
 8025380:	f884 2165 	strb.w	r2, [r4, #357]	; 0x165
            for( i = 0; i < use_len; i++ )
 8025384:	f43f af7b 	beq.w	802527e <mbedtls_gcm_starts+0xb6>
                ctx->y[i] ^= p[i];
 8025388:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
 802538c:	79a9      	ldrb	r1, [r5, #6]
            for( i = 0; i < use_len; i++ )
 802538e:	f1bb 0f07 	cmp.w	fp, #7
                ctx->y[i] ^= p[i];
 8025392:	ea82 0201 	eor.w	r2, r2, r1
 8025396:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
            for( i = 0; i < use_len; i++ )
 802539a:	f43f af70 	beq.w	802527e <mbedtls_gcm_starts+0xb6>
                ctx->y[i] ^= p[i];
 802539e:	f894 2167 	ldrb.w	r2, [r4, #359]	; 0x167
 80253a2:	79e9      	ldrb	r1, [r5, #7]
            for( i = 0; i < use_len; i++ )
 80253a4:	f1bb 0f08 	cmp.w	fp, #8
                ctx->y[i] ^= p[i];
 80253a8:	ea82 0201 	eor.w	r2, r2, r1
 80253ac:	f884 2167 	strb.w	r2, [r4, #359]	; 0x167
            for( i = 0; i < use_len; i++ )
 80253b0:	f43f af65 	beq.w	802527e <mbedtls_gcm_starts+0xb6>
                ctx->y[i] ^= p[i];
 80253b4:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 80253b8:	7a29      	ldrb	r1, [r5, #8]
            for( i = 0; i < use_len; i++ )
 80253ba:	f1bb 0f09 	cmp.w	fp, #9
                ctx->y[i] ^= p[i];
 80253be:	ea82 0201 	eor.w	r2, r2, r1
 80253c2:	f884 2168 	strb.w	r2, [r4, #360]	; 0x168
            for( i = 0; i < use_len; i++ )
 80253c6:	f43f af5a 	beq.w	802527e <mbedtls_gcm_starts+0xb6>
                ctx->y[i] ^= p[i];
 80253ca:	f894 2169 	ldrb.w	r2, [r4, #361]	; 0x169
 80253ce:	7a69      	ldrb	r1, [r5, #9]
            for( i = 0; i < use_len; i++ )
 80253d0:	f1bb 0f0a 	cmp.w	fp, #10
                ctx->y[i] ^= p[i];
 80253d4:	ea82 0201 	eor.w	r2, r2, r1
 80253d8:	f884 2169 	strb.w	r2, [r4, #361]	; 0x169
            for( i = 0; i < use_len; i++ )
 80253dc:	f43f af4f 	beq.w	802527e <mbedtls_gcm_starts+0xb6>
                ctx->y[i] ^= p[i];
 80253e0:	f894 216a 	ldrb.w	r2, [r4, #362]	; 0x16a
 80253e4:	7aa9      	ldrb	r1, [r5, #10]
            for( i = 0; i < use_len; i++ )
 80253e6:	f1bb 0f0b 	cmp.w	fp, #11
                ctx->y[i] ^= p[i];
 80253ea:	ea82 0201 	eor.w	r2, r2, r1
 80253ee:	f884 216a 	strb.w	r2, [r4, #362]	; 0x16a
            for( i = 0; i < use_len; i++ )
 80253f2:	f43f af44 	beq.w	802527e <mbedtls_gcm_starts+0xb6>
                ctx->y[i] ^= p[i];
 80253f6:	f894 216b 	ldrb.w	r2, [r4, #363]	; 0x16b
 80253fa:	7ae9      	ldrb	r1, [r5, #11]
            for( i = 0; i < use_len; i++ )
 80253fc:	f1bb 0f0c 	cmp.w	fp, #12
                ctx->y[i] ^= p[i];
 8025400:	ea82 0201 	eor.w	r2, r2, r1
 8025404:	f884 216b 	strb.w	r2, [r4, #363]	; 0x16b
            for( i = 0; i < use_len; i++ )
 8025408:	f43f af39 	beq.w	802527e <mbedtls_gcm_starts+0xb6>
                ctx->y[i] ^= p[i];
 802540c:	f894 216c 	ldrb.w	r2, [r4, #364]	; 0x16c
 8025410:	7b29      	ldrb	r1, [r5, #12]
            for( i = 0; i < use_len; i++ )
 8025412:	f1bb 0f0d 	cmp.w	fp, #13
                ctx->y[i] ^= p[i];
 8025416:	ea82 0201 	eor.w	r2, r2, r1
 802541a:	f884 216c 	strb.w	r2, [r4, #364]	; 0x16c
            for( i = 0; i < use_len; i++ )
 802541e:	f43f af2e 	beq.w	802527e <mbedtls_gcm_starts+0xb6>
                ctx->y[i] ^= p[i];
 8025422:	f894 216d 	ldrb.w	r2, [r4, #365]	; 0x16d
 8025426:	7b69      	ldrb	r1, [r5, #13]
            for( i = 0; i < use_len; i++ )
 8025428:	f1bb 0f0e 	cmp.w	fp, #14
                ctx->y[i] ^= p[i];
 802542c:	ea82 0201 	eor.w	r2, r2, r1
 8025430:	f884 216d 	strb.w	r2, [r4, #365]	; 0x16d
            for( i = 0; i < use_len; i++ )
 8025434:	f43f af23 	beq.w	802527e <mbedtls_gcm_starts+0xb6>
                ctx->y[i] ^= p[i];
 8025438:	f894 216e 	ldrb.w	r2, [r4, #366]	; 0x16e
 802543c:	7ba9      	ldrb	r1, [r5, #14]
            for( i = 0; i < use_len; i++ )
 802543e:	f1bb 0f0f 	cmp.w	fp, #15
                ctx->y[i] ^= p[i];
 8025442:	ea82 0201 	eor.w	r2, r2, r1
 8025446:	f884 216e 	strb.w	r2, [r4, #366]	; 0x16e
            for( i = 0; i < use_len; i++ )
 802544a:	f67f af18 	bls.w	802527e <mbedtls_gcm_starts+0xb6>
                ctx->y[i] ^= p[i];
 802544e:	f894 216f 	ldrb.w	r2, [r4, #367]	; 0x16f
 8025452:	7be9      	ldrb	r1, [r5, #15]
 8025454:	404a      	eors	r2, r1
 8025456:	f884 216f 	strb.w	r2, [r4, #367]	; 0x16f
            for( i = 0; i < use_len; i++ )
 802545a:	e710      	b.n	802527e <mbedtls_gcm_starts+0xb6>
        }

        for( i = 0; i < 16; i++ )
            ctx->y[i] ^= work_buf[i];
 802545c:	f8d4 3164 	ldr.w	r3, [r4, #356]	; 0x164
 8025460:	9d07      	ldr	r5, [sp, #28]
 8025462:	f8d4 2168 	ldr.w	r2, [r4, #360]	; 0x168
 8025466:	406b      	eors	r3, r5
 8025468:	9d08      	ldr	r5, [sp, #32]
 802546a:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
 802546e:	406a      	eors	r2, r5
 8025470:	f8d4 116c 	ldr.w	r1, [r4, #364]	; 0x16c
 8025474:	9f06      	ldr	r7, [sp, #24]
 8025476:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8025478:	4078      	eors	r0, r7
 802547a:	4069      	eors	r1, r5
 802547c:	e9c4 3259 	strd	r3, r2, [r4, #356]	; 0x164
 8025480:	f8c4 0160 	str.w	r0, [r4, #352]	; 0x160
 8025484:	f8c4 116c 	str.w	r1, [r4, #364]	; 0x16c

        gcm_mult( ctx, ctx->y, ctx->y );
 8025488:	4652      	mov	r2, sl
 802548a:	4651      	mov	r1, sl
 802548c:	4620      	mov	r0, r4
 802548e:	f7ff fcb3 	bl	8024df8 <gcm_mult>
    }

    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16,
 8025492:	ab05      	add	r3, sp, #20
 8025494:	4651      	mov	r1, sl
 8025496:	9300      	str	r3, [sp, #0]
 8025498:	2210      	movs	r2, #16
 802549a:	4620      	mov	r0, r4
 802549c:	f504 73a8 	add.w	r3, r4, #336	; 0x150
 80254a0:	f7fe fcea 	bl	8023e78 <mbedtls_cipher_update>
 80254a4:	4682      	mov	sl, r0
 80254a6:	2800      	cmp	r0, #0
 80254a8:	f040 8109 	bne.w	80256be <mbedtls_gcm_starts+0x4f6>
      ( (uint64_t) add_len ) >> 61 != 0 )
 80254ac:	e9c4 8052 	strd	r8, r0, [r4, #328]	; 0x148
        return( ret );
    }

    ctx->add_len = add_len;
    p = add;
    while( add_len > 0 )
 80254b0:	f1b8 0f00 	cmp.w	r8, #0
 80254b4:	f000 8103 	beq.w	80256be <mbedtls_gcm_starts+0x4f6>
 80254b8:	f504 77ba 	add.w	r7, r4, #372	; 0x174
 80254bc:	e021      	b.n	8025502 <mbedtls_gcm_starts+0x33a>
    {
        use_len = ( add_len < 16 ) ? add_len : 16;

        for( i = 0; i < use_len; i++ )
            ctx->buf[i] ^= p[i];
 80254be:	6873      	ldr	r3, [r6, #4]
 80254c0:	f8d4 1174 	ldr.w	r1, [r4, #372]	; 0x174
 80254c4:	2a02      	cmp	r2, #2
 80254c6:	ea83 0301 	eor.w	r3, r3, r1
 80254ca:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
        for( i = 0; i < use_len; i++ )
 80254ce:	d02d      	beq.n	802552c <mbedtls_gcm_starts+0x364>
            ctx->buf[i] ^= p[i];
 80254d0:	68b3      	ldr	r3, [r6, #8]
 80254d2:	f8d4 1178 	ldr.w	r1, [r4, #376]	; 0x178
 80254d6:	2a04      	cmp	r2, #4
 80254d8:	ea83 0301 	eor.w	r3, r3, r1
 80254dc:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
        for( i = 0; i < use_len; i++ )
 80254e0:	d124      	bne.n	802552c <mbedtls_gcm_starts+0x364>
            ctx->buf[i] ^= p[i];
 80254e2:	68f3      	ldr	r3, [r6, #12]
 80254e4:	f8d4 217c 	ldr.w	r2, [r4, #380]	; 0x17c
 80254e8:	4053      	eors	r3, r2
 80254ea:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c

        gcm_mult( ctx, ctx->buf, ctx->buf );
 80254ee:	464a      	mov	r2, r9
 80254f0:	4649      	mov	r1, r9
 80254f2:	4620      	mov	r0, r4
 80254f4:	f7ff fc80 	bl	8024df8 <gcm_mult>
    while( add_len > 0 )
 80254f8:	ebb8 0805 	subs.w	r8, r8, r5

        add_len -= use_len;
        p += use_len;
 80254fc:	442e      	add	r6, r5
    while( add_len > 0 )
 80254fe:	f000 80de 	beq.w	80256be <mbedtls_gcm_starts+0x4f6>
        use_len = ( add_len < 16 ) ? add_len : 16;
 8025502:	4645      	mov	r5, r8
 8025504:	1d33      	adds	r3, r6, #4
 8025506:	2d10      	cmp	r5, #16
 8025508:	bf28      	it	cs
 802550a:	2510      	movcs	r5, #16
        for( i = 0; i < use_len; i++ )
 802550c:	42be      	cmp	r6, r7
 802550e:	bf38      	it	cc
 8025510:	4599      	cmpcc	r9, r3
 8025512:	d32c      	bcc.n	802556e <mbedtls_gcm_starts+0x3a6>
 8025514:	1e6b      	subs	r3, r5, #1
 8025516:	2b04      	cmp	r3, #4
 8025518:	d929      	bls.n	802556e <mbedtls_gcm_starts+0x3a6>
            ctx->buf[i] ^= p[i];
 802551a:	6833      	ldr	r3, [r6, #0]
 802551c:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
 8025520:	08aa      	lsrs	r2, r5, #2
 8025522:	404b      	eors	r3, r1
 8025524:	2a01      	cmp	r2, #1
 8025526:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
        for( i = 0; i < use_len; i++ )
 802552a:	d1c8      	bne.n	80254be <mbedtls_gcm_starts+0x2f6>
 802552c:	07aa      	lsls	r2, r5, #30
 802552e:	f025 0303 	bic.w	r3, r5, #3
 8025532:	d0dc      	beq.n	80254ee <mbedtls_gcm_starts+0x326>
            ctx->buf[i] ^= p[i];
 8025534:	18e0      	adds	r0, r4, r3
 8025536:	f890 c170 	ldrb.w	ip, [r0, #368]	; 0x170
 802553a:	5cf2      	ldrb	r2, [r6, r3]
        for( i = 0; i < use_len; i++ )
 802553c:	1c59      	adds	r1, r3, #1
            ctx->buf[i] ^= p[i];
 802553e:	ea82 020c 	eor.w	r2, r2, ip
        for( i = 0; i < use_len; i++ )
 8025542:	428d      	cmp	r5, r1
            ctx->buf[i] ^= p[i];
 8025544:	f880 2170 	strb.w	r2, [r0, #368]	; 0x170
        for( i = 0; i < use_len; i++ )
 8025548:	d9d1      	bls.n	80254ee <mbedtls_gcm_starts+0x326>
            ctx->buf[i] ^= p[i];
 802554a:	1860      	adds	r0, r4, r1
 802554c:	5c72      	ldrb	r2, [r6, r1]
 802554e:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
        for( i = 0; i < use_len; i++ )
 8025552:	3302      	adds	r3, #2
            ctx->buf[i] ^= p[i];
 8025554:	404a      	eors	r2, r1
        for( i = 0; i < use_len; i++ )
 8025556:	429d      	cmp	r5, r3
            ctx->buf[i] ^= p[i];
 8025558:	f880 2170 	strb.w	r2, [r0, #368]	; 0x170
        for( i = 0; i < use_len; i++ )
 802555c:	d9c7      	bls.n	80254ee <mbedtls_gcm_starts+0x326>
            ctx->buf[i] ^= p[i];
 802555e:	18e2      	adds	r2, r4, r3
 8025560:	f892 1170 	ldrb.w	r1, [r2, #368]	; 0x170
 8025564:	5cf3      	ldrb	r3, [r6, r3]
 8025566:	404b      	eors	r3, r1
 8025568:	f882 3170 	strb.w	r3, [r2, #368]	; 0x170
        for( i = 0; i < use_len; i++ )
 802556c:	e7bf      	b.n	80254ee <mbedtls_gcm_starts+0x326>
            ctx->buf[i] ^= p[i];
 802556e:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
 8025572:	7832      	ldrb	r2, [r6, #0]
        for( i = 0; i < use_len; i++ )
 8025574:	f1b8 0f01 	cmp.w	r8, #1
            ctx->buf[i] ^= p[i];
 8025578:	ea83 0302 	eor.w	r3, r3, r2
 802557c:	f884 3170 	strb.w	r3, [r4, #368]	; 0x170
        for( i = 0; i < use_len; i++ )
 8025580:	d0b5      	beq.n	80254ee <mbedtls_gcm_starts+0x326>
            ctx->buf[i] ^= p[i];
 8025582:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
 8025586:	7872      	ldrb	r2, [r6, #1]
        for( i = 0; i < use_len; i++ )
 8025588:	f1b8 0f02 	cmp.w	r8, #2
            ctx->buf[i] ^= p[i];
 802558c:	ea83 0302 	eor.w	r3, r3, r2
 8025590:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
        for( i = 0; i < use_len; i++ )
 8025594:	d0ab      	beq.n	80254ee <mbedtls_gcm_starts+0x326>
            ctx->buf[i] ^= p[i];
 8025596:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
 802559a:	78b2      	ldrb	r2, [r6, #2]
        for( i = 0; i < use_len; i++ )
 802559c:	f1b8 0f03 	cmp.w	r8, #3
            ctx->buf[i] ^= p[i];
 80255a0:	ea83 0302 	eor.w	r3, r3, r2
 80255a4:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
        for( i = 0; i < use_len; i++ )
 80255a8:	d0a1      	beq.n	80254ee <mbedtls_gcm_starts+0x326>
            ctx->buf[i] ^= p[i];
 80255aa:	f894 3173 	ldrb.w	r3, [r4, #371]	; 0x173
 80255ae:	78f2      	ldrb	r2, [r6, #3]
        for( i = 0; i < use_len; i++ )
 80255b0:	f1b8 0f04 	cmp.w	r8, #4
            ctx->buf[i] ^= p[i];
 80255b4:	ea83 0302 	eor.w	r3, r3, r2
 80255b8:	f884 3173 	strb.w	r3, [r4, #371]	; 0x173
        for( i = 0; i < use_len; i++ )
 80255bc:	d097      	beq.n	80254ee <mbedtls_gcm_starts+0x326>
            ctx->buf[i] ^= p[i];
 80255be:	f894 3174 	ldrb.w	r3, [r4, #372]	; 0x174
 80255c2:	7932      	ldrb	r2, [r6, #4]
        for( i = 0; i < use_len; i++ )
 80255c4:	f1b8 0f05 	cmp.w	r8, #5
            ctx->buf[i] ^= p[i];
 80255c8:	ea83 0302 	eor.w	r3, r3, r2
 80255cc:	f884 3174 	strb.w	r3, [r4, #372]	; 0x174
        for( i = 0; i < use_len; i++ )
 80255d0:	d08d      	beq.n	80254ee <mbedtls_gcm_starts+0x326>
            ctx->buf[i] ^= p[i];
 80255d2:	f894 3175 	ldrb.w	r3, [r4, #373]	; 0x175
 80255d6:	7972      	ldrb	r2, [r6, #5]
        for( i = 0; i < use_len; i++ )
 80255d8:	f1b8 0f06 	cmp.w	r8, #6
            ctx->buf[i] ^= p[i];
 80255dc:	ea83 0302 	eor.w	r3, r3, r2
 80255e0:	f884 3175 	strb.w	r3, [r4, #373]	; 0x175
        for( i = 0; i < use_len; i++ )
 80255e4:	d083      	beq.n	80254ee <mbedtls_gcm_starts+0x326>
            ctx->buf[i] ^= p[i];
 80255e6:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
 80255ea:	79b2      	ldrb	r2, [r6, #6]
        for( i = 0; i < use_len; i++ )
 80255ec:	f1b8 0f07 	cmp.w	r8, #7
            ctx->buf[i] ^= p[i];
 80255f0:	ea83 0302 	eor.w	r3, r3, r2
 80255f4:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
        for( i = 0; i < use_len; i++ )
 80255f8:	f43f af79 	beq.w	80254ee <mbedtls_gcm_starts+0x326>
            ctx->buf[i] ^= p[i];
 80255fc:	f894 3177 	ldrb.w	r3, [r4, #375]	; 0x177
 8025600:	79f2      	ldrb	r2, [r6, #7]
        for( i = 0; i < use_len; i++ )
 8025602:	f1b8 0f08 	cmp.w	r8, #8
            ctx->buf[i] ^= p[i];
 8025606:	ea83 0302 	eor.w	r3, r3, r2
 802560a:	f884 3177 	strb.w	r3, [r4, #375]	; 0x177
        for( i = 0; i < use_len; i++ )
 802560e:	f43f af6e 	beq.w	80254ee <mbedtls_gcm_starts+0x326>
            ctx->buf[i] ^= p[i];
 8025612:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
 8025616:	7a32      	ldrb	r2, [r6, #8]
        for( i = 0; i < use_len; i++ )
 8025618:	f1b8 0f09 	cmp.w	r8, #9
            ctx->buf[i] ^= p[i];
 802561c:	ea83 0302 	eor.w	r3, r3, r2
 8025620:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
        for( i = 0; i < use_len; i++ )
 8025624:	f43f af63 	beq.w	80254ee <mbedtls_gcm_starts+0x326>
            ctx->buf[i] ^= p[i];
 8025628:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
 802562c:	7a72      	ldrb	r2, [r6, #9]
        for( i = 0; i < use_len; i++ )
 802562e:	f1b8 0f0a 	cmp.w	r8, #10
            ctx->buf[i] ^= p[i];
 8025632:	ea83 0302 	eor.w	r3, r3, r2
 8025636:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
        for( i = 0; i < use_len; i++ )
 802563a:	f43f af58 	beq.w	80254ee <mbedtls_gcm_starts+0x326>
            ctx->buf[i] ^= p[i];
 802563e:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
 8025642:	7ab2      	ldrb	r2, [r6, #10]
        for( i = 0; i < use_len; i++ )
 8025644:	f1b8 0f0b 	cmp.w	r8, #11
            ctx->buf[i] ^= p[i];
 8025648:	ea83 0302 	eor.w	r3, r3, r2
 802564c:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
        for( i = 0; i < use_len; i++ )
 8025650:	f43f af4d 	beq.w	80254ee <mbedtls_gcm_starts+0x326>
            ctx->buf[i] ^= p[i];
 8025654:	f894 317b 	ldrb.w	r3, [r4, #379]	; 0x17b
 8025658:	7af2      	ldrb	r2, [r6, #11]
        for( i = 0; i < use_len; i++ )
 802565a:	f1b8 0f0c 	cmp.w	r8, #12
            ctx->buf[i] ^= p[i];
 802565e:	ea83 0302 	eor.w	r3, r3, r2
 8025662:	f884 317b 	strb.w	r3, [r4, #379]	; 0x17b
        for( i = 0; i < use_len; i++ )
 8025666:	f43f af42 	beq.w	80254ee <mbedtls_gcm_starts+0x326>
            ctx->buf[i] ^= p[i];
 802566a:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
 802566e:	7b32      	ldrb	r2, [r6, #12]
        for( i = 0; i < use_len; i++ )
 8025670:	f1b8 0f0d 	cmp.w	r8, #13
            ctx->buf[i] ^= p[i];
 8025674:	ea83 0302 	eor.w	r3, r3, r2
 8025678:	f884 317c 	strb.w	r3, [r4, #380]	; 0x17c
        for( i = 0; i < use_len; i++ )
 802567c:	f43f af37 	beq.w	80254ee <mbedtls_gcm_starts+0x326>
            ctx->buf[i] ^= p[i];
 8025680:	f894 317d 	ldrb.w	r3, [r4, #381]	; 0x17d
 8025684:	7b72      	ldrb	r2, [r6, #13]
        for( i = 0; i < use_len; i++ )
 8025686:	f1b8 0f0e 	cmp.w	r8, #14
            ctx->buf[i] ^= p[i];
 802568a:	ea83 0302 	eor.w	r3, r3, r2
 802568e:	f884 317d 	strb.w	r3, [r4, #381]	; 0x17d
        for( i = 0; i < use_len; i++ )
 8025692:	f43f af2c 	beq.w	80254ee <mbedtls_gcm_starts+0x326>
            ctx->buf[i] ^= p[i];
 8025696:	f894 317e 	ldrb.w	r3, [r4, #382]	; 0x17e
 802569a:	7bb2      	ldrb	r2, [r6, #14]
        for( i = 0; i < use_len; i++ )
 802569c:	f1b8 0f0f 	cmp.w	r8, #15
            ctx->buf[i] ^= p[i];
 80256a0:	ea83 0302 	eor.w	r3, r3, r2
 80256a4:	f884 317e 	strb.w	r3, [r4, #382]	; 0x17e
        for( i = 0; i < use_len; i++ )
 80256a8:	f67f af21 	bls.w	80254ee <mbedtls_gcm_starts+0x326>
            ctx->buf[i] ^= p[i];
 80256ac:	7bf3      	ldrb	r3, [r6, #15]
 80256ae:	f894 217f 	ldrb.w	r2, [r4, #383]	; 0x17f
 80256b2:	4053      	eors	r3, r2
 80256b4:	f884 317f 	strb.w	r3, [r4, #383]	; 0x17f
        for( i = 0; i < use_len; i++ )
 80256b8:	e719      	b.n	80254ee <mbedtls_gcm_starts+0x326>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80256ba:	f06f 0a13 	mvn.w	sl, #19
    }

    return( 0 );
}
 80256be:	4650      	mov	r0, sl
 80256c0:	b00b      	add	sp, #44	; 0x2c
 80256c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ctx->y[15] = 1;
 80256c6:	2301      	movs	r3, #1
        memcpy( ctx->y, iv, iv_len );
 80256c8:	6810      	ldr	r0, [r2, #0]
 80256ca:	6851      	ldr	r1, [r2, #4]
 80256cc:	6892      	ldr	r2, [r2, #8]
 80256ce:	f8c4 0160 	str.w	r0, [r4, #352]	; 0x160
 80256d2:	f8ca 1004 	str.w	r1, [sl, #4]
 80256d6:	f8ca 2008 	str.w	r2, [sl, #8]
        ctx->y[15] = 1;
 80256da:	f884 316f 	strb.w	r3, [r4, #367]	; 0x16f
 80256de:	e6d8      	b.n	8025492 <mbedtls_gcm_starts+0x2ca>

080256e0 <mbedtls_gcm_update>:

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 80256e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80256e4:	4698      	mov	r8, r3
 80256e6:	ed2d 8b02 	vpush	{d8}
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
 80256ea:	2300      	movs	r3, #0
{
 80256ec:	b089      	sub	sp, #36	; 0x24

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( output > input && (size_t) ( output - input ) < length )
 80256ee:	4590      	cmp	r8, r2
{
 80256f0:	4691      	mov	r9, r2
 80256f2:	4604      	mov	r4, r0
 80256f4:	460d      	mov	r5, r1
    size_t use_len, olen = 0;
 80256f6:	9303      	str	r3, [sp, #12]
    if( output > input && (size_t) ( output - input ) < length )
 80256f8:	d903      	bls.n	8025702 <mbedtls_gcm_update+0x22>
 80256fa:	eba8 0302 	sub.w	r3, r8, r2
 80256fe:	428b      	cmp	r3, r1
 8025700:	d37b      	bcc.n	80257fa <mbedtls_gcm_update+0x11a>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if( ctx->len + length < ctx->len ||
 8025702:	e9d4 ab50 	ldrd	sl, fp, [r4, #320]	; 0x140
 8025706:	2300      	movs	r3, #0
 8025708:	eb1a 0005 	adds.w	r0, sl, r5
 802570c:	eb5b 0103 	adcs.w	r1, fp, r3
 8025710:	f04f 0600 	mov.w	r6, #0
 8025714:	f04f 0700 	mov.w	r7, #0
 8025718:	bf24      	itt	cs
 802571a:	2601      	movcs	r6, #1
 802571c:	2700      	movcs	r7, #0
 802571e:	ea56 0307 	orrs.w	r3, r6, r7
 8025722:	d16a      	bne.n	80257fa <mbedtls_gcm_update+0x11a>
 8025724:	230f      	movs	r3, #15
 8025726:	f06f 021f 	mvn.w	r2, #31
 802572a:	428b      	cmp	r3, r1
 802572c:	bf08      	it	eq
 802572e:	4282      	cmpeq	r2, r0
 8025730:	d363      	bcc.n	80257fa <mbedtls_gcm_update+0x11a>
        (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    ctx->len += length;
 8025732:	e9c4 0150 	strd	r0, r1, [r4, #320]	; 0x140

    p = input;
    while( length > 0 )
 8025736:	2d00      	cmp	r5, #0
 8025738:	d059      	beq.n	80257ee <mbedtls_gcm_update+0x10e>
 802573a:	f504 73b0 	add.w	r3, r4, #352	; 0x160
 802573e:	ee08 3a10 	vmov	s16, r3
 8025742:	f504 77b8 	add.w	r7, r4, #368	; 0x170
    {
        use_len = ( length < 16 ) ? length : 16;

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
 8025746:	f894 316f 	ldrb.w	r3, [r4, #367]	; 0x16f
        use_len = ( length < 16 ) ? length : 16;
 802574a:	2d10      	cmp	r5, #16
            if( ++ctx->y[i - 1] != 0 )
 802574c:	f103 0301 	add.w	r3, r3, #1
 8025750:	b2db      	uxtb	r3, r3
        use_len = ( length < 16 ) ? length : 16;
 8025752:	462e      	mov	r6, r5
            if( ++ctx->y[i - 1] != 0 )
 8025754:	f884 316f 	strb.w	r3, [r4, #367]	; 0x16f
        use_len = ( length < 16 ) ? length : 16;
 8025758:	bf28      	it	cs
 802575a:	2610      	movcs	r6, #16
            if( ++ctx->y[i - 1] != 0 )
 802575c:	b993      	cbnz	r3, 8025784 <mbedtls_gcm_update+0xa4>
 802575e:	f894 316e 	ldrb.w	r3, [r4, #366]	; 0x16e
 8025762:	3301      	adds	r3, #1
 8025764:	b2db      	uxtb	r3, r3
 8025766:	f884 316e 	strb.w	r3, [r4, #366]	; 0x16e
 802576a:	b95b      	cbnz	r3, 8025784 <mbedtls_gcm_update+0xa4>
 802576c:	f894 316d 	ldrb.w	r3, [r4, #365]	; 0x16d
 8025770:	3301      	adds	r3, #1
 8025772:	b2db      	uxtb	r3, r3
 8025774:	f884 316d 	strb.w	r3, [r4, #365]	; 0x16d
 8025778:	b923      	cbnz	r3, 8025784 <mbedtls_gcm_update+0xa4>
 802577a:	f894 316c 	ldrb.w	r3, [r4, #364]	; 0x16c
 802577e:	3301      	adds	r3, #1
 8025780:	f884 316c 	strb.w	r3, [r4, #364]	; 0x16c
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 8025784:	ab03      	add	r3, sp, #12
 8025786:	9300      	str	r3, [sp, #0]
 8025788:	2210      	movs	r2, #16
 802578a:	ee18 1a10 	vmov	r1, s16
 802578e:	4620      	mov	r0, r4
 8025790:	ab04      	add	r3, sp, #16
 8025792:	f7fe fb71 	bl	8023e78 <mbedtls_cipher_update>
 8025796:	bb58      	cbnz	r0, 80257f0 <mbedtls_gcm_update+0x110>
 8025798:	463a      	mov	r2, r7
 802579a:	4649      	mov	r1, r9
 802579c:	f8d4 0180 	ldr.w	r0, [r4, #384]	; 0x180
 80257a0:	f10d 0e10 	add.w	lr, sp, #16
 80257a4:	f108 3cff 	add.w	ip, r8, #4294967295
 80257a8:	eb07 0a06 	add.w	sl, r7, r6
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
 80257ac:	b918      	cbnz	r0, 80257b6 <mbedtls_gcm_update+0xd6>
                ctx->buf[i] ^= p[i];
 80257ae:	7813      	ldrb	r3, [r2, #0]
 80257b0:	7808      	ldrb	r0, [r1, #0]
 80257b2:	4043      	eors	r3, r0
 80257b4:	7013      	strb	r3, [r2, #0]
            out_p[i] = ectr[i] ^ p[i];
 80257b6:	7808      	ldrb	r0, [r1, #0]
 80257b8:	f81e 3b01 	ldrb.w	r3, [lr], #1
 80257bc:	3101      	adds	r1, #1
 80257be:	4043      	eors	r3, r0
 80257c0:	f80c 3f01 	strb.w	r3, [ip, #1]!
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 80257c4:	f8d4 0180 	ldr.w	r0, [r4, #384]	; 0x180
 80257c8:	2801      	cmp	r0, #1
 80257ca:	d104      	bne.n	80257d6 <mbedtls_gcm_update+0xf6>
                ctx->buf[i] ^= out_p[i];
 80257cc:	f892 b000 	ldrb.w	fp, [r2]
 80257d0:	ea83 030b 	eor.w	r3, r3, fp
 80257d4:	7013      	strb	r3, [r2, #0]
 80257d6:	3201      	adds	r2, #1
        for( i = 0; i < use_len; i++ )
 80257d8:	4592      	cmp	sl, r2
 80257da:	d1e7      	bne.n	80257ac <mbedtls_gcm_update+0xcc>
        }

        gcm_mult( ctx, ctx->buf, ctx->buf );
 80257dc:	463a      	mov	r2, r7
 80257de:	4639      	mov	r1, r7
 80257e0:	4620      	mov	r0, r4
 80257e2:	f7ff fb09 	bl	8024df8 <gcm_mult>
    while( length > 0 )
 80257e6:	1bad      	subs	r5, r5, r6

        length -= use_len;
        p += use_len;
 80257e8:	44b1      	add	r9, r6
        out_p += use_len;
 80257ea:	44b0      	add	r8, r6
    while( length > 0 )
 80257ec:	d1ab      	bne.n	8025746 <mbedtls_gcm_update+0x66>
    }

    return( 0 );
 80257ee:	2000      	movs	r0, #0
}
 80257f0:	b009      	add	sp, #36	; 0x24
 80257f2:	ecbd 8b02 	vpop	{d8}
 80257f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80257fa:	f06f 0013 	mvn.w	r0, #19
 80257fe:	e7f7      	b.n	80257f0 <mbedtls_gcm_update+0x110>

08025800 <mbedtls_gcm_finish>:

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 8025800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025804:	4604      	mov	r4, r0
    uint64_t orig_add_len;

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    orig_len = ctx->len * 8;
 8025806:	f8d0 6144 	ldr.w	r6, [r0, #324]	; 0x144
    orig_add_len = ctx->add_len * 8;
 802580a:	f8d0 714c 	ldr.w	r7, [r0, #332]	; 0x14c
 802580e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    orig_len = ctx->len * 8;
 8025812:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140

    if( tag_len > 16 || tag_len < 4 )
 8025816:	f1a2 0c04 	sub.w	ip, r2, #4
    orig_len = ctx->len * 8;
 802581a:	00f6      	lsls	r6, r6, #3
    orig_add_len = ctx->add_len * 8;
 802581c:	00ff      	lsls	r7, r7, #3
    if( tag_len > 16 || tag_len < 4 )
 802581e:	f1bc 0f0c 	cmp.w	ip, #12
{
 8025822:	b084      	sub	sp, #16
    orig_len = ctx->len * 8;
 8025824:	ea46 7650 	orr.w	r6, r6, r0, lsr #29
    orig_add_len = ctx->add_len * 8;
 8025828:	ea47 7753 	orr.w	r7, r7, r3, lsr #29
    if( tag_len > 16 || tag_len < 4 )
 802582c:	f200 8123 	bhi.w	8025a76 <mbedtls_gcm_finish+0x276>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    memcpy( tag, ctx->base_ectr, tag_len );
 8025830:	460d      	mov	r5, r1
 8025832:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8025836:	ea4f 08c0 	mov.w	r8, r0, lsl #3
 802583a:	f504 71a8 	add.w	r1, r4, #336	; 0x150
 802583e:	4628      	mov	r0, r5
 8025840:	4692      	mov	sl, r2
 8025842:	f00a fae9 	bl	802fe18 <memcpy>

    if( orig_len || orig_add_len )
 8025846:	ea48 0209 	orr.w	r2, r8, r9
 802584a:	ea46 0307 	orr.w	r3, r6, r7
 802584e:	4313      	orrs	r3, r2
 8025850:	d06a      	beq.n	8025928 <mbedtls_gcm_finish+0x128>
    {
        memset( work_buf, 0x00, 16 );

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 8025852:	f04f 0c00 	mov.w	ip, #0
 8025856:	4663      	mov	r3, ip
 8025858:	0e3a      	lsrs	r2, r7, #24
 802585a:	f362 0c07 	bfi	ip, r2, #0, #8
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 802585e:	0e32      	lsrs	r2, r6, #24
 8025860:	f362 0307 	bfi	r3, r2, #0, #8
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 8025864:	0c3a      	lsrs	r2, r7, #16
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
            ctx->buf[i] ^= work_buf[i];
 8025866:	f8d4 0174 	ldr.w	r0, [r4, #372]	; 0x174
 802586a:	f362 2c0f 	bfi	ip, r2, #8, #8
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 802586e:	0c32      	lsrs	r2, r6, #16
 8025870:	f362 230f 	bfi	r3, r2, #8, #8
 8025874:	fa99 f989 	rev.w	r9, r9
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 8025878:	0a3a      	lsrs	r2, r7, #8
 802587a:	f362 4c17 	bfi	ip, r2, #16, #8
            ctx->buf[i] ^= work_buf[i];
 802587e:	ea89 0000 	eor.w	r0, r9, r0
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 8025882:	0a32      	lsrs	r2, r6, #8
            ctx->buf[i] ^= work_buf[i];
 8025884:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8025888:	f362 4317 	bfi	r3, r2, #16, #8
 802588c:	f8c4 0174 	str.w	r0, [r4, #372]	; 0x174
 8025890:	f8d4 2170 	ldr.w	r2, [r4, #368]	; 0x170
 8025894:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
 8025898:	f366 631f 	bfi	r3, r6, #24, #8
 802589c:	f367 6c1f 	bfi	ip, r7, #24, #8
 80258a0:	fa98 f888 	rev.w	r8, r8
 80258a4:	4058      	eors	r0, r3
 80258a6:	ea8c 0202 	eor.w	r2, ip, r2

        gcm_mult( ctx, ctx->buf, ctx->buf );
 80258aa:	f504 76b8 	add.w	r6, r4, #368	; 0x170
            ctx->buf[i] ^= work_buf[i];
 80258ae:	ea88 0101 	eor.w	r1, r8, r1
 80258b2:	f8c4 117c 	str.w	r1, [r4, #380]	; 0x17c
 80258b6:	f8c4 2170 	str.w	r2, [r4, #368]	; 0x170
 80258ba:	f8c4 0178 	str.w	r0, [r4, #376]	; 0x178
        gcm_mult( ctx, ctx->buf, ctx->buf );
 80258be:	4632      	mov	r2, r6
 80258c0:	4631      	mov	r1, r6
 80258c2:	4620      	mov	r0, r4
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 80258c4:	9302      	str	r3, [sp, #8]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 80258c6:	f8cd 9004 	str.w	r9, [sp, #4]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
 80258ca:	f8cd 800c 	str.w	r8, [sp, #12]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 80258ce:	f8cd c000 	str.w	ip, [sp]
        gcm_mult( ctx, ctx->buf, ctx->buf );
 80258d2:	f7ff fa91 	bl	8024df8 <gcm_mult>

        for( i = 0; i < tag_len; i++ )
 80258d6:	1d2b      	adds	r3, r5, #4
 80258d8:	f504 72ba 	add.w	r2, r4, #372	; 0x174
 80258dc:	42aa      	cmp	r2, r5
 80258de:	bf88      	it	hi
 80258e0:	42b3      	cmphi	r3, r6
 80258e2:	d843      	bhi.n	802596c <mbedtls_gcm_finish+0x16c>
 80258e4:	f10a 33ff 	add.w	r3, sl, #4294967295
 80258e8:	2b04      	cmp	r3, #4
 80258ea:	d93f      	bls.n	802596c <mbedtls_gcm_finish+0x16c>
            tag[i] ^= ctx->buf[i];
 80258ec:	682b      	ldr	r3, [r5, #0]
 80258ee:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
 80258f2:	ea4f 029a 	mov.w	r2, sl, lsr #2
 80258f6:	404b      	eors	r3, r1
 80258f8:	2a01      	cmp	r2, #1
 80258fa:	602b      	str	r3, [r5, #0]
        for( i = 0; i < tag_len; i++ )
 80258fc:	d018      	beq.n	8025930 <mbedtls_gcm_finish+0x130>
            tag[i] ^= ctx->buf[i];
 80258fe:	686b      	ldr	r3, [r5, #4]
 8025900:	f8d4 1174 	ldr.w	r1, [r4, #372]	; 0x174
 8025904:	2a02      	cmp	r2, #2
 8025906:	ea83 0301 	eor.w	r3, r3, r1
 802590a:	606b      	str	r3, [r5, #4]
        for( i = 0; i < tag_len; i++ )
 802590c:	d010      	beq.n	8025930 <mbedtls_gcm_finish+0x130>
            tag[i] ^= ctx->buf[i];
 802590e:	68ab      	ldr	r3, [r5, #8]
 8025910:	f8d4 1178 	ldr.w	r1, [r4, #376]	; 0x178
 8025914:	2a04      	cmp	r2, #4
 8025916:	ea83 0301 	eor.w	r3, r3, r1
 802591a:	60ab      	str	r3, [r5, #8]
        for( i = 0; i < tag_len; i++ )
 802591c:	d108      	bne.n	8025930 <mbedtls_gcm_finish+0x130>
            tag[i] ^= ctx->buf[i];
 802591e:	f8d4 217c 	ldr.w	r2, [r4, #380]	; 0x17c
 8025922:	68eb      	ldr	r3, [r5, #12]
 8025924:	4053      	eors	r3, r2
 8025926:	60eb      	str	r3, [r5, #12]
    }

    return( 0 );
 8025928:	2000      	movs	r0, #0
}
 802592a:	b004      	add	sp, #16
 802592c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025930:	f01a 0f03 	tst.w	sl, #3
 8025934:	f02a 0303 	bic.w	r3, sl, #3
 8025938:	d0f6      	beq.n	8025928 <mbedtls_gcm_finish+0x128>
            tag[i] ^= ctx->buf[i];
 802593a:	18e2      	adds	r2, r4, r3
 802593c:	f892 0170 	ldrb.w	r0, [r2, #368]	; 0x170
 8025940:	5ce9      	ldrb	r1, [r5, r3]
        for( i = 0; i < tag_len; i++ )
 8025942:	1c5a      	adds	r2, r3, #1
            tag[i] ^= ctx->buf[i];
 8025944:	4041      	eors	r1, r0
        for( i = 0; i < tag_len; i++ )
 8025946:	4592      	cmp	sl, r2
            tag[i] ^= ctx->buf[i];
 8025948:	54e9      	strb	r1, [r5, r3]
        for( i = 0; i < tag_len; i++ )
 802594a:	d9ed      	bls.n	8025928 <mbedtls_gcm_finish+0x128>
            tag[i] ^= ctx->buf[i];
 802594c:	18a1      	adds	r1, r4, r2
 802594e:	f891 0170 	ldrb.w	r0, [r1, #368]	; 0x170
 8025952:	5ca9      	ldrb	r1, [r5, r2]
        for( i = 0; i < tag_len; i++ )
 8025954:	3302      	adds	r3, #2
            tag[i] ^= ctx->buf[i];
 8025956:	4041      	eors	r1, r0
        for( i = 0; i < tag_len; i++ )
 8025958:	459a      	cmp	sl, r3
            tag[i] ^= ctx->buf[i];
 802595a:	54a9      	strb	r1, [r5, r2]
        for( i = 0; i < tag_len; i++ )
 802595c:	d9e4      	bls.n	8025928 <mbedtls_gcm_finish+0x128>
            tag[i] ^= ctx->buf[i];
 802595e:	441c      	add	r4, r3
 8025960:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
 8025964:	5cea      	ldrb	r2, [r5, r3]
 8025966:	404a      	eors	r2, r1
 8025968:	54ea      	strb	r2, [r5, r3]
        for( i = 0; i < tag_len; i++ )
 802596a:	e7dd      	b.n	8025928 <mbedtls_gcm_finish+0x128>
            tag[i] ^= ctx->buf[i];
 802596c:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
 8025970:	782a      	ldrb	r2, [r5, #0]
 8025972:	786b      	ldrb	r3, [r5, #1]
 8025974:	404a      	eors	r2, r1
 8025976:	702a      	strb	r2, [r5, #0]
 8025978:	f894 1171 	ldrb.w	r1, [r4, #369]	; 0x171
 802597c:	78aa      	ldrb	r2, [r5, #2]
 802597e:	404b      	eors	r3, r1
 8025980:	706b      	strb	r3, [r5, #1]
 8025982:	f894 1172 	ldrb.w	r1, [r4, #370]	; 0x172
 8025986:	78eb      	ldrb	r3, [r5, #3]
 8025988:	404a      	eors	r2, r1
 802598a:	70aa      	strb	r2, [r5, #2]
 802598c:	f894 2173 	ldrb.w	r2, [r4, #371]	; 0x173
        for( i = 0; i < tag_len; i++ )
 8025990:	f1ba 0f04 	cmp.w	sl, #4
            tag[i] ^= ctx->buf[i];
 8025994:	ea83 0302 	eor.w	r3, r3, r2
 8025998:	70eb      	strb	r3, [r5, #3]
        for( i = 0; i < tag_len; i++ )
 802599a:	d0c5      	beq.n	8025928 <mbedtls_gcm_finish+0x128>
            tag[i] ^= ctx->buf[i];
 802599c:	792b      	ldrb	r3, [r5, #4]
 802599e:	f894 2174 	ldrb.w	r2, [r4, #372]	; 0x174
        for( i = 0; i < tag_len; i++ )
 80259a2:	f1ba 0f05 	cmp.w	sl, #5
            tag[i] ^= ctx->buf[i];
 80259a6:	ea83 0302 	eor.w	r3, r3, r2
 80259aa:	712b      	strb	r3, [r5, #4]
        for( i = 0; i < tag_len; i++ )
 80259ac:	d0bc      	beq.n	8025928 <mbedtls_gcm_finish+0x128>
            tag[i] ^= ctx->buf[i];
 80259ae:	796b      	ldrb	r3, [r5, #5]
 80259b0:	f894 2175 	ldrb.w	r2, [r4, #373]	; 0x175
        for( i = 0; i < tag_len; i++ )
 80259b4:	f1ba 0f06 	cmp.w	sl, #6
            tag[i] ^= ctx->buf[i];
 80259b8:	ea83 0302 	eor.w	r3, r3, r2
 80259bc:	716b      	strb	r3, [r5, #5]
        for( i = 0; i < tag_len; i++ )
 80259be:	d0b3      	beq.n	8025928 <mbedtls_gcm_finish+0x128>
            tag[i] ^= ctx->buf[i];
 80259c0:	79ab      	ldrb	r3, [r5, #6]
 80259c2:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
        for( i = 0; i < tag_len; i++ )
 80259c6:	f1ba 0f07 	cmp.w	sl, #7
            tag[i] ^= ctx->buf[i];
 80259ca:	ea83 0302 	eor.w	r3, r3, r2
 80259ce:	71ab      	strb	r3, [r5, #6]
        for( i = 0; i < tag_len; i++ )
 80259d0:	d0aa      	beq.n	8025928 <mbedtls_gcm_finish+0x128>
            tag[i] ^= ctx->buf[i];
 80259d2:	79eb      	ldrb	r3, [r5, #7]
 80259d4:	f894 2177 	ldrb.w	r2, [r4, #375]	; 0x177
        for( i = 0; i < tag_len; i++ )
 80259d8:	f1ba 0f08 	cmp.w	sl, #8
            tag[i] ^= ctx->buf[i];
 80259dc:	ea83 0302 	eor.w	r3, r3, r2
 80259e0:	71eb      	strb	r3, [r5, #7]
        for( i = 0; i < tag_len; i++ )
 80259e2:	d0a1      	beq.n	8025928 <mbedtls_gcm_finish+0x128>
            tag[i] ^= ctx->buf[i];
 80259e4:	7a2b      	ldrb	r3, [r5, #8]
 80259e6:	f894 2178 	ldrb.w	r2, [r4, #376]	; 0x178
        for( i = 0; i < tag_len; i++ )
 80259ea:	f1ba 0f09 	cmp.w	sl, #9
            tag[i] ^= ctx->buf[i];
 80259ee:	ea83 0302 	eor.w	r3, r3, r2
 80259f2:	722b      	strb	r3, [r5, #8]
        for( i = 0; i < tag_len; i++ )
 80259f4:	d098      	beq.n	8025928 <mbedtls_gcm_finish+0x128>
            tag[i] ^= ctx->buf[i];
 80259f6:	7a6b      	ldrb	r3, [r5, #9]
 80259f8:	f894 2179 	ldrb.w	r2, [r4, #377]	; 0x179
        for( i = 0; i < tag_len; i++ )
 80259fc:	f1ba 0f0a 	cmp.w	sl, #10
            tag[i] ^= ctx->buf[i];
 8025a00:	ea83 0302 	eor.w	r3, r3, r2
 8025a04:	726b      	strb	r3, [r5, #9]
        for( i = 0; i < tag_len; i++ )
 8025a06:	d08f      	beq.n	8025928 <mbedtls_gcm_finish+0x128>
            tag[i] ^= ctx->buf[i];
 8025a08:	7aab      	ldrb	r3, [r5, #10]
 8025a0a:	f894 217a 	ldrb.w	r2, [r4, #378]	; 0x17a
        for( i = 0; i < tag_len; i++ )
 8025a0e:	f1ba 0f0b 	cmp.w	sl, #11
            tag[i] ^= ctx->buf[i];
 8025a12:	ea83 0302 	eor.w	r3, r3, r2
 8025a16:	72ab      	strb	r3, [r5, #10]
        for( i = 0; i < tag_len; i++ )
 8025a18:	d086      	beq.n	8025928 <mbedtls_gcm_finish+0x128>
            tag[i] ^= ctx->buf[i];
 8025a1a:	7aeb      	ldrb	r3, [r5, #11]
 8025a1c:	f894 217b 	ldrb.w	r2, [r4, #379]	; 0x17b
        for( i = 0; i < tag_len; i++ )
 8025a20:	f1ba 0f0c 	cmp.w	sl, #12
            tag[i] ^= ctx->buf[i];
 8025a24:	ea83 0302 	eor.w	r3, r3, r2
 8025a28:	72eb      	strb	r3, [r5, #11]
        for( i = 0; i < tag_len; i++ )
 8025a2a:	f43f af7d 	beq.w	8025928 <mbedtls_gcm_finish+0x128>
            tag[i] ^= ctx->buf[i];
 8025a2e:	7b2b      	ldrb	r3, [r5, #12]
 8025a30:	f894 217c 	ldrb.w	r2, [r4, #380]	; 0x17c
        for( i = 0; i < tag_len; i++ )
 8025a34:	f1ba 0f0d 	cmp.w	sl, #13
            tag[i] ^= ctx->buf[i];
 8025a38:	ea83 0302 	eor.w	r3, r3, r2
 8025a3c:	732b      	strb	r3, [r5, #12]
        for( i = 0; i < tag_len; i++ )
 8025a3e:	f43f af73 	beq.w	8025928 <mbedtls_gcm_finish+0x128>
            tag[i] ^= ctx->buf[i];
 8025a42:	7b6b      	ldrb	r3, [r5, #13]
 8025a44:	f894 217d 	ldrb.w	r2, [r4, #381]	; 0x17d
        for( i = 0; i < tag_len; i++ )
 8025a48:	f1ba 0f0e 	cmp.w	sl, #14
            tag[i] ^= ctx->buf[i];
 8025a4c:	ea83 0302 	eor.w	r3, r3, r2
 8025a50:	736b      	strb	r3, [r5, #13]
        for( i = 0; i < tag_len; i++ )
 8025a52:	f43f af69 	beq.w	8025928 <mbedtls_gcm_finish+0x128>
            tag[i] ^= ctx->buf[i];
 8025a56:	7bab      	ldrb	r3, [r5, #14]
 8025a58:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
        for( i = 0; i < tag_len; i++ )
 8025a5c:	f1ba 0f10 	cmp.w	sl, #16
            tag[i] ^= ctx->buf[i];
 8025a60:	ea83 0302 	eor.w	r3, r3, r2
 8025a64:	73ab      	strb	r3, [r5, #14]
        for( i = 0; i < tag_len; i++ )
 8025a66:	f47f af5f 	bne.w	8025928 <mbedtls_gcm_finish+0x128>
            tag[i] ^= ctx->buf[i];
 8025a6a:	f894 217f 	ldrb.w	r2, [r4, #383]	; 0x17f
 8025a6e:	7beb      	ldrb	r3, [r5, #15]
 8025a70:	4053      	eors	r3, r2
 8025a72:	73eb      	strb	r3, [r5, #15]
        for( i = 0; i < tag_len; i++ )
 8025a74:	e758      	b.n	8025928 <mbedtls_gcm_finish+0x128>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8025a76:	f06f 0013 	mvn.w	r0, #19
 8025a7a:	e756      	b.n	802592a <mbedtls_gcm_finish+0x12a>

08025a7c <mbedtls_gcm_crypt_and_tag>:
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 8025a7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025a80:	b083      	sub	sp, #12
 8025a82:	e9dd 640b 	ldrd	r6, r4, [sp, #44]	; 0x2c
 8025a86:	4615      	mov	r5, r2
 8025a88:	e9dd 870f 	ldrd	r8, r7, [sp, #60]	; 0x3c
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 8025a8c:	e9cd 6400 	strd	r6, r4, [sp]
{
 8025a90:	e9dd 690d 	ldrd	r6, r9, [sp, #52]	; 0x34
    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 8025a94:	461a      	mov	r2, r3
 8025a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
 8025a98:	4604      	mov	r4, r0
    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 8025a9a:	f7ff fb95 	bl	80251c8 <mbedtls_gcm_starts>
 8025a9e:	b110      	cbz	r0, 8025aa6 <mbedtls_gcm_crypt_and_tag+0x2a>

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
        return( ret );

    return( 0 );
}
 8025aa0:	b003      	add	sp, #12
 8025aa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
 8025aa6:	464b      	mov	r3, r9
 8025aa8:	4632      	mov	r2, r6
 8025aaa:	4629      	mov	r1, r5
 8025aac:	4620      	mov	r0, r4
 8025aae:	f7ff fe17 	bl	80256e0 <mbedtls_gcm_update>
 8025ab2:	2800      	cmp	r0, #0
 8025ab4:	d1f4      	bne.n	8025aa0 <mbedtls_gcm_crypt_and_tag+0x24>
    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 8025ab6:	4642      	mov	r2, r8
 8025ab8:	4639      	mov	r1, r7
 8025aba:	4620      	mov	r0, r4
}
 8025abc:	b003      	add	sp, #12
 8025abe:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 8025ac2:	f7ff be9d 	b.w	8025800 <mbedtls_gcm_finish>
 8025ac6:	bf00      	nop

08025ac8 <mbedtls_gcm_auth_decrypt>:
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 8025ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025aca:	b087      	sub	sp, #28
 8025acc:	460e      	mov	r6, r1
 8025ace:	e9dd 510c 	ldrd	r5, r1, [sp, #48]	; 0x30
    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 8025ad2:	e9cd 5100 	strd	r5, r1, [sp]
{
 8025ad6:	e9dd 570e 	ldrd	r5, r7, [sp, #56]	; 0x38
    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 8025ada:	2100      	movs	r1, #0
{
 8025adc:	4604      	mov	r4, r0
    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 8025ade:	f7ff fb73 	bl	80251c8 <mbedtls_gcm_starts>
 8025ae2:	b108      	cbz	r0, 8025ae8 <mbedtls_gcm_auth_decrypt+0x20>
        mbedtls_platform_zeroize( output, length );
        return( MBEDTLS_ERR_GCM_AUTH_FAILED );
    }

    return( 0 );
}
 8025ae4:	b007      	add	sp, #28
 8025ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
 8025ae8:	4631      	mov	r1, r6
 8025aea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8025aee:	4620      	mov	r0, r4
 8025af0:	f7ff fdf6 	bl	80256e0 <mbedtls_gcm_update>
 8025af4:	2800      	cmp	r0, #0
 8025af6:	d1f5      	bne.n	8025ae4 <mbedtls_gcm_auth_decrypt+0x1c>
    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 8025af8:	4620      	mov	r0, r4
 8025afa:	463a      	mov	r2, r7
 8025afc:	a902      	add	r1, sp, #8
 8025afe:	f7ff fe7f 	bl	8025800 <mbedtls_gcm_finish>
 8025b02:	2800      	cmp	r0, #0
 8025b04:	d1ee      	bne.n	8025ae4 <mbedtls_gcm_auth_decrypt+0x1c>
    for( diff = 0, i = 0; i < tag_len; i++ )
 8025b06:	2f00      	cmp	r7, #0
 8025b08:	d0ec      	beq.n	8025ae4 <mbedtls_gcm_auth_decrypt+0x1c>
        diff |= tag[i] ^ check_tag[i];
 8025b0a:	782b      	ldrb	r3, [r5, #0]
 8025b0c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    for( diff = 0, i = 0; i < tag_len; i++ )
 8025b10:	2f01      	cmp	r7, #1
        diff |= tag[i] ^ check_tag[i];
 8025b12:	ea80 0003 	eor.w	r0, r0, r3
    for( diff = 0, i = 0; i < tag_len; i++ )
 8025b16:	f240 8083 	bls.w	8025c20 <mbedtls_gcm_auth_decrypt+0x158>
        diff |= tag[i] ^ check_tag[i];
 8025b1a:	786b      	ldrb	r3, [r5, #1]
 8025b1c:	f89d 2009 	ldrb.w	r2, [sp, #9]
    for( diff = 0, i = 0; i < tag_len; i++ )
 8025b20:	2f02      	cmp	r7, #2
        diff |= tag[i] ^ check_tag[i];
 8025b22:	ea83 0302 	eor.w	r3, r3, r2
 8025b26:	ea40 0003 	orr.w	r0, r0, r3
    for( diff = 0, i = 0; i < tag_len; i++ )
 8025b2a:	d079      	beq.n	8025c20 <mbedtls_gcm_auth_decrypt+0x158>
        diff |= tag[i] ^ check_tag[i];
 8025b2c:	78ab      	ldrb	r3, [r5, #2]
 8025b2e:	f89d 200a 	ldrb.w	r2, [sp, #10]
    for( diff = 0, i = 0; i < tag_len; i++ )
 8025b32:	2f03      	cmp	r7, #3
        diff |= tag[i] ^ check_tag[i];
 8025b34:	ea83 0302 	eor.w	r3, r3, r2
 8025b38:	ea40 0003 	orr.w	r0, r0, r3
    for( diff = 0, i = 0; i < tag_len; i++ )
 8025b3c:	d070      	beq.n	8025c20 <mbedtls_gcm_auth_decrypt+0x158>
        diff |= tag[i] ^ check_tag[i];
 8025b3e:	78eb      	ldrb	r3, [r5, #3]
 8025b40:	f89d 200b 	ldrb.w	r2, [sp, #11]
    for( diff = 0, i = 0; i < tag_len; i++ )
 8025b44:	2f04      	cmp	r7, #4
        diff |= tag[i] ^ check_tag[i];
 8025b46:	ea83 0302 	eor.w	r3, r3, r2
 8025b4a:	ea40 0003 	orr.w	r0, r0, r3
    for( diff = 0, i = 0; i < tag_len; i++ )
 8025b4e:	d067      	beq.n	8025c20 <mbedtls_gcm_auth_decrypt+0x158>
        diff |= tag[i] ^ check_tag[i];
 8025b50:	792b      	ldrb	r3, [r5, #4]
 8025b52:	f89d 200c 	ldrb.w	r2, [sp, #12]
    for( diff = 0, i = 0; i < tag_len; i++ )
 8025b56:	2f05      	cmp	r7, #5
        diff |= tag[i] ^ check_tag[i];
 8025b58:	ea83 0302 	eor.w	r3, r3, r2
 8025b5c:	ea40 0003 	orr.w	r0, r0, r3
    for( diff = 0, i = 0; i < tag_len; i++ )
 8025b60:	d05e      	beq.n	8025c20 <mbedtls_gcm_auth_decrypt+0x158>
        diff |= tag[i] ^ check_tag[i];
 8025b62:	796b      	ldrb	r3, [r5, #5]
 8025b64:	f89d 200d 	ldrb.w	r2, [sp, #13]
    for( diff = 0, i = 0; i < tag_len; i++ )
 8025b68:	2f06      	cmp	r7, #6
        diff |= tag[i] ^ check_tag[i];
 8025b6a:	ea83 0302 	eor.w	r3, r3, r2
 8025b6e:	ea40 0003 	orr.w	r0, r0, r3
    for( diff = 0, i = 0; i < tag_len; i++ )
 8025b72:	d055      	beq.n	8025c20 <mbedtls_gcm_auth_decrypt+0x158>
        diff |= tag[i] ^ check_tag[i];
 8025b74:	79ab      	ldrb	r3, [r5, #6]
 8025b76:	f89d 200e 	ldrb.w	r2, [sp, #14]
    for( diff = 0, i = 0; i < tag_len; i++ )
 8025b7a:	2f07      	cmp	r7, #7
        diff |= tag[i] ^ check_tag[i];
 8025b7c:	ea83 0302 	eor.w	r3, r3, r2
 8025b80:	ea40 0003 	orr.w	r0, r0, r3
    for( diff = 0, i = 0; i < tag_len; i++ )
 8025b84:	d04c      	beq.n	8025c20 <mbedtls_gcm_auth_decrypt+0x158>
        diff |= tag[i] ^ check_tag[i];
 8025b86:	79eb      	ldrb	r3, [r5, #7]
 8025b88:	f89d 200f 	ldrb.w	r2, [sp, #15]
    for( diff = 0, i = 0; i < tag_len; i++ )
 8025b8c:	2f08      	cmp	r7, #8
        diff |= tag[i] ^ check_tag[i];
 8025b8e:	ea83 0302 	eor.w	r3, r3, r2
 8025b92:	ea40 0003 	orr.w	r0, r0, r3
    for( diff = 0, i = 0; i < tag_len; i++ )
 8025b96:	d043      	beq.n	8025c20 <mbedtls_gcm_auth_decrypt+0x158>
        diff |= tag[i] ^ check_tag[i];
 8025b98:	7a2b      	ldrb	r3, [r5, #8]
 8025b9a:	f89d 2010 	ldrb.w	r2, [sp, #16]
    for( diff = 0, i = 0; i < tag_len; i++ )
 8025b9e:	2f09      	cmp	r7, #9
        diff |= tag[i] ^ check_tag[i];
 8025ba0:	ea83 0302 	eor.w	r3, r3, r2
 8025ba4:	ea40 0003 	orr.w	r0, r0, r3
    for( diff = 0, i = 0; i < tag_len; i++ )
 8025ba8:	d03a      	beq.n	8025c20 <mbedtls_gcm_auth_decrypt+0x158>
        diff |= tag[i] ^ check_tag[i];
 8025baa:	7a6b      	ldrb	r3, [r5, #9]
 8025bac:	f89d 2011 	ldrb.w	r2, [sp, #17]
    for( diff = 0, i = 0; i < tag_len; i++ )
 8025bb0:	2f0a      	cmp	r7, #10
        diff |= tag[i] ^ check_tag[i];
 8025bb2:	ea83 0302 	eor.w	r3, r3, r2
 8025bb6:	ea40 0003 	orr.w	r0, r0, r3
    for( diff = 0, i = 0; i < tag_len; i++ )
 8025bba:	d031      	beq.n	8025c20 <mbedtls_gcm_auth_decrypt+0x158>
        diff |= tag[i] ^ check_tag[i];
 8025bbc:	7aab      	ldrb	r3, [r5, #10]
 8025bbe:	f89d 2012 	ldrb.w	r2, [sp, #18]
    for( diff = 0, i = 0; i < tag_len; i++ )
 8025bc2:	2f0b      	cmp	r7, #11
        diff |= tag[i] ^ check_tag[i];
 8025bc4:	ea83 0302 	eor.w	r3, r3, r2
 8025bc8:	ea40 0003 	orr.w	r0, r0, r3
    for( diff = 0, i = 0; i < tag_len; i++ )
 8025bcc:	d028      	beq.n	8025c20 <mbedtls_gcm_auth_decrypt+0x158>
        diff |= tag[i] ^ check_tag[i];
 8025bce:	7aeb      	ldrb	r3, [r5, #11]
 8025bd0:	f89d 2013 	ldrb.w	r2, [sp, #19]
    for( diff = 0, i = 0; i < tag_len; i++ )
 8025bd4:	2f0c      	cmp	r7, #12
        diff |= tag[i] ^ check_tag[i];
 8025bd6:	ea83 0302 	eor.w	r3, r3, r2
 8025bda:	ea40 0003 	orr.w	r0, r0, r3
    for( diff = 0, i = 0; i < tag_len; i++ )
 8025bde:	d01f      	beq.n	8025c20 <mbedtls_gcm_auth_decrypt+0x158>
        diff |= tag[i] ^ check_tag[i];
 8025be0:	7b2b      	ldrb	r3, [r5, #12]
 8025be2:	f89d 2014 	ldrb.w	r2, [sp, #20]
    for( diff = 0, i = 0; i < tag_len; i++ )
 8025be6:	2f0d      	cmp	r7, #13
        diff |= tag[i] ^ check_tag[i];
 8025be8:	ea83 0302 	eor.w	r3, r3, r2
 8025bec:	ea40 0003 	orr.w	r0, r0, r3
    for( diff = 0, i = 0; i < tag_len; i++ )
 8025bf0:	d016      	beq.n	8025c20 <mbedtls_gcm_auth_decrypt+0x158>
        diff |= tag[i] ^ check_tag[i];
 8025bf2:	7b6b      	ldrb	r3, [r5, #13]
 8025bf4:	f89d 2015 	ldrb.w	r2, [sp, #21]
    for( diff = 0, i = 0; i < tag_len; i++ )
 8025bf8:	2f0e      	cmp	r7, #14
        diff |= tag[i] ^ check_tag[i];
 8025bfa:	ea83 0302 	eor.w	r3, r3, r2
 8025bfe:	ea40 0003 	orr.w	r0, r0, r3
    for( diff = 0, i = 0; i < tag_len; i++ )
 8025c02:	d00d      	beq.n	8025c20 <mbedtls_gcm_auth_decrypt+0x158>
        diff |= tag[i] ^ check_tag[i];
 8025c04:	7bab      	ldrb	r3, [r5, #14]
 8025c06:	f89d 2016 	ldrb.w	r2, [sp, #22]
    for( diff = 0, i = 0; i < tag_len; i++ )
 8025c0a:	2f0f      	cmp	r7, #15
        diff |= tag[i] ^ check_tag[i];
 8025c0c:	ea83 0302 	eor.w	r3, r3, r2
 8025c10:	ea40 0003 	orr.w	r0, r0, r3
    for( diff = 0, i = 0; i < tag_len; i++ )
 8025c14:	d004      	beq.n	8025c20 <mbedtls_gcm_auth_decrypt+0x158>
        diff |= tag[i] ^ check_tag[i];
 8025c16:	7beb      	ldrb	r3, [r5, #15]
 8025c18:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8025c1c:	4053      	eors	r3, r2
 8025c1e:	4318      	orrs	r0, r3
    if( diff != 0 )
 8025c20:	2800      	cmp	r0, #0
 8025c22:	f43f af5f 	beq.w	8025ae4 <mbedtls_gcm_auth_decrypt+0x1c>
        mbedtls_platform_zeroize( output, length );
 8025c26:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025c28:	4631      	mov	r1, r6
 8025c2a:	f001 ff7f 	bl	8027b2c <mbedtls_platform_zeroize>
        return( MBEDTLS_ERR_GCM_AUTH_FAILED );
 8025c2e:	f06f 0011 	mvn.w	r0, #17
 8025c32:	e757      	b.n	8025ae4 <mbedtls_gcm_auth_decrypt+0x1c>

08025c34 <mbedtls_gcm_free>:

void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
    if( ctx == NULL )
 8025c34:	b150      	cbz	r0, 8025c4c <mbedtls_gcm_free+0x18>
{
 8025c36:	b510      	push	{r4, lr}
 8025c38:	4604      	mov	r4, r0
        return;
    mbedtls_cipher_free( &ctx->cipher_ctx );
 8025c3a:	f7fe f8cb 	bl	8023dd4 <mbedtls_cipher_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
 8025c3e:	4620      	mov	r0, r4
}
 8025c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
 8025c44:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8025c48:	f001 bf70 	b.w	8027b2c <mbedtls_platform_zeroize>
 8025c4c:	4770      	bx	lr
 8025c4e:	bf00      	nop

08025c50 <mbedtls_md_info_from_type>:
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
    switch( md_type )
 8025c50:	3803      	subs	r0, #3
 8025c52:	b2c0      	uxtb	r0, r0
 8025c54:	2803      	cmp	r0, #3
 8025c56:	bf9a      	itte	ls
 8025c58:	4b02      	ldrls	r3, [pc, #8]	; (8025c64 <mbedtls_md_info_from_type+0x14>)
 8025c5a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
{
 8025c5e:	2000      	movhi	r0, #0
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
    }
}
 8025c60:	4770      	bx	lr
 8025c62:	bf00      	nop
 8025c64:	080348fc 	.word	0x080348fc

08025c68 <mbedtls_md_init>:

void mbedtls_md_init( mbedtls_md_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
 8025c68:	2300      	movs	r3, #0
 8025c6a:	6003      	str	r3, [r0, #0]
 8025c6c:	6043      	str	r3, [r0, #4]
 8025c6e:	6083      	str	r3, [r0, #8]
}
 8025c70:	4770      	bx	lr
 8025c72:	bf00      	nop

08025c74 <mbedtls_md_free>:

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
    if( ctx == NULL || ctx->md_info == NULL )
 8025c74:	b328      	cbz	r0, 8025cc2 <mbedtls_md_free+0x4e>
 8025c76:	6803      	ldr	r3, [r0, #0]
{
 8025c78:	b510      	push	{r4, lr}
 8025c7a:	4604      	mov	r4, r0
    if( ctx == NULL || ctx->md_info == NULL )
 8025c7c:	b1e3      	cbz	r3, 8025cb8 <mbedtls_md_free+0x44>
        return;

    if( ctx->md_ctx != NULL )
 8025c7e:	6840      	ldr	r0, [r0, #4]
 8025c80:	b150      	cbz	r0, 8025c98 <mbedtls_md_free+0x24>
    {
        switch( ctx->md_info->type )
 8025c82:	791b      	ldrb	r3, [r3, #4]
 8025c84:	2b03      	cmp	r3, #3
 8025c86:	d018      	beq.n	8025cba <mbedtls_md_free+0x46>
 8025c88:	3b05      	subs	r3, #5
 8025c8a:	2b01      	cmp	r3, #1
 8025c8c:	d802      	bhi.n	8025c94 <mbedtls_md_free+0x20>
                break;
#endif
#if defined(MBEDTLS_SHA256_C)
            case MBEDTLS_MD_SHA224:
            case MBEDTLS_MD_SHA256:
                mbedtls_sha256_free( ctx->md_ctx );
 8025c8e:	f004 f90b 	bl	8029ea8 <mbedtls_sha256_free>
                break;
 8025c92:	6860      	ldr	r0, [r4, #4]
#endif
            default:
                /* Shouldn't happen */
                break;
        }
        mbedtls_free( ctx->md_ctx );
 8025c94:	f00a f8aa 	bl	802fdec <free>
    }

    if( ctx->hmac_ctx != NULL )
 8025c98:	68a0      	ldr	r0, [r4, #8]
 8025c9a:	b138      	cbz	r0, 8025cac <mbedtls_md_free+0x38>
    {
        mbedtls_platform_zeroize( ctx->hmac_ctx,
                                  2 * ctx->md_info->block_size );
 8025c9c:	6823      	ldr	r3, [r4, #0]
 8025c9e:	7999      	ldrb	r1, [r3, #6]
        mbedtls_platform_zeroize( ctx->hmac_ctx,
 8025ca0:	0049      	lsls	r1, r1, #1
 8025ca2:	f001 ff43 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( ctx->hmac_ctx );
 8025ca6:	68a0      	ldr	r0, [r4, #8]
 8025ca8:	f00a f8a0 	bl	802fdec <free>
    }

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
 8025cac:	4620      	mov	r0, r4
}
 8025cae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
 8025cb2:	210c      	movs	r1, #12
 8025cb4:	f001 bf3a 	b.w	8027b2c <mbedtls_platform_zeroize>
}
 8025cb8:	bd10      	pop	{r4, pc}
                mbedtls_md5_free( ctx->md_ctx );
 8025cba:	f000 fac7 	bl	802624c <mbedtls_md5_free>
                break;
 8025cbe:	6860      	ldr	r0, [r4, #4]
 8025cc0:	e7e8      	b.n	8025c94 <mbedtls_md_free+0x20>
 8025cc2:	4770      	bx	lr

08025cc4 <mbedtls_md_clone>:

int mbedtls_md_clone( mbedtls_md_context_t *dst,
                      const mbedtls_md_context_t *src )
{
    if( dst == NULL || dst->md_info == NULL ||
 8025cc4:	b1d8      	cbz	r0, 8025cfe <mbedtls_md_clone+0x3a>
{
 8025cc6:	b508      	push	{r3, lr}
    if( dst == NULL || dst->md_info == NULL ||
 8025cc8:	6803      	ldr	r3, [r0, #0]
 8025cca:	b1b3      	cbz	r3, 8025cfa <mbedtls_md_clone+0x36>
 8025ccc:	b1a9      	cbz	r1, 8025cfa <mbedtls_md_clone+0x36>
        src == NULL || src->md_info == NULL ||
 8025cce:	680a      	ldr	r2, [r1, #0]
 8025cd0:	b19a      	cbz	r2, 8025cfa <mbedtls_md_clone+0x36>
 8025cd2:	4293      	cmp	r3, r2
 8025cd4:	d111      	bne.n	8025cfa <mbedtls_md_clone+0x36>
        dst->md_info != src->md_info )
    {
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
    }

    switch( src->md_info->type )
 8025cd6:	791b      	ldrb	r3, [r3, #4]
 8025cd8:	2b03      	cmp	r3, #3
 8025cda:	d008      	beq.n	8025cee <mbedtls_md_clone+0x2a>
 8025cdc:	3b05      	subs	r3, #5
 8025cde:	2b01      	cmp	r3, #1
 8025ce0:	d80b      	bhi.n	8025cfa <mbedtls_md_clone+0x36>
            break;
#endif
#if defined(MBEDTLS_SHA256_C)
        case MBEDTLS_MD_SHA224:
        case MBEDTLS_MD_SHA256:
            mbedtls_sha256_clone( dst->md_ctx, src->md_ctx );
 8025ce2:	6849      	ldr	r1, [r1, #4]
 8025ce4:	6840      	ldr	r0, [r0, #4]
 8025ce6:	f004 f8e5 	bl	8029eb4 <mbedtls_sha256_clone>
#endif
        default:
            return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
    }

    return( 0 );
 8025cea:	2000      	movs	r0, #0
}
 8025cec:	bd08      	pop	{r3, pc}
            mbedtls_md5_clone( dst->md_ctx, src->md_ctx );
 8025cee:	6849      	ldr	r1, [r1, #4]
 8025cf0:	6840      	ldr	r0, [r0, #4]
 8025cf2:	f000 fab1 	bl	8026258 <mbedtls_md5_clone>
    return( 0 );
 8025cf6:	2000      	movs	r0, #0
}
 8025cf8:	bd08      	pop	{r3, pc}
    switch( src->md_info->type )
 8025cfa:	4802      	ldr	r0, [pc, #8]	; (8025d04 <mbedtls_md_clone+0x40>)
}
 8025cfc:	bd08      	pop	{r3, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8025cfe:	4801      	ldr	r0, [pc, #4]	; (8025d04 <mbedtls_md_clone+0x40>)
}
 8025d00:	4770      	bx	lr
 8025d02:	bf00      	nop
 8025d04:	ffffaf00 	.word	0xffffaf00

08025d08 <mbedtls_md_setup>:
    }                                                                   \
    while( 0 )

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
    if( md_info == NULL || ctx == NULL )
 8025d08:	2900      	cmp	r1, #0
 8025d0a:	d033      	beq.n	8025d74 <mbedtls_md_setup+0x6c>
{
 8025d0c:	b570      	push	{r4, r5, r6, lr}
 8025d0e:	4604      	mov	r4, r0
    if( md_info == NULL || ctx == NULL )
 8025d10:	b370      	cbz	r0, 8025d70 <mbedtls_md_setup+0x68>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ctx->md_info = md_info;
    ctx->md_ctx = NULL;
 8025d12:	2300      	movs	r3, #0
 8025d14:	e9c0 1300 	strd	r1, r3, [r0]
    ctx->hmac_ctx = NULL;
 8025d18:	6083      	str	r3, [r0, #8]

    switch( md_info->type )
 8025d1a:	790b      	ldrb	r3, [r1, #4]
 8025d1c:	4616      	mov	r6, r2
 8025d1e:	2b03      	cmp	r3, #3
 8025d20:	460d      	mov	r5, r1
 8025d22:	d019      	beq.n	8025d58 <mbedtls_md_setup+0x50>
 8025d24:	3b05      	subs	r3, #5
 8025d26:	2b01      	cmp	r3, #1
 8025d28:	d822      	bhi.n	8025d70 <mbedtls_md_setup+0x68>
            break;
#endif
#if defined(MBEDTLS_SHA256_C)
        case MBEDTLS_MD_SHA224:
        case MBEDTLS_MD_SHA256:
            ALLOC( sha256 );
 8025d2a:	216c      	movs	r1, #108	; 0x6c
 8025d2c:	2001      	movs	r0, #1
 8025d2e:	f00a f823 	bl	802fd78 <calloc>
 8025d32:	6060      	str	r0, [r4, #4]
 8025d34:	b170      	cbz	r0, 8025d54 <mbedtls_md_setup+0x4c>
 8025d36:	f004 f8b3 	bl	8029ea0 <mbedtls_sha256_init>
#endif
        default:
            return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
    }

    if( hmac != 0 )
 8025d3a:	b90e      	cbnz	r6, 8025d40 <mbedtls_md_setup+0x38>
            mbedtls_md_free( ctx );
            return( MBEDTLS_ERR_MD_ALLOC_FAILED );
        }
    }

    return( 0 );
 8025d3c:	2000      	movs	r0, #0
}
 8025d3e:	bd70      	pop	{r4, r5, r6, pc}
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
 8025d40:	2002      	movs	r0, #2
 8025d42:	79a9      	ldrb	r1, [r5, #6]
 8025d44:	f00a f818 	bl	802fd78 <calloc>
 8025d48:	60a0      	str	r0, [r4, #8]
        if( ctx->hmac_ctx == NULL )
 8025d4a:	2800      	cmp	r0, #0
 8025d4c:	d1f6      	bne.n	8025d3c <mbedtls_md_setup+0x34>
            mbedtls_md_free( ctx );
 8025d4e:	4620      	mov	r0, r4
 8025d50:	f7ff ff90 	bl	8025c74 <mbedtls_md_free>
            return( MBEDTLS_ERR_MD_ALLOC_FAILED );
 8025d54:	4808      	ldr	r0, [pc, #32]	; (8025d78 <mbedtls_md_setup+0x70>)
}
 8025d56:	bd70      	pop	{r4, r5, r6, pc}
            ALLOC( md5 );
 8025d58:	2158      	movs	r1, #88	; 0x58
 8025d5a:	2001      	movs	r0, #1
 8025d5c:	f00a f80c 	bl	802fd78 <calloc>
 8025d60:	6060      	str	r0, [r4, #4]
 8025d62:	2800      	cmp	r0, #0
 8025d64:	d0f6      	beq.n	8025d54 <mbedtls_md_setup+0x4c>
 8025d66:	f000 fa6d 	bl	8026244 <mbedtls_md5_init>
    if( hmac != 0 )
 8025d6a:	2e00      	cmp	r6, #0
 8025d6c:	d0e6      	beq.n	8025d3c <mbedtls_md_setup+0x34>
 8025d6e:	e7e7      	b.n	8025d40 <mbedtls_md_setup+0x38>
    switch( md_info->type )
 8025d70:	4802      	ldr	r0, [pc, #8]	; (8025d7c <mbedtls_md_setup+0x74>)
}
 8025d72:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8025d74:	4801      	ldr	r0, [pc, #4]	; (8025d7c <mbedtls_md_setup+0x74>)
}
 8025d76:	4770      	bx	lr
 8025d78:	ffffae80 	.word	0xffffae80
 8025d7c:	ffffaf00 	.word	0xffffaf00

08025d80 <mbedtls_md_starts>:
#undef ALLOC

int mbedtls_md_starts( mbedtls_md_context_t *ctx )
{
    if( ctx == NULL || ctx->md_info == NULL )
 8025d80:	b140      	cbz	r0, 8025d94 <mbedtls_md_starts+0x14>
 8025d82:	6803      	ldr	r3, [r0, #0]
 8025d84:	b133      	cbz	r3, 8025d94 <mbedtls_md_starts+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    switch( ctx->md_info->type )
 8025d86:	791b      	ldrb	r3, [r3, #4]
 8025d88:	2b05      	cmp	r3, #5
 8025d8a:	d005      	beq.n	8025d98 <mbedtls_md_starts+0x18>
 8025d8c:	2b06      	cmp	r3, #6
 8025d8e:	d00a      	beq.n	8025da6 <mbedtls_md_starts+0x26>
 8025d90:	2b03      	cmp	r3, #3
 8025d92:	d005      	beq.n	8025da0 <mbedtls_md_starts+0x20>
 8025d94:	4806      	ldr	r0, [pc, #24]	; (8025db0 <mbedtls_md_starts+0x30>)
            return( mbedtls_sha512_starts_ret( ctx->md_ctx, 0 ) );
#endif
        default:
            return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
    }
}
 8025d96:	4770      	bx	lr
            return( mbedtls_sha256_starts_ret( ctx->md_ctx, 1 ) );
 8025d98:	2101      	movs	r1, #1
 8025d9a:	6840      	ldr	r0, [r0, #4]
 8025d9c:	f004 b890 	b.w	8029ec0 <mbedtls_sha256_starts_ret>
            return( mbedtls_md5_starts_ret( ctx->md_ctx ) );
 8025da0:	6840      	ldr	r0, [r0, #4]
 8025da2:	f000 ba5f 	b.w	8026264 <mbedtls_md5_starts_ret>
            return( mbedtls_sha256_starts_ret( ctx->md_ctx, 0 ) );
 8025da6:	2100      	movs	r1, #0
 8025da8:	6840      	ldr	r0, [r0, #4]
 8025daa:	f004 b889 	b.w	8029ec0 <mbedtls_sha256_starts_ret>
 8025dae:	bf00      	nop
 8025db0:	ffffaf00 	.word	0xffffaf00

08025db4 <mbedtls_md_update>:

int mbedtls_md_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL )
 8025db4:	b168      	cbz	r0, 8025dd2 <mbedtls_md_update+0x1e>
 8025db6:	6803      	ldr	r3, [r0, #0]
 8025db8:	b15b      	cbz	r3, 8025dd2 <mbedtls_md_update+0x1e>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    switch( ctx->md_info->type )
 8025dba:	791b      	ldrb	r3, [r3, #4]
 8025dbc:	2b03      	cmp	r3, #3
 8025dbe:	d005      	beq.n	8025dcc <mbedtls_md_update+0x18>
 8025dc0:	3b05      	subs	r3, #5
 8025dc2:	2b01      	cmp	r3, #1
 8025dc4:	d805      	bhi.n	8025dd2 <mbedtls_md_update+0x1e>
            return( mbedtls_sha1_update_ret( ctx->md_ctx, input, ilen ) );
#endif
#if defined(MBEDTLS_SHA256_C)
        case MBEDTLS_MD_SHA224:
        case MBEDTLS_MD_SHA256:
            return( mbedtls_sha256_update_ret( ctx->md_ctx, input, ilen ) );
 8025dc6:	6840      	ldr	r0, [r0, #4]
 8025dc8:	f004 bdd4 	b.w	802a974 <mbedtls_sha256_update_ret>
            return( mbedtls_md5_update_ret( ctx->md_ctx, input, ilen ) );
 8025dcc:	6840      	ldr	r0, [r0, #4]
 8025dce:	f000 be1d 	b.w	8026a0c <mbedtls_md5_update_ret>
    switch( ctx->md_info->type )
 8025dd2:	4801      	ldr	r0, [pc, #4]	; (8025dd8 <mbedtls_md_update+0x24>)
            return( mbedtls_sha512_update_ret( ctx->md_ctx, input, ilen ) );
#endif
        default:
            return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
    }
}
 8025dd4:	4770      	bx	lr
 8025dd6:	bf00      	nop
 8025dd8:	ffffaf00 	.word	0xffffaf00

08025ddc <mbedtls_md_finish>:

int mbedtls_md_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
    if( ctx == NULL || ctx->md_info == NULL )
 8025ddc:	b168      	cbz	r0, 8025dfa <mbedtls_md_finish+0x1e>
 8025dde:	6803      	ldr	r3, [r0, #0]
 8025de0:	b15b      	cbz	r3, 8025dfa <mbedtls_md_finish+0x1e>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    switch( ctx->md_info->type )
 8025de2:	791b      	ldrb	r3, [r3, #4]
 8025de4:	2b03      	cmp	r3, #3
 8025de6:	d005      	beq.n	8025df4 <mbedtls_md_finish+0x18>
 8025de8:	3b05      	subs	r3, #5
 8025dea:	2b01      	cmp	r3, #1
 8025dec:	d805      	bhi.n	8025dfa <mbedtls_md_finish+0x1e>
            return( mbedtls_sha1_finish_ret( ctx->md_ctx, output ) );
#endif
#if defined(MBEDTLS_SHA256_C)
        case MBEDTLS_MD_SHA224:
        case MBEDTLS_MD_SHA256:
            return( mbedtls_sha256_finish_ret( ctx->md_ctx, output ) );
 8025dee:	6840      	ldr	r0, [r0, #4]
 8025df0:	f004 bdc6 	b.w	802a980 <mbedtls_sha256_finish_ret>
            return( mbedtls_md5_finish_ret( ctx->md_ctx, output ) );
 8025df4:	6840      	ldr	r0, [r0, #4]
 8025df6:	f000 be0f 	b.w	8026a18 <mbedtls_md5_finish_ret>
    switch( ctx->md_info->type )
 8025dfa:	4801      	ldr	r0, [pc, #4]	; (8025e00 <mbedtls_md_finish+0x24>)
            return( mbedtls_sha512_finish_ret( ctx->md_ctx, output ) );
#endif
        default:
            return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
    }
}
 8025dfc:	4770      	bx	lr
 8025dfe:	bf00      	nop
 8025e00:	ffffaf00 	.word	0xffffaf00

08025e04 <mbedtls_md>:

int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
            unsigned char *output )
{
    if( md_info == NULL )
 8025e04:	b1d8      	cbz	r0, 8025e3e <mbedtls_md+0x3a>
{
 8025e06:	b430      	push	{r4, r5}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    switch( md_info->type )
 8025e08:	7904      	ldrb	r4, [r0, #4]
 8025e0a:	460d      	mov	r5, r1
 8025e0c:	2c05      	cmp	r4, #5
 8025e0e:	4611      	mov	r1, r2
 8025e10:	461a      	mov	r2, r3
 8025e12:	d006      	beq.n	8025e22 <mbedtls_md+0x1e>
 8025e14:	2c06      	cmp	r4, #6
 8025e16:	d00d      	beq.n	8025e34 <mbedtls_md+0x30>
 8025e18:	2c03      	cmp	r4, #3
 8025e1a:	d007      	beq.n	8025e2c <mbedtls_md+0x28>
            return( mbedtls_sha512_ret( input, ilen, output, 0 ) );
#endif
        default:
            return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
    }
}
 8025e1c:	bc30      	pop	{r4, r5}
    switch( md_info->type )
 8025e1e:	4809      	ldr	r0, [pc, #36]	; (8025e44 <mbedtls_md+0x40>)
}
 8025e20:	4770      	bx	lr
            return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
 8025e22:	4628      	mov	r0, r5
}
 8025e24:	bc30      	pop	{r4, r5}
            return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
 8025e26:	2301      	movs	r3, #1
 8025e28:	f004 be2e 	b.w	802aa88 <mbedtls_sha256_ret>
            return( mbedtls_md5_ret( input, ilen, output ) );
 8025e2c:	4628      	mov	r0, r5
}
 8025e2e:	bc30      	pop	{r4, r5}
            return( mbedtls_md5_ret( input, ilen, output ) );
 8025e30:	f000 be4a 	b.w	8026ac8 <mbedtls_md5_ret>
            return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
 8025e34:	4628      	mov	r0, r5
}
 8025e36:	bc30      	pop	{r4, r5}
            return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
 8025e38:	2300      	movs	r3, #0
 8025e3a:	f004 be25 	b.w	802aa88 <mbedtls_sha256_ret>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8025e3e:	4801      	ldr	r0, [pc, #4]	; (8025e44 <mbedtls_md+0x40>)
}
 8025e40:	4770      	bx	lr
 8025e42:	bf00      	nop
 8025e44:	ffffaf00 	.word	0xffffaf00

08025e48 <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
 8025e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025e4c:	b088      	sub	sp, #32
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8025e4e:	2800      	cmp	r0, #0
 8025e50:	f000 811d 	beq.w	802608e <mbedtls_md_hmac_starts+0x246>
 8025e54:	6803      	ldr	r3, [r0, #0]
 8025e56:	4605      	mov	r5, r0
 8025e58:	2b00      	cmp	r3, #0
 8025e5a:	f000 8118 	beq.w	802608e <mbedtls_md_hmac_starts+0x246>
 8025e5e:	6886      	ldr	r6, [r0, #8]
 8025e60:	2e00      	cmp	r6, #0
 8025e62:	f000 8114 	beq.w	802608e <mbedtls_md_hmac_starts+0x246>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( keylen > (size_t) ctx->md_info->block_size )
 8025e66:	f893 a006 	ldrb.w	sl, [r3, #6]
 8025e6a:	460c      	mov	r4, r1
 8025e6c:	4592      	cmp	sl, r2
 8025e6e:	4690      	mov	r8, r2
 8025e70:	d37d      	bcc.n	8025f6e <mbedtls_md_hmac_starts+0x126>
 8025e72:	46e9      	mov	r9, sp
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
 8025e74:	4652      	mov	r2, sl
 8025e76:	2136      	movs	r1, #54	; 0x36
 8025e78:	4630      	mov	r0, r6
 8025e7a:	f009 fff4 	bl	802fe66 <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
 8025e7e:	682b      	ldr	r3, [r5, #0]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8025e80:	eb06 070a 	add.w	r7, r6, sl
    memset( opad, 0x5C, ctx->md_info->block_size );
 8025e84:	4638      	mov	r0, r7
 8025e86:	215c      	movs	r1, #92	; 0x5c
 8025e88:	799a      	ldrb	r2, [r3, #6]
 8025e8a:	f009 ffec 	bl	802fe66 <memset>

    for( i = 0; i < keylen; i++ )
 8025e8e:	f1b8 0f00 	cmp.w	r8, #0
 8025e92:	d05a      	beq.n	8025f4a <mbedtls_md_hmac_starts+0x102>
 8025e94:	f10a 0304 	add.w	r3, sl, #4
 8025e98:	4433      	add	r3, r6
 8025e9a:	f104 0a04 	add.w	sl, r4, #4
 8025e9e:	4557      	cmp	r7, sl
 8025ea0:	bf38      	it	cc
 8025ea2:	429c      	cmpcc	r4, r3
 8025ea4:	bf2c      	ite	cs
 8025ea6:	2301      	movcs	r3, #1
 8025ea8:	2300      	movcc	r3, #0
 8025eaa:	1d32      	adds	r2, r6, #4
 8025eac:	4297      	cmp	r7, r2
 8025eae:	bf34      	ite	cc
 8025eb0:	2300      	movcc	r3, #0
 8025eb2:	f003 0301 	andcs.w	r3, r3, #1
 8025eb6:	f108 32ff 	add.w	r2, r8, #4294967295
 8025eba:	2a02      	cmp	r2, #2
 8025ebc:	bf94      	ite	ls
 8025ebe:	2300      	movls	r3, #0
 8025ec0:	f003 0301 	andhi.w	r3, r3, #1
 8025ec4:	2b00      	cmp	r3, #0
 8025ec6:	f000 80ba 	beq.w	802603e <mbedtls_md_hmac_starts+0x1f6>
 8025eca:	1ce3      	adds	r3, r4, #3
 8025ecc:	1b9b      	subs	r3, r3, r6
 8025ece:	2b06      	cmp	r3, #6
 8025ed0:	f240 80b5 	bls.w	802603e <mbedtls_md_hmac_starts+0x1f6>
 8025ed4:	4633      	mov	r3, r6
 8025ed6:	4620      	mov	r0, r4
 8025ed8:	46be      	mov	lr, r7
 8025eda:	46bc      	mov	ip, r7
 8025edc:	f028 0a03 	bic.w	sl, r8, #3
 8025ee0:	44b2      	add	sl, r6
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 8025ee2:	6802      	ldr	r2, [r0, #0]
 8025ee4:	6819      	ldr	r1, [r3, #0]
 8025ee6:	404a      	eors	r2, r1
 8025ee8:	f843 2b04 	str.w	r2, [r3], #4
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 8025eec:	f85e 1b04 	ldr.w	r1, [lr], #4
 8025ef0:	f850 2b04 	ldr.w	r2, [r0], #4
 8025ef4:	4553      	cmp	r3, sl
 8025ef6:	ea81 0102 	eor.w	r1, r1, r2
 8025efa:	f84c 1b04 	str.w	r1, [ip], #4
    for( i = 0; i < keylen; i++ )
 8025efe:	d1f0      	bne.n	8025ee2 <mbedtls_md_hmac_starts+0x9a>
 8025f00:	f018 0f03 	tst.w	r8, #3
 8025f04:	f028 0303 	bic.w	r3, r8, #3
 8025f08:	d01f      	beq.n	8025f4a <mbedtls_md_hmac_starts+0x102>
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 8025f0a:	5ce0      	ldrb	r0, [r4, r3]
 8025f0c:	5cf1      	ldrb	r1, [r6, r3]
    for( i = 0; i < keylen; i++ )
 8025f0e:	1c5a      	adds	r2, r3, #1
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 8025f10:	4041      	eors	r1, r0
 8025f12:	54f1      	strb	r1, [r6, r3]
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 8025f14:	5cf9      	ldrb	r1, [r7, r3]
 8025f16:	5ce0      	ldrb	r0, [r4, r3]
    for( i = 0; i < keylen; i++ )
 8025f18:	4590      	cmp	r8, r2
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 8025f1a:	ea81 0100 	eor.w	r1, r1, r0
 8025f1e:	54f9      	strb	r1, [r7, r3]
    for( i = 0; i < keylen; i++ )
 8025f20:	d913      	bls.n	8025f4a <mbedtls_md_hmac_starts+0x102>
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 8025f22:	5ca0      	ldrb	r0, [r4, r2]
 8025f24:	5cb1      	ldrb	r1, [r6, r2]
    for( i = 0; i < keylen; i++ )
 8025f26:	3302      	adds	r3, #2
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 8025f28:	4041      	eors	r1, r0
 8025f2a:	54b1      	strb	r1, [r6, r2]
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 8025f2c:	5cb9      	ldrb	r1, [r7, r2]
 8025f2e:	5ca0      	ldrb	r0, [r4, r2]
    for( i = 0; i < keylen; i++ )
 8025f30:	4598      	cmp	r8, r3
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 8025f32:	ea81 0100 	eor.w	r1, r1, r0
 8025f36:	54b9      	strb	r1, [r7, r2]
    for( i = 0; i < keylen; i++ )
 8025f38:	d907      	bls.n	8025f4a <mbedtls_md_hmac_starts+0x102>
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 8025f3a:	5ce1      	ldrb	r1, [r4, r3]
 8025f3c:	5cf2      	ldrb	r2, [r6, r3]
 8025f3e:	404a      	eors	r2, r1
 8025f40:	54f2      	strb	r2, [r6, r3]
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 8025f42:	5ce1      	ldrb	r1, [r4, r3]
 8025f44:	5cfa      	ldrb	r2, [r7, r3]
 8025f46:	404a      	eors	r2, r1
 8025f48:	54fa      	strb	r2, [r7, r3]
    if( ctx == NULL || ctx->md_info == NULL )
 8025f4a:	682b      	ldr	r3, [r5, #0]
 8025f4c:	b133      	cbz	r3, 8025f5c <mbedtls_md_hmac_starts+0x114>
    switch( ctx->md_info->type )
 8025f4e:	791b      	ldrb	r3, [r3, #4]
 8025f50:	2b05      	cmp	r3, #5
 8025f52:	d05f      	beq.n	8026014 <mbedtls_md_hmac_starts+0x1cc>
 8025f54:	2b06      	cmp	r3, #6
 8025f56:	d057      	beq.n	8026008 <mbedtls_md_hmac_starts+0x1c0>
 8025f58:	2b03      	cmp	r3, #3
 8025f5a:	d041      	beq.n	8025fe0 <mbedtls_md_hmac_starts+0x198>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8025f5c:	4f4d      	ldr	r7, [pc, #308]	; (8026094 <mbedtls_md_hmac_starts+0x24c>)
    if( ( ret = mbedtls_md_update( ctx, ipad,
                                   ctx->md_info->block_size ) ) != 0 )
        goto cleanup;

cleanup:
    mbedtls_platform_zeroize( sum, sizeof( sum ) );
 8025f5e:	4648      	mov	r0, r9
 8025f60:	2120      	movs	r1, #32
 8025f62:	f001 fde3 	bl	8027b2c <mbedtls_platform_zeroize>

    return( ret );
}
 8025f66:	4638      	mov	r0, r7
 8025f68:	b008      	add	sp, #32
 8025f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch( ctx->md_info->type )
 8025f6e:	791b      	ldrb	r3, [r3, #4]
 8025f70:	2b05      	cmp	r3, #5
 8025f72:	d05e      	beq.n	8026032 <mbedtls_md_hmac_starts+0x1ea>
 8025f74:	2b06      	cmp	r3, #6
 8025f76:	d053      	beq.n	8026020 <mbedtls_md_hmac_starts+0x1d8>
 8025f78:	2b03      	cmp	r3, #3
 8025f7a:	d001      	beq.n	8025f80 <mbedtls_md_hmac_starts+0x138>
 8025f7c:	46e9      	mov	r9, sp
 8025f7e:	e7ed      	b.n	8025f5c <mbedtls_md_hmac_starts+0x114>
            return( mbedtls_md5_starts_ret( ctx->md_ctx ) );
 8025f80:	6840      	ldr	r0, [r0, #4]
 8025f82:	f000 f96f 	bl	8026264 <mbedtls_md5_starts_ret>
 8025f86:	4607      	mov	r7, r0
        if( ( ret = mbedtls_md_starts( ctx ) ) != 0 )
 8025f88:	2f00      	cmp	r7, #0
 8025f8a:	d150      	bne.n	802602e <mbedtls_md_hmac_starts+0x1e6>
    if( ctx == NULL || ctx->md_info == NULL )
 8025f8c:	682b      	ldr	r3, [r5, #0]
 8025f8e:	2b00      	cmp	r3, #0
 8025f90:	d0f4      	beq.n	8025f7c <mbedtls_md_hmac_starts+0x134>
    switch( ctx->md_info->type )
 8025f92:	791b      	ldrb	r3, [r3, #4]
 8025f94:	2b03      	cmp	r3, #3
 8025f96:	d06c      	beq.n	8026072 <mbedtls_md_hmac_starts+0x22a>
 8025f98:	3b05      	subs	r3, #5
 8025f9a:	2b01      	cmp	r3, #1
 8025f9c:	d8ee      	bhi.n	8025f7c <mbedtls_md_hmac_starts+0x134>
            return( mbedtls_sha256_update_ret( ctx->md_ctx, input, ilen ) );
 8025f9e:	4642      	mov	r2, r8
 8025fa0:	4621      	mov	r1, r4
 8025fa2:	6868      	ldr	r0, [r5, #4]
 8025fa4:	f004 fce6 	bl	802a974 <mbedtls_sha256_update_ret>
 8025fa8:	4607      	mov	r7, r0
        if( ( ret = mbedtls_md_update( ctx, key, keylen ) ) != 0 )
 8025faa:	2f00      	cmp	r7, #0
 8025fac:	d13f      	bne.n	802602e <mbedtls_md_hmac_starts+0x1e6>
    if( ctx == NULL || ctx->md_info == NULL )
 8025fae:	682b      	ldr	r3, [r5, #0]
 8025fb0:	2b00      	cmp	r3, #0
 8025fb2:	d0e3      	beq.n	8025f7c <mbedtls_md_hmac_starts+0x134>
    switch( ctx->md_info->type )
 8025fb4:	791b      	ldrb	r3, [r3, #4]
 8025fb6:	2b03      	cmp	r3, #3
 8025fb8:	d062      	beq.n	8026080 <mbedtls_md_hmac_starts+0x238>
 8025fba:	3b05      	subs	r3, #5
 8025fbc:	2b01      	cmp	r3, #1
 8025fbe:	d8dd      	bhi.n	8025f7c <mbedtls_md_hmac_starts+0x134>
            return( mbedtls_sha256_finish_ret( ctx->md_ctx, output ) );
 8025fc0:	46e9      	mov	r9, sp
 8025fc2:	6868      	ldr	r0, [r5, #4]
 8025fc4:	4649      	mov	r1, r9
 8025fc6:	f004 fcdb 	bl	802a980 <mbedtls_sha256_finish_ret>
 8025fca:	4607      	mov	r7, r0
        if( ( ret = mbedtls_md_finish( ctx, sum ) ) != 0 )
 8025fcc:	2f00      	cmp	r7, #0
 8025fce:	d1c6      	bne.n	8025f5e <mbedtls_md_hmac_starts+0x116>
        keylen = ctx->md_info->size;
 8025fd0:	682b      	ldr	r3, [r5, #0]
        key = sum;
 8025fd2:	464c      	mov	r4, r9
 8025fd4:	68ae      	ldr	r6, [r5, #8]
        keylen = ctx->md_info->size;
 8025fd6:	f893 8005 	ldrb.w	r8, [r3, #5]
        key = sum;
 8025fda:	f893 a006 	ldrb.w	sl, [r3, #6]
 8025fde:	e749      	b.n	8025e74 <mbedtls_md_hmac_starts+0x2c>
            return( mbedtls_md5_starts_ret( ctx->md_ctx ) );
 8025fe0:	6868      	ldr	r0, [r5, #4]
 8025fe2:	f000 f93f 	bl	8026264 <mbedtls_md5_starts_ret>
 8025fe6:	4607      	mov	r7, r0
    if( ( ret = mbedtls_md_starts( ctx ) ) != 0 )
 8025fe8:	2f00      	cmp	r7, #0
 8025fea:	d1b8      	bne.n	8025f5e <mbedtls_md_hmac_starts+0x116>
                                   ctx->md_info->block_size ) ) != 0 )
 8025fec:	682a      	ldr	r2, [r5, #0]
    switch( ctx->md_info->type )
 8025fee:	7913      	ldrb	r3, [r2, #4]
    if( ( ret = mbedtls_md_update( ctx, ipad,
 8025ff0:	7992      	ldrb	r2, [r2, #6]
    switch( ctx->md_info->type )
 8025ff2:	2b03      	cmp	r3, #3
 8025ff4:	d037      	beq.n	8026066 <mbedtls_md_hmac_starts+0x21e>
 8025ff6:	3b05      	subs	r3, #5
 8025ff8:	2b01      	cmp	r3, #1
 8025ffa:	d8af      	bhi.n	8025f5c <mbedtls_md_hmac_starts+0x114>
            return( mbedtls_sha256_update_ret( ctx->md_ctx, input, ilen ) );
 8025ffc:	4631      	mov	r1, r6
 8025ffe:	6868      	ldr	r0, [r5, #4]
 8026000:	f004 fcb8 	bl	802a974 <mbedtls_sha256_update_ret>
 8026004:	4607      	mov	r7, r0
 8026006:	e7aa      	b.n	8025f5e <mbedtls_md_hmac_starts+0x116>
            return( mbedtls_sha256_starts_ret( ctx->md_ctx, 0 ) );
 8026008:	2100      	movs	r1, #0
 802600a:	6868      	ldr	r0, [r5, #4]
 802600c:	f003 ff58 	bl	8029ec0 <mbedtls_sha256_starts_ret>
 8026010:	4607      	mov	r7, r0
 8026012:	e7e9      	b.n	8025fe8 <mbedtls_md_hmac_starts+0x1a0>
            return( mbedtls_sha256_starts_ret( ctx->md_ctx, 1 ) );
 8026014:	2101      	movs	r1, #1
 8026016:	6868      	ldr	r0, [r5, #4]
 8026018:	f003 ff52 	bl	8029ec0 <mbedtls_sha256_starts_ret>
 802601c:	4607      	mov	r7, r0
 802601e:	e7e3      	b.n	8025fe8 <mbedtls_md_hmac_starts+0x1a0>
            return( mbedtls_sha256_starts_ret( ctx->md_ctx, 0 ) );
 8026020:	2100      	movs	r1, #0
 8026022:	6840      	ldr	r0, [r0, #4]
 8026024:	f003 ff4c 	bl	8029ec0 <mbedtls_sha256_starts_ret>
 8026028:	4607      	mov	r7, r0
        if( ( ret = mbedtls_md_starts( ctx ) ) != 0 )
 802602a:	2f00      	cmp	r7, #0
 802602c:	d0ae      	beq.n	8025f8c <mbedtls_md_hmac_starts+0x144>
 802602e:	46e9      	mov	r9, sp
 8026030:	e795      	b.n	8025f5e <mbedtls_md_hmac_starts+0x116>
            return( mbedtls_sha256_starts_ret( ctx->md_ctx, 1 ) );
 8026032:	2101      	movs	r1, #1
 8026034:	6840      	ldr	r0, [r0, #4]
 8026036:	f003 ff43 	bl	8029ec0 <mbedtls_sha256_starts_ret>
 802603a:	4607      	mov	r7, r0
 802603c:	e7a4      	b.n	8025f88 <mbedtls_md_hmac_starts+0x140>
 802603e:	3c01      	subs	r4, #1
 8026040:	3f01      	subs	r7, #1
 8026042:	18b1      	adds	r1, r6, r2
 8026044:	1e73      	subs	r3, r6, #1
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 8026046:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 802604a:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    for( i = 0; i < keylen; i++ )
 802604e:	428b      	cmp	r3, r1
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 8026050:	ea82 0200 	eor.w	r2, r2, r0
 8026054:	701a      	strb	r2, [r3, #0]
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 8026056:	7822      	ldrb	r2, [r4, #0]
 8026058:	f817 0f01 	ldrb.w	r0, [r7, #1]!
 802605c:	ea82 0200 	eor.w	r2, r2, r0
 8026060:	703a      	strb	r2, [r7, #0]
    for( i = 0; i < keylen; i++ )
 8026062:	d1f0      	bne.n	8026046 <mbedtls_md_hmac_starts+0x1fe>
 8026064:	e771      	b.n	8025f4a <mbedtls_md_hmac_starts+0x102>
            return( mbedtls_md5_update_ret( ctx->md_ctx, input, ilen ) );
 8026066:	4631      	mov	r1, r6
 8026068:	6868      	ldr	r0, [r5, #4]
 802606a:	f000 fccf 	bl	8026a0c <mbedtls_md5_update_ret>
 802606e:	4607      	mov	r7, r0
 8026070:	e775      	b.n	8025f5e <mbedtls_md_hmac_starts+0x116>
 8026072:	4642      	mov	r2, r8
 8026074:	4621      	mov	r1, r4
 8026076:	6868      	ldr	r0, [r5, #4]
 8026078:	f000 fcc8 	bl	8026a0c <mbedtls_md5_update_ret>
 802607c:	4607      	mov	r7, r0
 802607e:	e794      	b.n	8025faa <mbedtls_md_hmac_starts+0x162>
            return( mbedtls_md5_finish_ret( ctx->md_ctx, output ) );
 8026080:	46e9      	mov	r9, sp
 8026082:	6868      	ldr	r0, [r5, #4]
 8026084:	4649      	mov	r1, r9
 8026086:	f000 fcc7 	bl	8026a18 <mbedtls_md5_finish_ret>
 802608a:	4607      	mov	r7, r0
 802608c:	e79e      	b.n	8025fcc <mbedtls_md_hmac_starts+0x184>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 802608e:	4f01      	ldr	r7, [pc, #4]	; (8026094 <mbedtls_md_hmac_starts+0x24c>)
 8026090:	e769      	b.n	8025f66 <mbedtls_md_hmac_starts+0x11e>
 8026092:	bf00      	nop
 8026094:	ffffaf00 	.word	0xffffaf00

08026098 <mbedtls_md_hmac_update>:

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8026098:	b1c0      	cbz	r0, 80260cc <mbedtls_md_hmac_update+0x34>
 802609a:	6803      	ldr	r3, [r0, #0]
 802609c:	b1b3      	cbz	r3, 80260cc <mbedtls_md_hmac_update+0x34>
{
 802609e:	b410      	push	{r4}
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 80260a0:	6884      	ldr	r4, [r0, #8]
 80260a2:	b17c      	cbz	r4, 80260c4 <mbedtls_md_hmac_update+0x2c>
    switch( ctx->md_info->type )
 80260a4:	791b      	ldrb	r3, [r3, #4]
 80260a6:	2b03      	cmp	r3, #3
 80260a8:	d007      	beq.n	80260ba <mbedtls_md_hmac_update+0x22>
 80260aa:	3b05      	subs	r3, #5
 80260ac:	2b01      	cmp	r3, #1
 80260ae:	d809      	bhi.n	80260c4 <mbedtls_md_hmac_update+0x2c>
            return( mbedtls_sha256_update_ret( ctx->md_ctx, input, ilen ) );
 80260b0:	6840      	ldr	r0, [r0, #4]
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( mbedtls_md_update( ctx, input, ilen ) );
}
 80260b2:	f85d 4b04 	ldr.w	r4, [sp], #4
            return( mbedtls_sha256_update_ret( ctx->md_ctx, input, ilen ) );
 80260b6:	f004 bc5d 	b.w	802a974 <mbedtls_sha256_update_ret>
            return( mbedtls_md5_update_ret( ctx->md_ctx, input, ilen ) );
 80260ba:	6840      	ldr	r0, [r0, #4]
}
 80260bc:	f85d 4b04 	ldr.w	r4, [sp], #4
            return( mbedtls_md5_update_ret( ctx->md_ctx, input, ilen ) );
 80260c0:	f000 bca4 	b.w	8026a0c <mbedtls_md5_update_ret>
    switch( ctx->md_info->type )
 80260c4:	4802      	ldr	r0, [pc, #8]	; (80260d0 <mbedtls_md_hmac_update+0x38>)
}
 80260c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80260ca:	4770      	bx	lr
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80260cc:	4800      	ldr	r0, [pc, #0]	; (80260d0 <mbedtls_md_hmac_update+0x38>)
}
 80260ce:	4770      	bx	lr
 80260d0:	ffffaf00 	.word	0xffffaf00

080260d4 <mbedtls_md_hmac_finish>:
{
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 80260d4:	2800      	cmp	r0, #0
 80260d6:	d071      	beq.n	80261bc <mbedtls_md_hmac_finish+0xe8>
{
 80260d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 80260dc:	6802      	ldr	r2, [r0, #0]
 80260de:	4604      	mov	r4, r0
{
 80260e0:	b088      	sub	sp, #32
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 80260e2:	b1ca      	cbz	r2, 8026118 <mbedtls_md_hmac_finish+0x44>
 80260e4:	6887      	ldr	r7, [r0, #8]
 80260e6:	b1bf      	cbz	r7, 8026118 <mbedtls_md_hmac_finish+0x44>
    switch( ctx->md_info->type )
 80260e8:	7913      	ldrb	r3, [r2, #4]
 80260ea:	460d      	mov	r5, r1
 80260ec:	2b03      	cmp	r3, #3
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 80260ee:	f892 8006 	ldrb.w	r8, [r2, #6]
    switch( ctx->md_info->type )
 80260f2:	d015      	beq.n	8026120 <mbedtls_md_hmac_finish+0x4c>
 80260f4:	3b05      	subs	r3, #5
 80260f6:	2b01      	cmp	r3, #1
 80260f8:	d80e      	bhi.n	8026118 <mbedtls_md_hmac_finish+0x44>
            return( mbedtls_sha256_finish_ret( ctx->md_ctx, output ) );
 80260fa:	466e      	mov	r6, sp
 80260fc:	6840      	ldr	r0, [r0, #4]
 80260fe:	4631      	mov	r1, r6
 8026100:	f004 fc3e 	bl	802a980 <mbedtls_sha256_finish_ret>

    if( ( ret = mbedtls_md_finish( ctx, tmp ) ) != 0 )
 8026104:	b948      	cbnz	r0, 802611a <mbedtls_md_hmac_finish+0x46>
    if( ctx == NULL || ctx->md_info == NULL )
 8026106:	6823      	ldr	r3, [r4, #0]
 8026108:	b133      	cbz	r3, 8026118 <mbedtls_md_hmac_finish+0x44>
    switch( ctx->md_info->type )
 802610a:	791b      	ldrb	r3, [r3, #4]
 802610c:	2b05      	cmp	r3, #5
 802610e:	d042      	beq.n	8026196 <mbedtls_md_hmac_finish+0xc2>
 8026110:	2b06      	cmp	r3, #6
 8026112:	d03b      	beq.n	802618c <mbedtls_md_hmac_finish+0xb8>
 8026114:	2b03      	cmp	r3, #3
 8026116:	d009      	beq.n	802612c <mbedtls_md_hmac_finish+0x58>
            return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8026118:	4829      	ldr	r0, [pc, #164]	; (80261c0 <mbedtls_md_hmac_finish+0xec>)
        return( ret );
    if( ( ret = mbedtls_md_update( ctx, tmp,
                                   ctx->md_info->size ) ) != 0 )
        return( ret );
    return( mbedtls_md_finish( ctx, output ) );
}
 802611a:	b008      	add	sp, #32
 802611c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return( mbedtls_md5_finish_ret( ctx->md_ctx, output ) );
 8026120:	466e      	mov	r6, sp
 8026122:	6840      	ldr	r0, [r0, #4]
 8026124:	4631      	mov	r1, r6
 8026126:	f000 fc77 	bl	8026a18 <mbedtls_md5_finish_ret>
 802612a:	e7eb      	b.n	8026104 <mbedtls_md_hmac_finish+0x30>
            return( mbedtls_md5_starts_ret( ctx->md_ctx ) );
 802612c:	6860      	ldr	r0, [r4, #4]
 802612e:	f000 f899 	bl	8026264 <mbedtls_md5_starts_ret>
    if( ( ret = mbedtls_md_starts( ctx ) ) != 0 )
 8026132:	2800      	cmp	r0, #0
 8026134:	d1f1      	bne.n	802611a <mbedtls_md_hmac_finish+0x46>
                                   ctx->md_info->block_size ) ) != 0 )
 8026136:	6822      	ldr	r2, [r4, #0]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8026138:	eb07 0108 	add.w	r1, r7, r8
    switch( ctx->md_info->type )
 802613c:	7913      	ldrb	r3, [r2, #4]
    if( ( ret = mbedtls_md_update( ctx, opad,
 802613e:	7992      	ldrb	r2, [r2, #6]
    switch( ctx->md_info->type )
 8026140:	2b03      	cmp	r3, #3
 8026142:	d02d      	beq.n	80261a0 <mbedtls_md_hmac_finish+0xcc>
 8026144:	3b05      	subs	r3, #5
 8026146:	2b01      	cmp	r3, #1
 8026148:	d8e6      	bhi.n	8026118 <mbedtls_md_hmac_finish+0x44>
            return( mbedtls_sha256_update_ret( ctx->md_ctx, input, ilen ) );
 802614a:	6860      	ldr	r0, [r4, #4]
 802614c:	f004 fc12 	bl	802a974 <mbedtls_sha256_update_ret>
    if( ( ret = mbedtls_md_update( ctx, opad,
 8026150:	2800      	cmp	r0, #0
 8026152:	d1e2      	bne.n	802611a <mbedtls_md_hmac_finish+0x46>
                                   ctx->md_info->size ) ) != 0 )
 8026154:	6822      	ldr	r2, [r4, #0]
    switch( ctx->md_info->type )
 8026156:	7913      	ldrb	r3, [r2, #4]
    if( ( ret = mbedtls_md_update( ctx, tmp,
 8026158:	7952      	ldrb	r2, [r2, #5]
    switch( ctx->md_info->type )
 802615a:	2b03      	cmp	r3, #3
 802615c:	d029      	beq.n	80261b2 <mbedtls_md_hmac_finish+0xde>
 802615e:	3b05      	subs	r3, #5
 8026160:	2b01      	cmp	r3, #1
 8026162:	d8d9      	bhi.n	8026118 <mbedtls_md_hmac_finish+0x44>
            return( mbedtls_sha256_update_ret( ctx->md_ctx, input, ilen ) );
 8026164:	4631      	mov	r1, r6
 8026166:	6860      	ldr	r0, [r4, #4]
 8026168:	f004 fc04 	bl	802a974 <mbedtls_sha256_update_ret>
    if( ( ret = mbedtls_md_update( ctx, tmp,
 802616c:	2800      	cmp	r0, #0
 802616e:	d1d4      	bne.n	802611a <mbedtls_md_hmac_finish+0x46>
    if( ctx == NULL || ctx->md_info == NULL )
 8026170:	6823      	ldr	r3, [r4, #0]
 8026172:	2b00      	cmp	r3, #0
 8026174:	d0d0      	beq.n	8026118 <mbedtls_md_hmac_finish+0x44>
    switch( ctx->md_info->type )
 8026176:	791b      	ldrb	r3, [r3, #4]
 8026178:	2b03      	cmp	r3, #3
 802617a:	d015      	beq.n	80261a8 <mbedtls_md_hmac_finish+0xd4>
 802617c:	3b05      	subs	r3, #5
 802617e:	2b01      	cmp	r3, #1
 8026180:	d8ca      	bhi.n	8026118 <mbedtls_md_hmac_finish+0x44>
            return( mbedtls_sha256_finish_ret( ctx->md_ctx, output ) );
 8026182:	4629      	mov	r1, r5
 8026184:	6860      	ldr	r0, [r4, #4]
 8026186:	f004 fbfb 	bl	802a980 <mbedtls_sha256_finish_ret>
 802618a:	e7c6      	b.n	802611a <mbedtls_md_hmac_finish+0x46>
            return( mbedtls_sha256_starts_ret( ctx->md_ctx, 0 ) );
 802618c:	4601      	mov	r1, r0
 802618e:	6860      	ldr	r0, [r4, #4]
 8026190:	f003 fe96 	bl	8029ec0 <mbedtls_sha256_starts_ret>
 8026194:	e7cd      	b.n	8026132 <mbedtls_md_hmac_finish+0x5e>
            return( mbedtls_sha256_starts_ret( ctx->md_ctx, 1 ) );
 8026196:	2101      	movs	r1, #1
 8026198:	6860      	ldr	r0, [r4, #4]
 802619a:	f003 fe91 	bl	8029ec0 <mbedtls_sha256_starts_ret>
 802619e:	e7c8      	b.n	8026132 <mbedtls_md_hmac_finish+0x5e>
            return( mbedtls_md5_update_ret( ctx->md_ctx, input, ilen ) );
 80261a0:	6860      	ldr	r0, [r4, #4]
 80261a2:	f000 fc33 	bl	8026a0c <mbedtls_md5_update_ret>
 80261a6:	e7d3      	b.n	8026150 <mbedtls_md_hmac_finish+0x7c>
            return( mbedtls_md5_finish_ret( ctx->md_ctx, output ) );
 80261a8:	4629      	mov	r1, r5
 80261aa:	6860      	ldr	r0, [r4, #4]
 80261ac:	f000 fc34 	bl	8026a18 <mbedtls_md5_finish_ret>
 80261b0:	e7b3      	b.n	802611a <mbedtls_md_hmac_finish+0x46>
            return( mbedtls_md5_update_ret( ctx->md_ctx, input, ilen ) );
 80261b2:	4631      	mov	r1, r6
 80261b4:	6860      	ldr	r0, [r4, #4]
 80261b6:	f000 fc29 	bl	8026a0c <mbedtls_md5_update_ret>
 80261ba:	e7d7      	b.n	802616c <mbedtls_md_hmac_finish+0x98>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80261bc:	4800      	ldr	r0, [pc, #0]	; (80261c0 <mbedtls_md_hmac_finish+0xec>)
}
 80261be:	4770      	bx	lr
 80261c0:	ffffaf00 	.word	0xffffaf00

080261c4 <mbedtls_md_hmac_reset>:
int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 80261c4:	b388      	cbz	r0, 802622a <mbedtls_md_hmac_reset+0x66>
{
 80261c6:	b538      	push	{r3, r4, r5, lr}
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 80261c8:	6803      	ldr	r3, [r0, #0]
 80261ca:	4604      	mov	r4, r0
 80261cc:	b143      	cbz	r3, 80261e0 <mbedtls_md_hmac_reset+0x1c>
 80261ce:	6885      	ldr	r5, [r0, #8]
 80261d0:	b135      	cbz	r5, 80261e0 <mbedtls_md_hmac_reset+0x1c>
    switch( ctx->md_info->type )
 80261d2:	791b      	ldrb	r3, [r3, #4]
 80261d4:	2b05      	cmp	r3, #5
 80261d6:	d01d      	beq.n	8026214 <mbedtls_md_hmac_reset+0x50>
 80261d8:	2b06      	cmp	r3, #6
 80261da:	d016      	beq.n	802620a <mbedtls_md_hmac_reset+0x46>
 80261dc:	2b03      	cmp	r3, #3
 80261de:	d001      	beq.n	80261e4 <mbedtls_md_hmac_reset+0x20>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80261e0:	4813      	ldr	r0, [pc, #76]	; (8026230 <mbedtls_md_hmac_reset+0x6c>)
    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = mbedtls_md_starts( ctx ) ) != 0 )
        return( ret );
    return( mbedtls_md_update( ctx, ipad, ctx->md_info->block_size ) );
}
 80261e2:	bd38      	pop	{r3, r4, r5, pc}
            return( mbedtls_md5_starts_ret( ctx->md_ctx ) );
 80261e4:	6840      	ldr	r0, [r0, #4]
 80261e6:	f000 f83d 	bl	8026264 <mbedtls_md5_starts_ret>
    if( ( ret = mbedtls_md_starts( ctx ) ) != 0 )
 80261ea:	2800      	cmp	r0, #0
 80261ec:	d1f9      	bne.n	80261e2 <mbedtls_md_hmac_reset+0x1e>
    return( mbedtls_md_update( ctx, ipad, ctx->md_info->block_size ) );
 80261ee:	6822      	ldr	r2, [r4, #0]
    switch( ctx->md_info->type )
 80261f0:	7913      	ldrb	r3, [r2, #4]
    return( mbedtls_md_update( ctx, ipad, ctx->md_info->block_size ) );
 80261f2:	7992      	ldrb	r2, [r2, #6]
    switch( ctx->md_info->type )
 80261f4:	2b03      	cmp	r3, #3
 80261f6:	d012      	beq.n	802621e <mbedtls_md_hmac_reset+0x5a>
 80261f8:	3b05      	subs	r3, #5
 80261fa:	2b01      	cmp	r3, #1
 80261fc:	d8f0      	bhi.n	80261e0 <mbedtls_md_hmac_reset+0x1c>
            return( mbedtls_sha256_update_ret( ctx->md_ctx, input, ilen ) );
 80261fe:	4629      	mov	r1, r5
 8026200:	6860      	ldr	r0, [r4, #4]
}
 8026202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            return( mbedtls_sha256_update_ret( ctx->md_ctx, input, ilen ) );
 8026206:	f004 bbb5 	b.w	802a974 <mbedtls_sha256_update_ret>
            return( mbedtls_sha256_starts_ret( ctx->md_ctx, 0 ) );
 802620a:	2100      	movs	r1, #0
 802620c:	6840      	ldr	r0, [r0, #4]
 802620e:	f003 fe57 	bl	8029ec0 <mbedtls_sha256_starts_ret>
 8026212:	e7ea      	b.n	80261ea <mbedtls_md_hmac_reset+0x26>
            return( mbedtls_sha256_starts_ret( ctx->md_ctx, 1 ) );
 8026214:	2101      	movs	r1, #1
 8026216:	6840      	ldr	r0, [r0, #4]
 8026218:	f003 fe52 	bl	8029ec0 <mbedtls_sha256_starts_ret>
 802621c:	e7e5      	b.n	80261ea <mbedtls_md_hmac_reset+0x26>
            return( mbedtls_md5_update_ret( ctx->md_ctx, input, ilen ) );
 802621e:	4629      	mov	r1, r5
 8026220:	6860      	ldr	r0, [r4, #4]
}
 8026222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            return( mbedtls_md5_update_ret( ctx->md_ctx, input, ilen ) );
 8026226:	f000 bbf1 	b.w	8026a0c <mbedtls_md5_update_ret>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 802622a:	4801      	ldr	r0, [pc, #4]	; (8026230 <mbedtls_md_hmac_reset+0x6c>)
}
 802622c:	4770      	bx	lr
 802622e:	bf00      	nop
 8026230:	ffffaf00 	.word	0xffffaf00

08026234 <mbedtls_md_get_size>:
    }
}

unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
 8026234:	b100      	cbz	r0, 8026238 <mbedtls_md_get_size+0x4>
        return( 0 );

    return md_info->size;
 8026236:	7940      	ldrb	r0, [r0, #5]
}
 8026238:	4770      	bx	lr
 802623a:	bf00      	nop

0802623c <mbedtls_md_get_type>:

mbedtls_md_type_t mbedtls_md_get_type( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
 802623c:	b100      	cbz	r0, 8026240 <mbedtls_md_get_type+0x4>
        return( MBEDTLS_MD_NONE );

    return md_info->type;
 802623e:	7900      	ldrb	r0, [r0, #4]
}
 8026240:	4770      	bx	lr
 8026242:	bf00      	nop

08026244 <mbedtls_md5_init>:
}
#endif

void mbedtls_md5_init( mbedtls_md5_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_md5_context ) );
 8026244:	2258      	movs	r2, #88	; 0x58
 8026246:	2100      	movs	r1, #0
 8026248:	f009 be0d 	b.w	802fe66 <memset>

0802624c <mbedtls_md5_free>:
}

void mbedtls_md5_free( mbedtls_md5_context *ctx )
{
    if( ctx == NULL )
 802624c:	b110      	cbz	r0, 8026254 <mbedtls_md5_free+0x8>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md5_context ) );
 802624e:	2158      	movs	r1, #88	; 0x58
 8026250:	f001 bc6c 	b.w	8027b2c <mbedtls_platform_zeroize>
}
 8026254:	4770      	bx	lr
 8026256:	bf00      	nop

08026258 <mbedtls_md5_clone>:

void mbedtls_md5_clone( mbedtls_md5_context *dst,
                        const mbedtls_md5_context *src )
{
 8026258:	b508      	push	{r3, lr}
    *dst = *src;
 802625a:	2258      	movs	r2, #88	; 0x58
 802625c:	f009 fddc 	bl	802fe18 <memcpy>
}
 8026260:	bd08      	pop	{r3, pc}
 8026262:	bf00      	nop

08026264 <mbedtls_md5_starts_ret>:
/*
 * MD5 context setup
 */
int mbedtls_md5_starts_ret( mbedtls_md5_context *ctx )
{
    ctx->total[0] = 0;
 8026264:	2300      	movs	r3, #0
{
 8026266:	b430      	push	{r4, r5}
    ctx->total[1] = 0;

    ctx->state[0] = 0x67452301;
    ctx->state[1] = 0xEFCDAB89;
    ctx->state[2] = 0x98BADCFE;
 8026268:	4906      	ldr	r1, [pc, #24]	; (8026284 <mbedtls_md5_starts_ret+0x20>)
    ctx->state[0] = 0x67452301;
 802626a:	4d07      	ldr	r5, [pc, #28]	; (8026288 <mbedtls_md5_starts_ret+0x24>)
    ctx->state[1] = 0xEFCDAB89;
 802626c:	4c07      	ldr	r4, [pc, #28]	; (802628c <mbedtls_md5_starts_ret+0x28>)
    ctx->state[3] = 0x10325476;
 802626e:	4a08      	ldr	r2, [pc, #32]	; (8026290 <mbedtls_md5_starts_ret+0x2c>)
    ctx->state[1] = 0xEFCDAB89;
 8026270:	e9c0 5402 	strd	r5, r4, [r0, #8]

    return( 0 );
}
 8026274:	bc30      	pop	{r4, r5}
    ctx->state[3] = 0x10325476;
 8026276:	e9c0 1204 	strd	r1, r2, [r0, #16]
    ctx->total[1] = 0;
 802627a:	e9c0 3300 	strd	r3, r3, [r0]
}
 802627e:	4618      	mov	r0, r3
 8026280:	4770      	bx	lr
 8026282:	bf00      	nop
 8026284:	98badcfe 	.word	0x98badcfe
 8026288:	67452301 	.word	0x67452301
 802628c:	efcdab89 	.word	0xefcdab89
 8026290:	10325476 	.word	0x10325476

08026294 <mbedtls_internal_md5_process>:
#endif

#if !defined(MBEDTLS_MD5_PROCESS_ALT)
int mbedtls_internal_md5_process( mbedtls_md5_context *ctx,
                                  const unsigned char data[64] )
{
 8026294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    C = ctx->state[2];
    D = ctx->state[3];

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))

    P( A, B, C, D,  0,  7, 0xD76AA478 );
 8026298:	e9d0 2404 	ldrd	r2, r4, [r0, #16]
 802629c:	4bdd      	ldr	r3, [pc, #884]	; (8026614 <mbedtls_internal_md5_process+0x380>)
 802629e:	ea82 0c04 	eor.w	ip, r2, r4
 80262a2:	6884      	ldr	r4, [r0, #8]
    B = ctx->state[1];
 80262a4:	f8d0 900c 	ldr.w	r9, [r0, #12]
    GET_UINT32_LE( X[ 0], data,  0 );
 80262a8:	680a      	ldr	r2, [r1, #0]
 80262aa:	4423      	add	r3, r4
    P( A, B, C, D,  0,  7, 0xD76AA478 );
 80262ac:	6944      	ldr	r4, [r0, #20]
 80262ae:	ea0c 0c09 	and.w	ip, ip, r9
 80262b2:	4413      	add	r3, r2
 80262b4:	ea8c 0c04 	eor.w	ip, ip, r4
    P( D, A, B, C,  1, 12, 0xE8C7B756 );
 80262b8:	6905      	ldr	r5, [r0, #16]
 80262ba:	6946      	ldr	r6, [r0, #20]
    P( A, B, C, D,  0,  7, 0xD76AA478 );
 80262bc:	449c      	add	ip, r3
 80262be:	4bd6      	ldr	r3, [pc, #856]	; (8026618 <mbedtls_internal_md5_process+0x384>)
 80262c0:	eb09 6c7c 	add.w	ip, r9, ip, ror #25
    P( D, A, B, C,  1, 12, 0xE8C7B756 );
 80262c4:	ea89 0705 	eor.w	r7, r9, r5
 80262c8:	4433      	add	r3, r6
    GET_UINT32_LE( X[ 1], data,  4 );
 80262ca:	684d      	ldr	r5, [r1, #4]
    P( D, A, B, C,  1, 12, 0xE8C7B756 );
 80262cc:	6906      	ldr	r6, [r0, #16]
 80262ce:	ea07 070c 	and.w	r7, r7, ip
{
 80262d2:	b08d      	sub	sp, #52	; 0x34
 80262d4:	442b      	add	r3, r5
    P( D, A, B, C,  1, 12, 0xE8C7B756 );
 80262d6:	4077      	eors	r7, r6
 80262d8:	9501      	str	r5, [sp, #4]
 80262da:	441f      	add	r7, r3
 80262dc:	6905      	ldr	r5, [r0, #16]
 80262de:	4bcf      	ldr	r3, [pc, #828]	; (802661c <mbedtls_internal_md5_process+0x388>)
 80262e0:	eb0c 5737 	add.w	r7, ip, r7, ror #20
 80262e4:	9200      	str	r2, [sp, #0]
    P( C, D, A, B,  2, 17, 0x242070DB );
 80262e6:	ea89 040c 	eor.w	r4, r9, ip
    GET_UINT32_LE( X[ 2], data,  8 );
 80262ea:	688a      	ldr	r2, [r1, #8]
    P( C, D, A, B,  2, 17, 0x242070DB );
 80262ec:	403c      	ands	r4, r7
 80262ee:	442b      	add	r3, r5
 80262f0:	4413      	add	r3, r2
 80262f2:	ea84 0409 	eor.w	r4, r4, r9
 80262f6:	441c      	add	r4, r3
 80262f8:	4bc9      	ldr	r3, [pc, #804]	; (8026620 <mbedtls_internal_md5_process+0x38c>)
 80262fa:	eb07 34f4 	add.w	r4, r7, r4, ror #15
    GET_UINT32_LE( X[ 3], data, 12 );
 80262fe:	68cd      	ldr	r5, [r1, #12]
 8026300:	9202      	str	r2, [sp, #8]
    P( B, C, D, A,  3, 22, 0xC1BDCEEE );
 8026302:	ea8c 0207 	eor.w	r2, ip, r7
 8026306:	4022      	ands	r2, r4
 8026308:	444b      	add	r3, r9
 802630a:	442b      	add	r3, r5
 802630c:	ea82 020c 	eor.w	r2, r2, ip
 8026310:	441a      	add	r2, r3
 8026312:	4ec4      	ldr	r6, [pc, #784]	; (8026624 <mbedtls_internal_md5_process+0x390>)
    GET_UINT32_LE( X[ 4], data, 16 );
 8026314:	690b      	ldr	r3, [r1, #16]
    P( B, C, D, A,  3, 22, 0xC1BDCEEE );
 8026316:	eb04 22b2 	add.w	r2, r4, r2, ror #10
 802631a:	9503      	str	r5, [sp, #12]
    P( A, B, C, D,  4,  7, 0xF57C0FAF );
 802631c:	ea87 0504 	eor.w	r5, r7, r4
 8026320:	441e      	add	r6, r3
 8026322:	4015      	ands	r5, r2
 8026324:	9304      	str	r3, [sp, #16]
 8026326:	44b4      	add	ip, r6
 8026328:	ea85 0307 	eor.w	r3, r5, r7
 802632c:	4463      	add	r3, ip
    GET_UINT32_LE( X[ 5], data, 20 );
 802632e:	694d      	ldr	r5, [r1, #20]
 8026330:	4ebd      	ldr	r6, [pc, #756]	; (8026628 <mbedtls_internal_md5_process+0x394>)
    P( A, B, C, D,  4,  7, 0xF57C0FAF );
 8026332:	eb02 6373 	add.w	r3, r2, r3, ror #25
    P( D, A, B, C,  5, 12, 0x4787C62A );
 8026336:	ea84 0e02 	eor.w	lr, r4, r2
 802633a:	9505      	str	r5, [sp, #20]
 802633c:	442e      	add	r6, r5
 802633e:	ea0e 0503 	and.w	r5, lr, r3
 8026342:	4437      	add	r7, r6
 8026344:	ea85 0604 	eor.w	r6, r5, r4
 8026348:	443e      	add	r6, r7
 802634a:	4db8      	ldr	r5, [pc, #736]	; (802662c <mbedtls_internal_md5_process+0x398>)
    GET_UINT32_LE( X[ 6], data, 24 );
 802634c:	698f      	ldr	r7, [r1, #24]
    P( D, A, B, C,  5, 12, 0x4787C62A );
 802634e:	eb03 5636 	add.w	r6, r3, r6, ror #20
    P( C, D, A, B,  6, 17, 0xA8304613 );
 8026352:	ea82 0e03 	eor.w	lr, r2, r3
 8026356:	9706      	str	r7, [sp, #24]
 8026358:	443d      	add	r5, r7
 802635a:	ea0e 0706 	and.w	r7, lr, r6
 802635e:	442c      	add	r4, r5
 8026360:	ea87 0502 	eor.w	r5, r7, r2
 8026364:	4425      	add	r5, r4
 8026366:	eb06 35f5 	add.w	r5, r6, r5, ror #15
    P( B, C, D, A,  7, 22, 0xFD469501 );
 802636a:	ea83 0406 	eor.w	r4, r3, r6
    GET_UINT32_LE( X[ 7], data, 28 );
 802636e:	f8d1 b01c 	ldr.w	fp, [r1, #28]
    P( B, C, D, A,  7, 22, 0xFD469501 );
 8026372:	402c      	ands	r4, r5
 8026374:	4fae      	ldr	r7, [pc, #696]	; (8026630 <mbedtls_internal_md5_process+0x39c>)
 8026376:	ea84 0e03 	eor.w	lr, r4, r3
    GET_UINT32_LE( X[ 8], data, 32 );
 802637a:	6a0c      	ldr	r4, [r1, #32]
 802637c:	445f      	add	r7, fp
 802637e:	443a      	add	r2, r7
 8026380:	4627      	mov	r7, r4
    P( B, C, D, A,  7, 22, 0xFD469501 );
 8026382:	4496      	add	lr, r2
 8026384:	4cab      	ldr	r4, [pc, #684]	; (8026634 <mbedtls_internal_md5_process+0x3a0>)
 8026386:	eb05 2ebe 	add.w	lr, r5, lr, ror #10
    P( A, B, C, D,  8,  7, 0x698098D8 );
 802638a:	ea86 0205 	eor.w	r2, r6, r5
 802638e:	443c      	add	r4, r7
 8026390:	ea02 020e 	and.w	r2, r2, lr
 8026394:	4423      	add	r3, r4
 8026396:	ea82 0c06 	eor.w	ip, r2, r6
 802639a:	449c      	add	ip, r3
 802639c:	4aa6      	ldr	r2, [pc, #664]	; (8026638 <mbedtls_internal_md5_process+0x3a4>)
    GET_UINT32_LE( X[ 9], data, 36 );
 802639e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    P( A, B, C, D,  8,  7, 0x698098D8 );
 80263a0:	eb0e 6c7c 	add.w	ip, lr, ip, ror #25
    P( D, A, B, C,  9, 12, 0x8B44F7AF );
 80263a4:	ea85 080e 	eor.w	r8, r5, lr
 80263a8:	441a      	add	r2, r3
 80263aa:	ea08 080c 	and.w	r8, r8, ip
    GET_UINT32_LE( X[11], data, 44 );
 80263ae:	9308      	str	r3, [sp, #32]
 80263b0:	4416      	add	r6, r2
    GET_UINT32_LE( X[10], data, 40 );
 80263b2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    P( D, A, B, C,  9, 12, 0x8B44F7AF );
 80263b4:	ea88 0805 	eor.w	r8, r8, r5
 80263b8:	44b0      	add	r8, r6
 80263ba:	eb0c 5838 	add.w	r8, ip, r8, ror #20
 80263be:	9309      	str	r3, [sp, #36]	; 0x24
 80263c0:	f5a3 4224 	sub.w	r2, r3, #41984	; 0xa400
    P( C, D, A, B, 10, 17, 0xFFFF5BB1 );
 80263c4:	ea8e 030c 	eor.w	r3, lr, ip
 80263c8:	ea03 0308 	and.w	r3, r3, r8
 80263cc:	3a4f      	subs	r2, #79	; 0x4f
 80263ce:	4415      	add	r5, r2
 80263d0:	ea83 040e 	eor.w	r4, r3, lr
    GET_UINT32_LE( X[11], data, 44 );
 80263d4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    P( C, D, A, B, 10, 17, 0xFFFF5BB1 );
 80263d6:	442c      	add	r4, r5
 80263d8:	4e98      	ldr	r6, [pc, #608]	; (802663c <mbedtls_internal_md5_process+0x3a8>)
 80263da:	eb08 34f4 	add.w	r4, r8, r4, ror #15
    P( B, C, D, A, 11, 22, 0x895CD7BE );
 80263de:	ea8c 0308 	eor.w	r3, ip, r8
 80263e2:	4416      	add	r6, r2
 80263e4:	4023      	ands	r3, r4
 80263e6:	9707      	str	r7, [sp, #28]
 80263e8:	44b6      	add	lr, r6
 80263ea:	920a      	str	r2, [sp, #40]	; 0x28
 80263ec:	ea83 020c 	eor.w	r2, r3, ip
 80263f0:	4472      	add	r2, lr
    GET_UINT32_LE( X[12], data, 48 );
 80263f2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80263f4:	4e92      	ldr	r6, [pc, #584]	; (8026640 <mbedtls_internal_md5_process+0x3ac>)
    P( B, C, D, A, 11, 22, 0x895CD7BE );
 80263f6:	eb04 22b2 	add.w	r2, r4, r2, ror #10
    P( A, B, C, D, 12,  7, 0x6B901122 );
 80263fa:	ea88 0504 	eor.w	r5, r8, r4
 80263fe:	441e      	add	r6, r3
 8026400:	4015      	ands	r5, r2
 8026402:	930b      	str	r3, [sp, #44]	; 0x2c
 8026404:	44b4      	add	ip, r6
 8026406:	ea85 0308 	eor.w	r3, r5, r8
    GET_UINT32_LE( X[13], data, 52 );
 802640a:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
    P( A, B, C, D, 12,  7, 0x6B901122 );
 802640e:	4463      	add	r3, ip
 8026410:	4e8c      	ldr	r6, [pc, #560]	; (8026644 <mbedtls_internal_md5_process+0x3b0>)
 8026412:	eb02 6373 	add.w	r3, r2, r3, ror #25
    P( D, A, B, C, 13, 12, 0xFD987193 );
 8026416:	ea84 0502 	eor.w	r5, r4, r2
 802641a:	4476      	add	r6, lr
 802641c:	401d      	ands	r5, r3
 802641e:	44b0      	add	r8, r6
 8026420:	ea85 0604 	eor.w	r6, r5, r4
    GET_UINT32_LE( X[14], data, 56 );
 8026424:	f8d1 a038 	ldr.w	sl, [r1, #56]	; 0x38
    P( D, A, B, C, 13, 12, 0xFD987193 );
 8026428:	4446      	add	r6, r8
 802642a:	f8df c264 	ldr.w	ip, [pc, #612]	; 8026690 <mbedtls_internal_md5_process+0x3fc>
 802642e:	eb03 5636 	add.w	r6, r3, r6, ror #20
    P( C, D, A, B, 14, 17, 0xA679438E );
 8026432:	ea82 0503 	eor.w	r5, r2, r3
 8026436:	44d4      	add	ip, sl
 8026438:	4035      	ands	r5, r6
 802643a:	4464      	add	r4, ip
 802643c:	4055      	eors	r5, r2
    GET_UINT32_LE( X[15], data, 60 );
 802643e:	f8d1 803c 	ldr.w	r8, [r1, #60]	; 0x3c
    P( C, D, A, B, 14, 17, 0xA679438E );
 8026442:	4425      	add	r5, r4
 8026444:	4c80      	ldr	r4, [pc, #512]	; (8026648 <mbedtls_internal_md5_process+0x3b4>)
 8026446:	eb06 35f5 	add.w	r5, r6, r5, ror #15
    P( B, C, D, A, 15, 22, 0x49B40821 );
 802644a:	ea83 0106 	eor.w	r1, r3, r6
 802644e:	4444      	add	r4, r8
 8026450:	4029      	ands	r1, r5
 8026452:	4059      	eors	r1, r3
 8026454:	4422      	add	r2, r4
 8026456:	440a      	add	r2, r1
 8026458:	eb05 22b2 	add.w	r2, r5, r2, ror #10

#undef F

#define F(x,y,z) ((y) ^ ((z) & ((x) ^ (y))))

    P( A, B, C, D,  1,  5, 0xF61E2562 );
 802645c:	9f01      	ldr	r7, [sp, #4]
 802645e:	4c7b      	ldr	r4, [pc, #492]	; (802664c <mbedtls_internal_md5_process+0x3b8>)
 8026460:	ea85 0102 	eor.w	r1, r5, r2
 8026464:	443c      	add	r4, r7
 8026466:	4031      	ands	r1, r6
 8026468:	4069      	eors	r1, r5
 802646a:	4423      	add	r3, r4
 802646c:	440b      	add	r3, r1
 802646e:	eb02 6cf3 	add.w	ip, r2, r3, ror #27
    P( D, A, B, C,  6,  9, 0xC040B340 );
 8026472:	9c06      	ldr	r4, [sp, #24]
 8026474:	4976      	ldr	r1, [pc, #472]	; (8026650 <mbedtls_internal_md5_process+0x3bc>)
 8026476:	ea82 030c 	eor.w	r3, r2, ip
 802647a:	4421      	add	r1, r4
 802647c:	402b      	ands	r3, r5
 802647e:	4053      	eors	r3, r2
 8026480:	440e      	add	r6, r1
 8026482:	441e      	add	r6, r3
 8026484:	eb0c 56f6 	add.w	r6, ip, r6, ror #23
    P( C, D, A, B, 11, 14, 0x265E5A51 );
 8026488:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802648a:	4972      	ldr	r1, [pc, #456]	; (8026654 <mbedtls_internal_md5_process+0x3c0>)
 802648c:	ea8c 0306 	eor.w	r3, ip, r6
 8026490:	4421      	add	r1, r4
 8026492:	4013      	ands	r3, r2
 8026494:	ea83 030c 	eor.w	r3, r3, ip
 8026498:	440d      	add	r5, r1
 802649a:	441d      	add	r5, r3
 802649c:	eb06 44b5 	add.w	r4, r6, r5, ror #18
    P( B, C, D, A,  0, 20, 0xE9B6C7AA );
 80264a0:	496d      	ldr	r1, [pc, #436]	; (8026658 <mbedtls_internal_md5_process+0x3c4>)
 80264a2:	9d00      	ldr	r5, [sp, #0]
 80264a4:	ea86 0304 	eor.w	r3, r6, r4
 80264a8:	4429      	add	r1, r5
 80264aa:	ea03 030c 	and.w	r3, r3, ip
 80264ae:	4073      	eors	r3, r6
 80264b0:	440a      	add	r2, r1
 80264b2:	441a      	add	r2, r3
 80264b4:	eb04 3232 	add.w	r2, r4, r2, ror #12
    P( A, B, C, D,  5,  5, 0xD62F105D );
 80264b8:	9d05      	ldr	r5, [sp, #20]
 80264ba:	4b68      	ldr	r3, [pc, #416]	; (802665c <mbedtls_internal_md5_process+0x3c8>)
 80264bc:	ea84 0102 	eor.w	r1, r4, r2
 80264c0:	442b      	add	r3, r5
 80264c2:	4031      	ands	r1, r6
 80264c4:	4061      	eors	r1, r4
 80264c6:	449c      	add	ip, r3
 80264c8:	eb01 030c 	add.w	r3, r1, ip
 80264cc:	eb02 63f3 	add.w	r3, r2, r3, ror #27
    P( D, A, B, C, 10,  9, 0x02441453 );
 80264d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80264d2:	4963      	ldr	r1, [pc, #396]	; (8026660 <mbedtls_internal_md5_process+0x3cc>)
 80264d4:	ea82 0503 	eor.w	r5, r2, r3
 80264d8:	4439      	add	r1, r7
 80264da:	4025      	ands	r5, r4
 80264dc:	4055      	eors	r5, r2
 80264de:	440e      	add	r6, r1
 80264e0:	19a9      	adds	r1, r5, r6
 80264e2:	eb03 51f1 	add.w	r1, r3, r1, ror #23
    P( C, D, A, B, 15, 14, 0xD8A1E681 );
 80264e6:	4d5f      	ldr	r5, [pc, #380]	; (8026664 <mbedtls_internal_md5_process+0x3d0>)
 80264e8:	ea83 0601 	eor.w	r6, r3, r1
 80264ec:	4445      	add	r5, r8
 80264ee:	4016      	ands	r6, r2
 80264f0:	405e      	eors	r6, r3
 80264f2:	442c      	add	r4, r5
 80264f4:	1935      	adds	r5, r6, r4
 80264f6:	eb01 45b5 	add.w	r5, r1, r5, ror #18
    P( B, C, D, A,  4, 20, 0xE7D3FBC8 );
 80264fa:	9f04      	ldr	r7, [sp, #16]
 80264fc:	4e5a      	ldr	r6, [pc, #360]	; (8026668 <mbedtls_internal_md5_process+0x3d4>)
 80264fe:	ea81 0405 	eor.w	r4, r1, r5
 8026502:	443e      	add	r6, r7
 8026504:	401c      	ands	r4, r3
 8026506:	404c      	eors	r4, r1
 8026508:	4432      	add	r2, r6
 802650a:	4422      	add	r2, r4
 802650c:	eb05 3232 	add.w	r2, r5, r2, ror #12
    P( A, B, C, D,  9,  5, 0x21E1CDE6 );
 8026510:	9f08      	ldr	r7, [sp, #32]
 8026512:	4e56      	ldr	r6, [pc, #344]	; (802666c <mbedtls_internal_md5_process+0x3d8>)
 8026514:	ea85 0402 	eor.w	r4, r5, r2
 8026518:	443e      	add	r6, r7
 802651a:	400c      	ands	r4, r1
 802651c:	406c      	eors	r4, r5
 802651e:	4433      	add	r3, r6
 8026520:	4423      	add	r3, r4
 8026522:	eb02 6cf3 	add.w	ip, r2, r3, ror #27
    P( D, A, B, C, 14,  9, 0xC33707D6 );
 8026526:	4c52      	ldr	r4, [pc, #328]	; (8026670 <mbedtls_internal_md5_process+0x3dc>)
 8026528:	ea82 030c 	eor.w	r3, r2, ip
 802652c:	4454      	add	r4, sl
 802652e:	402b      	ands	r3, r5
 8026530:	4053      	eors	r3, r2
 8026532:	4421      	add	r1, r4
 8026534:	4419      	add	r1, r3
 8026536:	eb0c 56f1 	add.w	r6, ip, r1, ror #23
    P( C, D, A, B,  3, 14, 0xF4D50D87 );
 802653a:	9c03      	ldr	r4, [sp, #12]
 802653c:	494d      	ldr	r1, [pc, #308]	; (8026674 <mbedtls_internal_md5_process+0x3e0>)
 802653e:	ea8c 0306 	eor.w	r3, ip, r6
 8026542:	4421      	add	r1, r4
 8026544:	4013      	ands	r3, r2
 8026546:	ea83 030c 	eor.w	r3, r3, ip
 802654a:	440d      	add	r5, r1
 802654c:	441d      	add	r5, r3
 802654e:	eb06 44b5 	add.w	r4, r6, r5, ror #18
    P( B, C, D, A,  8, 20, 0x455A14ED );
 8026552:	4949      	ldr	r1, [pc, #292]	; (8026678 <mbedtls_internal_md5_process+0x3e4>)
 8026554:	9d07      	ldr	r5, [sp, #28]
 8026556:	ea86 0304 	eor.w	r3, r6, r4
 802655a:	4429      	add	r1, r5
 802655c:	ea03 030c 	and.w	r3, r3, ip
 8026560:	4073      	eors	r3, r6
 8026562:	440a      	add	r2, r1
 8026564:	441a      	add	r2, r3
 8026566:	eb04 3232 	add.w	r2, r4, r2, ror #12
    P( A, B, C, D, 13,  5, 0xA9E3E905 );
 802656a:	4b44      	ldr	r3, [pc, #272]	; (802667c <mbedtls_internal_md5_process+0x3e8>)
 802656c:	ea84 0102 	eor.w	r1, r4, r2
 8026570:	4473      	add	r3, lr
 8026572:	4031      	ands	r1, r6
 8026574:	4061      	eors	r1, r4
 8026576:	449c      	add	ip, r3
 8026578:	eb01 030c 	add.w	r3, r1, ip
 802657c:	eb02 63f3 	add.w	r3, r2, r3, ror #27
    P( D, A, B, C,  2,  9, 0xFCEFA3F8 );
 8026580:	9f02      	ldr	r7, [sp, #8]
 8026582:	f8df c110 	ldr.w	ip, [pc, #272]	; 8026694 <mbedtls_internal_md5_process+0x400>
 8026586:	ea82 0503 	eor.w	r5, r2, r3
 802658a:	44bc      	add	ip, r7
 802658c:	4025      	ands	r5, r4
 802658e:	4466      	add	r6, ip
 8026590:	4055      	eors	r5, r2
 8026592:	19a9      	adds	r1, r5, r6
 8026594:	eb03 51f1 	add.w	r1, r3, r1, ror #23
    P( C, D, A, B,  7, 14, 0x676F02D9 );
 8026598:	4d39      	ldr	r5, [pc, #228]	; (8026680 <mbedtls_internal_md5_process+0x3ec>)
 802659a:	ea83 0601 	eor.w	r6, r3, r1
 802659e:	445d      	add	r5, fp
 80265a0:	4016      	ands	r6, r2
 80265a2:	405e      	eors	r6, r3
 80265a4:	442c      	add	r4, r5
 80265a6:	1935      	adds	r5, r6, r4
 80265a8:	eb01 45b5 	add.w	r5, r1, r5, ror #18
    P( B, C, D, A, 12, 20, 0x8D2A4C8A );
 80265ac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80265ae:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8026698 <mbedtls_internal_md5_process+0x404>
 80265b2:	ea81 0405 	eor.w	r4, r1, r5
 80265b6:	44b4      	add	ip, r6
 80265b8:	ea04 0603 	and.w	r6, r4, r3
 80265bc:	4462      	add	r2, ip
 80265be:	404e      	eors	r6, r1
 80265c0:	4416      	add	r6, r2
 80265c2:	9a05      	ldr	r2, [sp, #20]
 80265c4:	eb05 3636 	add.w	r6, r5, r6, ror #12

#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))

    P( A, B, C, D,  5,  4, 0xFFFA3942 );
 80265c8:	f5a2 22b8 	sub.w	r2, r2, #376832	; 0x5c000
 80265cc:	f2a2 62be 	subw	r2, r2, #1726	; 0x6be
 80265d0:	441a      	add	r2, r3
 80265d2:	4074      	eors	r4, r6
 80265d4:	4414      	add	r4, r2
 80265d6:	4b2b      	ldr	r3, [pc, #172]	; (8026684 <mbedtls_internal_md5_process+0x3f0>)
 80265d8:	9a07      	ldr	r2, [sp, #28]
 80265da:	eb06 7434 	add.w	r4, r6, r4, ror #28
    P( D, A, B, C,  8, 11, 0x8771F681 );
 80265de:	4413      	add	r3, r2
 80265e0:	ea85 0206 	eor.w	r2, r5, r6
 80265e4:	4419      	add	r1, r3
 80265e6:	ea82 0304 	eor.w	r3, r2, r4
 80265ea:	4419      	add	r1, r3
 80265ec:	4a26      	ldr	r2, [pc, #152]	; (8026688 <mbedtls_internal_md5_process+0x3f4>)
 80265ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80265f0:	eb04 5171 	add.w	r1, r4, r1, ror #21
    P( C, D, A, B, 11, 16, 0x6D9D6122 );
 80265f4:	441a      	add	r2, r3
 80265f6:	ea86 0304 	eor.w	r3, r6, r4
 80265fa:	404b      	eors	r3, r1
 80265fc:	4415      	add	r5, r2
 80265fe:	4a23      	ldr	r2, [pc, #140]	; (802668c <mbedtls_internal_md5_process+0x3f8>)
 8026600:	441d      	add	r5, r3
 8026602:	eb01 4535 	add.w	r5, r1, r5, ror #16
    P( B, C, D, A, 14, 23, 0xFDE5380C );
 8026606:	4452      	add	r2, sl
 8026608:	ea84 0c01 	eor.w	ip, r4, r1
 802660c:	4416      	add	r6, r2
 802660e:	ea8c 0c05 	eor.w	ip, ip, r5
 8026612:	e043      	b.n	802669c <mbedtls_internal_md5_process+0x408>
 8026614:	d76aa478 	.word	0xd76aa478
 8026618:	e8c7b756 	.word	0xe8c7b756
 802661c:	242070db 	.word	0x242070db
 8026620:	c1bdceee 	.word	0xc1bdceee
 8026624:	f57c0faf 	.word	0xf57c0faf
 8026628:	4787c62a 	.word	0x4787c62a
 802662c:	a8304613 	.word	0xa8304613
 8026630:	fd469501 	.word	0xfd469501
 8026634:	698098d8 	.word	0x698098d8
 8026638:	8b44f7af 	.word	0x8b44f7af
 802663c:	895cd7be 	.word	0x895cd7be
 8026640:	6b901122 	.word	0x6b901122
 8026644:	fd987193 	.word	0xfd987193
 8026648:	49b40821 	.word	0x49b40821
 802664c:	f61e2562 	.word	0xf61e2562
 8026650:	c040b340 	.word	0xc040b340
 8026654:	265e5a51 	.word	0x265e5a51
 8026658:	e9b6c7aa 	.word	0xe9b6c7aa
 802665c:	d62f105d 	.word	0xd62f105d
 8026660:	02441453 	.word	0x02441453
 8026664:	d8a1e681 	.word	0xd8a1e681
 8026668:	e7d3fbc8 	.word	0xe7d3fbc8
 802666c:	21e1cde6 	.word	0x21e1cde6
 8026670:	c33707d6 	.word	0xc33707d6
 8026674:	f4d50d87 	.word	0xf4d50d87
 8026678:	455a14ed 	.word	0x455a14ed
 802667c:	a9e3e905 	.word	0xa9e3e905
 8026680:	676f02d9 	.word	0x676f02d9
 8026684:	8771f681 	.word	0x8771f681
 8026688:	6d9d6122 	.word	0x6d9d6122
 802668c:	fde5380c 	.word	0xfde5380c
 8026690:	a679438e 	.word	0xa679438e
 8026694:	fcefa3f8 	.word	0xfcefa3f8
 8026698:	8d2a4c8a 	.word	0x8d2a4c8a
 802669c:	44b4      	add	ip, r6
 802669e:	4b98      	ldr	r3, [pc, #608]	; (8026900 <mbedtls_internal_md5_process+0x66c>)
 80266a0:	9e01      	ldr	r6, [sp, #4]
 80266a2:	eb05 2c7c 	add.w	ip, r5, ip, ror #9
    P( A, B, C, D,  1,  4, 0xA4BEEA44 );
 80266a6:	4433      	add	r3, r6
 80266a8:	ea81 0205 	eor.w	r2, r1, r5
 80266ac:	ea82 020c 	eor.w	r2, r2, ip
 80266b0:	441c      	add	r4, r3
 80266b2:	4414      	add	r4, r2
 80266b4:	4b93      	ldr	r3, [pc, #588]	; (8026904 <mbedtls_internal_md5_process+0x670>)
 80266b6:	9a04      	ldr	r2, [sp, #16]
 80266b8:	eb0c 7434 	add.w	r4, ip, r4, ror #28
    P( D, A, B, C,  4, 11, 0x4BDECFA9 );
 80266bc:	4413      	add	r3, r2
 80266be:	ea85 020c 	eor.w	r2, r5, ip
 80266c2:	440b      	add	r3, r1
 80266c4:	4062      	eors	r2, r4
 80266c6:	4990      	ldr	r1, [pc, #576]	; (8026908 <mbedtls_internal_md5_process+0x674>)
 80266c8:	441a      	add	r2, r3
 80266ca:	eb04 5272 	add.w	r2, r4, r2, ror #21
    P( C, D, A, B,  7, 16, 0xF6BB4B60 );
 80266ce:	ea8c 0304 	eor.w	r3, ip, r4
 80266d2:	4459      	add	r1, fp
 80266d4:	4429      	add	r1, r5
 80266d6:	4053      	eors	r3, r2
 80266d8:	440b      	add	r3, r1
 80266da:	4d8c      	ldr	r5, [pc, #560]	; (802690c <mbedtls_internal_md5_process+0x678>)
 80266dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80266de:	eb02 4333 	add.w	r3, r2, r3, ror #16
    P( B, C, D, A, 10, 23, 0xBEBFBC70 );
 80266e2:	440d      	add	r5, r1
 80266e4:	ea84 0102 	eor.w	r1, r4, r2
 80266e8:	4465      	add	r5, ip
 80266ea:	ea81 0c03 	eor.w	ip, r1, r3
 80266ee:	4988      	ldr	r1, [pc, #544]	; (8026910 <mbedtls_internal_md5_process+0x67c>)
 80266f0:	44ac      	add	ip, r5
 80266f2:	eb03 2c7c 	add.w	ip, r3, ip, ror #9
    P( A, B, C, D, 13,  4, 0x289B7EC6 );
 80266f6:	4471      	add	r1, lr
 80266f8:	ea82 0603 	eor.w	r6, r2, r3
 80266fc:	440c      	add	r4, r1
 80266fe:	ea86 060c 	eor.w	r6, r6, ip
 8026702:	4426      	add	r6, r4
 8026704:	4983      	ldr	r1, [pc, #524]	; (8026914 <mbedtls_internal_md5_process+0x680>)
 8026706:	9c00      	ldr	r4, [sp, #0]
 8026708:	eb0c 7636 	add.w	r6, ip, r6, ror #28
    P( D, A, B, C,  0, 11, 0xEAA127FA );
 802670c:	ea83 050c 	eor.w	r5, r3, ip
 8026710:	4421      	add	r1, r4
 8026712:	4411      	add	r1, r2
 8026714:	4075      	eors	r5, r6
 8026716:	440d      	add	r5, r1
 8026718:	4a7f      	ldr	r2, [pc, #508]	; (8026918 <mbedtls_internal_md5_process+0x684>)
 802671a:	9903      	ldr	r1, [sp, #12]
 802671c:	eb06 5575 	add.w	r5, r6, r5, ror #21
    P( C, D, A, B,  3, 16, 0xD4EF3085 );
 8026720:	440a      	add	r2, r1
 8026722:	ea8c 0106 	eor.w	r1, ip, r6
 8026726:	9c06      	ldr	r4, [sp, #24]
 8026728:	441a      	add	r2, r3
 802672a:	ea81 0305 	eor.w	r3, r1, r5
 802672e:	497b      	ldr	r1, [pc, #492]	; (802691c <mbedtls_internal_md5_process+0x688>)
 8026730:	4413      	add	r3, r2
 8026732:	eb05 4333 	add.w	r3, r5, r3, ror #16
    P( B, C, D, A,  6, 23, 0x04881D05 );
 8026736:	4421      	add	r1, r4
 8026738:	ea86 0405 	eor.w	r4, r6, r5
 802673c:	448c      	add	ip, r1
 802673e:	405c      	eors	r4, r3
 8026740:	9908      	ldr	r1, [sp, #32]
 8026742:	4a77      	ldr	r2, [pc, #476]	; (8026920 <mbedtls_internal_md5_process+0x68c>)
 8026744:	4464      	add	r4, ip
 8026746:	eb03 2474 	add.w	r4, r3, r4, ror #9
    P( A, B, C, D,  9,  4, 0xD9D4D039 );
 802674a:	440a      	add	r2, r1
 802674c:	ea85 0103 	eor.w	r1, r5, r3
 8026750:	4416      	add	r6, r2
 8026752:	4061      	eors	r1, r4
 8026754:	4431      	add	r1, r6
 8026756:	4a73      	ldr	r2, [pc, #460]	; (8026924 <mbedtls_internal_md5_process+0x690>)
 8026758:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 802675a:	eb04 7131 	add.w	r1, r4, r1, ror #28
    P( D, A, B, C, 12, 11, 0xE6DB99E5 );
 802675e:	4432      	add	r2, r6
 8026760:	ea83 0604 	eor.w	r6, r3, r4
 8026764:	442a      	add	r2, r5
 8026766:	ea86 0501 	eor.w	r5, r6, r1
 802676a:	4e6f      	ldr	r6, [pc, #444]	; (8026928 <mbedtls_internal_md5_process+0x694>)
 802676c:	4415      	add	r5, r2
 802676e:	eb01 5575 	add.w	r5, r1, r5, ror #21
    P( C, D, A, B, 15, 16, 0x1FA27CF8 );
 8026772:	4446      	add	r6, r8
 8026774:	ea84 0201 	eor.w	r2, r4, r1
 8026778:	4433      	add	r3, r6
 802677a:	406a      	eors	r2, r5
 802677c:	4e6b      	ldr	r6, [pc, #428]	; (802692c <mbedtls_internal_md5_process+0x698>)
 802677e:	441a      	add	r2, r3
 8026780:	eb05 4232 	add.w	r2, r5, r2, ror #16
    P( B, C, D, A,  2, 23, 0xC4AC5665 );
 8026784:	443e      	add	r6, r7
 8026786:	ea81 0305 	eor.w	r3, r1, r5
 802678a:	4053      	eors	r3, r2
 802678c:	4434      	add	r4, r6
 802678e:	441c      	add	r4, r3
 8026790:	4e67      	ldr	r6, [pc, #412]	; (8026930 <mbedtls_internal_md5_process+0x69c>)
 8026792:	9b00      	ldr	r3, [sp, #0]
 8026794:	eb02 2474 	add.w	r4, r2, r4, ror #9

#undef F

#define F(x,y,z) ((y) ^ ((x) | ~(z)))

    P( A, B, C, D,  0,  6, 0xF4292244 );
 8026798:	441e      	add	r6, r3
 802679a:	ea64 0305 	orn	r3, r4, r5
 802679e:	4053      	eors	r3, r2
 80267a0:	4431      	add	r1, r6
 80267a2:	4419      	add	r1, r3
 80267a4:	4e63      	ldr	r6, [pc, #396]	; (8026934 <mbedtls_internal_md5_process+0x6a0>)
 80267a6:	eb04 61b1 	add.w	r1, r4, r1, ror #26
    P( D, A, B, C,  7, 10, 0x432AFF97 );
 80267aa:	445e      	add	r6, fp
 80267ac:	ea61 0302 	orn	r3, r1, r2
 80267b0:	4063      	eors	r3, r4
 80267b2:	4435      	add	r5, r6
 80267b4:	441d      	add	r5, r3
 80267b6:	4e60      	ldr	r6, [pc, #384]	; (8026938 <mbedtls_internal_md5_process+0x6a4>)
 80267b8:	eb01 55b5 	add.w	r5, r1, r5, ror #22
    P( C, D, A, B, 14, 15, 0xAB9423A7 );
 80267bc:	4456      	add	r6, sl
 80267be:	ea65 0304 	orn	r3, r5, r4
 80267c2:	404b      	eors	r3, r1
 80267c4:	4432      	add	r2, r6
 80267c6:	441a      	add	r2, r3
 80267c8:	4e5c      	ldr	r6, [pc, #368]	; (802693c <mbedtls_internal_md5_process+0x6a8>)
 80267ca:	9b05      	ldr	r3, [sp, #20]
 80267cc:	eb05 4272 	add.w	r2, r5, r2, ror #17
    P( B, C, D, A,  5, 21, 0xFC93A039 );
 80267d0:	441e      	add	r6, r3
 80267d2:	ea62 0c01 	orn	ip, r2, r1
 80267d6:	ea8c 0c05 	eor.w	ip, ip, r5
 80267da:	4434      	add	r4, r6
 80267dc:	4464      	add	r4, ip
 80267de:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80267e0:	4b57      	ldr	r3, [pc, #348]	; (8026940 <mbedtls_internal_md5_process+0x6ac>)
 80267e2:	eb02 24f4 	add.w	r4, r2, r4, ror #11
    P( A, B, C, D, 12,  6, 0x655B59C3 );
 80267e6:	4433      	add	r3, r6
 80267e8:	ea64 0c05 	orn	ip, r4, r5
 80267ec:	ea8c 0c02 	eor.w	ip, ip, r2
 80267f0:	4419      	add	r1, r3
 80267f2:	9f03      	ldr	r7, [sp, #12]
 80267f4:	4461      	add	r1, ip
 80267f6:	4b53      	ldr	r3, [pc, #332]	; (8026944 <mbedtls_internal_md5_process+0x6b0>)
 80267f8:	eb04 61b1 	add.w	r1, r4, r1, ror #26
    P( D, A, B, C,  3, 10, 0x8F0CCC92 );
 80267fc:	ea61 0602 	orn	r6, r1, r2
 8026800:	443b      	add	r3, r7
 8026802:	441d      	add	r5, r3
 8026804:	4066      	eors	r6, r4
 8026806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026808:	442e      	add	r6, r5
 802680a:	eb01 56b6 	add.w	r6, r1, r6, ror #22
    P( C, D, A, B, 10, 15, 0xFFEFF47D );
 802680e:	f5a3 1780 	sub.w	r7, r3, #1048576	; 0x100000
 8026812:	ea66 0504 	orn	r5, r6, r4
 8026816:	f6a7 3783 	subw	r7, r7, #2947	; 0xb83
 802681a:	4417      	add	r7, r2
 802681c:	ea85 0201 	eor.w	r2, r5, r1
 8026820:	443a      	add	r2, r7
 8026822:	4b49      	ldr	r3, [pc, #292]	; (8026948 <mbedtls_internal_md5_process+0x6b4>)
 8026824:	9f01      	ldr	r7, [sp, #4]
 8026826:	eb06 4272 	add.w	r2, r6, r2, ror #17
    P( B, C, D, A,  1, 21, 0x85845DD1 );
 802682a:	443b      	add	r3, r7
 802682c:	ea62 0501 	orn	r5, r2, r1
 8026830:	4075      	eors	r5, r6
 8026832:	441c      	add	r4, r3
 8026834:	442c      	add	r4, r5
 8026836:	9b07      	ldr	r3, [sp, #28]
 8026838:	4f44      	ldr	r7, [pc, #272]	; (802694c <mbedtls_internal_md5_process+0x6b8>)
 802683a:	eb02 24f4 	add.w	r4, r2, r4, ror #11
    P( A, B, C, D,  8,  6, 0x6FA87E4F );
 802683e:	441f      	add	r7, r3
 8026840:	ea64 0306 	orn	r3, r4, r6
 8026844:	4053      	eors	r3, r2
 8026846:	4439      	add	r1, r7
 8026848:	4419      	add	r1, r3
 802684a:	4d41      	ldr	r5, [pc, #260]	; (8026950 <mbedtls_internal_md5_process+0x6bc>)
 802684c:	eb04 61b1 	add.w	r1, r4, r1, ror #26
    P( D, A, B, C, 15, 10, 0xFE2CE6E0 );
 8026850:	4445      	add	r5, r8
 8026852:	ea61 0702 	orn	r7, r1, r2
 8026856:	4067      	eors	r7, r4
 8026858:	442e      	add	r6, r5
 802685a:	443e      	add	r6, r7
 802685c:	9d06      	ldr	r5, [sp, #24]
 802685e:	4b3d      	ldr	r3, [pc, #244]	; (8026954 <mbedtls_internal_md5_process+0x6c0>)
 8026860:	eb01 56b6 	add.w	r6, r1, r6, ror #22
    P( C, D, A, B,  6, 15, 0xA3014314 );
 8026864:	442b      	add	r3, r5
 8026866:	ea66 0c04 	orn	ip, r6, r4
 802686a:	ea8c 0c01 	eor.w	ip, ip, r1
 802686e:	441a      	add	r2, r3
 8026870:	4462      	add	r2, ip
 8026872:	4d39      	ldr	r5, [pc, #228]	; (8026958 <mbedtls_internal_md5_process+0x6c4>)
 8026874:	eb06 4272 	add.w	r2, r6, r2, ror #17
    P( B, C, D, A, 13, 21, 0x4E0811A1 );
 8026878:	4475      	add	r5, lr
 802687a:	ea62 0701 	orn	r7, r2, r1
 802687e:	4077      	eors	r7, r6
 8026880:	442c      	add	r4, r5
 8026882:	443c      	add	r4, r7
 8026884:	9d04      	ldr	r5, [sp, #16]
 8026886:	4b35      	ldr	r3, [pc, #212]	; (802695c <mbedtls_internal_md5_process+0x6c8>)
 8026888:	eb02 24f4 	add.w	r4, r2, r4, ror #11
    P( A, B, C, D,  4,  6, 0xF7537E82 );
 802688c:	442b      	add	r3, r5
 802688e:	ea64 0506 	orn	r5, r4, r6
 8026892:	440b      	add	r3, r1
 8026894:	ea85 0102 	eor.w	r1, r5, r2
 8026898:	4419      	add	r1, r3
 802689a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802689c:	4f30      	ldr	r7, [pc, #192]	; (8026960 <mbedtls_internal_md5_process+0x6cc>)
 802689e:	eb04 61b1 	add.w	r1, r4, r1, ror #26
    P( D, A, B, C, 11, 10, 0xBD3AF235 );
 80268a2:	ea61 0302 	orn	r3, r1, r2
 80268a6:	442f      	add	r7, r5
 80268a8:	4437      	add	r7, r6
 80268aa:	ea83 0604 	eor.w	r6, r3, r4
 80268ae:	443e      	add	r6, r7
 80268b0:	4b2c      	ldr	r3, [pc, #176]	; (8026964 <mbedtls_internal_md5_process+0x6d0>)
 80268b2:	9f02      	ldr	r7, [sp, #8]
 80268b4:	eb01 56b6 	add.w	r6, r1, r6, ror #22
    P( C, D, A, B,  2, 15, 0x2AD7D2BB );
 80268b8:	ea66 0504 	orn	r5, r6, r4
 80268bc:	443b      	add	r3, r7
 80268be:	4413      	add	r3, r2
 80268c0:	ea85 0201 	eor.w	r2, r5, r1
 80268c4:	441a      	add	r2, r3
    P( B, C, D, A,  9, 21, 0xEB86D391 );

#undef F

    ctx->state[0] += A;
 80268c6:	6885      	ldr	r5, [r0, #8]
    P( C, D, A, B,  2, 15, 0x2AD7D2BB );
 80268c8:	eb06 4272 	add.w	r2, r6, r2, ror #17
    P( B, C, D, A,  9, 21, 0xEB86D391 );
 80268cc:	9f08      	ldr	r7, [sp, #32]
 80268ce:	4b26      	ldr	r3, [pc, #152]	; (8026968 <mbedtls_internal_md5_process+0x6d4>)
 80268d0:	ea62 0c01 	orn	ip, r2, r1
    ctx->state[0] += A;
 80268d4:	4429      	add	r1, r5
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 80268d6:	6945      	ldr	r5, [r0, #20]
 80268d8:	443b      	add	r3, r7
    P( B, C, D, A,  9, 21, 0xEB86D391 );
 80268da:	ea8c 0c06 	eor.w	ip, ip, r6
 80268de:	441c      	add	r4, r3
    ctx->state[3] += D;
 80268e0:	442e      	add	r6, r5
    ctx->state[2] += C;
 80268e2:	6905      	ldr	r5, [r0, #16]
    ctx->state[1] += B;
 80268e4:	eb09 0302 	add.w	r3, r9, r2
    P( B, C, D, A,  9, 21, 0xEB86D391 );
 80268e8:	4464      	add	r4, ip
    ctx->state[2] += C;
 80268ea:	442a      	add	r2, r5
    ctx->state[1] += B;
 80268ec:	eb03 23f4 	add.w	r3, r3, r4, ror #11
    ctx->state[2] += C;
 80268f0:	e9c0 2604 	strd	r2, r6, [r0, #16]
    ctx->state[0] += A;
 80268f4:	6081      	str	r1, [r0, #8]
    ctx->state[1] += B;
 80268f6:	60c3      	str	r3, [r0, #12]

    return( 0 );
}
 80268f8:	2000      	movs	r0, #0
 80268fa:	b00d      	add	sp, #52	; 0x34
 80268fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026900:	a4beea44 	.word	0xa4beea44
 8026904:	4bdecfa9 	.word	0x4bdecfa9
 8026908:	f6bb4b60 	.word	0xf6bb4b60
 802690c:	bebfbc70 	.word	0xbebfbc70
 8026910:	289b7ec6 	.word	0x289b7ec6
 8026914:	eaa127fa 	.word	0xeaa127fa
 8026918:	d4ef3085 	.word	0xd4ef3085
 802691c:	04881d05 	.word	0x04881d05
 8026920:	d9d4d039 	.word	0xd9d4d039
 8026924:	e6db99e5 	.word	0xe6db99e5
 8026928:	1fa27cf8 	.word	0x1fa27cf8
 802692c:	c4ac5665 	.word	0xc4ac5665
 8026930:	f4292244 	.word	0xf4292244
 8026934:	432aff97 	.word	0x432aff97
 8026938:	ab9423a7 	.word	0xab9423a7
 802693c:	fc93a039 	.word	0xfc93a039
 8026940:	655b59c3 	.word	0x655b59c3
 8026944:	8f0ccc92 	.word	0x8f0ccc92
 8026948:	85845dd1 	.word	0x85845dd1
 802694c:	6fa87e4f 	.word	0x6fa87e4f
 8026950:	fe2ce6e0 	.word	0xfe2ce6e0
 8026954:	a3014314 	.word	0xa3014314
 8026958:	4e0811a1 	.word	0x4e0811a1
 802695c:	f7537e82 	.word	0xf7537e82
 8026960:	bd3af235 	.word	0xbd3af235
 8026964:	2ad7d2bb 	.word	0x2ad7d2bb
 8026968:	eb86d391 	.word	0xeb86d391

0802696c <mbedtls_md5_update_ret.part.0>:
#endif /* !MBEDTLS_MD5_PROCESS_ALT */

/*
 * MD5 process buffer
 */
int mbedtls_md5_update_ret( mbedtls_md5_context *ctx,
 802696c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t left;

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
 8026970:	6804      	ldr	r4, [r0, #0]
int mbedtls_md5_update_ret( mbedtls_md5_context *ctx,
 8026972:	4615      	mov	r5, r2
 8026974:	18a2      	adds	r2, r4, r2
 8026976:	4606      	mov	r6, r0
 8026978:	460f      	mov	r7, r1
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 802697a:	6002      	str	r2, [r0, #0]
    left = ctx->total[0] & 0x3F;
 802697c:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
 8026980:	d302      	bcc.n	8026988 <mbedtls_md5_update_ret.part.0+0x1c>
        ctx->total[1]++;
 8026982:	6843      	ldr	r3, [r0, #4]
 8026984:	3301      	adds	r3, #1
 8026986:	6043      	str	r3, [r0, #4]

    if( left && ilen >= fill )
 8026988:	b1d4      	cbz	r4, 80269c0 <mbedtls_md5_update_ret.part.0+0x54>
    fill = 64 - left;
 802698a:	f1c4 0840 	rsb	r8, r4, #64	; 0x40
    if( left && ilen >= fill )
 802698e:	45a8      	cmp	r8, r5
 8026990:	d904      	bls.n	802699c <mbedtls_md5_update_ret.part.0+0x30>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
 8026992:	462a      	mov	r2, r5

        input += 64;
        ilen  -= 64;
    }

    if( ilen > 0 )
 8026994:	bb6a      	cbnz	r2, 80269f2 <mbedtls_md5_update_ret.part.0+0x86>
    {
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    }

    return( 0 );
 8026996:	4610      	mov	r0, r2
}
 8026998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        memcpy( (void *) (ctx->buffer + left), input, fill );
 802699c:	f106 0918 	add.w	r9, r6, #24
 80269a0:	4639      	mov	r1, r7
 80269a2:	4642      	mov	r2, r8
 80269a4:	eb09 0004 	add.w	r0, r9, r4
 80269a8:	f009 fa36 	bl	802fe18 <memcpy>
        if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 80269ac:	4649      	mov	r1, r9
 80269ae:	4630      	mov	r0, r6
 80269b0:	f7ff fc70 	bl	8026294 <mbedtls_internal_md5_process>
 80269b4:	2800      	cmp	r0, #0
 80269b6:	d1ef      	bne.n	8026998 <mbedtls_md5_update_ret.part.0+0x2c>
        input += fill;
 80269b8:	f1a5 0240 	sub.w	r2, r5, #64	; 0x40
        ilen  -= fill;
 80269bc:	18a5      	adds	r5, r4, r2
        input += fill;
 80269be:	4447      	add	r7, r8
    while( ilen >= 64 )
 80269c0:	2d3f      	cmp	r5, #63	; 0x3f
 80269c2:	d91f      	bls.n	8026a04 <mbedtls_md5_update_ret.part.0+0x98>
 80269c4:	463c      	mov	r4, r7
 80269c6:	f1a5 0340 	sub.w	r3, r5, #64	; 0x40
 80269ca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80269ce:	3340      	adds	r3, #64	; 0x40
 80269d0:	441f      	add	r7, r3
 80269d2:	4425      	add	r5, r4
 80269d4:	e001      	b.n	80269da <mbedtls_md5_update_ret.part.0+0x6e>
 80269d6:	42bc      	cmp	r4, r7
 80269d8:	d008      	beq.n	80269ec <mbedtls_md5_update_ret.part.0+0x80>
        if( ( ret = mbedtls_internal_md5_process( ctx, input ) ) != 0 )
 80269da:	4621      	mov	r1, r4
 80269dc:	4630      	mov	r0, r6
 80269de:	f7ff fc59 	bl	8026294 <mbedtls_internal_md5_process>
        input += 64;
 80269e2:	3440      	adds	r4, #64	; 0x40
        ilen  -= 64;
 80269e4:	1b2a      	subs	r2, r5, r4
        if( ( ret = mbedtls_internal_md5_process( ctx, input ) ) != 0 )
 80269e6:	2800      	cmp	r0, #0
 80269e8:	d0f5      	beq.n	80269d6 <mbedtls_md5_update_ret.part.0+0x6a>
 80269ea:	e7d5      	b.n	8026998 <mbedtls_md5_update_ret.part.0+0x2c>
 80269ec:	4604      	mov	r4, r0
    if( ilen > 0 )
 80269ee:	2a00      	cmp	r2, #0
 80269f0:	d0d1      	beq.n	8026996 <mbedtls_md5_update_ret.part.0+0x2a>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 80269f2:	f106 0018 	add.w	r0, r6, #24
 80269f6:	4639      	mov	r1, r7
 80269f8:	4420      	add	r0, r4
 80269fa:	f009 fa0d 	bl	802fe18 <memcpy>
    return( 0 );
 80269fe:	2000      	movs	r0, #0
}
 8026a00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    while( ilen >= 64 )
 8026a04:	2400      	movs	r4, #0
 8026a06:	462a      	mov	r2, r5
 8026a08:	e7c4      	b.n	8026994 <mbedtls_md5_update_ret.part.0+0x28>
 8026a0a:	bf00      	nop

08026a0c <mbedtls_md5_update_ret>:
    if( ilen == 0 )
 8026a0c:	b10a      	cbz	r2, 8026a12 <mbedtls_md5_update_ret+0x6>
 8026a0e:	f7ff bfad 	b.w	802696c <mbedtls_md5_update_ret.part.0>
}
 8026a12:	4610      	mov	r0, r2
 8026a14:	4770      	bx	lr
 8026a16:	bf00      	nop

08026a18 <mbedtls_md5_finish_ret>:
/*
 * MD5 final digest
 */
int mbedtls_md5_finish_ret( mbedtls_md5_context *ctx,
                            unsigned char output[16] )
{
 8026a18:	b570      	push	{r4, r5, r6, lr}
 8026a1a:	4604      	mov	r4, r0
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 8026a1c:	2080      	movs	r0, #128	; 0x80
    used = ctx->total[0] & 0x3F;
 8026a1e:	6822      	ldr	r2, [r4, #0]

    if( used <= 56 )
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 8026a20:	f104 0618 	add.w	r6, r4, #24
    used = ctx->total[0] & 0x3F;
 8026a24:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    ctx->buffer[used++] = 0x80;
 8026a28:	18a3      	adds	r3, r4, r2
 8026a2a:	3201      	adds	r2, #1
    if( used <= 56 )
 8026a2c:	2a38      	cmp	r2, #56	; 0x38
    ctx->buffer[used++] = 0x80;
 8026a2e:	7618      	strb	r0, [r3, #24]
{
 8026a30:	460d      	mov	r5, r1
        memset( ctx->buffer + used, 0, 56 - used );
 8026a32:	eb06 0002 	add.w	r0, r6, r2
    if( used <= 56 )
 8026a36:	d836      	bhi.n	8026aa6 <mbedtls_md5_finish_ret+0x8e>
        memset( ctx->buffer + used, 0, 56 - used );
 8026a38:	2100      	movs	r1, #0
 8026a3a:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8026a3e:	f009 fa12 	bl	802fe66 <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
 8026a42:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
 8026a46:	0f5a      	lsrs	r2, r3, #29
 8026a48:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
 8026a4c:	00db      	lsls	r3, r3, #3

    PUT_UINT32_LE( low,  ctx->buffer, 56 );
    PUT_UINT32_LE( high, ctx->buffer, 60 );

    if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 8026a4e:	4631      	mov	r1, r6
 8026a50:	4620      	mov	r0, r4
    PUT_UINT32_LE( high, ctx->buffer, 60 );
 8026a52:	e9c4 3214 	strd	r3, r2, [r4, #80]	; 0x50
    if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 8026a56:	f7ff fc1d 	bl	8026294 <mbedtls_internal_md5_process>
 8026a5a:	bb18      	cbnz	r0, 8026aa4 <mbedtls_md5_finish_ret+0x8c>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_LE( ctx->state[0], output,  0 );
 8026a5c:	68a3      	ldr	r3, [r4, #8]
 8026a5e:	702b      	strb	r3, [r5, #0]
 8026a60:	68a3      	ldr	r3, [r4, #8]
 8026a62:	0a1b      	lsrs	r3, r3, #8
 8026a64:	706b      	strb	r3, [r5, #1]
 8026a66:	8963      	ldrh	r3, [r4, #10]
 8026a68:	70ab      	strb	r3, [r5, #2]
 8026a6a:	7ae3      	ldrb	r3, [r4, #11]
 8026a6c:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_LE( ctx->state[1], output,  4 );
 8026a6e:	68e3      	ldr	r3, [r4, #12]
 8026a70:	712b      	strb	r3, [r5, #4]
 8026a72:	68e3      	ldr	r3, [r4, #12]
 8026a74:	0a1b      	lsrs	r3, r3, #8
 8026a76:	716b      	strb	r3, [r5, #5]
 8026a78:	89e3      	ldrh	r3, [r4, #14]
 8026a7a:	71ab      	strb	r3, [r5, #6]
 8026a7c:	7be3      	ldrb	r3, [r4, #15]
 8026a7e:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_LE( ctx->state[2], output,  8 );
 8026a80:	6923      	ldr	r3, [r4, #16]
 8026a82:	722b      	strb	r3, [r5, #8]
 8026a84:	6923      	ldr	r3, [r4, #16]
 8026a86:	0a1b      	lsrs	r3, r3, #8
 8026a88:	726b      	strb	r3, [r5, #9]
 8026a8a:	8a63      	ldrh	r3, [r4, #18]
 8026a8c:	72ab      	strb	r3, [r5, #10]
 8026a8e:	7ce3      	ldrb	r3, [r4, #19]
 8026a90:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_LE( ctx->state[3], output, 12 );
 8026a92:	6963      	ldr	r3, [r4, #20]
 8026a94:	732b      	strb	r3, [r5, #12]
 8026a96:	6963      	ldr	r3, [r4, #20]
 8026a98:	0a1b      	lsrs	r3, r3, #8
 8026a9a:	736b      	strb	r3, [r5, #13]
 8026a9c:	8ae3      	ldrh	r3, [r4, #22]
 8026a9e:	73ab      	strb	r3, [r5, #14]
 8026aa0:	7de3      	ldrb	r3, [r4, #23]
 8026aa2:	73eb      	strb	r3, [r5, #15]

    return( 0 );
}
 8026aa4:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
 8026aa6:	2100      	movs	r1, #0
 8026aa8:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
 8026aac:	f009 f9db 	bl	802fe66 <memset>
        if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 8026ab0:	4631      	mov	r1, r6
 8026ab2:	4620      	mov	r0, r4
 8026ab4:	f7ff fbee 	bl	8026294 <mbedtls_internal_md5_process>
 8026ab8:	2800      	cmp	r0, #0
 8026aba:	d1f3      	bne.n	8026aa4 <mbedtls_md5_finish_ret+0x8c>
        memset( ctx->buffer, 0, 56 );
 8026abc:	4601      	mov	r1, r0
 8026abe:	2238      	movs	r2, #56	; 0x38
 8026ac0:	4630      	mov	r0, r6
 8026ac2:	f009 f9d0 	bl	802fe66 <memset>
 8026ac6:	e7bc      	b.n	8026a42 <mbedtls_md5_finish_ret+0x2a>

08026ac8 <mbedtls_md5_ret>:
 * output = MD5( input buffer )
 */
int mbedtls_md5_ret( const unsigned char *input,
                     size_t ilen,
                     unsigned char output[16] )
{
 8026ac8:	b570      	push	{r4, r5, r6, lr}
 8026aca:	b096      	sub	sp, #88	; 0x58
 8026acc:	4606      	mov	r6, r0
 8026ace:	460d      	mov	r5, r1
 8026ad0:	4614      	mov	r4, r2
    memset( ctx, 0, sizeof( mbedtls_md5_context ) );
 8026ad2:	2100      	movs	r1, #0
 8026ad4:	2240      	movs	r2, #64	; 0x40
 8026ad6:	a806      	add	r0, sp, #24
 8026ad8:	f009 f9c5 	bl	802fe66 <memset>
    ctx->total[0] = 0;
 8026adc:	a33c      	add	r3, pc, #240	; (adr r3, 8026bd0 <mbedtls_md5_ret+0x108>)
 8026ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026ae2:	2000      	movs	r0, #0
 8026ae4:	2100      	movs	r1, #0
 8026ae6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8026aea:	a33b      	add	r3, pc, #236	; (adr r3, 8026bd8 <mbedtls_md5_ret+0x110>)
 8026aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026af0:	e9cd 0100 	strd	r0, r1, [sp]
 8026af4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if( ilen == 0 )
 8026af8:	b335      	cbz	r5, 8026b48 <mbedtls_md5_ret+0x80>
 8026afa:	462a      	mov	r2, r5
 8026afc:	4631      	mov	r1, r6
 8026afe:	4668      	mov	r0, sp
 8026b00:	f7ff ff34 	bl	802696c <mbedtls_md5_update_ret.part.0>
    mbedtls_md5_init( &ctx );

    if( ( ret = mbedtls_md5_starts_ret( &ctx ) ) != 0 )
        goto exit;

    if( ( ret = mbedtls_md5_update_ret( &ctx, input, ilen ) ) != 0 )
 8026b04:	4605      	mov	r5, r0
 8026b06:	b9c0      	cbnz	r0, 8026b3a <mbedtls_md5_ret+0x72>
    ctx->buffer[used++] = 0x80;
 8026b08:	2280      	movs	r2, #128	; 0x80
    used = ctx->total[0] & 0x3F;
 8026b0a:	9800      	ldr	r0, [sp, #0]
    ctx->buffer[used++] = 0x80;
 8026b0c:	ab16      	add	r3, sp, #88	; 0x58
    used = ctx->total[0] & 0x3F;
 8026b0e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    ctx->buffer[used++] = 0x80;
 8026b12:	4403      	add	r3, r0
 8026b14:	3001      	adds	r0, #1
    if( used <= 56 )
 8026b16:	2838      	cmp	r0, #56	; 0x38
    ctx->buffer[used++] = 0x80;
 8026b18:	f803 2c40 	strb.w	r2, [r3, #-64]
    if( used <= 56 )
 8026b1c:	d918      	bls.n	8026b50 <mbedtls_md5_ret+0x88>
        memset( ctx->buffer + used, 0, 64 - used );
 8026b1e:	ab06      	add	r3, sp, #24
 8026b20:	4629      	mov	r1, r5
 8026b22:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 8026b26:	4418      	add	r0, r3
 8026b28:	f009 f99d 	bl	802fe66 <memset>
        if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 8026b2c:	4668      	mov	r0, sp
 8026b2e:	a906      	add	r1, sp, #24
 8026b30:	f7ff fbb0 	bl	8026294 <mbedtls_internal_md5_process>
 8026b34:	4605      	mov	r5, r0
 8026b36:	2800      	cmp	r0, #0
 8026b38:	d041      	beq.n	8026bbe <mbedtls_md5_ret+0xf6>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md5_context ) );
 8026b3a:	4668      	mov	r0, sp
 8026b3c:	2158      	movs	r1, #88	; 0x58
 8026b3e:	f000 fff5 	bl	8027b2c <mbedtls_platform_zeroize>

exit:
    mbedtls_md5_free( &ctx );

    return( ret );
}
 8026b42:	4628      	mov	r0, r5
 8026b44:	b016      	add	sp, #88	; 0x58
 8026b46:	bd70      	pop	{r4, r5, r6, pc}
    ctx->buffer[used++] = 0x80;
 8026b48:	2380      	movs	r3, #128	; 0x80
 8026b4a:	2001      	movs	r0, #1
 8026b4c:	f88d 3018 	strb.w	r3, [sp, #24]
        memset( ctx->buffer + used, 0, 56 - used );
 8026b50:	ab06      	add	r3, sp, #24
 8026b52:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 8026b56:	2100      	movs	r1, #0
 8026b58:	4418      	add	r0, r3
 8026b5a:	f009 f984 	bl	802fe66 <memset>
         | ( ctx->total[1] <<  3 );
 8026b5e:	e9dd 3000 	ldrd	r3, r0, [sp]
    high = ( ctx->total[0] >> 29 )
 8026b62:	0f5a      	lsrs	r2, r3, #29
 8026b64:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
    low  = ( ctx->total[0] <<  3 );
 8026b68:	00db      	lsls	r3, r3, #3
    if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 8026b6a:	4668      	mov	r0, sp
 8026b6c:	a906      	add	r1, sp, #24
    PUT_UINT32_LE( high, ctx->buffer, 60 );
 8026b6e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
    if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 8026b72:	f7ff fb8f 	bl	8026294 <mbedtls_internal_md5_process>
 8026b76:	4605      	mov	r5, r0
 8026b78:	2800      	cmp	r0, #0
 8026b7a:	d1de      	bne.n	8026b3a <mbedtls_md5_ret+0x72>
    PUT_UINT32_LE( ctx->state[1], output,  4 );
 8026b7c:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
    PUT_UINT32_LE( ctx->state[0], output,  0 );
 8026b80:	0a18      	lsrs	r0, r3, #8
 8026b82:	7060      	strb	r0, [r4, #1]
 8026b84:	0e18      	lsrs	r0, r3, #24
    PUT_UINT32_LE( ctx->state[2], output,  8 );
 8026b86:	9a04      	ldr	r2, [sp, #16]
    PUT_UINT32_LE( ctx->state[0], output,  0 );
 8026b88:	70e0      	strb	r0, [r4, #3]
    PUT_UINT32_LE( ctx->state[1], output,  4 );
 8026b8a:	0a08      	lsrs	r0, r1, #8
 8026b8c:	7121      	strb	r1, [r4, #4]
 8026b8e:	7160      	strb	r0, [r4, #5]
 8026b90:	0c08      	lsrs	r0, r1, #16
 8026b92:	0e09      	lsrs	r1, r1, #24
    PUT_UINT32_LE( ctx->state[0], output,  0 );
 8026b94:	0c1e      	lsrs	r6, r3, #16
 8026b96:	7023      	strb	r3, [r4, #0]
    PUT_UINT32_LE( ctx->state[1], output,  4 );
 8026b98:	71e1      	strb	r1, [r4, #7]
    PUT_UINT32_LE( ctx->state[3], output, 12 );
 8026b9a:	9b05      	ldr	r3, [sp, #20]
    PUT_UINT32_LE( ctx->state[2], output,  8 );
 8026b9c:	0a11      	lsrs	r1, r2, #8
 8026b9e:	7222      	strb	r2, [r4, #8]
 8026ba0:	7261      	strb	r1, [r4, #9]
 8026ba2:	0c11      	lsrs	r1, r2, #16
 8026ba4:	0e12      	lsrs	r2, r2, #24
 8026ba6:	72a1      	strb	r1, [r4, #10]
 8026ba8:	72e2      	strb	r2, [r4, #11]
    PUT_UINT32_LE( ctx->state[3], output, 12 );
 8026baa:	0a19      	lsrs	r1, r3, #8
 8026bac:	0c1a      	lsrs	r2, r3, #16
 8026bae:	7323      	strb	r3, [r4, #12]
 8026bb0:	0e1b      	lsrs	r3, r3, #24
    PUT_UINT32_LE( ctx->state[0], output,  0 );
 8026bb2:	70a6      	strb	r6, [r4, #2]
    PUT_UINT32_LE( ctx->state[1], output,  4 );
 8026bb4:	71a0      	strb	r0, [r4, #6]
    PUT_UINT32_LE( ctx->state[3], output, 12 );
 8026bb6:	7361      	strb	r1, [r4, #13]
 8026bb8:	73a2      	strb	r2, [r4, #14]
 8026bba:	73e3      	strb	r3, [r4, #15]
    return( 0 );
 8026bbc:	e7bd      	b.n	8026b3a <mbedtls_md5_ret+0x72>
        memset( ctx->buffer, 0, 56 );
 8026bbe:	4601      	mov	r1, r0
 8026bc0:	2238      	movs	r2, #56	; 0x38
 8026bc2:	a806      	add	r0, sp, #24
 8026bc4:	f009 f94f 	bl	802fe66 <memset>
 8026bc8:	e7c9      	b.n	8026b5e <mbedtls_md5_ret+0x96>
 8026bca:	bf00      	nop
 8026bcc:	f3af 8000 	nop.w
 8026bd0:	67452301 	.word	0x67452301
 8026bd4:	efcdab89 	.word	0xefcdab89
 8026bd8:	98badcfe 	.word	0x98badcfe
 8026bdc:	10325476 	.word	0x10325476

08026be0 <mbedtls_oid_get_x509_ext_type>:
        { NULL, 0, NULL, NULL },
        0,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
 8026be0:	b1c0      	cbz	r0, 8026c14 <mbedtls_oid_get_x509_ext_type+0x34>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 8026be2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026be4:	4604      	mov	r4, r0
FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
 8026be6:	6846      	ldr	r6, [r0, #4]
 8026be8:	460f      	mov	r7, r1
 8026bea:	4d0c      	ldr	r5, [pc, #48]	; (8026c1c <mbedtls_oid_get_x509_ext_type+0x3c>)
 8026bec:	480c      	ldr	r0, [pc, #48]	; (8026c20 <mbedtls_oid_get_x509_ext_type+0x40>)
 8026bee:	e002      	b.n	8026bf6 <mbedtls_oid_get_x509_ext_type+0x16>
 8026bf0:	f855 0f14 	ldr.w	r0, [r5, #20]!
 8026bf4:	b158      	cbz	r0, 8026c0e <mbedtls_oid_get_x509_ext_type+0x2e>
 8026bf6:	686b      	ldr	r3, [r5, #4]
 8026bf8:	42b3      	cmp	r3, r6
 8026bfa:	d1f9      	bne.n	8026bf0 <mbedtls_oid_get_x509_ext_type+0x10>
 8026bfc:	4632      	mov	r2, r6
 8026bfe:	68a1      	ldr	r1, [r4, #8]
 8026c00:	f009 f8fc 	bl	802fdfc <memcmp>
 8026c04:	2800      	cmp	r0, #0
 8026c06:	d1f3      	bne.n	8026bf0 <mbedtls_oid_get_x509_ext_type+0x10>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 8026c08:	692b      	ldr	r3, [r5, #16]
 8026c0a:	603b      	str	r3, [r7, #0]
 8026c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026c0e:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8026c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026c14:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8026c18:	4770      	bx	lr
 8026c1a:	bf00      	nop
 8026c1c:	08035248 	.word	0x08035248
 8026c20:	08034924 	.word	0x08034924

08026c24 <mbedtls_oid_get_sig_alg>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
 8026c24:	b1f8      	cbz	r0, 8026c66 <mbedtls_oid_get_sig_alg+0x42>
FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
 8026c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026c2a:	4604      	mov	r4, r0
FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
 8026c2c:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8026c30:	460f      	mov	r7, r1
 8026c32:	4616      	mov	r6, r2
 8026c34:	4d0d      	ldr	r5, [pc, #52]	; (8026c6c <mbedtls_oid_get_sig_alg+0x48>)
 8026c36:	480e      	ldr	r0, [pc, #56]	; (8026c70 <mbedtls_oid_get_sig_alg+0x4c>)
 8026c38:	e002      	b.n	8026c40 <mbedtls_oid_get_sig_alg+0x1c>
 8026c3a:	f855 0f14 	ldr.w	r0, [r5, #20]!
 8026c3e:	b170      	cbz	r0, 8026c5e <mbedtls_oid_get_sig_alg+0x3a>
 8026c40:	686b      	ldr	r3, [r5, #4]
 8026c42:	4543      	cmp	r3, r8
 8026c44:	d1f9      	bne.n	8026c3a <mbedtls_oid_get_sig_alg+0x16>
 8026c46:	4642      	mov	r2, r8
 8026c48:	68a1      	ldr	r1, [r4, #8]
 8026c4a:	f009 f8d7 	bl	802fdfc <memcmp>
 8026c4e:	2800      	cmp	r0, #0
 8026c50:	d1f3      	bne.n	8026c3a <mbedtls_oid_get_sig_alg+0x16>
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
 8026c52:	7c2b      	ldrb	r3, [r5, #16]
 8026c54:	703b      	strb	r3, [r7, #0]
 8026c56:	7c6b      	ldrb	r3, [r5, #17]
 8026c58:	7033      	strb	r3, [r6, #0]
 8026c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026c5e:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8026c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026c66:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8026c6a:	4770      	bx	lr
 8026c6c:	080351e4 	.word	0x080351e4
 8026c70:	08034928 	.word	0x08034928

08026c74 <mbedtls_oid_get_pk_alg>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 8026c74:	b1c0      	cbz	r0, 8026ca8 <mbedtls_oid_get_pk_alg+0x34>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 8026c76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026c78:	4604      	mov	r4, r0
FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 8026c7a:	6846      	ldr	r6, [r0, #4]
 8026c7c:	460f      	mov	r7, r1
 8026c7e:	4d0c      	ldr	r5, [pc, #48]	; (8026cb0 <mbedtls_oid_get_pk_alg+0x3c>)
 8026c80:	480c      	ldr	r0, [pc, #48]	; (8026cb4 <mbedtls_oid_get_pk_alg+0x40>)
 8026c82:	e002      	b.n	8026c8a <mbedtls_oid_get_pk_alg+0x16>
 8026c84:	f855 0f14 	ldr.w	r0, [r5, #20]!
 8026c88:	b158      	cbz	r0, 8026ca2 <mbedtls_oid_get_pk_alg+0x2e>
 8026c8a:	686b      	ldr	r3, [r5, #4]
 8026c8c:	42b3      	cmp	r3, r6
 8026c8e:	d1f9      	bne.n	8026c84 <mbedtls_oid_get_pk_alg+0x10>
 8026c90:	4632      	mov	r2, r6
 8026c92:	68a1      	ldr	r1, [r4, #8]
 8026c94:	f009 f8b2 	bl	802fdfc <memcmp>
 8026c98:	2800      	cmp	r0, #0
 8026c9a:	d1f3      	bne.n	8026c84 <mbedtls_oid_get_pk_alg+0x10>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 8026c9c:	7c2b      	ldrb	r3, [r5, #16]
 8026c9e:	703b      	strb	r3, [r7, #0]
 8026ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026ca2:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8026ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026ca8:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8026cac:	4770      	bx	lr
 8026cae:	bf00      	nop
 8026cb0:	08035194 	.word	0x08035194
 8026cb4:	08034934 	.word	0x08034934

08026cb8 <mbedtls_oid_get_oid_by_md>:
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_md, oid_md_alg_t, oid_md_alg, mbedtls_md_type_t, md_alg)
 8026cb8:	b430      	push	{r4, r5}
 8026cba:	4b09      	ldr	r3, [pc, #36]	; (8026ce0 <mbedtls_oid_get_oid_by_md+0x28>)
 8026cbc:	4c09      	ldr	r4, [pc, #36]	; (8026ce4 <mbedtls_oid_get_oid_by_md+0x2c>)
 8026cbe:	e002      	b.n	8026cc6 <mbedtls_oid_get_oid_by_md+0xe>
 8026cc0:	f853 4f14 	ldr.w	r4, [r3, #20]!
 8026cc4:	b144      	cbz	r4, 8026cd8 <mbedtls_oid_get_oid_by_md+0x20>
 8026cc6:	7c1d      	ldrb	r5, [r3, #16]
 8026cc8:	4285      	cmp	r5, r0
 8026cca:	d1f9      	bne.n	8026cc0 <mbedtls_oid_get_oid_by_md+0x8>
 8026ccc:	685b      	ldr	r3, [r3, #4]
 8026cce:	2000      	movs	r0, #0
 8026cd0:	600c      	str	r4, [r1, #0]
 8026cd2:	6013      	str	r3, [r2, #0]
 8026cd4:	bc30      	pop	{r4, r5}
 8026cd6:	4770      	bx	lr
 8026cd8:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8026cdc:	bc30      	pop	{r4, r5}
 8026cde:	4770      	bx	lr
 8026ce0:	08035144 	.word	0x08035144
 8026ce4:	08034940 	.word	0x08034940

08026ce8 <pem_aes_decrypt>:
 * Decrypt with AES-XXX-CBC, using PBKDF1 for key derivation
 */
static int pem_aes_decrypt( unsigned char aes_iv[16], unsigned int keylen,
                            unsigned char *buf, size_t buflen,
                            const unsigned char *pwd, size_t pwdlen )
{
 8026ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026cec:	b0ea      	sub	sp, #424	; 0x1a8
 8026cee:	4606      	mov	r6, r0
    mbedtls_aes_context aes_ctx;
    unsigned char aes_key[32];
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;

    mbedtls_aes_init( &aes_ctx );
 8026cf0:	a824      	add	r0, sp, #144	; 0x90
{
 8026cf2:	460d      	mov	r5, r1
 8026cf4:	4617      	mov	r7, r2
 8026cf6:	4698      	mov	r8, r3
    mbedtls_aes_init( &aes_ctx );
 8026cf8:	f7f8 f9aa 	bl	801f050 <mbedtls_aes_init>
    mbedtls_md5_init( &md5_ctx );
 8026cfc:	a80e      	add	r0, sp, #56	; 0x38
 8026cfe:	f7ff faa1 	bl	8026244 <mbedtls_md5_init>
    if( ( ret = mbedtls_md5_starts_ret( &md5_ctx ) ) != 0 )
 8026d02:	a80e      	add	r0, sp, #56	; 0x38
 8026d04:	f7ff faae 	bl	8026264 <mbedtls_md5_starts_ret>
 8026d08:	b1b0      	cbz	r0, 8026d38 <pem_aes_decrypt+0x50>
 8026d0a:	4604      	mov	r4, r0
 8026d0c:	f10d 0a08 	add.w	sl, sp, #8
 8026d10:	f10d 0918 	add.w	r9, sp, #24
    mbedtls_md5_free( &md5_ctx );
 8026d14:	a80e      	add	r0, sp, #56	; 0x38
 8026d16:	f7ff fa99 	bl	802624c <mbedtls_md5_free>
    mbedtls_platform_zeroize( md5sum, 16 );
 8026d1a:	4650      	mov	r0, sl
 8026d1c:	2110      	movs	r1, #16
 8026d1e:	f000 ff05 	bl	8027b2c <mbedtls_platform_zeroize>
        goto exit;
    ret = mbedtls_aes_crypt_cbc( &aes_ctx, MBEDTLS_AES_DECRYPT, buflen,
                     aes_iv, buf, buf );

exit:
    mbedtls_aes_free( &aes_ctx );
 8026d22:	a824      	add	r0, sp, #144	; 0x90
 8026d24:	f7f8 f99a 	bl	801f05c <mbedtls_aes_free>
    mbedtls_platform_zeroize( aes_key, keylen );
 8026d28:	4648      	mov	r0, r9
 8026d2a:	4629      	mov	r1, r5
 8026d2c:	f000 fefe 	bl	8027b2c <mbedtls_platform_zeroize>

    return( ret );
}
 8026d30:	4620      	mov	r0, r4
 8026d32:	b06a      	add	sp, #424	; 0x1a8
 8026d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( ( ret = mbedtls_md5_update_ret( &md5_ctx, pwd, pwdlen ) ) != 0 )
 8026d38:	a80e      	add	r0, sp, #56	; 0x38
 8026d3a:	e9dd 1272 	ldrd	r1, r2, [sp, #456]	; 0x1c8
 8026d3e:	f7ff fe65 	bl	8026a0c <mbedtls_md5_update_ret>
 8026d42:	4604      	mov	r4, r0
 8026d44:	b120      	cbz	r0, 8026d50 <pem_aes_decrypt+0x68>
 8026d46:	f10d 0a08 	add.w	sl, sp, #8
 8026d4a:	f10d 0918 	add.w	r9, sp, #24
 8026d4e:	e7e1      	b.n	8026d14 <pem_aes_decrypt+0x2c>
    if( ( ret = mbedtls_md5_update_ret( &md5_ctx, iv,  8 ) ) != 0 )
 8026d50:	2208      	movs	r2, #8
 8026d52:	4631      	mov	r1, r6
 8026d54:	a80e      	add	r0, sp, #56	; 0x38
 8026d56:	f7ff fe59 	bl	8026a0c <mbedtls_md5_update_ret>
 8026d5a:	f10d 0a08 	add.w	sl, sp, #8
 8026d5e:	4604      	mov	r4, r0
 8026d60:	b110      	cbz	r0, 8026d68 <pem_aes_decrypt+0x80>
 8026d62:	f10d 0918 	add.w	r9, sp, #24
 8026d66:	e7d5      	b.n	8026d14 <pem_aes_decrypt+0x2c>
    if( ( ret = mbedtls_md5_finish_ret( &md5_ctx, md5sum ) ) != 0 )
 8026d68:	4651      	mov	r1, sl
 8026d6a:	a80e      	add	r0, sp, #56	; 0x38
 8026d6c:	f7ff fe54 	bl	8026a18 <mbedtls_md5_finish_ret>
 8026d70:	4604      	mov	r4, r0
 8026d72:	2800      	cmp	r0, #0
 8026d74:	d1f5      	bne.n	8026d62 <pem_aes_decrypt+0x7a>
    if( keylen <= 16 )
 8026d76:	2d10      	cmp	r5, #16
 8026d78:	d04c      	beq.n	8026e14 <pem_aes_decrypt+0x12c>
    memcpy( key, md5sum, 16 );
 8026d7a:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 8026d7e:	f10d 0918 	add.w	r9, sp, #24
 8026d82:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
    if( ( ret = mbedtls_md5_starts_ret( &md5_ctx ) ) != 0 )
 8026d86:	a80e      	add	r0, sp, #56	; 0x38
 8026d88:	f7ff fa6c 	bl	8026264 <mbedtls_md5_starts_ret>
 8026d8c:	4604      	mov	r4, r0
 8026d8e:	2800      	cmp	r0, #0
 8026d90:	d1c0      	bne.n	8026d14 <pem_aes_decrypt+0x2c>
    if( ( ret = mbedtls_md5_update_ret( &md5_ctx, md5sum, 16 ) ) != 0 )
 8026d92:	2210      	movs	r2, #16
 8026d94:	4651      	mov	r1, sl
 8026d96:	a80e      	add	r0, sp, #56	; 0x38
 8026d98:	f7ff fe38 	bl	8026a0c <mbedtls_md5_update_ret>
 8026d9c:	4604      	mov	r4, r0
 8026d9e:	2800      	cmp	r0, #0
 8026da0:	d1b8      	bne.n	8026d14 <pem_aes_decrypt+0x2c>
    if( ( ret = mbedtls_md5_update_ret( &md5_ctx, pwd, pwdlen ) ) != 0 )
 8026da2:	e9dd 1272 	ldrd	r1, r2, [sp, #456]	; 0x1c8
 8026da6:	a80e      	add	r0, sp, #56	; 0x38
 8026da8:	f7ff fe30 	bl	8026a0c <mbedtls_md5_update_ret>
 8026dac:	4604      	mov	r4, r0
 8026dae:	2800      	cmp	r0, #0
 8026db0:	d1b0      	bne.n	8026d14 <pem_aes_decrypt+0x2c>
    if( ( ret = mbedtls_md5_update_ret( &md5_ctx, iv, 8 ) ) != 0 )
 8026db2:	2208      	movs	r2, #8
 8026db4:	4631      	mov	r1, r6
 8026db6:	a80e      	add	r0, sp, #56	; 0x38
 8026db8:	f7ff fe28 	bl	8026a0c <mbedtls_md5_update_ret>
 8026dbc:	4604      	mov	r4, r0
 8026dbe:	2800      	cmp	r0, #0
 8026dc0:	d1a8      	bne.n	8026d14 <pem_aes_decrypt+0x2c>
    if( ( ret = mbedtls_md5_finish_ret( &md5_ctx, md5sum ) ) != 0 )
 8026dc2:	4651      	mov	r1, sl
 8026dc4:	a80e      	add	r0, sp, #56	; 0x38
 8026dc6:	f7ff fe27 	bl	8026a18 <mbedtls_md5_finish_ret>
 8026dca:	4604      	mov	r4, r0
 8026dcc:	2800      	cmp	r0, #0
 8026dce:	d1a1      	bne.n	8026d14 <pem_aes_decrypt+0x2c>
    if( keylen < 32 )
 8026dd0:	2d20      	cmp	r5, #32
    memcpy( key + 16, md5sum, use_len );
 8026dd2:	4651      	mov	r1, sl
    use_len = 16;
 8026dd4:	bf0c      	ite	eq
 8026dd6:	2210      	moveq	r2, #16
        use_len = keylen - 16;
 8026dd8:	f1a5 0210 	subne.w	r2, r5, #16
    memcpy( key + 16, md5sum, use_len );
 8026ddc:	a80a      	add	r0, sp, #40	; 0x28
 8026dde:	f009 f81b 	bl	802fe18 <memcpy>
    mbedtls_md5_free( &md5_ctx );
 8026de2:	a80e      	add	r0, sp, #56	; 0x38
 8026de4:	f7ff fa32 	bl	802624c <mbedtls_md5_free>
    mbedtls_platform_zeroize( md5sum, 16 );
 8026de8:	4650      	mov	r0, sl
 8026dea:	2110      	movs	r1, #16
 8026dec:	f000 fe9e 	bl	8027b2c <mbedtls_platform_zeroize>
    if( ( ret = mbedtls_aes_setkey_dec( &aes_ctx, aes_key, keylen * 8 ) ) != 0 )
 8026df0:	4649      	mov	r1, r9
 8026df2:	00ea      	lsls	r2, r5, #3
 8026df4:	a824      	add	r0, sp, #144	; 0x90
 8026df6:	f7f8 fc97 	bl	801f728 <mbedtls_aes_setkey_dec>
 8026dfa:	4604      	mov	r4, r0
 8026dfc:	2800      	cmp	r0, #0
 8026dfe:	d190      	bne.n	8026d22 <pem_aes_decrypt+0x3a>
    ret = mbedtls_aes_crypt_cbc( &aes_ctx, MBEDTLS_AES_DECRYPT, buflen,
 8026e00:	4601      	mov	r1, r0
 8026e02:	4633      	mov	r3, r6
 8026e04:	4642      	mov	r2, r8
 8026e06:	e9cd 7700 	strd	r7, r7, [sp]
 8026e0a:	a824      	add	r0, sp, #144	; 0x90
 8026e0c:	f7f9 f9b6 	bl	802017c <mbedtls_aes_crypt_cbc>
 8026e10:	4604      	mov	r4, r0
 8026e12:	e786      	b.n	8026d22 <pem_aes_decrypt+0x3a>
        memcpy( key, md5sum, keylen );
 8026e14:	f10d 0918 	add.w	r9, sp, #24
 8026e18:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 8026e1c:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
    mbedtls_md5_free( &md5_ctx );
 8026e20:	a80e      	add	r0, sp, #56	; 0x38
 8026e22:	f7ff fa13 	bl	802624c <mbedtls_md5_free>
    mbedtls_platform_zeroize( md5sum, 16 );
 8026e26:	4629      	mov	r1, r5
 8026e28:	4650      	mov	r0, sl
 8026e2a:	f000 fe7f 	bl	8027b2c <mbedtls_platform_zeroize>
    return( ret );
 8026e2e:	e7df      	b.n	8026df0 <pem_aes_decrypt+0x108>

08026e30 <mbedtls_pem_init>:
    memset( ctx, 0, sizeof( mbedtls_pem_context ) );
 8026e30:	2300      	movs	r3, #0
 8026e32:	6003      	str	r3, [r0, #0]
 8026e34:	6043      	str	r3, [r0, #4]
 8026e36:	6083      	str	r3, [r0, #8]
}
 8026e38:	4770      	bx	lr
 8026e3a:	bf00      	nop

08026e3c <mbedtls_pem_read_buffer>:
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

int mbedtls_pem_read_buffer( mbedtls_pem_context *ctx, const char *header, const char *footer,
                     const unsigned char *data, const unsigned char *pwd,
                     size_t pwdlen, size_t *use_len )
{
 8026e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026e40:	b08a      	sub	sp, #40	; 0x28
    ((void) pwd);
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
 8026e42:	2800      	cmp	r0, #0
 8026e44:	f000 815d 	beq.w	8027102 <mbedtls_pem_read_buffer+0x2c6>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );

    s1 = (unsigned char *) strstr( (const char *) data, header );
 8026e48:	4606      	mov	r6, r0
 8026e4a:	4618      	mov	r0, r3
 8026e4c:	4691      	mov	r9, r2
 8026e4e:	4698      	mov	r8, r3
 8026e50:	460d      	mov	r5, r1
 8026e52:	f009 fa6c 	bl	803032e <strstr>

    if( s1 == NULL )
 8026e56:	4607      	mov	r7, r0
 8026e58:	2800      	cmp	r0, #0
 8026e5a:	f000 814a 	beq.w	80270f2 <mbedtls_pem_read_buffer+0x2b6>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s2 = (unsigned char *) strstr( (const char *) data, footer );
 8026e5e:	4649      	mov	r1, r9
 8026e60:	4640      	mov	r0, r8
 8026e62:	f009 fa64 	bl	803032e <strstr>

    if( s2 == NULL || s2 <= s1 )
 8026e66:	4604      	mov	r4, r0
 8026e68:	2800      	cmp	r0, #0
 8026e6a:	f000 8142 	beq.w	80270f2 <mbedtls_pem_read_buffer+0x2b6>
 8026e6e:	4287      	cmp	r7, r0
 8026e70:	f080 813f 	bcs.w	80270f2 <mbedtls_pem_read_buffer+0x2b6>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
 8026e74:	4628      	mov	r0, r5
 8026e76:	f7e9 f9e9 	bl	801024c <strlen>
    if( *s1 == ' '  ) s1++;
 8026e7a:	5c3b      	ldrb	r3, [r7, r0]
    s1 += strlen( header );
 8026e7c:	4407      	add	r7, r0
    if( *s1 == ' '  ) s1++;
 8026e7e:	2b20      	cmp	r3, #32
 8026e80:	bf04      	itt	eq
 8026e82:	787b      	ldrbeq	r3, [r7, #1]
 8026e84:	3701      	addeq	r7, #1
    if( *s1 == '\r' ) s1++;
 8026e86:	2b0d      	cmp	r3, #13
 8026e88:	bf04      	itt	eq
 8026e8a:	787b      	ldrbeq	r3, [r7, #1]
 8026e8c:	3701      	addeq	r7, #1
    if( *s1 == '\n' ) s1++;
 8026e8e:	2b0a      	cmp	r3, #10
 8026e90:	f040 812f 	bne.w	80270f2 <mbedtls_pem_read_buffer+0x2b6>
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 8026e94:	4648      	mov	r0, r9
 8026e96:	f7e9 f9d9 	bl	801024c <strlen>
 8026e9a:	4602      	mov	r2, r0
    if( *end == ' '  ) end++;
 8026e9c:	5c23      	ldrb	r3, [r4, r0]
    end += strlen( footer );
 8026e9e:	4422      	add	r2, r4
    if( *end == ' '  ) end++;
 8026ea0:	2b20      	cmp	r3, #32
 8026ea2:	bf04      	itt	eq
 8026ea4:	7853      	ldrbeq	r3, [r2, #1]
 8026ea6:	3201      	addeq	r2, #1
    if( *end == '\r' ) end++;
 8026ea8:	2b0d      	cmp	r3, #13
 8026eaa:	bf08      	it	eq
 8026eac:	7853      	ldrbeq	r3, [r2, #1]
    if( *s1 == '\n' ) s1++;
 8026eae:	f107 0501 	add.w	r5, r7, #1
    if( *end == '\r' ) end++;
 8026eb2:	bf08      	it	eq
 8026eb4:	3201      	addeq	r2, #1
    if( *end == '\n' ) end++;
 8026eb6:	2b0a      	cmp	r3, #10
 8026eb8:	bf08      	it	eq
 8026eba:	3201      	addeq	r2, #1
    *use_len = end - data;
 8026ebc:	9914      	ldr	r1, [sp, #80]	; 0x50

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 8026ebe:	1b63      	subs	r3, r4, r5
    *use_len = end - data;
 8026ec0:	eba2 0208 	sub.w	r2, r2, r8
    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 8026ec4:	2b15      	cmp	r3, #21
    *use_len = end - data;
 8026ec6:	600a      	str	r2, [r1, #0]
    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 8026ec8:	dd7a      	ble.n	8026fc0 <mbedtls_pem_read_buffer+0x184>
 8026eca:	2216      	movs	r2, #22
 8026ecc:	4628      	mov	r0, r5
 8026ece:	4993      	ldr	r1, [pc, #588]	; (802711c <mbedtls_pem_read_buffer+0x2e0>)
 8026ed0:	f008 ff94 	bl	802fdfc <memcmp>
 8026ed4:	2800      	cmp	r0, #0
 8026ed6:	d173      	bne.n	8026fc0 <mbedtls_pem_read_buffer+0x184>
#if defined(MBEDTLS_MD5_C) && defined(MBEDTLS_CIPHER_MODE_CBC) &&         \
    ( defined(MBEDTLS_DES_C) || defined(MBEDTLS_AES_C) )
        enc++;

        s1 += 22;
        if( *s1 == '\r' ) s1++;
 8026ed8:	7dfb      	ldrb	r3, [r7, #23]
 8026eda:	2b0d      	cmp	r3, #13
 8026edc:	bf0a      	itet	eq
 8026ede:	7e3b      	ldrbeq	r3, [r7, #24]
        s1 += 22;
 8026ee0:	f107 0517 	addne.w	r5, r7, #23
        if( *s1 == '\r' ) s1++;
 8026ee4:	f107 0518 	addeq.w	r5, r7, #24
        if( *s1 == '\n' ) s1++;
 8026ee8:	2b0a      	cmp	r3, #10
 8026eea:	f040 8104 	bne.w	80270f6 <mbedtls_pem_read_buffer+0x2ba>
 8026eee:	1c6f      	adds	r7, r5, #1
            s1 += 16;
        }
#endif /* MBEDTLS_DES_C */

#if defined(MBEDTLS_AES_C)
        if( s2 - s1 >= 14 && memcmp( s1, "DEK-Info: AES-", 14 ) == 0 )
 8026ef0:	eba4 0807 	sub.w	r8, r4, r7
 8026ef4:	f1b8 0f0d 	cmp.w	r8, #13
 8026ef8:	f340 8101 	ble.w	80270fe <mbedtls_pem_read_buffer+0x2c2>
 8026efc:	220e      	movs	r2, #14
 8026efe:	4638      	mov	r0, r7
 8026f00:	4987      	ldr	r1, [pc, #540]	; (8027120 <mbedtls_pem_read_buffer+0x2e4>)
 8026f02:	f008 ff7b 	bl	802fdfc <memcmp>
 8026f06:	2800      	cmp	r0, #0
 8026f08:	f040 80f9 	bne.w	80270fe <mbedtls_pem_read_buffer+0x2c2>
        {
            if( s2 - s1 < 22 )
 8026f0c:	f1b8 0f15 	cmp.w	r8, #21
 8026f10:	f340 80f5 	ble.w	80270fe <mbedtls_pem_read_buffer+0x2c2>
                return( MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG );
            else if( memcmp( s1, "DEK-Info: AES-128-CBC,", 22 ) == 0 )
 8026f14:	2216      	movs	r2, #22
 8026f16:	4638      	mov	r0, r7
 8026f18:	4982      	ldr	r1, [pc, #520]	; (8027124 <mbedtls_pem_read_buffer+0x2e8>)
 8026f1a:	f008 ff6f 	bl	802fdfc <memcmp>
 8026f1e:	2800      	cmp	r0, #0
 8026f20:	f000 8096 	beq.w	8027050 <mbedtls_pem_read_buffer+0x214>
                enc_alg = MBEDTLS_CIPHER_AES_128_CBC;
            else if( memcmp( s1, "DEK-Info: AES-192-CBC,", 22 ) == 0 )
 8026f24:	2216      	movs	r2, #22
 8026f26:	4638      	mov	r0, r7
 8026f28:	497f      	ldr	r1, [pc, #508]	; (8027128 <mbedtls_pem_read_buffer+0x2ec>)
 8026f2a:	f008 ff67 	bl	802fdfc <memcmp>
 8026f2e:	2800      	cmp	r0, #0
 8026f30:	f000 80cd 	beq.w	80270ce <mbedtls_pem_read_buffer+0x292>
                enc_alg = MBEDTLS_CIPHER_AES_192_CBC;
            else if( memcmp( s1, "DEK-Info: AES-256-CBC,", 22 ) == 0 )
 8026f34:	4638      	mov	r0, r7
 8026f36:	2216      	movs	r2, #22
 8026f38:	497c      	ldr	r1, [pc, #496]	; (802712c <mbedtls_pem_read_buffer+0x2f0>)
 8026f3a:	f008 ff5f 	bl	802fdfc <memcmp>
 8026f3e:	2800      	cmp	r0, #0
 8026f40:	f040 80dd 	bne.w	80270fe <mbedtls_pem_read_buffer+0x2c2>
                enc_alg = MBEDTLS_CIPHER_AES_256_CBC;
 8026f44:	2707      	movs	r7, #7
            else
                return( MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG );

            s1 += 22;
 8026f46:	f105 0317 	add.w	r3, r5, #23
            if( s2 - s1 < 32 || pem_get_iv( s1, pem_iv, 16 ) != 0 )
 8026f4a:	1ae3      	subs	r3, r4, r3
 8026f4c:	2b1f      	cmp	r3, #31
 8026f4e:	f340 80ce 	ble.w	80270ee <mbedtls_pem_read_buffer+0x2b2>
    memset( iv, 0, iv_len );
 8026f52:	2300      	movs	r3, #0
 8026f54:	f06f 0e15 	mvn.w	lr, #21
 8026f58:	f10d 0c18 	add.w	ip, sp, #24
 8026f5c:	9306      	str	r3, [sp, #24]
 8026f5e:	ebae 0e05 	sub.w	lr, lr, r5
 8026f62:	e9cc 3301 	strd	r3, r3, [ip, #4]
 8026f66:	f8cc 300c 	str.w	r3, [ip, #12]
    for( i = 0; i < iv_len * 2; i++, s++ )
 8026f6a:	f105 0116 	add.w	r1, r5, #22
 8026f6e:	f105 0836 	add.w	r8, r5, #54	; 0x36
 8026f72:	e00e      	b.n	8026f92 <mbedtls_pem_read_buffer+0x156>
        if( *s >= 'A' && *s <= 'F' ) j = *s - '7'; else
 8026f74:	f1a2 0337 	sub.w	r3, r2, #55	; 0x37
        iv[i >> 1] = (unsigned char)( iv[i >> 1] | k );
 8026f78:	ea4f 0059 	mov.w	r0, r9, lsr #1
 8026f7c:	f81c 2000 	ldrb.w	r2, [ip, r0]
        k = ( ( i & 1 ) != 0 ) ? j : j << 4;
 8026f80:	f019 0f01 	tst.w	r9, #1
 8026f84:	bf08      	it	eq
 8026f86:	011b      	lsleq	r3, r3, #4
        iv[i >> 1] = (unsigned char)( iv[i >> 1] | k );
 8026f88:	4313      	orrs	r3, r2
    for( i = 0; i < iv_len * 2; i++, s++ )
 8026f8a:	4588      	cmp	r8, r1
        iv[i >> 1] = (unsigned char)( iv[i >> 1] | k );
 8026f8c:	f80c 3000 	strb.w	r3, [ip, r0]
    for( i = 0; i < iv_len * 2; i++, s++ )
 8026f90:	d060      	beq.n	8027054 <mbedtls_pem_read_buffer+0x218>
        if( *s >= 'A' && *s <= 'F' ) j = *s - '7'; else
 8026f92:	eb0e 0901 	add.w	r9, lr, r1
        if( *s >= '0' && *s <= '9' ) j = *s - '0'; else
 8026f96:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8026f9a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8026f9e:	fa5f fa83 	uxtb.w	sl, r3
 8026fa2:	f1ba 0f09 	cmp.w	sl, #9
        if( *s >= 'A' && *s <= 'F' ) j = *s - '7'; else
 8026fa6:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
        if( *s >= '0' && *s <= '9' ) j = *s - '0'; else
 8026faa:	d9e5      	bls.n	8026f78 <mbedtls_pem_read_buffer+0x13c>
        if( *s >= 'A' && *s <= 'F' ) j = *s - '7'; else
 8026fac:	2805      	cmp	r0, #5
        if( *s >= 'a' && *s <= 'f' ) j = *s - 'W'; else
 8026fae:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
        if( *s >= 'A' && *s <= 'F' ) j = *s - '7'; else
 8026fb2:	d9df      	bls.n	8026f74 <mbedtls_pem_read_buffer+0x138>
        if( *s >= 'a' && *s <= 'f' ) j = *s - 'W'; else
 8026fb4:	2b05      	cmp	r3, #5
 8026fb6:	f200 809a 	bhi.w	80270ee <mbedtls_pem_read_buffer+0x2b2>
 8026fba:	f1a2 0357 	sub.w	r3, r2, #87	; 0x57
 8026fbe:	e7db      	b.n	8026f78 <mbedtls_pem_read_buffer+0x13c>
    mbedtls_cipher_type_t enc_alg = MBEDTLS_CIPHER_NONE;
 8026fc0:	2700      	movs	r7, #0
    enc = 0;
 8026fc2:	46b9      	mov	r9, r7
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
 8026fc4:	42a5      	cmp	r5, r4
 8026fc6:	f080 8096 	bcs.w	80270f6 <mbedtls_pem_read_buffer+0x2ba>
        return( MBEDTLS_ERR_PEM_INVALID_DATA );

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );
 8026fca:	2100      	movs	r1, #0
 8026fcc:	eba4 0805 	sub.w	r8, r4, r5
 8026fd0:	4608      	mov	r0, r1
 8026fd2:	462b      	mov	r3, r5
 8026fd4:	f8cd 8000 	str.w	r8, [sp]
 8026fd8:	aa05      	add	r2, sp, #20
 8026fda:	f7f9 fdaf 	bl	8020b3c <mbedtls_base64_decode>

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
 8026fde:	302c      	adds	r0, #44	; 0x2c
 8026fe0:	f000 808b 	beq.w	80270fa <mbedtls_pem_read_buffer+0x2be>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );

    if( ( buf = mbedtls_calloc( 1, len ) ) == NULL )
 8026fe4:	9905      	ldr	r1, [sp, #20]
 8026fe6:	2001      	movs	r0, #1
 8026fe8:	9103      	str	r1, [sp, #12]
 8026fea:	f008 fec5 	bl	802fd78 <calloc>
 8026fee:	4604      	mov	r4, r0
 8026ff0:	2800      	cmp	r0, #0
 8026ff2:	f000 8091 	beq.w	8027118 <mbedtls_pem_read_buffer+0x2dc>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );

    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
 8026ff6:	462b      	mov	r3, r5
 8026ff8:	9903      	ldr	r1, [sp, #12]
 8026ffa:	f8cd 8000 	str.w	r8, [sp]
 8026ffe:	aa05      	add	r2, sp, #20
 8027000:	f7f9 fd9c 	bl	8020b3c <mbedtls_base64_decode>
 8027004:	4605      	mov	r5, r0
 8027006:	bb80      	cbnz	r0, 802706a <mbedtls_pem_read_buffer+0x22e>
        mbedtls_platform_zeroize( buf, len );
        mbedtls_free( buf );
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
    }

    if( enc != 0 )
 8027008:	f1b9 0f00 	cmp.w	r9, #0
 802700c:	d019      	beq.n	8027042 <mbedtls_pem_read_buffer+0x206>
    {
#if defined(MBEDTLS_MD5_C) && defined(MBEDTLS_CIPHER_MODE_CBC) &&         \
    ( defined(MBEDTLS_DES_C) || defined(MBEDTLS_AES_C) )
        if( pwd == NULL )
 802700e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8027010:	2b00      	cmp	r3, #0
 8027012:	d078      	beq.n	8027106 <mbedtls_pem_read_buffer+0x2ca>
        else if( enc_alg == MBEDTLS_CIPHER_DES_CBC )
            ret = pem_des_decrypt( pem_iv, buf, len, pwd, pwdlen );
#endif /* MBEDTLS_DES_C */

#if defined(MBEDTLS_AES_C)
        if( enc_alg == MBEDTLS_CIPHER_AES_128_CBC )
 8027014:	2f05      	cmp	r7, #5
 8027016:	d039      	beq.n	802708c <mbedtls_pem_read_buffer+0x250>
            ret = pem_aes_decrypt( pem_iv, 16, buf, len, pwd, pwdlen );
        else if( enc_alg == MBEDTLS_CIPHER_AES_192_CBC )
 8027018:	2f06      	cmp	r7, #6
 802701a:	d049      	beq.n	80270b0 <mbedtls_pem_read_buffer+0x274>
            ret = pem_aes_decrypt( pem_iv, 24, buf, len, pwd, pwdlen );
        else if( enc_alg == MBEDTLS_CIPHER_AES_256_CBC )
 802701c:	2f07      	cmp	r7, #7
 802701e:	d058      	beq.n	80270d2 <mbedtls_pem_read_buffer+0x296>
         * The result will be ASN.1 starting with a SEQUENCE tag, with 1 to 3
         * length bytes (allow 4 to be sure) in all known use cases.
         *
         * Use that as a heuristic to try to detect password mismatches.
         */
        if( len <= 2 || buf[0] != 0x30 || buf[1] > 0x83 )
 8027020:	9905      	ldr	r1, [sp, #20]
 8027022:	2902      	cmp	r1, #2
 8027024:	d905      	bls.n	8027032 <mbedtls_pem_read_buffer+0x1f6>
 8027026:	7823      	ldrb	r3, [r4, #0]
 8027028:	2b30      	cmp	r3, #48	; 0x30
 802702a:	d102      	bne.n	8027032 <mbedtls_pem_read_buffer+0x1f6>
 802702c:	7863      	ldrb	r3, [r4, #1]
 802702e:	2b83      	cmp	r3, #131	; 0x83
 8027030:	d908      	bls.n	8027044 <mbedtls_pem_read_buffer+0x208>
        {
            mbedtls_platform_zeroize( buf, len );
 8027032:	4620      	mov	r0, r4
 8027034:	f000 fd7a 	bl	8027b2c <mbedtls_platform_zeroize>
            mbedtls_free( buf );
 8027038:	4620      	mov	r0, r4
 802703a:	f008 fed7 	bl	802fdec <free>
            return( MBEDTLS_ERR_PEM_PASSWORD_MISMATCH );
 802703e:	4d3c      	ldr	r5, [pc, #240]	; (8027130 <mbedtls_pem_read_buffer+0x2f4>)
 8027040:	e002      	b.n	8027048 <mbedtls_pem_read_buffer+0x20c>
 8027042:	9905      	ldr	r1, [sp, #20]
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    ctx->buf = buf;
    ctx->buflen = len;
 8027044:	e9c6 4100 	strd	r4, r1, [r6]

    return( 0 );
}
 8027048:	4628      	mov	r0, r5
 802704a:	b00a      	add	sp, #40	; 0x28
 802704c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                enc_alg = MBEDTLS_CIPHER_AES_128_CBC;
 8027050:	2705      	movs	r7, #5
 8027052:	e778      	b.n	8026f46 <mbedtls_pem_read_buffer+0x10a>
        if( *s1 == '\r' ) s1++;
 8027054:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
 8027058:	2b0d      	cmp	r3, #13
 802705a:	d013      	beq.n	8027084 <mbedtls_pem_read_buffer+0x248>
            s1 += 32;
 802705c:	3537      	adds	r5, #55	; 0x37
        if( *s1 == '\n' ) s1++;
 802705e:	2b0a      	cmp	r3, #10
 8027060:	d149      	bne.n	80270f6 <mbedtls_pem_read_buffer+0x2ba>
        enc++;
 8027062:	f04f 0901 	mov.w	r9, #1
        if( *s1 == '\n' ) s1++;
 8027066:	3501      	adds	r5, #1
 8027068:	e7ac      	b.n	8026fc4 <mbedtls_pem_read_buffer+0x188>
        mbedtls_platform_zeroize( buf, len );
 802706a:	4620      	mov	r0, r4
 802706c:	9905      	ldr	r1, [sp, #20]
 802706e:	f000 fd5d 	bl	8027b2c <mbedtls_platform_zeroize>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 8027072:	f5a5 5588 	sub.w	r5, r5, #4352	; 0x1100
        mbedtls_free( buf );
 8027076:	4620      	mov	r0, r4
 8027078:	f008 feb8 	bl	802fdec <free>
}
 802707c:	4628      	mov	r0, r5
 802707e:	b00a      	add	sp, #40	; 0x28
 8027080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( *s1 == '\r' ) s1++;
 8027084:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 8027088:	3538      	adds	r5, #56	; 0x38
 802708a:	e7e8      	b.n	802705e <mbedtls_pem_read_buffer+0x222>
            ret = pem_aes_decrypt( pem_iv, 16, buf, len, pwd, pwdlen );
 802708c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802708e:	4622      	mov	r2, r4
 8027090:	9301      	str	r3, [sp, #4]
 8027092:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8027094:	2110      	movs	r1, #16
 8027096:	9300      	str	r3, [sp, #0]
 8027098:	a806      	add	r0, sp, #24
 802709a:	9b05      	ldr	r3, [sp, #20]
 802709c:	f7ff fe24 	bl	8026ce8 <pem_aes_decrypt>
 80270a0:	4607      	mov	r7, r0
        if( ret != 0 )
 80270a2:	2f00      	cmp	r7, #0
 80270a4:	d0bc      	beq.n	8027020 <mbedtls_pem_read_buffer+0x1e4>
            mbedtls_free( buf );
 80270a6:	4620      	mov	r0, r4
 80270a8:	f008 fea0 	bl	802fdec <free>
            return( ret );
 80270ac:	463d      	mov	r5, r7
 80270ae:	e7cb      	b.n	8027048 <mbedtls_pem_read_buffer+0x20c>
            ret = pem_aes_decrypt( pem_iv, 24, buf, len, pwd, pwdlen );
 80270b0:	2118      	movs	r1, #24
 80270b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80270b4:	4622      	mov	r2, r4
 80270b6:	9301      	str	r3, [sp, #4]
 80270b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80270ba:	eb0d 0001 	add.w	r0, sp, r1
 80270be:	9300      	str	r3, [sp, #0]
 80270c0:	9b05      	ldr	r3, [sp, #20]
 80270c2:	f7ff fe11 	bl	8026ce8 <pem_aes_decrypt>
 80270c6:	4607      	mov	r7, r0
        if( ret != 0 )
 80270c8:	2f00      	cmp	r7, #0
 80270ca:	d0a9      	beq.n	8027020 <mbedtls_pem_read_buffer+0x1e4>
 80270cc:	e7eb      	b.n	80270a6 <mbedtls_pem_read_buffer+0x26a>
                enc_alg = MBEDTLS_CIPHER_AES_192_CBC;
 80270ce:	2706      	movs	r7, #6
 80270d0:	e739      	b.n	8026f46 <mbedtls_pem_read_buffer+0x10a>
            ret = pem_aes_decrypt( pem_iv, 32, buf, len, pwd, pwdlen );
 80270d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80270d4:	4622      	mov	r2, r4
 80270d6:	9301      	str	r3, [sp, #4]
 80270d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80270da:	2120      	movs	r1, #32
 80270dc:	9300      	str	r3, [sp, #0]
 80270de:	a806      	add	r0, sp, #24
 80270e0:	9b05      	ldr	r3, [sp, #20]
 80270e2:	f7ff fe01 	bl	8026ce8 <pem_aes_decrypt>
 80270e6:	4607      	mov	r7, r0
        if( ret != 0 )
 80270e8:	2f00      	cmp	r7, #0
 80270ea:	d099      	beq.n	8027020 <mbedtls_pem_read_buffer+0x1e4>
 80270ec:	e7db      	b.n	80270a6 <mbedtls_pem_read_buffer+0x26a>
                return( MBEDTLS_ERR_PEM_INVALID_ENC_IV );
 80270ee:	4d11      	ldr	r5, [pc, #68]	; (8027134 <mbedtls_pem_read_buffer+0x2f8>)
 80270f0:	e7aa      	b.n	8027048 <mbedtls_pem_read_buffer+0x20c>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
 80270f2:	4d11      	ldr	r5, [pc, #68]	; (8027138 <mbedtls_pem_read_buffer+0x2fc>)
 80270f4:	e7a8      	b.n	8027048 <mbedtls_pem_read_buffer+0x20c>
        else return( MBEDTLS_ERR_PEM_INVALID_DATA );
 80270f6:	4d11      	ldr	r5, [pc, #68]	; (802713c <mbedtls_pem_read_buffer+0x300>)
 80270f8:	e7a6      	b.n	8027048 <mbedtls_pem_read_buffer+0x20c>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 80270fa:	4d11      	ldr	r5, [pc, #68]	; (8027140 <mbedtls_pem_read_buffer+0x304>)
 80270fc:	e7a4      	b.n	8027048 <mbedtls_pem_read_buffer+0x20c>
            return( MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG );
 80270fe:	4d11      	ldr	r5, [pc, #68]	; (8027144 <mbedtls_pem_read_buffer+0x308>)
 8027100:	e7a2      	b.n	8027048 <mbedtls_pem_read_buffer+0x20c>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );
 8027102:	4d11      	ldr	r5, [pc, #68]	; (8027148 <mbedtls_pem_read_buffer+0x30c>)
 8027104:	e7a0      	b.n	8027048 <mbedtls_pem_read_buffer+0x20c>
            mbedtls_platform_zeroize( buf, len );
 8027106:	4620      	mov	r0, r4
 8027108:	9905      	ldr	r1, [sp, #20]
 802710a:	f000 fd0f 	bl	8027b2c <mbedtls_platform_zeroize>
            mbedtls_free( buf );
 802710e:	4620      	mov	r0, r4
 8027110:	f008 fe6c 	bl	802fdec <free>
            return( MBEDTLS_ERR_PEM_PASSWORD_REQUIRED );
 8027114:	4d0d      	ldr	r5, [pc, #52]	; (802714c <mbedtls_pem_read_buffer+0x310>)
 8027116:	e797      	b.n	8027048 <mbedtls_pem_read_buffer+0x20c>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
 8027118:	4d0d      	ldr	r5, [pc, #52]	; (8027150 <mbedtls_pem_read_buffer+0x314>)
 802711a:	e795      	b.n	8027048 <mbedtls_pem_read_buffer+0x20c>
 802711c:	080352d4 	.word	0x080352d4
 8027120:	080352ec 	.word	0x080352ec
 8027124:	080352fc 	.word	0x080352fc
 8027128:	08035314 	.word	0x08035314
 802712c:	0803532c 	.word	0x0803532c
 8027130:	ffffec80 	.word	0xffffec80
 8027134:	ffffee00 	.word	0xffffee00
 8027138:	ffffef80 	.word	0xffffef80
 802713c:	ffffef00 	.word	0xffffef00
 8027140:	ffffeed4 	.word	0xffffeed4
 8027144:	ffffed80 	.word	0xffffed80
 8027148:	ffffeb80 	.word	0xffffeb80
 802714c:	ffffed00 	.word	0xffffed00
 8027150:	ffffee80 	.word	0xffffee80

08027154 <mbedtls_pem_free>:

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
 8027154:	b510      	push	{r4, lr}
 8027156:	4604      	mov	r4, r0
    if ( ctx->buf != NULL )
 8027158:	6800      	ldr	r0, [r0, #0]
 802715a:	b128      	cbz	r0, 8027168 <mbedtls_pem_free+0x14>
    {
        mbedtls_platform_zeroize( ctx->buf, ctx->buflen );
 802715c:	6861      	ldr	r1, [r4, #4]
 802715e:	f000 fce5 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( ctx->buf );
 8027162:	6820      	ldr	r0, [r4, #0]
 8027164:	f008 fe42 	bl	802fdec <free>
    }
    mbedtls_free( ctx->info );
 8027168:	68a0      	ldr	r0, [r4, #8]
 802716a:	f008 fe3f 	bl	802fdec <free>

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pem_context ) );
 802716e:	4620      	mov	r0, r4
}
 8027170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pem_context ) );
 8027174:	210c      	movs	r1, #12
 8027176:	f000 bcd9 	b.w	8027b2c <mbedtls_platform_zeroize>
 802717a:	bf00      	nop

0802717c <mbedtls_pk_init>:
 */
void mbedtls_pk_init( mbedtls_pk_context *ctx )
{
    PK_VALIDATE( ctx != NULL );

    ctx->pk_info = NULL;
 802717c:	2300      	movs	r3, #0
    ctx->pk_ctx = NULL;
 802717e:	e9c0 3300 	strd	r3, r3, [r0]
}
 8027182:	4770      	bx	lr

08027184 <mbedtls_pk_free>:
/*
 * Free (the components of) a mbedtls_pk_context
 */
void mbedtls_pk_free( mbedtls_pk_context *ctx )
{
    if( ctx == NULL )
 8027184:	b160      	cbz	r0, 80271a0 <mbedtls_pk_free+0x1c>
        return;

    if ( ctx->pk_info != NULL )
 8027186:	6803      	ldr	r3, [r0, #0]
{
 8027188:	b510      	push	{r4, lr}
 802718a:	4604      	mov	r4, r0
    if ( ctx->pk_info != NULL )
 802718c:	b113      	cbz	r3, 8027194 <mbedtls_pk_free+0x10>
        ctx->pk_info->ctx_free_func( ctx->pk_ctx );
 802718e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027190:	6840      	ldr	r0, [r0, #4]
 8027192:	4798      	blx	r3

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pk_context ) );
 8027194:	4620      	mov	r0, r4
}
 8027196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pk_context ) );
 802719a:	2108      	movs	r1, #8
 802719c:	f000 bcc6 	b.w	8027b2c <mbedtls_platform_zeroize>
 80271a0:	4770      	bx	lr
 80271a2:	bf00      	nop

080271a4 <mbedtls_pk_info_from_type>:
        case MBEDTLS_PK_ECDSA:
            return( &mbedtls_ecdsa_info );
#endif
        /* MBEDTLS_PK_RSA_ALT omitted on purpose */
        default:
            return( NULL );
 80271a4:	4b02      	ldr	r3, [pc, #8]	; (80271b0 <mbedtls_pk_info_from_type+0xc>)
    switch( pk_type ) {
 80271a6:	2801      	cmp	r0, #1
    }
}
 80271a8:	bf0c      	ite	eq
 80271aa:	4618      	moveq	r0, r3
 80271ac:	2000      	movne	r0, #0
 80271ae:	4770      	bx	lr
 80271b0:	0803535c 	.word	0x0803535c

080271b4 <mbedtls_pk_setup>:
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
    PK_VALIDATE_RET( ctx != NULL );
    if( info == NULL || ctx->pk_info != NULL )
 80271b4:	b169      	cbz	r1, 80271d2 <mbedtls_pk_setup+0x1e>
{
 80271b6:	b570      	push	{r4, r5, r6, lr}
    if( info == NULL || ctx->pk_info != NULL )
 80271b8:	6806      	ldr	r6, [r0, #0]
 80271ba:	4605      	mov	r5, r0
 80271bc:	b93e      	cbnz	r6, 80271ce <mbedtls_pk_setup+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
 80271be:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80271c0:	460c      	mov	r4, r1
 80271c2:	4798      	blx	r3
 80271c4:	6068      	str	r0, [r5, #4]
 80271c6:	b130      	cbz	r0, 80271d6 <mbedtls_pk_setup+0x22>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );

    ctx->pk_info = info;

    return( 0 );
 80271c8:	4630      	mov	r0, r6
    ctx->pk_info = info;
 80271ca:	602c      	str	r4, [r5, #0]
}
 80271cc:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 80271ce:	4803      	ldr	r0, [pc, #12]	; (80271dc <mbedtls_pk_setup+0x28>)
}
 80271d0:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 80271d2:	4802      	ldr	r0, [pc, #8]	; (80271dc <mbedtls_pk_setup+0x28>)
}
 80271d4:	4770      	bx	lr
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 80271d6:	4802      	ldr	r0, [pc, #8]	; (80271e0 <mbedtls_pk_setup+0x2c>)
}
 80271d8:	bd70      	pop	{r4, r5, r6, pc}
 80271da:	bf00      	nop
 80271dc:	ffffc180 	.word	0xffffc180
 80271e0:	ffffc080 	.word	0xffffc080

080271e4 <mbedtls_pk_can_do>:
int mbedtls_pk_can_do( const mbedtls_pk_context *ctx, mbedtls_pk_type_t type )
{
    /* A context with null pk_info is not set up yet and can't do anything.
     * For backward compatibility, also accept NULL instead of a context
     * pointer. */
    if( ctx == NULL || ctx->pk_info == NULL )
 80271e4:	b120      	cbz	r0, 80271f0 <mbedtls_pk_can_do+0xc>
 80271e6:	6803      	ldr	r3, [r0, #0]
 80271e8:	b113      	cbz	r3, 80271f0 <mbedtls_pk_can_do+0xc>
        return( 0 );

    return( ctx->pk_info->can_do( type ) );
 80271ea:	4608      	mov	r0, r1
 80271ec:	68db      	ldr	r3, [r3, #12]
 80271ee:	4718      	bx	r3
}
 80271f0:	2000      	movs	r0, #0
 80271f2:	4770      	bx	lr

080271f4 <mbedtls_pk_verify_ext>:
 */
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
 80271f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80271f8:	4614      	mov	r4, r2
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL )
 80271fa:	6812      	ldr	r2, [r2, #0]
{
 80271fc:	b087      	sub	sp, #28
 80271fe:	e9dd a810 	ldrd	sl, r8, [sp, #64]	; 0x40
 8027202:	e9dd b912 	ldrd	fp, r9, [sp, #72]	; 0x48
    if( ctx->pk_info == NULL )
 8027206:	2a00      	cmp	r2, #0
 8027208:	d051      	beq.n	80272ae <mbedtls_pk_verify_ext+0xba>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ! mbedtls_pk_can_do( ctx, type ) )
 802720a:	461e      	mov	r6, r3
    return( ctx->pk_info->can_do( type ) );
 802720c:	68d3      	ldr	r3, [r2, #12]
 802720e:	460d      	mov	r5, r1
 8027210:	4607      	mov	r7, r0
 8027212:	4798      	blx	r3
    if( ! mbedtls_pk_can_do( ctx, type ) )
 8027214:	2800      	cmp	r0, #0
 8027216:	d04c      	beq.n	80272b2 <mbedtls_pk_verify_ext+0xbe>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    if( type == MBEDTLS_PK_RSASSA_PSS )
 8027218:	2f06      	cmp	r7, #6
 802721a:	d01e      	beq.n	802725a <mbedtls_pk_verify_ext+0x66>
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_RSA_C && MBEDTLS_PKCS1_V21 */
    }

    /* General case: no options */
    if( options != NULL )
 802721c:	2d00      	cmp	r5, #0
 802721e:	d146      	bne.n	80272ae <mbedtls_pk_verify_ext+0xba>
    if( ctx->pk_info == NULL ||
 8027220:	6823      	ldr	r3, [r4, #0]
 8027222:	2b00      	cmp	r3, #0
 8027224:	d043      	beq.n	80272ae <mbedtls_pk_verify_ext+0xba>
    if( *hash_len != 0 )
 8027226:	f1b8 0f00 	cmp.w	r8, #0
 802722a:	d00d      	beq.n	8027248 <mbedtls_pk_verify_ext+0x54>
    if( ctx->pk_info->verify_func == NULL )
 802722c:	691d      	ldr	r5, [r3, #16]
 802722e:	2d00      	cmp	r5, #0
 8027230:	d03f      	beq.n	80272b2 <mbedtls_pk_verify_ext+0xbe>
    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
 8027232:	4643      	mov	r3, r8
 8027234:	4652      	mov	r2, sl
 8027236:	4631      	mov	r1, r6
 8027238:	46ac      	mov	ip, r5
 802723a:	e9cd b910 	strd	fp, r9, [sp, #64]	; 0x40
 802723e:	6860      	ldr	r0, [r4, #4]
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
}
 8027240:	b007      	add	sp, #28
 8027242:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
 8027246:	4760      	bx	ip
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 8027248:	4630      	mov	r0, r6
 802724a:	f7fe fd01 	bl	8025c50 <mbedtls_md_info_from_type>
 802724e:	b370      	cbz	r0, 80272ae <mbedtls_pk_verify_ext+0xba>
    *hash_len = mbedtls_md_get_size( md_info );
 8027250:	f7fe fff0 	bl	8026234 <mbedtls_md_get_size>
 8027254:	6823      	ldr	r3, [r4, #0]
 8027256:	4680      	mov	r8, r0
    return( 0 );
 8027258:	e7e8      	b.n	802722c <mbedtls_pk_verify_ext+0x38>
        if( options == NULL )
 802725a:	b345      	cbz	r5, 80272ae <mbedtls_pk_verify_ext+0xba>
 */
size_t mbedtls_pk_get_bitlen( const mbedtls_pk_context *ctx )
{
    /* For backward compatibility, accept NULL or a context that
     * isn't set up yet, and return a fake value that should be safe. */
    if( ctx == NULL || ctx->pk_info == NULL )
 802725c:	6823      	ldr	r3, [r4, #0]
 802725e:	b133      	cbz	r3, 802726e <mbedtls_pk_verify_ext+0x7a>
        return( 0 );

    return( ctx->pk_info->get_bitlen( ctx->pk_ctx ) );
 8027260:	689b      	ldr	r3, [r3, #8]
 8027262:	6860      	ldr	r0, [r4, #4]
 8027264:	4798      	blx	r3
 *
 * \return          Key length in bytes, or 0 on error
 */
static inline size_t mbedtls_pk_get_len( const mbedtls_pk_context *ctx )
{
    return( ( mbedtls_pk_get_bitlen( ctx ) + 7 ) / 8 );
 8027266:	3007      	adds	r0, #7
        if( sig_len < mbedtls_pk_get_len( ctx ) )
 8027268:	ebb9 0fd0 	cmp.w	r9, r0, lsr #3
 802726c:	d323      	bcc.n	80272b6 <mbedtls_pk_verify_ext+0xc2>
        ret = mbedtls_rsa_rsassa_pss_verify_ext( mbedtls_pk_rsa( *ctx ),
 802726e:	2300      	movs	r3, #0
 8027270:	f8cd b014 	str.w	fp, [sp, #20]
 8027274:	7828      	ldrb	r0, [r5, #0]
 8027276:	686f      	ldr	r7, [r5, #4]
 8027278:	e9cd 8a01 	strd	r8, sl, [sp, #4]
 802727c:	e9cd 0703 	strd	r0, r7, [sp, #12]
 8027280:	9600      	str	r6, [sp, #0]
 8027282:	461a      	mov	r2, r3
 8027284:	4619      	mov	r1, r3
 8027286:	6860      	ldr	r0, [r4, #4]
 8027288:	f002 f8ec 	bl	8029464 <mbedtls_rsa_rsassa_pss_verify_ext>
        if( ret != 0 )
 802728c:	4605      	mov	r5, r0
 802728e:	b950      	cbnz	r0, 80272a6 <mbedtls_pk_verify_ext+0xb2>
    if( ctx == NULL || ctx->pk_info == NULL )
 8027290:	6823      	ldr	r3, [r4, #0]
 8027292:	b123      	cbz	r3, 802729e <mbedtls_pk_verify_ext+0xaa>
    return( ctx->pk_info->get_bitlen( ctx->pk_ctx ) );
 8027294:	689b      	ldr	r3, [r3, #8]
 8027296:	6860      	ldr	r0, [r4, #4]
 8027298:	4798      	blx	r3
 802729a:	3007      	adds	r0, #7
 802729c:	08c0      	lsrs	r0, r0, #3
            return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
 802729e:	4b07      	ldr	r3, [pc, #28]	; (80272bc <mbedtls_pk_verify_ext+0xc8>)
 80272a0:	4581      	cmp	r9, r0
 80272a2:	bf88      	it	hi
 80272a4:	461d      	movhi	r5, r3
}
 80272a6:	4628      	mov	r0, r5
 80272a8:	b007      	add	sp, #28
 80272aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 80272ae:	4d04      	ldr	r5, [pc, #16]	; (80272c0 <mbedtls_pk_verify_ext+0xcc>)
 80272b0:	e7f9      	b.n	80272a6 <mbedtls_pk_verify_ext+0xb2>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 80272b2:	4d04      	ldr	r5, [pc, #16]	; (80272c4 <mbedtls_pk_verify_ext+0xd0>)
 80272b4:	e7f7      	b.n	80272a6 <mbedtls_pk_verify_ext+0xb2>
            return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 80272b6:	4d04      	ldr	r5, [pc, #16]	; (80272c8 <mbedtls_pk_verify_ext+0xd4>)
 80272b8:	e7f5      	b.n	80272a6 <mbedtls_pk_verify_ext+0xb2>
 80272ba:	bf00      	nop
 80272bc:	ffffc700 	.word	0xffffc700
 80272c0:	ffffc180 	.word	0xffffc180
 80272c4:	ffffc100 	.word	0xffffc100
 80272c8:	ffffbc80 	.word	0xffffbc80

080272cc <mbedtls_pk_sign_restartable>:
{
 80272cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80272d0:	4604      	mov	r4, r0
    if( ctx->pk_info == NULL ||
 80272d2:	6800      	ldr	r0, [r0, #0]
{
 80272d4:	b082      	sub	sp, #8
 80272d6:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
 80272da:	e9dd 9a0c 	ldrd	r9, sl, [sp, #48]	; 0x30
    if( ctx->pk_info == NULL ||
 80272de:	b1c8      	cbz	r0, 8027314 <mbedtls_pk_sign_restartable+0x48>
    if( *hash_len != 0 )
 80272e0:	4616      	mov	r6, r2
 80272e2:	b163      	cbz	r3, 80272fe <mbedtls_pk_sign_restartable+0x32>
    if( ctx->pk_info->sign_func == NULL )
 80272e4:	6945      	ldr	r5, [r0, #20]
 80272e6:	b1cd      	cbz	r5, 802731c <mbedtls_pk_sign_restartable+0x50>
    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
 80272e8:	4632      	mov	r2, r6
 80272ea:	46ac      	mov	ip, r5
 80272ec:	e9cd 9a0c 	strd	r9, sl, [sp, #48]	; 0x30
 80272f0:	e9cd 780a 	strd	r7, r8, [sp, #40]	; 0x28
 80272f4:	6860      	ldr	r0, [r4, #4]
}
 80272f6:	b002      	add	sp, #8
 80272f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
 80272fc:	4760      	bx	ip
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 80272fe:	4608      	mov	r0, r1
 8027300:	9101      	str	r1, [sp, #4]
 8027302:	f7fe fca5 	bl	8025c50 <mbedtls_md_info_from_type>
 8027306:	b128      	cbz	r0, 8027314 <mbedtls_pk_sign_restartable+0x48>
    *hash_len = mbedtls_md_get_size( md_info );
 8027308:	f7fe ff94 	bl	8026234 <mbedtls_md_get_size>
 802730c:	9901      	ldr	r1, [sp, #4]
 802730e:	4603      	mov	r3, r0
    return( 0 );
 8027310:	6820      	ldr	r0, [r4, #0]
 8027312:	e7e7      	b.n	80272e4 <mbedtls_pk_sign_restartable+0x18>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8027314:	4802      	ldr	r0, [pc, #8]	; (8027320 <mbedtls_pk_sign_restartable+0x54>)
}
 8027316:	b002      	add	sp, #8
 8027318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 802731c:	4801      	ldr	r0, [pc, #4]	; (8027324 <mbedtls_pk_sign_restartable+0x58>)
 802731e:	e7fa      	b.n	8027316 <mbedtls_pk_sign_restartable+0x4a>
 8027320:	ffffc180 	.word	0xffffc180
 8027324:	ffffc100 	.word	0xffffc100

08027328 <mbedtls_pk_encrypt>:
{
 8027328:	b410      	push	{r4}
    if( ctx->pk_info == NULL )
 802732a:	6804      	ldr	r4, [r0, #0]
 802732c:	b134      	cbz	r4, 802733c <mbedtls_pk_encrypt+0x14>
    if( ctx->pk_info->encrypt_func == NULL )
 802732e:	69e4      	ldr	r4, [r4, #28]
 8027330:	b144      	cbz	r4, 8027344 <mbedtls_pk_encrypt+0x1c>
    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
 8027332:	46a4      	mov	ip, r4
 8027334:	6840      	ldr	r0, [r0, #4]
}
 8027336:	f85d 4b04 	ldr.w	r4, [sp], #4
    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
 802733a:	4760      	bx	ip
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 802733c:	4802      	ldr	r0, [pc, #8]	; (8027348 <mbedtls_pk_encrypt+0x20>)
}
 802733e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027342:	4770      	bx	lr
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 8027344:	4801      	ldr	r0, [pc, #4]	; (802734c <mbedtls_pk_encrypt+0x24>)
 8027346:	e7fa      	b.n	802733e <mbedtls_pk_encrypt+0x16>
 8027348:	ffffc180 	.word	0xffffc180
 802734c:	ffffc100 	.word	0xffffc100

08027350 <mbedtls_pk_get_bitlen>:
    if( ctx == NULL || ctx->pk_info == NULL )
 8027350:	b120      	cbz	r0, 802735c <mbedtls_pk_get_bitlen+0xc>
 8027352:	6803      	ldr	r3, [r0, #0]
 8027354:	b113      	cbz	r3, 802735c <mbedtls_pk_get_bitlen+0xc>
    return( ctx->pk_info->get_bitlen( ctx->pk_ctx ) );
 8027356:	689b      	ldr	r3, [r3, #8]
 8027358:	6840      	ldr	r0, [r0, #4]
 802735a:	4718      	bx	r3
}
 802735c:	2000      	movs	r0, #0
 802735e:	4770      	bx	lr

08027360 <mbedtls_pk_get_type>:
/*
 * Access the PK type
 */
mbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 8027360:	b110      	cbz	r0, 8027368 <mbedtls_pk_get_type+0x8>
 8027362:	6800      	ldr	r0, [r0, #0]
 8027364:	b100      	cbz	r0, 8027368 <mbedtls_pk_get_type+0x8>
        return( MBEDTLS_PK_NONE );

    return( ctx->pk_info->type );
 8027366:	7800      	ldrb	r0, [r0, #0]
}
 8027368:	4770      	bx	lr
 802736a:	bf00      	nop

0802736c <rsa_can_do>:
#include <stdint.h>

#if defined(MBEDTLS_RSA_C)
static int rsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_RSA ||
 802736c:	2801      	cmp	r0, #1
 802736e:	d004      	beq.n	802737a <rsa_can_do+0xe>
 8027370:	f1a0 0006 	sub.w	r0, r0, #6
 8027374:	fab0 f080 	clz	r0, r0
 8027378:	0940      	lsrs	r0, r0, #5
            type == MBEDTLS_PK_RSASSA_PSS );
}
 802737a:	4770      	bx	lr

0802737c <rsa_debug>:
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
 802737c:	2301      	movs	r3, #1
{
 802737e:	b430      	push	{r4, r5}
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.E";
 8027380:	4a06      	ldr	r2, [pc, #24]	; (802739c <rsa_debug+0x20>)
    items->name = "rsa.N";
 8027382:	4d07      	ldr	r5, [pc, #28]	; (80273a0 <rsa_debug+0x24>)
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 8027384:	f100 0408 	add.w	r4, r0, #8
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 8027388:	3014      	adds	r0, #20
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 802738a:	e9c1 5401 	strd	r5, r4, [r1, #4]
}
 802738e:	bc30      	pop	{r4, r5}
    items->name = "rsa.E";
 8027390:	e9c1 2004 	strd	r2, r0, [r1, #16]
    items->type = MBEDTLS_PK_DEBUG_MPI;
 8027394:	700b      	strb	r3, [r1, #0]
    items->type = MBEDTLS_PK_DEBUG_MPI;
 8027396:	730b      	strb	r3, [r1, #12]
}
 8027398:	4770      	bx	lr
 802739a:	bf00      	nop
 802739c:	0803534c 	.word	0x0803534c
 80273a0:	08035344 	.word	0x08035344

080273a4 <rsa_free_wrap>:
{
 80273a4:	b510      	push	{r4, lr}
 80273a6:	4604      	mov	r4, r0
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
 80273a8:	f002 fa34 	bl	8029814 <mbedtls_rsa_free>
    mbedtls_free( ctx );
 80273ac:	4620      	mov	r0, r4
}
 80273ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 80273b2:	f008 bd1b 	b.w	802fdec <free>
 80273b6:	bf00      	nop

080273b8 <rsa_alloc_wrap>:
{
 80273b8:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );
 80273ba:	21ac      	movs	r1, #172	; 0xac
 80273bc:	2001      	movs	r0, #1
 80273be:	f008 fcdb 	bl	802fd78 <calloc>
    if( ctx != NULL )
 80273c2:	4604      	mov	r4, r0
 80273c4:	b118      	cbz	r0, 80273ce <rsa_alloc_wrap+0x16>
        mbedtls_rsa_init( (mbedtls_rsa_context *) ctx, 0, 0 );
 80273c6:	2200      	movs	r2, #0
 80273c8:	4611      	mov	r1, r2
 80273ca:	f000 fe99 	bl	8028100 <mbedtls_rsa_init>
}
 80273ce:	4620      	mov	r0, r4
 80273d0:	bd10      	pop	{r4, pc}
 80273d2:	bf00      	nop

080273d4 <rsa_check_pair_wrap>:
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
 80273d4:	f000 bf44 	b.w	8028260 <mbedtls_rsa_check_pub_priv>

080273d8 <rsa_get_bitlen>:
{
 80273d8:	b508      	push	{r3, lr}
    return( 8 * mbedtls_rsa_get_len( rsa ) );
 80273da:	f000 fe9d 	bl	8028118 <mbedtls_rsa_get_len>
}
 80273de:	00c0      	lsls	r0, r0, #3
 80273e0:	bd08      	pop	{r3, pc}
 80273e2:	bf00      	nop

080273e4 <rsa_encrypt_wrap>:
{
 80273e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80273e8:	b081      	sub	sp, #4
 80273ea:	e9dd 540a 	ldrd	r5, r4, [sp, #40]	; 0x28
 80273ee:	460f      	mov	r7, r1
 80273f0:	e9dd ab0c 	ldrd	sl, fp, [sp, #48]	; 0x30
 80273f4:	4616      	mov	r6, r2
 80273f6:	4698      	mov	r8, r3
 80273f8:	4681      	mov	r9, r0
    *olen = mbedtls_rsa_get_len( rsa );
 80273fa:	f000 fe8d 	bl	8028118 <mbedtls_rsa_get_len>
    if( *olen > osize )
 80273fe:	42a0      	cmp	r0, r4
    *olen = mbedtls_rsa_get_len( rsa );
 8027400:	6028      	str	r0, [r5, #0]
    if( *olen > osize )
 8027402:	d80b      	bhi.n	802741c <rsa_encrypt_wrap+0x38>
    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
 8027404:	465a      	mov	r2, fp
 8027406:	4651      	mov	r1, sl
 8027408:	4648      	mov	r0, r9
 802740a:	2300      	movs	r3, #0
 802740c:	e9cd 780b 	strd	r7, r8, [sp, #44]	; 0x2c
 8027410:	960a      	str	r6, [sp, #40]	; 0x28
}
 8027412:	b001      	add	sp, #4
 8027414:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
 8027418:	f001 bc1e 	b.w	8028c58 <mbedtls_rsa_pkcs1_encrypt>
}
 802741c:	4801      	ldr	r0, [pc, #4]	; (8027424 <rsa_encrypt_wrap+0x40>)
 802741e:	b001      	add	sp, #4
 8027420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027424:	ffffbc00 	.word	0xffffbc00

08027428 <rsa_decrypt_wrap>:
{
 8027428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802742c:	b081      	sub	sp, #4
 802742e:	4614      	mov	r4, r2
 8027430:	e9dd 9a0a 	ldrd	r9, sl, [sp, #40]	; 0x28
 8027434:	e9dd 8b0c 	ldrd	r8, fp, [sp, #48]	; 0x30
 8027438:	460f      	mov	r7, r1
 802743a:	461e      	mov	r6, r3
 802743c:	4605      	mov	r5, r0
    if( ilen != mbedtls_rsa_get_len( rsa ) )
 802743e:	f000 fe6b 	bl	8028118 <mbedtls_rsa_get_len>
 8027442:	42a0      	cmp	r0, r4
 8027444:	d10c      	bne.n	8027460 <rsa_decrypt_wrap+0x38>
    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
 8027446:	465a      	mov	r2, fp
 8027448:	4641      	mov	r1, r8
 802744a:	4628      	mov	r0, r5
 802744c:	2301      	movs	r3, #1
 802744e:	e9cd 6a0c 	strd	r6, sl, [sp, #48]	; 0x30
 8027452:	e9cd 970a 	strd	r9, r7, [sp, #40]	; 0x28
}
 8027456:	b001      	add	sp, #4
 8027458:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
 802745c:	f001 be2c 	b.w	80290b8 <mbedtls_rsa_pkcs1_decrypt>
}
 8027460:	4801      	ldr	r0, [pc, #4]	; (8027468 <rsa_decrypt_wrap+0x40>)
 8027462:	b001      	add	sp, #4
 8027464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027468:	ffffbf80 	.word	0xffffbf80

0802746c <rsa_sign_wrap>:
{
 802746c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027470:	b083      	sub	sp, #12
 8027472:	460d      	mov	r5, r1
 8027474:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
 8027478:	990c      	ldr	r1, [sp, #48]	; 0x30
 802747a:	4617      	mov	r7, r2
 802747c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802747e:	461e      	mov	r6, r3
 8027480:	4604      	mov	r4, r0
 8027482:	9101      	str	r1, [sp, #4]
 8027484:	9200      	str	r2, [sp, #0]
    *sig_len = mbedtls_rsa_get_len( rsa );
 8027486:	f000 fe47 	bl	8028118 <mbedtls_rsa_get_len>
    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 802748a:	e9dd 2100 	ldrd	r2, r1, [sp]
    *sig_len = mbedtls_rsa_get_len( rsa );
 802748e:	4603      	mov	r3, r0
    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 8027490:	e9cd 670b 	strd	r6, r7, [sp, #44]	; 0x2c
 8027494:	950a      	str	r5, [sp, #40]	; 0x28
 8027496:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 802749a:	4620      	mov	r0, r4
    *sig_len = mbedtls_rsa_get_len( rsa );
 802749c:	f8c8 3000 	str.w	r3, [r8]
    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 80274a0:	2301      	movs	r3, #1
}
 80274a2:	b003      	add	sp, #12
 80274a4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 80274a8:	f001 bf24 	b.w	80292f4 <mbedtls_rsa_pkcs1_sign>

080274ac <rsa_verify_wrap>:
{
 80274ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80274b0:	b085      	sub	sp, #20
 80274b2:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 80274b6:	460e      	mov	r6, r1
 80274b8:	4690      	mov	r8, r2
 80274ba:	461f      	mov	r7, r3
 80274bc:	4605      	mov	r5, r0
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 80274be:	f000 fe2b 	bl	8028118 <mbedtls_rsa_get_len>
    if( sig_len < rsa_len )
 80274c2:	4548      	cmp	r0, r9
 80274c4:	d813      	bhi.n	80274ee <rsa_verify_wrap+0x42>
    if( ( ret = mbedtls_rsa_pkcs1_verify( rsa, NULL, NULL,
 80274c6:	2300      	movs	r3, #0
 80274c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80274ca:	4604      	mov	r4, r0
 80274cc:	e9cd 8202 	strd	r8, r2, [sp, #8]
 80274d0:	4628      	mov	r0, r5
 80274d2:	461a      	mov	r2, r3
 80274d4:	4619      	mov	r1, r3
 80274d6:	e9cd 6700 	strd	r6, r7, [sp]
 80274da:	f002 f95f 	bl	802979c <mbedtls_rsa_pkcs1_verify>
 80274de:	b918      	cbnz	r0, 80274e8 <rsa_verify_wrap+0x3c>
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
 80274e0:	4b04      	ldr	r3, [pc, #16]	; (80274f4 <rsa_verify_wrap+0x48>)
 80274e2:	454c      	cmp	r4, r9
 80274e4:	bf38      	it	cc
 80274e6:	4618      	movcc	r0, r3
}
 80274e8:	b005      	add	sp, #20
 80274ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 80274ee:	4802      	ldr	r0, [pc, #8]	; (80274f8 <rsa_verify_wrap+0x4c>)
 80274f0:	e7fa      	b.n	80274e8 <rsa_verify_wrap+0x3c>
 80274f2:	bf00      	nop
 80274f4:	ffffc700 	.word	0xffffc700
 80274f8:	ffffbc80 	.word	0xffffbc80

080274fc <pk_get_rsapubkey>:
 *  }
 */
static int pk_get_rsapubkey( unsigned char **p,
                             const unsigned char *end,
                             mbedtls_rsa_context *rsa )
{
 80274fc:	b570      	push	{r4, r5, r6, lr}
 80274fe:	b08a      	sub	sp, #40	; 0x28
 8027500:	4616      	mov	r6, r2
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8027502:	2330      	movs	r3, #48	; 0x30
 8027504:	aa09      	add	r2, sp, #36	; 0x24
{
 8027506:	4604      	mov	r4, r0
 8027508:	460d      	mov	r5, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 802750a:	f7f8 ff9b 	bl	8020444 <mbedtls_asn1_get_tag>
 802750e:	b958      	cbnz	r0, 8027528 <pk_get_rsapubkey+0x2c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( *p + len != end )
 8027510:	6823      	ldr	r3, [r4, #0]
 8027512:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027514:	4413      	add	r3, r2
 8027516:	429d      	cmp	r5, r3
 8027518:	d143      	bne.n	80275a2 <pk_get_rsapubkey+0xa6>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    /* Import N */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 802751a:	2302      	movs	r3, #2
 802751c:	4629      	mov	r1, r5
 802751e:	4620      	mov	r0, r4
 8027520:	aa09      	add	r2, sp, #36	; 0x24
 8027522:	f7f8 ff8f 	bl	8020444 <mbedtls_asn1_get_tag>
 8027526:	b118      	cbz	r0, 8027530 <pk_get_rsapubkey+0x34>

    *p += len;

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 8027528:	f5a0 506c 	sub.w	r0, r0, #15104	; 0x3b00
    if( *p != end )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 802752c:	b00a      	add	sp, #40	; 0x28
 802752e:	bd70      	pop	{r4, r5, r6, pc}
    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
 8027530:	e9cd 0005 	strd	r0, r0, [sp, #20]
 8027534:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8027538:	e9cd 0001 	strd	r0, r0, [sp, #4]
 802753c:	9000      	str	r0, [sp, #0]
 802753e:	4603      	mov	r3, r0
 8027540:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027542:	4630      	mov	r0, r6
 8027544:	6821      	ldr	r1, [r4, #0]
 8027546:	f000 fcdd 	bl	8027f04 <mbedtls_rsa_import_raw>
 802754a:	bb60      	cbnz	r0, 80275a6 <pk_get_rsapubkey+0xaa>
    *p += len;
 802754c:	6823      	ldr	r3, [r4, #0]
 802754e:	9909      	ldr	r1, [sp, #36]	; 0x24
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8027550:	4620      	mov	r0, r4
    *p += len;
 8027552:	440b      	add	r3, r1
 8027554:	6023      	str	r3, [r4, #0]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8027556:	4629      	mov	r1, r5
 8027558:	2302      	movs	r3, #2
 802755a:	aa09      	add	r2, sp, #36	; 0x24
 802755c:	f7f8 ff72 	bl	8020444 <mbedtls_asn1_get_tag>
 8027560:	2800      	cmp	r0, #0
 8027562:	d1e1      	bne.n	8027528 <pk_get_rsapubkey+0x2c>
    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
 8027564:	6822      	ldr	r2, [r4, #0]
 8027566:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027568:	4603      	mov	r3, r0
 802756a:	e9cd 2105 	strd	r2, r1, [sp, #20]
 802756e:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8027572:	4602      	mov	r2, r0
 8027574:	4601      	mov	r1, r0
 8027576:	e9cd 0001 	strd	r0, r0, [sp, #4]
 802757a:	9000      	str	r0, [sp, #0]
 802757c:	4630      	mov	r0, r6
 802757e:	f000 fcc1 	bl	8027f04 <mbedtls_rsa_import_raw>
 8027582:	b980      	cbnz	r0, 80275a6 <pk_get_rsapubkey+0xaa>
    *p += len;
 8027584:	6823      	ldr	r3, [r4, #0]
 8027586:	9a09      	ldr	r2, [sp, #36]	; 0x24
    if( mbedtls_rsa_complete( rsa ) != 0 ||
 8027588:	4630      	mov	r0, r6
    *p += len;
 802758a:	4413      	add	r3, r2
 802758c:	6023      	str	r3, [r4, #0]
    if( mbedtls_rsa_complete( rsa ) != 0 ||
 802758e:	f000 fcf3 	bl	8027f78 <mbedtls_rsa_complete>
 8027592:	b940      	cbnz	r0, 80275a6 <pk_get_rsapubkey+0xaa>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
 8027594:	4630      	mov	r0, r6
 8027596:	f000 fdc1 	bl	802811c <mbedtls_rsa_check_pubkey>
    if( mbedtls_rsa_complete( rsa ) != 0 ||
 802759a:	b920      	cbnz	r0, 80275a6 <pk_get_rsapubkey+0xaa>
    if( *p != end )
 802759c:	6823      	ldr	r3, [r4, #0]
 802759e:	42ab      	cmp	r3, r5
 80275a0:	d0c4      	beq.n	802752c <pk_get_rsapubkey+0x30>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
 80275a2:	4802      	ldr	r0, [pc, #8]	; (80275ac <pk_get_rsapubkey+0xb0>)
 80275a4:	e7c2      	b.n	802752c <pk_get_rsapubkey+0x30>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
 80275a6:	4802      	ldr	r0, [pc, #8]	; (80275b0 <pk_get_rsapubkey+0xb4>)
 80275a8:	e7c0      	b.n	802752c <pk_get_rsapubkey+0x30>
 80275aa:	bf00      	nop
 80275ac:	ffffc49a 	.word	0xffffc49a
 80275b0:	ffffc500 	.word	0xffffc500

080275b4 <asn1_get_nonzero_mpi>:
 * rsa_complete() would be incorrect, so reject zero values early.
 */
static int asn1_get_nonzero_mpi( unsigned char **p,
                                 const unsigned char *end,
                                 mbedtls_mpi *X )
{
 80275b4:	b538      	push	{r3, r4, r5, lr}
 80275b6:	4615      	mov	r5, r2
    int ret;

    ret = mbedtls_asn1_get_mpi( p, end, X );
 80275b8:	f7f9 f840 	bl	802063c <mbedtls_asn1_get_mpi>
    if( ret != 0 )
 80275bc:	4604      	mov	r4, r0
 80275be:	b938      	cbnz	r0, 80275d0 <asn1_get_nonzero_mpi+0x1c>
        return( ret );

    if( mbedtls_mpi_cmp_int( X, 0 ) == 0 )
 80275c0:	4621      	mov	r1, r4
 80275c2:	4628      	mov	r0, r5
 80275c4:	f7fa f96a 	bl	802189c <mbedtls_mpi_cmp_int>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 80275c8:	4b02      	ldr	r3, [pc, #8]	; (80275d4 <asn1_get_nonzero_mpi+0x20>)
 80275ca:	2800      	cmp	r0, #0
 80275cc:	bf08      	it	eq
 80275ce:	461c      	moveq	r4, r3

    return( 0 );
}
 80275d0:	4620      	mov	r0, r4
 80275d2:	bd38      	pop	{r3, r4, r5, pc}
 80275d4:	ffffc300 	.word	0xffffc300

080275d8 <pk_parse_key_pkcs1_der>:
 * Parse a PKCS#1 encoded private RSA key
 */
static int pk_parse_key_pkcs1_der( mbedtls_rsa_context *rsa,
                                   const unsigned char *key,
                                   size_t keylen )
{
 80275d8:	b570      	push	{r4, r5, r6, lr}
 80275da:	460c      	mov	r4, r1
 80275dc:	4616      	mov	r6, r2
 80275de:	b088      	sub	sp, #32
 80275e0:	4605      	mov	r5, r0
    int ret, version;
    size_t len;
    unsigned char *p, *end;

    mbedtls_mpi T;
    mbedtls_mpi_init( &T );
 80275e2:	a805      	add	r0, sp, #20
 80275e4:	f7f9 fd96 	bl	8021114 <mbedtls_mpi_init>
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80275e8:	2330      	movs	r3, #48	; 0x30
 80275ea:	19a1      	adds	r1, r4, r6
 80275ec:	a804      	add	r0, sp, #16
 80275ee:	aa03      	add	r2, sp, #12
    p = (unsigned char *) key;
 80275f0:	9404      	str	r4, [sp, #16]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80275f2:	f7f8 ff27 	bl	8020444 <mbedtls_asn1_get_tag>
 80275f6:	b120      	cbz	r0, 8027602 <pk_parse_key_pkcs1_der+0x2a>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 80275f8:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00

        mbedtls_rsa_free( rsa );
    }

    return( ret );
}
 80275fc:	4620      	mov	r0, r4
 80275fe:	b008      	add	sp, #32
 8027600:	bd70      	pop	{r4, r5, r6, pc}
    end = p + len;
 8027602:	e9dd 3603 	ldrd	r3, r6, [sp, #12]
 8027606:	441e      	add	r6, r3
    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 8027608:	4631      	mov	r1, r6
 802760a:	aa02      	add	r2, sp, #8
 802760c:	a804      	add	r0, sp, #16
 802760e:	f7f8 ffc7 	bl	80205a0 <mbedtls_asn1_get_int>
 8027612:	2800      	cmp	r0, #0
 8027614:	f040 80e2 	bne.w	80277dc <pk_parse_key_pkcs1_der+0x204>
    if( version != 0 )
 8027618:	9b02      	ldr	r3, [sp, #8]
 802761a:	2b00      	cmp	r3, #0
 802761c:	f040 80e5 	bne.w	80277ea <pk_parse_key_pkcs1_der+0x212>
    ret = mbedtls_asn1_get_mpi( p, end, X );
 8027620:	4631      	mov	r1, r6
 8027622:	aa05      	add	r2, sp, #20
 8027624:	a804      	add	r0, sp, #16
 8027626:	f7f9 f809 	bl	802063c <mbedtls_asn1_get_mpi>
    if( ret != 0 )
 802762a:	4604      	mov	r4, r0
 802762c:	b178      	cbz	r0, 802764e <pk_parse_key_pkcs1_der+0x76>
    mbedtls_mpi_free( &T );
 802762e:	a805      	add	r0, sp, #20
 8027630:	f7f9 fd76 	bl	8021120 <mbedtls_mpi_free>
        if( ( ret & 0xff80 ) == 0 )
 8027634:	f64f 7380 	movw	r3, #65408	; 0xff80
 8027638:	421c      	tst	r4, r3
 802763a:	f040 80d4 	bne.w	80277e6 <pk_parse_key_pkcs1_der+0x20e>
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret;
 802763e:	f5a4 5474 	sub.w	r4, r4, #15616	; 0x3d00
        mbedtls_rsa_free( rsa );
 8027642:	4628      	mov	r0, r5
 8027644:	f002 f8e6 	bl	8029814 <mbedtls_rsa_free>
}
 8027648:	4620      	mov	r0, r4
 802764a:	b008      	add	sp, #32
 802764c:	bd70      	pop	{r4, r5, r6, pc}
    if( mbedtls_mpi_cmp_int( X, 0 ) == 0 )
 802764e:	4601      	mov	r1, r0
 8027650:	a805      	add	r0, sp, #20
 8027652:	f7fa f923 	bl	802189c <mbedtls_mpi_cmp_int>
 8027656:	2800      	cmp	r0, #0
 8027658:	f000 80bb 	beq.w	80277d2 <pk_parse_key_pkcs1_der+0x1fa>
        ( ret = mbedtls_rsa_import( rsa, &T, NULL, NULL,
 802765c:	4623      	mov	r3, r4
 802765e:	4622      	mov	r2, r4
 8027660:	e9cd 4400 	strd	r4, r4, [sp]
 8027664:	4628      	mov	r0, r5
 8027666:	a905      	add	r1, sp, #20
 8027668:	f000 fc16 	bl	8027e98 <mbedtls_rsa_import>
    if( ( ret = asn1_get_nonzero_mpi( &p, end, &T ) ) != 0 ||
 802766c:	4604      	mov	r4, r0
 802766e:	2800      	cmp	r0, #0
 8027670:	d1dd      	bne.n	802762e <pk_parse_key_pkcs1_der+0x56>
    ret = mbedtls_asn1_get_mpi( p, end, X );
 8027672:	4631      	mov	r1, r6
 8027674:	aa05      	add	r2, sp, #20
 8027676:	a804      	add	r0, sp, #16
 8027678:	f7f8 ffe0 	bl	802063c <mbedtls_asn1_get_mpi>
    if( ret != 0 )
 802767c:	4604      	mov	r4, r0
 802767e:	2800      	cmp	r0, #0
 8027680:	d1d5      	bne.n	802762e <pk_parse_key_pkcs1_der+0x56>
    if( mbedtls_mpi_cmp_int( X, 0 ) == 0 )
 8027682:	4601      	mov	r1, r0
 8027684:	a805      	add	r0, sp, #20
 8027686:	f7fa f909 	bl	802189c <mbedtls_mpi_cmp_int>
 802768a:	2800      	cmp	r0, #0
 802768c:	f000 80a1 	beq.w	80277d2 <pk_parse_key_pkcs1_der+0x1fa>
        ( ret = mbedtls_rsa_import( rsa, NULL, NULL, NULL,
 8027690:	ab05      	add	r3, sp, #20
 8027692:	e9cd 4300 	strd	r4, r3, [sp]
 8027696:	4622      	mov	r2, r4
 8027698:	4623      	mov	r3, r4
 802769a:	4621      	mov	r1, r4
 802769c:	4628      	mov	r0, r5
 802769e:	f000 fbfb 	bl	8027e98 <mbedtls_rsa_import>
    if( ( ret = asn1_get_nonzero_mpi( &p, end, &T ) ) != 0 ||
 80276a2:	4604      	mov	r4, r0
 80276a4:	2800      	cmp	r0, #0
 80276a6:	d1c2      	bne.n	802762e <pk_parse_key_pkcs1_der+0x56>
    ret = mbedtls_asn1_get_mpi( p, end, X );
 80276a8:	4631      	mov	r1, r6
 80276aa:	aa05      	add	r2, sp, #20
 80276ac:	a804      	add	r0, sp, #16
 80276ae:	f7f8 ffc5 	bl	802063c <mbedtls_asn1_get_mpi>
    if( ret != 0 )
 80276b2:	4604      	mov	r4, r0
 80276b4:	2800      	cmp	r0, #0
 80276b6:	d1ba      	bne.n	802762e <pk_parse_key_pkcs1_der+0x56>
    if( mbedtls_mpi_cmp_int( X, 0 ) == 0 )
 80276b8:	2100      	movs	r1, #0
 80276ba:	a805      	add	r0, sp, #20
 80276bc:	f7fa f8ee 	bl	802189c <mbedtls_mpi_cmp_int>
 80276c0:	2800      	cmp	r0, #0
 80276c2:	f000 8086 	beq.w	80277d2 <pk_parse_key_pkcs1_der+0x1fa>
        ( ret = mbedtls_rsa_import( rsa, NULL, NULL, NULL,
 80276c6:	2300      	movs	r3, #0
 80276c8:	aa05      	add	r2, sp, #20
 80276ca:	e9cd 2300 	strd	r2, r3, [sp]
 80276ce:	4619      	mov	r1, r3
 80276d0:	461a      	mov	r2, r3
 80276d2:	4628      	mov	r0, r5
 80276d4:	f000 fbe0 	bl	8027e98 <mbedtls_rsa_import>
    if( ( ret = asn1_get_nonzero_mpi( &p, end, &T ) ) != 0 ||
 80276d8:	4604      	mov	r4, r0
 80276da:	2800      	cmp	r0, #0
 80276dc:	d1a7      	bne.n	802762e <pk_parse_key_pkcs1_der+0x56>
    ret = mbedtls_asn1_get_mpi( p, end, X );
 80276de:	4631      	mov	r1, r6
 80276e0:	aa05      	add	r2, sp, #20
 80276e2:	a804      	add	r0, sp, #16
 80276e4:	f7f8 ffaa 	bl	802063c <mbedtls_asn1_get_mpi>
    if( ret != 0 )
 80276e8:	4604      	mov	r4, r0
 80276ea:	2800      	cmp	r0, #0
 80276ec:	d19f      	bne.n	802762e <pk_parse_key_pkcs1_der+0x56>
    if( mbedtls_mpi_cmp_int( X, 0 ) == 0 )
 80276ee:	4601      	mov	r1, r0
 80276f0:	a805      	add	r0, sp, #20
 80276f2:	f7fa f8d3 	bl	802189c <mbedtls_mpi_cmp_int>
 80276f6:	2800      	cmp	r0, #0
 80276f8:	d06b      	beq.n	80277d2 <pk_parse_key_pkcs1_der+0x1fa>
        ( ret = mbedtls_rsa_import( rsa, NULL, &T, NULL,
 80276fa:	4623      	mov	r3, r4
 80276fc:	4621      	mov	r1, r4
 80276fe:	e9cd 4400 	strd	r4, r4, [sp]
 8027702:	4628      	mov	r0, r5
 8027704:	aa05      	add	r2, sp, #20
 8027706:	f000 fbc7 	bl	8027e98 <mbedtls_rsa_import>
    if( ( ret = asn1_get_nonzero_mpi( &p, end, &T ) ) != 0 ||
 802770a:	4604      	mov	r4, r0
 802770c:	2800      	cmp	r0, #0
 802770e:	d18e      	bne.n	802762e <pk_parse_key_pkcs1_der+0x56>
    ret = mbedtls_asn1_get_mpi( p, end, X );
 8027710:	4631      	mov	r1, r6
 8027712:	aa05      	add	r2, sp, #20
 8027714:	a804      	add	r0, sp, #16
 8027716:	f7f8 ff91 	bl	802063c <mbedtls_asn1_get_mpi>
    if( ret != 0 )
 802771a:	4604      	mov	r4, r0
 802771c:	2800      	cmp	r0, #0
 802771e:	d186      	bne.n	802762e <pk_parse_key_pkcs1_der+0x56>
    if( mbedtls_mpi_cmp_int( X, 0 ) == 0 )
 8027720:	4601      	mov	r1, r0
 8027722:	a805      	add	r0, sp, #20
 8027724:	f7fa f8ba 	bl	802189c <mbedtls_mpi_cmp_int>
 8027728:	2800      	cmp	r0, #0
 802772a:	d052      	beq.n	80277d2 <pk_parse_key_pkcs1_der+0x1fa>
        ( ret = mbedtls_rsa_import( rsa, NULL, NULL, &T,
 802772c:	4622      	mov	r2, r4
 802772e:	4621      	mov	r1, r4
 8027730:	e9cd 4400 	strd	r4, r4, [sp]
 8027734:	4628      	mov	r0, r5
 8027736:	ab05      	add	r3, sp, #20
 8027738:	f000 fbae 	bl	8027e98 <mbedtls_rsa_import>
    if( ( ret = asn1_get_nonzero_mpi( &p, end, &T ) ) != 0 ||
 802773c:	4604      	mov	r4, r0
 802773e:	2800      	cmp	r0, #0
 8027740:	f47f af75 	bne.w	802762e <pk_parse_key_pkcs1_der+0x56>
    if( ( ret = asn1_get_nonzero_mpi( &p, end, &T ) ) != 0 ||
 8027744:	4631      	mov	r1, r6
 8027746:	aa05      	add	r2, sp, #20
 8027748:	a804      	add	r0, sp, #16
 802774a:	f7ff ff33 	bl	80275b4 <asn1_get_nonzero_mpi>
 802774e:	4604      	mov	r4, r0
 8027750:	2800      	cmp	r0, #0
 8027752:	f47f af6c 	bne.w	802762e <pk_parse_key_pkcs1_der+0x56>
        ( ret = mbedtls_mpi_copy( &rsa->DP, &T ) ) != 0 )
 8027756:	a905      	add	r1, sp, #20
 8027758:	f105 0044 	add.w	r0, r5, #68	; 0x44
 802775c:	f7f9 fcf4 	bl	8021148 <mbedtls_mpi_copy>
    if( ( ret = asn1_get_nonzero_mpi( &p, end, &T ) ) != 0 ||
 8027760:	4604      	mov	r4, r0
 8027762:	2800      	cmp	r0, #0
 8027764:	f47f af63 	bne.w	802762e <pk_parse_key_pkcs1_der+0x56>
    if( ( ret = asn1_get_nonzero_mpi( &p, end, &T ) ) != 0 ||
 8027768:	4631      	mov	r1, r6
 802776a:	aa05      	add	r2, sp, #20
 802776c:	a804      	add	r0, sp, #16
 802776e:	f7ff ff21 	bl	80275b4 <asn1_get_nonzero_mpi>
 8027772:	4604      	mov	r4, r0
 8027774:	2800      	cmp	r0, #0
 8027776:	f47f af5a 	bne.w	802762e <pk_parse_key_pkcs1_der+0x56>
        ( ret = mbedtls_mpi_copy( &rsa->DQ, &T ) ) != 0 )
 802777a:	a905      	add	r1, sp, #20
 802777c:	f105 0050 	add.w	r0, r5, #80	; 0x50
 8027780:	f7f9 fce2 	bl	8021148 <mbedtls_mpi_copy>
    if( ( ret = asn1_get_nonzero_mpi( &p, end, &T ) ) != 0 ||
 8027784:	4604      	mov	r4, r0
 8027786:	2800      	cmp	r0, #0
 8027788:	f47f af51 	bne.w	802762e <pk_parse_key_pkcs1_der+0x56>
    if( ( ret = asn1_get_nonzero_mpi( &p, end, &T ) ) != 0 ||
 802778c:	4631      	mov	r1, r6
 802778e:	a804      	add	r0, sp, #16
 8027790:	aa05      	add	r2, sp, #20
 8027792:	f7ff ff0f 	bl	80275b4 <asn1_get_nonzero_mpi>
 8027796:	4604      	mov	r4, r0
 8027798:	2800      	cmp	r0, #0
 802779a:	f47f af48 	bne.w	802762e <pk_parse_key_pkcs1_der+0x56>
        ( ret = mbedtls_mpi_copy( &rsa->QP, &T ) ) != 0 )
 802779e:	a905      	add	r1, sp, #20
 80277a0:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80277a4:	f7f9 fcd0 	bl	8021148 <mbedtls_mpi_copy>
    if( ( ret = asn1_get_nonzero_mpi( &p, end, &T ) ) != 0 ||
 80277a8:	4604      	mov	r4, r0
 80277aa:	2800      	cmp	r0, #0
 80277ac:	f47f af3f 	bne.w	802762e <pk_parse_key_pkcs1_der+0x56>
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 ||
 80277b0:	4628      	mov	r0, r5
 80277b2:	f000 fbe1 	bl	8027f78 <mbedtls_rsa_complete>
 80277b6:	4604      	mov	r4, r0
 80277b8:	2800      	cmp	r0, #0
 80277ba:	f47f af38 	bne.w	802762e <pk_parse_key_pkcs1_der+0x56>
        ( ret = mbedtls_rsa_check_pubkey( rsa ) ) != 0 )
 80277be:	4628      	mov	r0, r5
 80277c0:	f000 fcac 	bl	802811c <mbedtls_rsa_check_pubkey>
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 ||
 80277c4:	4604      	mov	r4, r0
 80277c6:	2800      	cmp	r0, #0
 80277c8:	f47f af31 	bne.w	802762e <pk_parse_key_pkcs1_der+0x56>
    if( p != end )
 80277cc:	9b04      	ldr	r3, [sp, #16]
 80277ce:	42b3      	cmp	r3, r6
 80277d0:	d00d      	beq.n	80277ee <pk_parse_key_pkcs1_der+0x216>
    mbedtls_mpi_free( &T );
 80277d2:	a805      	add	r0, sp, #20
 80277d4:	f7f9 fca4 	bl	8021120 <mbedtls_mpi_free>
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT;
 80277d8:	4c07      	ldr	r4, [pc, #28]	; (80277f8 <pk_parse_key_pkcs1_der+0x220>)
 80277da:	e732      	b.n	8027642 <pk_parse_key_pkcs1_der+0x6a>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 80277dc:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
}
 80277e0:	4620      	mov	r0, r4
 80277e2:	b008      	add	sp, #32
 80277e4:	bd70      	pop	{r4, r5, r6, pc}
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT;
 80277e6:	4c04      	ldr	r4, [pc, #16]	; (80277f8 <pk_parse_key_pkcs1_der+0x220>)
 80277e8:	e72b      	b.n	8027642 <pk_parse_key_pkcs1_der+0x6a>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
 80277ea:	4c04      	ldr	r4, [pc, #16]	; (80277fc <pk_parse_key_pkcs1_der+0x224>)
 80277ec:	e706      	b.n	80275fc <pk_parse_key_pkcs1_der+0x24>
    mbedtls_mpi_free( &T );
 80277ee:	a805      	add	r0, sp, #20
 80277f0:	f7f9 fc96 	bl	8021120 <mbedtls_mpi_free>
    if( ret != 0 )
 80277f4:	e702      	b.n	80275fc <pk_parse_key_pkcs1_der+0x24>
 80277f6:	bf00      	nop
 80277f8:	ffffc300 	.word	0xffffc300
 80277fc:	ffffc280 	.word	0xffffc280

08027800 <pk_parse_key_pkcs8_unencrypted_der>:
 */
static int pk_parse_key_pkcs8_unencrypted_der(
                                    mbedtls_pk_context *pk,
                                    const unsigned char* key,
                                    size_t keylen )
{
 8027800:	460b      	mov	r3, r1
 8027802:	b570      	push	{r4, r5, r6, lr}
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
    unsigned char *end = p + keylen;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8027804:	2400      	movs	r4, #0
{
 8027806:	b08a      	sub	sp, #40	; 0x28
 8027808:	4605      	mov	r5, r0
     *    PrivateKey ::= OCTET STRING
     *
     *  The PrivateKey OCTET STRING is a SEC1 ECPrivateKey
     */

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 802780a:	4411      	add	r1, r2
    unsigned char *p = (unsigned char *) key;
 802780c:	9303      	str	r3, [sp, #12]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 802780e:	aa02      	add	r2, sp, #8
 8027810:	2330      	movs	r3, #48	; 0x30
 8027812:	a803      	add	r0, sp, #12
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8027814:	f88d 4003 	strb.w	r4, [sp, #3]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8027818:	f7f8 fe14 	bl	8020444 <mbedtls_asn1_get_tag>
 802781c:	b120      	cbz	r0, 8027828 <pk_parse_key_pkcs8_unencrypted_der+0x28>

    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 802781e:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
    } else
#endif /* MBEDTLS_ECP_C */
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    return( 0 );
}
 8027822:	4620      	mov	r0, r4
 8027824:	b00a      	add	sp, #40	; 0x28
 8027826:	bd70      	pop	{r4, r5, r6, pc}
    end = p + len;
 8027828:	e9dd 3602 	ldrd	r3, r6, [sp, #8]
 802782c:	441e      	add	r6, r3
    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 802782e:	4631      	mov	r1, r6
 8027830:	aa01      	add	r2, sp, #4
 8027832:	a803      	add	r0, sp, #12
 8027834:	f7f8 feb4 	bl	80205a0 <mbedtls_asn1_get_int>
 8027838:	2800      	cmp	r0, #0
 802783a:	d145      	bne.n	80278c8 <pk_parse_key_pkcs8_unencrypted_der+0xc8>
    if( version != 0 )
 802783c:	9801      	ldr	r0, [sp, #4]
 802783e:	2800      	cmp	r0, #0
 8027840:	d151      	bne.n	80278e6 <pk_parse_key_pkcs8_unencrypted_der+0xe6>
    memset( params, 0, sizeof(mbedtls_asn1_buf) );
 8027842:	e9cd 0004 	strd	r0, r0, [sp, #16]
 8027846:	9006      	str	r0, [sp, #24]
    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 8027848:	4631      	mov	r1, r6
 802784a:	ab04      	add	r3, sp, #16
 802784c:	aa07      	add	r2, sp, #28
 802784e:	a803      	add	r0, sp, #12
 8027850:	f7f9 f8b4 	bl	80209bc <mbedtls_asn1_get_alg>
 8027854:	b138      	cbz	r0, 8027866 <pk_parse_key_pkcs8_unencrypted_der+0x66>
    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )
 8027856:	f5b0 5f6a 	cmp.w	r0, #14976	; 0x3a80
 802785a:	d00f      	beq.n	802787c <pk_parse_key_pkcs8_unencrypted_der+0x7c>
 802785c:	f5a0 44ef 	sub.w	r4, r0, #30592	; 0x7780
}
 8027860:	4620      	mov	r0, r4
 8027862:	b00a      	add	sp, #40	; 0x28
 8027864:	bd70      	pop	{r4, r5, r6, pc}
    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
 8027866:	a807      	add	r0, sp, #28
 8027868:	f10d 0103 	add.w	r1, sp, #3
 802786c:	f7ff fa02 	bl	8026c74 <mbedtls_oid_get_pk_alg>
 8027870:	2800      	cmp	r0, #0
 8027872:	d13e      	bne.n	80278f2 <pk_parse_key_pkcs8_unencrypted_der+0xf2>
    if( *pk_alg == MBEDTLS_PK_RSA &&
 8027874:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8027878:	2b01      	cmp	r3, #1
 802787a:	d02a      	beq.n	80278d2 <pk_parse_key_pkcs8_unencrypted_der+0xd2>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 802787c:	4631      	mov	r1, r6
 802787e:	2304      	movs	r3, #4
 8027880:	aa02      	add	r2, sp, #8
 8027882:	a803      	add	r0, sp, #12
 8027884:	f7f8 fdde 	bl	8020444 <mbedtls_asn1_get_tag>
 8027888:	2800      	cmp	r0, #0
 802788a:	d1c8      	bne.n	802781e <pk_parse_key_pkcs8_unencrypted_der+0x1e>
    if( len < 1 )
 802788c:	9b02      	ldr	r3, [sp, #8]
 802788e:	b373      	cbz	r3, 80278ee <pk_parse_key_pkcs8_unencrypted_der+0xee>
    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 8027890:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8027894:	f7ff fc86 	bl	80271a4 <mbedtls_pk_info_from_type>
 8027898:	4601      	mov	r1, r0
 802789a:	b330      	cbz	r0, 80278ea <pk_parse_key_pkcs8_unencrypted_der+0xea>
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 802789c:	4628      	mov	r0, r5
 802789e:	f7ff fc89 	bl	80271b4 <mbedtls_pk_setup>
 80278a2:	4604      	mov	r4, r0
 80278a4:	2800      	cmp	r0, #0
 80278a6:	d1bc      	bne.n	8027822 <pk_parse_key_pkcs8_unencrypted_der+0x22>
    if( pk_alg == MBEDTLS_PK_RSA )
 80278a8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80278ac:	2b01      	cmp	r3, #1
 80278ae:	d11c      	bne.n	80278ea <pk_parse_key_pkcs8_unencrypted_der+0xea>
        if( ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), p, len ) ) != 0 )
 80278b0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80278b4:	6868      	ldr	r0, [r5, #4]
 80278b6:	f7ff fe8f 	bl	80275d8 <pk_parse_key_pkcs1_der>
 80278ba:	4604      	mov	r4, r0
 80278bc:	2800      	cmp	r0, #0
 80278be:	d0b0      	beq.n	8027822 <pk_parse_key_pkcs8_unencrypted_der+0x22>
            mbedtls_pk_free( pk );
 80278c0:	4628      	mov	r0, r5
 80278c2:	f7ff fc5f 	bl	8027184 <mbedtls_pk_free>
            return( ret );
 80278c6:	e7ac      	b.n	8027822 <pk_parse_key_pkcs8_unencrypted_der+0x22>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 80278c8:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
}
 80278cc:	4620      	mov	r0, r4
 80278ce:	b00a      	add	sp, #40	; 0x28
 80278d0:	bd70      	pop	{r4, r5, r6, pc}
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 80278d2:	9b04      	ldr	r3, [sp, #16]
    if( *pk_alg == MBEDTLS_PK_RSA &&
 80278d4:	2b05      	cmp	r3, #5
 80278d6:	d002      	beq.n	80278de <pk_parse_key_pkcs8_unencrypted_der+0xde>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 80278d8:	b10b      	cbz	r3, 80278de <pk_parse_key_pkcs8_unencrypted_der+0xde>
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 80278da:	4c07      	ldr	r4, [pc, #28]	; (80278f8 <pk_parse_key_pkcs8_unencrypted_der+0xf8>)
 80278dc:	e7a1      	b.n	8027822 <pk_parse_key_pkcs8_unencrypted_der+0x22>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 80278de:	9b05      	ldr	r3, [sp, #20]
 80278e0:	2b00      	cmp	r3, #0
 80278e2:	d0cb      	beq.n	802787c <pk_parse_key_pkcs8_unencrypted_der+0x7c>
 80278e4:	e7f9      	b.n	80278da <pk_parse_key_pkcs8_unencrypted_der+0xda>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );
 80278e6:	4c05      	ldr	r4, [pc, #20]	; (80278fc <pk_parse_key_pkcs8_unencrypted_der+0xfc>)
 80278e8:	e79b      	b.n	8027822 <pk_parse_key_pkcs8_unencrypted_der+0x22>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 80278ea:	4c05      	ldr	r4, [pc, #20]	; (8027900 <pk_parse_key_pkcs8_unencrypted_der+0x100>)
 80278ec:	e799      	b.n	8027822 <pk_parse_key_pkcs8_unencrypted_der+0x22>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 80278ee:	4c05      	ldr	r4, [pc, #20]	; (8027904 <pk_parse_key_pkcs8_unencrypted_der+0x104>)
 80278f0:	e797      	b.n	8027822 <pk_parse_key_pkcs8_unencrypted_der+0x22>
 80278f2:	4c05      	ldr	r4, [pc, #20]	; (8027908 <pk_parse_key_pkcs8_unencrypted_der+0x108>)
 80278f4:	e795      	b.n	8027822 <pk_parse_key_pkcs8_unencrypted_der+0x22>
 80278f6:	bf00      	nop
 80278f8:	ffff8880 	.word	0xffff8880
 80278fc:	ffffc280 	.word	0xffffc280
 8027900:	ffffc380 	.word	0xffffc380
 8027904:	ffffc2a0 	.word	0xffffc2a0
 8027908:	ffff8680 	.word	0xffff8680

0802790c <mbedtls_pk_parse_subpubkey>:
{
 802790c:	b5f0      	push	{r4, r5, r6, r7, lr}
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 802790e:	2400      	movs	r4, #0
{
 8027910:	b089      	sub	sp, #36	; 0x24
 8027912:	4616      	mov	r6, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8027914:	2330      	movs	r3, #48	; 0x30
 8027916:	aa01      	add	r2, sp, #4
{
 8027918:	4605      	mov	r5, r0
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 802791a:	f88d 4003 	strb.w	r4, [sp, #3]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 802791e:	f7f8 fd91 	bl	8020444 <mbedtls_asn1_get_tag>
 8027922:	b120      	cbz	r0, 802792e <mbedtls_pk_parse_subpubkey+0x22>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8027924:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
}
 8027928:	4620      	mov	r0, r4
 802792a:	b009      	add	sp, #36	; 0x24
 802792c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    end = *p + len;
 802792e:	9b01      	ldr	r3, [sp, #4]
 8027930:	682f      	ldr	r7, [r5, #0]
    memset( params, 0, sizeof(mbedtls_asn1_buf) );
 8027932:	e9cd 0002 	strd	r0, r0, [sp, #8]
    end = *p + len;
 8027936:	441f      	add	r7, r3
    memset( params, 0, sizeof(mbedtls_asn1_buf) );
 8027938:	9004      	str	r0, [sp, #16]
    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 802793a:	4639      	mov	r1, r7
 802793c:	4628      	mov	r0, r5
 802793e:	ab02      	add	r3, sp, #8
 8027940:	aa05      	add	r2, sp, #20
 8027942:	f7f9 f83b 	bl	80209bc <mbedtls_asn1_get_alg>
 8027946:	b318      	cbz	r0, 8027990 <mbedtls_pk_parse_subpubkey+0x84>
    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 8027948:	f5b0 546a 	subs.w	r4, r0, #14976	; 0x3a80
 802794c:	d1ec      	bne.n	8027928 <mbedtls_pk_parse_subpubkey+0x1c>
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 802794e:	4639      	mov	r1, r7
 8027950:	4628      	mov	r0, r5
 8027952:	aa01      	add	r2, sp, #4
 8027954:	f7f8 ff2e 	bl	80207b4 <mbedtls_asn1_get_bitstring_null>
 8027958:	bb68      	cbnz	r0, 80279b6 <mbedtls_pk_parse_subpubkey+0xaa>
    if( *p + len != end )
 802795a:	682b      	ldr	r3, [r5, #0]
 802795c:	9a01      	ldr	r2, [sp, #4]
 802795e:	4413      	add	r3, r2
 8027960:	429f      	cmp	r7, r3
 8027962:	d138      	bne.n	80279d6 <mbedtls_pk_parse_subpubkey+0xca>
    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 8027964:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8027968:	f7ff fc1c 	bl	80271a4 <mbedtls_pk_info_from_type>
 802796c:	4601      	mov	r1, r0
 802796e:	2800      	cmp	r0, #0
 8027970:	d033      	beq.n	80279da <mbedtls_pk_parse_subpubkey+0xce>
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 8027972:	4630      	mov	r0, r6
 8027974:	f7ff fc1e 	bl	80271b4 <mbedtls_pk_setup>
 8027978:	4604      	mov	r4, r0
 802797a:	2800      	cmp	r0, #0
 802797c:	d1d4      	bne.n	8027928 <mbedtls_pk_parse_subpubkey+0x1c>
    if( pk_alg == MBEDTLS_PK_RSA )
 802797e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8027982:	2b01      	cmp	r3, #1
 8027984:	d01a      	beq.n	80279bc <mbedtls_pk_parse_subpubkey+0xb0>
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;
 8027986:	4c16      	ldr	r4, [pc, #88]	; (80279e0 <mbedtls_pk_parse_subpubkey+0xd4>)
        mbedtls_pk_free( pk );
 8027988:	4630      	mov	r0, r6
 802798a:	f7ff fbfb 	bl	8027184 <mbedtls_pk_free>
 802798e:	e7cb      	b.n	8027928 <mbedtls_pk_parse_subpubkey+0x1c>
    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
 8027990:	a805      	add	r0, sp, #20
 8027992:	f10d 0103 	add.w	r1, sp, #3
 8027996:	f7ff f96d 	bl	8026c74 <mbedtls_oid_get_pk_alg>
 802799a:	b9f0      	cbnz	r0, 80279da <mbedtls_pk_parse_subpubkey+0xce>
    if( *pk_alg == MBEDTLS_PK_RSA &&
 802799c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80279a0:	2b01      	cmp	r3, #1
 80279a2:	d1d4      	bne.n	802794e <mbedtls_pk_parse_subpubkey+0x42>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 80279a4:	9b02      	ldr	r3, [sp, #8]
    if( *pk_alg == MBEDTLS_PK_RSA &&
 80279a6:	2b05      	cmp	r3, #5
 80279a8:	d000      	beq.n	80279ac <mbedtls_pk_parse_subpubkey+0xa0>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 80279aa:	b913      	cbnz	r3, 80279b2 <mbedtls_pk_parse_subpubkey+0xa6>
 80279ac:	9b03      	ldr	r3, [sp, #12]
 80279ae:	2b00      	cmp	r3, #0
 80279b0:	d0cd      	beq.n	802794e <mbedtls_pk_parse_subpubkey+0x42>
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 80279b2:	4c0c      	ldr	r4, [pc, #48]	; (80279e4 <mbedtls_pk_parse_subpubkey+0xd8>)
 80279b4:	e7b8      	b.n	8027928 <mbedtls_pk_parse_subpubkey+0x1c>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 80279b6:	f5a0 546c 	sub.w	r4, r0, #15104	; 0x3b00
 80279ba:	e7b5      	b.n	8027928 <mbedtls_pk_parse_subpubkey+0x1c>
        ret = pk_get_rsapubkey( p, end, mbedtls_pk_rsa( *pk ) );
 80279bc:	4639      	mov	r1, r7
 80279be:	4628      	mov	r0, r5
 80279c0:	6872      	ldr	r2, [r6, #4]
 80279c2:	f7ff fd9b 	bl	80274fc <pk_get_rsapubkey>
    if( ret == 0 && *p != end )
 80279c6:	4604      	mov	r4, r0
 80279c8:	2800      	cmp	r0, #0
 80279ca:	d1dd      	bne.n	8027988 <mbedtls_pk_parse_subpubkey+0x7c>
 80279cc:	682b      	ldr	r3, [r5, #0]
 80279ce:	42bb      	cmp	r3, r7
 80279d0:	d0aa      	beq.n	8027928 <mbedtls_pk_parse_subpubkey+0x1c>
        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY +
 80279d2:	4c05      	ldr	r4, [pc, #20]	; (80279e8 <mbedtls_pk_parse_subpubkey+0xdc>)
 80279d4:	e7d8      	b.n	8027988 <mbedtls_pk_parse_subpubkey+0x7c>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
 80279d6:	4c04      	ldr	r4, [pc, #16]	; (80279e8 <mbedtls_pk_parse_subpubkey+0xdc>)
 80279d8:	e7a6      	b.n	8027928 <mbedtls_pk_parse_subpubkey+0x1c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 80279da:	4c01      	ldr	r4, [pc, #4]	; (80279e0 <mbedtls_pk_parse_subpubkey+0xd4>)
 80279dc:	e7a4      	b.n	8027928 <mbedtls_pk_parse_subpubkey+0x1c>
 80279de:	bf00      	nop
 80279e0:	ffffc380 	.word	0xffffc380
 80279e4:	ffffc580 	.word	0xffffc580
 80279e8:	ffffc49a 	.word	0xffffc49a

080279ec <mbedtls_pk_parse_key>:
 * Parse a private key
 */
int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
                  const unsigned char *key, size_t keylen,
                  const unsigned char *pwd, size_t pwdlen )
{
 80279ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80279f0:	b088      	sub	sp, #32
    size_t len;
    mbedtls_pem_context pem;
#endif

    PK_VALIDATE_RET( pk != NULL );
    if( keylen == 0 )
 80279f2:	2a00      	cmp	r2, #0
 80279f4:	f000 8086 	beq.w	8027b04 <mbedtls_pk_parse_key+0x118>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
    PK_VALIDATE_RET( key != NULL );

#if defined(MBEDTLS_PEM_PARSE_C)
   mbedtls_pem_init( &pem );
 80279f8:	460d      	mov	r5, r1

#if defined(MBEDTLS_RSA_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
 80279fa:	f102 38ff 	add.w	r8, r2, #4294967295
 80279fe:	4607      	mov	r7, r0
   mbedtls_pem_init( &pem );
 8027a00:	a805      	add	r0, sp, #20
 8027a02:	461e      	mov	r6, r3
 8027a04:	4614      	mov	r4, r2
 8027a06:	f7ff fa13 	bl	8026e30 <mbedtls_pem_init>
    if( key[keylen - 1] != '\0' )
 8027a0a:	f815 3008 	ldrb.w	r3, [r5, r8]
 8027a0e:	b15b      	cbz	r3, 8027a28 <mbedtls_pk_parse_key+0x3c>
    {
        return( ret );
    }
#endif /* MBEDTLS_PKCS12_C || MBEDTLS_PKCS5_C */

    if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk, key, keylen ) ) == 0 )
 8027a10:	4622      	mov	r2, r4
 8027a12:	4629      	mov	r1, r5
 8027a14:	4638      	mov	r0, r7
 8027a16:	f7ff fef3 	bl	8027800 <pk_parse_key_pkcs8_unencrypted_der>
 8027a1a:	2800      	cmp	r0, #0
 8027a1c:	d133      	bne.n	8027a86 <mbedtls_pk_parse_key+0x9a>
        return( 0 );
 8027a1e:	2600      	movs	r6, #0
     * twice, once here and once by the caller, but this is
     * also ok and in line with the mbedtls_pk_free() calls
     * on failed PEM parsing attempts. */

    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
}
 8027a20:	4630      	mov	r0, r6
 8027a22:	b008      	add	sp, #32
 8027a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = mbedtls_pem_read_buffer( &pem,
 8027a28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027a2a:	4a39      	ldr	r2, [pc, #228]	; (8027b10 <mbedtls_pk_parse_key+0x124>)
 8027a2c:	e9cd 6300 	strd	r6, r3, [sp]
 8027a30:	ab04      	add	r3, sp, #16
 8027a32:	9302      	str	r3, [sp, #8]
 8027a34:	4937      	ldr	r1, [pc, #220]	; (8027b14 <mbedtls_pk_parse_key+0x128>)
 8027a36:	462b      	mov	r3, r5
 8027a38:	a805      	add	r0, sp, #20
 8027a3a:	f7ff f9ff 	bl	8026e3c <mbedtls_pem_read_buffer>
    if( ret == 0 )
 8027a3e:	4606      	mov	r6, r0
 8027a40:	2800      	cmp	r0, #0
 8027a42:	d03d      	beq.n	8027ac0 <mbedtls_pk_parse_key+0xd4>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
 8027a44:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
 8027a48:	d05e      	beq.n	8027b08 <mbedtls_pk_parse_key+0x11c>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
 8027a4a:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
 8027a4e:	d05d      	beq.n	8027b0c <mbedtls_pk_parse_key+0x120>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 8027a50:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 8027a54:	d1e4      	bne.n	8027a20 <mbedtls_pk_parse_key+0x34>
    if( key[keylen - 1] != '\0' )
 8027a56:	f815 3008 	ldrb.w	r3, [r5, r8]
 8027a5a:	2b00      	cmp	r3, #0
 8027a5c:	d1d8      	bne.n	8027a10 <mbedtls_pk_parse_key+0x24>
        ret = mbedtls_pem_read_buffer( &pem,
 8027a5e:	aa04      	add	r2, sp, #16
 8027a60:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8027a64:	9300      	str	r3, [sp, #0]
 8027a66:	4a2c      	ldr	r2, [pc, #176]	; (8027b18 <mbedtls_pk_parse_key+0x12c>)
 8027a68:	462b      	mov	r3, r5
 8027a6a:	492c      	ldr	r1, [pc, #176]	; (8027b1c <mbedtls_pk_parse_key+0x130>)
 8027a6c:	a805      	add	r0, sp, #20
 8027a6e:	f7ff f9e5 	bl	8026e3c <mbedtls_pem_read_buffer>
    if( ret == 0 )
 8027a72:	4606      	mov	r6, r0
 8027a74:	2800      	cmp	r0, #0
 8027a76:	d03c      	beq.n	8027af2 <mbedtls_pk_parse_key+0x106>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 8027a78:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 8027a7c:	d0c8      	beq.n	8027a10 <mbedtls_pk_parse_key+0x24>
}
 8027a7e:	4630      	mov	r0, r6
 8027a80:	b008      	add	sp, #32
 8027a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    mbedtls_pk_free( pk );
 8027a86:	4638      	mov	r0, r7
 8027a88:	f7ff fb7c 	bl	8027184 <mbedtls_pk_free>
    mbedtls_pk_init( pk );
 8027a8c:	4638      	mov	r0, r7
 8027a8e:	f7ff fb75 	bl	802717c <mbedtls_pk_init>
    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
 8027a92:	2001      	movs	r0, #1
 8027a94:	f7ff fb86 	bl	80271a4 <mbedtls_pk_info_from_type>
 8027a98:	4601      	mov	r1, r0
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
 8027a9a:	4638      	mov	r0, r7
 8027a9c:	f7ff fb8a 	bl	80271b4 <mbedtls_pk_setup>
 8027aa0:	b930      	cbnz	r0, 8027ab0 <mbedtls_pk_parse_key+0xc4>
        pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), key, keylen ) == 0 )
 8027aa2:	4622      	mov	r2, r4
 8027aa4:	4629      	mov	r1, r5
 8027aa6:	6878      	ldr	r0, [r7, #4]
 8027aa8:	f7ff fd96 	bl	80275d8 <pk_parse_key_pkcs1_der>
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
 8027aac:	2800      	cmp	r0, #0
 8027aae:	d0b6      	beq.n	8027a1e <mbedtls_pk_parse_key+0x32>
    mbedtls_pk_free( pk );
 8027ab0:	4638      	mov	r0, r7
 8027ab2:	f7ff fb67 	bl	8027184 <mbedtls_pk_free>
    mbedtls_pk_init( pk );
 8027ab6:	4638      	mov	r0, r7
 8027ab8:	f7ff fb60 	bl	802717c <mbedtls_pk_init>
    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 8027abc:	4e18      	ldr	r6, [pc, #96]	; (8027b20 <mbedtls_pk_parse_key+0x134>)
 8027abe:	e7af      	b.n	8027a20 <mbedtls_pk_parse_key+0x34>
        pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
 8027ac0:	2001      	movs	r0, #1
 8027ac2:	f7ff fb6f 	bl	80271a4 <mbedtls_pk_info_from_type>
 8027ac6:	4601      	mov	r1, r0
        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
 8027ac8:	4638      	mov	r0, r7
 8027aca:	f7ff fb73 	bl	80271b4 <mbedtls_pk_setup>
 8027ace:	4606      	mov	r6, r0
 8027ad0:	b130      	cbz	r0, 8027ae0 <mbedtls_pk_parse_key+0xf4>
            mbedtls_pk_free( pk );
 8027ad2:	4638      	mov	r0, r7
 8027ad4:	f7ff fb56 	bl	8027184 <mbedtls_pk_free>
        mbedtls_pem_free( &pem );
 8027ad8:	a805      	add	r0, sp, #20
 8027ada:	f7ff fb3b 	bl	8027154 <mbedtls_pem_free>
        return( ret );
 8027ade:	e79f      	b.n	8027a20 <mbedtls_pk_parse_key+0x34>
            ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ),
 8027ae0:	6878      	ldr	r0, [r7, #4]
 8027ae2:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8027ae6:	f7ff fd77 	bl	80275d8 <pk_parse_key_pkcs1_der>
        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
 8027aea:	4606      	mov	r6, r0
 8027aec:	2800      	cmp	r0, #0
 8027aee:	d0f3      	beq.n	8027ad8 <mbedtls_pk_parse_key+0xec>
 8027af0:	e7ef      	b.n	8027ad2 <mbedtls_pk_parse_key+0xe6>
        if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk,
 8027af2:	4638      	mov	r0, r7
 8027af4:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8027af8:	f7ff fe82 	bl	8027800 <pk_parse_key_pkcs8_unencrypted_der>
 8027afc:	4606      	mov	r6, r0
 8027afe:	2800      	cmp	r0, #0
 8027b00:	d0ea      	beq.n	8027ad8 <mbedtls_pk_parse_key+0xec>
 8027b02:	e7e6      	b.n	8027ad2 <mbedtls_pk_parse_key+0xe6>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 8027b04:	4e06      	ldr	r6, [pc, #24]	; (8027b20 <mbedtls_pk_parse_key+0x134>)
 8027b06:	e78b      	b.n	8027a20 <mbedtls_pk_parse_key+0x34>
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
 8027b08:	4e06      	ldr	r6, [pc, #24]	; (8027b24 <mbedtls_pk_parse_key+0x138>)
 8027b0a:	e789      	b.n	8027a20 <mbedtls_pk_parse_key+0x34>
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
 8027b0c:	4e06      	ldr	r6, [pc, #24]	; (8027b28 <mbedtls_pk_parse_key+0x13c>)
 8027b0e:	e787      	b.n	8027a20 <mbedtls_pk_parse_key+0x34>
 8027b10:	08031ef4 	.word	0x08031ef4
 8027b14:	0803538c 	.word	0x0803538c
 8027b18:	080353ac 	.word	0x080353ac
 8027b1c:	080353c8 	.word	0x080353c8
 8027b20:	ffffc300 	.word	0xffffc300
 8027b24:	ffffc480 	.word	0xffffc480
 8027b28:	ffffc400 	.word	0xffffc400

08027b2c <mbedtls_platform_zeroize>:

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    MBEDTLS_INTERNAL_VALIDATE( len == 0 || buf != NULL );

    if( len > 0 )
 8027b2c:	b121      	cbz	r1, 8027b38 <mbedtls_platform_zeroize+0xc>
        memset_func( buf, 0, len );
 8027b2e:	4b03      	ldr	r3, [pc, #12]	; (8027b3c <mbedtls_platform_zeroize+0x10>)
 8027b30:	460a      	mov	r2, r1
 8027b32:	681b      	ldr	r3, [r3, #0]
 8027b34:	2100      	movs	r1, #0
 8027b36:	4718      	bx	r3
}
 8027b38:	4770      	bx	lr
 8027b3a:	bf00      	nop
 8027b3c:	200182d8 	.word	0x200182d8

08027b40 <mgf_mask>:
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 8027b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027b44:	b08b      	sub	sp, #44	; 0x2c
 8027b46:	460e      	mov	r6, r1
 8027b48:	4605      	mov	r5, r0
 8027b4a:	4691      	mov	r9, r2
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 8027b4c:	2100      	movs	r1, #0
 8027b4e:	2220      	movs	r2, #32
 8027b50:	a802      	add	r0, sp, #8
{
 8027b52:	469a      	mov	sl, r3
 8027b54:	9f14      	ldr	r7, [sp, #80]	; 0x50
    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 8027b56:	f008 f986 	bl	802fe66 <memset>
    memset( counter, 0, 4 );
 8027b5a:	2300      	movs	r3, #0

    hlen = mbedtls_md_get_size( md_ctx->md_info );
 8027b5c:	6838      	ldr	r0, [r7, #0]
    memset( counter, 0, 4 );
 8027b5e:	9301      	str	r3, [sp, #4]
    hlen = mbedtls_md_get_size( md_ctx->md_info );
 8027b60:	f7fe fb68 	bl	8026234 <mbedtls_md_get_size>

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
 8027b64:	2e00      	cmp	r6, #0
 8027b66:	f000 808d 	beq.w	8027c84 <mgf_mask+0x144>
 8027b6a:	4680      	mov	r8, r0
    {
        use_len = hlen;
        if( dlen < hlen )
            use_len = dlen;

        if( ( ret = mbedtls_md_starts( md_ctx ) ) != 0 )
 8027b6c:	4638      	mov	r0, r7
 8027b6e:	f7fe f907 	bl	8025d80 <mbedtls_md_starts>
 8027b72:	45b0      	cmp	r8, r6
 8027b74:	46c3      	mov	fp, r8
 8027b76:	4604      	mov	r4, r0
 8027b78:	bf28      	it	cs
 8027b7a:	46b3      	movcs	fp, r6
 8027b7c:	2800      	cmp	r0, #0
 8027b7e:	f040 8082 	bne.w	8027c86 <mgf_mask+0x146>
            goto exit;
        if( ( ret = mbedtls_md_update( md_ctx, src, slen ) ) != 0 )
 8027b82:	4652      	mov	r2, sl
 8027b84:	4649      	mov	r1, r9
 8027b86:	4638      	mov	r0, r7
 8027b88:	f7fe f914 	bl	8025db4 <mbedtls_md_update>
 8027b8c:	4604      	mov	r4, r0
 8027b8e:	2800      	cmp	r0, #0
 8027b90:	d179      	bne.n	8027c86 <mgf_mask+0x146>
            goto exit;
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
 8027b92:	2204      	movs	r2, #4
 8027b94:	4638      	mov	r0, r7
 8027b96:	eb0d 0102 	add.w	r1, sp, r2
 8027b9a:	f7fe f90b 	bl	8025db4 <mbedtls_md_update>
 8027b9e:	4604      	mov	r4, r0
 8027ba0:	2800      	cmp	r0, #0
 8027ba2:	d170      	bne.n	8027c86 <mgf_mask+0x146>
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
 8027ba4:	4638      	mov	r0, r7
 8027ba6:	a902      	add	r1, sp, #8
 8027ba8:	f7fe f918 	bl	8025ddc <mbedtls_md_finish>
 8027bac:	4604      	mov	r4, r0
 8027bae:	2800      	cmp	r0, #0
 8027bb0:	d169      	bne.n	8027c86 <mgf_mask+0x146>
            goto exit;

        for( i = 0; i < use_len; ++i )
 8027bb2:	f1bb 0f00 	cmp.w	fp, #0
 8027bb6:	d05b      	beq.n	8027c70 <mgf_mask+0x130>
 8027bb8:	f10b 33ff 	add.w	r3, fp, #4294967295
 8027bbc:	2b02      	cmp	r3, #2
 8027bbe:	d96a      	bls.n	8027c96 <mgf_mask+0x156>
            *p++ ^= mask[i];
 8027bc0:	682a      	ldr	r2, [r5, #0]
 8027bc2:	9902      	ldr	r1, [sp, #8]
 8027bc4:	ea4f 039b 	mov.w	r3, fp, lsr #2
 8027bc8:	404a      	eors	r2, r1
 8027bca:	2b01      	cmp	r3, #1
 8027bcc:	602a      	str	r2, [r5, #0]
        for( i = 0; i < use_len; ++i )
 8027bce:	d02d      	beq.n	8027c2c <mgf_mask+0xec>
            *p++ ^= mask[i];
 8027bd0:	686a      	ldr	r2, [r5, #4]
 8027bd2:	9903      	ldr	r1, [sp, #12]
 8027bd4:	2b02      	cmp	r3, #2
 8027bd6:	ea82 0201 	eor.w	r2, r2, r1
 8027bda:	606a      	str	r2, [r5, #4]
        for( i = 0; i < use_len; ++i )
 8027bdc:	d026      	beq.n	8027c2c <mgf_mask+0xec>
            *p++ ^= mask[i];
 8027bde:	68aa      	ldr	r2, [r5, #8]
 8027be0:	9904      	ldr	r1, [sp, #16]
 8027be2:	2b03      	cmp	r3, #3
 8027be4:	ea82 0201 	eor.w	r2, r2, r1
 8027be8:	60aa      	str	r2, [r5, #8]
        for( i = 0; i < use_len; ++i )
 8027bea:	d01f      	beq.n	8027c2c <mgf_mask+0xec>
            *p++ ^= mask[i];
 8027bec:	68ea      	ldr	r2, [r5, #12]
 8027bee:	9905      	ldr	r1, [sp, #20]
 8027bf0:	2b04      	cmp	r3, #4
 8027bf2:	ea82 0201 	eor.w	r2, r2, r1
 8027bf6:	60ea      	str	r2, [r5, #12]
        for( i = 0; i < use_len; ++i )
 8027bf8:	d018      	beq.n	8027c2c <mgf_mask+0xec>
            *p++ ^= mask[i];
 8027bfa:	692a      	ldr	r2, [r5, #16]
 8027bfc:	9906      	ldr	r1, [sp, #24]
 8027bfe:	2b05      	cmp	r3, #5
 8027c00:	ea82 0201 	eor.w	r2, r2, r1
 8027c04:	612a      	str	r2, [r5, #16]
        for( i = 0; i < use_len; ++i )
 8027c06:	d011      	beq.n	8027c2c <mgf_mask+0xec>
            *p++ ^= mask[i];
 8027c08:	696a      	ldr	r2, [r5, #20]
 8027c0a:	9907      	ldr	r1, [sp, #28]
 8027c0c:	2b06      	cmp	r3, #6
 8027c0e:	ea82 0201 	eor.w	r2, r2, r1
 8027c12:	616a      	str	r2, [r5, #20]
        for( i = 0; i < use_len; ++i )
 8027c14:	d00a      	beq.n	8027c2c <mgf_mask+0xec>
            *p++ ^= mask[i];
 8027c16:	69aa      	ldr	r2, [r5, #24]
 8027c18:	9908      	ldr	r1, [sp, #32]
 8027c1a:	2b07      	cmp	r3, #7
 8027c1c:	ea82 0201 	eor.w	r2, r2, r1
 8027c20:	61aa      	str	r2, [r5, #24]
        for( i = 0; i < use_len; ++i )
 8027c22:	d003      	beq.n	8027c2c <mgf_mask+0xec>
            *p++ ^= mask[i];
 8027c24:	69eb      	ldr	r3, [r5, #28]
 8027c26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027c28:	4053      	eors	r3, r2
 8027c2a:	61eb      	str	r3, [r5, #28]
        for( i = 0; i < use_len; ++i )
 8027c2c:	f02b 0403 	bic.w	r4, fp, #3
 8027c30:	45a3      	cmp	fp, r4
 8027c32:	eb05 0304 	add.w	r3, r5, r4
 8027c36:	d01a      	beq.n	8027c6e <mgf_mask+0x12e>
            *p++ ^= mask[i];
 8027c38:	aa0a      	add	r2, sp, #40	; 0x28
 8027c3a:	4422      	add	r2, r4
 8027c3c:	f812 0c20 	ldrb.w	r0, [r2, #-32]
 8027c40:	7819      	ldrb	r1, [r3, #0]
        for( i = 0; i < use_len; ++i )
 8027c42:	1c62      	adds	r2, r4, #1
            *p++ ^= mask[i];
 8027c44:	4041      	eors	r1, r0
        for( i = 0; i < use_len; ++i )
 8027c46:	455a      	cmp	r2, fp
            *p++ ^= mask[i];
 8027c48:	7019      	strb	r1, [r3, #0]
        for( i = 0; i < use_len; ++i )
 8027c4a:	d210      	bcs.n	8027c6e <mgf_mask+0x12e>
            *p++ ^= mask[i];
 8027c4c:	a90a      	add	r1, sp, #40	; 0x28
 8027c4e:	440a      	add	r2, r1
 8027c50:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 8027c54:	785a      	ldrb	r2, [r3, #1]
        for( i = 0; i < use_len; ++i )
 8027c56:	3402      	adds	r4, #2
            *p++ ^= mask[i];
 8027c58:	404a      	eors	r2, r1
        for( i = 0; i < use_len; ++i )
 8027c5a:	45a3      	cmp	fp, r4
            *p++ ^= mask[i];
 8027c5c:	705a      	strb	r2, [r3, #1]
        for( i = 0; i < use_len; ++i )
 8027c5e:	d906      	bls.n	8027c6e <mgf_mask+0x12e>
            *p++ ^= mask[i];
 8027c60:	aa0a      	add	r2, sp, #40	; 0x28
 8027c62:	4414      	add	r4, r2
 8027c64:	f814 1c20 	ldrb.w	r1, [r4, #-32]
 8027c68:	789a      	ldrb	r2, [r3, #2]
 8027c6a:	404a      	eors	r2, r1
 8027c6c:	709a      	strb	r2, [r3, #2]
        for( i = 0; i < use_len; ++i )
 8027c6e:	445d      	add	r5, fp

        counter[3]++;
 8027c70:	f89d 3007 	ldrb.w	r3, [sp, #7]
    while( dlen > 0 )
 8027c74:	ebb6 060b 	subs.w	r6, r6, fp
        counter[3]++;
 8027c78:	f103 0301 	add.w	r3, r3, #1
 8027c7c:	f88d 3007 	strb.w	r3, [sp, #7]
    while( dlen > 0 )
 8027c80:	f47f af74 	bne.w	8027b6c <mgf_mask+0x2c>
        for( i = 0; i < use_len; ++i )
 8027c84:	2400      	movs	r4, #0

        dlen -= use_len;
    }

exit:
    mbedtls_platform_zeroize( mask, sizeof( mask ) );
 8027c86:	a802      	add	r0, sp, #8
 8027c88:	2120      	movs	r1, #32
 8027c8a:	f7ff ff4f 	bl	8027b2c <mbedtls_platform_zeroize>

    return( ret );
}
 8027c8e:	4620      	mov	r0, r4
 8027c90:	b00b      	add	sp, #44	; 0x2c
 8027c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for( i = 0; i < use_len; ++i )
 8027c96:	462b      	mov	r3, r5
 8027c98:	e7ce      	b.n	8027c38 <mgf_mask+0xf8>
 8027c9a:	bf00      	nop

08027c9c <rsa_rsassa_pkcs1_v15_encode>:
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
 8027c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t oid_size  = 0;
 8027ca0:	2700      	movs	r7, #0
{
 8027ca2:	b083      	sub	sp, #12
    size_t nb_pad    = dst_len;
    unsigned char *p = dst;
    const char *oid  = NULL;
 8027ca4:	e9cd 7700 	strd	r7, r7, [sp]
{
 8027ca8:	4616      	mov	r6, r2
 8027caa:	461d      	mov	r5, r3

    /* Are we signing hashed or raw data? */
    if( md_alg != MBEDTLS_MD_NONE )
 8027cac:	4604      	mov	r4, r0
{
 8027cae:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    if( md_alg != MBEDTLS_MD_NONE )
 8027cb0:	bb10      	cbnz	r0, 8027cf8 <rsa_rsassa_pkcs1_v15_encode+0x5c>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
        nb_pad -= 10 + hashlen + oid_size;
    }
    else
    {
        if( nb_pad < hashlen )
 8027cb2:	428b      	cmp	r3, r1
 8027cb4:	4688      	mov	r8, r1
 8027cb6:	d302      	bcc.n	8027cbe <rsa_rsassa_pkcs1_v15_encode+0x22>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        nb_pad -= hashlen;
 8027cb8:	1a5b      	subs	r3, r3, r1
    }

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
 8027cba:	2b0a      	cmp	r3, #10
 8027cbc:	d804      	bhi.n	8027cc8 <rsa_rsassa_pkcs1_v15_encode+0x2c>
    /* Just a sanity-check, should be automatic
     * after the initial bounds check. */
    if( p != dst + dst_len )
    {
        mbedtls_platform_zeroize( dst, dst_len );
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8027cbe:	4c44      	ldr	r4, [pc, #272]	; (8027dd0 <rsa_rsassa_pkcs1_v15_encode+0x134>)
    }

    return( 0 );
}
 8027cc0:	4620      	mov	r0, r4
 8027cc2:	b003      	add	sp, #12
 8027cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *p++ = 0;
 8027cc8:	46b9      	mov	r9, r7
    *p++ = MBEDTLS_RSA_SIGN;
 8027cca:	2101      	movs	r1, #1
    nb_pad -= 3;
 8027ccc:	1edd      	subs	r5, r3, #3
    *p++ = 0;
 8027cce:	f809 0b02 	strb.w	r0, [r9], #2
    memset( p, 0xFF, nb_pad );
 8027cd2:	462a      	mov	r2, r5
    *p++ = MBEDTLS_RSA_SIGN;
 8027cd4:	7079      	strb	r1, [r7, #1]
    memset( p, 0xFF, nb_pad );
 8027cd6:	4648      	mov	r0, r9
 8027cd8:	21ff      	movs	r1, #255	; 0xff
 8027cda:	f008 f8c4 	bl	802fe66 <memset>
    p += nb_pad;
 8027cde:	eb09 0005 	add.w	r0, r9, r5
        memcpy( p, hash, hashlen );
 8027ce2:	4642      	mov	r2, r8
 8027ce4:	4631      	mov	r1, r6
    *p++ = 0;
 8027ce6:	f809 4005 	strb.w	r4, [r9, r5]
        memcpy( p, hash, hashlen );
 8027cea:	3001      	adds	r0, #1
 8027cec:	f008 f894 	bl	802fe18 <memcpy>
}
 8027cf0:	4620      	mov	r0, r4
 8027cf2:	b003      	add	sp, #12
 8027cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
 8027cf8:	f7fd ffaa 	bl	8025c50 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 8027cfc:	4680      	mov	r8, r0
 8027cfe:	2800      	cmp	r0, #0
 8027d00:	d0dd      	beq.n	8027cbe <rsa_rsassa_pkcs1_v15_encode+0x22>
        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
 8027d02:	4620      	mov	r0, r4
 8027d04:	466a      	mov	r2, sp
 8027d06:	a901      	add	r1, sp, #4
 8027d08:	f7fe ffd6 	bl	8026cb8 <mbedtls_oid_get_oid_by_md>
 8027d0c:	4604      	mov	r4, r0
 8027d0e:	2800      	cmp	r0, #0
 8027d10:	d1d5      	bne.n	8027cbe <rsa_rsassa_pkcs1_v15_encode+0x22>
        hashlen = mbedtls_md_get_size( md_info );
 8027d12:	4640      	mov	r0, r8
 8027d14:	f7fe fa8e 	bl	8026234 <mbedtls_md_get_size>
        if( 8 + hashlen + oid_size  >= 0x80         ||
 8027d18:	9a00      	ldr	r2, [sp, #0]
        hashlen = mbedtls_md_get_size( md_info );
 8027d1a:	4680      	mov	r8, r0
        if( 8 + hashlen + oid_size  >= 0x80         ||
 8027d1c:	4402      	add	r2, r0
 8027d1e:	f102 0308 	add.w	r3, r2, #8
 8027d22:	2b7f      	cmp	r3, #127	; 0x7f
 8027d24:	d8cb      	bhi.n	8027cbe <rsa_rsassa_pkcs1_v15_encode+0x22>
            10 + hashlen + oid_size <  10 + hashlen )
 8027d26:	f102 030a 	add.w	r3, r2, #10
 8027d2a:	f100 010a 	add.w	r1, r0, #10
            10 + hashlen            <  hashlen      ||
 8027d2e:	428b      	cmp	r3, r1
 8027d30:	d3c5      	bcc.n	8027cbe <rsa_rsassa_pkcs1_v15_encode+0x22>
        if( nb_pad < 10 + hashlen + oid_size )
 8027d32:	42ab      	cmp	r3, r5
 8027d34:	d8c3      	bhi.n	8027cbe <rsa_rsassa_pkcs1_v15_encode+0x22>
        nb_pad -= 10 + hashlen + oid_size;
 8027d36:	f1a5 0a0a 	sub.w	sl, r5, #10
 8027d3a:	ebaa 0a02 	sub.w	sl, sl, r2
    if( nb_pad < 3 + 8 )
 8027d3e:	f1ba 0f0a 	cmp.w	sl, #10
 8027d42:	d9bc      	bls.n	8027cbe <rsa_rsassa_pkcs1_v15_encode+0x22>
    *p++ = 0;
 8027d44:	46bb      	mov	fp, r7
    *p++ = MBEDTLS_RSA_SIGN;
 8027d46:	2301      	movs	r3, #1
    *p++ = 0;
 8027d48:	f80b 4b02 	strb.w	r4, [fp], #2
    nb_pad -= 3;
 8027d4c:	f1aa 0a03 	sub.w	sl, sl, #3
    memset( p, 0xFF, nb_pad );
 8027d50:	4652      	mov	r2, sl
 8027d52:	21ff      	movs	r1, #255	; 0xff
    *p++ = MBEDTLS_RSA_SIGN;
 8027d54:	707b      	strb	r3, [r7, #1]
    memset( p, 0xFF, nb_pad );
 8027d56:	4658      	mov	r0, fp
 8027d58:	f008 f885 	bl	802fe66 <memset>
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 8027d5c:	2230      	movs	r2, #48	; 0x30
    *p++ = MBEDTLS_ASN1_OID;
 8027d5e:	2006      	movs	r0, #6
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 8027d60:	f8dd 9000 	ldr.w	r9, [sp]
    p += nb_pad;
 8027d64:	eb0b 030a 	add.w	r3, fp, sl
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 8027d68:	f109 0108 	add.w	r1, r9, #8
    *p++ = (unsigned char)( 0x04 + oid_size );
 8027d6c:	fa5f fc89 	uxtb.w	ip, r9
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 8027d70:	4441      	add	r1, r8
    *p++ = 0;
 8027d72:	f80b 400a 	strb.w	r4, [fp, sl]
    *p++ = (unsigned char) oid_size;
 8027d76:	f103 0a07 	add.w	sl, r3, #7
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 8027d7a:	7099      	strb	r1, [r3, #2]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 8027d7c:	705a      	strb	r2, [r3, #1]
    *p++ = (unsigned char)( 0x04 + oid_size );
 8027d7e:	f10c 0104 	add.w	r1, ip, #4
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 8027d82:	70da      	strb	r2, [r3, #3]
    *p++ = (unsigned char) oid_size;
 8027d84:	f883 c006 	strb.w	ip, [r3, #6]
    *p++ = (unsigned char)( 0x04 + oid_size );
 8027d88:	7119      	strb	r1, [r3, #4]
    *p++ = MBEDTLS_ASN1_OID;
 8027d8a:	7158      	strb	r0, [r3, #5]
    memcpy( p, oid, oid_size );
 8027d8c:	464a      	mov	r2, r9
 8027d8e:	9901      	ldr	r1, [sp, #4]
 8027d90:	4650      	mov	r0, sl
 8027d92:	f008 f841 	bl	802fe18 <memcpy>
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
 8027d96:	2204      	movs	r2, #4
    *p++ = MBEDTLS_ASN1_NULL;
 8027d98:	2005      	movs	r0, #5
    p += oid_size;
 8027d9a:	eb0a 0c09 	add.w	ip, sl, r9
    *p++ = (unsigned char) hashlen;
 8027d9e:	eb0c 0302 	add.w	r3, ip, r2
    *p++ = MBEDTLS_ASN1_NULL;
 8027da2:	f80a 0009 	strb.w	r0, [sl, r9]
    memcpy( p, hash, hashlen );
 8027da6:	4631      	mov	r1, r6
 8027da8:	4618      	mov	r0, r3
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
 8027daa:	f88c 2002 	strb.w	r2, [ip, #2]
    *p++ = 0x00;
 8027dae:	f88c 4001 	strb.w	r4, [ip, #1]
    memcpy( p, hash, hashlen );
 8027db2:	4642      	mov	r2, r8
    *p++ = (unsigned char) hashlen;
 8027db4:	f88c 8003 	strb.w	r8, [ip, #3]
    memcpy( p, hash, hashlen );
 8027db8:	f008 f82e 	bl	802fe18 <memcpy>
    if( p != dst + dst_len )
 8027dbc:	197b      	adds	r3, r7, r5
    p += hashlen;
 8027dbe:	4440      	add	r0, r8
    if( p != dst + dst_len )
 8027dc0:	4283      	cmp	r3, r0
 8027dc2:	f43f af7d 	beq.w	8027cc0 <rsa_rsassa_pkcs1_v15_encode+0x24>
        mbedtls_platform_zeroize( dst, dst_len );
 8027dc6:	4629      	mov	r1, r5
 8027dc8:	4638      	mov	r0, r7
 8027dca:	f7ff feaf 	bl	8027b2c <mbedtls_platform_zeroize>
 8027dce:	e776      	b.n	8027cbe <rsa_rsassa_pkcs1_v15_encode+0x22>
 8027dd0:	ffffbf80 	.word	0xffffbf80

08027dd4 <rsa_check_context.isra.0>:
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 8027dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027dd6:	4604      	mov	r4, r0
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 8027dd8:	f100 0608 	add.w	r6, r0, #8
 8027ddc:	4630      	mov	r0, r6
 8027dde:	6867      	ldr	r7, [r4, #4]
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 8027de0:	460d      	mov	r5, r1
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 8027de2:	f7f9 faad 	bl	8021340 <mbedtls_mpi_size>
 8027de6:	4287      	cmp	r7, r0
 8027de8:	d151      	bne.n	8027e8e <rsa_check_context.isra.0+0xba>
 8027dea:	6863      	ldr	r3, [r4, #4]
 8027dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8027df0:	d84d      	bhi.n	8027e8e <rsa_check_context.isra.0+0xba>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 8027df2:	2100      	movs	r1, #0
 8027df4:	4630      	mov	r0, r6
 8027df6:	f7f9 fd51 	bl	802189c <mbedtls_mpi_cmp_int>
 8027dfa:	2800      	cmp	r0, #0
 8027dfc:	dd47      	ble.n	8027e8e <rsa_check_context.isra.0+0xba>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
 8027dfe:	4630      	mov	r0, r6
 8027e00:	2100      	movs	r1, #0
 8027e02:	f7f9 fa45 	bl	8021290 <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 8027e06:	2800      	cmp	r0, #0
 8027e08:	d041      	beq.n	8027e8e <rsa_check_context.isra.0+0xba>
    if( is_priv &&
 8027e0a:	b3bd      	cbz	r5, 8027e7c <rsa_check_context.isra.0+0xa8>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 8027e0c:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 8027e10:	4628      	mov	r0, r5
 8027e12:	2100      	movs	r1, #0
 8027e14:	f7f9 fd42 	bl	802189c <mbedtls_mpi_cmp_int>
    if( is_priv &&
 8027e18:	2800      	cmp	r0, #0
 8027e1a:	dd38      	ble.n	8027e8e <rsa_check_context.isra.0+0xba>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 8027e1c:	4628      	mov	r0, r5
 8027e1e:	2100      	movs	r1, #0
 8027e20:	f7f9 fa36 	bl	8021290 <mbedtls_mpi_get_bit>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 8027e24:	b398      	cbz	r0, 8027e8e <rsa_check_context.isra.0+0xba>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 8027e26:	f104 0538 	add.w	r5, r4, #56	; 0x38
 8027e2a:	4628      	mov	r0, r5
 8027e2c:	2100      	movs	r1, #0
 8027e2e:	f7f9 fd35 	bl	802189c <mbedtls_mpi_cmp_int>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 8027e32:	2800      	cmp	r0, #0
 8027e34:	dd2b      	ble.n	8027e8e <rsa_check_context.isra.0+0xba>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
 8027e36:	4628      	mov	r0, r5
 8027e38:	2100      	movs	r1, #0
 8027e3a:	f7f9 fa29 	bl	8021290 <mbedtls_mpi_get_bit>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 8027e3e:	b330      	cbz	r0, 8027e8e <rsa_check_context.isra.0+0xba>
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
 8027e40:	2100      	movs	r1, #0
 8027e42:	f104 0014 	add.w	r0, r4, #20
 8027e46:	f7f9 fd29 	bl	802189c <mbedtls_mpi_cmp_int>
 8027e4a:	2800      	cmp	r0, #0
 8027e4c:	dd1f      	ble.n	8027e8e <rsa_check_context.isra.0+0xba>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 8027e4e:	2100      	movs	r1, #0
 8027e50:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8027e54:	f7f9 fd22 	bl	802189c <mbedtls_mpi_cmp_int>
    if( is_priv &&
 8027e58:	2800      	cmp	r0, #0
 8027e5a:	dd18      	ble.n	8027e8e <rsa_check_context.isra.0+0xba>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
 8027e5c:	2100      	movs	r1, #0
 8027e5e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8027e62:	f7f9 fd1b 	bl	802189c <mbedtls_mpi_cmp_int>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 8027e66:	2800      	cmp	r0, #0
 8027e68:	dd11      	ble.n	8027e8e <rsa_check_context.isra.0+0xba>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
 8027e6a:	2100      	movs	r1, #0
 8027e6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8027e70:	f7f9 fd14 	bl	802189c <mbedtls_mpi_cmp_int>
    if( is_priv &&
 8027e74:	2800      	cmp	r0, #0
 8027e76:	dd0a      	ble.n	8027e8e <rsa_check_context.isra.0+0xba>
    return( 0 );
 8027e78:	2000      	movs	r0, #0
}
 8027e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
 8027e7c:	4629      	mov	r1, r5
 8027e7e:	f104 0014 	add.w	r0, r4, #20
 8027e82:	f7f9 fd0b 	bl	802189c <mbedtls_mpi_cmp_int>
 8027e86:	2800      	cmp	r0, #0
 8027e88:	dd01      	ble.n	8027e8e <rsa_check_context.isra.0+0xba>
    return( 0 );
 8027e8a:	4628      	mov	r0, r5
}
 8027e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8027e8e:	4801      	ldr	r0, [pc, #4]	; (8027e94 <rsa_check_context.isra.0+0xc0>)
}
 8027e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027e92:	bf00      	nop
 8027e94:	ffffbf80 	.word	0xffffbf80

08027e98 <mbedtls_rsa_import>:
{
 8027e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027e9a:	4605      	mov	r5, r0
 8027e9c:	4616      	mov	r6, r2
 8027e9e:	461f      	mov	r7, r3
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
 8027ea0:	460c      	mov	r4, r1
 8027ea2:	b119      	cbz	r1, 8027eac <mbedtls_rsa_import+0x14>
 8027ea4:	3008      	adds	r0, #8
 8027ea6:	f7f9 f94f 	bl	8021148 <mbedtls_mpi_copy>
 8027eaa:	bb30      	cbnz	r0, 8027efa <mbedtls_rsa_import+0x62>
 8027eac:	b12e      	cbz	r6, 8027eba <mbedtls_rsa_import+0x22>
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
 8027eae:	4631      	mov	r1, r6
 8027eb0:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 8027eb4:	f7f9 f948 	bl	8021148 <mbedtls_mpi_copy>
 8027eb8:	b9f8      	cbnz	r0, 8027efa <mbedtls_rsa_import+0x62>
 8027eba:	b12f      	cbz	r7, 8027ec8 <mbedtls_rsa_import+0x30>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
 8027ebc:	4639      	mov	r1, r7
 8027ebe:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8027ec2:	f7f9 f941 	bl	8021148 <mbedtls_mpi_copy>
 8027ec6:	b9c0      	cbnz	r0, 8027efa <mbedtls_rsa_import+0x62>
 8027ec8:	9b06      	ldr	r3, [sp, #24]
 8027eca:	b12b      	cbz	r3, 8027ed8 <mbedtls_rsa_import+0x40>
 8027ecc:	4619      	mov	r1, r3
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
 8027ece:	f105 0020 	add.w	r0, r5, #32
 8027ed2:	f7f9 f939 	bl	8021148 <mbedtls_mpi_copy>
 8027ed6:	b980      	cbnz	r0, 8027efa <mbedtls_rsa_import+0x62>
 8027ed8:	9b07      	ldr	r3, [sp, #28]
 8027eda:	b12b      	cbz	r3, 8027ee8 <mbedtls_rsa_import+0x50>
 8027edc:	4619      	mov	r1, r3
        ( E != NULL && ( ret = mbedtls_mpi_copy( &ctx->E, E ) ) != 0 ) )
 8027ede:	f105 0014 	add.w	r0, r5, #20
 8027ee2:	f7f9 f931 	bl	8021148 <mbedtls_mpi_copy>
 8027ee6:	b940      	cbnz	r0, 8027efa <mbedtls_rsa_import+0x62>
    if( N != NULL )
 8027ee8:	b154      	cbz	r4, 8027f00 <mbedtls_rsa_import+0x68>
        ctx->len = mbedtls_mpi_size( &ctx->N );
 8027eea:	f105 0008 	add.w	r0, r5, #8
 8027eee:	f7f9 fa27 	bl	8021340 <mbedtls_mpi_size>
 8027ef2:	4603      	mov	r3, r0
    return( 0 );
 8027ef4:	2000      	movs	r0, #0
        ctx->len = mbedtls_mpi_size( &ctx->N );
 8027ef6:	606b      	str	r3, [r5, #4]
}
 8027ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 8027efa:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
}
 8027efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return( 0 );
 8027f00:	4620      	mov	r0, r4
}
 8027f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08027f04 <mbedtls_rsa_import_raw>:
{
 8027f04:	b570      	push	{r4, r5, r6, lr}
 8027f06:	4604      	mov	r4, r0
 8027f08:	461d      	mov	r5, r3
    if( N != NULL )
 8027f0a:	b161      	cbz	r1, 8027f26 <mbedtls_rsa_import_raw+0x22>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
 8027f0c:	f100 0608 	add.w	r6, r0, #8
 8027f10:	4630      	mov	r0, r6
 8027f12:	f7f9 fa41 	bl	8021398 <mbedtls_mpi_read_binary>
 8027f16:	b110      	cbz	r0, 8027f1e <mbedtls_rsa_import_raw+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 8027f18:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
}
 8027f1c:	bd70      	pop	{r4, r5, r6, pc}
        ctx->len = mbedtls_mpi_size( &ctx->N );
 8027f1e:	4630      	mov	r0, r6
 8027f20:	f7f9 fa0e 	bl	8021340 <mbedtls_mpi_size>
 8027f24:	6060      	str	r0, [r4, #4]
    if( P != NULL )
 8027f26:	b13d      	cbz	r5, 8027f38 <mbedtls_rsa_import_raw+0x34>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );
 8027f28:	4629      	mov	r1, r5
 8027f2a:	9a04      	ldr	r2, [sp, #16]
 8027f2c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8027f30:	f7f9 fa32 	bl	8021398 <mbedtls_mpi_read_binary>
 8027f34:	2800      	cmp	r0, #0
 8027f36:	d1ef      	bne.n	8027f18 <mbedtls_rsa_import_raw+0x14>
    if( Q != NULL )
 8027f38:	9b05      	ldr	r3, [sp, #20]
 8027f3a:	b13b      	cbz	r3, 8027f4c <mbedtls_rsa_import_raw+0x48>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->Q, Q, Q_len ) );
 8027f3c:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8027f40:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8027f44:	f7f9 fa28 	bl	8021398 <mbedtls_mpi_read_binary>
 8027f48:	2800      	cmp	r0, #0
 8027f4a:	d1e5      	bne.n	8027f18 <mbedtls_rsa_import_raw+0x14>
    if( D != NULL )
 8027f4c:	9b07      	ldr	r3, [sp, #28]
 8027f4e:	b13b      	cbz	r3, 8027f60 <mbedtls_rsa_import_raw+0x5c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->D, D, D_len ) );
 8027f50:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8027f54:	f104 0020 	add.w	r0, r4, #32
 8027f58:	f7f9 fa1e 	bl	8021398 <mbedtls_mpi_read_binary>
 8027f5c:	2800      	cmp	r0, #0
 8027f5e:	d1db      	bne.n	8027f18 <mbedtls_rsa_import_raw+0x14>
    if( E != NULL )
 8027f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027f62:	b13b      	cbz	r3, 8027f74 <mbedtls_rsa_import_raw+0x70>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );
 8027f64:	4619      	mov	r1, r3
 8027f66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027f68:	f104 0014 	add.w	r0, r4, #20
 8027f6c:	f7f9 fa14 	bl	8021398 <mbedtls_mpi_read_binary>
    if( ret != 0 )
 8027f70:	2800      	cmp	r0, #0
 8027f72:	d1d1      	bne.n	8027f18 <mbedtls_rsa_import_raw+0x14>
    return( 0 );
 8027f74:	2000      	movs	r0, #0
}
 8027f76:	bd70      	pop	{r4, r5, r6, pc}

08027f78 <mbedtls_rsa_complete>:
{
 8027f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 8027f7c:	f100 0808 	add.w	r8, r0, #8
{
 8027f80:	b08d      	sub	sp, #52	; 0x34
 8027f82:	4604      	mov	r4, r0
    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 8027f84:	2100      	movs	r1, #0
 8027f86:	4640      	mov	r0, r8
 8027f88:	f7f9 fc88 	bl	802189c <mbedtls_mpi_cmp_int>
 8027f8c:	4603      	mov	r3, r0
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 8027f8e:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 8027f92:	2100      	movs	r1, #0
 8027f94:	4628      	mov	r0, r5
    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 8027f96:	9304      	str	r3, [sp, #16]
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 8027f98:	f7f9 fc80 	bl	802189c <mbedtls_mpi_cmp_int>
 8027f9c:	4603      	mov	r3, r0
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 8027f9e:	f104 0638 	add.w	r6, r4, #56	; 0x38
 8027fa2:	2100      	movs	r1, #0
 8027fa4:	4630      	mov	r0, r6
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 8027fa6:	9303      	str	r3, [sp, #12]
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 8027fa8:	f7f9 fc78 	bl	802189c <mbedtls_mpi_cmp_int>
 8027fac:	4603      	mov	r3, r0
    have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 8027fae:	f104 0720 	add.w	r7, r4, #32
 8027fb2:	2100      	movs	r1, #0
 8027fb4:	4638      	mov	r0, r7
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 8027fb6:	9305      	str	r3, [sp, #20]
    have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 8027fb8:	f7f9 fc70 	bl	802189c <mbedtls_mpi_cmp_int>
 8027fbc:	4602      	mov	r2, r0
    have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 8027fbe:	f104 0314 	add.w	r3, r4, #20
 8027fc2:	4618      	mov	r0, r3
 8027fc4:	2100      	movs	r1, #0
 8027fc6:	9307      	str	r3, [sp, #28]
    have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 8027fc8:	9206      	str	r2, [sp, #24]
    have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 8027fca:	f7f9 fc67 	bl	802189c <mbedtls_mpi_cmp_int>
 8027fce:	4684      	mov	ip, r0
    have_DP = ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) != 0 );
 8027fd0:	f104 0944 	add.w	r9, r4, #68	; 0x44
 8027fd4:	2100      	movs	r1, #0
 8027fd6:	4648      	mov	r0, r9
    have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 8027fd8:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    have_DP = ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) != 0 );
 8027fdc:	f7f9 fc5e 	bl	802189c <mbedtls_mpi_cmp_int>
 8027fe0:	4684      	mov	ip, r0
    have_DQ = ( mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) != 0 );
 8027fe2:	f104 0a50 	add.w	sl, r4, #80	; 0x50
 8027fe6:	2100      	movs	r1, #0
 8027fe8:	4650      	mov	r0, sl
    have_DP = ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) != 0 );
 8027fea:	f8cd c020 	str.w	ip, [sp, #32]
    have_DQ = ( mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) != 0 );
 8027fee:	f7f9 fc55 	bl	802189c <mbedtls_mpi_cmp_int>
 8027ff2:	4684      	mov	ip, r0
    have_QP = ( mbedtls_mpi_cmp_int( &ctx->QP, 0 ) != 0 );
 8027ff4:	f104 0b5c 	add.w	fp, r4, #92	; 0x5c
 8027ff8:	2100      	movs	r1, #0
 8027ffa:	4658      	mov	r0, fp
    have_DQ = ( mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) != 0 );
 8027ffc:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    have_QP = ( mbedtls_mpi_cmp_int( &ctx->QP, 0 ) != 0 );
 8028000:	f7f9 fc4c 	bl	802189c <mbedtls_mpi_cmp_int>
    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 8028004:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8028008:	9903      	ldr	r1, [sp, #12]
    have_QP = ( mbedtls_mpi_cmp_int( &ctx->QP, 0 ) != 0 );
 802800a:	900b      	str	r0, [sp, #44]	; 0x2c
    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 802800c:	b159      	cbz	r1, 8028026 <mbedtls_rsa_complete+0xae>
 802800e:	9905      	ldr	r1, [sp, #20]
 8028010:	bb09      	cbnz	r1, 8028056 <mbedtls_rsa_complete+0xde>
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 8028012:	9904      	ldr	r1, [sp, #16]
 8028014:	2900      	cmp	r1, #0
 8028016:	d036      	beq.n	8028086 <mbedtls_rsa_complete+0x10e>
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
 8028018:	9905      	ldr	r1, [sp, #20]
 802801a:	2900      	cmp	r1, #0
 802801c:	d139      	bne.n	8028092 <mbedtls_rsa_complete+0x11a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 802801e:	4837      	ldr	r0, [pc, #220]	; (80280fc <mbedtls_rsa_complete+0x184>)
}
 8028020:	b00d      	add	sp, #52	; 0x34
 8028022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 8028026:	9904      	ldr	r1, [sp, #16]
 8028028:	2900      	cmp	r1, #0
 802802a:	d0f8      	beq.n	802801e <mbedtls_rsa_complete+0xa6>
 802802c:	9905      	ldr	r1, [sp, #20]
 802802e:	2900      	cmp	r1, #0
 8028030:	d1f5      	bne.n	802801e <mbedtls_rsa_complete+0xa6>
 8028032:	2a00      	cmp	r2, #0
 8028034:	d05e      	beq.n	80280f4 <mbedtls_rsa_complete+0x17c>
 8028036:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028038:	2a00      	cmp	r2, #0
 802803a:	d0f0      	beq.n	802801e <mbedtls_rsa_complete+0xa6>
        ret = mbedtls_rsa_deduce_primes( &ctx->N, &ctx->E, &ctx->D,
 802803c:	4619      	mov	r1, r3
 802803e:	4640      	mov	r0, r8
 8028040:	462b      	mov	r3, r5
 8028042:	463a      	mov	r2, r7
 8028044:	9600      	str	r6, [sp, #0]
 8028046:	f001 fc1f 	bl	8029888 <mbedtls_rsa_deduce_primes>
        if( ret != 0 )
 802804a:	b158      	cbz	r0, 8028064 <mbedtls_rsa_complete+0xec>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 802804c:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
}
 8028050:	b00d      	add	sp, #52	; 0x34
 8028052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 8028056:	2a00      	cmp	r2, #0
 8028058:	d0db      	beq.n	8028012 <mbedtls_rsa_complete+0x9a>
 802805a:	9909      	ldr	r1, [sp, #36]	; 0x24
 802805c:	2900      	cmp	r1, #0
 802805e:	d0d8      	beq.n	8028012 <mbedtls_rsa_complete+0x9a>
    is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
 8028060:	9a04      	ldr	r2, [sp, #16]
 8028062:	b30a      	cbz	r2, 80280a8 <mbedtls_rsa_complete+0x130>
    if( is_priv && ! ( have_DP && have_DQ && have_QP ) )
 8028064:	9b08      	ldr	r3, [sp, #32]
 8028066:	2b00      	cmp	r3, #0
 8028068:	d039      	beq.n	80280de <mbedtls_rsa_complete+0x166>
 802806a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802806c:	2b00      	cmp	r3, #0
 802806e:	d036      	beq.n	80280de <mbedtls_rsa_complete+0x166>
 8028070:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028072:	2b00      	cmp	r3, #0
 8028074:	d033      	beq.n	80280de <mbedtls_rsa_complete+0x166>
 8028076:	2201      	movs	r2, #1
    return( rsa_check_context( ctx, is_priv, 1 ) );
 8028078:	4611      	mov	r1, r2
 802807a:	4620      	mov	r0, r4
}
 802807c:	b00d      	add	sp, #52	; 0x34
 802807e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( rsa_check_context( ctx, is_priv, 1 ) );
 8028082:	f7ff bea7 	b.w	8027dd4 <rsa_check_context.isra.0>
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
 8028086:	9903      	ldr	r1, [sp, #12]
 8028088:	2900      	cmp	r1, #0
 802808a:	d0c8      	beq.n	802801e <mbedtls_rsa_complete+0xa6>
 802808c:	9905      	ldr	r1, [sp, #20]
 802808e:	2900      	cmp	r1, #0
 8028090:	d0c5      	beq.n	802801e <mbedtls_rsa_complete+0xa6>
 8028092:	2a00      	cmp	r2, #0
 8028094:	d1c3      	bne.n	802801e <mbedtls_rsa_complete+0xa6>
 8028096:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028098:	2a00      	cmp	r2, #0
 802809a:	d0c0      	beq.n	802801e <mbedtls_rsa_complete+0xa6>
    is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
 802809c:	9a04      	ldr	r2, [sp, #16]
 802809e:	b99a      	cbnz	r2, 80280c8 <mbedtls_rsa_complete+0x150>
    if( !have_N && have_P && have_Q )
 80280a0:	9a03      	ldr	r2, [sp, #12]
 80280a2:	b18a      	cbz	r2, 80280c8 <mbedtls_rsa_complete+0x150>
 80280a4:	2201      	movs	r2, #1
 80280a6:	9204      	str	r2, [sp, #16]
        if( ( ret = mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P,
 80280a8:	4632      	mov	r2, r6
 80280aa:	4629      	mov	r1, r5
 80280ac:	4640      	mov	r0, r8
 80280ae:	9303      	str	r3, [sp, #12]
 80280b0:	f7f9 fe30 	bl	8021d14 <mbedtls_mpi_mul_mpi>
 80280b4:	2800      	cmp	r0, #0
 80280b6:	d1c9      	bne.n	802804c <mbedtls_rsa_complete+0xd4>
        ctx->len = mbedtls_mpi_size( &ctx->N );
 80280b8:	4640      	mov	r0, r8
 80280ba:	f7f9 f941 	bl	8021340 <mbedtls_mpi_size>
    else if( d_missing )
 80280be:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
        ctx->len = mbedtls_mpi_size( &ctx->N );
 80280c2:	6060      	str	r0, [r4, #4]
    else if( d_missing )
 80280c4:	2a00      	cmp	r2, #0
 80280c6:	d0cd      	beq.n	8028064 <mbedtls_rsa_complete+0xec>
        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,
 80280c8:	461a      	mov	r2, r3
 80280ca:	4631      	mov	r1, r6
 80280cc:	463b      	mov	r3, r7
 80280ce:	4628      	mov	r0, r5
 80280d0:	f001 fcd4 	bl	8029a7c <mbedtls_rsa_deduce_private_exponent>
 80280d4:	2800      	cmp	r0, #0
 80280d6:	d1b9      	bne.n	802804c <mbedtls_rsa_complete+0xd4>
    if( is_priv && ! ( have_DP && have_DQ && have_QP ) )
 80280d8:	9b08      	ldr	r3, [sp, #32]
 80280da:	2b00      	cmp	r3, #0
 80280dc:	d1c5      	bne.n	802806a <mbedtls_rsa_complete+0xf2>
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
 80280de:	464b      	mov	r3, r9
 80280e0:	463a      	mov	r2, r7
 80280e2:	4631      	mov	r1, r6
 80280e4:	4628      	mov	r0, r5
 80280e6:	e9cd ab00 	strd	sl, fp, [sp]
 80280ea:	f001 fe9b 	bl	8029e24 <mbedtls_rsa_deduce_crt>
        if( ret != 0 )
 80280ee:	2800      	cmp	r0, #0
 80280f0:	d0c1      	beq.n	8028076 <mbedtls_rsa_complete+0xfe>
 80280f2:	e7ab      	b.n	802804c <mbedtls_rsa_complete+0xd4>
    is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
 80280f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80280f6:	2b00      	cmp	r3, #0
 80280f8:	d1be      	bne.n	8028078 <mbedtls_rsa_complete+0x100>
 80280fa:	e790      	b.n	802801e <mbedtls_rsa_complete+0xa6>
 80280fc:	ffffbf80 	.word	0xffffbf80

08028100 <mbedtls_rsa_init>:
{
 8028100:	b570      	push	{r4, r5, r6, lr}
 8028102:	460e      	mov	r6, r1
 8028104:	4615      	mov	r5, r2
 8028106:	4604      	mov	r4, r0
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
 8028108:	22ac      	movs	r2, #172	; 0xac
 802810a:	2100      	movs	r1, #0
 802810c:	f007 feab 	bl	802fe66 <memset>
    ctx->hash_id = hash_id;
 8028110:	e9c4 6529 	strd	r6, r5, [r4, #164]	; 0xa4
}
 8028114:	bd70      	pop	{r4, r5, r6, pc}
 8028116:	bf00      	nop

08028118 <mbedtls_rsa_get_len>:
}
 8028118:	6840      	ldr	r0, [r0, #4]
 802811a:	4770      	bx	lr

0802811c <mbedtls_rsa_check_pubkey>:
{
 802811c:	b570      	push	{r4, r5, r6, lr}
 802811e:	4604      	mov	r4, r0
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 8028120:	f100 0508 	add.w	r5, r0, #8
 8028124:	4628      	mov	r0, r5
 8028126:	6866      	ldr	r6, [r4, #4]
 8028128:	f7f9 f90a 	bl	8021340 <mbedtls_mpi_size>
 802812c:	4286      	cmp	r6, r0
 802812e:	d12d      	bne.n	802818c <mbedtls_rsa_check_pubkey+0x70>
 8028130:	6863      	ldr	r3, [r4, #4]
 8028132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8028136:	d829      	bhi.n	802818c <mbedtls_rsa_check_pubkey+0x70>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 8028138:	2100      	movs	r1, #0
 802813a:	4628      	mov	r0, r5
 802813c:	f7f9 fbae 	bl	802189c <mbedtls_mpi_cmp_int>
 8028140:	2800      	cmp	r0, #0
 8028142:	dd23      	ble.n	802818c <mbedtls_rsa_check_pubkey+0x70>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
 8028144:	2100      	movs	r1, #0
 8028146:	4628      	mov	r0, r5
 8028148:	f7f9 f8a2 	bl	8021290 <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 802814c:	b1f0      	cbz	r0, 802818c <mbedtls_rsa_check_pubkey+0x70>
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
 802814e:	3414      	adds	r4, #20
 8028150:	4620      	mov	r0, r4
 8028152:	2100      	movs	r1, #0
 8028154:	f7f9 fba2 	bl	802189c <mbedtls_mpi_cmp_int>
 8028158:	2800      	cmp	r0, #0
 802815a:	dd17      	ble.n	802818c <mbedtls_rsa_check_pubkey+0x70>
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
 802815c:	4628      	mov	r0, r5
 802815e:	f7f9 f8c9 	bl	80212f4 <mbedtls_mpi_bitlen>
 8028162:	287f      	cmp	r0, #127	; 0x7f
 8028164:	d912      	bls.n	802818c <mbedtls_rsa_check_pubkey+0x70>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 8028166:	2100      	movs	r1, #0
 8028168:	4620      	mov	r0, r4
 802816a:	f7f9 f891 	bl	8021290 <mbedtls_mpi_get_bit>
 802816e:	b168      	cbz	r0, 802818c <mbedtls_rsa_check_pubkey+0x70>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 8028170:	4620      	mov	r0, r4
 8028172:	f7f9 f8bf 	bl	80212f4 <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 8028176:	2801      	cmp	r0, #1
 8028178:	d908      	bls.n	802818c <mbedtls_rsa_check_pubkey+0x70>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
 802817a:	4629      	mov	r1, r5
 802817c:	4620      	mov	r0, r4
 802817e:	f7f9 fb39 	bl	80217f4 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 8028182:	2800      	cmp	r0, #0
    return( 0 );
 8028184:	bfb8      	it	lt
 8028186:	2000      	movlt	r0, #0
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 8028188:	da00      	bge.n	802818c <mbedtls_rsa_check_pubkey+0x70>
}
 802818a:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 802818c:	4800      	ldr	r0, [pc, #0]	; (8028190 <mbedtls_rsa_check_pubkey+0x74>)
}
 802818e:	bd70      	pop	{r4, r5, r6, pc}
 8028190:	ffffbe00 	.word	0xffffbe00

08028194 <mbedtls_rsa_check_privkey>:
{
 8028194:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8028198:	4604      	mov	r4, r0
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 802819a:	f100 0508 	add.w	r5, r0, #8
 802819e:	4628      	mov	r0, r5
{
 80281a0:	b085      	sub	sp, #20
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 80281a2:	6866      	ldr	r6, [r4, #4]
 80281a4:	f7f9 f8cc 	bl	8021340 <mbedtls_mpi_size>
 80281a8:	4286      	cmp	r6, r0
 80281aa:	d153      	bne.n	8028254 <mbedtls_rsa_check_privkey+0xc0>
 80281ac:	6863      	ldr	r3, [r4, #4]
 80281ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80281b2:	d84f      	bhi.n	8028254 <mbedtls_rsa_check_privkey+0xc0>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 80281b4:	2100      	movs	r1, #0
 80281b6:	4628      	mov	r0, r5
 80281b8:	f7f9 fb70 	bl	802189c <mbedtls_mpi_cmp_int>
 80281bc:	2800      	cmp	r0, #0
 80281be:	dd49      	ble.n	8028254 <mbedtls_rsa_check_privkey+0xc0>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
 80281c0:	2100      	movs	r1, #0
 80281c2:	4628      	mov	r0, r5
 80281c4:	f7f9 f864 	bl	8021290 <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 80281c8:	2800      	cmp	r0, #0
 80281ca:	d043      	beq.n	8028254 <mbedtls_rsa_check_privkey+0xc0>
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
 80281cc:	f104 0614 	add.w	r6, r4, #20
 80281d0:	4630      	mov	r0, r6
 80281d2:	2100      	movs	r1, #0
 80281d4:	f7f9 fb62 	bl	802189c <mbedtls_mpi_cmp_int>
 80281d8:	2800      	cmp	r0, #0
 80281da:	dd3b      	ble.n	8028254 <mbedtls_rsa_check_privkey+0xc0>
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
 80281dc:	4628      	mov	r0, r5
 80281de:	f7f9 f889 	bl	80212f4 <mbedtls_mpi_bitlen>
 80281e2:	287f      	cmp	r0, #127	; 0x7f
 80281e4:	d936      	bls.n	8028254 <mbedtls_rsa_check_privkey+0xc0>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 80281e6:	2100      	movs	r1, #0
 80281e8:	4630      	mov	r0, r6
 80281ea:	f7f9 f851 	bl	8021290 <mbedtls_mpi_get_bit>
 80281ee:	b388      	cbz	r0, 8028254 <mbedtls_rsa_check_privkey+0xc0>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 80281f0:	4630      	mov	r0, r6
 80281f2:	f7f9 f87f 	bl	80212f4 <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 80281f6:	2801      	cmp	r0, #1
 80281f8:	d92c      	bls.n	8028254 <mbedtls_rsa_check_privkey+0xc0>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
 80281fa:	4629      	mov	r1, r5
 80281fc:	4630      	mov	r0, r6
 80281fe:	f7f9 faf9 	bl	80217f4 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 8028202:	2800      	cmp	r0, #0
 8028204:	da26      	bge.n	8028254 <mbedtls_rsa_check_privkey+0xc0>
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
 8028206:	2101      	movs	r1, #1
 8028208:	4620      	mov	r0, r4
 802820a:	f7ff fde3 	bl	8027dd4 <rsa_check_context.isra.0>
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 802820e:	bb08      	cbnz	r0, 8028254 <mbedtls_rsa_check_privkey+0xc0>
    if( mbedtls_rsa_validate_params( &ctx->N, &ctx->P, &ctx->Q,
 8028210:	2200      	movs	r2, #0
 8028212:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 8028216:	f104 0838 	add.w	r8, r4, #56	; 0x38
 802821a:	f104 0920 	add.w	r9, r4, #32
 802821e:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8028222:	4628      	mov	r0, r5
 8028224:	4639      	mov	r1, r7
 8028226:	4642      	mov	r2, r8
 8028228:	464b      	mov	r3, r9
 802822a:	9600      	str	r6, [sp, #0]
 802822c:	f001 fd08 	bl	8029c40 <mbedtls_rsa_validate_params>
 8028230:	b980      	cbnz	r0, 8028254 <mbedtls_rsa_check_privkey+0xc0>
    else if( mbedtls_rsa_validate_crt( &ctx->P, &ctx->Q, &ctx->D,
 8028232:	f104 0350 	add.w	r3, r4, #80	; 0x50
 8028236:	f104 055c 	add.w	r5, r4, #92	; 0x5c
 802823a:	e9cd 3500 	strd	r3, r5, [sp]
 802823e:	464a      	mov	r2, r9
 8028240:	4641      	mov	r1, r8
 8028242:	4638      	mov	r0, r7
 8028244:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028248:	f001 fc7c 	bl	8029b44 <mbedtls_rsa_validate_crt>
 802824c:	b910      	cbnz	r0, 8028254 <mbedtls_rsa_check_privkey+0xc0>
}
 802824e:	b005      	add	sp, #20
 8028250:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 8028254:	4801      	ldr	r0, [pc, #4]	; (802825c <mbedtls_rsa_check_privkey+0xc8>)
}
 8028256:	b005      	add	sp, #20
 8028258:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802825c:	ffffbe00 	.word	0xffffbe00

08028260 <mbedtls_rsa_check_pub_priv>:
{
 8028260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028262:	4604      	mov	r4, r0
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 8028264:	f100 0508 	add.w	r5, r0, #8
 8028268:	4628      	mov	r0, r5
 802826a:	6867      	ldr	r7, [r4, #4]
{
 802826c:	460e      	mov	r6, r1
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 802826e:	f7f9 f867 	bl	8021340 <mbedtls_mpi_size>
 8028272:	4287      	cmp	r7, r0
 8028274:	d13b      	bne.n	80282ee <mbedtls_rsa_check_pub_priv+0x8e>
 8028276:	6863      	ldr	r3, [r4, #4]
 8028278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802827c:	d837      	bhi.n	80282ee <mbedtls_rsa_check_pub_priv+0x8e>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 802827e:	2100      	movs	r1, #0
 8028280:	4628      	mov	r0, r5
 8028282:	f7f9 fb0b 	bl	802189c <mbedtls_mpi_cmp_int>
 8028286:	2800      	cmp	r0, #0
 8028288:	dd31      	ble.n	80282ee <mbedtls_rsa_check_pub_priv+0x8e>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
 802828a:	2100      	movs	r1, #0
 802828c:	4628      	mov	r0, r5
 802828e:	f7f8 ffff 	bl	8021290 <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 8028292:	b360      	cbz	r0, 80282ee <mbedtls_rsa_check_pub_priv+0x8e>
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
 8028294:	3414      	adds	r4, #20
 8028296:	4620      	mov	r0, r4
 8028298:	2100      	movs	r1, #0
 802829a:	f7f9 faff 	bl	802189c <mbedtls_mpi_cmp_int>
 802829e:	2800      	cmp	r0, #0
 80282a0:	dd25      	ble.n	80282ee <mbedtls_rsa_check_pub_priv+0x8e>
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
 80282a2:	4628      	mov	r0, r5
 80282a4:	f7f9 f826 	bl	80212f4 <mbedtls_mpi_bitlen>
 80282a8:	287f      	cmp	r0, #127	; 0x7f
 80282aa:	d920      	bls.n	80282ee <mbedtls_rsa_check_pub_priv+0x8e>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 80282ac:	2100      	movs	r1, #0
 80282ae:	4620      	mov	r0, r4
 80282b0:	f7f8 ffee 	bl	8021290 <mbedtls_mpi_get_bit>
 80282b4:	b1d8      	cbz	r0, 80282ee <mbedtls_rsa_check_pub_priv+0x8e>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 80282b6:	4620      	mov	r0, r4
 80282b8:	f7f9 f81c 	bl	80212f4 <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 80282bc:	2801      	cmp	r0, #1
 80282be:	d916      	bls.n	80282ee <mbedtls_rsa_check_pub_priv+0x8e>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
 80282c0:	4629      	mov	r1, r5
 80282c2:	4620      	mov	r0, r4
 80282c4:	f7f9 fa96 	bl	80217f4 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 80282c8:	2800      	cmp	r0, #0
 80282ca:	da10      	bge.n	80282ee <mbedtls_rsa_check_pub_priv+0x8e>
        mbedtls_rsa_check_privkey( prv ) != 0 )
 80282cc:	4630      	mov	r0, r6
 80282ce:	f7ff ff61 	bl	8028194 <mbedtls_rsa_check_privkey>
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 80282d2:	b960      	cbnz	r0, 80282ee <mbedtls_rsa_check_pub_priv+0x8e>
    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 80282d4:	4628      	mov	r0, r5
 80282d6:	f106 0108 	add.w	r1, r6, #8
 80282da:	f7f9 fa8b 	bl	80217f4 <mbedtls_mpi_cmp_mpi>
 80282de:	b930      	cbnz	r0, 80282ee <mbedtls_rsa_check_pub_priv+0x8e>
        mbedtls_mpi_cmp_mpi( &pub->E, &prv->E ) != 0 )
 80282e0:	4620      	mov	r0, r4
 80282e2:	f106 0114 	add.w	r1, r6, #20
 80282e6:	f7f9 fa85 	bl	80217f4 <mbedtls_mpi_cmp_mpi>
    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 80282ea:	b900      	cbnz	r0, 80282ee <mbedtls_rsa_check_pub_priv+0x8e>
}
 80282ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 80282ee:	4801      	ldr	r0, [pc, #4]	; (80282f4 <mbedtls_rsa_check_pub_priv+0x94>)
}
 80282f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80282f2:	bf00      	nop
 80282f4:	ffffbe00 	.word	0xffffbe00

080282f8 <mbedtls_rsa_public>:
{
 80282f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80282fc:	4605      	mov	r5, r0
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 80282fe:	f100 0608 	add.w	r6, r0, #8
 8028302:	4630      	mov	r0, r6
{
 8028304:	b087      	sub	sp, #28
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 8028306:	686c      	ldr	r4, [r5, #4]
{
 8028308:	4689      	mov	r9, r1
 802830a:	4617      	mov	r7, r2
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 802830c:	f7f9 f818 	bl	8021340 <mbedtls_mpi_size>
 8028310:	4284      	cmp	r4, r0
 8028312:	d154      	bne.n	80283be <mbedtls_rsa_public+0xc6>
 8028314:	686b      	ldr	r3, [r5, #4]
 8028316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802831a:	d850      	bhi.n	80283be <mbedtls_rsa_public+0xc6>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 802831c:	2100      	movs	r1, #0
 802831e:	4630      	mov	r0, r6
 8028320:	f7f9 fabc 	bl	802189c <mbedtls_mpi_cmp_int>
 8028324:	2800      	cmp	r0, #0
 8028326:	dd4a      	ble.n	80283be <mbedtls_rsa_public+0xc6>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
 8028328:	2100      	movs	r1, #0
 802832a:	4630      	mov	r0, r6
 802832c:	f7f8 ffb0 	bl	8021290 <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 8028330:	2800      	cmp	r0, #0
 8028332:	d044      	beq.n	80283be <mbedtls_rsa_public+0xc6>
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
 8028334:	f105 0814 	add.w	r8, r5, #20
 8028338:	4640      	mov	r0, r8
 802833a:	2100      	movs	r1, #0
 802833c:	f7f9 faae 	bl	802189c <mbedtls_mpi_cmp_int>
 8028340:	2800      	cmp	r0, #0
 8028342:	dd3c      	ble.n	80283be <mbedtls_rsa_public+0xc6>
    mbedtls_mpi_init( &T );
 8028344:	a803      	add	r0, sp, #12
 8028346:	f7f8 fee5 	bl	8021114 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 802834a:	4649      	mov	r1, r9
 802834c:	686a      	ldr	r2, [r5, #4]
 802834e:	a803      	add	r0, sp, #12
 8028350:	f7f9 f822 	bl	8021398 <mbedtls_mpi_read_binary>
 8028354:	4604      	mov	r4, r0
 8028356:	b140      	cbz	r0, 802836a <mbedtls_rsa_public+0x72>
    mbedtls_mpi_free( &T );
 8028358:	a803      	add	r0, sp, #12
 802835a:	f7f8 fee1 	bl	8021120 <mbedtls_mpi_free>
    if( ret != 0 )
 802835e:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280
}
 8028362:	4620      	mov	r0, r4
 8028364:	b007      	add	sp, #28
 8028366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 802836a:	4631      	mov	r1, r6
 802836c:	a803      	add	r0, sp, #12
 802836e:	f7f9 fa41 	bl	80217f4 <mbedtls_mpi_cmp_mpi>
 8028372:	2800      	cmp	r0, #0
 8028374:	db07      	blt.n	8028386 <mbedtls_rsa_public+0x8e>
    mbedtls_mpi_free( &T );
 8028376:	4c13      	ldr	r4, [pc, #76]	; (80283c4 <mbedtls_rsa_public+0xcc>)
 8028378:	a803      	add	r0, sp, #12
 802837a:	f7f8 fed1 	bl	8021120 <mbedtls_mpi_free>
}
 802837e:	4620      	mov	r0, r4
 8028380:	b007      	add	sp, #28
 8028382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 8028386:	f105 0168 	add.w	r1, r5, #104	; 0x68
 802838a:	9100      	str	r1, [sp, #0]
 802838c:	a903      	add	r1, sp, #12
 802838e:	4633      	mov	r3, r6
 8028390:	4642      	mov	r2, r8
 8028392:	4608      	mov	r0, r1
    olen = ctx->len;
 8028394:	686d      	ldr	r5, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 8028396:	f7fa f955 	bl	8022644 <mbedtls_mpi_exp_mod>
 802839a:	4604      	mov	r4, r0
 802839c:	2800      	cmp	r0, #0
 802839e:	d1db      	bne.n	8028358 <mbedtls_rsa_public+0x60>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 80283a0:	462a      	mov	r2, r5
 80283a2:	4639      	mov	r1, r7
 80283a4:	a803      	add	r0, sp, #12
 80283a6:	f7f9 f873 	bl	8021490 <mbedtls_mpi_write_binary>
 80283aa:	4604      	mov	r4, r0
    mbedtls_mpi_free( &T );
 80283ac:	a803      	add	r0, sp, #12
 80283ae:	f7f8 feb7 	bl	8021120 <mbedtls_mpi_free>
    if( ret != 0 )
 80283b2:	2c00      	cmp	r4, #0
 80283b4:	d1d3      	bne.n	802835e <mbedtls_rsa_public+0x66>
}
 80283b6:	4620      	mov	r0, r4
 80283b8:	b007      	add	sp, #28
 80283ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80283be:	4c02      	ldr	r4, [pc, #8]	; (80283c8 <mbedtls_rsa_public+0xd0>)
 80283c0:	e7cf      	b.n	8028362 <mbedtls_rsa_public+0x6a>
 80283c2:	bf00      	nop
 80283c4:	ffffbd7c 	.word	0xffffbd7c
 80283c8:	ffffbf80 	.word	0xffffbf80

080283cc <mbedtls_rsa_private>:
{
 80283cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80283d0:	ed2d 8b08 	vpush	{d8-d11}
 80283d4:	468a      	mov	sl, r1
 80283d6:	b0a9      	sub	sp, #164	; 0xa4
    if( rsa_check_context( ctx, 1             /* private key checks */,
 80283d8:	2101      	movs	r1, #1
{
 80283da:	461d      	mov	r5, r3
 80283dc:	4604      	mov	r4, r0
 80283de:	9202      	str	r2, [sp, #8]
    if( rsa_check_context( ctx, 1             /* private key checks */,
 80283e0:	f7ff fcf8 	bl	8027dd4 <rsa_check_context.isra.0>
 80283e4:	2800      	cmp	r0, #0
 80283e6:	f040 82b8 	bne.w	802895a <mbedtls_rsa_private+0x58e>
    mbedtls_mpi_init( &T );
 80283ea:	a807      	add	r0, sp, #28
 80283ec:	f7f8 fe92 	bl	8021114 <mbedtls_mpi_init>
    mbedtls_mpi_init( &P1 );
 80283f0:	a80a      	add	r0, sp, #40	; 0x28
 80283f2:	f7f8 fe8f 	bl	8021114 <mbedtls_mpi_init>
    mbedtls_mpi_init( &Q1 );
 80283f6:	a80d      	add	r0, sp, #52	; 0x34
 80283f8:	f7f8 fe8c 	bl	8021114 <mbedtls_mpi_init>
    mbedtls_mpi_init( &R );
 80283fc:	a810      	add	r0, sp, #64	; 0x40
 80283fe:	f7f8 fe89 	bl	8021114 <mbedtls_mpi_init>
    if( f_rng != NULL )
 8028402:	f1ba 0f00 	cmp.w	sl, #0
 8028406:	d060      	beq.n	80284ca <mbedtls_rsa_private+0xfe>
        mbedtls_mpi_init( &DP_blind );
 8028408:	ab19      	add	r3, sp, #100	; 0x64
 802840a:	4618      	mov	r0, r3
        mbedtls_mpi_init( &DQ_blind );
 802840c:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
        mbedtls_mpi_init( &DP_blind );
 8028410:	ee09 3a10 	vmov	s18, r3
    mbedtls_mpi_init( &TP ); mbedtls_mpi_init( &TQ );
 8028414:	af13      	add	r7, sp, #76	; 0x4c
        mbedtls_mpi_init( &DP_blind );
 8028416:	f7f8 fe7d 	bl	8021114 <mbedtls_mpi_init>
        mbedtls_mpi_init( &DQ_blind );
 802841a:	4658      	mov	r0, fp
 802841c:	f7f8 fe7a 	bl	8021114 <mbedtls_mpi_init>
    mbedtls_mpi_init( &TP ); mbedtls_mpi_init( &TQ );
 8028420:	f10d 0858 	add.w	r8, sp, #88	; 0x58
 8028424:	4638      	mov	r0, r7
 8028426:	f7f8 fe75 	bl	8021114 <mbedtls_mpi_init>
    mbedtls_mpi_init( &I );
 802842a:	ae1f      	add	r6, sp, #124	; 0x7c
    mbedtls_mpi_init( &TP ); mbedtls_mpi_init( &TQ );
 802842c:	4640      	mov	r0, r8
 802842e:	f7f8 fe71 	bl	8021114 <mbedtls_mpi_init>
    mbedtls_mpi_init( &C );
 8028432:	f10d 0988 	add.w	r9, sp, #136	; 0x88
    mbedtls_mpi_init( &I );
 8028436:	4630      	mov	r0, r6
 8028438:	f7f8 fe6c 	bl	8021114 <mbedtls_mpi_init>
    mbedtls_mpi_init( &C );
 802843c:	4648      	mov	r0, r9
 802843e:	f7f8 fe69 	bl	8021114 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 8028442:	4629      	mov	r1, r5
 8028444:	6862      	ldr	r2, [r4, #4]
 8028446:	a807      	add	r0, sp, #28
 8028448:	f7f8 ffa6 	bl	8021398 <mbedtls_mpi_read_binary>
 802844c:	4605      	mov	r5, r0
 802844e:	b330      	cbz	r0, 802849e <mbedtls_rsa_private+0xd2>
    mbedtls_mpi_free( &P1 );
 8028450:	a80a      	add	r0, sp, #40	; 0x28
 8028452:	f7f8 fe65 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 8028456:	a80d      	add	r0, sp, #52	; 0x34
 8028458:	f7f8 fe62 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 802845c:	a810      	add	r0, sp, #64	; 0x40
 802845e:	f7f8 fe5f 	bl	8021120 <mbedtls_mpi_free>
        mbedtls_mpi_free( &DP_blind );
 8028462:	ee19 0a10 	vmov	r0, s18
 8028466:	f7f8 fe5b 	bl	8021120 <mbedtls_mpi_free>
        mbedtls_mpi_free( &DQ_blind );
 802846a:	4658      	mov	r0, fp
 802846c:	f7f8 fe58 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
 8028470:	a807      	add	r0, sp, #28
 8028472:	f7f8 fe55 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &TP ); mbedtls_mpi_free( &TQ );
 8028476:	4638      	mov	r0, r7
 8028478:	f7f8 fe52 	bl	8021120 <mbedtls_mpi_free>
 802847c:	4640      	mov	r0, r8
 802847e:	f7f8 fe4f 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &C );
 8028482:	4648      	mov	r0, r9
 8028484:	f7f8 fe4c 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &I );
 8028488:	4630      	mov	r0, r6
 802848a:	f7f8 fe49 	bl	8021120 <mbedtls_mpi_free>
    if( ret != 0 )
 802848e:	2d00      	cmp	r5, #0
 8028490:	d170      	bne.n	8028574 <mbedtls_rsa_private+0x1a8>
}
 8028492:	4628      	mov	r0, r5
 8028494:	b029      	add	sp, #164	; 0xa4
 8028496:	ecbd 8b08 	vpop	{d8-d11}
 802849a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 802849e:	f104 0308 	add.w	r3, r4, #8
 80284a2:	4619      	mov	r1, r3
 80284a4:	a807      	add	r0, sp, #28
 80284a6:	ee08 3a90 	vmov	s17, r3
 80284aa:	f7f9 f9a3 	bl	80217f4 <mbedtls_mpi_cmp_mpi>
 80284ae:	2800      	cmp	r0, #0
 80284b0:	db74      	blt.n	802859c <mbedtls_rsa_private+0x1d0>
    mbedtls_mpi_free( &P1 );
 80284b2:	a80a      	add	r0, sp, #40	; 0x28
 80284b4:	f7f8 fe34 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 80284b8:	a80d      	add	r0, sp, #52	; 0x34
 80284ba:	f7f8 fe31 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 80284be:	a810      	add	r0, sp, #64	; 0x40
 80284c0:	f7f8 fe2e 	bl	8021120 <mbedtls_mpi_free>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 80284c4:	f06f 0503 	mvn.w	r5, #3
 80284c8:	e7cb      	b.n	8028462 <mbedtls_rsa_private+0x96>
    mbedtls_mpi_init( &TP ); mbedtls_mpi_init( &TQ );
 80284ca:	af13      	add	r7, sp, #76	; 0x4c
 80284cc:	4638      	mov	r0, r7
 80284ce:	f10d 0858 	add.w	r8, sp, #88	; 0x58
 80284d2:	f7f8 fe1f 	bl	8021114 <mbedtls_mpi_init>
    mbedtls_mpi_init( &I );
 80284d6:	ae1f      	add	r6, sp, #124	; 0x7c
    mbedtls_mpi_init( &TP ); mbedtls_mpi_init( &TQ );
 80284d8:	4640      	mov	r0, r8
 80284da:	f7f8 fe1b 	bl	8021114 <mbedtls_mpi_init>
    mbedtls_mpi_init( &C );
 80284de:	f10d 0988 	add.w	r9, sp, #136	; 0x88
    mbedtls_mpi_init( &I );
 80284e2:	4630      	mov	r0, r6
 80284e4:	f7f8 fe16 	bl	8021114 <mbedtls_mpi_init>
    mbedtls_mpi_init( &C );
 80284e8:	4648      	mov	r0, r9
 80284ea:	f7f8 fe13 	bl	8021114 <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 80284ee:	4629      	mov	r1, r5
 80284f0:	6862      	ldr	r2, [r4, #4]
 80284f2:	a807      	add	r0, sp, #28
 80284f4:	f7f8 ff50 	bl	8021398 <mbedtls_mpi_read_binary>
 80284f8:	4605      	mov	r5, r0
 80284fa:	bb18      	cbnz	r0, 8028544 <mbedtls_rsa_private+0x178>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 80284fc:	f104 0308 	add.w	r3, r4, #8
 8028500:	4619      	mov	r1, r3
 8028502:	a807      	add	r0, sp, #28
 8028504:	ee08 3a90 	vmov	s17, r3
 8028508:	f7f9 f974 	bl	80217f4 <mbedtls_mpi_cmp_mpi>
 802850c:	2800      	cmp	r0, #0
 802850e:	da39      	bge.n	8028584 <mbedtls_rsa_private+0x1b8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );
 8028510:	4630      	mov	r0, r6
 8028512:	a907      	add	r1, sp, #28
 8028514:	f7f8 fe18 	bl	8021148 <mbedtls_mpi_copy>
 8028518:	4605      	mov	r5, r0
 802851a:	2800      	cmp	r0, #0
 802851c:	f000 81fa 	beq.w	8028914 <mbedtls_rsa_private+0x548>
    mbedtls_mpi_free( &P1 );
 8028520:	a80a      	add	r0, sp, #40	; 0x28
 8028522:	f7f8 fdfd 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 8028526:	a80d      	add	r0, sp, #52	; 0x34
 8028528:	f7f8 fdfa 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 802852c:	a810      	add	r0, sp, #64	; 0x40
 802852e:	f7f8 fdf7 	bl	8021120 <mbedtls_mpi_free>
    if( f_rng != NULL )
 8028532:	f1ba 0f00 	cmp.w	sl, #0
 8028536:	d00e      	beq.n	8028556 <mbedtls_rsa_private+0x18a>
 8028538:	ab19      	add	r3, sp, #100	; 0x64
 802853a:	ee09 3a10 	vmov	s18, r3
 802853e:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 8028542:	e78e      	b.n	8028462 <mbedtls_rsa_private+0x96>
    mbedtls_mpi_free( &P1 );
 8028544:	a80a      	add	r0, sp, #40	; 0x28
 8028546:	f7f8 fdeb 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 802854a:	a80d      	add	r0, sp, #52	; 0x34
 802854c:	f7f8 fde8 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 8028550:	a810      	add	r0, sp, #64	; 0x40
 8028552:	f7f8 fde5 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
 8028556:	a807      	add	r0, sp, #28
 8028558:	f7f8 fde2 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &TP ); mbedtls_mpi_free( &TQ );
 802855c:	4638      	mov	r0, r7
 802855e:	f7f8 fddf 	bl	8021120 <mbedtls_mpi_free>
 8028562:	4640      	mov	r0, r8
 8028564:	f7f8 fddc 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &C );
 8028568:	4648      	mov	r0, r9
 802856a:	f7f8 fdd9 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &I );
 802856e:	4630      	mov	r0, r6
 8028570:	f7f8 fdd6 	bl	8021120 <mbedtls_mpi_free>
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );
 8028574:	f5a5 4586 	sub.w	r5, r5, #17152	; 0x4300
}
 8028578:	4628      	mov	r0, r5
 802857a:	b029      	add	sp, #164	; 0xa4
 802857c:	ecbd 8b08 	vpop	{d8-d11}
 8028580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mbedtls_mpi_free( &P1 );
 8028584:	a80a      	add	r0, sp, #40	; 0x28
 8028586:	f7f8 fdcb 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 802858a:	a80d      	add	r0, sp, #52	; 0x34
 802858c:	f7f8 fdc8 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 8028590:	a810      	add	r0, sp, #64	; 0x40
 8028592:	f7f8 fdc5 	bl	8021120 <mbedtls_mpi_free>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 8028596:	f06f 0503 	mvn.w	r5, #3
 802859a:	e7dc      	b.n	8028556 <mbedtls_rsa_private+0x18a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );
 802859c:	4630      	mov	r0, r6
 802859e:	a907      	add	r1, sp, #28
 80285a0:	f7f8 fdd2 	bl	8021148 <mbedtls_mpi_copy>
 80285a4:	4605      	mov	r5, r0
 80285a6:	2800      	cmp	r0, #0
 80285a8:	d1ba      	bne.n	8028520 <mbedtls_rsa_private+0x154>
    mbedtls_mpi_init( &R );
 80285aa:	a825      	add	r0, sp, #148	; 0x94
 80285ac:	f7f8 fdb2 	bl	8021114 <mbedtls_mpi_init>
    mbedtls_mpi *DP = &ctx->DP;
 80285b0:	f104 0244 	add.w	r2, r4, #68	; 0x44
    if( ctx->Vf.p != NULL )
 80285b4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    mbedtls_mpi *DP = &ctx->DP;
 80285b8:	9203      	str	r2, [sp, #12]
    mbedtls_mpi *DQ = &ctx->DQ;
 80285ba:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80285be:	9204      	str	r2, [sp, #16]
    if( ctx->Vf.p != NULL )
 80285c0:	2b00      	cmp	r3, #0
 80285c2:	f000 8136 	beq.w	8028832 <mbedtls_rsa_private+0x466>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
 80285c6:	f104 038c 	add.w	r3, r4, #140	; 0x8c
 80285ca:	4619      	mov	r1, r3
 80285cc:	461a      	mov	r2, r3
 80285ce:	4618      	mov	r0, r3
 80285d0:	ee08 3a10 	vmov	s16, r3
 80285d4:	f7f9 fb9e 	bl	8021d14 <mbedtls_mpi_mul_mpi>
 80285d8:	4605      	mov	r5, r0
 80285da:	2800      	cmp	r0, #0
 80285dc:	f040 8125 	bne.w	802882a <mbedtls_rsa_private+0x45e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
 80285e0:	ee18 2a90 	vmov	r2, s17
 80285e4:	ee18 1a10 	vmov	r1, s16
 80285e8:	ee18 0a10 	vmov	r0, s16
 80285ec:	f7f9 ffa4 	bl	8022538 <mbedtls_mpi_mod_mpi>
 80285f0:	4605      	mov	r5, r0
 80285f2:	2800      	cmp	r0, #0
 80285f4:	f040 8119 	bne.w	802882a <mbedtls_rsa_private+0x45e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
 80285f8:	f104 0198 	add.w	r1, r4, #152	; 0x98
 80285fc:	460a      	mov	r2, r1
 80285fe:	4608      	mov	r0, r1
 8028600:	9105      	str	r1, [sp, #20]
 8028602:	f7f9 fb87 	bl	8021d14 <mbedtls_mpi_mul_mpi>
 8028606:	4605      	mov	r5, r0
 8028608:	2800      	cmp	r0, #0
 802860a:	f040 810e 	bne.w	802882a <mbedtls_rsa_private+0x45e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vf, &ctx->Vf, &ctx->N ) );
 802860e:	9905      	ldr	r1, [sp, #20]
 8028610:	ee18 2a90 	vmov	r2, s17
 8028614:	4608      	mov	r0, r1
 8028616:	f7f9 ff8f 	bl	8022538 <mbedtls_mpi_mod_mpi>
 802861a:	4605      	mov	r5, r0
 802861c:	2800      	cmp	r0, #0
 802861e:	f040 8104 	bne.w	802882a <mbedtls_rsa_private+0x45e>
    mbedtls_mpi_free( &R );
 8028622:	a825      	add	r0, sp, #148	; 0x94
 8028624:	f7f8 fd7c 	bl	8021120 <mbedtls_mpi_free>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );
 8028628:	a907      	add	r1, sp, #28
 802862a:	ee18 2a10 	vmov	r2, s16
 802862e:	4608      	mov	r0, r1
 8028630:	f7f9 fb70 	bl	8021d14 <mbedtls_mpi_mul_mpi>
 8028634:	4605      	mov	r5, r0
 8028636:	2800      	cmp	r0, #0
 8028638:	f47f af0a 	bne.w	8028450 <mbedtls_rsa_private+0x84>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 802863c:	a907      	add	r1, sp, #28
 802863e:	ee18 2a90 	vmov	r2, s17
 8028642:	4608      	mov	r0, r1
 8028644:	f7f9 ff78 	bl	8022538 <mbedtls_mpi_mod_mpi>
 8028648:	4605      	mov	r5, r0
 802864a:	2800      	cmp	r0, #0
 802864c:	f47f af00 	bne.w	8028450 <mbedtls_rsa_private+0x84>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
 8028650:	f104 032c 	add.w	r3, r4, #44	; 0x2c
 8028654:	4619      	mov	r1, r3
 8028656:	2201      	movs	r2, #1
 8028658:	a80a      	add	r0, sp, #40	; 0x28
 802865a:	ee09 3a90 	vmov	s19, r3
 802865e:	f7f9 fb0f 	bl	8021c80 <mbedtls_mpi_sub_int>
 8028662:	4605      	mov	r5, r0
 8028664:	2800      	cmp	r0, #0
 8028666:	f47f aef3 	bne.w	8028450 <mbedtls_rsa_private+0x84>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
 802866a:	f104 0338 	add.w	r3, r4, #56	; 0x38
 802866e:	4619      	mov	r1, r3
 8028670:	2201      	movs	r2, #1
 8028672:	a80d      	add	r0, sp, #52	; 0x34
 8028674:	ee0a 3a10 	vmov	s20, r3
 8028678:	f7f9 fb02 	bl	8021c80 <mbedtls_mpi_sub_int>
 802867c:	4605      	mov	r5, r0
 802867e:	2800      	cmp	r0, #0
 8028680:	f47f aee6 	bne.w	8028450 <mbedtls_rsa_private+0x84>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 8028684:	4652      	mov	r2, sl
 8028686:	211c      	movs	r1, #28
 8028688:	9b02      	ldr	r3, [sp, #8]
 802868a:	a810      	add	r0, sp, #64	; 0x40
 802868c:	f7fa fd74 	bl	8023178 <mbedtls_mpi_fill_random>
 8028690:	4605      	mov	r5, r0
 8028692:	2800      	cmp	r0, #0
 8028694:	f47f aedc 	bne.w	8028450 <mbedtls_rsa_private+0x84>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
 8028698:	ee19 0a10 	vmov	r0, s18
 802869c:	aa10      	add	r2, sp, #64	; 0x40
 802869e:	a90a      	add	r1, sp, #40	; 0x28
 80286a0:	f7f9 fb38 	bl	8021d14 <mbedtls_mpi_mul_mpi>
 80286a4:	4605      	mov	r5, r0
 80286a6:	2800      	cmp	r0, #0
 80286a8:	f47f aed2 	bne.w	8028450 <mbedtls_rsa_private+0x84>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
 80286ac:	ee19 1a10 	vmov	r1, s18
 80286b0:	ee19 0a10 	vmov	r0, s18
 80286b4:	9a03      	ldr	r2, [sp, #12]
 80286b6:	f7f9 fa47 	bl	8021b48 <mbedtls_mpi_add_mpi>
 80286ba:	4605      	mov	r5, r0
 80286bc:	2800      	cmp	r0, #0
 80286be:	f47f aec7 	bne.w	8028450 <mbedtls_rsa_private+0x84>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 80286c2:	4652      	mov	r2, sl
 80286c4:	211c      	movs	r1, #28
 80286c6:	9b02      	ldr	r3, [sp, #8]
 80286c8:	a810      	add	r0, sp, #64	; 0x40
 80286ca:	f7fa fd55 	bl	8023178 <mbedtls_mpi_fill_random>
 80286ce:	4605      	mov	r5, r0
 80286d0:	2800      	cmp	r0, #0
 80286d2:	f47f aebd 	bne.w	8028450 <mbedtls_rsa_private+0x84>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );
 80286d6:	4658      	mov	r0, fp
 80286d8:	aa10      	add	r2, sp, #64	; 0x40
 80286da:	a90d      	add	r1, sp, #52	; 0x34
 80286dc:	f7f9 fb1a 	bl	8021d14 <mbedtls_mpi_mul_mpi>
 80286e0:	4605      	mov	r5, r0
 80286e2:	2800      	cmp	r0, #0
 80286e4:	f47f aeb4 	bne.w	8028450 <mbedtls_rsa_private+0x84>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,
 80286e8:	4659      	mov	r1, fp
 80286ea:	4658      	mov	r0, fp
 80286ec:	9a04      	ldr	r2, [sp, #16]
 80286ee:	f7f9 fa2b 	bl	8021b48 <mbedtls_mpi_add_mpi>
 80286f2:	4605      	mov	r5, r0
 80286f4:	2800      	cmp	r0, #0
 80286f6:	f47f aeab 	bne.w	8028450 <mbedtls_rsa_private+0x84>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TP, &T, DP, &ctx->P, &ctx->RP ) );
 80286fa:	f104 0374 	add.w	r3, r4, #116	; 0x74
 80286fe:	9300      	str	r3, [sp, #0]
 8028700:	ee19 2a10 	vmov	r2, s18
 8028704:	ee19 3a90 	vmov	r3, s19
 8028708:	4638      	mov	r0, r7
 802870a:	a907      	add	r1, sp, #28
 802870c:	f7f9 ff9a 	bl	8022644 <mbedtls_mpi_exp_mod>
 8028710:	4605      	mov	r5, r0
 8028712:	2800      	cmp	r0, #0
 8028714:	f47f ae9c 	bne.w	8028450 <mbedtls_rsa_private+0x84>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TQ, &T, DQ, &ctx->Q, &ctx->RQ ) );
 8028718:	f104 0380 	add.w	r3, r4, #128	; 0x80
 802871c:	9300      	str	r3, [sp, #0]
 802871e:	465a      	mov	r2, fp
 8028720:	ee1a 3a10 	vmov	r3, s20
 8028724:	4640      	mov	r0, r8
 8028726:	a907      	add	r1, sp, #28
 8028728:	f7f9 ff8c 	bl	8022644 <mbedtls_mpi_exp_mod>
 802872c:	ee1a 3a10 	vmov	r3, s20
 8028730:	4605      	mov	r5, r0
 8028732:	2800      	cmp	r0, #0
 8028734:	f47f ae8c 	bne.w	8028450 <mbedtls_rsa_private+0x84>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &TP, &TQ ) );
 8028738:	4642      	mov	r2, r8
 802873a:	4639      	mov	r1, r7
 802873c:	a807      	add	r0, sp, #28
 802873e:	9302      	str	r3, [sp, #8]
 8028740:	f7f9 fa2a 	bl	8021b98 <mbedtls_mpi_sub_mpi>
 8028744:	4605      	mov	r5, r0
 8028746:	2800      	cmp	r0, #0
 8028748:	f47f aeea 	bne.w	8028520 <mbedtls_rsa_private+0x154>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->QP ) );
 802874c:	4638      	mov	r0, r7
 802874e:	f104 025c 	add.w	r2, r4, #92	; 0x5c
 8028752:	a907      	add	r1, sp, #28
 8028754:	f7f9 fade 	bl	8021d14 <mbedtls_mpi_mul_mpi>
 8028758:	4605      	mov	r5, r0
 802875a:	2800      	cmp	r0, #0
 802875c:	f47f aee0 	bne.w	8028520 <mbedtls_rsa_private+0x154>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &TP, &ctx->P ) );
 8028760:	ee19 2a90 	vmov	r2, s19
 8028764:	4639      	mov	r1, r7
 8028766:	a807      	add	r0, sp, #28
 8028768:	f7f9 fee6 	bl	8022538 <mbedtls_mpi_mod_mpi>
 802876c:	4605      	mov	r5, r0
 802876e:	2800      	cmp	r0, #0
 8028770:	f47f aed6 	bne.w	8028520 <mbedtls_rsa_private+0x154>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->Q ) );
 8028774:	9b02      	ldr	r3, [sp, #8]
 8028776:	4638      	mov	r0, r7
 8028778:	461a      	mov	r2, r3
 802877a:	a907      	add	r1, sp, #28
 802877c:	f7f9 faca 	bl	8021d14 <mbedtls_mpi_mul_mpi>
 8028780:	4605      	mov	r5, r0
 8028782:	2800      	cmp	r0, #0
 8028784:	f47f aecc 	bne.w	8028520 <mbedtls_rsa_private+0x154>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &TQ, &TP ) );
 8028788:	463a      	mov	r2, r7
 802878a:	4641      	mov	r1, r8
 802878c:	a807      	add	r0, sp, #28
 802878e:	f7f9 f9db 	bl	8021b48 <mbedtls_mpi_add_mpi>
 8028792:	4605      	mov	r5, r0
 8028794:	2800      	cmp	r0, #0
 8028796:	f47f aec3 	bne.w	8028520 <mbedtls_rsa_private+0x154>
    if( f_rng != NULL )
 802879a:	f1ba 0f00 	cmp.w	sl, #0
 802879e:	f000 80ee 	beq.w	802897e <mbedtls_rsa_private+0x5b2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
 80287a2:	a907      	add	r1, sp, #28
 80287a4:	4608      	mov	r0, r1
 80287a6:	f104 0298 	add.w	r2, r4, #152	; 0x98
 80287aa:	f7f9 fab3 	bl	8021d14 <mbedtls_mpi_mul_mpi>
 80287ae:	4605      	mov	r5, r0
 80287b0:	2800      	cmp	r0, #0
 80287b2:	f040 80de 	bne.w	8028972 <mbedtls_rsa_private+0x5a6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 80287b6:	a907      	add	r1, sp, #28
 80287b8:	ee18 2a90 	vmov	r2, s17
 80287bc:	4608      	mov	r0, r1
 80287be:	f7f9 febb 	bl	8022538 <mbedtls_mpi_mod_mpi>
 80287c2:	4605      	mov	r5, r0
 80287c4:	2800      	cmp	r0, #0
 80287c6:	f040 80d4 	bne.w	8028972 <mbedtls_rsa_private+0x5a6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
 80287ca:	f104 0268 	add.w	r2, r4, #104	; 0x68
 80287ce:	9200      	str	r2, [sp, #0]
 80287d0:	ee18 3a90 	vmov	r3, s17
 80287d4:	4648      	mov	r0, r9
 80287d6:	f104 0214 	add.w	r2, r4, #20
 80287da:	a907      	add	r1, sp, #28
 80287dc:	f7f9 ff32 	bl	8022644 <mbedtls_mpi_exp_mod>
 80287e0:	4605      	mov	r5, r0
 80287e2:	2800      	cmp	r0, #0
 80287e4:	f040 80f0 	bne.w	80289c8 <mbedtls_rsa_private+0x5fc>
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
 80287e8:	4631      	mov	r1, r6
 80287ea:	4648      	mov	r0, r9
 80287ec:	f7f9 f802 	bl	80217f4 <mbedtls_mpi_cmp_mpi>
 80287f0:	2800      	cmp	r0, #0
 80287f2:	f000 80e3 	beq.w	80289bc <mbedtls_rsa_private+0x5f0>
    mbedtls_mpi_free( &P1 );
 80287f6:	a80a      	add	r0, sp, #40	; 0x28
 80287f8:	f7f8 fc92 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 80287fc:	a80d      	add	r0, sp, #52	; 0x34
 80287fe:	f7f8 fc8f 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 8028802:	a810      	add	r0, sp, #64	; 0x40
 8028804:	f7f8 fc8c 	bl	8021120 <mbedtls_mpi_free>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 8028808:	4d7c      	ldr	r5, [pc, #496]	; (80289fc <mbedtls_rsa_private+0x630>)
 802880a:	e695      	b.n	8028538 <mbedtls_rsa_private+0x16c>
        if( ret != 0 && ret != MBEDTLS_ERR_MPI_NOT_ACCEPTABLE )
 802880c:	f110 0f0e 	cmn.w	r0, #14
 8028810:	f040 80a5 	bne.w	802895e <mbedtls_rsa_private+0x592>
        if( count++ > 10 )
 8028814:	3c01      	subs	r4, #1
 8028816:	d120      	bne.n	802885a <mbedtls_rsa_private+0x48e>
 8028818:	ee19 7a90 	vmov	r7, s19
 802881c:	ee1a 8a10 	vmov	r8, s20
 8028820:	ee1a 6a90 	vmov	r6, s21
 8028824:	ee1b 9a10 	vmov	r9, s22
            ret = MBEDTLS_ERR_RSA_RNG_FAILED;
 8028828:	4d75      	ldr	r5, [pc, #468]	; (8028a00 <mbedtls_rsa_private+0x634>)
    mbedtls_mpi_free( &R );
 802882a:	a825      	add	r0, sp, #148	; 0x94
 802882c:	f7f8 fc78 	bl	8021120 <mbedtls_mpi_free>
    return( ret );
 8028830:	e60e      	b.n	8028450 <mbedtls_rsa_private+0x84>
    if( ctx->Vf.p != NULL )
 8028832:	220b      	movs	r2, #11
 8028834:	f104 0398 	add.w	r3, r4, #152	; 0x98
 8028838:	ee0a 8a10 	vmov	s20, r8
 802883c:	ee0a 6a90 	vmov	s21, r6
 8028840:	ee0b 9a10 	vmov	s22, r9
 8028844:	4656      	mov	r6, sl
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vf, &R ) );
 8028846:	f104 058c 	add.w	r5, r4, #140	; 0x8c
 802884a:	46a2      	mov	sl, r4
 802884c:	4698      	mov	r8, r3
 802884e:	4614      	mov	r4, r2
 8028850:	ee18 9a90 	vmov	r9, s17
 8028854:	ee09 7a90 	vmov	s19, r7
 8028858:	9f02      	ldr	r7, [sp, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 802885a:	f8da 1004 	ldr.w	r1, [sl, #4]
 802885e:	463b      	mov	r3, r7
 8028860:	4632      	mov	r2, r6
 8028862:	4640      	mov	r0, r8
 8028864:	3901      	subs	r1, #1
 8028866:	f7fa fc87 	bl	8023178 <mbedtls_mpi_fill_random>
 802886a:	2800      	cmp	r0, #0
 802886c:	d177      	bne.n	802895e <mbedtls_rsa_private+0x592>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, ctx->len - 1, f_rng, p_rng ) );
 802886e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8028872:	463b      	mov	r3, r7
 8028874:	4632      	mov	r2, r6
 8028876:	3901      	subs	r1, #1
 8028878:	a825      	add	r0, sp, #148	; 0x94
 802887a:	f7fa fc7d 	bl	8023178 <mbedtls_mpi_fill_random>
 802887e:	2800      	cmp	r0, #0
 8028880:	d16d      	bne.n	802895e <mbedtls_rsa_private+0x592>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vf, &R ) );
 8028882:	4641      	mov	r1, r8
 8028884:	4628      	mov	r0, r5
 8028886:	aa25      	add	r2, sp, #148	; 0x94
 8028888:	f7f9 fa44 	bl	8021d14 <mbedtls_mpi_mul_mpi>
 802888c:	ee08 5a10 	vmov	s16, r5
 8028890:	2800      	cmp	r0, #0
 8028892:	d164      	bne.n	802895e <mbedtls_rsa_private+0x592>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
 8028894:	464a      	mov	r2, r9
 8028896:	4629      	mov	r1, r5
 8028898:	4628      	mov	r0, r5
 802889a:	f7f9 fe4d 	bl	8022538 <mbedtls_mpi_mod_mpi>
 802889e:	2800      	cmp	r0, #0
 80288a0:	d15d      	bne.n	802895e <mbedtls_rsa_private+0x592>
        ret = mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vi, &ctx->N );
 80288a2:	464a      	mov	r2, r9
 80288a4:	4629      	mov	r1, r5
 80288a6:	4628      	mov	r0, r5
 80288a8:	f7fa ff06 	bl	80236b8 <mbedtls_mpi_inv_mod>
        if( ret != 0 && ret != MBEDTLS_ERR_MPI_NOT_ACCEPTABLE )
 80288ac:	2800      	cmp	r0, #0
 80288ae:	d1ad      	bne.n	802880c <mbedtls_rsa_private+0x440>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &R ) );
 80288b0:	4629      	mov	r1, r5
 80288b2:	4628      	mov	r0, r5
 80288b4:	aa25      	add	r2, sp, #148	; 0x94
 80288b6:	f7f9 fa2d 	bl	8021d14 <mbedtls_mpi_mul_mpi>
 80288ba:	4654      	mov	r4, sl
 80288bc:	ee19 7a90 	vmov	r7, s19
 80288c0:	46b2      	mov	sl, r6
 80288c2:	ee1a 8a10 	vmov	r8, s20
 80288c6:	ee1a 6a90 	vmov	r6, s21
 80288ca:	ee1b 9a10 	vmov	r9, s22
 80288ce:	4605      	mov	r5, r0
 80288d0:	2800      	cmp	r0, #0
 80288d2:	d1aa      	bne.n	802882a <mbedtls_rsa_private+0x45e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
 80288d4:	ee18 2a90 	vmov	r2, s17
 80288d8:	ee18 1a10 	vmov	r1, s16
 80288dc:	ee18 0a10 	vmov	r0, s16
 80288e0:	f7f9 fe2a 	bl	8022538 <mbedtls_mpi_mod_mpi>
 80288e4:	4605      	mov	r5, r0
 80288e6:	2800      	cmp	r0, #0
 80288e8:	d19f      	bne.n	802882a <mbedtls_rsa_private+0x45e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
 80288ea:	f104 0368 	add.w	r3, r4, #104	; 0x68
 80288ee:	9300      	str	r3, [sp, #0]
 80288f0:	ee18 1a10 	vmov	r1, s16
 80288f4:	ee18 3a90 	vmov	r3, s17
 80288f8:	ee18 0a10 	vmov	r0, s16
 80288fc:	f104 0214 	add.w	r2, r4, #20
 8028900:	f7f9 fea0 	bl	8022644 <mbedtls_mpi_exp_mod>
 8028904:	4605      	mov	r5, r0
    mbedtls_mpi_free( &R );
 8028906:	a825      	add	r0, sp, #148	; 0x94
 8028908:	f7f8 fc0a 	bl	8021120 <mbedtls_mpi_free>
        MBEDTLS_MPI_CHK( rsa_prepare_blinding( ctx, f_rng, p_rng ) );
 802890c:	2d00      	cmp	r5, #0
 802890e:	f43f ae8b 	beq.w	8028628 <mbedtls_rsa_private+0x25c>
 8028912:	e59d      	b.n	8028450 <mbedtls_rsa_private+0x84>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TP, &T, DP, &ctx->P, &ctx->RP ) );
 8028914:	f104 0274 	add.w	r2, r4, #116	; 0x74
 8028918:	f104 032c 	add.w	r3, r4, #44	; 0x2c
 802891c:	9200      	str	r2, [sp, #0]
 802891e:	4638      	mov	r0, r7
 8028920:	f104 0244 	add.w	r2, r4, #68	; 0x44
 8028924:	a907      	add	r1, sp, #28
 8028926:	ee09 3a90 	vmov	s19, r3
 802892a:	f7f9 fe8b 	bl	8022644 <mbedtls_mpi_exp_mod>
    mbedtls_mpi *DQ = &ctx->DQ;
 802892e:	f104 0250 	add.w	r2, r4, #80	; 0x50
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TP, &T, DP, &ctx->P, &ctx->RP ) );
 8028932:	4605      	mov	r5, r0
 8028934:	2800      	cmp	r0, #0
 8028936:	f47f ae05 	bne.w	8028544 <mbedtls_rsa_private+0x178>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TQ, &T, DQ, &ctx->Q, &ctx->RQ ) );
 802893a:	f104 0080 	add.w	r0, r4, #128	; 0x80
 802893e:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8028942:	9000      	str	r0, [sp, #0]
 8028944:	a907      	add	r1, sp, #28
 8028946:	4640      	mov	r0, r8
 8028948:	9302      	str	r3, [sp, #8]
 802894a:	f7f9 fe7b 	bl	8022644 <mbedtls_mpi_exp_mod>
 802894e:	4605      	mov	r5, r0
 8028950:	2800      	cmp	r0, #0
 8028952:	f47f adf7 	bne.w	8028544 <mbedtls_rsa_private+0x178>
 8028956:	9b02      	ldr	r3, [sp, #8]
 8028958:	e6ee      	b.n	8028738 <mbedtls_rsa_private+0x36c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 802895a:	4d2a      	ldr	r5, [pc, #168]	; (8028a04 <mbedtls_rsa_private+0x638>)
 802895c:	e599      	b.n	8028492 <mbedtls_rsa_private+0xc6>
 802895e:	4605      	mov	r5, r0
 8028960:	ee19 7a90 	vmov	r7, s19
 8028964:	ee1a 8a10 	vmov	r8, s20
 8028968:	ee1a 6a90 	vmov	r6, s21
 802896c:	ee1b 9a10 	vmov	r9, s22
 8028970:	e75b      	b.n	802882a <mbedtls_rsa_private+0x45e>
 8028972:	ab19      	add	r3, sp, #100	; 0x64
 8028974:	ee09 3a10 	vmov	s18, r3
 8028978:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 802897c:	e568      	b.n	8028450 <mbedtls_rsa_private+0x84>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
 802897e:	f104 0268 	add.w	r2, r4, #104	; 0x68
 8028982:	9200      	str	r2, [sp, #0]
 8028984:	ee18 3a90 	vmov	r3, s17
 8028988:	4648      	mov	r0, r9
 802898a:	f104 0214 	add.w	r2, r4, #20
 802898e:	a907      	add	r1, sp, #28
 8028990:	f7f9 fe58 	bl	8022644 <mbedtls_mpi_exp_mod>
 8028994:	4605      	mov	r5, r0
 8028996:	2800      	cmp	r0, #0
 8028998:	f47f add4 	bne.w	8028544 <mbedtls_rsa_private+0x178>
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
 802899c:	4631      	mov	r1, r6
 802899e:	4648      	mov	r0, r9
 80289a0:	f7f8 ff28 	bl	80217f4 <mbedtls_mpi_cmp_mpi>
 80289a4:	b1d0      	cbz	r0, 80289dc <mbedtls_rsa_private+0x610>
    mbedtls_mpi_free( &P1 );
 80289a6:	a80a      	add	r0, sp, #40	; 0x28
 80289a8:	f7f8 fbba 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 80289ac:	a80d      	add	r0, sp, #52	; 0x34
 80289ae:	f7f8 fbb7 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 80289b2:	a810      	add	r0, sp, #64	; 0x40
 80289b4:	f7f8 fbb4 	bl	8021120 <mbedtls_mpi_free>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 80289b8:	4d10      	ldr	r5, [pc, #64]	; (80289fc <mbedtls_rsa_private+0x630>)
 80289ba:	e5cc      	b.n	8028556 <mbedtls_rsa_private+0x18a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 80289bc:	6862      	ldr	r2, [r4, #4]
 80289be:	993a      	ldr	r1, [sp, #232]	; 0xe8
 80289c0:	a807      	add	r0, sp, #28
 80289c2:	f7f8 fd65 	bl	8021490 <mbedtls_mpi_write_binary>
 80289c6:	4605      	mov	r5, r0
    mbedtls_mpi_free( &P1 );
 80289c8:	a80a      	add	r0, sp, #40	; 0x28
 80289ca:	f7f8 fba9 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 80289ce:	a80d      	add	r0, sp, #52	; 0x34
 80289d0:	f7f8 fba6 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 80289d4:	a810      	add	r0, sp, #64	; 0x40
 80289d6:	f7f8 fba3 	bl	8021120 <mbedtls_mpi_free>
 80289da:	e5ad      	b.n	8028538 <mbedtls_rsa_private+0x16c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 80289dc:	6862      	ldr	r2, [r4, #4]
 80289de:	993a      	ldr	r1, [sp, #232]	; 0xe8
 80289e0:	a807      	add	r0, sp, #28
 80289e2:	f7f8 fd55 	bl	8021490 <mbedtls_mpi_write_binary>
 80289e6:	4605      	mov	r5, r0
    mbedtls_mpi_free( &P1 );
 80289e8:	a80a      	add	r0, sp, #40	; 0x28
 80289ea:	f7f8 fb99 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 80289ee:	a80d      	add	r0, sp, #52	; 0x34
 80289f0:	f7f8 fb96 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 80289f4:	a810      	add	r0, sp, #64	; 0x40
 80289f6:	f7f8 fb93 	bl	8021120 <mbedtls_mpi_free>
    if( f_rng != NULL )
 80289fa:	e539      	b.n	8028470 <mbedtls_rsa_private+0xa4>
 80289fc:	ffffbc80 	.word	0xffffbc80
 8028a00:	ffffbb80 	.word	0xffffbb80
 8028a04:	ffffbf80 	.word	0xffffbf80

08028a08 <mbedtls_rsa_rsaes_oaep_encrypt>:
{
 8028a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8028a0c:	2b01      	cmp	r3, #1
{
 8028a0e:	469b      	mov	fp, r3
 8028a10:	4605      	mov	r5, r0
 8028a12:	460e      	mov	r6, r1
 8028a14:	4692      	mov	sl, r2
 8028a16:	b089      	sub	sp, #36	; 0x24
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8028a18:	d05a      	beq.n	8028ad0 <mbedtls_rsa_rsaes_oaep_encrypt+0xc8>
    if( f_rng == NULL )
 8028a1a:	2e00      	cmp	r6, #0
 8028a1c:	d05c      	beq.n	8028ad8 <mbedtls_rsa_rsaes_oaep_encrypt+0xd0>
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 8028a1e:	f895 00a8 	ldrb.w	r0, [r5, #168]	; 0xa8
 8028a22:	f7fd f915 	bl	8025c50 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8028a26:	4607      	mov	r7, r0
 8028a28:	2800      	cmp	r0, #0
 8028a2a:	d055      	beq.n	8028ad8 <mbedtls_rsa_rsaes_oaep_encrypt+0xd0>
    olen = ctx->len;
 8028a2c:	f8d5 9004 	ldr.w	r9, [r5, #4]
    hlen = mbedtls_md_get_size( md_info );
 8028a30:	f7fd fc00 	bl	8026234 <mbedtls_md_get_size>
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
 8028a34:	9b14      	ldr	r3, [sp, #80]	; 0x50
    hlen = mbedtls_md_get_size( md_info );
 8028a36:	4604      	mov	r4, r0
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
 8028a38:	b200      	sxth	r0, r0
 8028a3a:	0042      	lsls	r2, r0, #1
 8028a3c:	3302      	adds	r3, #2
 8028a3e:	9202      	str	r2, [sp, #8]
 8028a40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8028a42:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8028a46:	4293      	cmp	r3, r2
 8028a48:	d346      	bcc.n	8028ad8 <mbedtls_rsa_rsaes_oaep_encrypt+0xd0>
 8028a4a:	454b      	cmp	r3, r9
 8028a4c:	d844      	bhi.n	8028ad8 <mbedtls_rsa_rsaes_oaep_encrypt+0xd0>
    memset( output, 0, olen );
 8028a4e:	464a      	mov	r2, r9
 8028a50:	2100      	movs	r1, #0
 8028a52:	9816      	ldr	r0, [sp, #88]	; 0x58
 8028a54:	f007 fa07 	bl	802fe66 <memset>
    *p++ = 0;
 8028a58:	2300      	movs	r3, #0
 8028a5a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
    if( ( ret = f_rng( p_rng, p, hlen ) ) != 0 )
 8028a5e:	4622      	mov	r2, r4
    *p++ = 0;
 8028a60:	f808 3b01 	strb.w	r3, [r8], #1
    if( ( ret = f_rng( p_rng, p, hlen ) ) != 0 )
 8028a64:	4641      	mov	r1, r8
 8028a66:	4650      	mov	r0, sl
 8028a68:	47b0      	blx	r6
 8028a6a:	b128      	cbz	r0, 8028a78 <mbedtls_rsa_rsaes_oaep_encrypt+0x70>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 8028a6c:	f5a0 4289 	sub.w	r2, r0, #17536	; 0x4480
}
 8028a70:	4610      	mov	r0, r2
 8028a72:	b009      	add	sp, #36	; 0x24
 8028a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p += hlen;
 8028a78:	eb08 0304 	add.w	r3, r8, r4
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
 8028a7c:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
 8028a80:	4638      	mov	r0, r7
 8028a82:	9303      	str	r3, [sp, #12]
 8028a84:	f7fd f9be 	bl	8025e04 <mbedtls_md>
 8028a88:	4602      	mov	r2, r0
 8028a8a:	2800      	cmp	r0, #0
 8028a8c:	d1f0      	bne.n	8028a70 <mbedtls_rsa_rsaes_oaep_encrypt+0x68>
    *p++ = 1;
 8028a8e:	2201      	movs	r2, #1
    p += olen - 2 * hlen - 2 - ilen;
 8028a90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8028a92:	eba9 0003 	sub.w	r0, r9, r3
 8028a96:	3802      	subs	r0, #2
 8028a98:	9b02      	ldr	r3, [sp, #8]
 8028a9a:	4420      	add	r0, r4
 8028a9c:	1ac0      	subs	r0, r0, r3
    *p++ = 1;
 8028a9e:	9b03      	ldr	r3, [sp, #12]
 8028aa0:	541a      	strb	r2, [r3, r0]
    p += olen - 2 * hlen - 2 - ilen;
 8028aa2:	4418      	add	r0, r3
    if( ilen != 0 )
 8028aa4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8028aa6:	2b00      	cmp	r3, #0
 8028aa8:	d146      	bne.n	8028b38 <mbedtls_rsa_rsaes_oaep_encrypt+0x130>
    mbedtls_md_init( &md_ctx );
 8028aaa:	a805      	add	r0, sp, #20
 8028aac:	f7fd f8dc 	bl	8025c68 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 8028ab0:	2200      	movs	r2, #0
 8028ab2:	4639      	mov	r1, r7
 8028ab4:	a805      	add	r0, sp, #20
 8028ab6:	f7fd f927 	bl	8025d08 <mbedtls_md_setup>
 8028aba:	4602      	mov	r2, r0
 8028abc:	b170      	cbz	r0, 8028adc <mbedtls_rsa_rsaes_oaep_encrypt+0xd4>
    mbedtls_md_free( &md_ctx );
 8028abe:	a805      	add	r0, sp, #20
 8028ac0:	9202      	str	r2, [sp, #8]
 8028ac2:	f7fd f8d7 	bl	8025c74 <mbedtls_md_free>
 8028ac6:	9a02      	ldr	r2, [sp, #8]
}
 8028ac8:	4610      	mov	r0, r2
 8028aca:	b009      	add	sp, #36	; 0x24
 8028acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8028ad0:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8028ad4:	2b01      	cmp	r3, #1
 8028ad6:	d0a0      	beq.n	8028a1a <mbedtls_rsa_rsaes_oaep_encrypt+0x12>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8028ad8:	4a20      	ldr	r2, [pc, #128]	; (8028b5c <mbedtls_rsa_rsaes_oaep_encrypt+0x154>)
 8028ada:	e7c9      	b.n	8028a70 <mbedtls_rsa_rsaes_oaep_encrypt+0x68>
    if( ( ret = mgf_mask( output + hlen + 1, olen - hlen - 1, output + 1, hlen,
 8028adc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8028ade:	f109 39ff 	add.w	r9, r9, #4294967295
 8028ae2:	1c67      	adds	r7, r4, #1
 8028ae4:	441f      	add	r7, r3
 8028ae6:	eba9 0904 	sub.w	r9, r9, r4
 8028aea:	ab05      	add	r3, sp, #20
 8028aec:	4642      	mov	r2, r8
 8028aee:	9300      	str	r3, [sp, #0]
 8028af0:	4649      	mov	r1, r9
 8028af2:	4638      	mov	r0, r7
 8028af4:	4623      	mov	r3, r4
 8028af6:	f7ff f823 	bl	8027b40 <mgf_mask>
 8028afa:	4602      	mov	r2, r0
 8028afc:	2800      	cmp	r0, #0
 8028afe:	d1de      	bne.n	8028abe <mbedtls_rsa_rsaes_oaep_encrypt+0xb6>
    if( ( ret = mgf_mask( output + 1, hlen, output + hlen + 1, olen - hlen - 1,
 8028b00:	ab05      	add	r3, sp, #20
 8028b02:	463a      	mov	r2, r7
 8028b04:	4621      	mov	r1, r4
 8028b06:	9300      	str	r3, [sp, #0]
 8028b08:	4640      	mov	r0, r8
 8028b0a:	464b      	mov	r3, r9
 8028b0c:	f7ff f818 	bl	8027b40 <mgf_mask>
 8028b10:	9002      	str	r0, [sp, #8]
    mbedtls_md_free( &md_ctx );
 8028b12:	a805      	add	r0, sp, #20
 8028b14:	f7fd f8ae 	bl	8025c74 <mbedtls_md_free>
    if( ret != 0 )
 8028b18:	9a02      	ldr	r2, [sp, #8]
 8028b1a:	2a00      	cmp	r2, #0
 8028b1c:	d1a8      	bne.n	8028a70 <mbedtls_rsa_rsaes_oaep_encrypt+0x68>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8028b1e:	f1bb 0f00 	cmp.w	fp, #0
 8028b22:	d10f      	bne.n	8028b44 <mbedtls_rsa_rsaes_oaep_encrypt+0x13c>
            ? mbedtls_rsa_public(  ctx, output, output )
 8028b24:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8028b26:	4628      	mov	r0, r5
 8028b28:	4611      	mov	r1, r2
 8028b2a:	f7ff fbe5 	bl	80282f8 <mbedtls_rsa_public>
 8028b2e:	4602      	mov	r2, r0
}
 8028b30:	4610      	mov	r0, r2
 8028b32:	b009      	add	sp, #36	; 0x24
 8028b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memcpy( p, input, ilen );
 8028b38:	461a      	mov	r2, r3
 8028b3a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8028b3c:	3001      	adds	r0, #1
 8028b3e:	f007 f96b 	bl	802fe18 <memcpy>
 8028b42:	e7b2      	b.n	8028aaa <mbedtls_rsa_rsaes_oaep_encrypt+0xa2>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8028b44:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8028b46:	4652      	mov	r2, sl
 8028b48:	4631      	mov	r1, r6
 8028b4a:	4628      	mov	r0, r5
 8028b4c:	9300      	str	r3, [sp, #0]
 8028b4e:	f7ff fc3d 	bl	80283cc <mbedtls_rsa_private>
 8028b52:	4602      	mov	r2, r0
}
 8028b54:	4610      	mov	r0, r2
 8028b56:	b009      	add	sp, #36	; 0x24
 8028b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028b5c:	ffffbf80 	.word	0xffffbf80

08028b60 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>:
{
 8028b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8028b64:	2b01      	cmp	r3, #1
{
 8028b66:	b083      	sub	sp, #12
 8028b68:	4615      	mov	r5, r2
 8028b6a:	e9dd 920c 	ldrd	r9, r2, [sp, #48]	; 0x30
 8028b6e:	4680      	mov	r8, r0
 8028b70:	460c      	mov	r4, r1
 8028b72:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8028b74:	9201      	str	r2, [sp, #4]
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8028b76:	d058      	beq.n	8028c2a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xca>
    if( ilen + 11 < ilen || olen < ilen + 11 )
 8028b78:	f119 0f0c 	cmn.w	r9, #12
    olen = ctx->len;
 8028b7c:	f8d8 6004 	ldr.w	r6, [r8, #4]
    if( ilen + 11 < ilen || olen < ilen + 11 )
 8028b80:	d857      	bhi.n	8028c32 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd2>
 8028b82:	f109 020b 	add.w	r2, r9, #11
 8028b86:	42b2      	cmp	r2, r6
 8028b88:	d853      	bhi.n	8028c32 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd2>
    *p++ = 0;
 8028b8a:	2200      	movs	r2, #0
    nb_pad = olen - 3 - ilen;
 8028b8c:	eba6 0609 	sub.w	r6, r6, r9
 8028b90:	3e03      	subs	r6, #3
    *p++ = 0;
 8028b92:	703a      	strb	r2, [r7, #0]
    if( mode == MBEDTLS_RSA_PUBLIC )
 8028b94:	bb53      	cbnz	r3, 8028bec <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x8c>
        if( f_rng == NULL )
 8028b96:	2c00      	cmp	r4, #0
 8028b98:	d04b      	beq.n	8028c32 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd2>
        *p++ = MBEDTLS_RSA_CRYPT;
 8028b9a:	2302      	movs	r3, #2
 8028b9c:	707b      	strb	r3, [r7, #1]
 8028b9e:	eb07 0a03 	add.w	sl, r7, r3
        while( nb_pad-- > 0 )
 8028ba2:	2e00      	cmp	r6, #0
 8028ba4:	d04d      	beq.n	8028c42 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xe2>
 8028ba6:	441e      	add	r6, r3
 8028ba8:	443e      	add	r6, r7
{
 8028baa:	f04f 0b64 	mov.w	fp, #100	; 0x64
 8028bae:	e003      	b.n	8028bb8 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x58>
            } while( *p == 0 && --rng_dl && ret == 0 );
 8028bb0:	f1bb 0b01 	subs.w	fp, fp, #1
 8028bb4:	d034      	beq.n	8028c20 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xc0>
 8028bb6:	bb98      	cbnz	r0, 8028c20 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xc0>
                ret = f_rng( p_rng, p, 1 );
 8028bb8:	2201      	movs	r2, #1
 8028bba:	4651      	mov	r1, sl
 8028bbc:	4628      	mov	r0, r5
 8028bbe:	47a0      	blx	r4
            } while( *p == 0 && --rng_dl && ret == 0 );
 8028bc0:	f89a 3000 	ldrb.w	r3, [sl]
 8028bc4:	2b00      	cmp	r3, #0
 8028bc6:	d0f3      	beq.n	8028bb0 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x50>
            if( rng_dl == 0 || ret != 0 )
 8028bc8:	bb50      	cbnz	r0, 8028c20 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xc0>
            p++;
 8028bca:	f10a 0a01 	add.w	sl, sl, #1
        while( nb_pad-- > 0 )
 8028bce:	4556      	cmp	r6, sl
 8028bd0:	d1eb      	bne.n	8028baa <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x4a>
    *p++ = 0;
 8028bd2:	2300      	movs	r3, #0
 8028bd4:	7033      	strb	r3, [r6, #0]
    if( ilen != 0 )
 8028bd6:	f1b9 0f00 	cmp.w	r9, #0
 8028bda:	d12c      	bne.n	8028c36 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd6>
            ? mbedtls_rsa_public(  ctx, output, output )
 8028bdc:	4640      	mov	r0, r8
 8028bde:	463a      	mov	r2, r7
 8028be0:	4639      	mov	r1, r7
}
 8028be2:	b003      	add	sp, #12
 8028be4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            ? mbedtls_rsa_public(  ctx, output, output )
 8028be8:	f7ff bb86 	b.w	80282f8 <mbedtls_rsa_public>
        *p++ = MBEDTLS_RSA_SIGN;
 8028bec:	2301      	movs	r3, #1
 8028bee:	707b      	strb	r3, [r7, #1]
 8028bf0:	1cbb      	adds	r3, r7, #2
        while( nb_pad-- > 0 )
 8028bf2:	b136      	cbz	r6, 8028c02 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xa2>
 8028bf4:	4618      	mov	r0, r3
 8028bf6:	4632      	mov	r2, r6
 8028bf8:	21ff      	movs	r1, #255	; 0xff
 8028bfa:	f007 f934 	bl	802fe66 <memset>
 8028bfe:	4603      	mov	r3, r0
 8028c00:	4433      	add	r3, r6
    *p++ = 0;
 8028c02:	2200      	movs	r2, #0
 8028c04:	701a      	strb	r2, [r3, #0]
    if( ilen != 0 )
 8028c06:	f1b9 0f00 	cmp.w	r9, #0
 8028c0a:	d11c      	bne.n	8028c46 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xe6>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8028c0c:	463b      	mov	r3, r7
 8028c0e:	462a      	mov	r2, r5
 8028c10:	4621      	mov	r1, r4
 8028c12:	4640      	mov	r0, r8
 8028c14:	970c      	str	r7, [sp, #48]	; 0x30
}
 8028c16:	b003      	add	sp, #12
 8028c18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8028c1c:	f7ff bbd6 	b.w	80283cc <mbedtls_rsa_private>
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 8028c20:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
}
 8028c24:	b003      	add	sp, #12
 8028c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8028c2a:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 8028c2e:	2a00      	cmp	r2, #0
 8028c30:	d0a2      	beq.n	8028b78 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x18>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8028c32:	4808      	ldr	r0, [pc, #32]	; (8028c54 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xf4>)
 8028c34:	e7f6      	b.n	8028c24 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xc4>
        memcpy( p, input, ilen );
 8028c36:	464a      	mov	r2, r9
 8028c38:	9901      	ldr	r1, [sp, #4]
 8028c3a:	1c70      	adds	r0, r6, #1
 8028c3c:	f007 f8ec 	bl	802fe18 <memcpy>
    return( ( mode == MBEDTLS_RSA_PUBLIC )
 8028c40:	e7cc      	b.n	8028bdc <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x7c>
        *p++ = MBEDTLS_RSA_CRYPT;
 8028c42:	4656      	mov	r6, sl
 8028c44:	e7c5      	b.n	8028bd2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x72>
        memcpy( p, input, ilen );
 8028c46:	464a      	mov	r2, r9
 8028c48:	9901      	ldr	r1, [sp, #4]
 8028c4a:	1c58      	adds	r0, r3, #1
 8028c4c:	f007 f8e4 	bl	802fe18 <memcpy>
    return( ( mode == MBEDTLS_RSA_PUBLIC )
 8028c50:	e7dc      	b.n	8028c0c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xac>
 8028c52:	bf00      	nop
 8028c54:	ffffbf80 	.word	0xffffbf80

08028c58 <mbedtls_rsa_pkcs1_encrypt>:
{
 8028c58:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 8028c5a:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
{
 8028c5e:	b087      	sub	sp, #28
 8028c60:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8028c62:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
    switch( ctx->padding )
 8028c66:	b174      	cbz	r4, 8028c86 <mbedtls_rsa_pkcs1_encrypt+0x2e>
 8028c68:	2c01      	cmp	r4, #1
 8028c6a:	d109      	bne.n	8028c80 <mbedtls_rsa_pkcs1_encrypt+0x28>
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
 8028c6c:	2400      	movs	r4, #0
 8028c6e:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8028c72:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8028c76:	9400      	str	r4, [sp, #0]
 8028c78:	f7ff fec6 	bl	8028a08 <mbedtls_rsa_rsaes_oaep_encrypt>
}
 8028c7c:	b007      	add	sp, #28
 8028c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch( ctx->padding )
 8028c80:	4803      	ldr	r0, [pc, #12]	; (8028c90 <mbedtls_rsa_pkcs1_encrypt+0x38>)
}
 8028c82:	b007      	add	sp, #28
 8028c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028c86:	b007      	add	sp, #28
 8028c88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
 8028c8c:	f7ff bf68 	b.w	8028b60 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>
 8028c90:	ffffbf00 	.word	0xffffbf00

08028c94 <mbedtls_rsa_rsaes_oaep_decrypt>:
{
 8028c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8028c98:	2b01      	cmp	r3, #1
{
 8028c9a:	4699      	mov	r9, r3
 8028c9c:	4682      	mov	sl, r0
 8028c9e:	460c      	mov	r4, r1
 8028ca0:	4693      	mov	fp, r2
 8028ca2:	f2ad 4d44 	subw	sp, sp, #1092	; 0x444
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8028ca6:	d067      	beq.n	8028d78 <mbedtls_rsa_rsaes_oaep_decrypt+0xe4>
    ilen = ctx->len;
 8028ca8:	f8da 8004 	ldr.w	r8, [sl, #4]
    if( ilen < 16 || ilen > sizeof( buf ) )
 8028cac:	f1a8 0210 	sub.w	r2, r8, #16
 8028cb0:	f5b2 7f7c 	cmp.w	r2, #1008	; 0x3f0
 8028cb4:	d864      	bhi.n	8028d80 <mbedtls_rsa_rsaes_oaep_decrypt+0xec>
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 8028cb6:	f89a 00a8 	ldrb.w	r0, [sl, #168]	; 0xa8
 8028cba:	f7fc ffc9 	bl	8025c50 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8028cbe:	4606      	mov	r6, r0
 8028cc0:	2800      	cmp	r0, #0
 8028cc2:	d05d      	beq.n	8028d80 <mbedtls_rsa_rsaes_oaep_decrypt+0xec>
    hlen = mbedtls_md_get_size( md_info );
 8028cc4:	f7fd fab6 	bl	8026234 <mbedtls_md_get_size>
    if( 2 * hlen + 2 > ilen )
 8028cc8:	1c47      	adds	r7, r0, #1
 8028cca:	007b      	lsls	r3, r7, #1
 8028ccc:	ebb8 0f47 	cmp.w	r8, r7, lsl #1
    hlen = mbedtls_md_get_size( md_info );
 8028cd0:	4605      	mov	r5, r0
    if( 2 * hlen + 2 > ilen )
 8028cd2:	9303      	str	r3, [sp, #12]
 8028cd4:	d354      	bcc.n	8028d80 <mbedtls_rsa_rsaes_oaep_decrypt+0xec>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8028cd6:	f1b9 0f00 	cmp.w	r9, #0
 8028cda:	d140      	bne.n	8028d5e <mbedtls_rsa_rsaes_oaep_decrypt+0xca>
          ? mbedtls_rsa_public(  ctx, input, buf )
 8028cdc:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 8028ce0:	4650      	mov	r0, sl
 8028ce2:	464a      	mov	r2, r9
 8028ce4:	f8dd 1474 	ldr.w	r1, [sp, #1140]	; 0x474
 8028ce8:	f7ff fb06 	bl	80282f8 <mbedtls_rsa_public>
 8028cec:	4604      	mov	r4, r0
    if( ret != 0 )
 8028cee:	bb3c      	cbnz	r4, 8028d40 <mbedtls_rsa_rsaes_oaep_decrypt+0xac>
    mbedtls_md_init( &md_ctx );
 8028cf0:	a805      	add	r0, sp, #20
 8028cf2:	f7fc ffb9 	bl	8025c68 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 8028cf6:	4622      	mov	r2, r4
 8028cf8:	4631      	mov	r1, r6
 8028cfa:	a805      	add	r0, sp, #20
 8028cfc:	f7fd f804 	bl	8025d08 <mbedtls_md_setup>
 8028d00:	4604      	mov	r4, r0
 8028d02:	b9d0      	cbnz	r0, 8028d3a <mbedtls_rsa_rsaes_oaep_decrypt+0xa6>
    if( ( ret = mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
 8028d04:	f108 3bff 	add.w	fp, r8, #4294967295
 8028d08:	ab05      	add	r3, sp, #20
 8028d0a:	444f      	add	r7, r9
 8028d0c:	ebab 0b05 	sub.w	fp, fp, r5
 8028d10:	9300      	str	r3, [sp, #0]
 8028d12:	463a      	mov	r2, r7
 8028d14:	465b      	mov	r3, fp
 8028d16:	4629      	mov	r1, r5
 8028d18:	f10d 0041 	add.w	r0, sp, #65	; 0x41
 8028d1c:	f7fe ff10 	bl	8027b40 <mgf_mask>
 8028d20:	4604      	mov	r4, r0
 8028d22:	b950      	cbnz	r0, 8028d3a <mbedtls_rsa_rsaes_oaep_decrypt+0xa6>
        ( ret = mgf_mask( buf + hlen + 1, ilen - hlen - 1, buf + 1, hlen,
 8028d24:	ab05      	add	r3, sp, #20
 8028d26:	9300      	str	r3, [sp, #0]
 8028d28:	4659      	mov	r1, fp
 8028d2a:	4638      	mov	r0, r7
 8028d2c:	462b      	mov	r3, r5
 8028d2e:	f10d 0241 	add.w	r2, sp, #65	; 0x41
 8028d32:	f7fe ff05 	bl	8027b40 <mgf_mask>
                          &md_ctx ) ) != 0 ||
 8028d36:	4604      	mov	r4, r0
 8028d38:	b320      	cbz	r0, 8028d84 <mbedtls_rsa_rsaes_oaep_decrypt+0xf0>
        mbedtls_md_free( &md_ctx );
 8028d3a:	a805      	add	r0, sp, #20
 8028d3c:	f7fc ff9a 	bl	8025c74 <mbedtls_md_free>
        goto cleanup;
 8028d40:	af08      	add	r7, sp, #32
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 8028d42:	4648      	mov	r0, r9
 8028d44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8028d48:	f7fe fef0 	bl	8027b2c <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( lhash, sizeof( lhash ) );
 8028d4c:	4638      	mov	r0, r7
 8028d4e:	2120      	movs	r1, #32
 8028d50:	f7fe feec 	bl	8027b2c <mbedtls_platform_zeroize>
}
 8028d54:	4620      	mov	r0, r4
 8028d56:	f20d 4d44 	addw	sp, sp, #1092	; 0x444
 8028d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8028d5e:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 8028d62:	4621      	mov	r1, r4
 8028d64:	465a      	mov	r2, fp
 8028d66:	4650      	mov	r0, sl
 8028d68:	f8dd 3474 	ldr.w	r3, [sp, #1140]	; 0x474
 8028d6c:	f8cd 9000 	str.w	r9, [sp]
 8028d70:	f7ff fb2c 	bl	80283cc <mbedtls_rsa_private>
 8028d74:	4604      	mov	r4, r0
 8028d76:	e7ba      	b.n	8028cee <mbedtls_rsa_rsaes_oaep_decrypt+0x5a>
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8028d78:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 8028d7c:	2a01      	cmp	r2, #1
 8028d7e:	d093      	beq.n	8028ca8 <mbedtls_rsa_rsaes_oaep_decrypt+0x14>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8028d80:	4c32      	ldr	r4, [pc, #200]	; (8028e4c <mbedtls_rsa_rsaes_oaep_decrypt+0x1b8>)
 8028d82:	e7e7      	b.n	8028d54 <mbedtls_rsa_rsaes_oaep_decrypt+0xc0>
    mbedtls_md_free( &md_ctx );
 8028d84:	a805      	add	r0, sp, #20
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
 8028d86:	af08      	add	r7, sp, #32
    mbedtls_md_free( &md_ctx );
 8028d88:	f7fc ff74 	bl	8025c74 <mbedtls_md_free>
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
 8028d8c:	4630      	mov	r0, r6
 8028d8e:	463b      	mov	r3, r7
 8028d90:	f8dd 246c 	ldr.w	r2, [sp, #1132]	; 0x46c
 8028d94:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
 8028d98:	f7fd f834 	bl	8025e04 <mbedtls_md>
 8028d9c:	4604      	mov	r4, r0
 8028d9e:	2800      	cmp	r0, #0
 8028da0:	d1cf      	bne.n	8028d42 <mbedtls_rsa_rsaes_oaep_decrypt+0xae>
    p += hlen; /* Skip seed */
 8028da2:	f10d 0241 	add.w	r2, sp, #65	; 0x41
    bad |= *p++; /* First byte must be 0 */
 8028da6:	f899 3000 	ldrb.w	r3, [r9]
    p += hlen; /* Skip seed */
 8028daa:	1950      	adds	r0, r2, r5
    for( i = 0; i < hlen; i++ )
 8028dac:	2d00      	cmp	r5, #0
 8028dae:	d045      	beq.n	8028e3c <mbedtls_rsa_rsaes_oaep_decrypt+0x1a8>
 8028db0:	463e      	mov	r6, r7
 8028db2:	4405      	add	r5, r0
        bad |= lhash[i] ^ *p++;
 8028db4:	f810 1b01 	ldrb.w	r1, [r0], #1
 8028db8:	f816 2b01 	ldrb.w	r2, [r6], #1
    for( i = 0; i < hlen; i++ )
 8028dbc:	42a8      	cmp	r0, r5
        bad |= lhash[i] ^ *p++;
 8028dbe:	ea82 0201 	eor.w	r2, r2, r1
 8028dc2:	ea43 0302 	orr.w	r3, r3, r2
 8028dc6:	b259      	sxtb	r1, r3
    for( i = 0; i < hlen; i++ )
 8028dc8:	d1f4      	bne.n	8028db4 <mbedtls_rsa_rsaes_oaep_decrypt+0x120>
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 8028dca:	9b03      	ldr	r3, [sp, #12]
 8028dcc:	ebb8 0a03 	subs.w	sl, r8, r3
 8028dd0:	d038      	beq.n	8028e44 <mbedtls_rsa_rsaes_oaep_decrypt+0x1b0>
    pad_done = 0;
 8028dd2:	2300      	movs	r3, #0
    pad_len = 0;
 8028dd4:	469c      	mov	ip, r3
 8028dd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8028dda:	eb05 000a 	add.w	r0, r5, sl
 8028dde:	1e6e      	subs	r6, r5, #1
        pad_done |= p[i];
 8028de0:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8028de4:	4313      	orrs	r3, r2
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 8028de6:	425a      	negs	r2, r3
 8028de8:	431a      	orrs	r2, r3
 8028dea:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8028dee:	f082 0201 	eor.w	r2, r2, #1
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 8028df2:	42b0      	cmp	r0, r6
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 8028df4:	4494      	add	ip, r2
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 8028df6:	d1f3      	bne.n	8028de0 <mbedtls_rsa_rsaes_oaep_decrypt+0x14c>
 8028df8:	f10c 0201 	add.w	r2, ip, #1
 8028dfc:	44ac      	add	ip, r5
    bad |= *p++ ^ 0x01;
 8028dfe:	f89c 3000 	ldrb.w	r3, [ip]
 8028e02:	f083 0301 	eor.w	r3, r3, #1
 8028e06:	4319      	orrs	r1, r3
    if( bad != 0 )
 8028e08:	f011 0fff 	tst.w	r1, #255	; 0xff
 8028e0c:	d112      	bne.n	8028e34 <mbedtls_rsa_rsaes_oaep_decrypt+0x1a0>
    bad |= *p++ ^ 0x01;
 8028e0e:	18a9      	adds	r1, r5, r2
    if( ilen - ( p - buf ) > output_max_len )
 8028e10:	f8dd 347c 	ldr.w	r3, [sp, #1148]	; 0x47c
 8028e14:	eba1 0209 	sub.w	r2, r1, r9
 8028e18:	eba8 0202 	sub.w	r2, r8, r2
 8028e1c:	429a      	cmp	r2, r3
 8028e1e:	d80b      	bhi.n	8028e38 <mbedtls_rsa_rsaes_oaep_decrypt+0x1a4>
    *olen = ilen - (p - buf);
 8028e20:	f8dd 3470 	ldr.w	r3, [sp, #1136]	; 0x470
 8028e24:	601a      	str	r2, [r3, #0]
    if( *olen != 0 )
 8028e26:	2a00      	cmp	r2, #0
 8028e28:	d08b      	beq.n	8028d42 <mbedtls_rsa_rsaes_oaep_decrypt+0xae>
        memcpy( output, p, *olen );
 8028e2a:	f8dd 0478 	ldr.w	r0, [sp, #1144]	; 0x478
 8028e2e:	f006 fff3 	bl	802fe18 <memcpy>
 8028e32:	e786      	b.n	8028d42 <mbedtls_rsa_rsaes_oaep_decrypt+0xae>
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 8028e34:	4c06      	ldr	r4, [pc, #24]	; (8028e50 <mbedtls_rsa_rsaes_oaep_decrypt+0x1bc>)
 8028e36:	e784      	b.n	8028d42 <mbedtls_rsa_rsaes_oaep_decrypt+0xae>
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
 8028e38:	4c06      	ldr	r4, [pc, #24]	; (8028e54 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c0>)
 8028e3a:	e782      	b.n	8028d42 <mbedtls_rsa_rsaes_oaep_decrypt+0xae>
    p += hlen; /* Skip seed */
 8028e3c:	f10d 0541 	add.w	r5, sp, #65	; 0x41
 8028e40:	b259      	sxtb	r1, r3
 8028e42:	e7c2      	b.n	8028dca <mbedtls_rsa_rsaes_oaep_decrypt+0x136>
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 8028e44:	46ac      	mov	ip, r5
 8028e46:	2201      	movs	r2, #1
 8028e48:	e7d9      	b.n	8028dfe <mbedtls_rsa_rsaes_oaep_decrypt+0x16a>
 8028e4a:	bf00      	nop
 8028e4c:	ffffbf80 	.word	0xffffbf80
 8028e50:	ffffbf00 	.word	0xffffbf00
 8028e54:	ffffbc00 	.word	0xffffbc00

08028e58 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>:
{
 8028e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8028e5c:	2b01      	cmp	r3, #1
    ilen = ctx->len;
 8028e5e:	6844      	ldr	r4, [r0, #4]
{
 8028e60:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8028e64:	f000 80db 	beq.w	802901e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1c6>
    if( ilen < 16 || ilen > sizeof( buf ) )
 8028e68:	f1a4 0510 	sub.w	r5, r4, #16
 8028e6c:	f5b5 7f7c 	cmp.w	r5, #1008	; 0x3f0
 8028e70:	f200 811e 	bhi.w	80290b0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x258>
          ? mbedtls_rsa_public(  ctx, input, buf )
 8028e74:	f10d 0808 	add.w	r8, sp, #8
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8028e78:	2b00      	cmp	r3, #0
 8028e7a:	f040 810c 	bne.w	8029096 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x23e>
          ? mbedtls_rsa_public(  ctx, input, buf )
 8028e7e:	4642      	mov	r2, r8
 8028e80:	f8dd 1434 	ldr.w	r1, [sp, #1076]	; 0x434
 8028e84:	f7ff fa38 	bl	80282f8 <mbedtls_rsa_public>
    if( ret != 0 )
 8028e88:	4606      	mov	r6, r0
 8028e8a:	2800      	cmp	r0, #0
 8028e8c:	f040 80bb 	bne.w	8029006 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1ae>
    unsigned char pad_done = 0;
 8028e90:	2600      	movs	r6, #0
    size_t pad_count = 0;
 8028e92:	4631      	mov	r1, r6
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;
 8028e94:	f898 5001 	ldrb.w	r5, [r8, #1]
    bad |= buf[0];
 8028e98:	f898 3000 	ldrb.w	r3, [r8]
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;
 8028e9c:	f085 0501 	eor.w	r5, r5, #1
 8028ea0:	f10d 0709 	add.w	r7, sp, #9
 8028ea4:	431d      	orrs	r5, r3
            pad_done |= if_int( buf[i], 0, 1 );
 8028ea6:	4638      	mov	r0, r7
 8028ea8:	f817 3f01 	ldrb.w	r3, [r7, #1]!
        for( i = 2; i < ilen; i++ )
 8028eac:	3002      	adds	r0, #2
            pad_done |= if_int( buf[i], 0, 1 );
 8028eae:	2b00      	cmp	r3, #0
 8028eb0:	bf08      	it	eq
 8028eb2:	f046 0601 	orreq.w	r6, r6, #1
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
 8028eb6:	43da      	mvns	r2, r3
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 8028eb8:	4273      	negs	r3, r6
 8028eba:	4333      	orrs	r3, r6
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
 8028ebc:	b2d2      	uxtb	r2, r2
    return( ( mask & if1 ) | (~mask & if0 ) );
 8028ebe:	ea22 72e3 	bic.w	r2, r2, r3, asr #31
 8028ec2:	43db      	mvns	r3, r3
        for( i = 2; i < ilen; i++ )
 8028ec4:	eba0 0008 	sub.w	r0, r0, r8
    return( ( mask & if1 ) | (~mask & if0 ) );
 8028ec8:	0fdb      	lsrs	r3, r3, #31
        for( i = 2; i < ilen; i++ )
 8028eca:	4284      	cmp	r4, r0
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
 8028ecc:	ea45 0502 	orr.w	r5, r5, r2
            pad_count += if_int( pad_done, 0, 1 );
 8028ed0:	4419      	add	r1, r3
        for( i = 2; i < ilen; i++ )
 8028ed2:	d8e8      	bhi.n	8028ea6 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x4e>
    plaintext_max_size = ( output_max_len > ilen - 11 ?
 8028ed4:	f8dd 043c 	ldr.w	r0, [sp, #1084]	; 0x43c
 8028ed8:	f1a4 020b 	sub.w	r2, r4, #11
 8028edc:	4282      	cmp	r2, r0
 8028ede:	bf28      	it	cs
 8028ee0:	4602      	movcs	r2, r0
    return( ( max - size ) >> ( sizeof( size_t ) * 8 - 1 ) );
 8028ee2:	432b      	orrs	r3, r5
 8028ee4:	f1a1 0008 	sub.w	r0, r1, #8
    bad |= size_greater_than( 8, pad_count );
 8028ee8:	ea43 73d0 	orr.w	r3, r3, r0, lsr #31
                             (unsigned) ( ilen - pad_count - 3 ) );
 8028eec:	f1a4 0903 	sub.w	r9, r4, #3
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 8028ef0:	425e      	negs	r6, r3
                             (unsigned) ( ilen - pad_count - 3 ) );
 8028ef2:	eba9 0101 	sub.w	r1, r9, r1
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 8028ef6:	ea46 0003 	orr.w	r0, r6, r3
    return( ( mask & if1 ) | (~mask & if0 ) );
 8028efa:	ea81 0902 	eor.w	r9, r1, r2
 8028efe:	ea09 79e0 	and.w	r9, r9, r0, asr #31
 8028f02:	ea89 0901 	eor.w	r9, r9, r1
    return( ( max - size ) >> ( sizeof( size_t ) * 8 - 1 ) );
 8028f06:	eba2 0e09 	sub.w	lr, r2, r9
    bad = all_or_nothing_int( bad | output_too_large );
 8028f0a:	ea43 73de 	orr.w	r3, r3, lr, lsr #31
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 8028f0e:	425d      	negs	r5, r3
 8028f10:	2c0c      	cmp	r4, #12
 8028f12:	4621      	mov	r1, r4
 8028f14:	ea43 0305 	orr.w	r3, r3, r5
 8028f18:	bf38      	it	cc
 8028f1a:	210c      	movcc	r1, #12
 8028f1c:	17dd      	asrs	r5, r3, #31
 8028f1e:	43ed      	mvns	r5, r5
 8028f20:	ea4f 7eee 	mov.w	lr, lr, asr #31
    return( ( mask & if1 ) | (~mask & if0 ) );
 8028f24:	f40e 4388 	and.w	r3, lr, #17408	; 0x4400
 8028f28:	f483 4682 	eor.w	r6, r3, #16640	; 0x4100
 8028f2c:	ea06 76e0 	and.w	r6, r6, r0, asr #31
 8028f30:	405e      	eors	r6, r3
 8028f32:	f1a1 030c 	sub.w	r3, r1, #12
 8028f36:	2b02      	cmp	r3, #2
    ret = - (int) if_int( bad, - MBEDTLS_ERR_RSA_INVALID_PADDING,
 8028f38:	f1c6 0600 	rsb	r6, r6, #0
    for( i = 11; i < ilen; i++ )
 8028f3c:	b2ed      	uxtb	r5, r5
 8028f3e:	f1a1 010b 	sub.w	r1, r1, #11
 8028f42:	f240 80b3 	bls.w	80290ac <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x254>
 8028f46:	f04f 0c00 	mov.w	ip, #0
 8028f4a:	f365 0c07 	bfi	ip, r5, #0, #8
 8028f4e:	f365 2c0f 	bfi	ip, r5, #8, #8
 8028f52:	f365 4c17 	bfi	ip, r5, #16, #8
 8028f56:	f10d 0313 	add.w	r3, sp, #19
 8028f5a:	f021 0703 	bic.w	r7, r1, #3
 8028f5e:	f365 6c1f 	bfi	ip, r5, #24, #8
 8028f62:	441f      	add	r7, r3
        buf[i] &= ~bad;
 8028f64:	6818      	ldr	r0, [r3, #0]
 8028f66:	ea00 000c 	and.w	r0, r0, ip
 8028f6a:	f843 0b04 	str.w	r0, [r3], #4
    for( i = 11; i < ilen; i++ )
 8028f6e:	429f      	cmp	r7, r3
 8028f70:	d1f8      	bne.n	8028f64 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x10c>
 8028f72:	f021 0003 	bic.w	r0, r1, #3
 8028f76:	4288      	cmp	r0, r1
 8028f78:	f100 030b 	add.w	r3, r0, #11
 8028f7c:	d014      	beq.n	8028fa8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x150>
        buf[i] &= ~bad;
 8028f7e:	f818 1003 	ldrb.w	r1, [r8, r3]
    for( i = 11; i < ilen; i++ )
 8028f82:	1c58      	adds	r0, r3, #1
        buf[i] &= ~bad;
 8028f84:	4029      	ands	r1, r5
    for( i = 11; i < ilen; i++ )
 8028f86:	4284      	cmp	r4, r0
        buf[i] &= ~bad;
 8028f88:	f808 1003 	strb.w	r1, [r8, r3]
    for( i = 11; i < ilen; i++ )
 8028f8c:	d90c      	bls.n	8028fa8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x150>
        buf[i] &= ~bad;
 8028f8e:	f818 1000 	ldrb.w	r1, [r8, r0]
    for( i = 11; i < ilen; i++ )
 8028f92:	3302      	adds	r3, #2
        buf[i] &= ~bad;
 8028f94:	4029      	ands	r1, r5
    for( i = 11; i < ilen; i++ )
 8028f96:	429c      	cmp	r4, r3
        buf[i] &= ~bad;
 8028f98:	f808 1000 	strb.w	r1, [r8, r0]
    for( i = 11; i < ilen; i++ )
 8028f9c:	d904      	bls.n	8028fa8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x150>
        buf[i] &= ~bad;
 8028f9e:	f818 1003 	ldrb.w	r1, [r8, r3]
 8028fa2:	400d      	ands	r5, r1
 8028fa4:	f808 5003 	strb.w	r5, [r8, r3]
    mem_move_to_left( buf + ilen - plaintext_max_size,
 8028fa8:	1aa1      	subs	r1, r4, r2
    return( ( mask & if1 ) | (~mask & if0 ) );
 8028faa:	f1be 0f00 	cmp.w	lr, #0
 8028fae:	bf18      	it	ne
 8028fb0:	4691      	movne	r9, r2
    mem_move_to_left( buf + ilen - plaintext_max_size,
 8028fb2:	4441      	add	r1, r8
    if( total == 0 )
 8028fb4:	b1fa      	cbz	r2, 8028ff6 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x19e>
        for( n = 0; n < total - 1; n++ )
 8028fb6:	f102 3aff 	add.w	sl, r2, #4294967295
 8028fba:	4694      	mov	ip, r2
 8028fbc:	eba2 0b09 	sub.w	fp, r2, r9
 8028fc0:	4652      	mov	r2, sl
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
 8028fc2:	eb01 070a 	add.w	r7, r1, sl
 8028fc6:	f1c9 0000 	rsb	r0, r9, #0
    return( ( max - size ) >> ( sizeof( size_t ) * 8 - 1 ) );
 8028fca:	0fc5      	lsrs	r5, r0, #31
        for( n = 0; n < total - 1; n++ )
 8028fcc:	b32a      	cbz	r2, 802901a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1c2>
 8028fce:	460b      	mov	r3, r1
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 8028fd0:	426d      	negs	r5, r5
            unsigned char current = buf[n];
 8028fd2:	781c      	ldrb	r4, [r3, #0]
 8028fd4:	469e      	mov	lr, r3
            unsigned char next = buf[n+1];
 8028fd6:	f813 af01 	ldrb.w	sl, [r3, #1]!
            buf[n] = if_int( no_op, current, next );
 8028fda:	2d00      	cmp	r5, #0
 8028fdc:	bf08      	it	eq
 8028fde:	4654      	moveq	r4, sl
        for( n = 0; n < total - 1; n++ )
 8028fe0:	429f      	cmp	r7, r3
            buf[n] = if_int( no_op, current, next );
 8028fe2:	f88e 4000 	strb.w	r4, [lr]
        for( n = 0; n < total - 1; n++ )
 8028fe6:	d1f4      	bne.n	8028fd2 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x17a>
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
 8028fe8:	783b      	ldrb	r3, [r7, #0]
    return( ( mask & if1 ) | (~mask & if0 ) );
 8028fea:	3001      	adds	r0, #1
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
 8028fec:	401d      	ands	r5, r3
    for( i = 0; i < total; i++ )
 8028fee:	4583      	cmp	fp, r0
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
 8028ff0:	703d      	strb	r5, [r7, #0]
    for( i = 0; i < total; i++ )
 8028ff2:	d1ea      	bne.n	8028fca <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x172>
 8028ff4:	4662      	mov	r2, ip
    if( output_max_len != 0 )
 8028ff6:	f8dd 343c 	ldr.w	r3, [sp, #1084]	; 0x43c
 8028ffa:	2b00      	cmp	r3, #0
 8028ffc:	d146      	bne.n	802908c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x234>
    *olen = plaintext_size;
 8028ffe:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
 8029002:	f8c3 9000 	str.w	r9, [r3]
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 8029006:	4640      	mov	r0, r8
 8029008:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802900c:	f7fe fd8e 	bl	8027b2c <mbedtls_platform_zeroize>
}
 8029010:	4630      	mov	r0, r6
 8029012:	f20d 4d0c 	addw	sp, sp, #1036	; 0x40c
 8029016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802901a:	426d      	negs	r5, r5
 802901c:	e7e4      	b.n	8028fe8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x190>
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 802901e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8029022:	2b00      	cmp	r3, #0
 8029024:	d144      	bne.n	80290b0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x258>
    if( ilen < 16 || ilen > sizeof( buf ) )
 8029026:	f1a4 0310 	sub.w	r3, r4, #16
 802902a:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 802902e:	d83f      	bhi.n	80290b0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x258>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8029030:	f10d 0808 	add.w	r8, sp, #8
 8029034:	f8dd 3434 	ldr.w	r3, [sp, #1076]	; 0x434
 8029038:	f8cd 8000 	str.w	r8, [sp]
 802903c:	f7ff f9c6 	bl	80283cc <mbedtls_rsa_private>
    if( ret != 0 )
 8029040:	4606      	mov	r6, r0
 8029042:	2800      	cmp	r0, #0
 8029044:	d1df      	bne.n	8029006 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1ae>
    size_t pad_count = 0;
 8029046:	4631      	mov	r1, r6
        bad |= buf[1] ^ MBEDTLS_RSA_CRYPT;
 8029048:	f898 3001 	ldrb.w	r3, [r8, #1]
 802904c:	f898 5000 	ldrb.w	r5, [r8]
 8029050:	f083 0302 	eor.w	r3, r3, #2
 8029054:	431d      	orrs	r5, r3
        for( i = 2; i < ilen; i++ )
 8029056:	f10d 0009 	add.w	r0, sp, #9
            pad_done  |= ((buf[i] | (unsigned char)-buf[i]) >> 7) ^ 1;
 802905a:	4602      	mov	r2, r0
 802905c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
        for( i = 2; i < ilen; i++ )
 8029060:	3202      	adds	r2, #2
            pad_done  |= ((buf[i] | (unsigned char)-buf[i]) >> 7) ^ 1;
 8029062:	425f      	negs	r7, r3
 8029064:	433b      	orrs	r3, r7
 8029066:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 802906a:	f083 0301 	eor.w	r3, r3, #1
 802906e:	431e      	orrs	r6, r3
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 8029070:	4273      	negs	r3, r6
 8029072:	4333      	orrs	r3, r6
 8029074:	f3c3 17c0 	ubfx	r7, r3, #7, #1
        for( i = 2; i < ilen; i++ )
 8029078:	eba2 0208 	sub.w	r2, r2, r8
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 802907c:	f087 0701 	eor.w	r7, r7, #1
        for( i = 2; i < ilen; i++ )
 8029080:	4294      	cmp	r4, r2
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 8029082:	4439      	add	r1, r7
        for( i = 2; i < ilen; i++ )
 8029084:	d8e9      	bhi.n	802905a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x202>
 8029086:	43db      	mvns	r3, r3
 8029088:	0fdb      	lsrs	r3, r3, #31
 802908a:	e723      	b.n	8028ed4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x7c>
        memcpy( output, buf + ilen - plaintext_max_size, plaintext_max_size );
 802908c:	f8dd 0438 	ldr.w	r0, [sp, #1080]	; 0x438
 8029090:	f006 fec2 	bl	802fe18 <memcpy>
 8029094:	e7b3      	b.n	8028ffe <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1a6>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8029096:	f8dd 3434 	ldr.w	r3, [sp, #1076]	; 0x434
 802909a:	f8cd 8000 	str.w	r8, [sp]
 802909e:	f7ff f995 	bl	80283cc <mbedtls_rsa_private>
    if( ret != 0 )
 80290a2:	4606      	mov	r6, r0
 80290a4:	2800      	cmp	r0, #0
 80290a6:	f43f aef3 	beq.w	8028e90 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x38>
 80290aa:	e7ac      	b.n	8029006 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1ae>
    for( i = 11; i < ilen; i++ )
 80290ac:	230b      	movs	r3, #11
 80290ae:	e766      	b.n	8028f7e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x126>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80290b0:	4e00      	ldr	r6, [pc, #0]	; (80290b4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x25c>)
 80290b2:	e7ad      	b.n	8029010 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1b8>
 80290b4:	ffffbf80 	.word	0xffffbf80

080290b8 <mbedtls_rsa_pkcs1_decrypt>:
{
 80290b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 80290ba:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
{
 80290be:	b087      	sub	sp, #28
 80290c0:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 80290c4:	e9dd 7c0e 	ldrd	r7, ip, [sp, #56]	; 0x38
    switch( ctx->padding )
 80290c8:	b17c      	cbz	r4, 80290ea <mbedtls_rsa_pkcs1_decrypt+0x32>
 80290ca:	2c01      	cmp	r4, #1
 80290cc:	d10a      	bne.n	80290e4 <mbedtls_rsa_pkcs1_decrypt+0x2c>
            return mbedtls_rsa_rsaes_oaep_decrypt( ctx, f_rng, p_rng, mode, NULL, 0,
 80290ce:	2400      	movs	r4, #0
 80290d0:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 80290d4:	e9cd 5602 	strd	r5, r6, [sp, #8]
 80290d8:	e9cd 4400 	strd	r4, r4, [sp]
 80290dc:	f7ff fdda 	bl	8028c94 <mbedtls_rsa_rsaes_oaep_decrypt>
}
 80290e0:	b007      	add	sp, #28
 80290e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch( ctx->padding )
 80290e4:	4803      	ldr	r0, [pc, #12]	; (80290f4 <mbedtls_rsa_pkcs1_decrypt+0x3c>)
}
 80290e6:	b007      	add	sp, #28
 80290e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80290ea:	b007      	add	sp, #28
 80290ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
 80290f0:	f7ff beb2 	b.w	8028e58 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>
 80290f4:	ffffbf00 	.word	0xffffbf00

080290f8 <mbedtls_rsa_rsassa_pss_sign>:
{
 80290f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80290fc:	ed2d 8b02 	vpush	{d8}
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8029100:	2b01      	cmp	r3, #1
{
 8029102:	b095      	sub	sp, #84	; 0x54
 8029104:	4604      	mov	r4, r0
 8029106:	460f      	mov	r7, r1
 8029108:	4691      	mov	r9, r2
 802910a:	f89d 0080 	ldrb.w	r0, [sp, #128]	; 0x80
 802910e:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8029112:	9303      	str	r3, [sp, #12]
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8029114:	d06a      	beq.n	80291ec <mbedtls_rsa_rsassa_pss_sign+0xf4>
    if( f_rng == NULL )
 8029116:	2f00      	cmp	r7, #0
 8029118:	d06c      	beq.n	80291f4 <mbedtls_rsa_rsassa_pss_sign+0xfc>
    olen = ctx->len;
 802911a:	6866      	ldr	r6, [r4, #4]
    if( md_alg != MBEDTLS_MD_NONE )
 802911c:	bb48      	cbnz	r0, 8029172 <mbedtls_rsa_rsassa_pss_sign+0x7a>
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 802911e:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
 8029122:	f7fc fd95 	bl	8025c50 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8029126:	4680      	mov	r8, r0
 8029128:	2800      	cmp	r0, #0
 802912a:	d063      	beq.n	80291f4 <mbedtls_rsa_rsassa_pss_sign+0xfc>
    hlen = mbedtls_md_get_size( md_info );
 802912c:	f7fd f882 	bl	8026234 <mbedtls_md_get_size>
 8029130:	b202      	sxth	r2, r0
    if( olen < hlen + min_slen + 2 )
 8029132:	ebb6 0f42 	cmp.w	r6, r2, lsl #1
    hlen = mbedtls_md_get_size( md_info );
 8029136:	4605      	mov	r5, r0
    if( olen < hlen + min_slen + 2 )
 8029138:	ea4f 0342 	mov.w	r3, r2, lsl #1
 802913c:	d35a      	bcc.n	80291f4 <mbedtls_rsa_rsassa_pss_sign+0xfc>
    else if( olen >= hlen + hlen + 2 )
 802913e:	3302      	adds	r3, #2
 8029140:	42b3      	cmp	r3, r6
        slen = hlen;
 8029142:	bf92      	itee	ls
 8029144:	4682      	movls	sl, r0
        slen = olen - hlen - 2;
 8029146:	f1a6 0a02 	subhi.w	sl, r6, #2
 802914a:	ebaa 0a00 	subhi.w	sl, sl, r0
    memset( sig, 0, olen );
 802914e:	4632      	mov	r2, r6
 8029150:	2100      	movs	r1, #0
 8029152:	4658      	mov	r0, fp
 8029154:	f006 fe87 	bl	802fe66 <memset>
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
 8029158:	4652      	mov	r2, sl
 802915a:	4648      	mov	r0, r9
 802915c:	a90c      	add	r1, sp, #48	; 0x30
 802915e:	47b8      	blx	r7
 8029160:	b178      	cbz	r0, 8029182 <mbedtls_rsa_rsassa_pss_sign+0x8a>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 8029162:	f5a0 4389 	sub.w	r3, r0, #17536	; 0x4480
}
 8029166:	4618      	mov	r0, r3
 8029168:	b015      	add	sp, #84	; 0x54
 802916a:	ecbd 8b02 	vpop	{d8}
 802916e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        md_info = mbedtls_md_info_from_type( md_alg );
 8029172:	f7fc fd6d 	bl	8025c50 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 8029176:	2800      	cmp	r0, #0
 8029178:	d03c      	beq.n	80291f4 <mbedtls_rsa_rsassa_pss_sign+0xfc>
        hashlen = mbedtls_md_get_size( md_info );
 802917a:	f7fd f85b 	bl	8026234 <mbedtls_md_get_size>
 802917e:	9021      	str	r0, [sp, #132]	; 0x84
 8029180:	e7cd      	b.n	802911e <mbedtls_rsa_rsassa_pss_sign+0x26>
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8029182:	f104 0308 	add.w	r3, r4, #8
 8029186:	9004      	str	r0, [sp, #16]
 8029188:	4618      	mov	r0, r3
 802918a:	ee08 3a10 	vmov	s16, r3
 802918e:	f7f8 f8b1 	bl	80212f4 <mbedtls_mpi_bitlen>
    *p++ = 0x01;
 8029192:	2101      	movs	r1, #1
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8029194:	4684      	mov	ip, r0
    p += olen - hlen - slen - 2;
 8029196:	1b73      	subs	r3, r6, r5
 8029198:	1e9a      	subs	r2, r3, #2
 802919a:	eba2 020a 	sub.w	r2, r2, sl
 802919e:	eb0b 0002 	add.w	r0, fp, r2
    *p++ = 0x01;
 80291a2:	4408      	add	r0, r1
 80291a4:	f80b 1002 	strb.w	r1, [fp, r2]
    memcpy( p, salt, slen );
 80291a8:	4652      	mov	r2, sl
 80291aa:	a90c      	add	r1, sp, #48	; 0x30
    p += olen - hlen - slen - 2;
 80291ac:	9307      	str	r3, [sp, #28]
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80291ae:	f8cd c018 	str.w	ip, [sp, #24]
    memcpy( p, salt, slen );
 80291b2:	9005      	str	r0, [sp, #20]
 80291b4:	f006 fe30 	bl	802fe18 <memcpy>
    mbedtls_md_init( &md_ctx );
 80291b8:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 80291bc:	4670      	mov	r0, lr
 80291be:	f7fc fd53 	bl	8025c68 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 80291c2:	9b04      	ldr	r3, [sp, #16]
 80291c4:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 80291c8:	461a      	mov	r2, r3
 80291ca:	4641      	mov	r1, r8
 80291cc:	4670      	mov	r0, lr
 80291ce:	f7fc fd9b 	bl	8025d08 <mbedtls_md_setup>
 80291d2:	4603      	mov	r3, r0
 80291d4:	b180      	cbz	r0, 80291f8 <mbedtls_rsa_rsassa_pss_sign+0x100>
    mbedtls_md_free( &md_ctx );
 80291d6:	a809      	add	r0, sp, #36	; 0x24
 80291d8:	9303      	str	r3, [sp, #12]
 80291da:	f7fc fd4b 	bl	8025c74 <mbedtls_md_free>
 80291de:	9b03      	ldr	r3, [sp, #12]
}
 80291e0:	4618      	mov	r0, r3
 80291e2:	b015      	add	sp, #84	; 0x54
 80291e4:	ecbd 8b02 	vpop	{d8}
 80291e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80291ec:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80291f0:	2b01      	cmp	r3, #1
 80291f2:	d090      	beq.n	8029116 <mbedtls_rsa_rsassa_pss_sign+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80291f4:	4b3e      	ldr	r3, [pc, #248]	; (80292f0 <mbedtls_rsa_rsassa_pss_sign+0x1f8>)
 80291f6:	e7b6      	b.n	8029166 <mbedtls_rsa_rsassa_pss_sign+0x6e>
    if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
 80291f8:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 80291fc:	4670      	mov	r0, lr
 80291fe:	f7fc fdbf 	bl	8025d80 <mbedtls_md_starts>
 8029202:	4603      	mov	r3, r0
 8029204:	2800      	cmp	r0, #0
 8029206:	d1e6      	bne.n	80291d6 <mbedtls_rsa_rsassa_pss_sign+0xde>
    p += slen;
 8029208:	9905      	ldr	r1, [sp, #20]
    if( ( ret = mbedtls_md_update( &md_ctx, p, 8 ) ) != 0 )
 802920a:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
    p += slen;
 802920e:	4688      	mov	r8, r1
 8029210:	44d0      	add	r8, sl
    if( ( ret = mbedtls_md_update( &md_ctx, p, 8 ) ) != 0 )
 8029212:	4641      	mov	r1, r8
 8029214:	2208      	movs	r2, #8
 8029216:	4670      	mov	r0, lr
 8029218:	f7fc fdcc 	bl	8025db4 <mbedtls_md_update>
 802921c:	4603      	mov	r3, r0
 802921e:	2800      	cmp	r0, #0
 8029220:	d1d9      	bne.n	80291d6 <mbedtls_rsa_rsassa_pss_sign+0xde>
    if( ( ret = mbedtls_md_update( &md_ctx, hash, hashlen ) ) != 0 )
 8029222:	e9dd 2121 	ldrd	r2, r1, [sp, #132]	; 0x84
 8029226:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 802922a:	4670      	mov	r0, lr
 802922c:	f7fc fdc2 	bl	8025db4 <mbedtls_md_update>
 8029230:	4603      	mov	r3, r0
 8029232:	2800      	cmp	r0, #0
 8029234:	d1cf      	bne.n	80291d6 <mbedtls_rsa_rsassa_pss_sign+0xde>
    if( ( ret = mbedtls_md_update( &md_ctx, salt, slen ) ) != 0 )
 8029236:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 802923a:	4652      	mov	r2, sl
 802923c:	4670      	mov	r0, lr
 802923e:	a90c      	add	r1, sp, #48	; 0x30
 8029240:	f7fc fdb8 	bl	8025db4 <mbedtls_md_update>
 8029244:	4603      	mov	r3, r0
 8029246:	2800      	cmp	r0, #0
 8029248:	d1c5      	bne.n	80291d6 <mbedtls_rsa_rsassa_pss_sign+0xde>
    if( ( ret = mbedtls_md_finish( &md_ctx, p ) ) != 0 )
 802924a:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 802924e:	4641      	mov	r1, r8
 8029250:	4670      	mov	r0, lr
 8029252:	f7fc fdc3 	bl	8025ddc <mbedtls_md_finish>
 8029256:	4603      	mov	r3, r0
 8029258:	2800      	cmp	r0, #0
 802925a:	d1bc      	bne.n	80291d6 <mbedtls_rsa_rsassa_pss_sign+0xde>
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 802925c:	9906      	ldr	r1, [sp, #24]
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
 802925e:	9a07      	ldr	r2, [sp, #28]
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8029260:	1e4b      	subs	r3, r1, #1
    if( msb % 8 == 0 )
 8029262:	f013 0f07 	tst.w	r3, #7
 8029266:	bf0c      	ite	eq
 8029268:	2001      	moveq	r0, #1
 802926a:	2000      	movne	r0, #0
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
 802926c:	1e51      	subs	r1, r2, #1
 802926e:	aa09      	add	r2, sp, #36	; 0x24
 8029270:	462b      	mov	r3, r5
 8029272:	9200      	str	r2, [sp, #0]
 8029274:	1a09      	subs	r1, r1, r0
 8029276:	4642      	mov	r2, r8
 8029278:	4458      	add	r0, fp
 802927a:	f7fe fc61 	bl	8027b40 <mgf_mask>
 802927e:	4603      	mov	r3, r0
 8029280:	2800      	cmp	r0, #0
 8029282:	d1a8      	bne.n	80291d6 <mbedtls_rsa_rsassa_pss_sign+0xde>
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8029284:	ee18 0a10 	vmov	r0, s16
 8029288:	f7f8 f834 	bl	80212f4 <mbedtls_mpi_bitlen>
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 802928c:	23ff      	movs	r3, #255	; 0xff
    *p++ = 0xBC;
 802928e:	22bc      	movs	r2, #188	; 0xbc
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 8029290:	ebc0 06c6 	rsb	r6, r0, r6, lsl #3
 8029294:	3601      	adds	r6, #1
 8029296:	fa43 f606 	asr.w	r6, r3, r6
 802929a:	f89b 3000 	ldrb.w	r3, [fp]
    mbedtls_platform_zeroize( salt, sizeof( salt ) );
 802929e:	2120      	movs	r1, #32
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 80292a0:	401e      	ands	r6, r3
    mbedtls_platform_zeroize( salt, sizeof( salt ) );
 80292a2:	a80c      	add	r0, sp, #48	; 0x30
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 80292a4:	f88b 6000 	strb.w	r6, [fp]
    *p++ = 0xBC;
 80292a8:	f808 2005 	strb.w	r2, [r8, r5]
    mbedtls_platform_zeroize( salt, sizeof( salt ) );
 80292ac:	f7fe fc3e 	bl	8027b2c <mbedtls_platform_zeroize>
    mbedtls_md_free( &md_ctx );
 80292b0:	a809      	add	r0, sp, #36	; 0x24
 80292b2:	f7fc fcdf 	bl	8025c74 <mbedtls_md_free>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );
 80292b6:	9b03      	ldr	r3, [sp, #12]
 80292b8:	b95b      	cbnz	r3, 80292d2 <mbedtls_rsa_rsassa_pss_sign+0x1da>
            ? mbedtls_rsa_public(  ctx, sig, sig )
 80292ba:	4620      	mov	r0, r4
 80292bc:	465a      	mov	r2, fp
 80292be:	4659      	mov	r1, fp
 80292c0:	f7ff f81a 	bl	80282f8 <mbedtls_rsa_public>
 80292c4:	4603      	mov	r3, r0
}
 80292c6:	4618      	mov	r0, r3
 80292c8:	b015      	add	sp, #84	; 0x54
 80292ca:	ecbd 8b02 	vpop	{d8}
 80292ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );
 80292d2:	465b      	mov	r3, fp
 80292d4:	464a      	mov	r2, r9
 80292d6:	4639      	mov	r1, r7
 80292d8:	4620      	mov	r0, r4
 80292da:	f8cd b000 	str.w	fp, [sp]
 80292de:	f7ff f875 	bl	80283cc <mbedtls_rsa_private>
 80292e2:	4603      	mov	r3, r0
}
 80292e4:	4618      	mov	r0, r3
 80292e6:	b015      	add	sp, #84	; 0x54
 80292e8:	ecbd 8b02 	vpop	{d8}
 80292ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80292f0:	ffffbf80 	.word	0xffffbf80

080292f4 <mbedtls_rsa_pkcs1_sign>:
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
 80292f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    switch( ctx->padding )
 80292f8:	f8d0 50a4 	ldr.w	r5, [r0, #164]	; 0xa4
{
 80292fc:	b084      	sub	sp, #16
 80292fe:	f89d c030 	ldrb.w	ip, [sp, #48]	; 0x30
 8029302:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8029306:	e9dd ea0d 	ldrd	lr, sl, [sp, #52]	; 0x34
    switch( ctx->padding )
 802930a:	b16d      	cbz	r5, 8029328 <mbedtls_rsa_pkcs1_sign+0x34>
 802930c:	2d01      	cmp	r5, #1
 802930e:	d106      	bne.n	802931e <mbedtls_rsa_pkcs1_sign+0x2a>
                                              hashlen, hash, sig );
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
 8029310:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8029314:	b004      	add	sp, #16
 8029316:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
 802931a:	f7ff beed 	b.w	80290f8 <mbedtls_rsa_rsassa_pss_sign>
    switch( ctx->padding )
 802931e:	4d4f      	ldr	r5, [pc, #316]	; (802945c <mbedtls_rsa_pkcs1_sign+0x168>)
}
 8029320:	4628      	mov	r0, r5
 8029322:	b004      	add	sp, #16
 8029324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
 8029328:	4604      	mov	r4, r0
    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash,
 802932a:	f8cd 9000 	str.w	r9, [sp]
 802932e:	4688      	mov	r8, r1
 8029330:	4617      	mov	r7, r2
 8029332:	461e      	mov	r6, r3
 8029334:	4652      	mov	r2, sl
 8029336:	4671      	mov	r1, lr
 8029338:	4660      	mov	r0, ip
 802933a:	6863      	ldr	r3, [r4, #4]
 802933c:	f7fe fcae 	bl	8027c9c <rsa_rsassa_pkcs1_v15_encode>
 8029340:	4605      	mov	r5, r0
 8029342:	2800      	cmp	r0, #0
 8029344:	d1ec      	bne.n	8029320 <mbedtls_rsa_pkcs1_sign+0x2c>
    if( mode == MBEDTLS_RSA_PUBLIC )
 8029346:	2e00      	cmp	r6, #0
 8029348:	d06f      	beq.n	802942a <mbedtls_rsa_pkcs1_sign+0x136>
    sig_try = mbedtls_calloc( 1, ctx->len );
 802934a:	6861      	ldr	r1, [r4, #4]
 802934c:	2001      	movs	r0, #1
 802934e:	9103      	str	r1, [sp, #12]
 8029350:	f006 fd12 	bl	802fd78 <calloc>
    if( sig_try == NULL )
 8029354:	4682      	mov	sl, r0
 8029356:	2800      	cmp	r0, #0
 8029358:	d07c      	beq.n	8029454 <mbedtls_rsa_pkcs1_sign+0x160>
    verif = mbedtls_calloc( 1, ctx->len );
 802935a:	2001      	movs	r0, #1
 802935c:	9903      	ldr	r1, [sp, #12]
 802935e:	f006 fd0b 	bl	802fd78 <calloc>
    if( verif == NULL )
 8029362:	4606      	mov	r6, r0
 8029364:	2800      	cmp	r0, #0
 8029366:	d06f      	beq.n	8029448 <mbedtls_rsa_pkcs1_sign+0x154>
    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
 8029368:	463a      	mov	r2, r7
 802936a:	4641      	mov	r1, r8
 802936c:	464b      	mov	r3, r9
 802936e:	4620      	mov	r0, r4
 8029370:	f8cd a000 	str.w	sl, [sp]
 8029374:	f7ff f82a 	bl	80283cc <mbedtls_rsa_private>
 8029378:	4605      	mov	r5, r0
 802937a:	2800      	cmp	r0, #0
 802937c:	d14b      	bne.n	8029416 <mbedtls_rsa_pkcs1_sign+0x122>
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
 802937e:	4632      	mov	r2, r6
 8029380:	4651      	mov	r1, sl
 8029382:	4620      	mov	r0, r4
 8029384:	f7fe ffb8 	bl	80282f8 <mbedtls_rsa_public>
 8029388:	4605      	mov	r5, r0
 802938a:	2800      	cmp	r0, #0
 802938c:	d143      	bne.n	8029416 <mbedtls_rsa_pkcs1_sign+0x122>
    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 802938e:	6862      	ldr	r2, [r4, #4]
    for( i = 0; i < n; i++ )
 8029390:	2a00      	cmp	r2, #0
 8029392:	d052      	beq.n	802943a <mbedtls_rsa_pkcs1_sign+0x146>
 8029394:	1e53      	subs	r3, r2, #1
 8029396:	2b03      	cmp	r3, #3
 8029398:	d954      	bls.n	8029444 <mbedtls_rsa_pkcs1_sign+0x150>
 802939a:	464c      	mov	r4, r9
 802939c:	4631      	mov	r1, r6
 802939e:	f022 0c03 	bic.w	ip, r2, #3
 80293a2:	44b4      	add	ip, r6
        diff |= A[i] ^ B[i];
 80293a4:	f851 7b04 	ldr.w	r7, [r1], #4
 80293a8:	f854 3b04 	ldr.w	r3, [r4], #4
 80293ac:	4561      	cmp	r1, ip
 80293ae:	ea83 0307 	eor.w	r3, r3, r7
 80293b2:	ea40 0003 	orr.w	r0, r0, r3
    for( i = 0; i < n; i++ )
 80293b6:	d1f5      	bne.n	80293a4 <mbedtls_rsa_pkcs1_sign+0xb0>
 80293b8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80293bc:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80293c0:	4303      	orrs	r3, r0
 80293c2:	430b      	orrs	r3, r1
 80293c4:	ea43 6010 	orr.w	r0, r3, r0, lsr #24
 80293c8:	0791      	lsls	r1, r2, #30
 80293ca:	b2c0      	uxtb	r0, r0
 80293cc:	f022 0303 	bic.w	r3, r2, #3
 80293d0:	d01f      	beq.n	8029412 <mbedtls_rsa_pkcs1_sign+0x11e>
        diff |= A[i] ^ B[i];
 80293d2:	5cf1      	ldrb	r1, [r6, r3]
 80293d4:	f819 7003 	ldrb.w	r7, [r9, r3]
    for( i = 0; i < n; i++ )
 80293d8:	1c5c      	adds	r4, r3, #1
        diff |= A[i] ^ B[i];
 80293da:	4079      	eors	r1, r7
    for( i = 0; i < n; i++ )
 80293dc:	42a2      	cmp	r2, r4
        diff |= A[i] ^ B[i];
 80293de:	ea40 0001 	orr.w	r0, r0, r1
    for( i = 0; i < n; i++ )
 80293e2:	d916      	bls.n	8029412 <mbedtls_rsa_pkcs1_sign+0x11e>
        diff |= A[i] ^ B[i];
 80293e4:	5d31      	ldrb	r1, [r6, r4]
 80293e6:	f819 7004 	ldrb.w	r7, [r9, r4]
    for( i = 0; i < n; i++ )
 80293ea:	1c9c      	adds	r4, r3, #2
        diff |= A[i] ^ B[i];
 80293ec:	4079      	eors	r1, r7
 80293ee:	4308      	orrs	r0, r1
    for( i = 0; i < n; i++ )
 80293f0:	42a2      	cmp	r2, r4
        diff |= A[i] ^ B[i];
 80293f2:	b2c0      	uxtb	r0, r0
    for( i = 0; i < n; i++ )
 80293f4:	d90d      	bls.n	8029412 <mbedtls_rsa_pkcs1_sign+0x11e>
        diff |= A[i] ^ B[i];
 80293f6:	5d31      	ldrb	r1, [r6, r4]
 80293f8:	f819 4004 	ldrb.w	r4, [r9, r4]
    for( i = 0; i < n; i++ )
 80293fc:	3303      	adds	r3, #3
        diff |= A[i] ^ B[i];
 80293fe:	4061      	eors	r1, r4
    for( i = 0; i < n; i++ )
 8029400:	429a      	cmp	r2, r3
        diff |= A[i] ^ B[i];
 8029402:	ea40 0001 	orr.w	r0, r0, r1
    for( i = 0; i < n; i++ )
 8029406:	d904      	bls.n	8029412 <mbedtls_rsa_pkcs1_sign+0x11e>
        diff |= A[i] ^ B[i];
 8029408:	f819 1003 	ldrb.w	r1, [r9, r3]
 802940c:	5cf3      	ldrb	r3, [r6, r3]
 802940e:	404b      	eors	r3, r1
 8029410:	4318      	orrs	r0, r3
    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 8029412:	b190      	cbz	r0, 802943a <mbedtls_rsa_pkcs1_sign+0x146>
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
 8029414:	4d12      	ldr	r5, [pc, #72]	; (8029460 <mbedtls_rsa_pkcs1_sign+0x16c>)
    mbedtls_free( sig_try );
 8029416:	4650      	mov	r0, sl
 8029418:	f006 fce8 	bl	802fdec <free>
    mbedtls_free( verif );
 802941c:	4630      	mov	r0, r6
 802941e:	f006 fce5 	bl	802fdec <free>
}
 8029422:	4628      	mov	r0, r5
 8029424:	b004      	add	sp, #16
 8029426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 802942a:	4620      	mov	r0, r4
 802942c:	464a      	mov	r2, r9
 802942e:	4649      	mov	r1, r9
}
 8029430:	b004      	add	sp, #16
 8029432:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 8029436:	f7fe bf5f 	b.w	80282f8 <mbedtls_rsa_public>
    memcpy( sig, sig_try, ctx->len );
 802943a:	4648      	mov	r0, r9
 802943c:	4651      	mov	r1, sl
 802943e:	f006 fceb 	bl	802fe18 <memcpy>
 8029442:	e7e8      	b.n	8029416 <mbedtls_rsa_pkcs1_sign+0x122>
    for( i = 0; i < n; i++ )
 8029444:	4603      	mov	r3, r0
 8029446:	e7c4      	b.n	80293d2 <mbedtls_rsa_pkcs1_sign+0xde>
        mbedtls_free( sig_try );
 8029448:	4650      	mov	r0, sl
 802944a:	f006 fccf 	bl	802fdec <free>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 802944e:	f06f 050f 	mvn.w	r5, #15
 8029452:	e765      	b.n	8029320 <mbedtls_rsa_pkcs1_sign+0x2c>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8029454:	f06f 050f 	mvn.w	r5, #15
 8029458:	e762      	b.n	8029320 <mbedtls_rsa_pkcs1_sign+0x2c>
 802945a:	bf00      	nop
 802945c:	ffffbf00 	.word	0xffffbf00
 8029460:	ffffbd00 	.word	0xffffbd00

08029464 <mbedtls_rsa_rsassa_pss_verify_ext>:
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
 8029464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8029468:	2b01      	cmp	r3, #1
{
 802946a:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 802946e:	4605      	mov	r5, r0
 8029470:	f89d 8460 	ldrb.w	r8, [sp, #1120]	; 0x460
 8029474:	f89d 946c 	ldrb.w	r9, [sp, #1132]	; 0x46c
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8029478:	f000 8092 	beq.w	80295a0 <mbedtls_rsa_rsassa_pss_verify_ext+0x13c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    siglen = ctx->len;
 802947c:	6846      	ldr	r6, [r0, #4]

    if( siglen < 16 || siglen > sizeof( buf ) )
 802947e:	f1a6 0410 	sub.w	r4, r6, #16
 8029482:	f5b4 7f7c 	cmp.w	r4, #1008	; 0x3f0
 8029486:	f200 80d2 	bhi.w	802962e <mbedtls_rsa_rsassa_pss_verify_ext+0x1ca>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 802948a:	2b00      	cmp	r3, #0
 802948c:	f040 8092 	bne.w	80295b4 <mbedtls_rsa_rsassa_pss_verify_ext+0x150>
          ? mbedtls_rsa_public(  ctx, sig, buf )
 8029490:	af10      	add	r7, sp, #64	; 0x40
 8029492:	463a      	mov	r2, r7
 8029494:	f8dd 1474 	ldr.w	r1, [sp, #1140]	; 0x474
 8029498:	f7fe ff2e 	bl	80282f8 <mbedtls_rsa_public>
 802949c:	4604      	mov	r4, r0

    if( ret != 0 )
 802949e:	2c00      	cmp	r4, #0
 80294a0:	d179      	bne.n	8029596 <mbedtls_rsa_rsassa_pss_verify_ext+0x132>
        return( ret );

    p = buf;

    if( buf[siglen - 1] != 0xBC )
 80294a2:	1e74      	subs	r4, r6, #1
 80294a4:	5d3b      	ldrb	r3, [r7, r4]
 80294a6:	2bbc      	cmp	r3, #188	; 0xbc
 80294a8:	f040 80c3 	bne.w	8029632 <mbedtls_rsa_rsassa_pss_verify_ext+0x1ce>
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );

    if( md_alg != MBEDTLS_MD_NONE )
 80294ac:	f1b8 0f00 	cmp.w	r8, #0
 80294b0:	d009      	beq.n	80294c6 <mbedtls_rsa_rsassa_pss_verify_ext+0x62>
    {
        /* Gather length of hash to sign */
        md_info = mbedtls_md_info_from_type( md_alg );
 80294b2:	4640      	mov	r0, r8
 80294b4:	f7fc fbcc 	bl	8025c50 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 80294b8:	2800      	cmp	r0, #0
 80294ba:	f000 80b8 	beq.w	802962e <mbedtls_rsa_rsassa_pss_verify_ext+0x1ca>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 80294be:	f7fc feb9 	bl	8026234 <mbedtls_md_get_size>
 80294c2:	f8cd 0464 	str.w	r0, [sp, #1124]	; 0x464
    }

    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
 80294c6:	4648      	mov	r0, r9
 80294c8:	f7fc fbc2 	bl	8025c50 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80294cc:	4682      	mov	sl, r0
 80294ce:	2800      	cmp	r0, #0
 80294d0:	f000 80ad 	beq.w	802962e <mbedtls_rsa_rsassa_pss_verify_ext+0x1ca>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80294d4:	f7fc feae 	bl	8026234 <mbedtls_md_get_size>

    memset( zeros, 0, 8 );
 80294d8:	2300      	movs	r3, #0
    hlen = mbedtls_md_get_size( md_info );
 80294da:	4681      	mov	r9, r0

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80294dc:	f105 0008 	add.w	r0, r5, #8
    memset( zeros, 0, 8 );
 80294e0:	e9cd 3303 	strd	r3, r3, [sp, #12]
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80294e4:	f7f7 ff06 	bl	80212f4 <mbedtls_mpi_bitlen>

    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
 80294e8:	783a      	ldrb	r2, [r7, #0]
 80294ea:	f1c6 0301 	rsb	r3, r6, #1
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80294ee:	f100 38ff 	add.w	r8, r0, #4294967295
    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
 80294f2:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 80294f6:	fa52 f303 	asrs.w	r3, r2, r3
 80294fa:	f040 8098 	bne.w	802962e <mbedtls_rsa_rsassa_pss_verify_ext+0x1ca>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
 80294fe:	f018 0f07 	tst.w	r8, #7
    {
        p++;
        siglen -= 1;
 8029502:	bf08      	it	eq
 8029504:	4626      	moveq	r6, r4
    }

    if( siglen < hlen + 2 )
 8029506:	f109 0302 	add.w	r3, r9, #2
    p = buf;
 802950a:	bf14      	ite	ne
 802950c:	463d      	movne	r5, r7
        p++;
 802950e:	f10d 0541 	addeq.w	r5, sp, #65	; 0x41
    if( siglen < hlen + 2 )
 8029512:	42b3      	cmp	r3, r6
 8029514:	f200 808b 	bhi.w	802962e <mbedtls_rsa_rsassa_pss_verify_ext+0x1ca>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    hash_start = p + siglen - hlen - 1;

    mbedtls_md_init( &md_ctx );
 8029518:	a805      	add	r0, sp, #20
 802951a:	f7fc fba5 	bl	8025c68 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 802951e:	4651      	mov	r1, sl
 8029520:	2200      	movs	r2, #0
 8029522:	a805      	add	r0, sp, #20
 8029524:	f7fc fbf0 	bl	8025d08 <mbedtls_md_setup>
 8029528:	4604      	mov	r4, r0
 802952a:	bb88      	cbnz	r0, 8029590 <mbedtls_rsa_rsassa_pss_verify_ext+0x12c>
    hash_start = p + siglen - hlen - 1;
 802952c:	ea6f 0109 	mvn.w	r1, r9
 8029530:	4431      	add	r1, r6
 8029532:	eb05 0a01 	add.w	sl, r5, r1
        goto exit;

    ret = mgf_mask( p, siglen - hlen - 1, hash_start, hlen, &md_ctx );
 8029536:	ab05      	add	r3, sp, #20
 8029538:	9300      	str	r3, [sp, #0]
 802953a:	4652      	mov	r2, sl
 802953c:	464b      	mov	r3, r9
 802953e:	4628      	mov	r0, r5
 8029540:	f7fe fafe 	bl	8027b40 <mgf_mask>
    if( ret != 0 )
 8029544:	4604      	mov	r4, r0
 8029546:	bb18      	cbnz	r0, 8029590 <mbedtls_rsa_rsassa_pss_verify_ext+0x12c>
        goto exit;

    buf[0] &= 0xFF >> ( siglen * 8 - msb );
 8029548:	23ff      	movs	r3, #255	; 0xff
 802954a:	ebc8 06c6 	rsb	r6, r8, r6, lsl #3
 802954e:	f897 8000 	ldrb.w	r8, [r7]
 8029552:	fa43 f606 	asr.w	r6, r3, r6

    while( p < hash_start - 1 && *p == 0 )
 8029556:	f10a 31ff 	add.w	r1, sl, #4294967295
    buf[0] &= 0xFF >> ( siglen * 8 - msb );
 802955a:	ea06 0608 	and.w	r6, r6, r8
    while( p < hash_start - 1 && *p == 0 )
 802955e:	428d      	cmp	r5, r1
 8029560:	bf38      	it	cc
 8029562:	462b      	movcc	r3, r5
    buf[0] &= 0xFF >> ( siglen * 8 - msb );
 8029564:	703e      	strb	r6, [r7, #0]
    while( p < hash_start - 1 && *p == 0 )
 8029566:	d302      	bcc.n	802956e <mbedtls_rsa_rsassa_pss_verify_ext+0x10a>
 8029568:	e065      	b.n	8029636 <mbedtls_rsa_rsassa_pss_verify_ext+0x1d2>
 802956a:	4299      	cmp	r1, r3
 802956c:	d05c      	beq.n	8029628 <mbedtls_rsa_rsassa_pss_verify_ext+0x1c4>
 802956e:	781a      	ldrb	r2, [r3, #0]
 8029570:	461d      	mov	r5, r3
 8029572:	3301      	adds	r3, #1
 8029574:	2a00      	cmp	r2, #0
 8029576:	d0f8      	beq.n	802956a <mbedtls_rsa_rsassa_pss_verify_ext+0x106>
        p++;

    if( *p++ != 0x01 )
 8029578:	2a01      	cmp	r2, #1
 802957a:	d108      	bne.n	802958e <mbedtls_rsa_rsassa_pss_verify_ext+0x12a>
        goto exit;
    }

    observed_salt_len = hash_start - p;

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 802957c:	f8dd 3470 	ldr.w	r3, [sp, #1136]	; 0x470
    if( *p++ != 0x01 )
 8029580:	3501      	adds	r5, #1
    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 8029582:	1c5a      	adds	r2, r3, #1
    observed_salt_len = hash_start - p;
 8029584:	ebaa 0605 	sub.w	r6, sl, r5
    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 8029588:	d01d      	beq.n	80295c6 <mbedtls_rsa_rsassa_pss_verify_ext+0x162>
 802958a:	429e      	cmp	r6, r3
 802958c:	d01b      	beq.n	80295c6 <mbedtls_rsa_rsassa_pss_verify_ext+0x162>
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 802958e:	4c2b      	ldr	r4, [pc, #172]	; (802963c <mbedtls_rsa_rsassa_pss_verify_ext+0x1d8>)
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
        goto exit;
    }

exit:
    mbedtls_md_free( &md_ctx );
 8029590:	a805      	add	r0, sp, #20
 8029592:	f7fc fb6f 	bl	8025c74 <mbedtls_md_free>

    return( ret );
}
 8029596:	4620      	mov	r0, r4
 8029598:	f50d 6d88 	add.w	sp, sp, #1088	; 0x440
 802959c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80295a0:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80295a4:	2b01      	cmp	r3, #1
 80295a6:	d142      	bne.n	802962e <mbedtls_rsa_rsassa_pss_verify_ext+0x1ca>
    siglen = ctx->len;
 80295a8:	6846      	ldr	r6, [r0, #4]
    if( siglen < 16 || siglen > sizeof( buf ) )
 80295aa:	f1a6 0310 	sub.w	r3, r6, #16
 80295ae:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 80295b2:	d83c      	bhi.n	802962e <mbedtls_rsa_rsassa_pss_verify_ext+0x1ca>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 80295b4:	af10      	add	r7, sp, #64	; 0x40
 80295b6:	4628      	mov	r0, r5
 80295b8:	f8dd 3474 	ldr.w	r3, [sp, #1140]	; 0x474
 80295bc:	9700      	str	r7, [sp, #0]
 80295be:	f7fe ff05 	bl	80283cc <mbedtls_rsa_private>
 80295c2:	4604      	mov	r4, r0
 80295c4:	e76b      	b.n	802949e <mbedtls_rsa_rsassa_pss_verify_ext+0x3a>
    ret = mbedtls_md_starts( &md_ctx );
 80295c6:	a805      	add	r0, sp, #20
 80295c8:	f7fc fbda 	bl	8025d80 <mbedtls_md_starts>
    if ( ret != 0 )
 80295cc:	4604      	mov	r4, r0
 80295ce:	2800      	cmp	r0, #0
 80295d0:	d1de      	bne.n	8029590 <mbedtls_rsa_rsassa_pss_verify_ext+0x12c>
    ret = mbedtls_md_update( &md_ctx, zeros, 8 );
 80295d2:	2208      	movs	r2, #8
 80295d4:	a903      	add	r1, sp, #12
 80295d6:	a805      	add	r0, sp, #20
 80295d8:	f7fc fbec 	bl	8025db4 <mbedtls_md_update>
    if ( ret != 0 )
 80295dc:	4604      	mov	r4, r0
 80295de:	2800      	cmp	r0, #0
 80295e0:	d1d6      	bne.n	8029590 <mbedtls_rsa_rsassa_pss_verify_ext+0x12c>
    ret = mbedtls_md_update( &md_ctx, hash, hashlen );
 80295e2:	f8dd 2464 	ldr.w	r2, [sp, #1124]	; 0x464
 80295e6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
 80295ea:	a805      	add	r0, sp, #20
 80295ec:	f7fc fbe2 	bl	8025db4 <mbedtls_md_update>
    if ( ret != 0 )
 80295f0:	4604      	mov	r4, r0
 80295f2:	2800      	cmp	r0, #0
 80295f4:	d1cc      	bne.n	8029590 <mbedtls_rsa_rsassa_pss_verify_ext+0x12c>
    ret = mbedtls_md_update( &md_ctx, p, observed_salt_len );
 80295f6:	4632      	mov	r2, r6
 80295f8:	4629      	mov	r1, r5
 80295fa:	a805      	add	r0, sp, #20
 80295fc:	f7fc fbda 	bl	8025db4 <mbedtls_md_update>
    if ( ret != 0 )
 8029600:	4604      	mov	r4, r0
 8029602:	2800      	cmp	r0, #0
 8029604:	d1c4      	bne.n	8029590 <mbedtls_rsa_rsassa_pss_verify_ext+0x12c>
    ret = mbedtls_md_finish( &md_ctx, result );
 8029606:	a908      	add	r1, sp, #32
 8029608:	a805      	add	r0, sp, #20
 802960a:	f7fc fbe7 	bl	8025ddc <mbedtls_md_finish>
    if ( ret != 0 )
 802960e:	4604      	mov	r4, r0
 8029610:	2800      	cmp	r0, #0
 8029612:	d1bd      	bne.n	8029590 <mbedtls_rsa_rsassa_pss_verify_ext+0x12c>
    if( memcmp( hash_start, result, hlen ) != 0 )
 8029614:	464a      	mov	r2, r9
 8029616:	4650      	mov	r0, sl
 8029618:	a908      	add	r1, sp, #32
 802961a:	f006 fbef 	bl	802fdfc <memcmp>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 802961e:	4b08      	ldr	r3, [pc, #32]	; (8029640 <mbedtls_rsa_rsassa_pss_verify_ext+0x1dc>)
 8029620:	1e04      	subs	r4, r0, #0
 8029622:	bf18      	it	ne
 8029624:	461c      	movne	r4, r3
 8029626:	e7b3      	b.n	8029590 <mbedtls_rsa_rsassa_pss_verify_ext+0x12c>
 8029628:	786a      	ldrb	r2, [r5, #1]
        p++;
 802962a:	460d      	mov	r5, r1
 802962c:	e7a4      	b.n	8029578 <mbedtls_rsa_rsassa_pss_verify_ext+0x114>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 802962e:	4c05      	ldr	r4, [pc, #20]	; (8029644 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e0>)
 8029630:	e7b1      	b.n	8029596 <mbedtls_rsa_rsassa_pss_verify_ext+0x132>
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 8029632:	4c02      	ldr	r4, [pc, #8]	; (802963c <mbedtls_rsa_rsassa_pss_verify_ext+0x1d8>)
 8029634:	e7af      	b.n	8029596 <mbedtls_rsa_rsassa_pss_verify_ext+0x132>
 8029636:	782a      	ldrb	r2, [r5, #0]
 8029638:	e79e      	b.n	8029578 <mbedtls_rsa_rsassa_pss_verify_ext+0x114>
 802963a:	bf00      	nop
 802963c:	ffffbf00 	.word	0xffffbf00
 8029640:	ffffbc80 	.word	0xffffbc80
 8029644:	ffffbf80 	.word	0xffffbf80

08029648 <mbedtls_rsa_rsassa_pkcs1_v15_verify>:
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
 8029648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                        hashlen == 0 ) ||
                      hash != NULL );

    sig_len = ctx->len;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 802964c:	2b01      	cmp	r3, #1
{
 802964e:	b083      	sub	sp, #12
 8029650:	4680      	mov	r8, r0
 8029652:	4699      	mov	r9, r3
 8029654:	468a      	mov	sl, r1
 8029656:	4693      	mov	fp, r2
    sig_len = ctx->len;
 8029658:	6846      	ldr	r6, [r0, #4]
{
 802965a:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 802965e:	d104      	bne.n	802966a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x22>
 8029660:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8029664:	2b00      	cmp	r3, #0
 8029666:	f040 8088 	bne.w	802977a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x132>

    /*
     * Prepare expected PKCS1 v1.5 encoding of hash.
     */

    if( ( encoded          = mbedtls_calloc( 1, sig_len ) ) == NULL ||
 802966a:	4631      	mov	r1, r6
 802966c:	2001      	movs	r0, #1
 802966e:	f006 fb83 	bl	802fd78 <calloc>
 8029672:	4607      	mov	r7, r0
 8029674:	2800      	cmp	r0, #0
 8029676:	f000 8089 	beq.w	802978c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x144>
        ( encoded_expected = mbedtls_calloc( 1, sig_len ) ) == NULL )
 802967a:	4631      	mov	r1, r6
 802967c:	2001      	movs	r0, #1
 802967e:	f006 fb7b 	bl	802fd78 <calloc>
    if( ( encoded          = mbedtls_calloc( 1, sig_len ) ) == NULL ||
 8029682:	4605      	mov	r5, r0
 8029684:	2800      	cmp	r0, #0
 8029686:	d07a      	beq.n	802977e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x136>
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
        goto cleanup;
    }

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash, sig_len,
 8029688:	e9dd 120d 	ldrd	r1, r2, [sp, #52]	; 0x34
 802968c:	9000      	str	r0, [sp, #0]
 802968e:	4633      	mov	r3, r6
 8029690:	4620      	mov	r0, r4
 8029692:	f7fe fb03 	bl	8027c9c <rsa_rsassa_pkcs1_v15_encode>
 8029696:	4604      	mov	r4, r0
 8029698:	2800      	cmp	r0, #0
 802969a:	d150      	bne.n	802973e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xf6>
     * Apply RSA primitive to get what should be PKCS1 encoded hash.
     */

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, encoded )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
 802969c:	f1b9 0f00 	cmp.w	r9, #0
 80296a0:	d15f      	bne.n	8029762 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x11a>
          ? mbedtls_rsa_public(  ctx, sig, encoded )
 80296a2:	4640      	mov	r0, r8
 80296a4:	463a      	mov	r2, r7
 80296a6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80296a8:	f7fe fe26 	bl	80282f8 <mbedtls_rsa_public>
 80296ac:	4604      	mov	r4, r0
    if( ret != 0 )
 80296ae:	2c00      	cmp	r4, #0
 80296b0:	d145      	bne.n	802973e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xf6>
    for( i = 0; i < n; i++ )
 80296b2:	2e00      	cmp	r6, #0
 80296b4:	d043      	beq.n	802973e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xf6>
 80296b6:	1e73      	subs	r3, r6, #1
 80296b8:	2b03      	cmp	r3, #3
 80296ba:	d95b      	bls.n	8029774 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x12c>
 80296bc:	462a      	mov	r2, r5
 80296be:	4621      	mov	r1, r4
 80296c0:	f026 0e03 	bic.w	lr, r6, #3
 80296c4:	44ae      	add	lr, r5
 80296c6:	1f38      	subs	r0, r7, #4
        diff |= A[i] ^ B[i];
 80296c8:	f852 3b04 	ldr.w	r3, [r2], #4
 80296cc:	f850 cf04 	ldr.w	ip, [r0, #4]!
 80296d0:	4572      	cmp	r2, lr
 80296d2:	ea83 030c 	eor.w	r3, r3, ip
 80296d6:	ea41 0103 	orr.w	r1, r1, r3
    for( i = 0; i < n; i++ )
 80296da:	d1f5      	bne.n	80296c8 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x80>
 80296dc:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80296e0:	f3c1 4207 	ubfx	r2, r1, #16, #8
 80296e4:	430b      	orrs	r3, r1
 80296e6:	4313      	orrs	r3, r2
 80296e8:	ea43 6111 	orr.w	r1, r3, r1, lsr #24
 80296ec:	07b2      	lsls	r2, r6, #30
 80296ee:	b2c9      	uxtb	r1, r1
 80296f0:	f026 0303 	bic.w	r3, r6, #3
 80296f4:	d01f      	beq.n	8029736 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xee>
        diff |= A[i] ^ B[i];
 80296f6:	5cfa      	ldrb	r2, [r7, r3]
 80296f8:	f815 c003 	ldrb.w	ip, [r5, r3]
    for( i = 0; i < n; i++ )
 80296fc:	1c58      	adds	r0, r3, #1
        diff |= A[i] ^ B[i];
 80296fe:	ea82 020c 	eor.w	r2, r2, ip
    for( i = 0; i < n; i++ )
 8029702:	4286      	cmp	r6, r0
        diff |= A[i] ^ B[i];
 8029704:	ea41 0102 	orr.w	r1, r1, r2
    for( i = 0; i < n; i++ )
 8029708:	d915      	bls.n	8029736 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xee>
        diff |= A[i] ^ B[i];
 802970a:	5c3a      	ldrb	r2, [r7, r0]
 802970c:	f815 c000 	ldrb.w	ip, [r5, r0]
    for( i = 0; i < n; i++ )
 8029710:	1c98      	adds	r0, r3, #2
        diff |= A[i] ^ B[i];
 8029712:	ea82 020c 	eor.w	r2, r2, ip
 8029716:	4311      	orrs	r1, r2
    for( i = 0; i < n; i++ )
 8029718:	4286      	cmp	r6, r0
        diff |= A[i] ^ B[i];
 802971a:	b2c9      	uxtb	r1, r1
    for( i = 0; i < n; i++ )
 802971c:	d90b      	bls.n	8029736 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xee>
        diff |= A[i] ^ B[i];
 802971e:	5c3a      	ldrb	r2, [r7, r0]
 8029720:	5c28      	ldrb	r0, [r5, r0]
    for( i = 0; i < n; i++ )
 8029722:	3303      	adds	r3, #3
        diff |= A[i] ^ B[i];
 8029724:	4042      	eors	r2, r0
    for( i = 0; i < n; i++ )
 8029726:	429e      	cmp	r6, r3
        diff |= A[i] ^ B[i];
 8029728:	ea41 0102 	orr.w	r1, r1, r2
    for( i = 0; i < n; i++ )
 802972c:	d903      	bls.n	8029736 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xee>
        diff |= A[i] ^ B[i];
 802972e:	5cea      	ldrb	r2, [r5, r3]
 8029730:	5cfb      	ldrb	r3, [r7, r3]
 8029732:	4053      	eors	r3, r2
 8029734:	4319      	orrs	r1, r3
     */

    if( ( ret = mbedtls_safer_memcmp( encoded, encoded_expected,
                                      sig_len ) ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 8029736:	4b17      	ldr	r3, [pc, #92]	; (8029794 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x14c>)
 8029738:	2900      	cmp	r1, #0
 802973a:	bf18      	it	ne
 802973c:	461c      	movne	r4, r3

cleanup:

    if( encoded != NULL )
    {
        mbedtls_platform_zeroize( encoded, sig_len );
 802973e:	4631      	mov	r1, r6
 8029740:	4638      	mov	r0, r7
 8029742:	f7fe f9f3 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( encoded );
 8029746:	4638      	mov	r0, r7
 8029748:	f006 fb50 	bl	802fdec <free>
    }

    if( encoded_expected != NULL )
    {
        mbedtls_platform_zeroize( encoded_expected, sig_len );
 802974c:	4628      	mov	r0, r5
 802974e:	4631      	mov	r1, r6
 8029750:	f7fe f9ec 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( encoded_expected );
 8029754:	4628      	mov	r0, r5
 8029756:	f006 fb49 	bl	802fdec <free>
    }

    return( ret );
}
 802975a:	4620      	mov	r0, r4
 802975c:	b003      	add	sp, #12
 802975e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
 8029762:	465a      	mov	r2, fp
 8029764:	4651      	mov	r1, sl
 8029766:	4640      	mov	r0, r8
 8029768:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802976a:	9700      	str	r7, [sp, #0]
 802976c:	f7fe fe2e 	bl	80283cc <mbedtls_rsa_private>
 8029770:	4604      	mov	r4, r0
 8029772:	e79c      	b.n	80296ae <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x66>
    unsigned char diff = 0;
 8029774:	4621      	mov	r1, r4
    for( i = 0; i < n; i++ )
 8029776:	4623      	mov	r3, r4
 8029778:	e7bd      	b.n	80296f6 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xae>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 802977a:	4c07      	ldr	r4, [pc, #28]	; (8029798 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x150>)
 802977c:	e7ed      	b.n	802975a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x112>
        mbedtls_platform_zeroize( encoded, sig_len );
 802977e:	4638      	mov	r0, r7
 8029780:	4631      	mov	r1, r6
 8029782:	f7fe f9d3 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( encoded );
 8029786:	4638      	mov	r0, r7
 8029788:	f006 fb30 	bl	802fdec <free>
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
 802978c:	f06f 040f 	mvn.w	r4, #15
 8029790:	e7e3      	b.n	802975a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x112>
 8029792:	bf00      	nop
 8029794:	ffffbc80 	.word	0xffffbc80
 8029798:	ffffbf80 	.word	0xffffbf80

0802979c <mbedtls_rsa_pkcs1_verify>:
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
 802979c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    switch( ctx->padding )
 80297a0:	f8d0 c0a4 	ldr.w	ip, [r0, #164]	; 0xa4
{
 80297a4:	b086      	sub	sp, #24
 80297a6:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
 80297aa:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 80297ae:	e9dd 890f 	ldrd	r8, r9, [sp, #60]	; 0x3c
    switch( ctx->padding )
 80297b2:	f1bc 0f00 	cmp.w	ip, #0
 80297b6:	d021      	beq.n	80297fc <mbedtls_rsa_pkcs1_verify+0x60>
 80297b8:	f1bc 0f01 	cmp.w	ip, #1
 80297bc:	d11a      	bne.n	80297f4 <mbedtls_rsa_pkcs1_verify+0x58>
                                                hashlen, hash, sig );
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
 80297be:	461d      	mov	r5, r3
    mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
 80297c0:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
 80297c4:	4604      	mov	r4, r0
 80297c6:	460f      	mov	r7, r1
 80297c8:	4616      	mov	r6, r2
                             : md_alg;
 80297ca:	b9f3      	cbnz	r3, 802980a <mbedtls_rsa_pkcs1_verify+0x6e>
 80297cc:	4673      	mov	r3, lr
    return( mbedtls_rsa_rsassa_pss_verify_ext( ctx, f_rng, p_rng, mode,
 80297ce:	f04f 3cff 	mov.w	ip, #4294967295
 80297d2:	e9cd 9302 	strd	r9, r3, [sp, #8]
 80297d6:	4632      	mov	r2, r6
 80297d8:	462b      	mov	r3, r5
 80297da:	4639      	mov	r1, r7
 80297dc:	4620      	mov	r0, r4
 80297de:	e9cd e800 	strd	lr, r8, [sp]
 80297e2:	f8cd a014 	str.w	sl, [sp, #20]
 80297e6:	f8cd c010 	str.w	ip, [sp, #16]
 80297ea:	f7ff fe3b 	bl	8029464 <mbedtls_rsa_rsassa_pss_verify_ext>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80297ee:	b006      	add	sp, #24
 80297f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch( ctx->padding )
 80297f4:	4806      	ldr	r0, [pc, #24]	; (8029810 <mbedtls_rsa_pkcs1_verify+0x74>)
}
 80297f6:	b006      	add	sp, #24
 80297f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
 80297fc:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
}
 8029800:	b006      	add	sp, #24
 8029802:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
 8029806:	f7ff bf1f 	b.w	8029648 <mbedtls_rsa_rsassa_pkcs1_v15_verify>
                             : md_alg;
 802980a:	b2db      	uxtb	r3, r3
 802980c:	e7df      	b.n	80297ce <mbedtls_rsa_pkcs1_verify+0x32>
 802980e:	bf00      	nop
 8029810:	ffffbf00 	.word	0xffffbf00

08029814 <mbedtls_rsa_free>:
/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
    if( ctx == NULL )
 8029814:	b3b0      	cbz	r0, 8029884 <mbedtls_rsa_free+0x70>
{
 8029816:	b510      	push	{r4, lr}
 8029818:	4604      	mov	r4, r0
        return;

    mbedtls_mpi_free( &ctx->Vi );
 802981a:	308c      	adds	r0, #140	; 0x8c
 802981c:	f7f7 fc80 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
 8029820:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8029824:	f7f7 fc7c 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
 8029828:	f104 0068 	add.w	r0, r4, #104	; 0x68
 802982c:	f7f7 fc78 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
 8029830:	f104 0020 	add.w	r0, r4, #32
 8029834:	f7f7 fc74 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
 8029838:	f104 0038 	add.w	r0, r4, #56	; 0x38
 802983c:	f7f7 fc70 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
 8029840:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8029844:	f7f7 fc6c 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
 8029848:	f104 0014 	add.w	r0, r4, #20
 802984c:	f7f7 fc68 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
 8029850:	f104 0008 	add.w	r0, r4, #8
 8029854:	f7f7 fc64 	bl	8021120 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
 8029858:	f104 0080 	add.w	r0, r4, #128	; 0x80
 802985c:	f7f7 fc60 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
 8029860:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8029864:	f7f7 fc5c 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
 8029868:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802986c:	f7f7 fc58 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
 8029870:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8029874:	f7f7 fc54 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
 8029878:	f104 0044 	add.w	r0, r4, #68	; 0x44
#endif /* MBEDTLS_RSA_NO_CRT */

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
 802987c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->DP );
 8029880:	f7f7 bc4e 	b.w	8021120 <mbedtls_mpi_free>
 8029884:	4770      	bx	lr
 8029886:	bf00      	nop

08029888 <mbedtls_rsa_deduce_primes>:
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
 8029888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802988c:	b097      	sub	sp, #92	; 0x5c
    uint16_t order;    /* Order of 2 in DE - 1 */

    mbedtls_mpi T;  /* Holds largest odd divisor of DE - 1     */
    mbedtls_mpi K;  /* Temporary holding the current candidate */

    const unsigned char primes[] = { 2,
 802988e:	f10d 0920 	add.w	r9, sp, #32
 8029892:	464c      	mov	r4, r9
{
 8029894:	469c      	mov	ip, r3
    const unsigned char primes[] = { 2,
 8029896:	4d78      	ldr	r5, [pc, #480]	; (8029a78 <mbedtls_rsa_deduce_primes+0x1f0>)
{
 8029898:	4688      	mov	r8, r1
 802989a:	4617      	mov	r7, r2
 802989c:	4606      	mov	r6, r0
    const unsigned char primes[] = { 2,
 802989e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80298a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80298a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80298a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80298a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80298a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80298aa:	e895 0003 	ldmia.w	r5, {r0, r1}
         229,  233,  239,  241,  251
    };

    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
 80298ae:	4665      	mov	r5, ip
    const unsigned char primes[] = { 2,
 80298b0:	f844 0b04 	str.w	r0, [r4], #4
{
 80298b4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
    const unsigned char primes[] = { 2,
 80298b8:	8021      	strh	r1, [r4, #0]
    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
 80298ba:	2d00      	cmp	r5, #0
 80298bc:	d051      	beq.n	8029962 <mbedtls_rsa_deduce_primes+0xda>
 80298be:	f1ba 0f00 	cmp.w	sl, #0
 80298c2:	d04e      	beq.n	8029962 <mbedtls_rsa_deduce_primes+0xda>
 80298c4:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80298c8:	2b00      	cmp	r3, #0
 80298ca:	d14a      	bne.n	8029962 <mbedtls_rsa_deduce_primes+0xda>
 80298cc:	f8da 1008 	ldr.w	r1, [sl, #8]
 80298d0:	2900      	cmp	r1, #0
 80298d2:	d146      	bne.n	8029962 <mbedtls_rsa_deduce_primes+0xda>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 80298d4:	4630      	mov	r0, r6
 80298d6:	f7f7 ffe1 	bl	802189c <mbedtls_mpi_cmp_int>
 80298da:	2800      	cmp	r0, #0
 80298dc:	dd41      	ble.n	8029962 <mbedtls_rsa_deduce_primes+0xda>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 80298de:	2101      	movs	r1, #1
 80298e0:	4638      	mov	r0, r7
 80298e2:	f7f7 ffdb 	bl	802189c <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 80298e6:	2800      	cmp	r0, #0
 80298e8:	dd3b      	ble.n	8029962 <mbedtls_rsa_deduce_primes+0xda>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 80298ea:	4631      	mov	r1, r6
 80298ec:	4638      	mov	r0, r7
 80298ee:	f7f7 ff81 	bl	80217f4 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 80298f2:	2800      	cmp	r0, #0
 80298f4:	da35      	bge.n	8029962 <mbedtls_rsa_deduce_primes+0xda>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 80298f6:	2101      	movs	r1, #1
 80298f8:	4640      	mov	r0, r8
 80298fa:	f7f7 ffcf 	bl	802189c <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 80298fe:	2800      	cmp	r0, #0
 8029900:	dd2f      	ble.n	8029962 <mbedtls_rsa_deduce_primes+0xda>
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 8029902:	4631      	mov	r1, r6
 8029904:	4640      	mov	r0, r8
 8029906:	f7f7 ff75 	bl	80217f4 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 802990a:	2800      	cmp	r0, #0
 802990c:	da29      	bge.n	8029962 <mbedtls_rsa_deduce_primes+0xda>

    /*
     * Initializations and temporary changes
     */

    mbedtls_mpi_init( &K );
 802990e:	a805      	add	r0, sp, #20
 8029910:	f7f7 fc00 	bl	8021114 <mbedtls_mpi_init>
    mbedtls_mpi_init( &T );
 8029914:	a802      	add	r0, sp, #8
 8029916:	f7f7 fbfd 	bl	8021114 <mbedtls_mpi_init>

    /* T := DE - 1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, D,  E ) );
 802991a:	4642      	mov	r2, r8
 802991c:	4639      	mov	r1, r7
 802991e:	a802      	add	r0, sp, #8
 8029920:	f7f8 f9f8 	bl	8021d14 <mbedtls_mpi_mul_mpi>
 8029924:	4604      	mov	r4, r0
 8029926:	b148      	cbz	r0, 802993c <mbedtls_rsa_deduce_primes+0xb4>

    ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;

cleanup:

    mbedtls_mpi_free( &K );
 8029928:	a805      	add	r0, sp, #20
 802992a:	f7f7 fbf9 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
 802992e:	a802      	add	r0, sp, #8
 8029930:	f7f7 fbf6 	bl	8021120 <mbedtls_mpi_free>
    return( ret );
}
 8029934:	4620      	mov	r0, r4
 8029936:	b017      	add	sp, #92	; 0x5c
 8029938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &T, &T, 1 ) );
 802993c:	a902      	add	r1, sp, #8
 802993e:	2201      	movs	r2, #1
 8029940:	4608      	mov	r0, r1
 8029942:	f7f8 f99d 	bl	8021c80 <mbedtls_mpi_sub_int>
 8029946:	4604      	mov	r4, r0
 8029948:	2800      	cmp	r0, #0
 802994a:	d1ed      	bne.n	8029928 <mbedtls_rsa_deduce_primes+0xa0>
    if( ( order = (uint16_t) mbedtls_mpi_lsb( &T ) ) == 0 )
 802994c:	a802      	add	r0, sp, #8
 802994e:	f7f7 fcb1 	bl	80212b4 <mbedtls_mpi_lsb>
 8029952:	fa1f f880 	uxth.w	r8, r0
 8029956:	f1b8 0f00 	cmp.w	r8, #0
 802995a:	d108      	bne.n	802996e <mbedtls_rsa_deduce_primes+0xe6>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 802995c:	f06f 0403 	mvn.w	r4, #3
 8029960:	e7e2      	b.n	8029928 <mbedtls_rsa_deduce_primes+0xa0>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8029962:	f06f 0403 	mvn.w	r4, #3
}
 8029966:	4620      	mov	r0, r4
 8029968:	b017      	add	sp, #92	; 0x5c
 802996a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &T, order ) );
 802996e:	b281      	uxth	r1, r0
 8029970:	a802      	add	r0, sp, #8
 8029972:	f7f7 fe6f 	bl	8021654 <mbedtls_mpi_shift_r>
 8029976:	4604      	mov	r4, r0
 8029978:	2800      	cmp	r0, #0
 802997a:	d1d5      	bne.n	8029928 <mbedtls_rsa_deduce_primes+0xa0>
    if( N->p[0] % 8 == 1 )
 802997c:	68b3      	ldr	r3, [r6, #8]
    for( ; attempt < num_primes; ++attempt )
 802997e:	f1c9 0b00 	rsb	fp, r9, #0
    if( N->p[0] % 8 == 1 )
 8029982:	681b      	ldr	r3, [r3, #0]
 8029984:	f003 0307 	and.w	r3, r3, #7
 8029988:	2b01      	cmp	r3, #1
 802998a:	bf08      	it	eq
 802998c:	f109 0901 	addeq.w	r9, r9, #1
        mbedtls_mpi_lset( &K, primes[attempt] );
 8029990:	f819 1b01 	ldrb.w	r1, [r9], #1
 8029994:	a805      	add	r0, sp, #20
 8029996:	f7f7 fc4b 	bl	8021230 <mbedtls_mpi_lset>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 802999a:	4632      	mov	r2, r6
 802999c:	4628      	mov	r0, r5
 802999e:	a905      	add	r1, sp, #20
 80299a0:	f7f9 fa96 	bl	8022ed0 <mbedtls_mpi_gcd>
 80299a4:	4604      	mov	r4, r0
 80299a6:	2800      	cmp	r0, #0
 80299a8:	d1be      	bne.n	8029928 <mbedtls_rsa_deduce_primes+0xa0>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
 80299aa:	2101      	movs	r1, #1
 80299ac:	4628      	mov	r0, r5
 80299ae:	f7f7 ff75 	bl	802189c <mbedtls_mpi_cmp_int>
 80299b2:	b128      	cbz	r0, 80299c0 <mbedtls_rsa_deduce_primes+0x138>
    for( ; attempt < num_primes; ++attempt )
 80299b4:	eb0b 0309 	add.w	r3, fp, r9
 80299b8:	b29b      	uxth	r3, r3
 80299ba:	2b35      	cmp	r3, #53	; 0x35
 80299bc:	d9e8      	bls.n	8029990 <mbedtls_rsa_deduce_primes+0x108>
 80299be:	e7cd      	b.n	802995c <mbedtls_rsa_deduce_primes+0xd4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
 80299c0:	a905      	add	r1, sp, #20
 80299c2:	4633      	mov	r3, r6
 80299c4:	4608      	mov	r0, r1
 80299c6:	f8cd a000 	str.w	sl, [sp]
 80299ca:	aa02      	add	r2, sp, #8
 80299cc:	f7f8 fe3a 	bl	8022644 <mbedtls_mpi_exp_mod>
 80299d0:	4604      	mov	r4, r0
 80299d2:	2800      	cmp	r0, #0
 80299d4:	d1a8      	bne.n	8029928 <mbedtls_rsa_deduce_primes+0xa0>
        for( iter = 1; iter <= order; ++iter )
 80299d6:	2701      	movs	r7, #1
 80299d8:	e01b      	b.n	8029a12 <mbedtls_rsa_deduce_primes+0x18a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 80299da:	a905      	add	r1, sp, #20
 80299dc:	2201      	movs	r2, #1
 80299de:	4608      	mov	r0, r1
 80299e0:	f7f8 f94e 	bl	8021c80 <mbedtls_mpi_sub_int>
 80299e4:	4604      	mov	r4, r0
 80299e6:	2800      	cmp	r0, #0
 80299e8:	d19e      	bne.n	8029928 <mbedtls_rsa_deduce_primes+0xa0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &K ) );
 80299ea:	aa05      	add	r2, sp, #20
 80299ec:	4611      	mov	r1, r2
 80299ee:	4610      	mov	r0, r2
 80299f0:	f7f8 f990 	bl	8021d14 <mbedtls_mpi_mul_mpi>
 80299f4:	4604      	mov	r4, r0
 80299f6:	2800      	cmp	r0, #0
 80299f8:	d196      	bne.n	8029928 <mbedtls_rsa_deduce_primes+0xa0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, N ) );
 80299fa:	a905      	add	r1, sp, #20
 80299fc:	4632      	mov	r2, r6
 80299fe:	4608      	mov	r0, r1
 8029a00:	f7f8 fd9a 	bl	8022538 <mbedtls_mpi_mod_mpi>
        for( iter = 1; iter <= order; ++iter )
 8029a04:	3701      	adds	r7, #1
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, N ) );
 8029a06:	4604      	mov	r4, r0
        for( iter = 1; iter <= order; ++iter )
 8029a08:	b2bf      	uxth	r7, r7
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, N ) );
 8029a0a:	2800      	cmp	r0, #0
 8029a0c:	d18c      	bne.n	8029928 <mbedtls_rsa_deduce_primes+0xa0>
        for( iter = 1; iter <= order; ++iter )
 8029a0e:	45b8      	cmp	r8, r7
 8029a10:	d32a      	bcc.n	8029a68 <mbedtls_rsa_deduce_primes+0x1e0>
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
 8029a12:	2101      	movs	r1, #1
 8029a14:	a805      	add	r0, sp, #20
 8029a16:	f7f7 ff41 	bl	802189c <mbedtls_mpi_cmp_int>
 8029a1a:	b328      	cbz	r0, 8029a68 <mbedtls_rsa_deduce_primes+0x1e0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
 8029a1c:	a905      	add	r1, sp, #20
 8029a1e:	2201      	movs	r2, #1
 8029a20:	4608      	mov	r0, r1
 8029a22:	f7f8 f8e1 	bl	8021be8 <mbedtls_mpi_add_int>
 8029a26:	4604      	mov	r4, r0
 8029a28:	2800      	cmp	r0, #0
 8029a2a:	f47f af7d 	bne.w	8029928 <mbedtls_rsa_deduce_primes+0xa0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 8029a2e:	4632      	mov	r2, r6
 8029a30:	4628      	mov	r0, r5
 8029a32:	a905      	add	r1, sp, #20
 8029a34:	f7f9 fa4c 	bl	8022ed0 <mbedtls_mpi_gcd>
 8029a38:	4604      	mov	r4, r0
 8029a3a:	2800      	cmp	r0, #0
 8029a3c:	f47f af74 	bne.w	8029928 <mbedtls_rsa_deduce_primes+0xa0>
            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 8029a40:	2101      	movs	r1, #1
 8029a42:	4628      	mov	r0, r5
 8029a44:	f7f7 ff2a 	bl	802189c <mbedtls_mpi_cmp_int>
 8029a48:	2801      	cmp	r0, #1
 8029a4a:	d1c6      	bne.n	80299da <mbedtls_rsa_deduce_primes+0x152>
                mbedtls_mpi_cmp_mpi( P, N ) == -1 )
 8029a4c:	4631      	mov	r1, r6
 8029a4e:	4628      	mov	r0, r5
 8029a50:	f7f7 fed0 	bl	80217f4 <mbedtls_mpi_cmp_mpi>
            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 8029a54:	3001      	adds	r0, #1
 8029a56:	d1c0      	bne.n	80299da <mbedtls_rsa_deduce_primes+0x152>
                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
 8029a58:	4621      	mov	r1, r4
 8029a5a:	462b      	mov	r3, r5
 8029a5c:	4632      	mov	r2, r6
 8029a5e:	4650      	mov	r0, sl
 8029a60:	f7f8 fa30 	bl	8021ec4 <mbedtls_mpi_div_mpi>
 8029a64:	4604      	mov	r4, r0
 8029a66:	e75f      	b.n	8029928 <mbedtls_rsa_deduce_primes+0xa0>
        if( mbedtls_mpi_cmp_int( &K, 1 ) != 0 )
 8029a68:	2101      	movs	r1, #1
 8029a6a:	a805      	add	r0, sp, #20
 8029a6c:	f7f7 ff16 	bl	802189c <mbedtls_mpi_cmp_int>
 8029a70:	2800      	cmp	r0, #0
 8029a72:	d09f      	beq.n	80299b4 <mbedtls_rsa_deduce_primes+0x12c>
 8029a74:	e772      	b.n	802995c <mbedtls_rsa_deduce_primes+0xd4>
 8029a76:	bf00      	nop
 8029a78:	080353e4 	.word	0x080353e4

08029a7c <mbedtls_rsa_deduce_private_exponent>:
 */
int mbedtls_rsa_deduce_private_exponent( mbedtls_mpi const *P,
                                         mbedtls_mpi const *Q,
                                         mbedtls_mpi const *E,
                                         mbedtls_mpi *D )
{
 8029a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029a80:	b086      	sub	sp, #24
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
 8029a82:	2b00      	cmp	r3, #0
 8029a84:	d05b      	beq.n	8029b3e <mbedtls_rsa_deduce_private_exponent+0xc2>
 8029a86:	4607      	mov	r7, r0
 8029a88:	4688      	mov	r8, r1
 8029a8a:	4618      	mov	r0, r3
 8029a8c:	2100      	movs	r1, #0
 8029a8e:	4616      	mov	r6, r2
 8029a90:	461d      	mov	r5, r3
 8029a92:	f7f7 ff03 	bl	802189c <mbedtls_mpi_cmp_int>
 8029a96:	4604      	mov	r4, r0
 8029a98:	2800      	cmp	r0, #0
 8029a9a:	d150      	bne.n	8029b3e <mbedtls_rsa_deduce_private_exponent+0xc2>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 8029a9c:	2101      	movs	r1, #1
 8029a9e:	4638      	mov	r0, r7
 8029aa0:	f7f7 fefc 	bl	802189c <mbedtls_mpi_cmp_int>
 8029aa4:	2800      	cmp	r0, #0
 8029aa6:	dd4a      	ble.n	8029b3e <mbedtls_rsa_deduce_private_exponent+0xc2>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 8029aa8:	2101      	movs	r1, #1
 8029aaa:	4640      	mov	r0, r8
 8029aac:	f7f7 fef6 	bl	802189c <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 8029ab0:	2800      	cmp	r0, #0
 8029ab2:	dd44      	ble.n	8029b3e <mbedtls_rsa_deduce_private_exponent+0xc2>
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
 8029ab4:	4621      	mov	r1, r4
 8029ab6:	4630      	mov	r0, r6
 8029ab8:	f7f7 fef0 	bl	802189c <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 8029abc:	2800      	cmp	r0, #0
 8029abe:	d03e      	beq.n	8029b3e <mbedtls_rsa_deduce_private_exponent+0xc2>
    {
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    }

    mbedtls_mpi_init( &K );
 8029ac0:	4668      	mov	r0, sp
 8029ac2:	f7f7 fb27 	bl	8021114 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 8029ac6:	a803      	add	r0, sp, #12
 8029ac8:	f7f7 fb24 	bl	8021114 <mbedtls_mpi_init>

    /* Temporarily put K := P-1 and L := Q-1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 8029acc:	4639      	mov	r1, r7
 8029ace:	4668      	mov	r0, sp
 8029ad0:	2201      	movs	r2, #1
 8029ad2:	f7f8 f8d5 	bl	8021c80 <mbedtls_mpi_sub_int>
 8029ad6:	4604      	mov	r4, r0
 8029ad8:	b148      	cbz	r0, 8029aee <mbedtls_rsa_deduce_private_exponent+0x72>
    /* Compute modular inverse of E in LCM(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( D, E, &K ) );

cleanup:

    mbedtls_mpi_free( &K );
 8029ada:	4668      	mov	r0, sp
 8029adc:	f7f7 fb20 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 8029ae0:	a803      	add	r0, sp, #12
 8029ae2:	f7f7 fb1d 	bl	8021120 <mbedtls_mpi_free>

    return( ret );
}
 8029ae6:	4620      	mov	r0, r4
 8029ae8:	b006      	add	sp, #24
 8029aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 8029aee:	4641      	mov	r1, r8
 8029af0:	2201      	movs	r2, #1
 8029af2:	a803      	add	r0, sp, #12
 8029af4:	f7f8 f8c4 	bl	8021c80 <mbedtls_mpi_sub_int>
 8029af8:	4604      	mov	r4, r0
 8029afa:	2800      	cmp	r0, #0
 8029afc:	d1ed      	bne.n	8029ada <mbedtls_rsa_deduce_private_exponent+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( D, &K, &L ) );
 8029afe:	4669      	mov	r1, sp
 8029b00:	4628      	mov	r0, r5
 8029b02:	aa03      	add	r2, sp, #12
 8029b04:	f7f9 f9e4 	bl	8022ed0 <mbedtls_mpi_gcd>
 8029b08:	4604      	mov	r4, r0
 8029b0a:	2800      	cmp	r0, #0
 8029b0c:	d1e5      	bne.n	8029ada <mbedtls_rsa_deduce_private_exponent+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &L ) );
 8029b0e:	4669      	mov	r1, sp
 8029b10:	4668      	mov	r0, sp
 8029b12:	aa03      	add	r2, sp, #12
 8029b14:	f7f8 f8fe 	bl	8021d14 <mbedtls_mpi_mul_mpi>
 8029b18:	4604      	mov	r4, r0
 8029b1a:	2800      	cmp	r0, #0
 8029b1c:	d1dd      	bne.n	8029ada <mbedtls_rsa_deduce_private_exponent+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &K, NULL, &K, D ) );
 8029b1e:	4601      	mov	r1, r0
 8029b20:	462b      	mov	r3, r5
 8029b22:	466a      	mov	r2, sp
 8029b24:	4668      	mov	r0, sp
 8029b26:	f7f8 f9cd 	bl	8021ec4 <mbedtls_mpi_div_mpi>
 8029b2a:	4604      	mov	r4, r0
 8029b2c:	2800      	cmp	r0, #0
 8029b2e:	d1d4      	bne.n	8029ada <mbedtls_rsa_deduce_private_exponent+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( D, E, &K ) );
 8029b30:	4631      	mov	r1, r6
 8029b32:	4628      	mov	r0, r5
 8029b34:	466a      	mov	r2, sp
 8029b36:	f7f9 fdbf 	bl	80236b8 <mbedtls_mpi_inv_mod>
 8029b3a:	4604      	mov	r4, r0
cleanup:
 8029b3c:	e7cd      	b.n	8029ada <mbedtls_rsa_deduce_private_exponent+0x5e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8029b3e:	f06f 0403 	mvn.w	r4, #3
 8029b42:	e7d0      	b.n	8029ae6 <mbedtls_rsa_deduce_private_exponent+0x6a>

08029b44 <mbedtls_rsa_validate_crt>:
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 8029b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029b46:	461f      	mov	r7, r3
 8029b48:	b087      	sub	sp, #28
 8029b4a:	4604      	mov	r4, r0
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
 8029b4c:	4668      	mov	r0, sp
{
 8029b4e:	460d      	mov	r5, r1
 8029b50:	4616      	mov	r6, r2
    mbedtls_mpi_init( &K );
 8029b52:	f7f7 fadf 	bl	8021114 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 8029b56:	a803      	add	r0, sp, #12
 8029b58:	f7f7 fadc 	bl	8021114 <mbedtls_mpi_init>

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
 8029b5c:	b317      	cbz	r7, 8029ba4 <mbedtls_rsa_validate_crt+0x60>
    {
        if( P == NULL )
 8029b5e:	2c00      	cmp	r4, #0
 8029b60:	d041      	beq.n	8029be6 <mbedtls_rsa_validate_crt+0xa2>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 8029b62:	2201      	movs	r2, #1
 8029b64:	4621      	mov	r1, r4
 8029b66:	4668      	mov	r0, sp
 8029b68:	f7f8 f88a 	bl	8021c80 <mbedtls_mpi_sub_int>
 8029b6c:	b928      	cbnz	r0, 8029b7a <mbedtls_rsa_validate_crt+0x36>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DP, D ) );
 8029b6e:	4639      	mov	r1, r7
 8029b70:	4632      	mov	r2, r6
 8029b72:	a803      	add	r0, sp, #12
 8029b74:	f7f8 f810 	bl	8021b98 <mbedtls_mpi_sub_mpi>
 8029b78:	b140      	cbz	r0, 8029b8c <mbedtls_rsa_validate_crt+0x48>
    }

cleanup:

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 &&
 8029b7a:	f510 4f84 	cmn.w	r0, #16896	; 0x4200
 8029b7e:	d03c      	beq.n	8029bfa <mbedtls_rsa_validate_crt+0xb6>
        ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED &&
 8029b80:	f510 4f81 	cmn.w	r0, #16512	; 0x4080
 8029b84:	d02f      	beq.n	8029be6 <mbedtls_rsa_validate_crt+0xa2>
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 8029b86:	f5a0 4484 	sub.w	r4, r0, #16896	; 0x4200
 8029b8a:	e02d      	b.n	8029be8 <mbedtls_rsa_validate_crt+0xa4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 8029b8c:	a903      	add	r1, sp, #12
 8029b8e:	466a      	mov	r2, sp
 8029b90:	4608      	mov	r0, r1
 8029b92:	f7f8 fcd1 	bl	8022538 <mbedtls_mpi_mod_mpi>
 8029b96:	2800      	cmp	r0, #0
 8029b98:	d1ef      	bne.n	8029b7a <mbedtls_rsa_validate_crt+0x36>
        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 8029b9a:	4601      	mov	r1, r0
 8029b9c:	a803      	add	r0, sp, #12
 8029b9e:	f7f7 fe7d 	bl	802189c <mbedtls_mpi_cmp_int>
 8029ba2:	bb50      	cbnz	r0, 8029bfa <mbedtls_rsa_validate_crt+0xb6>
    if( DQ != NULL )
 8029ba4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029ba6:	b1d3      	cbz	r3, 8029bde <mbedtls_rsa_validate_crt+0x9a>
        if( Q == NULL )
 8029ba8:	b1ed      	cbz	r5, 8029be6 <mbedtls_rsa_validate_crt+0xa2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1 ) );
 8029baa:	2201      	movs	r2, #1
 8029bac:	4629      	mov	r1, r5
 8029bae:	4668      	mov	r0, sp
 8029bb0:	f7f8 f866 	bl	8021c80 <mbedtls_mpi_sub_int>
 8029bb4:	2800      	cmp	r0, #0
 8029bb6:	d1e0      	bne.n	8029b7a <mbedtls_rsa_validate_crt+0x36>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DQ, D ) );
 8029bb8:	4632      	mov	r2, r6
 8029bba:	990c      	ldr	r1, [sp, #48]	; 0x30
 8029bbc:	a803      	add	r0, sp, #12
 8029bbe:	f7f7 ffeb 	bl	8021b98 <mbedtls_mpi_sub_mpi>
 8029bc2:	2800      	cmp	r0, #0
 8029bc4:	d1d9      	bne.n	8029b7a <mbedtls_rsa_validate_crt+0x36>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 8029bc6:	a903      	add	r1, sp, #12
 8029bc8:	466a      	mov	r2, sp
 8029bca:	4608      	mov	r0, r1
 8029bcc:	f7f8 fcb4 	bl	8022538 <mbedtls_mpi_mod_mpi>
 8029bd0:	2800      	cmp	r0, #0
 8029bd2:	d1d2      	bne.n	8029b7a <mbedtls_rsa_validate_crt+0x36>
        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 8029bd4:	4601      	mov	r1, r0
 8029bd6:	a803      	add	r0, sp, #12
 8029bd8:	f7f7 fe60 	bl	802189c <mbedtls_mpi_cmp_int>
 8029bdc:	b968      	cbnz	r0, 8029bfa <mbedtls_rsa_validate_crt+0xb6>
    if( QP != NULL )
 8029bde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8029be0:	b343      	cbz	r3, 8029c34 <mbedtls_rsa_validate_crt+0xf0>
        if( P == NULL || Q == NULL )
 8029be2:	b104      	cbz	r4, 8029be6 <mbedtls_rsa_validate_crt+0xa2>
 8029be4:	b95d      	cbnz	r5, 8029bfe <mbedtls_rsa_validate_crt+0xba>
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
 8029be6:	4c14      	ldr	r4, [pc, #80]	; (8029c38 <mbedtls_rsa_validate_crt+0xf4>)
    }

    mbedtls_mpi_free( &K );
 8029be8:	4668      	mov	r0, sp
 8029bea:	f7f7 fa99 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 8029bee:	a803      	add	r0, sp, #12
 8029bf0:	f7f7 fa96 	bl	8021120 <mbedtls_mpi_free>

    return( ret );
}
 8029bf4:	4620      	mov	r0, r4
 8029bf6:	b007      	add	sp, #28
 8029bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );
 8029bfa:	4c10      	ldr	r4, [pc, #64]	; (8029c3c <mbedtls_rsa_validate_crt+0xf8>)
 8029bfc:	e7f4      	b.n	8029be8 <mbedtls_rsa_validate_crt+0xa4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, QP, Q ) );
 8029bfe:	4619      	mov	r1, r3
 8029c00:	462a      	mov	r2, r5
 8029c02:	4668      	mov	r0, sp
 8029c04:	f7f8 f886 	bl	8021d14 <mbedtls_mpi_mul_mpi>
 8029c08:	2800      	cmp	r0, #0
 8029c0a:	d1b6      	bne.n	8029b7a <mbedtls_rsa_validate_crt+0x36>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 8029c0c:	2201      	movs	r2, #1
 8029c0e:	4669      	mov	r1, sp
 8029c10:	4668      	mov	r0, sp
 8029c12:	f7f8 f835 	bl	8021c80 <mbedtls_mpi_sub_int>
 8029c16:	2800      	cmp	r0, #0
 8029c18:	d1af      	bne.n	8029b7a <mbedtls_rsa_validate_crt+0x36>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );
 8029c1a:	4622      	mov	r2, r4
 8029c1c:	4669      	mov	r1, sp
 8029c1e:	4668      	mov	r0, sp
 8029c20:	f7f8 fc8a 	bl	8022538 <mbedtls_mpi_mod_mpi>
 8029c24:	2800      	cmp	r0, #0
 8029c26:	d1a8      	bne.n	8029b7a <mbedtls_rsa_validate_crt+0x36>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 8029c28:	4601      	mov	r1, r0
 8029c2a:	4668      	mov	r0, sp
 8029c2c:	f7f7 fe36 	bl	802189c <mbedtls_mpi_cmp_int>
 8029c30:	2800      	cmp	r0, #0
 8029c32:	d1e2      	bne.n	8029bfa <mbedtls_rsa_validate_crt+0xb6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );
 8029c34:	2400      	movs	r4, #0
 8029c36:	e7d7      	b.n	8029be8 <mbedtls_rsa_validate_crt+0xa4>
 8029c38:	ffffbf80 	.word	0xffffbf80
 8029c3c:	ffffbe00 	.word	0xffffbe00

08029c40 <mbedtls_rsa_validate_params>:
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 8029c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029c44:	b086      	sub	sp, #24
 8029c46:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8029c4a:	4606      	mov	r6, r0
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
 8029c4c:	4668      	mov	r0, sp
{
 8029c4e:	460c      	mov	r4, r1
 8029c50:	4615      	mov	r5, r2
 8029c52:	461f      	mov	r7, r3
    mbedtls_mpi_init( &K );
 8029c54:	f7f7 fa5e 	bl	8021114 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 8029c58:	a803      	add	r0, sp, #12
 8029c5a:	f7f7 fa5b 	bl	8021114 <mbedtls_mpi_init>
    /*
     * When generating keys, the strongest security we support aims for an error
     * rate of at most 2^-100 and we are aiming for the same certainty here as
     * well.
     */
    if( f_rng != NULL && P != NULL &&
 8029c5e:	f1b8 0f00 	cmp.w	r8, #0
 8029c62:	d04e      	beq.n	8029d02 <mbedtls_rsa_validate_params+0xc2>
 8029c64:	b364      	cbz	r4, 8029cc0 <mbedtls_rsa_validate_params+0x80>
        ( ret = mbedtls_mpi_is_prime_ext( P, 50, f_rng, p_rng ) ) != 0 )
 8029c66:	4642      	mov	r2, r8
 8029c68:	2132      	movs	r1, #50	; 0x32
 8029c6a:	4620      	mov	r0, r4
 8029c6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8029c6e:	f7fa f82d 	bl	8023ccc <mbedtls_mpi_is_prime_ext>
    if( f_rng != NULL && P != NULL &&
 8029c72:	b9c8      	cbnz	r0, 8029ca8 <mbedtls_rsa_validate_params+0x68>
    {
        ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
        goto cleanup;
    }

    if( f_rng != NULL && Q != NULL &&
 8029c74:	2d00      	cmp	r5, #0
 8029c76:	f040 80b7 	bne.w	8029de8 <mbedtls_rsa_validate_params+0x1a8>

    /*
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
 8029c7a:	2e00      	cmp	r6, #0
 8029c7c:	d035      	beq.n	8029cea <mbedtls_rsa_validate_params+0xaa>
 8029c7e:	b397      	cbz	r7, 8029ce6 <mbedtls_rsa_validate_params+0xa6>
 8029c80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029c82:	b383      	cbz	r3, 8029ce6 <mbedtls_rsa_validate_params+0xa6>
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 8029c84:	2101      	movs	r1, #1
 8029c86:	4638      	mov	r0, r7
 8029c88:	f7f7 fe08 	bl	802189c <mbedtls_mpi_cmp_int>
 8029c8c:	2800      	cmp	r0, #0
 8029c8e:	dd0b      	ble.n	8029ca8 <mbedtls_rsa_validate_params+0x68>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 8029c90:	2101      	movs	r1, #1
 8029c92:	980c      	ldr	r0, [sp, #48]	; 0x30
 8029c94:	f7f7 fe02 	bl	802189c <mbedtls_mpi_cmp_int>
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 8029c98:	2800      	cmp	r0, #0
 8029c9a:	dd05      	ble.n	8029ca8 <mbedtls_rsa_validate_params+0x68>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 8029c9c:	4631      	mov	r1, r6
 8029c9e:	4638      	mov	r0, r7
 8029ca0:	f7f7 fda8 	bl	80217f4 <mbedtls_mpi_cmp_mpi>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 8029ca4:	2800      	cmp	r0, #0
 8029ca6:	db18      	blt.n	8029cda <mbedtls_rsa_validate_params+0x9a>
        }
    }

cleanup:

    mbedtls_mpi_free( &K );
 8029ca8:	4668      	mov	r0, sp
    mbedtls_mpi_free( &L );
 8029caa:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8029e20 <mbedtls_rsa_validate_params+0x1e0>
    mbedtls_mpi_free( &K );
 8029cae:	f7f7 fa37 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 8029cb2:	a803      	add	r0, sp, #12
 8029cb4:	f7f7 fa34 	bl	8021120 <mbedtls_mpi_free>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    return( ret );
}
 8029cb8:	4640      	mov	r0, r8
 8029cba:	b006      	add	sp, #24
 8029cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( f_rng != NULL && Q != NULL &&
 8029cc0:	2d00      	cmp	r5, #0
 8029cc2:	d0da      	beq.n	8029c7a <mbedtls_rsa_validate_params+0x3a>
        ( ret = mbedtls_mpi_is_prime_ext( Q, 50, f_rng, p_rng ) ) != 0 )
 8029cc4:	4642      	mov	r2, r8
 8029cc6:	2132      	movs	r1, #50	; 0x32
 8029cc8:	4628      	mov	r0, r5
 8029cca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8029ccc:	f7f9 fffe 	bl	8023ccc <mbedtls_mpi_is_prime_ext>
    if( f_rng != NULL && Q != NULL &&
 8029cd0:	2800      	cmp	r0, #0
 8029cd2:	d1e9      	bne.n	8029ca8 <mbedtls_rsa_validate_params+0x68>
    if( N != NULL && D != NULL && E != NULL )
 8029cd4:	2e00      	cmp	r6, #0
 8029cd6:	d1d2      	bne.n	8029c7e <mbedtls_rsa_validate_params+0x3e>
 8029cd8:	e007      	b.n	8029cea <mbedtls_rsa_validate_params+0xaa>
             mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 8029cda:	4631      	mov	r1, r6
 8029cdc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8029cde:	f7f7 fd89 	bl	80217f4 <mbedtls_mpi_cmp_mpi>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 8029ce2:	2800      	cmp	r0, #0
 8029ce4:	dae0      	bge.n	8029ca8 <mbedtls_rsa_validate_params+0x68>
    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 8029ce6:	b104      	cbz	r4, 8029cea <mbedtls_rsa_validate_params+0xaa>
 8029ce8:	bb2d      	cbnz	r5, 8029d36 <mbedtls_rsa_validate_params+0xf6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 8029cea:	f04f 0800 	mov.w	r8, #0
    mbedtls_mpi_free( &K );
 8029cee:	4668      	mov	r0, sp
 8029cf0:	f7f7 fa16 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 8029cf4:	a803      	add	r0, sp, #12
 8029cf6:	f7f7 fa13 	bl	8021120 <mbedtls_mpi_free>
}
 8029cfa:	4640      	mov	r0, r8
 8029cfc:	b006      	add	sp, #24
 8029cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( P != NULL && Q != NULL && N != NULL )
 8029d02:	2c00      	cmp	r4, #0
 8029d04:	d0b9      	beq.n	8029c7a <mbedtls_rsa_validate_params+0x3a>
 8029d06:	2d00      	cmp	r5, #0
 8029d08:	d0b7      	beq.n	8029c7a <mbedtls_rsa_validate_params+0x3a>
 8029d0a:	b1a6      	cbz	r6, 8029d36 <mbedtls_rsa_validate_params+0xf6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
 8029d0c:	462a      	mov	r2, r5
 8029d0e:	4621      	mov	r1, r4
 8029d10:	4668      	mov	r0, sp
 8029d12:	f7f7 ffff 	bl	8021d14 <mbedtls_mpi_mul_mpi>
 8029d16:	4680      	mov	r8, r0
 8029d18:	2800      	cmp	r0, #0
 8029d1a:	d171      	bne.n	8029e00 <mbedtls_rsa_validate_params+0x1c0>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 8029d1c:	2101      	movs	r1, #1
 8029d1e:	4630      	mov	r0, r6
 8029d20:	f7f7 fdbc 	bl	802189c <mbedtls_mpi_cmp_int>
 8029d24:	2800      	cmp	r0, #0
 8029d26:	ddbf      	ble.n	8029ca8 <mbedtls_rsa_validate_params+0x68>
            mbedtls_mpi_cmp_mpi( &K, N ) != 0 )
 8029d28:	4631      	mov	r1, r6
 8029d2a:	4668      	mov	r0, sp
 8029d2c:	f7f7 fd62 	bl	80217f4 <mbedtls_mpi_cmp_mpi>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 8029d30:	2800      	cmp	r0, #0
 8029d32:	d0a4      	beq.n	8029c7e <mbedtls_rsa_validate_params+0x3e>
 8029d34:	e7b8      	b.n	8029ca8 <mbedtls_rsa_validate_params+0x68>
    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 8029d36:	2f00      	cmp	r7, #0
 8029d38:	d0d7      	beq.n	8029cea <mbedtls_rsa_validate_params+0xaa>
 8029d3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029d3c:	2b00      	cmp	r3, #0
 8029d3e:	d0d4      	beq.n	8029cea <mbedtls_rsa_validate_params+0xaa>
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 8029d40:	2101      	movs	r1, #1
 8029d42:	4620      	mov	r0, r4
 8029d44:	f7f7 fdaa 	bl	802189c <mbedtls_mpi_cmp_int>
 8029d48:	2800      	cmp	r0, #0
 8029d4a:	ddad      	ble.n	8029ca8 <mbedtls_rsa_validate_params+0x68>
            mbedtls_mpi_cmp_int( Q, 1 ) <= 0 )
 8029d4c:	2101      	movs	r1, #1
 8029d4e:	4628      	mov	r0, r5
 8029d50:	f7f7 fda4 	bl	802189c <mbedtls_mpi_cmp_int>
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 8029d54:	2800      	cmp	r0, #0
 8029d56:	dda7      	ble.n	8029ca8 <mbedtls_rsa_validate_params+0x68>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 8029d58:	4639      	mov	r1, r7
 8029d5a:	4668      	mov	r0, sp
 8029d5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8029d5e:	f7f7 ffd9 	bl	8021d14 <mbedtls_mpi_mul_mpi>
 8029d62:	4680      	mov	r8, r0
 8029d64:	2800      	cmp	r0, #0
 8029d66:	d14b      	bne.n	8029e00 <mbedtls_rsa_validate_params+0x1c0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 8029d68:	2201      	movs	r2, #1
 8029d6a:	4669      	mov	r1, sp
 8029d6c:	4668      	mov	r0, sp
 8029d6e:	f7f7 ff87 	bl	8021c80 <mbedtls_mpi_sub_int>
 8029d72:	4680      	mov	r8, r0
 8029d74:	2800      	cmp	r0, #0
 8029d76:	d143      	bne.n	8029e00 <mbedtls_rsa_validate_params+0x1c0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, P, 1 ) );
 8029d78:	4621      	mov	r1, r4
 8029d7a:	2201      	movs	r2, #1
 8029d7c:	a803      	add	r0, sp, #12
 8029d7e:	f7f7 ff7f 	bl	8021c80 <mbedtls_mpi_sub_int>
 8029d82:	4680      	mov	r8, r0
 8029d84:	2800      	cmp	r0, #0
 8029d86:	d13b      	bne.n	8029e00 <mbedtls_rsa_validate_params+0x1c0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 8029d88:	4669      	mov	r1, sp
 8029d8a:	4668      	mov	r0, sp
 8029d8c:	aa03      	add	r2, sp, #12
 8029d8e:	f7f8 fbd3 	bl	8022538 <mbedtls_mpi_mod_mpi>
 8029d92:	4680      	mov	r8, r0
 8029d94:	bba0      	cbnz	r0, 8029e00 <mbedtls_rsa_validate_params+0x1c0>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 8029d96:	4601      	mov	r1, r0
 8029d98:	4668      	mov	r0, sp
 8029d9a:	f7f7 fd7f 	bl	802189c <mbedtls_mpi_cmp_int>
 8029d9e:	2800      	cmp	r0, #0
 8029da0:	d182      	bne.n	8029ca8 <mbedtls_rsa_validate_params+0x68>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 8029da2:	4639      	mov	r1, r7
 8029da4:	4668      	mov	r0, sp
 8029da6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8029da8:	f7f7 ffb4 	bl	8021d14 <mbedtls_mpi_mul_mpi>
 8029dac:	4680      	mov	r8, r0
 8029dae:	bb38      	cbnz	r0, 8029e00 <mbedtls_rsa_validate_params+0x1c0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 8029db0:	2201      	movs	r2, #1
 8029db2:	4669      	mov	r1, sp
 8029db4:	4668      	mov	r0, sp
 8029db6:	f7f7 ff63 	bl	8021c80 <mbedtls_mpi_sub_int>
 8029dba:	4680      	mov	r8, r0
 8029dbc:	bb00      	cbnz	r0, 8029e00 <mbedtls_rsa_validate_params+0x1c0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 8029dbe:	4629      	mov	r1, r5
 8029dc0:	2201      	movs	r2, #1
 8029dc2:	a803      	add	r0, sp, #12
 8029dc4:	f7f7 ff5c 	bl	8021c80 <mbedtls_mpi_sub_int>
 8029dc8:	4680      	mov	r8, r0
 8029dca:	b9c8      	cbnz	r0, 8029e00 <mbedtls_rsa_validate_params+0x1c0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 8029dcc:	4669      	mov	r1, sp
 8029dce:	4668      	mov	r0, sp
 8029dd0:	aa03      	add	r2, sp, #12
 8029dd2:	f7f8 fbb1 	bl	8022538 <mbedtls_mpi_mod_mpi>
 8029dd6:	4680      	mov	r8, r0
 8029dd8:	b990      	cbnz	r0, 8029e00 <mbedtls_rsa_validate_params+0x1c0>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 8029dda:	4601      	mov	r1, r0
 8029ddc:	4668      	mov	r0, sp
 8029dde:	f7f7 fd5d 	bl	802189c <mbedtls_mpi_cmp_int>
 8029de2:	2800      	cmp	r0, #0
 8029de4:	d081      	beq.n	8029cea <mbedtls_rsa_validate_params+0xaa>
 8029de6:	e75f      	b.n	8029ca8 <mbedtls_rsa_validate_params+0x68>
        ( ret = mbedtls_mpi_is_prime_ext( Q, 50, f_rng, p_rng ) ) != 0 )
 8029de8:	4642      	mov	r2, r8
 8029dea:	2132      	movs	r1, #50	; 0x32
 8029dec:	4628      	mov	r0, r5
 8029dee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8029df0:	f7f9 ff6c 	bl	8023ccc <mbedtls_mpi_is_prime_ext>
    if( f_rng != NULL && Q != NULL &&
 8029df4:	2800      	cmp	r0, #0
 8029df6:	f47f af57 	bne.w	8029ca8 <mbedtls_rsa_validate_params+0x68>
    if( P != NULL && Q != NULL && N != NULL )
 8029dfa:	2e00      	cmp	r6, #0
 8029dfc:	d186      	bne.n	8029d0c <mbedtls_rsa_validate_params+0xcc>
 8029dfe:	e79a      	b.n	8029d36 <mbedtls_rsa_validate_params+0xf6>
    mbedtls_mpi_free( &K );
 8029e00:	4668      	mov	r0, sp
 8029e02:	f7f7 f98d 	bl	8021120 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 8029e06:	a803      	add	r0, sp, #12
 8029e08:	f7f7 f98a 	bl	8021120 <mbedtls_mpi_free>
    if( ret != 0 && ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED )
 8029e0c:	f518 4f84 	cmn.w	r8, #16896	; 0x4200
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 8029e10:	bf18      	it	ne
 8029e12:	f5a8 4884 	subne.w	r8, r8, #16896	; 0x4200
}
 8029e16:	4640      	mov	r0, r8
 8029e18:	b006      	add	sp, #24
 8029e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029e1e:	bf00      	nop
 8029e20:	ffffbe00 	.word	0xffffbe00

08029e24 <mbedtls_rsa_deduce_crt>:

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
 8029e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029e28:	461d      	mov	r5, r3
 8029e2a:	b084      	sub	sp, #16
 8029e2c:	4606      	mov	r6, r0
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
 8029e2e:	a801      	add	r0, sp, #4
{
 8029e30:	460f      	mov	r7, r1
 8029e32:	4690      	mov	r8, r2
    mbedtls_mpi_init( &K );
 8029e34:	f7f7 f96e 	bl	8021114 <mbedtls_mpi_init>

    /* DP = D mod P-1 */
    if( DP != NULL )
 8029e38:	b1ad      	cbz	r5, 8029e66 <mbedtls_rsa_deduce_crt+0x42>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
 8029e3a:	2201      	movs	r2, #1
 8029e3c:	4631      	mov	r1, r6
 8029e3e:	a801      	add	r0, sp, #4
 8029e40:	f7f7 ff1e 	bl	8021c80 <mbedtls_mpi_sub_int>
 8029e44:	4604      	mov	r4, r0
 8029e46:	b130      	cbz	r0, 8029e56 <mbedtls_rsa_deduce_crt+0x32>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
    }

cleanup:
    mbedtls_mpi_free( &K );
 8029e48:	a801      	add	r0, sp, #4
 8029e4a:	f7f7 f969 	bl	8021120 <mbedtls_mpi_free>

    return( ret );
}
 8029e4e:	4620      	mov	r0, r4
 8029e50:	b004      	add	sp, #16
 8029e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
 8029e56:	4628      	mov	r0, r5
 8029e58:	4641      	mov	r1, r8
 8029e5a:	aa01      	add	r2, sp, #4
 8029e5c:	f7f8 fb6c 	bl	8022538 <mbedtls_mpi_mod_mpi>
 8029e60:	4604      	mov	r4, r0
 8029e62:	2800      	cmp	r0, #0
 8029e64:	d1f0      	bne.n	8029e48 <mbedtls_rsa_deduce_crt+0x24>
    if( DQ != NULL )
 8029e66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029e68:	b17b      	cbz	r3, 8029e8a <mbedtls_rsa_deduce_crt+0x66>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
 8029e6a:	2201      	movs	r2, #1
 8029e6c:	4639      	mov	r1, r7
 8029e6e:	a801      	add	r0, sp, #4
 8029e70:	f7f7 ff06 	bl	8021c80 <mbedtls_mpi_sub_int>
 8029e74:	4604      	mov	r4, r0
 8029e76:	2800      	cmp	r0, #0
 8029e78:	d1e6      	bne.n	8029e48 <mbedtls_rsa_deduce_crt+0x24>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
 8029e7a:	4641      	mov	r1, r8
 8029e7c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8029e7e:	aa01      	add	r2, sp, #4
 8029e80:	f7f8 fb5a 	bl	8022538 <mbedtls_mpi_mod_mpi>
 8029e84:	4604      	mov	r4, r0
 8029e86:	2800      	cmp	r0, #0
 8029e88:	d1de      	bne.n	8029e48 <mbedtls_rsa_deduce_crt+0x24>
    if( QP != NULL )
 8029e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8029e8c:	b133      	cbz	r3, 8029e9c <mbedtls_rsa_deduce_crt+0x78>
 8029e8e:	4618      	mov	r0, r3
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
 8029e90:	4632      	mov	r2, r6
 8029e92:	4639      	mov	r1, r7
 8029e94:	f7f9 fc10 	bl	80236b8 <mbedtls_mpi_inv_mod>
 8029e98:	4604      	mov	r4, r0
cleanup:
 8029e9a:	e7d5      	b.n	8029e48 <mbedtls_rsa_deduce_crt+0x24>
 8029e9c:	461c      	mov	r4, r3
 8029e9e:	e7d3      	b.n	8029e48 <mbedtls_rsa_deduce_crt+0x24>

08029ea0 <mbedtls_sha256_init>:

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 8029ea0:	226c      	movs	r2, #108	; 0x6c
 8029ea2:	2100      	movs	r1, #0
 8029ea4:	f005 bfdf 	b.w	802fe66 <memset>

08029ea8 <mbedtls_sha256_free>:
}

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
    if( ctx == NULL )
 8029ea8:	b110      	cbz	r0, 8029eb0 <mbedtls_sha256_free+0x8>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
 8029eaa:	216c      	movs	r1, #108	; 0x6c
 8029eac:	f7fd be3e 	b.w	8027b2c <mbedtls_platform_zeroize>
}
 8029eb0:	4770      	bx	lr
 8029eb2:	bf00      	nop

08029eb4 <mbedtls_sha256_clone>:

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
 8029eb4:	b508      	push	{r3, lr}
    SHA256_VALIDATE( dst != NULL );
    SHA256_VALIDATE( src != NULL );

    *dst = *src;
 8029eb6:	226c      	movs	r2, #108	; 0x6c
 8029eb8:	f005 ffae 	bl	802fe18 <memcpy>
}
 8029ebc:	bd08      	pop	{r3, pc}
 8029ebe:	bf00      	nop

08029ec0 <mbedtls_sha256_starts_ret>:
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
 8029ec0:	2300      	movs	r3, #0
{
 8029ec2:	b430      	push	{r4, r5}
    ctx->total[1] = 0;
 8029ec4:	e9c0 3300 	strd	r3, r3, [r0]

    if( is224 == 0 )
 8029ec8:	b999      	cbnz	r1, 8029ef2 <mbedtls_sha256_starts_ret+0x32>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 8029eca:	4d16      	ldr	r5, [pc, #88]	; (8029f24 <mbedtls_sha256_starts_ret+0x64>)
        ctx->state[1] = 0xBB67AE85;
 8029ecc:	4c16      	ldr	r4, [pc, #88]	; (8029f28 <mbedtls_sha256_starts_ret+0x68>)
        ctx->state[2] = 0x3C6EF372;
 8029ece:	4a17      	ldr	r2, [pc, #92]	; (8029f2c <mbedtls_sha256_starts_ret+0x6c>)
        ctx->state[3] = 0xA54FF53A;
 8029ed0:	4b17      	ldr	r3, [pc, #92]	; (8029f30 <mbedtls_sha256_starts_ret+0x70>)
        ctx->state[0] = 0x6A09E667;
 8029ed2:	6085      	str	r5, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
 8029ed4:	60c4      	str	r4, [r0, #12]
        ctx->state[4] = 0x510E527F;
 8029ed6:	4d17      	ldr	r5, [pc, #92]	; (8029f34 <mbedtls_sha256_starts_ret+0x74>)
        ctx->state[5] = 0x9B05688C;
 8029ed8:	4c17      	ldr	r4, [pc, #92]	; (8029f38 <mbedtls_sha256_starts_ret+0x78>)
        ctx->state[2] = 0x3C6EF372;
 8029eda:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
 8029edc:	6143      	str	r3, [r0, #20]
        ctx->state[6] = 0x1F83D9AB;
 8029ede:	4a17      	ldr	r2, [pc, #92]	; (8029f3c <mbedtls_sha256_starts_ret+0x7c>)
        ctx->state[7] = 0x5BE0CD19;
 8029ee0:	4b17      	ldr	r3, [pc, #92]	; (8029f40 <mbedtls_sha256_starts_ret+0x80>)
        ctx->state[5] = 0x9B05688C;
 8029ee2:	e9c0 5406 	strd	r5, r4, [r0, #24]
    }

    ctx->is224 = is224;

    return( 0 );
}
 8029ee6:	bc30      	pop	{r4, r5}
        ctx->state[7] = 0x5BE0CD19;
 8029ee8:	e9c0 2308 	strd	r2, r3, [r0, #32]
    ctx->is224 = is224;
 8029eec:	6681      	str	r1, [r0, #104]	; 0x68
}
 8029eee:	2000      	movs	r0, #0
 8029ef0:	4770      	bx	lr
        ctx->state[1] = 0x367CD507;
 8029ef2:	4c14      	ldr	r4, [pc, #80]	; (8029f44 <mbedtls_sha256_starts_ret+0x84>)
        ctx->state[0] = 0xC1059ED8;
 8029ef4:	4d14      	ldr	r5, [pc, #80]	; (8029f48 <mbedtls_sha256_starts_ret+0x88>)
        ctx->state[2] = 0x3070DD17;
 8029ef6:	4a15      	ldr	r2, [pc, #84]	; (8029f4c <mbedtls_sha256_starts_ret+0x8c>)
        ctx->state[3] = 0xF70E5939;
 8029ef8:	4b15      	ldr	r3, [pc, #84]	; (8029f50 <mbedtls_sha256_starts_ret+0x90>)
        ctx->state[1] = 0x367CD507;
 8029efa:	60c4      	str	r4, [r0, #12]
        ctx->state[5] = 0x68581511;
 8029efc:	f104 5447 	add.w	r4, r4, #834666496	; 0x31c00000
        ctx->state[0] = 0xC1059ED8;
 8029f00:	6085      	str	r5, [r0, #8]
        ctx->state[2] = 0x3070DD17;
 8029f02:	6102      	str	r2, [r0, #16]
        ctx->state[4] = 0xFFC00B31;
 8029f04:	4d13      	ldr	r5, [pc, #76]	; (8029f54 <mbedtls_sha256_starts_ret+0x94>)
        ctx->state[3] = 0xF70E5939;
 8029f06:	6143      	str	r3, [r0, #20]
        ctx->state[6] = 0x64F98FA7;
 8029f08:	4a13      	ldr	r2, [pc, #76]	; (8029f58 <mbedtls_sha256_starts_ret+0x98>)
        ctx->state[7] = 0xBEFA4FA4;
 8029f0a:	4b14      	ldr	r3, [pc, #80]	; (8029f5c <mbedtls_sha256_starts_ret+0x9c>)
        ctx->state[5] = 0x68581511;
 8029f0c:	f504 14da 	add.w	r4, r4, #1785856	; 0x1b4000
 8029f10:	340a      	adds	r4, #10
 8029f12:	e9c0 5406 	strd	r5, r4, [r0, #24]
}
 8029f16:	bc30      	pop	{r4, r5}
        ctx->state[7] = 0xBEFA4FA4;
 8029f18:	e9c0 2308 	strd	r2, r3, [r0, #32]
    ctx->is224 = is224;
 8029f1c:	6681      	str	r1, [r0, #104]	; 0x68
}
 8029f1e:	2000      	movs	r0, #0
 8029f20:	4770      	bx	lr
 8029f22:	bf00      	nop
 8029f24:	6a09e667 	.word	0x6a09e667
 8029f28:	bb67ae85 	.word	0xbb67ae85
 8029f2c:	3c6ef372 	.word	0x3c6ef372
 8029f30:	a54ff53a 	.word	0xa54ff53a
 8029f34:	510e527f 	.word	0x510e527f
 8029f38:	9b05688c 	.word	0x9b05688c
 8029f3c:	1f83d9ab 	.word	0x1f83d9ab
 8029f40:	5be0cd19 	.word	0x5be0cd19
 8029f44:	367cd507 	.word	0x367cd507
 8029f48:	c1059ed8 	.word	0xc1059ed8
 8029f4c:	3070dd17 	.word	0x3070dd17
 8029f50:	f70e5939 	.word	0xf70e5939
 8029f54:	ffc00b31 	.word	0xffc00b31
 8029f58:	64f98fa7 	.word	0x64f98fa7
 8029f5c:	befa4fa4 	.word	0xbefa4fa4

08029f60 <mbedtls_internal_sha256_process>:
        (d) += temp1; (h) = temp1 + temp2;              \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 8029f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029f64:	4606      	mov	r6, r0
 8029f66:	460c      	mov	r4, r1
 8029f68:	b0e5      	sub	sp, #404	; 0x194
 8029f6a:	4a9d      	ldr	r2, [pc, #628]	; (802a1e0 <mbedtls_internal_sha256_process+0x280>)
 8029f6c:	901b      	str	r0, [sp, #108]	; 0x6c
 8029f6e:	f856 0f08 	ldr.w	r0, [r6, #8]!
 8029f72:	ab24      	add	r3, sp, #144	; 0x90
        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );
 8029f74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8029f78:	f891 c000 	ldrb.w	ip, [r1]
 8029f7c:	9319      	str	r3, [sp, #100]	; 0x64
 8029f7e:	6871      	ldr	r1, [r6, #4]
 8029f80:	68f3      	ldr	r3, [r6, #12]
 8029f82:	9200      	str	r2, [sp, #0]
 8029f84:	68b2      	ldr	r2, [r6, #8]
 8029f86:	ad1c      	add	r5, sp, #112	; 0x70
 8029f88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8029f8a:	7927      	ldrb	r7, [r4, #4]
 8029f8c:	7861      	ldrb	r1, [r4, #1]
 8029f8e:	7a60      	ldrb	r0, [r4, #9]
 8029f90:	7962      	ldrb	r2, [r4, #5]
 8029f92:	7a23      	ldrb	r3, [r4, #8]
 8029f94:	f894 e00b 	ldrb.w	lr, [r4, #11]
 8029f98:	9504      	str	r5, [sp, #16]
 8029f9a:	ea4f 6c0c 	mov.w	ip, ip, lsl #24
 8029f9e:	78e5      	ldrb	r5, [r4, #3]
 8029fa0:	9001      	str	r0, [sp, #4]
 8029fa2:	ea4c 4c01 	orr.w	ip, ip, r1, lsl #16
 8029fa6:	063f      	lsls	r7, r7, #24
 8029fa8:	f894 b007 	ldrb.w	fp, [r4, #7]
 8029fac:	f894 a002 	ldrb.w	sl, [r4, #2]
 8029fb0:	f894 9006 	ldrb.w	r9, [r4, #6]
 8029fb4:	f894 800a 	ldrb.w	r8, [r4, #10]
 8029fb8:	6930      	ldr	r0, [r6, #16]
 8029fba:	6971      	ldr	r1, [r6, #20]
 8029fbc:	ea4c 0c05 	orr.w	ip, ip, r5
 8029fc0:	ea47 4702 	orr.w	r7, r7, r2, lsl #16
 8029fc4:	ea4e 6e03 	orr.w	lr, lr, r3, lsl #24
 8029fc8:	69b2      	ldr	r2, [r6, #24]
 8029fca:	69f3      	ldr	r3, [r6, #28]
 8029fcc:	9d01      	ldr	r5, [sp, #4]
 8029fce:	ea47 070b 	orr.w	r7, r7, fp
 8029fd2:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 8029fd6:	ea4e 2508 	orr.w	r5, lr, r8, lsl #8
 8029fda:	9501      	str	r5, [sp, #4]
 8029fdc:	950c      	str	r5, [sp, #48]	; 0x30
 8029fde:	9d04      	ldr	r5, [sp, #16]
 8029fe0:	ea4c 260a 	orr.w	r6, ip, sl, lsl #8
 8029fe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8029fe6:	7de0      	ldrb	r0, [r4, #23]
 8029fe8:	9d01      	ldr	r5, [sp, #4]
 8029fea:	9005      	str	r0, [sp, #20]
 8029fec:	7f20      	ldrb	r0, [r4, #28]
 8029fee:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 8029ff2:	900a      	str	r0, [sp, #40]	; 0x28
 8029ff4:	f894 0020 	ldrb.w	r0, [r4, #32]
 8029ff8:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8029ffc:	900d      	str	r0, [sp, #52]	; 0x34
 8029ffe:	7b60      	ldrb	r0, [r4, #13]
 802a000:	f894 b018 	ldrb.w	fp, [r4, #24]
 802a004:	9001      	str	r0, [sp, #4]
 802a006:	7c60      	ldrb	r0, [r4, #17]
 802a008:	e9cd 6724 	strd	r6, r7, [sp, #144]	; 0x90
 802a00c:	f894 e00f 	ldrb.w	lr, [r4, #15]
 802a010:	7ee1      	ldrb	r1, [r4, #27]
 802a012:	7fe2      	ldrb	r2, [r4, #31]
 802a014:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 802a018:	9608      	str	r6, [sp, #32]
 802a01a:	9709      	str	r7, [sp, #36]	; 0x24
 802a01c:	7d26      	ldrb	r6, [r4, #20]
 802a01e:	7c27      	ldrb	r7, [r4, #16]
 802a020:	9526      	str	r5, [sp, #152]	; 0x98
 802a022:	7ce5      	ldrb	r5, [r4, #19]
 802a024:	9004      	str	r0, [sp, #16]
 802a026:	9805      	ldr	r0, [sp, #20]
 802a028:	f894 8015 	ldrb.w	r8, [r4, #21]
 802a02c:	ea40 6006 	orr.w	r0, r0, r6, lsl #24
 802a030:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 802a032:	ea4e 6e0c 	orr.w	lr, lr, ip, lsl #24
 802a036:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
 802a03a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802a03c:	f8cd 8018 	str.w	r8, [sp, #24]
 802a040:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 802a044:	f894 6022 	ldrb.w	r6, [r4, #34]	; 0x22
 802a048:	f894 8019 	ldrb.w	r8, [r4, #25]
 802a04c:	960a      	str	r6, [sp, #40]	; 0x28
 802a04e:	9e01      	ldr	r6, [sp, #4]
 802a050:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
 802a054:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
 802a058:	9e04      	ldr	r6, [sp, #16]
 802a05a:	f8cd 801c 	str.w	r8, [sp, #28]
 802a05e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 802a062:	9e06      	ldr	r6, [sp, #24]
 802a064:	f894 801d 	ldrb.w	r8, [r4, #29]
 802a068:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 802a06c:	9e07      	ldr	r6, [sp, #28]
 802a06e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 802a072:	ea41 610b 	orr.w	r1, r1, fp, lsl #24
 802a076:	f894 8021 	ldrb.w	r8, [r4, #33]	; 0x21
 802a07a:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 802a07e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 802a080:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 802a084:	7fa7      	ldrb	r7, [r4, #30]
 802a086:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 802a08a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 802a08c:	f894 a00e 	ldrb.w	sl, [r4, #14]
 802a090:	f894 9012 	ldrb.w	r9, [r4, #18]
 802a094:	f894 8016 	ldrb.w	r8, [r4, #22]
 802a098:	f894 c01a 	ldrb.w	ip, [r4, #26]
 802a09c:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
 802a0a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802a0a2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 802a0a6:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 802a0aa:	ea4e 260a 	orr.w	r6, lr, sl, lsl #8
 802a0ae:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
 802a0b2:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
 802a0b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 802a0ba:	960d      	str	r6, [sp, #52]	; 0x34
 802a0bc:	9505      	str	r5, [sp, #20]
 802a0be:	900e      	str	r0, [sp, #56]	; 0x38
 802a0c0:	911a      	str	r1, [sp, #104]	; 0x68
 802a0c2:	9704      	str	r7, [sp, #16]
 802a0c4:	930f      	str	r3, [sp, #60]	; 0x3c
 802a0c6:	e9cd 6527 	strd	r6, r5, [sp, #156]	; 0x9c
 802a0ca:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
 802a0ce:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 802a0d2:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
 802a0d6:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 802a0da:	9001      	str	r0, [sp, #4]
 802a0dc:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 802a0e0:	f894 e033 	ldrb.w	lr, [r4, #51]	; 0x33
 802a0e4:	9506      	str	r5, [sp, #24]
 802a0e6:	f894 5030 	ldrb.w	r5, [r4, #48]	; 0x30
 802a0ea:	f894 9024 	ldrb.w	r9, [r4, #36]	; 0x24
 802a0ee:	f894 a028 	ldrb.w	sl, [r4, #40]	; 0x28
 802a0f2:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
 802a0f6:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 802a0fa:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
 802a0fe:	ea4c 6c00 	orr.w	ip, ip, r0, lsl #24
 802a102:	932c      	str	r3, [sp, #176]	; 0xb0
 802a104:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 802a108:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 802a10c:	ea4e 6e05 	orr.w	lr, lr, r5, lsl #24
 802a110:	f894 5031 	ldrb.w	r5, [r4, #49]	; 0x31
 802a114:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 802a118:	f894 b03f 	ldrb.w	fp, [r4, #63]	; 0x3f
 802a11c:	ea48 6806 	orr.w	r8, r8, r6, lsl #24
 802a120:	972b      	str	r7, [sp, #172]	; 0xac
 802a122:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 802a126:	f894 703b 	ldrb.w	r7, [r4, #59]	; 0x3b
 802a12a:	ea42 6209 	orr.w	r2, r2, r9, lsl #24
 802a12e:	ea43 630a 	orr.w	r3, r3, sl, lsl #24
 802a132:	f894 903c 	ldrb.w	r9, [r4, #60]	; 0x3c
 802a136:	f894 a029 	ldrb.w	sl, [r4, #41]	; 0x29
 802a13a:	9007      	str	r0, [sp, #28]
 802a13c:	9801      	ldr	r0, [sp, #4]
 802a13e:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 802a142:	ea47 6701 	orr.w	r7, r7, r1, lsl #24
 802a146:	ea4b 6b09 	orr.w	fp, fp, r9, lsl #24
 802a14a:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 802a14e:	f894 903d 	ldrb.w	r9, [r4, #61]	; 0x3d
 802a152:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 802a156:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 802a15a:	ea48 4606 	orr.w	r6, r8, r6, lsl #16
 802a15e:	f894 a02a 	ldrb.w	sl, [r4, #42]	; 0x2a
 802a162:	f894 802e 	ldrb.w	r8, [r4, #46]	; 0x2e
 802a166:	9501      	str	r5, [sp, #4]
 802a168:	9807      	ldr	r0, [sp, #28]
 802a16a:	9d06      	ldr	r5, [sp, #24]
 802a16c:	ea4c 4000 	orr.w	r0, ip, r0, lsl #16
 802a170:	f894 c036 	ldrb.w	ip, [r4, #54]	; 0x36
 802a174:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
 802a178:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 802a17c:	f894 703a 	ldrb.w	r7, [r4, #58]	; 0x3a
 802a180:	9011      	str	r0, [sp, #68]	; 0x44
 802a182:	f894 e032 	ldrb.w	lr, [r4, #50]	; 0x32
 802a186:	9811      	ldr	r0, [sp, #68]	; 0x44
 802a188:	f894 403e 	ldrb.w	r4, [r4, #62]	; 0x3e
 802a18c:	ea41 2707 	orr.w	r7, r1, r7, lsl #8
 802a190:	ea4b 4909 	orr.w	r9, fp, r9, lsl #16
 802a194:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 802a198:	9d01      	ldr	r5, [sp, #4]
 802a19a:	ea49 2404 	orr.w	r4, r9, r4, lsl #8
 802a19e:	e9cd 0731 	strd	r0, r7, [sp, #196]	; 0xc4
 802a1a2:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802a1a4:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
 802a1a8:	9406      	str	r4, [sp, #24]
 802a1aa:	9433      	str	r4, [sp, #204]	; 0xcc
 802a1ac:	ac20      	add	r4, sp, #128	; 0x80
 802a1ae:	ea46 2608 	orr.w	r6, r6, r8, lsl #8
 802a1b2:	9513      	str	r5, [sp, #76]	; 0x4c
 802a1b4:	9707      	str	r7, [sp, #28]
 802a1b6:	9530      	str	r5, [sp, #192]	; 0xc0
 802a1b8:	4684      	mov	ip, r0
 802a1ba:	ccb0      	ldmia	r4, {r4, r5, r7}
 802a1bc:	46a8      	mov	r8, r5
 802a1be:	ea43 230a 	orr.w	r3, r3, sl, lsl #8
 802a1c2:	e9cd 362e 	strd	r3, r6, [sp, #184]	; 0xb8
 802a1c6:	e9dd ba1e 	ldrd	fp, sl, [sp, #120]	; 0x78
 802a1ca:	9612      	str	r6, [sp, #72]	; 0x48
 802a1cc:	f8dd e00c 	ldr.w	lr, [sp, #12]
 802a1d0:	e9dd 161c 	ldrd	r1, r6, [sp, #112]	; 0x70
 802a1d4:	4689      	mov	r9, r1
 802a1d6:	4902      	ldr	r1, [pc, #8]	; (802a1e0 <mbedtls_internal_sha256_process+0x280>)
 802a1d8:	9215      	str	r2, [sp, #84]	; 0x54
 802a1da:	9314      	str	r3, [sp, #80]	; 0x50
 802a1dc:	922d      	str	r2, [sp, #180]	; 0xb4
 802a1de:	e001      	b.n	802a1e4 <mbedtls_internal_sha256_process+0x284>
 802a1e0:	0803541c 	.word	0x0803541c

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 802a1e4:	680a      	ldr	r2, [r1, #0]
 802a1e6:	f8de 3000 	ldr.w	r3, [lr]
 802a1ea:	ea4f 25f4 	mov.w	r5, r4, ror #11
 802a1ee:	ea87 0008 	eor.w	r0, r7, r8
 802a1f2:	ea85 15b4 	eor.w	r5, r5, r4, ror #6
 802a1f6:	ea85 6574 	eor.w	r5, r5, r4, ror #25
 802a1fa:	4413      	add	r3, r2
 802a1fc:	4020      	ands	r0, r4
 802a1fe:	4078      	eors	r0, r7
 802a200:	ea4f 3279 	mov.w	r2, r9, ror #13
 802a204:	442b      	add	r3, r5
 802a206:	ea49 0506 	orr.w	r5, r9, r6
 802a20a:	4403      	add	r3, r0
 802a20c:	ea82 02b9 	eor.w	r2, r2, r9, ror #2
 802a210:	ea09 0006 	and.w	r0, r9, r6
 802a214:	ea05 050b 	and.w	r5, r5, fp
 802a218:	ea82 52b9 	eor.w	r2, r2, r9, ror #22
 802a21c:	4305      	orrs	r5, r0
 802a21e:	449c      	add	ip, r3
 802a220:	4415      	add	r5, r2
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 802a222:	f8de 3004 	ldr.w	r3, [lr, #4]
 802a226:	684a      	ldr	r2, [r1, #4]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 802a228:	44e2      	add	sl, ip
 802a22a:	44ac      	add	ip, r5
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 802a22c:	ea84 0508 	eor.w	r5, r4, r8
 802a230:	ea05 050a 	and.w	r5, r5, sl
 802a234:	4413      	add	r3, r2
 802a236:	ea85 0508 	eor.w	r5, r5, r8
 802a23a:	ea4c 0209 	orr.w	r2, ip, r9
 802a23e:	ea4f 20fa 	mov.w	r0, sl, ror #11
 802a242:	443b      	add	r3, r7
 802a244:	ea4f 377c 	mov.w	r7, ip, ror #13
 802a248:	442b      	add	r3, r5
 802a24a:	ea80 10ba 	eor.w	r0, r0, sl, ror #6
 802a24e:	ea0c 0509 	and.w	r5, ip, r9
 802a252:	4032      	ands	r2, r6
 802a254:	ea87 07bc 	eor.w	r7, r7, ip, ror #2
 802a258:	432a      	orrs	r2, r5
 802a25a:	ea80 607a 	eor.w	r0, r0, sl, ror #25
 802a25e:	ea87 57bc 	eor.w	r7, r7, ip, ror #22
 802a262:	4418      	add	r0, r3
 802a264:	4417      	add	r7, r2
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 802a266:	f8de 3008 	ldr.w	r3, [lr, #8]
 802a26a:	688a      	ldr	r2, [r1, #8]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 802a26c:	4483      	add	fp, r0
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 802a26e:	ea8a 0504 	eor.w	r5, sl, r4
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 802a272:	4407      	add	r7, r0
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 802a274:	ea05 050b 	and.w	r5, r5, fp
 802a278:	4413      	add	r3, r2
 802a27a:	ea4f 20fb 	mov.w	r0, fp, ror #11
 802a27e:	ea4c 0207 	orr.w	r2, ip, r7
 802a282:	4065      	eors	r5, r4
 802a284:	4443      	add	r3, r8
 802a286:	ea80 10bb 	eor.w	r0, r0, fp, ror #6
 802a28a:	ea4f 3877 	mov.w	r8, r7, ror #13
 802a28e:	442b      	add	r3, r5
 802a290:	ea80 607b 	eor.w	r0, r0, fp, ror #25
 802a294:	ea0c 0507 	and.w	r5, ip, r7
 802a298:	ea02 0209 	and.w	r2, r2, r9
 802a29c:	ea88 08b7 	eor.w	r8, r8, r7, ror #2
 802a2a0:	ea88 58b7 	eor.w	r8, r8, r7, ror #22
 802a2a4:	432a      	orrs	r2, r5
 802a2a6:	181d      	adds	r5, r3, r0
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 802a2a8:	68c8      	ldr	r0, [r1, #12]
 802a2aa:	f8de 300c 	ldr.w	r3, [lr, #12]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 802a2ae:	442e      	add	r6, r5
 802a2b0:	4442      	add	r2, r8
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 802a2b2:	ea8a 080b 	eor.w	r8, sl, fp
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 802a2b6:	442a      	add	r2, r5
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 802a2b8:	ea08 0806 	and.w	r8, r8, r6
 802a2bc:	4403      	add	r3, r0
 802a2be:	ea88 080a 	eor.w	r8, r8, sl
 802a2c2:	ea47 0002 	orr.w	r0, r7, r2
 802a2c6:	ea4f 25f6 	mov.w	r5, r6, ror #11
 802a2ca:	4423      	add	r3, r4
 802a2cc:	ea4f 3472 	mov.w	r4, r2, ror #13
 802a2d0:	4443      	add	r3, r8
 802a2d2:	ea85 15b6 	eor.w	r5, r5, r6, ror #6
 802a2d6:	ea07 0802 	and.w	r8, r7, r2
 802a2da:	ea00 000c 	and.w	r0, r0, ip
 802a2de:	ea84 04b2 	eor.w	r4, r4, r2, ror #2
 802a2e2:	ea85 6576 	eor.w	r5, r5, r6, ror #25
 802a2e6:	ea40 0008 	orr.w	r0, r0, r8
 802a2ea:	ea84 54b2 	eor.w	r4, r4, r2, ror #22
 802a2ee:	eb03 0805 	add.w	r8, r3, r5
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 802a2f2:	690d      	ldr	r5, [r1, #16]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 802a2f4:	1823      	adds	r3, r4, r0
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 802a2f6:	f8de 4010 	ldr.w	r4, [lr, #16]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 802a2fa:	4443      	add	r3, r8
 802a2fc:	eb09 0008 	add.w	r0, r9, r8
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 802a300:	ea8b 0806 	eor.w	r8, fp, r6
 802a304:	eb05 0904 	add.w	r9, r5, r4
 802a308:	ea08 0500 	and.w	r5, r8, r0
 802a30c:	ea42 0403 	orr.w	r4, r2, r3
 802a310:	44ca      	add	sl, r9
 802a312:	ea4f 28f0 	mov.w	r8, r0, ror #11
 802a316:	ea4f 3973 	mov.w	r9, r3, ror #13
 802a31a:	ea85 050b 	eor.w	r5, r5, fp
 802a31e:	ea89 09b3 	eor.w	r9, r9, r3, ror #2
 802a322:	4455      	add	r5, sl
 802a324:	ea88 18b0 	eor.w	r8, r8, r0, ror #6
 802a328:	ea02 0a03 	and.w	sl, r2, r3
 802a32c:	403c      	ands	r4, r7
 802a32e:	ea44 040a 	orr.w	r4, r4, sl
 802a332:	ea88 6870 	eor.w	r8, r8, r0, ror #25
 802a336:	ea89 5ab3 	eor.w	sl, r9, r3, ror #22
 802a33a:	44a8      	add	r8, r5
 802a33c:	44a2      	add	sl, r4
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 802a33e:	694d      	ldr	r5, [r1, #20]
 802a340:	f8de 4014 	ldr.w	r4, [lr, #20]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 802a344:	44c2      	add	sl, r8
 802a346:	44c4      	add	ip, r8
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 802a348:	ea86 0800 	eor.w	r8, r6, r0
 802a34c:	eb05 0904 	add.w	r9, r5, r4
 802a350:	ea08 050c 	and.w	r5, r8, ip
 802a354:	44cb      	add	fp, r9
 802a356:	ea43 040a 	orr.w	r4, r3, sl
 802a35a:	4075      	eors	r5, r6
 802a35c:	ea4f 28fc 	mov.w	r8, ip, ror #11
 802a360:	ea4f 397a 	mov.w	r9, sl, ror #13
 802a364:	445d      	add	r5, fp
 802a366:	4014      	ands	r4, r2
 802a368:	ea03 0b0a 	and.w	fp, r3, sl
 802a36c:	ea89 09ba 	eor.w	r9, r9, sl, ror #2
 802a370:	ea88 18bc 	eor.w	r8, r8, ip, ror #6
 802a374:	ea44 040b 	orr.w	r4, r4, fp
 802a378:	ea88 687c 	eor.w	r8, r8, ip, ror #25
 802a37c:	ea89 5bba 	eor.w	fp, r9, sl, ror #22
 802a380:	44a8      	add	r8, r5
 802a382:	44a3      	add	fp, r4
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 802a384:	698d      	ldr	r5, [r1, #24]
 802a386:	f8de 4018 	ldr.w	r4, [lr, #24]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 802a38a:	44c3      	add	fp, r8
 802a38c:	4447      	add	r7, r8
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 802a38e:	ea80 080c 	eor.w	r8, r0, ip
 802a392:	eb05 0904 	add.w	r9, r5, r4
 802a396:	ea08 0507 	and.w	r5, r8, r7
 802a39a:	4045      	eors	r5, r0
 802a39c:	444e      	add	r6, r9
 802a39e:	ea4f 28f7 	mov.w	r8, r7, ror #11
 802a3a2:	ea4a 040b 	orr.w	r4, sl, fp
 802a3a6:	ea4f 397b 	mov.w	r9, fp, ror #13
 802a3aa:	442e      	add	r6, r5
 802a3ac:	401c      	ands	r4, r3
 802a3ae:	ea89 09bb 	eor.w	r9, r9, fp, ror #2
 802a3b2:	ea0a 050b 	and.w	r5, sl, fp
 802a3b6:	ea88 18b7 	eor.w	r8, r8, r7, ror #6
 802a3ba:	432c      	orrs	r4, r5
 802a3bc:	ea88 6877 	eor.w	r8, r8, r7, ror #25
 802a3c0:	ea89 55bb 	eor.w	r5, r9, fp, ror #22
 802a3c4:	eb06 0908 	add.w	r9, r6, r8
 802a3c8:	192e      	adds	r6, r5, r4
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 802a3ca:	69cd      	ldr	r5, [r1, #28]
 802a3cc:	f8de 401c 	ldr.w	r4, [lr, #28]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 802a3d0:	eb02 0809 	add.w	r8, r2, r9
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 802a3d4:	ea8c 0207 	eor.w	r2, ip, r7
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 802a3d8:	444e      	add	r6, r9
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 802a3da:	ea02 0208 	and.w	r2, r2, r8
 802a3de:	eb05 0904 	add.w	r9, r5, r4
 802a3e2:	ea4f 25f8 	mov.w	r5, r8, ror #11
 802a3e6:	4448      	add	r0, r9
 802a3e8:	ea4b 0406 	orr.w	r4, fp, r6
 802a3ec:	ea4f 3976 	mov.w	r9, r6, ror #13
 802a3f0:	ea82 020c 	eor.w	r2, r2, ip
 802a3f4:	ea85 15b8 	eor.w	r5, r5, r8, ror #6
 802a3f8:	4402      	add	r2, r0
 802a3fa:	ea04 040a 	and.w	r4, r4, sl
 802a3fe:	ea0b 0006 	and.w	r0, fp, r6
 802a402:	ea89 09b6 	eor.w	r9, r9, r6, ror #2
 802a406:	ea85 6578 	eor.w	r5, r5, r8, ror #25
 802a40a:	4304      	orrs	r4, r0
 802a40c:	ea89 59b6 	eor.w	r9, r9, r6, ror #22
 802a410:	1950      	adds	r0, r2, r5
 802a412:	44a1      	add	r9, r4
 802a414:	181c      	adds	r4, r3, r0
    for( i = 0; i < 16; i += 8 )
 802a416:	4b09      	ldr	r3, [pc, #36]	; (802a43c <mbedtls_internal_sha256_process+0x4dc>)
 802a418:	3120      	adds	r1, #32
 802a41a:	4299      	cmp	r1, r3
 802a41c:	f10e 0e20 	add.w	lr, lr, #32
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 802a420:	4481      	add	r9, r0
    for( i = 0; i < 16; i += 8 )
 802a422:	f47f aedf 	bne.w	802a1e4 <mbedtls_internal_sha256_process+0x284>
 802a426:	9610      	str	r6, [sp, #64]	; 0x40
 802a428:	4623      	mov	r3, r4
 802a42a:	e9dd 6e08 	ldrd	r6, lr, [sp, #32]
 802a42e:	e9cd 8901 	strd	r8, r9, [sp, #4]
 802a432:	f8cd c060 	str.w	ip, [sp, #96]	; 0x60
 802a436:	9703      	str	r7, [sp, #12]
 802a438:	e011      	b.n	802a45e <mbedtls_internal_sha256_process+0x4fe>
 802a43a:	bf00      	nop
 802a43c:	0803545c 	.word	0x0803545c
 802a440:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802a442:	9506      	str	r5, [sp, #24]
 802a444:	9207      	str	r2, [sp, #28]
 802a446:	9a08      	ldr	r2, [sp, #32]
 802a448:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 802a44c:	9215      	str	r2, [sp, #84]	; 0x54
 802a44e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802a450:	920f      	str	r2, [sp, #60]	; 0x3c
 802a452:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802a454:	9214      	str	r2, [sp, #80]	; 0x50
 802a456:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802a458:	9212      	str	r2, [sp, #72]	; 0x48
 802a45a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802a45c:	9213      	str	r2, [sp, #76]	; 0x4c
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 802a45e:	9907      	ldr	r1, [sp, #28]
 802a460:	9803      	ldr	r0, [sp, #12]
 802a462:	9d01      	ldr	r5, [sp, #4]
 802a464:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802a466:	ea4f 4cf1 	mov.w	ip, r1, ror #19
 802a46a:	4045      	eors	r5, r0
 802a46c:	4416      	add	r6, r2
 802a46e:	ea4f 24f3 	mov.w	r4, r3, ror #11
 802a472:	9a00      	ldr	r2, [sp, #0]
 802a474:	ea8c 4c71 	eor.w	ip, ip, r1, ror #17
 802a478:	401d      	ands	r5, r3
 802a47a:	4045      	eors	r5, r0
 802a47c:	ea84 14b3 	eor.w	r4, r4, r3, ror #6
 802a480:	9802      	ldr	r0, [sp, #8]
 802a482:	ea4f 48be 	mov.w	r8, lr, ror #18
 802a486:	ea8c 2c91 	eor.w	ip, ip, r1, lsr #10
 802a48a:	44b4      	add	ip, r6
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 802a48c:	9906      	ldr	r1, [sp, #24]
 802a48e:	6c16      	ldr	r6, [r2, #64]	; 0x40
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 802a490:	ea88 18fe 	eor.w	r8, r8, lr, ror #7
 802a494:	ea84 6473 	eor.w	r4, r4, r3, ror #25
 802a498:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
 802a49c:	442c      	add	r4, r5
 802a49e:	ea4f 3570 	mov.w	r5, r0, ror #13
 802a4a2:	eb0c 0708 	add.w	r7, ip, r8
 802a4a6:	4434      	add	r4, r6
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 802a4a8:	ea4f 4cf1 	mov.w	ip, r1, ror #19
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 802a4ac:	ea85 06b0 	eor.w	r6, r5, r0, ror #2
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 802a4b0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802a4b2:	ea8c 4c71 	eor.w	ip, ip, r1, ror #17
 802a4b6:	ea8c 2c91 	eor.w	ip, ip, r1, lsr #10
 802a4ba:	44ae      	add	lr, r5
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 802a4bc:	9910      	ldr	r1, [sp, #64]	; 0x40
 802a4be:	9d18      	ldr	r5, [sp, #96]	; 0x60
 802a4c0:	443c      	add	r4, r7
 802a4c2:	4425      	add	r5, r4
 802a4c4:	460c      	mov	r4, r1
 802a4c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802a4c8:	4004      	ands	r4, r0
 802a4ca:	ea40 0802 	orr.w	r8, r0, r2
 802a4ce:	ea08 080b 	and.w	r8, r8, fp
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 802a4d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 802a4d4:	ea86 56b0 	eor.w	r6, r6, r0, ror #22
 802a4d8:	ea48 0804 	orr.w	r8, r8, r4
 802a4dc:	eb08 0406 	add.w	r4, r8, r6
 802a4e0:	9e00      	ldr	r6, [sp, #0]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 802a4e2:	ea4f 49b2 	mov.w	r9, r2, ror #18
 802a4e6:	6c76      	ldr	r6, [r6, #68]	; 0x44
 802a4e8:	9803      	ldr	r0, [sp, #12]
 802a4ea:	ea89 19f2 	eor.w	r9, r9, r2, ror #7
 802a4ee:	ea89 09d2 	eor.w	r9, r9, r2, lsr #3
 802a4f2:	9a01      	ldr	r2, [sp, #4]
 802a4f4:	4430      	add	r0, r6
 802a4f6:	ea83 0802 	eor.w	r8, r3, r2
 802a4fa:	4602      	mov	r2, r0
 802a4fc:	9e02      	ldr	r6, [sp, #8]
 802a4fe:	44e6      	add	lr, ip
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 802a500:	442c      	add	r4, r5
 802a502:	44aa      	add	sl, r5
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 802a504:	eb0e 0509 	add.w	r5, lr, r9
 802a508:	9508      	str	r5, [sp, #32]
 802a50a:	ea46 0e04 	orr.w	lr, r6, r4
 802a50e:	1955      	adds	r5, r2, r5
 802a510:	9e01      	ldr	r6, [sp, #4]
 802a512:	ea4f 3274 	mov.w	r2, r4, ror #13
 802a516:	ea4f 29fa 	mov.w	r9, sl, ror #11
 802a51a:	ea82 02b4 	eor.w	r2, r2, r4, ror #2
 802a51e:	ea08 080a 	and.w	r8, r8, sl
 802a522:	ea88 0806 	eor.w	r8, r8, r6
 802a526:	ea89 16ba 	eor.w	r6, r9, sl, ror #6
 802a52a:	ea82 59b4 	eor.w	r9, r2, r4, ror #22
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 802a52e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802a530:	4445      	add	r5, r8
 802a532:	4690      	mov	r8, r2
 802a534:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802a536:	980d      	ldr	r0, [sp, #52]	; 0x34
 802a538:	4490      	add	r8, r2
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 802a53a:	9a02      	ldr	r2, [sp, #8]
 802a53c:	ea0e 0e01 	and.w	lr, lr, r1
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 802a540:	ea4f 4cb0 	mov.w	ip, r0, ror #18
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 802a544:	4022      	ands	r2, r4
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 802a546:	ea8c 1cf0 	eor.w	ip, ip, r0, ror #7
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 802a54a:	ea4e 0202 	orr.w	r2, lr, r2
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 802a54e:	ea4f 4ef7 	mov.w	lr, r7, ror #19
 802a552:	ea8c 0cd0 	eor.w	ip, ip, r0, lsr #3
 802a556:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
 802a55a:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
 802a55e:	44c4      	add	ip, r8
 802a560:	44f4      	add	ip, lr
 802a562:	9716      	str	r7, [sp, #88]	; 0x58
 802a564:	4667      	mov	r7, ip
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 802a566:	ea86 667a 	eor.w	r6, r6, sl, ror #25
 802a56a:	442e      	add	r6, r5
 802a56c:	9d00      	ldr	r5, [sp, #0]
 802a56e:	9801      	ldr	r0, [sp, #4]
 802a570:	6cad      	ldr	r5, [r5, #72]	; 0x48
 802a572:	444a      	add	r2, r9
 802a574:	4432      	add	r2, r6
 802a576:	44b3      	add	fp, r6
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 802a578:	ea83 060a 	eor.w	r6, r3, sl
 802a57c:	ea06 060b 	and.w	r6, r6, fp
 802a580:	4405      	add	r5, r0
 802a582:	ea4f 2cfb 	mov.w	ip, fp, ror #11
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 802a586:	9805      	ldr	r0, [sp, #20]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 802a588:	405e      	eors	r6, r3
 802a58a:	443d      	add	r5, r7
 802a58c:	ea8c 1cbb 	eor.w	ip, ip, fp, ror #6
 802a590:	4435      	add	r5, r6
 802a592:	9709      	str	r7, [sp, #36]	; 0x24
 802a594:	ea8c 6c7b 	eor.w	ip, ip, fp, ror #25
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 802a598:	9f05      	ldr	r7, [sp, #20]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 802a59a:	44ac      	add	ip, r5
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 802a59c:	ea4f 4eb0 	mov.w	lr, r0, ror #18
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 802a5a0:	9802      	ldr	r0, [sp, #8]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 802a5a2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802a5a4:	9d08      	ldr	r5, [sp, #32]
 802a5a6:	ea8e 1ef7 	eor.w	lr, lr, r7, ror #7
 802a5aa:	ea8e 0ed7 	eor.w	lr, lr, r7, lsr #3
 802a5ae:	462f      	mov	r7, r5
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 802a5b0:	ea44 0802 	orr.w	r8, r4, r2
 802a5b4:	ea08 0800 	and.w	r8, r8, r0
 802a5b8:	ea4f 3072 	mov.w	r0, r2, ror #13
 802a5bc:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
 802a5c0:	ea80 59b2 	eor.w	r9, r0, r2, ror #22
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 802a5c4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802a5c6:	4406      	add	r6, r0
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 802a5c8:	ea04 0002 	and.w	r0, r4, r2
 802a5cc:	ea48 0000 	orr.w	r0, r8, r0
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 802a5d0:	ea4f 48f5 	mov.w	r8, r5, ror #19
 802a5d4:	ea88 4875 	eor.w	r8, r8, r5, ror #17
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 802a5d8:	4448      	add	r0, r9
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 802a5da:	44b6      	add	lr, r6
 802a5dc:	ea88 2897 	eor.w	r8, r8, r7, lsr #10
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 802a5e0:	eb01 060c 	add.w	r6, r1, ip
 802a5e4:	eb00 070c 	add.w	r7, r0, ip
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 802a5e8:	eb0e 0c08 	add.w	ip, lr, r8
 802a5ec:	4661      	mov	r1, ip
 802a5ee:	9d00      	ldr	r5, [sp, #0]
 802a5f0:	ea8a 090b 	eor.w	r9, sl, fp
 802a5f4:	6ced      	ldr	r5, [r5, #76]	; 0x4c
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 802a5f6:	9811      	ldr	r0, [sp, #68]	; 0x44
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 802a5f8:	ea09 0906 	and.w	r9, r9, r6
 802a5fc:	441d      	add	r5, r3
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 802a5fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 802a600:	ea89 090a 	eor.w	r9, r9, sl
 802a604:	440d      	add	r5, r1
 802a606:	910a      	str	r1, [sp, #40]	; 0x28
 802a608:	444d      	add	r5, r9
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 802a60a:	4619      	mov	r1, r3
 802a60c:	4681      	mov	r9, r0
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 802a60e:	ea4f 28f6 	mov.w	r8, r6, ror #11
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 802a612:	ea4f 4cb3 	mov.w	ip, r3, ror #18
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 802a616:	ea88 18b6 	eor.w	r8, r8, r6, ror #6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 802a61a:	ea8c 1cf3 	eor.w	ip, ip, r3, ror #7
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 802a61e:	ea4f 3377 	mov.w	r3, r7, ror #13
 802a622:	ea83 03b7 	eor.w	r3, r3, r7, ror #2
 802a626:	ea88 6876 	eor.w	r8, r8, r6, ror #25
 802a62a:	9701      	str	r7, [sp, #4]
 802a62c:	44a8      	add	r8, r5
 802a62e:	ea42 0e07 	orr.w	lr, r2, r7
 802a632:	ea02 0507 	and.w	r5, r2, r7
 802a636:	ea83 53b7 	eor.w	r3, r3, r7, ror #22
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 802a63a:	9f09      	ldr	r7, [sp, #36]	; 0x24
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 802a63c:	ea0e 0e04 	and.w	lr, lr, r4
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 802a640:	9805      	ldr	r0, [sp, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 802a642:	ea4e 0505 	orr.w	r5, lr, r5
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 802a646:	ea4f 4ef7 	mov.w	lr, r7, ror #19
 802a64a:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
 802a64e:	4481      	add	r9, r0
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 802a650:	442b      	add	r3, r5
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 802a652:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
 802a656:	ea8c 0cd1 	eor.w	ip, ip, r1, lsr #3
 802a65a:	9f01      	ldr	r7, [sp, #4]
 802a65c:	9900      	ldr	r1, [sp, #0]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 802a65e:	eb03 0008 	add.w	r0, r3, r8
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 802a662:	44cc      	add	ip, r9
 802a664:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 802a666:	44f4      	add	ip, lr
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 802a668:	9902      	ldr	r1, [sp, #8]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 802a66a:	ea47 0e00 	orr.w	lr, r7, r0
 802a66e:	9002      	str	r0, [sp, #8]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 802a670:	981a      	ldr	r0, [sp, #104]	; 0x68
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 802a672:	4663      	mov	r3, ip
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 802a674:	ea4f 4cb0 	mov.w	ip, r0, ror #18
 802a678:	4607      	mov	r7, r0
 802a67a:	ea8c 1cf0 	eor.w	ip, ip, r0, ror #7
 802a67e:	9807      	ldr	r0, [sp, #28]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 802a680:	4441      	add	r1, r8
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 802a682:	4681      	mov	r9, r0
 802a684:	980e      	ldr	r0, [sp, #56]	; 0x38
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 802a686:	ea8b 0806 	eor.w	r8, fp, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 802a68a:	4481      	add	r9, r0
 802a68c:	4638      	mov	r0, r7
 802a68e:	44aa      	add	sl, r5
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 802a690:	ea08 0501 	and.w	r5, r8, r1
 802a694:	ea4f 28f1 	mov.w	r8, r1, ror #11
 802a698:	449a      	add	sl, r3
 802a69a:	ea85 050b 	eor.w	r5, r5, fp
 802a69e:	ea88 18b1 	eor.w	r8, r8, r1, ror #6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 802a6a2:	ea8c 0cd7 	eor.w	ip, ip, r7, lsr #3
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 802a6a6:	9f01      	ldr	r7, [sp, #4]
 802a6a8:	4455      	add	r5, sl
 802a6aa:	ea88 6871 	eor.w	r8, r8, r1, ror #25
 802a6ae:	44a8      	add	r8, r5
 802a6b0:	463d      	mov	r5, r7
 802a6b2:	4444      	add	r4, r8
 802a6b4:	4627      	mov	r7, r4
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 802a6b6:	44cc      	add	ip, r9
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 802a6b8:	4681      	mov	r9, r0
 802a6ba:	930b      	str	r3, [sp, #44]	; 0x2c
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 802a6bc:	9b02      	ldr	r3, [sp, #8]
 802a6be:	ea0e 0e02 	and.w	lr, lr, r2
 802a6c2:	ea4f 3a73 	mov.w	sl, r3, ror #13
 802a6c6:	ea8a 0ab3 	eor.w	sl, sl, r3, ror #2
 802a6ca:	ea8a 5ab3 	eor.w	sl, sl, r3, ror #22
 802a6ce:	401d      	ands	r5, r3
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 802a6d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 802a6d2:	ea4e 0505 	orr.w	r5, lr, r5
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 802a6d6:	ea4f 4ef3 	mov.w	lr, r3, ror #19
 802a6da:	ea8e 4e73 	eor.w	lr, lr, r3, ror #17
 802a6de:	ea8e 2e93 	eor.w	lr, lr, r3, lsr #10
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 802a6e2:	44aa      	add	sl, r5
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 802a6e4:	9b02      	ldr	r3, [sp, #8]
 802a6e6:	9d00      	ldr	r5, [sp, #0]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 802a6e8:	44c2      	add	sl, r8
 802a6ea:	6d6d      	ldr	r5, [r5, #84]	; 0x54
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 802a6ec:	ea43 080a 	orr.w	r8, r3, sl
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 802a6f0:	9b04      	ldr	r3, [sp, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 802a6f2:	9418      	str	r4, [sp, #96]	; 0x60
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 802a6f4:	ea86 0401 	eor.w	r4, r6, r1
 802a6f8:	44f4      	add	ip, lr
 802a6fa:	44ab      	add	fp, r5
 802a6fc:	403c      	ands	r4, r7
 802a6fe:	ea4f 25f7 	mov.w	r5, r7, ror #11
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 802a702:	ea4f 4eb3 	mov.w	lr, r3, ror #18
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 802a706:	9b01      	ldr	r3, [sp, #4]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 802a708:	9806      	ldr	r0, [sp, #24]
 802a70a:	44e3      	add	fp, ip
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 802a70c:	4074      	eors	r4, r6
 802a70e:	ea85 15b7 	eor.w	r5, r5, r7, ror #6
 802a712:	ea08 0803 	and.w	r8, r8, r3
 802a716:	445c      	add	r4, fp
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 802a718:	9b04      	ldr	r3, [sp, #16]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 802a71a:	ea85 6577 	eor.w	r5, r5, r7, ror #25
 802a71e:	4425      	add	r5, r4
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 802a720:	4481      	add	r9, r0
 802a722:	9804      	ldr	r0, [sp, #16]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 802a724:	9c02      	ldr	r4, [sp, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 802a726:	ea8e 1ef3 	eor.w	lr, lr, r3, ror #7
 802a72a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 802a72c:	ea04 040a 	and.w	r4, r4, sl
 802a730:	ea48 0404 	orr.w	r4, r8, r4
 802a734:	ea4f 3b7a 	mov.w	fp, sl, ror #13
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 802a738:	ea4f 48f3 	mov.w	r8, r3, ror #19
 802a73c:	ea8e 0ed0 	eor.w	lr, lr, r0, lsr #3
 802a740:	ea88 4873 	eor.w	r8, r8, r3, ror #17
 802a744:	9800      	ldr	r0, [sp, #0]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 802a746:	ea8b 0bba 	eor.w	fp, fp, sl, ror #2
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 802a74a:	44ce      	add	lr, r9
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 802a74c:	442a      	add	r2, r5
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 802a74e:	ea88 2893 	eor.w	r8, r8, r3, lsr #10
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 802a752:	ea8b 5bba 	eor.w	fp, fp, sl, ror #22
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 802a756:	44f0      	add	r8, lr
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 802a758:	44a3      	add	fp, r4
 802a75a:	6d84      	ldr	r4, [r0, #88]	; 0x58
 802a75c:	4610      	mov	r0, r2
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 802a75e:	4642      	mov	r2, r8
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 802a760:	44ab      	add	fp, r5
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 802a762:	ea81 0507 	eor.w	r5, r1, r7
 802a766:	4434      	add	r4, r6
 802a768:	4005      	ands	r5, r0
 802a76a:	ea4f 26f0 	mov.w	r6, r0, ror #11
 802a76e:	404d      	eors	r5, r1
 802a770:	9217      	str	r2, [sp, #92]	; 0x5c
 802a772:	4414      	add	r4, r2
 802a774:	ea86 16b0 	eor.w	r6, r6, r0, ror #6
 802a778:	9a02      	ldr	r2, [sp, #8]
 802a77a:	442c      	add	r4, r5
 802a77c:	ea86 6670 	eor.w	r6, r6, r0, ror #25
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 802a780:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 802a782:	ea4a 080b 	orr.w	r8, sl, fp
 802a786:	ea4f 397b 	mov.w	r9, fp, ror #13
 802a78a:	4426      	add	r6, r4
 802a78c:	ea08 0802 	and.w	r8, r8, r2
 802a790:	ea89 09bb 	eor.w	r9, r9, fp, ror #2
 802a794:	ea0a 040b 	and.w	r4, sl, fp
 802a798:	ea48 0404 	orr.w	r4, r8, r4
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 802a79c:	ea4f 4eb5 	mov.w	lr, r5, ror #18
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 802a7a0:	ea89 59bb 	eor.w	r9, r9, fp, ror #22
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 802a7a4:	9a04      	ldr	r2, [sp, #16]
 802a7a6:	ea8e 1ef5 	eor.w	lr, lr, r5, ror #7
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 802a7aa:	44a1      	add	r9, r4
 802a7ac:	44b1      	add	r9, r6
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 802a7ae:	ea8e 0ed5 	eor.w	lr, lr, r5, lsr #3
 802a7b2:	4496      	add	lr, r2
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 802a7b4:	464a      	mov	r2, r9
 802a7b6:	9003      	str	r0, [sp, #12]
 802a7b8:	9801      	ldr	r0, [sp, #4]
 802a7ba:	9b00      	ldr	r3, [sp, #0]
 802a7bc:	4430      	add	r0, r6
 802a7be:	9001      	str	r0, [sp, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 802a7c0:	9803      	ldr	r0, [sp, #12]
 802a7c2:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 802a7c4:	ea87 0600 	eor.w	r6, r7, r0
 802a7c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802a7ca:	9801      	ldr	r0, [sp, #4]
 802a7cc:	ea4f 48fc 	mov.w	r8, ip, ror #19
 802a7d0:	ea88 487c 	eor.w	r8, r8, ip, ror #17
 802a7d4:	eb0e 0503 	add.w	r5, lr, r3
 802a7d8:	4030      	ands	r0, r6
 802a7da:	ea88 289c 	eor.w	r8, r8, ip, lsr #10
 802a7de:	4421      	add	r1, r4
 802a7e0:	9c01      	ldr	r4, [sp, #4]
 802a7e2:	4445      	add	r5, r8
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 802a7e4:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 802a7e8:	ea4b 0809 	orr.w	r8, fp, r9
 802a7ec:	ea4f 3e79 	mov.w	lr, r9, ror #13
 802a7f0:	ea80 0907 	eor.w	r9, r0, r7
 802a7f4:	9801      	ldr	r0, [sp, #4]
 802a7f6:	ea4f 26f4 	mov.w	r6, r4, ror #11
 802a7fa:	4429      	add	r1, r5
 802a7fc:	ea86 16b0 	eor.w	r6, r6, r0, ror #6
 802a800:	eb09 0401 	add.w	r4, r9, r1
 802a804:	ea86 6670 	eor.w	r6, r6, r0, ror #25
 802a808:	4434      	add	r4, r6
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 802a80a:	9e19      	ldr	r6, [sp, #100]	; 0x64
 802a80c:	9f14      	ldr	r7, [sp, #80]	; 0x50
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 802a80e:	ea8e 0eb2 	eor.w	lr, lr, r2, ror #2
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 802a812:	6433      	str	r3, [r6, #64]	; 0x40
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 802a814:	9b08      	ldr	r3, [sp, #32]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 802a816:	ea8e 51b2 	eor.w	r1, lr, r2, ror #22
 802a81a:	ea0b 0902 	and.w	r9, fp, r2
 802a81e:	9a00      	ldr	r2, [sp, #0]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 802a820:	6473      	str	r3, [r6, #68]	; 0x44
 802a822:	970c      	str	r7, [sp, #48]	; 0x30
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 802a824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a826:	9f12      	ldr	r7, [sp, #72]	; 0x48
 802a828:	3220      	adds	r2, #32
 802a82a:	64b3      	str	r3, [r6, #72]	; 0x48
 802a82c:	9200      	str	r2, [sp, #0]
 802a82e:	f8dd e054 	ldr.w	lr, [sp, #84]	; 0x54
 802a832:	970d      	str	r7, [sp, #52]	; 0x34
 802a834:	9f13      	ldr	r7, [sp, #76]	; 0x4c
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 802a836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 802a838:	ea08 080a 	and.w	r8, r8, sl
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 802a83c:	64f3      	str	r3, [r6, #76]	; 0x4c
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 802a83e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 802a840:	9a17      	ldr	r2, [sp, #92]	; 0x5c
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 802a842:	6533      	str	r3, [r6, #80]	; 0x50
 802a844:	9b07      	ldr	r3, [sp, #28]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 802a846:	ea48 0809 	orr.w	r8, r8, r9
 802a84a:	931a      	str	r3, [sp, #104]	; 0x68
 802a84c:	9b06      	ldr	r3, [sp, #24]
 802a84e:	4441      	add	r1, r8
 802a850:	e9c6 2516 	strd	r2, r5, [r6, #88]	; 0x58
 802a854:	1908      	adds	r0, r1, r4
    for( i = 16; i < 64; i += 8 )
 802a856:	4a1e      	ldr	r2, [pc, #120]	; (802a8d0 <mbedtls_internal_sha256_process+0x970>)
 802a858:	9900      	ldr	r1, [sp, #0]
 802a85a:	9304      	str	r3, [sp, #16]
 802a85c:	f106 0320 	add.w	r3, r6, #32
 802a860:	9705      	str	r7, [sp, #20]
 802a862:	9319      	str	r3, [sp, #100]	; 0x64
 802a864:	9f11      	ldr	r7, [sp, #68]	; 0x44
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 802a866:	9b02      	ldr	r3, [sp, #8]
    for( i = 16; i < 64; i += 8 )
 802a868:	428a      	cmp	r2, r1
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 802a86a:	f8c6 c054 	str.w	ip, [r6, #84]	; 0x54
 802a86e:	970e      	str	r7, [sp, #56]	; 0x38
 802a870:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 802a872:	4423      	add	r3, r4
 802a874:	9002      	str	r0, [sp, #8]
    for( i = 16; i < 64; i += 8 )
 802a876:	f47f ade3 	bne.w	802a440 <mbedtls_internal_sha256_process+0x4e0>
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
 802a87a:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 802a87c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a87e:	461e      	mov	r6, r3
 802a880:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 802a884:	eb03 0805 	add.w	r8, r3, r5
 802a888:	4625      	mov	r5, r4
 802a88a:	6921      	ldr	r1, [r4, #16]
 802a88c:	4402      	add	r2, r0
 802a88e:	eb01 070b 	add.w	r7, r1, fp
 802a892:	4629      	mov	r1, r5
 802a894:	69a8      	ldr	r0, [r5, #24]
 802a896:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802a898:	4430      	add	r0, r6
 802a89a:	6a0e      	ldr	r6, [r1, #32]
 802a89c:	6a49      	ldr	r1, [r1, #36]	; 0x24
 802a89e:	69ed      	ldr	r5, [r5, #28]
 802a8a0:	f8dd c004 	ldr.w	ip, [sp, #4]
 802a8a4:	4419      	add	r1, r3
 802a8a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802a8a8:	4465      	add	r5, ip
 802a8aa:	6964      	ldr	r4, [r4, #20]
 802a8ac:	e9c3 0506 	strd	r0, r5, [r3, #24]

    return( 0 );
}
 802a8b0:	2000      	movs	r0, #0
 802a8b2:	f8dd e00c 	ldr.w	lr, [sp, #12]
        ctx->state[i] += A[i];
 802a8b6:	4454      	add	r4, sl
 802a8b8:	4476      	add	r6, lr
 802a8ba:	e9c3 7404 	strd	r7, r4, [r3, #16]
 802a8be:	609a      	str	r2, [r3, #8]
 802a8c0:	f8c3 800c 	str.w	r8, [r3, #12]
 802a8c4:	621e      	str	r6, [r3, #32]
 802a8c6:	6259      	str	r1, [r3, #36]	; 0x24
}
 802a8c8:	b065      	add	sp, #404	; 0x194
 802a8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a8ce:	bf00      	nop
 802a8d0:	080354dc 	.word	0x080354dc

0802a8d4 <mbedtls_sha256_update_ret.part.0>:
#endif /* !MBEDTLS_SHA256_PROCESS_ALT */

/*
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
 802a8d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
 802a8d8:	6804      	ldr	r4, [r0, #0]
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
 802a8da:	4615      	mov	r5, r2
 802a8dc:	18a2      	adds	r2, r4, r2
 802a8de:	4606      	mov	r6, r0
 802a8e0:	460f      	mov	r7, r1
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 802a8e2:	6002      	str	r2, [r0, #0]
    left = ctx->total[0] & 0x3F;
 802a8e4:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
 802a8e8:	d302      	bcc.n	802a8f0 <mbedtls_sha256_update_ret.part.0+0x1c>
        ctx->total[1]++;
 802a8ea:	6843      	ldr	r3, [r0, #4]
 802a8ec:	3301      	adds	r3, #1
 802a8ee:	6043      	str	r3, [r0, #4]

    if( left && ilen >= fill )
 802a8f0:	b1d4      	cbz	r4, 802a928 <mbedtls_sha256_update_ret.part.0+0x54>
    fill = 64 - left;
 802a8f2:	f1c4 0840 	rsb	r8, r4, #64	; 0x40
    if( left && ilen >= fill )
 802a8f6:	45a8      	cmp	r8, r5
 802a8f8:	d904      	bls.n	802a904 <mbedtls_sha256_update_ret.part.0+0x30>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
 802a8fa:	462a      	mov	r2, r5

        input += 64;
        ilen  -= 64;
    }

    if( ilen > 0 )
 802a8fc:	bb6a      	cbnz	r2, 802a95a <mbedtls_sha256_update_ret.part.0+0x86>
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
 802a8fe:	4610      	mov	r0, r2
}
 802a900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        memcpy( (void *) (ctx->buffer + left), input, fill );
 802a904:	f106 0928 	add.w	r9, r6, #40	; 0x28
 802a908:	4639      	mov	r1, r7
 802a90a:	4642      	mov	r2, r8
 802a90c:	eb09 0004 	add.w	r0, r9, r4
 802a910:	f005 fa82 	bl	802fe18 <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 802a914:	4649      	mov	r1, r9
 802a916:	4630      	mov	r0, r6
 802a918:	f7ff fb22 	bl	8029f60 <mbedtls_internal_sha256_process>
 802a91c:	2800      	cmp	r0, #0
 802a91e:	d1ef      	bne.n	802a900 <mbedtls_sha256_update_ret.part.0+0x2c>
        input += fill;
 802a920:	f1a5 0240 	sub.w	r2, r5, #64	; 0x40
        ilen  -= fill;
 802a924:	18a5      	adds	r5, r4, r2
        input += fill;
 802a926:	4447      	add	r7, r8
    while( ilen >= 64 )
 802a928:	2d3f      	cmp	r5, #63	; 0x3f
 802a92a:	d91f      	bls.n	802a96c <mbedtls_sha256_update_ret.part.0+0x98>
 802a92c:	463c      	mov	r4, r7
 802a92e:	f1a5 0340 	sub.w	r3, r5, #64	; 0x40
 802a932:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 802a936:	3340      	adds	r3, #64	; 0x40
 802a938:	441f      	add	r7, r3
 802a93a:	4425      	add	r5, r4
 802a93c:	e001      	b.n	802a942 <mbedtls_sha256_update_ret.part.0+0x6e>
 802a93e:	42bc      	cmp	r4, r7
 802a940:	d008      	beq.n	802a954 <mbedtls_sha256_update_ret.part.0+0x80>
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 802a942:	4621      	mov	r1, r4
 802a944:	4630      	mov	r0, r6
 802a946:	f7ff fb0b 	bl	8029f60 <mbedtls_internal_sha256_process>
        input += 64;
 802a94a:	3440      	adds	r4, #64	; 0x40
        ilen  -= 64;
 802a94c:	1b2a      	subs	r2, r5, r4
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 802a94e:	2800      	cmp	r0, #0
 802a950:	d0f5      	beq.n	802a93e <mbedtls_sha256_update_ret.part.0+0x6a>
 802a952:	e7d5      	b.n	802a900 <mbedtls_sha256_update_ret.part.0+0x2c>
 802a954:	4604      	mov	r4, r0
    if( ilen > 0 )
 802a956:	2a00      	cmp	r2, #0
 802a958:	d0d1      	beq.n	802a8fe <mbedtls_sha256_update_ret.part.0+0x2a>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 802a95a:	f106 0028 	add.w	r0, r6, #40	; 0x28
 802a95e:	4639      	mov	r1, r7
 802a960:	4420      	add	r0, r4
 802a962:	f005 fa59 	bl	802fe18 <memcpy>
    return( 0 );
 802a966:	2000      	movs	r0, #0
}
 802a968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    while( ilen >= 64 )
 802a96c:	2400      	movs	r4, #0
 802a96e:	462a      	mov	r2, r5
 802a970:	e7c4      	b.n	802a8fc <mbedtls_sha256_update_ret.part.0+0x28>
 802a972:	bf00      	nop

0802a974 <mbedtls_sha256_update_ret>:
    if( ilen == 0 )
 802a974:	b10a      	cbz	r2, 802a97a <mbedtls_sha256_update_ret+0x6>
 802a976:	f7ff bfad 	b.w	802a8d4 <mbedtls_sha256_update_ret.part.0>
}
 802a97a:	4610      	mov	r0, r2
 802a97c:	4770      	bx	lr
 802a97e:	bf00      	nop

0802a980 <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 802a980:	b570      	push	{r4, r5, r6, lr}
 802a982:	4604      	mov	r4, r0
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 802a984:	2080      	movs	r0, #128	; 0x80
    used = ctx->total[0] & 0x3F;
 802a986:	6822      	ldr	r2, [r4, #0]

    if( used <= 56 )
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 802a988:	f104 0628 	add.w	r6, r4, #40	; 0x28
    used = ctx->total[0] & 0x3F;
 802a98c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    ctx->buffer[used++] = 0x80;
 802a990:	18a3      	adds	r3, r4, r2
 802a992:	3201      	adds	r2, #1
    if( used <= 56 )
 802a994:	2a38      	cmp	r2, #56	; 0x38
    ctx->buffer[used++] = 0x80;
 802a996:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
{
 802a99a:	460d      	mov	r5, r1
        memset( ctx->buffer + used, 0, 56 - used );
 802a99c:	eb06 0002 	add.w	r0, r6, r2
    if( used <= 56 )
 802a9a0:	d861      	bhi.n	802aa66 <mbedtls_sha256_finish_ret+0xe6>
        memset( ctx->buffer + used, 0, 56 - used );
 802a9a2:	2100      	movs	r1, #0
 802a9a4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 802a9a8:	f005 fa5d 	bl	802fe66 <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
 802a9ac:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
 802a9b0:	0f5a      	lsrs	r2, r3, #29
 802a9b2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
 802a9b6:	00db      	lsls	r3, r3, #3
 802a9b8:	ba1b      	rev	r3, r3
 802a9ba:	ba12      	rev	r2, r2

    PUT_UINT32_BE( high, ctx->buffer, 56 );
    PUT_UINT32_BE( low,  ctx->buffer, 60 );

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 802a9bc:	4631      	mov	r1, r6
 802a9be:	4620      	mov	r0, r4
    PUT_UINT32_BE( high, ctx->buffer, 56 );
 802a9c0:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60
    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 802a9c4:	f7ff facc 	bl	8029f60 <mbedtls_internal_sha256_process>
 802a9c8:	2800      	cmp	r0, #0
 802a9ca:	d14b      	bne.n	802aa64 <mbedtls_sha256_finish_ret+0xe4>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 802a9cc:	7ae3      	ldrb	r3, [r4, #11]
 802a9ce:	702b      	strb	r3, [r5, #0]
 802a9d0:	8963      	ldrh	r3, [r4, #10]
 802a9d2:	706b      	strb	r3, [r5, #1]
 802a9d4:	68a3      	ldr	r3, [r4, #8]
 802a9d6:	0a1b      	lsrs	r3, r3, #8
 802a9d8:	70ab      	strb	r3, [r5, #2]
 802a9da:	68a3      	ldr	r3, [r4, #8]
 802a9dc:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 802a9de:	7be3      	ldrb	r3, [r4, #15]
 802a9e0:	712b      	strb	r3, [r5, #4]
 802a9e2:	89e3      	ldrh	r3, [r4, #14]
 802a9e4:	716b      	strb	r3, [r5, #5]
 802a9e6:	68e3      	ldr	r3, [r4, #12]
 802a9e8:	0a1b      	lsrs	r3, r3, #8
 802a9ea:	71ab      	strb	r3, [r5, #6]
 802a9ec:	68e3      	ldr	r3, [r4, #12]
 802a9ee:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 802a9f0:	7ce3      	ldrb	r3, [r4, #19]
 802a9f2:	722b      	strb	r3, [r5, #8]
 802a9f4:	8a63      	ldrh	r3, [r4, #18]
 802a9f6:	726b      	strb	r3, [r5, #9]
 802a9f8:	6923      	ldr	r3, [r4, #16]
 802a9fa:	0a1b      	lsrs	r3, r3, #8
 802a9fc:	72ab      	strb	r3, [r5, #10]
 802a9fe:	6923      	ldr	r3, [r4, #16]
 802aa00:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 802aa02:	7de3      	ldrb	r3, [r4, #23]
 802aa04:	732b      	strb	r3, [r5, #12]
 802aa06:	8ae3      	ldrh	r3, [r4, #22]
 802aa08:	736b      	strb	r3, [r5, #13]
 802aa0a:	6963      	ldr	r3, [r4, #20]
 802aa0c:	0a1b      	lsrs	r3, r3, #8
 802aa0e:	73ab      	strb	r3, [r5, #14]
 802aa10:	6963      	ldr	r3, [r4, #20]
 802aa12:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 802aa14:	7ee3      	ldrb	r3, [r4, #27]
 802aa16:	742b      	strb	r3, [r5, #16]
 802aa18:	8b63      	ldrh	r3, [r4, #26]
 802aa1a:	746b      	strb	r3, [r5, #17]
 802aa1c:	69a3      	ldr	r3, [r4, #24]
 802aa1e:	0a1b      	lsrs	r3, r3, #8
 802aa20:	74ab      	strb	r3, [r5, #18]
 802aa22:	69a3      	ldr	r3, [r4, #24]
 802aa24:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 802aa26:	7fe3      	ldrb	r3, [r4, #31]
 802aa28:	752b      	strb	r3, [r5, #20]
 802aa2a:	8be3      	ldrh	r3, [r4, #30]
 802aa2c:	756b      	strb	r3, [r5, #21]
 802aa2e:	69e3      	ldr	r3, [r4, #28]
 802aa30:	0a1b      	lsrs	r3, r3, #8
 802aa32:	75ab      	strb	r3, [r5, #22]
 802aa34:	69e3      	ldr	r3, [r4, #28]
 802aa36:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 802aa38:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 802aa3c:	762b      	strb	r3, [r5, #24]
 802aa3e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 802aa40:	766b      	strb	r3, [r5, #25]
 802aa42:	6a23      	ldr	r3, [r4, #32]
 802aa44:	0a1b      	lsrs	r3, r3, #8
 802aa46:	76ab      	strb	r3, [r5, #26]
 802aa48:	6a23      	ldr	r3, [r4, #32]
 802aa4a:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
 802aa4c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 802aa4e:	b94b      	cbnz	r3, 802aa64 <mbedtls_sha256_finish_ret+0xe4>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 802aa50:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 802aa54:	772b      	strb	r3, [r5, #28]
 802aa56:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 802aa58:	776b      	strb	r3, [r5, #29]
 802aa5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802aa5c:	0a1b      	lsrs	r3, r3, #8
 802aa5e:	77ab      	strb	r3, [r5, #30]
 802aa60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802aa62:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
 802aa64:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
 802aa66:	2100      	movs	r1, #0
 802aa68:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
 802aa6c:	f005 f9fb 	bl	802fe66 <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 802aa70:	4631      	mov	r1, r6
 802aa72:	4620      	mov	r0, r4
 802aa74:	f7ff fa74 	bl	8029f60 <mbedtls_internal_sha256_process>
 802aa78:	2800      	cmp	r0, #0
 802aa7a:	d1f3      	bne.n	802aa64 <mbedtls_sha256_finish_ret+0xe4>
        memset( ctx->buffer, 0, 56 );
 802aa7c:	4601      	mov	r1, r0
 802aa7e:	2238      	movs	r2, #56	; 0x38
 802aa80:	4630      	mov	r0, r6
 802aa82:	f005 f9f0 	bl	802fe66 <memset>
 802aa86:	e791      	b.n	802a9ac <mbedtls_sha256_finish_ret+0x2c>

0802aa88 <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 802aa88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802aa8c:	b09c      	sub	sp, #112	; 0x70
 802aa8e:	4680      	mov	r8, r0
 802aa90:	460f      	mov	r7, r1
 802aa92:	4614      	mov	r4, r2
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 802aa94:	2100      	movs	r1, #0
 802aa96:	2264      	movs	r2, #100	; 0x64
 802aa98:	a802      	add	r0, sp, #8
{
 802aa9a:	461d      	mov	r5, r3
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 802aa9c:	f005 f9e3 	bl	802fe66 <memset>
    ctx->total[0] = 0;
 802aaa0:	2200      	movs	r2, #0
 802aaa2:	2300      	movs	r3, #0
 802aaa4:	e9cd 2300 	strd	r2, r3, [sp]
    if( is224 == 0 )
 802aaa8:	2d00      	cmp	r5, #0
 802aaaa:	d13f      	bne.n	802ab2c <mbedtls_sha256_ret+0xa4>
        ctx->state[0] = 0x6A09E667;
 802aaac:	a15e      	add	r1, pc, #376	; (adr r1, 802ac28 <mbedtls_sha256_ret+0x1a0>)
 802aaae:	e9d1 0100 	ldrd	r0, r1, [r1]
 802aab2:	a35f      	add	r3, pc, #380	; (adr r3, 802ac30 <mbedtls_sha256_ret+0x1a8>)
 802aab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802aab8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802aabc:	a15e      	add	r1, pc, #376	; (adr r1, 802ac38 <mbedtls_sha256_ret+0x1b0>)
 802aabe:	e9d1 0100 	ldrd	r0, r1, [r1]
 802aac2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802aac6:	a35e      	add	r3, pc, #376	; (adr r3, 802ac40 <mbedtls_sha256_ret+0x1b8>)
 802aac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802aacc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802aad0:	e9cd 2308 	strd	r2, r3, [sp, #32]
    ctx->is224 = is224;
 802aad4:	951a      	str	r5, [sp, #104]	; 0x68
    if( ilen == 0 )
 802aad6:	2f00      	cmp	r7, #0
 802aad8:	d03f      	beq.n	802ab5a <mbedtls_sha256_ret+0xd2>
 802aada:	466e      	mov	r6, sp
 802aadc:	463a      	mov	r2, r7
 802aade:	4641      	mov	r1, r8
 802aae0:	4630      	mov	r0, r6
 802aae2:	f7ff fef7 	bl	802a8d4 <mbedtls_sha256_update_ret.part.0>
    mbedtls_sha256_init( &ctx );

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
 802aae6:	4605      	mov	r5, r0
 802aae8:	b9c0      	cbnz	r0, 802ab1c <mbedtls_sha256_ret+0x94>
    ctx->buffer[used++] = 0x80;
 802aaea:	2180      	movs	r1, #128	; 0x80
    used = ctx->total[0] & 0x3F;
 802aaec:	9a00      	ldr	r2, [sp, #0]
    ctx->buffer[used++] = 0x80;
 802aaee:	ab1c      	add	r3, sp, #112	; 0x70
    used = ctx->total[0] & 0x3F;
 802aaf0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    ctx->buffer[used++] = 0x80;
 802aaf4:	4413      	add	r3, r2
 802aaf6:	3201      	adds	r2, #1
    if( used <= 56 )
 802aaf8:	2a38      	cmp	r2, #56	; 0x38
    ctx->buffer[used++] = 0x80;
 802aafa:	f803 1c48 	strb.w	r1, [r3, #-72]
    if( used <= 56 )
 802aafe:	d931      	bls.n	802ab64 <mbedtls_sha256_ret+0xdc>
        memset( ctx->buffer + used, 0, 64 - used );
 802ab00:	af0a      	add	r7, sp, #40	; 0x28
 802ab02:	4601      	mov	r1, r0
 802ab04:	18b8      	adds	r0, r7, r2
 802ab06:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
 802ab0a:	f005 f9ac 	bl	802fe66 <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 802ab0e:	4639      	mov	r1, r7
 802ab10:	4630      	mov	r0, r6
 802ab12:	f7ff fa25 	bl	8029f60 <mbedtls_internal_sha256_process>
 802ab16:	4605      	mov	r5, r0
 802ab18:	2800      	cmp	r0, #0
 802ab1a:	d07f      	beq.n	802ac1c <mbedtls_sha256_ret+0x194>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
 802ab1c:	4630      	mov	r0, r6
 802ab1e:	216c      	movs	r1, #108	; 0x6c
 802ab20:	f7fd f804 	bl	8027b2c <mbedtls_platform_zeroize>

exit:
    mbedtls_sha256_free( &ctx );

    return( ret );
}
 802ab24:	4628      	mov	r0, r5
 802ab26:	b01c      	add	sp, #112	; 0x70
 802ab28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ctx->state[0] = 0xC1059ED8;
 802ab2c:	a346      	add	r3, pc, #280	; (adr r3, 802ac48 <mbedtls_sha256_ret+0x1c0>)
 802ab2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ab32:	a147      	add	r1, pc, #284	; (adr r1, 802ac50 <mbedtls_sha256_ret+0x1c8>)
 802ab34:	e9d1 0100 	ldrd	r0, r1, [r1]
 802ab38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802ab3c:	a346      	add	r3, pc, #280	; (adr r3, 802ac58 <mbedtls_sha256_ret+0x1d0>)
 802ab3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ab42:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802ab46:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802ab4a:	a345      	add	r3, pc, #276	; (adr r3, 802ac60 <mbedtls_sha256_ret+0x1d8>)
 802ab4c:	e9d3 2300 	ldrd	r2, r3, [r3]
    ctx->is224 = is224;
 802ab50:	951a      	str	r5, [sp, #104]	; 0x68
        ctx->state[0] = 0xC1059ED8;
 802ab52:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if( ilen == 0 )
 802ab56:	2f00      	cmp	r7, #0
 802ab58:	d1bf      	bne.n	802aada <mbedtls_sha256_ret+0x52>
    ctx->buffer[used++] = 0x80;
 802ab5a:	2380      	movs	r3, #128	; 0x80
 802ab5c:	2201      	movs	r2, #1
 802ab5e:	466e      	mov	r6, sp
 802ab60:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        memset( ctx->buffer + used, 0, 56 - used );
 802ab64:	af0a      	add	r7, sp, #40	; 0x28
 802ab66:	18b8      	adds	r0, r7, r2
 802ab68:	2100      	movs	r1, #0
 802ab6a:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 802ab6e:	f005 f97a 	bl	802fe66 <memset>
         | ( ctx->total[1] <<  3 );
 802ab72:	e9dd 3100 	ldrd	r3, r1, [sp]
    high = ( ctx->total[0] >> 29 )
 802ab76:	0f5a      	lsrs	r2, r3, #29
 802ab78:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
 802ab7c:	00db      	lsls	r3, r3, #3
 802ab7e:	ba1b      	rev	r3, r3
 802ab80:	ba12      	rev	r2, r2
    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 802ab82:	4639      	mov	r1, r7
 802ab84:	4630      	mov	r0, r6
    PUT_UINT32_BE( high, ctx->buffer, 56 );
 802ab86:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 802ab8a:	f7ff f9e9 	bl	8029f60 <mbedtls_internal_sha256_process>
 802ab8e:	4605      	mov	r5, r0
 802ab90:	2800      	cmp	r0, #0
 802ab92:	d1c3      	bne.n	802ab1c <mbedtls_sha256_ret+0x94>
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 802ab94:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 802ab98:	0e08      	lsrs	r0, r1, #24
 802ab9a:	7020      	strb	r0, [r4, #0]
 802ab9c:	0a08      	lsrs	r0, r1, #8
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 802ab9e:	9b04      	ldr	r3, [sp, #16]
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 802aba0:	70a0      	strb	r0, [r4, #2]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 802aba2:	0e10      	lsrs	r0, r2, #24
 802aba4:	7120      	strb	r0, [r4, #4]
 802aba6:	0a10      	lsrs	r0, r2, #8
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 802aba8:	0c0f      	lsrs	r7, r1, #16
 802abaa:	70e1      	strb	r1, [r4, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 802abac:	71a0      	strb	r0, [r4, #6]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 802abae:	9905      	ldr	r1, [sp, #20]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 802abb0:	0e18      	lsrs	r0, r3, #24
 802abb2:	7220      	strb	r0, [r4, #8]
 802abb4:	0a18      	lsrs	r0, r3, #8
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 802abb6:	7067      	strb	r7, [r4, #1]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 802abb8:	71e2      	strb	r2, [r4, #7]
 802abba:	0c17      	lsrs	r7, r2, #16
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 802abbc:	72a0      	strb	r0, [r4, #10]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 802abbe:	9a06      	ldr	r2, [sp, #24]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 802abc0:	0e08      	lsrs	r0, r1, #24
 802abc2:	73e1      	strb	r1, [r4, #15]
 802abc4:	7320      	strb	r0, [r4, #12]
 802abc6:	0c08      	lsrs	r0, r1, #16
 802abc8:	0a09      	lsrs	r1, r1, #8
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 802abca:	7167      	strb	r7, [r4, #5]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 802abcc:	72e3      	strb	r3, [r4, #11]
 802abce:	0c1f      	lsrs	r7, r3, #16
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 802abd0:	73a1      	strb	r1, [r4, #14]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 802abd2:	9b07      	ldr	r3, [sp, #28]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 802abd4:	0e11      	lsrs	r1, r2, #24
 802abd6:	74e2      	strb	r2, [r4, #19]
 802abd8:	7421      	strb	r1, [r4, #16]
 802abda:	0c11      	lsrs	r1, r2, #16
 802abdc:	0a12      	lsrs	r2, r2, #8
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 802abde:	7360      	strb	r0, [r4, #13]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 802abe0:	74a2      	strb	r2, [r4, #18]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 802abe2:	9808      	ldr	r0, [sp, #32]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 802abe4:	0e1a      	lsrs	r2, r3, #24
 802abe6:	75e3      	strb	r3, [r4, #23]
 802abe8:	7522      	strb	r2, [r4, #20]
 802abea:	0c1a      	lsrs	r2, r3, #16
 802abec:	0a1b      	lsrs	r3, r3, #8
 802abee:	7562      	strb	r2, [r4, #21]
 802abf0:	75a3      	strb	r3, [r4, #22]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 802abf2:	0e02      	lsrs	r2, r0, #24
 802abf4:	0c03      	lsrs	r3, r0, #16
 802abf6:	7622      	strb	r2, [r4, #24]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 802abf8:	7267      	strb	r7, [r4, #9]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 802abfa:	7461      	strb	r1, [r4, #17]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 802abfc:	7663      	strb	r3, [r4, #25]
    if( ctx->is224 == 0 )
 802abfe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 802ac00:	0a02      	lsrs	r2, r0, #8
 802ac02:	76e0      	strb	r0, [r4, #27]
 802ac04:	76a2      	strb	r2, [r4, #26]
    if( ctx->is224 == 0 )
 802ac06:	2b00      	cmp	r3, #0
 802ac08:	d188      	bne.n	802ab1c <mbedtls_sha256_ret+0x94>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 802ac0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ac0c:	0e19      	lsrs	r1, r3, #24
 802ac0e:	0c1a      	lsrs	r2, r3, #16
 802ac10:	77e3      	strb	r3, [r4, #31]
 802ac12:	0a1b      	lsrs	r3, r3, #8
 802ac14:	7721      	strb	r1, [r4, #28]
 802ac16:	7762      	strb	r2, [r4, #29]
 802ac18:	77a3      	strb	r3, [r4, #30]
 802ac1a:	e77f      	b.n	802ab1c <mbedtls_sha256_ret+0x94>
        memset( ctx->buffer, 0, 56 );
 802ac1c:	4601      	mov	r1, r0
 802ac1e:	2238      	movs	r2, #56	; 0x38
 802ac20:	4638      	mov	r0, r7
 802ac22:	f005 f920 	bl	802fe66 <memset>
 802ac26:	e7a4      	b.n	802ab72 <mbedtls_sha256_ret+0xea>
 802ac28:	6a09e667 	.word	0x6a09e667
 802ac2c:	bb67ae85 	.word	0xbb67ae85
 802ac30:	3c6ef372 	.word	0x3c6ef372
 802ac34:	a54ff53a 	.word	0xa54ff53a
 802ac38:	510e527f 	.word	0x510e527f
 802ac3c:	9b05688c 	.word	0x9b05688c
 802ac40:	1f83d9ab 	.word	0x1f83d9ab
 802ac44:	5be0cd19 	.word	0x5be0cd19
 802ac48:	c1059ed8 	.word	0xc1059ed8
 802ac4c:	367cd507 	.word	0x367cd507
 802ac50:	ffc00b31 	.word	0xffc00b31
 802ac54:	68581511 	.word	0x68581511
 802ac58:	3070dd17 	.word	0x3070dd17
 802ac5c:	f70e5939 	.word	0xf70e5939
 802ac60:	64f98fa7 	.word	0x64f98fa7
 802ac64:	befa4fa4 	.word	0xbefa4fa4

0802ac68 <mbedtls_ssl_list_ciphersuites>:

    return( 0 );
}

const int *mbedtls_ssl_list_ciphersuites( void )
{
 802ac68:	b470      	push	{r4, r5, r6}
    /*
     * On initial call filter out all ciphersuites not supported by current
     * build based on presence in the ciphersuite_definitions.
     */
    if( supported_init == 0 )
 802ac6a:	4e11      	ldr	r6, [pc, #68]	; (802acb0 <mbedtls_ssl_list_ciphersuites+0x48>)
 802ac6c:	6833      	ldr	r3, [r6, #0]
 802ac6e:	b9db      	cbnz	r3, 802aca8 <mbedtls_ssl_list_ciphersuites+0x40>
    {
        const int *p;
        int *q;

        for( p = ciphersuite_preference, q = supported_ciphersuites;
             *p != 0 && q < supported_ciphersuites + MAX_CIPHERSUITES - 1;
 802ac70:	f64c 41a8 	movw	r1, #52392	; 0xcca8
        for( p = ciphersuite_preference, q = supported_ciphersuites;
 802ac74:	480f      	ldr	r0, [pc, #60]	; (802acb4 <mbedtls_ssl_list_ciphersuites+0x4c>)
 802ac76:	4c10      	ldr	r4, [pc, #64]	; (802acb8 <mbedtls_ssl_list_ciphersuites+0x50>)
             *p != 0 && q < supported_ciphersuites + MAX_CIPHERSUITES - 1;
 802ac78:	f100 050c 	add.w	r5, r0, #12

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;

    while( cur->id != 0 )
 802ac7c:	239c      	movs	r3, #156	; 0x9c
 802ac7e:	4a0f      	ldr	r2, [pc, #60]	; (802acbc <mbedtls_ssl_list_ciphersuites+0x54>)
 802ac80:	e002      	b.n	802ac88 <mbedtls_ssl_list_ciphersuites+0x20>
 802ac82:	f852 3f20 	ldr.w	r3, [r2, #32]!
 802ac86:	b133      	cbz	r3, 802ac96 <mbedtls_ssl_list_ciphersuites+0x2e>
    {
        if( cur->id == ciphersuite )
 802ac88:	4299      	cmp	r1, r3
 802ac8a:	d1fa      	bne.n	802ac82 <mbedtls_ssl_list_ciphersuites+0x1a>
    if( cs_info->cipher == MBEDTLS_CIPHER_ARC4_128 )
 802ac8c:	7a13      	ldrb	r3, [r2, #8]
 802ac8e:	2b2a      	cmp	r3, #42	; 0x2a
 802ac90:	d001      	beq.n	802ac96 <mbedtls_ssl_list_ciphersuites+0x2e>
                *(q++) = *p;
 802ac92:	f840 1b04 	str.w	r1, [r0], #4
             *p != 0 && q < supported_ciphersuites + MAX_CIPHERSUITES - 1;
 802ac96:	f854 1f04 	ldr.w	r1, [r4, #4]!
        for( p = ciphersuite_preference, q = supported_ciphersuites;
 802ac9a:	b109      	cbz	r1, 802aca0 <mbedtls_ssl_list_ciphersuites+0x38>
             *p != 0 && q < supported_ciphersuites + MAX_CIPHERSUITES - 1;
 802ac9c:	42a8      	cmp	r0, r5
 802ac9e:	d3ed      	bcc.n	802ac7c <mbedtls_ssl_list_ciphersuites+0x14>
        *q = 0;
 802aca0:	2200      	movs	r2, #0
        supported_init = 1;
 802aca2:	2301      	movs	r3, #1
        *q = 0;
 802aca4:	6002      	str	r2, [r0, #0]
        supported_init = 1;
 802aca6:	6033      	str	r3, [r6, #0]
}
 802aca8:	4802      	ldr	r0, [pc, #8]	; (802acb4 <mbedtls_ssl_list_ciphersuites+0x4c>)
 802acaa:	bc70      	pop	{r4, r5, r6}
 802acac:	4770      	bx	lr
 802acae:	bf00      	nop
 802acb0:	2001bc44 	.word	0x2001bc44
 802acb4:	2001bc34 	.word	0x2001bc34
 802acb8:	08035604 	.word	0x08035604
 802acbc:	08035584 	.word	0x08035584

0802acc0 <mbedtls_ssl_ciphersuite_from_id>:
{
 802acc0:	4602      	mov	r2, r0
    while( cur->id != 0 )
 802acc2:	239c      	movs	r3, #156	; 0x9c
 802acc4:	4804      	ldr	r0, [pc, #16]	; (802acd8 <mbedtls_ssl_ciphersuite_from_id+0x18>)
 802acc6:	e002      	b.n	802acce <mbedtls_ssl_ciphersuite_from_id+0xe>
 802acc8:	6a03      	ldr	r3, [r0, #32]
 802acca:	3020      	adds	r0, #32
 802accc:	b113      	cbz	r3, 802acd4 <mbedtls_ssl_ciphersuite_from_id+0x14>
        if( cur->id == ciphersuite )
 802acce:	429a      	cmp	r2, r3
 802acd0:	d1fa      	bne.n	802acc8 <mbedtls_ssl_ciphersuite_from_id+0x8>

        cur++;
    }

    return( NULL );
}
 802acd2:	4770      	bx	lr
    return( NULL );
 802acd4:	4618      	mov	r0, r3
}
 802acd6:	4770      	bx	lr
 802acd8:	08035584 	.word	0x08035584

0802acdc <mbedtls_ssl_get_ciphersuite_name>:
    while( cur->id != 0 )
 802acdc:	239c      	movs	r3, #156	; 0x9c
 802acde:	4a05      	ldr	r2, [pc, #20]	; (802acf4 <mbedtls_ssl_get_ciphersuite_name+0x18>)
 802ace0:	e002      	b.n	802ace8 <mbedtls_ssl_get_ciphersuite_name+0xc>
 802ace2:	f852 3f20 	ldr.w	r3, [r2, #32]!
 802ace6:	b11b      	cbz	r3, 802acf0 <mbedtls_ssl_get_ciphersuite_name+0x14>
        if( cur->id == ciphersuite )
 802ace8:	4298      	cmp	r0, r3
 802acea:	d1fa      	bne.n	802ace2 <mbedtls_ssl_get_ciphersuite_name+0x6>
    cur = mbedtls_ssl_ciphersuite_from_id( ciphersuite_id );

    if( cur == NULL )
        return( "unknown" );

    return( cur->name );
 802acec:	6850      	ldr	r0, [r2, #4]
}
 802acee:	4770      	bx	lr
        return( "unknown" );
 802acf0:	4801      	ldr	r0, [pc, #4]	; (802acf8 <mbedtls_ssl_get_ciphersuite_name+0x1c>)
 802acf2:	4770      	bx	lr
 802acf4:	08035584 	.word	0x08035584
 802acf8:	0803551c 	.word	0x0803551c

0802acfc <mbedtls_ssl_handshake_client_step>:

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 802acfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 802ad00:	6843      	ldr	r3, [r0, #4]
{
 802ad02:	b099      	sub	sp, #100	; 0x64
    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 802ad04:	2b10      	cmp	r3, #16
 802ad06:	f000 8472 	beq.w	802b5ee <mbedtls_ssl_handshake_client_step+0x8f2>
 802ad0a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 802ad0c:	4604      	mov	r4, r0
 802ad0e:	2b00      	cmp	r3, #0
 802ad10:	f000 846d 	beq.w	802b5ee <mbedtls_ssl_handshake_client_step+0x8f2>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "client state: %d", ssl->state ) );

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 802ad14:	f001 fa7a 	bl	802c20c <mbedtls_ssl_flush_output>
 802ad18:	4605      	mov	r5, r0
 802ad1a:	2800      	cmp	r0, #0
 802ad1c:	d14c      	bne.n	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
    {
        ssl->state = MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET;
    }
#endif

    switch( ssl->state )
 802ad1e:	6863      	ldr	r3, [r4, #4]
 802ad20:	2b0f      	cmp	r3, #15
 802ad22:	f200 8464 	bhi.w	802b5ee <mbedtls_ssl_handshake_client_step+0x8f2>
 802ad26:	e8df f013 	tbh	[pc, r3, lsl #1]
 802ad2a:	0391      	.short	0x0391
 802ad2c:	00fa01c5 	.word	0x00fa01c5
 802ad30:	03a200f5 	.word	0x03a200f5
 802ad34:	03c60395 	.word	0x03c60395
 802ad38:	007c00f0 	.word	0x007c00f0
 802ad3c:	00610066 	.word	0x00610066
 802ad40:	0057005c 	.word	0x0057005c
 802ad44:	004f0052 	.word	0x004f0052
 802ad48:	004b      	.short	0x004b
}
#endif /* MBEDTLS_KEY_EXCHANGE_SOME_ECDH_ENABLED */

static inline int mbedtls_ssl_ciphersuite_cert_req_allowed( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
 802ad4a:	3b09      	subs	r3, #9
 802ad4c:	2b01      	cmp	r3, #1
 802ad4e:	f200 838b 	bhi.w	802b468 <mbedtls_ssl_handshake_client_step+0x76c>
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 802ad52:	2101      	movs	r1, #1
 802ad54:	4620      	mov	r0, r4
 802ad56:	f001 fc6f 	bl	802c638 <mbedtls_ssl_read_record>
 802ad5a:	2800      	cmp	r0, #0
 802ad5c:	f040 80d3 	bne.w	802af06 <mbedtls_ssl_handshake_client_step+0x20a>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 802ad60:	6f63      	ldr	r3, [r4, #116]	; 0x74
 802ad62:	2b16      	cmp	r3, #22
 802ad64:	f040 83a0 	bne.w	802b4a8 <mbedtls_ssl_handshake_client_step+0x7ac>
    ssl->state++;
 802ad68:	6863      	ldr	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
 802ad6a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    ssl->state++;
 802ad6c:	3301      	adds	r3, #1
 802ad6e:	6063      	str	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
 802ad70:	7813      	ldrb	r3, [r2, #0]
 802ad72:	2b0d      	cmp	r3, #13
 802ad74:	bf0c      	ite	eq
 802ad76:	2301      	moveq	r3, #1
 802ad78:	2300      	movne	r3, #0
 802ad7a:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    if( ssl->client_auth == 0 )
 802ad7e:	f040 84c4 	bne.w	802b70a <mbedtls_ssl_handshake_client_step+0xa0e>
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) )
 802ad82:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 802ad86:	2904      	cmp	r1, #4
 802ad88:	d910      	bls.n	802adac <mbedtls_ssl_handshake_client_step+0xb0>
    cert_type_len = buf[mbedtls_ssl_hs_hdr_len( ssl )];
 802ad8a:	7913      	ldrb	r3, [r2, #4]
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
 802ad8c:	1d98      	adds	r0, r3, #6
 802ad8e:	4281      	cmp	r1, r0
 802ad90:	d90c      	bls.n	802adac <mbedtls_ssl_handshake_client_step+0xb0>
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 802ad92:	68e6      	ldr	r6, [r4, #12]
 802ad94:	2e03      	cmp	r6, #3
 802ad96:	f000 84d8 	beq.w	802b74a <mbedtls_ssl_handshake_client_step+0xa4e>
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 802ad9a:	18d6      	adds	r6, r2, r3
             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
 802ad9c:	5c12      	ldrb	r2, [r2, r0]
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 802ad9e:	7970      	ldrb	r0, [r6, #5]
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 802ada0:	3307      	adds	r3, #7
             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
 802ada2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 802ada6:	4413      	add	r3, r2
 802ada8:	4299      	cmp	r1, r3
 802adaa:	d005      	beq.n	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 802adac:	4620      	mov	r0, r4
 802adae:	2232      	movs	r2, #50	; 0x32
 802adb0:	2102      	movs	r1, #2
 802adb2:	f001 fdb1 	bl	802c918 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
 802adb6:	4dbd      	ldr	r5, [pc, #756]	; (802b0ac <mbedtls_ssl_handshake_client_step+0x3b0>)
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
           return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   }

    return( ret );
}
 802adb8:	4628      	mov	r0, r5
 802adba:	b019      	add	sp, #100	; 0x64
 802adbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
           mbedtls_ssl_handshake_wrapup( ssl );
 802adc0:	4620      	mov	r0, r4
 802adc2:	f002 fe8f 	bl	802dae4 <mbedtls_ssl_handshake_wrapup>
           break;
 802adc6:	e7f7      	b.n	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 802adc8:	230f      	movs	r3, #15
 802adca:	6063      	str	r3, [r4, #4]
           break;
 802adcc:	e7f4      	b.n	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
           ret = mbedtls_ssl_parse_finished( ssl );
 802adce:	4620      	mov	r0, r4
 802add0:	f002 ff16 	bl	802dc00 <mbedtls_ssl_parse_finished>
 802add4:	4605      	mov	r5, r0
           break;
 802add6:	e7ef      	b.n	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
           ret = mbedtls_ssl_parse_change_cipher_spec( ssl );
 802add8:	4620      	mov	r0, r4
 802adda:	f001 ff91 	bl	802cd00 <mbedtls_ssl_parse_change_cipher_spec>
 802adde:	4605      	mov	r5, r0
           break;
 802ade0:	e7ea      	b.n	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
           ret = mbedtls_ssl_write_finished( ssl );
 802ade2:	4620      	mov	r0, r4
 802ade4:	f002 fed0 	bl	802db88 <mbedtls_ssl_write_finished>
 802ade8:	4605      	mov	r5, r0
           break;
 802adea:	e7e5      	b.n	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
           ret = mbedtls_ssl_write_change_cipher_spec( ssl );
 802adec:	4620      	mov	r0, r4
 802adee:	f001 fe75 	bl	802cadc <mbedtls_ssl_write_change_cipher_spec>
 802adf2:	4605      	mov	r5, r0
           break;
 802adf4:	e7e0      	b.n	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
    size_t n = 0, offset = 0;
 802adf6:	2200      	movs	r2, #0
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 802adf8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 802adfa:	4620      	mov	r0, r4
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 802adfc:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
    size_t n = 0, offset = 0;
 802ae00:	920a      	str	r2, [sp, #40]	; 0x28
    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 802ae02:	f002 faa3 	bl	802d34c <mbedtls_ssl_derive_keys>
 802ae06:	4605      	mov	r5, r0
 802ae08:	2800      	cmp	r0, #0
 802ae0a:	d1d5      	bne.n	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
    if( !mbedtls_ssl_ciphersuite_cert_req_allowed( ciphersuite_info ) )
 802ae0c:	7ab3      	ldrb	r3, [r6, #10]
 802ae0e:	2b04      	cmp	r3, #4
 802ae10:	f200 836d 	bhi.w	802b4ee <mbedtls_ssl_handshake_client_step+0x7f2>
 802ae14:	2b00      	cmp	r3, #0
 802ae16:	f040 836e 	bne.w	802b4f6 <mbedtls_ssl_handshake_client_step+0x7fa>
        ssl->state++;
 802ae1a:	6863      	ldr	r3, [r4, #4]
 802ae1c:	3301      	adds	r3, #1
 802ae1e:	6063      	str	r3, [r4, #4]
        return( 0 );
 802ae20:	e7ca      	b.n	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
        ssl->handshake->ciphersuite_info;
 802ae22:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 802ae24:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 802ae28:	7a9f      	ldrb	r7, [r3, #10]
 802ae2a:	2f01      	cmp	r7, #1
 802ae2c:	f040 84da 	bne.w	802b7e4 <mbedtls_ssl_handshake_client_step+0xae8>
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 802ae30:	f643 7cfc 	movw	ip, #16380	; 0x3ffc
    mbedtls_ssl_write_version( ssl->conf->max_major_ver,
 802ae34:	6820      	ldr	r0, [r4, #0]
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 802ae36:	68e3      	ldr	r3, [r4, #12]
                               ssl->conf->transport, p );
 802ae38:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 802ae3c:	f105 08e4 	add.w	r8, r5, #228	; 0xe4
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 802ae40:	2b00      	cmp	r3, #0
    mbedtls_ssl_write_version( ssl->conf->max_major_ver,
 802ae42:	f890 1059 	ldrb.w	r1, [r0, #89]	; 0x59
 802ae46:	4643      	mov	r3, r8
 802ae48:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
 802ae4c:	f3c2 0240 	ubfx	r2, r2, #1, #1
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 802ae50:	bf0b      	itete	eq
 802ae52:	f04f 0904 	moveq.w	r9, #4
 802ae56:	f04f 0906 	movne.w	r9, #6
 802ae5a:	f04f 0a00 	moveq.w	sl, #0
 802ae5e:	f04f 0a02 	movne.w	sl, #2
 802ae62:	f643 76fa 	movw	r6, #16378	; 0x3ffa
 802ae66:	bf08      	it	eq
 802ae68:	4666      	moveq	r6, ip
    mbedtls_ssl_write_version( ssl->conf->max_major_ver,
 802ae6a:	f002 f8db 	bl	802d024 <mbedtls_ssl_write_version>
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p + 2, 46 ) ) != 0 )
 802ae6e:	6823      	ldr	r3, [r4, #0]
 802ae70:	f105 01e6 	add.w	r1, r5, #230	; 0xe6
 802ae74:	222e      	movs	r2, #46	; 0x2e
 802ae76:	e9d3 5006 	ldrd	r5, r0, [r3, #24]
 802ae7a:	47a8      	blx	r5
 802ae7c:	4605      	mov	r5, r0
 802ae7e:	2800      	cmp	r0, #0
 802ae80:	d19a      	bne.n	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
    ssl->handshake->pmslen = 48;
 802ae82:	2230      	movs	r2, #48	; 0x30
 802ae84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if( ! mbedtls_pk_can_do( peer_pk, MBEDTLS_PK_RSA ) )
 802ae86:	4639      	mov	r1, r7
    peer_pk = &ssl->handshake->peer_pubkey;
 802ae88:	f103 0718 	add.w	r7, r3, #24
    if( ! mbedtls_pk_can_do( peer_pk, MBEDTLS_PK_RSA ) )
 802ae8c:	4638      	mov	r0, r7
    ssl->handshake->pmslen = 48;
 802ae8e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    if( ! mbedtls_pk_can_do( peer_pk, MBEDTLS_PK_RSA ) )
 802ae92:	f7fc f9a7 	bl	80271e4 <mbedtls_pk_can_do>
 802ae96:	2800      	cmp	r0, #0
 802ae98:	f000 84c6 	beq.w	802b828 <mbedtls_ssl_handshake_client_step+0xb2c>
                            ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 802ae9c:	6823      	ldr	r3, [r4, #0]
    if( ( ret = mbedtls_pk_encrypt( peer_pk,
 802ae9e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 802aea0:	69d9      	ldr	r1, [r3, #28]
 802aea2:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 802aea6:	9103      	str	r1, [sp, #12]
 802aea8:	699d      	ldr	r5, [r3, #24]
 802aeaa:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 802aeae:	a80c      	add	r0, sp, #48	; 0x30
 802aeb0:	e9cd 6501 	strd	r6, r5, [sp, #4]
 802aeb4:	9000      	str	r0, [sp, #0]
 802aeb6:	4641      	mov	r1, r8
 802aeb8:	4638      	mov	r0, r7
 802aeba:	444b      	add	r3, r9
 802aebc:	f7fc fa34 	bl	8027328 <mbedtls_pk_encrypt>
 802aec0:	4605      	mov	r5, r0
 802aec2:	2800      	cmp	r0, #0
 802aec4:	f47f af78 	bne.w	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
    if( len_bytes == 2 )
 802aec8:	f1ba 0f00 	cmp.w	sl, #0
 802aecc:	d009      	beq.n	802aee2 <mbedtls_ssl_handshake_client_step+0x1e6>
        ssl->out_msg[offset+0] = (unsigned char)( *olen >> 8 );
 802aece:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802aed0:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 802aed4:	0a19      	lsrs	r1, r3, #8
 802aed6:	7111      	strb	r1, [r2, #4]
        ssl->out_msg[offset+1] = (unsigned char)( *olen      );
 802aed8:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
        *olen += 2;
 802aedc:	1c9a      	adds	r2, r3, #2
        ssl->out_msg[offset+1] = (unsigned char)( *olen      );
 802aede:	714b      	strb	r3, [r1, #5]
        *olen += 2;
 802aee0:	920c      	str	r2, [sp, #48]	; 0x30
    mbedtls_pk_free( peer_pk );
 802aee2:	4638      	mov	r0, r7
 802aee4:	f7fc f94e 	bl	8027184 <mbedtls_pk_free>
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 802aee8:	2016      	movs	r0, #22
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
 802aeea:	2110      	movs	r1, #16
    ssl->out_msglen  = header_len + content_len;
 802aeec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
 802aeee:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
    ssl->out_msglen  = header_len + content_len;
 802aef2:	3304      	adds	r3, #4
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 802aef4:	e9c4 0329 	strd	r0, r3, [r4, #164]	; 0xa4
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
 802aef8:	7011      	strb	r1, [r2, #0]
    ssl->state++;
 802aefa:	6863      	ldr	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
 802aefc:	4620      	mov	r0, r4
    ssl->state++;
 802aefe:	3301      	adds	r3, #1
 802af00:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
 802af02:	f001 f9c1 	bl	802c288 <mbedtls_ssl_write_handshake_msg>
 802af06:	4605      	mov	r5, r0
 802af08:	e756      	b.n	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
           ret = mbedtls_ssl_write_certificate( ssl );
 802af0a:	4620      	mov	r0, r4
 802af0c:	f002 fbfc 	bl	802d708 <mbedtls_ssl_write_certificate>
 802af10:	4605      	mov	r5, r0
           break;
 802af12:	e751      	b.n	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
           ret = mbedtls_ssl_parse_certificate( ssl );
 802af14:	4620      	mov	r0, r4
 802af16:	f002 fc75 	bl	802d804 <mbedtls_ssl_parse_certificate>
 802af1a:	4605      	mov	r5, r0
           break;
 802af1c:	e74c      	b.n	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 802af1e:	2101      	movs	r1, #1
 802af20:	4620      	mov	r0, r4
 802af22:	f001 fb89 	bl	802c638 <mbedtls_ssl_read_record>
 802af26:	2800      	cmp	r0, #0
 802af28:	d1ed      	bne.n	802af06 <mbedtls_ssl_handshake_client_step+0x20a>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 802af2a:	6f63      	ldr	r3, [r4, #116]	; 0x74
    buf = ssl->in_msg;
 802af2c:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 802af2e:	2b16      	cmp	r3, #22
 802af30:	f040 82ba 	bne.w	802b4a8 <mbedtls_ssl_handshake_client_step+0x7ac>
    if( ssl->in_hslen < 38 + mbedtls_ssl_hs_hdr_len( ssl ) ||
 802af34:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 802af38:	2b29      	cmp	r3, #41	; 0x29
 802af3a:	f240 83fe 	bls.w	802b73a <mbedtls_ssl_handshake_client_step+0xa3e>
 802af3e:	7833      	ldrb	r3, [r6, #0]
 802af40:	2b02      	cmp	r3, #2
 802af42:	f040 83fa 	bne.w	802b73a <mbedtls_ssl_handshake_client_step+0xa3e>
                      ssl->conf->transport, buf + 0 );
 802af46:	4621      	mov	r1, r4
 802af48:	f851 3b0c 	ldr.w	r3, [r1], #12
    buf += mbedtls_ssl_hs_hdr_len( ssl );
 802af4c:	f106 0804 	add.w	r8, r6, #4
                      ssl->conf->transport, buf + 0 );
 802af50:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
 802af54:	f104 0008 	add.w	r0, r4, #8
 802af58:	4643      	mov	r3, r8
 802af5a:	f3c2 0240 	ubfx	r2, r2, #1, #1
 802af5e:	f002 f865 	bl	802d02c <mbedtls_ssl_read_version>
    if( ssl->major_ver < ssl->conf->min_major_ver ||
 802af62:	6823      	ldr	r3, [r4, #0]
 802af64:	68a1      	ldr	r1, [r4, #8]
 802af66:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 802af6a:	4291      	cmp	r1, r2
 802af6c:	f2c0 844e 	blt.w	802b80c <mbedtls_ssl_handshake_client_step+0xb10>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 802af70:	68e2      	ldr	r2, [r4, #12]
 802af72:	f893 005b 	ldrb.w	r0, [r3, #91]	; 0x5b
    if( ssl->major_ver < ssl->conf->min_major_ver ||
 802af76:	4282      	cmp	r2, r0
 802af78:	f2c0 8448 	blt.w	802b80c <mbedtls_ssl_handshake_client_step+0xb10>
        ssl->major_ver > ssl->conf->max_major_ver ||
 802af7c:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 802af80:	4281      	cmp	r1, r0
 802af82:	f300 8443 	bgt.w	802b80c <mbedtls_ssl_handshake_client_step+0xb10>
        ssl->minor_ver > ssl->conf->max_minor_ver )
 802af86:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
        ssl->major_ver > ssl->conf->max_major_ver ||
 802af8a:	429a      	cmp	r2, r3
 802af8c:	f300 843e 	bgt.w	802b80c <mbedtls_ssl_handshake_client_step+0xb10>
    memcpy( ssl->handshake->randbytes + 32, buf + 2, 32 );
 802af90:	4633      	mov	r3, r6
 802af92:	f853 cf06 	ldr.w	ip, [r3, #6]!
 802af96:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 802af98:	685f      	ldr	r7, [r3, #4]
 802af9a:	6898      	ldr	r0, [r3, #8]
 802af9c:	68d9      	ldr	r1, [r3, #12]
 802af9e:	f8c2 c0c4 	str.w	ip, [r2, #196]	; 0xc4
 802afa2:	f8c2 70c8 	str.w	r7, [r2, #200]	; 0xc8
 802afa6:	f8c2 00cc 	str.w	r0, [r2, #204]	; 0xcc
 802afaa:	f8c2 10d0 	str.w	r1, [r2, #208]	; 0xd0
 802afae:	695f      	ldr	r7, [r3, #20]
 802afb0:	f8d3 c010 	ldr.w	ip, [r3, #16]
 802afb4:	6998      	ldr	r0, [r3, #24]
 802afb6:	69d9      	ldr	r1, [r3, #28]
 802afb8:	f8c2 c0d4 	str.w	ip, [r2, #212]	; 0xd4
 802afbc:	f8c2 70d8 	str.w	r7, [r2, #216]	; 0xd8
 802afc0:	f8c2 00dc 	str.w	r0, [r2, #220]	; 0xdc
 802afc4:	f8c2 10e0 	str.w	r1, [r2, #224]	; 0xe0
    n = buf[34];
 802afc8:	f896 7026 	ldrb.w	r7, [r6, #38]	; 0x26
    if( n > 32 )
 802afcc:	2f20      	cmp	r7, #32
 802afce:	f200 83b4 	bhi.w	802b73a <mbedtls_ssl_handshake_client_step+0xa3e>
    if( ssl->in_hslen > mbedtls_ssl_hs_hdr_len( ssl ) + 39 + n )
 802afd2:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 802afd6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 802afda:	429a      	cmp	r2, r3
 802afdc:	f240 831a 	bls.w	802b614 <mbedtls_ssl_handshake_client_step+0x918>
        ext_len = ( ( buf[38 + n] <<  8 )
 802afe0:	eb08 0307 	add.w	r3, r8, r7
                  | ( buf[39 + n]       ) );
 802afe4:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
        ext_len = ( ( buf[38 + n] <<  8 )
 802afe8:	f893 0026 	ldrb.w	r0, [r3, #38]	; 0x26
                  | ( buf[39 + n]       ) );
 802afec:	ea41 2b00 	orr.w	fp, r1, r0, lsl #8
        if( ( ext_len > 0 && ext_len < 4 ) ||
 802aff0:	f10b 31ff 	add.w	r1, fp, #4294967295
 802aff4:	2902      	cmp	r1, #2
 802aff6:	f240 83a0 	bls.w	802b73a <mbedtls_ssl_handshake_client_step+0xa3e>
            ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 40 + n + ext_len )
 802affa:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 802affe:	4459      	add	r1, fp
        if( ( ext_len > 0 && ext_len < 4 ) ||
 802b000:	428a      	cmp	r2, r1
 802b002:	f040 839a 	bne.w	802b73a <mbedtls_ssl_handshake_client_step+0xa3e>
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 802b006:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 802b00a:	f893 9024 	ldrb.w	r9, [r3, #36]	; 0x24
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
 802b00e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 802b012:	ea49 2902 	orr.w	r9, r9, r2, lsl #8
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
 802b016:	2b00      	cmp	r3, #0
 802b018:	f040 840e 	bne.w	802b838 <mbedtls_ssl_handshake_client_step+0xb3c>
    ssl->handshake->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
 802b01c:	4648      	mov	r0, r9
 802b01e:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
 802b022:	f7ff fe4d 	bl	802acc0 <mbedtls_ssl_ciphersuite_from_id>
    if( ssl->handshake->ciphersuite_info == NULL )
 802b026:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    ssl->handshake->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
 802b028:	f8ca 009c 	str.w	r0, [sl, #156]	; 0x9c
    if( ssl->handshake->ciphersuite_info == NULL )
 802b02c:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 802b030:	4620      	mov	r0, r4
    if( ssl->handshake->ciphersuite_info == NULL )
 802b032:	2900      	cmp	r1, #0
 802b034:	f000 82d7 	beq.w	802b5e6 <mbedtls_ssl_handshake_client_step+0x8ea>
    mbedtls_ssl_optimize_checksum( ssl, ssl->handshake->ciphersuite_info );
 802b038:	f002 fd4a 	bl	802dad0 <mbedtls_ssl_optimize_checksum>
    if( ssl->handshake->resume == 0 || n == 0 ||
 802b03c:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
 802b040:	f8da 3114 	ldr.w	r3, [sl, #276]	; 0x114
 802b044:	2b00      	cmp	r3, #0
 802b046:	f000 82d5 	beq.w	802b5f4 <mbedtls_ssl_handshake_client_step+0x8f8>
 802b04a:	2f00      	cmp	r7, #0
 802b04c:	f000 82d2 	beq.w	802b5f4 <mbedtls_ssl_handshake_client_step+0x8f8>
        ssl->session_negotiate->ciphersuite != i ||
 802b050:	6b63      	ldr	r3, [r4, #52]	; 0x34
    if( ssl->handshake->resume == 0 || n == 0 ||
 802b052:	681a      	ldr	r2, [r3, #0]
 802b054:	4591      	cmp	r9, r2
 802b056:	f000 839d 	beq.w	802b794 <mbedtls_ssl_handshake_client_step+0xa98>
 802b05a:	f106 0127 	add.w	r1, r6, #39	; 0x27
 802b05e:	f103 060c 	add.w	r6, r3, #12
        ssl->handshake->resume = 0;
 802b062:	f04f 0c00 	mov.w	ip, #0
        ssl->state++;
 802b066:	6862      	ldr	r2, [r4, #4]
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 802b068:	4630      	mov	r0, r6
        ssl->state++;
 802b06a:	3201      	adds	r2, #1
 802b06c:	6062      	str	r2, [r4, #4]
        ssl->handshake->resume = 0;
 802b06e:	f8ca c114 	str.w	ip, [sl, #276]	; 0x114
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 802b072:	463a      	mov	r2, r7
        ssl->session_negotiate->ciphersuite = i;
 802b074:	e9c3 9c00 	strd	r9, ip, [r3]
        ssl->session_negotiate->id_len = n;
 802b078:	609f      	str	r7, [r3, #8]
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 802b07a:	f004 fecd 	bl	802fe18 <memcpy>
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0 )
 802b07e:	6823      	ldr	r3, [r4, #0]
 802b080:	68e2      	ldr	r2, [r4, #12]
 802b082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802b086:	3b04      	subs	r3, #4
 802b088:	e004      	b.n	802b094 <mbedtls_ssl_handshake_client_step+0x398>
            ssl->session_negotiate->ciphersuite )
 802b08a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 802b08c:	6812      	ldr	r2, [r2, #0]
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
 802b08e:	4290      	cmp	r0, r2
 802b090:	f000 82ca 	beq.w	802b628 <mbedtls_ssl_handshake_client_step+0x92c>
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0 )
 802b094:	f853 0f04 	ldr.w	r0, [r3, #4]!
 802b098:	2800      	cmp	r0, #0
 802b09a:	d1f6      	bne.n	802b08a <mbedtls_ssl_handshake_client_step+0x38e>
            mbedtls_ssl_send_alert_message(
 802b09c:	4620      	mov	r0, r4
 802b09e:	222f      	movs	r2, #47	; 0x2f
 802b0a0:	2102      	movs	r1, #2
 802b0a2:	f001 fc39 	bl	802c918 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 802b0a6:	4d02      	ldr	r5, [pc, #8]	; (802b0b0 <mbedtls_ssl_handshake_client_step+0x3b4>)
 802b0a8:	e686      	b.n	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
 802b0aa:	bf00      	nop
 802b0ac:	ffff8580 	.word	0xffff8580
 802b0b0:	ffff8680 	.word	0xffff8680
    if( ssl->conf->f_rng == NULL )
 802b0b4:	6821      	ldr	r1, [r4, #0]
 802b0b6:	698b      	ldr	r3, [r1, #24]
 802b0b8:	2b00      	cmp	r3, #0
 802b0ba:	f000 83b8 	beq.w	802b82e <mbedtls_ssl_handshake_client_step+0xb32>
        ssl->major_ver = ssl->conf->min_major_ver;
 802b0be:	f891 305a 	ldrb.w	r3, [r1, #90]	; 0x5a
 802b0c2:	60a3      	str	r3, [r4, #8]
        ssl->minor_ver = ssl->conf->min_minor_ver;
 802b0c4:	f891 305b 	ldrb.w	r3, [r1, #91]	; 0x5b
 802b0c8:	60e3      	str	r3, [r4, #12]
    if( ssl->conf->max_major_ver == 0 )
 802b0ca:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
 802b0ce:	2800      	cmp	r0, #0
 802b0d0:	f000 828d 	beq.w	802b5ee <mbedtls_ssl_handshake_client_step+0x8f2>
                               ssl->conf->transport, p );
 802b0d4:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    buf = ssl->out_msg;
 802b0d8:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
    mbedtls_ssl_write_version( ssl->conf->max_major_ver,
 802b0dc:	f891 1059 	ldrb.w	r1, [r1, #89]	; 0x59
 802b0e0:	1d33      	adds	r3, r6, #4
 802b0e2:	f3c2 0240 	ubfx	r2, r2, #1, #1
 802b0e6:	f001 ff9d 	bl	802d024 <mbedtls_ssl_write_version>
    if( ( ret = ssl_generate_random( ssl ) ) != 0 )
 802b0ea:	6ba7      	ldr	r7, [r4, #56]	; 0x38
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
 802b0ec:	6823      	ldr	r3, [r4, #0]
 802b0ee:	2204      	movs	r2, #4
 802b0f0:	e9d3 5006 	ldrd	r5, r0, [r3, #24]
 802b0f4:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 802b0f8:	47a8      	blx	r5
 802b0fa:	4605      	mov	r5, r0
 802b0fc:	2800      	cmp	r0, #0
 802b0fe:	f47f ae5b 	bne.w	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 28 ) ) != 0 )
 802b102:	6823      	ldr	r3, [r4, #0]
 802b104:	221c      	movs	r2, #28
 802b106:	e9d3 5006 	ldrd	r5, r0, [r3, #24]
 802b10a:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 802b10e:	47a8      	blx	r5
 802b110:	4605      	mov	r5, r0
 802b112:	2800      	cmp	r0, #0
 802b114:	f47f ae50 	bne.w	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
    memcpy( p, ssl->handshake->randbytes, 32 );
 802b118:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802b11a:	f853 5fa4 	ldr.w	r5, [r3, #164]!
 802b11e:	6858      	ldr	r0, [r3, #4]
 802b120:	6899      	ldr	r1, [r3, #8]
 802b122:	68da      	ldr	r2, [r3, #12]
 802b124:	f8c6 5006 	str.w	r5, [r6, #6]
 802b128:	f8c6 000a 	str.w	r0, [r6, #10]
 802b12c:	f8c6 100e 	str.w	r1, [r6, #14]
 802b130:	f8c6 2012 	str.w	r2, [r6, #18]
 802b134:	691d      	ldr	r5, [r3, #16]
 802b136:	6958      	ldr	r0, [r3, #20]
 802b138:	6999      	ldr	r1, [r3, #24]
 802b13a:	69da      	ldr	r2, [r3, #28]
 802b13c:	f8c6 5016 	str.w	r5, [r6, #22]
 802b140:	f8c6 001a 	str.w	r0, [r6, #26]
 802b144:	f8c6 101e 	str.w	r1, [r6, #30]
 802b148:	f8c6 2022 	str.w	r2, [r6, #34]	; 0x22
    n = ssl->session_negotiate->id_len;
 802b14c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802b14e:	689f      	ldr	r7, [r3, #8]
    if( n < 16 || n > 32 ||
 802b150:	f1a7 0310 	sub.w	r3, r7, #16
 802b154:	2b10      	cmp	r3, #16
 802b156:	f200 8253 	bhi.w	802b600 <mbedtls_ssl_handshake_client_step+0x904>
        ssl->handshake->resume == 0 )
 802b15a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if( n < 16 || n > 32 ||
 802b15c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 802b160:	2b00      	cmp	r3, #0
 802b162:	f000 824d 	beq.w	802b600 <mbedtls_ssl_handshake_client_step+0x904>
    *p++ = (unsigned char) n;
 802b166:	f06f 0526 	mvn.w	r5, #38	; 0x26
 802b16a:	f106 0827 	add.w	r8, r6, #39	; 0x27
 802b16e:	4643      	mov	r3, r8
 802b170:	f107 0027 	add.w	r0, r7, #39	; 0x27
 802b174:	f886 7026 	strb.w	r7, [r6, #38]	; 0x26
    for( i = 0; i < n; i++ )
 802b178:	1bad      	subs	r5, r5, r6
 802b17a:	4430      	add	r0, r6
        *p++ = ssl->session_negotiate->id[i];
 802b17c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 802b17e:	1959      	adds	r1, r3, r5
 802b180:	440a      	add	r2, r1
 802b182:	7b12      	ldrb	r2, [r2, #12]
 802b184:	f803 2b01 	strb.w	r2, [r3], #1
    for( i = 0; i < n; i++ )
 802b188:	4283      	cmp	r3, r0
 802b18a:	d1f7      	bne.n	802b17c <mbedtls_ssl_handshake_client_step+0x480>
 802b18c:	44b8      	add	r8, r7
    end = buf + MBEDTLS_SSL_OUT_CONTENT_LEN;
 802b18e:	f506 4580 	add.w	r5, r6, #16384	; 0x4000
 *               otherwise.
 */
static inline int mbedtls_ssl_chk_buf_ptr( const uint8_t *cur,
                                           const uint8_t *end, size_t need )
{
    return( ( cur > end ) || ( need > (size_t)( end - cur ) ) );
 802b192:	4545      	cmp	r5, r8
 802b194:	f0c0 821c 	bcc.w	802b5d0 <mbedtls_ssl_handshake_client_step+0x8d4>
 802b198:	eba5 0308 	sub.w	r3, r5, r8
 802b19c:	2b01      	cmp	r3, #1
 802b19e:	f240 8217 	bls.w	802b5d0 <mbedtls_ssl_handshake_client_step+0x8d4>
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];
 802b1a2:	6823      	ldr	r3, [r4, #0]
 802b1a4:	68e2      	ldr	r2, [r4, #12]
    p += 2;
 802b1a6:	f108 0702 	add.w	r7, r8, #2
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];
 802b1aa:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
    for( i = 0; ciphersuites[i] != 0; i++ )
 802b1ae:	f8da 0000 	ldr.w	r0, [sl]
 802b1b2:	2800      	cmp	r0, #0
 802b1b4:	f000 833e 	beq.w	802b834 <mbedtls_ssl_handshake_client_step+0xb38>
    n = 0;
 802b1b8:	f04f 0900 	mov.w	r9, #0
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );
 802b1bc:	f7ff fd80 	bl	802acc0 <mbedtls_ssl_ciphersuite_from_id>
                                      ssl->conf->min_minor_ver,
 802b1c0:	6823      	ldr	r3, [r4, #0]
        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
 802b1c2:	f893 1059 	ldrb.w	r1, [r3, #89]	; 0x59
    if( suite_info == NULL )
 802b1c6:	b1d8      	cbz	r0, 802b200 <mbedtls_ssl_handshake_client_step+0x504>
    if( suite_info->min_minor_ver > max_minor_ver ||
 802b1c8:	6902      	ldr	r2, [r0, #16]
 802b1ca:	4291      	cmp	r1, r2
 802b1cc:	db18      	blt.n	802b200 <mbedtls_ssl_handshake_client_step+0x504>
        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
 802b1ce:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
    if( suite_info->min_minor_ver > max_minor_ver ||
 802b1d2:	6983      	ldr	r3, [r0, #24]
 802b1d4:	429a      	cmp	r2, r3
 802b1d6:	dc13      	bgt.n	802b200 <mbedtls_ssl_handshake_client_step+0x504>
 802b1d8:	42bd      	cmp	r5, r7
 802b1da:	eba5 0307 	sub.w	r3, r5, r7
 802b1de:	f0c0 81f7 	bcc.w	802b5d0 <mbedtls_ssl_handshake_client_step+0x8d4>
 802b1e2:	2b01      	cmp	r3, #1
 802b1e4:	f240 81f4 	bls.w	802b5d0 <mbedtls_ssl_handshake_client_step+0x8d4>
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
 802b1e8:	463b      	mov	r3, r7
 802b1ea:	f8da 2000 	ldr.w	r2, [sl]
        n++;
 802b1ee:	f109 0901 	add.w	r9, r9, #1
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
 802b1f2:	1212      	asrs	r2, r2, #8
 802b1f4:	f803 2b02 	strb.w	r2, [r3], #2
        *p++ = (unsigned char)( ciphersuites[i]      );
 802b1f8:	f8da 2000 	ldr.w	r2, [sl]
 802b1fc:	707a      	strb	r2, [r7, #1]
 802b1fe:	461f      	mov	r7, r3
    for( i = 0; ciphersuites[i] != 0; i++ )
 802b200:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 802b204:	2800      	cmp	r0, #0
 802b206:	d1d9      	bne.n	802b1bc <mbedtls_ssl_handshake_client_step+0x4c0>
 802b208:	42bd      	cmp	r5, r7
 802b20a:	f0c0 81e1 	bcc.w	802b5d0 <mbedtls_ssl_handshake_client_step+0x8d4>
 802b20e:	1beb      	subs	r3, r5, r7
 802b210:	2b01      	cmp	r3, #1
 802b212:	f240 81dd 	bls.w	802b5d0 <mbedtls_ssl_handshake_client_step+0x8d4>
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
 802b216:	463b      	mov	r3, r7
 802b218:	2100      	movs	r1, #0
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
 802b21a:	20ff      	movs	r0, #255	; 0xff
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
 802b21c:	f803 1b02 	strb.w	r1, [r3], #2
        n++;
 802b220:	f109 0901 	add.w	r9, r9, #1
    *q++ = (unsigned char)( n >> 7 );
 802b224:	ea4f 12d9 	mov.w	r2, r9, lsr #7
 802b228:	429d      	cmp	r5, r3
    *q++ = (unsigned char)( n << 1 );
 802b22a:	ea4f 0949 	mov.w	r9, r9, lsl #1
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
 802b22e:	7078      	strb	r0, [r7, #1]
    *q++ = (unsigned char)( n >> 7 );
 802b230:	f888 2000 	strb.w	r2, [r8]
    *q++ = (unsigned char)( n << 1 );
 802b234:	f888 9001 	strb.w	r9, [r8, #1]
 802b238:	f0c0 81ca 	bcc.w	802b5d0 <mbedtls_ssl_handshake_client_step+0x8d4>
 802b23c:	1aeb      	subs	r3, r5, r3
 802b23e:	2b01      	cmp	r3, #1
 802b240:	f240 81c6 	bls.w	802b5d0 <mbedtls_ssl_handshake_client_step+0x8d4>
        *p++ = 1;
 802b244:	2301      	movs	r3, #1
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 802b246:	f107 0a04 	add.w	sl, r7, #4
 802b24a:	4555      	cmp	r5, sl
 802b24c:	70f9      	strb	r1, [r7, #3]
        *p++ = 1;
 802b24e:	70bb      	strb	r3, [r7, #2]
 802b250:	f0c0 81be 	bcc.w	802b5d0 <mbedtls_ssl_handshake_client_step+0x8d4>
 802b254:	eba5 030a 	sub.w	r3, r5, sl
 802b258:	2b01      	cmp	r3, #1
 802b25a:	f240 81b9 	bls.w	802b5d0 <mbedtls_ssl_handshake_client_step+0x8d4>
    if( ssl->hostname == NULL )
 802b25e:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    if( ( ret = ssl_write_hostname_ext( ssl, p + 2 + ext_len,
 802b262:	f107 0b06 	add.w	fp, r7, #6
    if( ssl->hostname == NULL )
 802b266:	2800      	cmp	r0, #0
 802b268:	f000 82f7 	beq.w	802b85a <mbedtls_ssl_handshake_client_step+0xb5e>
 802b26c:	455d      	cmp	r5, fp
 802b26e:	f0c0 81af 	bcc.w	802b5d0 <mbedtls_ssl_handshake_client_step+0x8d4>
    hostname_len = strlen( ssl->hostname );
 802b272:	f7e4 ffeb 	bl	801024c <strlen>
 802b276:	4602      	mov	r2, r0
 802b278:	eba5 000b 	sub.w	r0, r5, fp
    MBEDTLS_SSL_CHK_BUF_PTR( p, end, hostname_len + 9 );
 802b27c:	f102 0309 	add.w	r3, r2, #9
 802b280:	4283      	cmp	r3, r0
 802b282:	9307      	str	r3, [sp, #28]
 802b284:	f200 81a4 	bhi.w	802b5d0 <mbedtls_ssl_handshake_client_step+0x8d4>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );
 802b288:	2100      	movs	r1, #0
    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
 802b28a:	1d50      	adds	r0, r2, #5
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );
 802b28c:	fa5f fc82 	uxtb.w	ip, r2
    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
 802b290:	0a00      	lsrs	r0, r0, #8
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );
 802b292:	71b9      	strb	r1, [r7, #6]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );
 802b294:	71f9      	strb	r1, [r7, #7]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
 802b296:	7339      	strb	r1, [r7, #12]
    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
 802b298:	7238      	strb	r0, [r7, #8]
    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
 802b29a:	1cd1      	adds	r1, r2, #3
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );
 802b29c:	f10c 0005 	add.w	r0, ip, #5
    *p++ = (unsigned char)( ( hostname_len      ) & 0xFF );
 802b2a0:	f887 c00e 	strb.w	ip, [r7, #14]
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );
 802b2a4:	7278      	strb	r0, [r7, #9]
    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
 802b2a6:	0a09      	lsrs	r1, r1, #8
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
 802b2a8:	0a10      	lsrs	r0, r2, #8
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );
 802b2aa:	f10c 0c03 	add.w	ip, ip, #3
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
 802b2ae:	7378      	strb	r0, [r7, #13]
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );
 802b2b0:	f887 c00b 	strb.w	ip, [r7, #11]
    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
 802b2b4:	72b9      	strb	r1, [r7, #10]
    memcpy( p, ssl->hostname, hostname_len );
 802b2b6:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 802b2ba:	f107 000f 	add.w	r0, r7, #15
 802b2be:	f004 fdab 	bl	802fe18 <memcpy>
    return( 0 );
 802b2c2:	9b07      	ldr	r3, [sp, #28]
    if( ( ret = ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len,
 802b2c4:	6822      	ldr	r2, [r4, #0]
    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
 802b2c6:	f892 1059 	ldrb.w	r1, [r2, #89]	; 0x59
 802b2ca:	2903      	cmp	r1, #3
 802b2cc:	f040 82c2 	bne.w	802b854 <mbedtls_ssl_handshake_client_step+0xb58>
    if( ssl->conf->sig_hashes == NULL )
 802b2d0:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 802b2d2:	2900      	cmp	r1, #0
 802b2d4:	f000 82bb 	beq.w	802b84e <mbedtls_ssl_handshake_client_step+0xb52>
    size_t sig_alg_len = 0;
 802b2d8:	2200      	movs	r2, #0
 802b2da:	e004      	b.n	802b2e6 <mbedtls_ssl_handshake_client_step+0x5ea>
        sig_alg_len += 2;
 802b2dc:	3202      	adds	r2, #2
        if( sig_alg_len > MBEDTLS_SSL_MAX_SIG_HASH_ALG_LIST_LEN )
 802b2de:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 802b2e2:	f000 82b4 	beq.w	802b84e <mbedtls_ssl_handshake_client_step+0xb52>
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 802b2e6:	f851 0012 	ldr.w	r0, [r1, r2, lsl #1]
 802b2ea:	2800      	cmp	r0, #0
 802b2ec:	d1f6      	bne.n	802b2dc <mbedtls_ssl_handshake_client_step+0x5e0>
    if( sig_alg_len == 0 )
 802b2ee:	2a00      	cmp	r2, #0
 802b2f0:	f000 82ad 	beq.w	802b84e <mbedtls_ssl_handshake_client_step+0xb52>
    if( ( ret = ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len,
 802b2f4:	f103 0902 	add.w	r9, r3, #2
 802b2f8:	44d1      	add	r9, sl
 802b2fa:	454d      	cmp	r5, r9
 802b2fc:	f0c0 8168 	bcc.w	802b5d0 <mbedtls_ssl_handshake_client_step+0x8d4>
    MBEDTLS_SSL_CHK_BUF_PTR( p, end, sig_alg_len + 6 );
 802b300:	3206      	adds	r2, #6
 802b302:	eba5 0c09 	sub.w	ip, r5, r9
 802b306:	4562      	cmp	r2, ip
 802b308:	f200 8162 	bhi.w	802b5d0 <mbedtls_ssl_handshake_client_step+0x8d4>
    unsigned char *sig_alg_list = buf + 6;
 802b30c:	f109 0206 	add.w	r2, r9, #6
 802b310:	9707      	str	r7, [sp, #28]
 802b312:	9408      	str	r4, [sp, #32]
 802b314:	462f      	mov	r7, r5
    sig_alg_len = 0;
 802b316:	4680      	mov	r8, r0
 802b318:	460d      	mov	r5, r1
 802b31a:	4614      	mov	r4, r2
 802b31c:	e00b      	b.n	802b336 <mbedtls_ssl_handshake_client_step+0x63a>
 802b31e:	9309      	str	r3, [sp, #36]	; 0x24
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 802b320:	f002 ff4c 	bl	802e1bc <mbedtls_ssl_hash_from_md_alg>
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 802b324:	f04f 0301 	mov.w	r3, #1
 802b328:	f804 3c01 	strb.w	r3, [r4, #-1]
 802b32c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b32e:	f108 0802 	add.w	r8, r8, #2
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 802b332:	f804 0c02 	strb.w	r0, [r4, #-2]
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 802b336:	f855 0018 	ldr.w	r0, [r5, r8, lsl #1]
 802b33a:	3402      	adds	r4, #2
 802b33c:	2800      	cmp	r0, #0
 802b33e:	d1ee      	bne.n	802b31e <mbedtls_ssl_handshake_client_step+0x622>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );
 802b340:	210d      	movs	r1, #13
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
 802b342:	f108 0202 	add.w	r2, r8, #2
 802b346:	0a12      	lsrs	r2, r2, #8
 802b348:	f889 2002 	strb.w	r2, [r9, #2]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
 802b34c:	fa5f f288 	uxtb.w	r2, r8
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );
 802b350:	f889 2005 	strb.w	r2, [r9, #5]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
 802b354:	3202      	adds	r2, #2
 802b356:	f889 2003 	strb.w	r2, [r9, #3]
    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 802b35a:	ea4f 2218 	mov.w	r2, r8, lsr #8
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
 802b35e:	f889 0000 	strb.w	r0, [r9]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );
 802b362:	f889 1001 	strb.w	r1, [r9, #1]
    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 802b366:	f889 2004 	strb.w	r2, [r9, #4]
 802b36a:	463d      	mov	r5, r7
 802b36c:	e9dd 7407 	ldrd	r7, r4, [sp, #28]
    *olen = 6 + sig_alg_len;
 802b370:	6822      	ldr	r2, [r4, #0]
 802b372:	f108 0806 	add.w	r8, r8, #6
    ext_len += olen;
 802b376:	eb08 0103 	add.w	r1, r8, r3
    if( ssl->conf->alpn_list == NULL )
 802b37a:	6d13      	ldr	r3, [r2, #80]	; 0x50
    if( ( ret = ssl_write_alpn_ext( ssl, p + 2 + ext_len,
 802b37c:	f101 0902 	add.w	r9, r1, #2
    ext_len += olen;
 802b380:	9107      	str	r1, [sp, #28]
    if( ( ret = ssl_write_alpn_ext( ssl, p + 2 + ext_len,
 802b382:	44d1      	add	r9, sl
    if( ssl->conf->alpn_list == NULL )
 802b384:	2b00      	cmp	r3, #0
 802b386:	d048      	beq.n	802b41a <mbedtls_ssl_handshake_client_step+0x71e>
 802b388:	3b04      	subs	r3, #4
 802b38a:	9408      	str	r4, [sp, #32]
    size_t alpnlen = 0;
 802b38c:	f04f 0800 	mov.w	r8, #0
 802b390:	461c      	mov	r4, r3
 802b392:	e003      	b.n	802b39c <mbedtls_ssl_handshake_client_step+0x6a0>
        alpnlen += strlen( *cur ) + 1;
 802b394:	f7e4 ff5a 	bl	801024c <strlen>
 802b398:	3001      	adds	r0, #1
 802b39a:	4480      	add	r8, r0
    for( cur = ssl->conf->alpn_list; *cur != NULL; cur++ )
 802b39c:	f854 0f04 	ldr.w	r0, [r4, #4]!
 802b3a0:	2800      	cmp	r0, #0
 802b3a2:	d1f7      	bne.n	802b394 <mbedtls_ssl_handshake_client_step+0x698>
 802b3a4:	454d      	cmp	r5, r9
 802b3a6:	9c08      	ldr	r4, [sp, #32]
 802b3a8:	f0c0 8112 	bcc.w	802b5d0 <mbedtls_ssl_handshake_client_step+0x8d4>
    MBEDTLS_SSL_CHK_BUF_PTR( p, end, 6 + alpnlen );
 802b3ac:	f108 0206 	add.w	r2, r8, #6
 802b3b0:	eba5 0509 	sub.w	r5, r5, r9
 802b3b4:	42aa      	cmp	r2, r5
 802b3b6:	f200 810b 	bhi.w	802b5d0 <mbedtls_ssl_handshake_client_step+0x8d4>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ALPN      ) & 0xFF );
 802b3ba:	2310      	movs	r3, #16
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ALPN >> 8 ) & 0xFF );
 802b3bc:	f889 0000 	strb.w	r0, [r9]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ALPN      ) & 0xFF );
 802b3c0:	f889 3001 	strb.w	r3, [r9, #1]
    for( cur = ssl->conf->alpn_list; *cur != NULL; cur++ )
 802b3c4:	6823      	ldr	r3, [r4, #0]
    p += 4;
 802b3c6:	f109 0506 	add.w	r5, r9, #6
    for( cur = ssl->conf->alpn_list; *cur != NULL; cur++ )
 802b3ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802b3cc:	f1a3 0804 	sub.w	r8, r3, #4
 802b3d0:	e00d      	b.n	802b3ee <mbedtls_ssl_handshake_client_step+0x6f2>
        *p = (unsigned char)strlen( *cur );
 802b3d2:	f7e4 ff3b 	bl	801024c <strlen>
 802b3d6:	4604      	mov	r4, r0
 802b3d8:	4628      	mov	r0, r5
 802b3da:	f800 4b01 	strb.w	r4, [r0], #1
        memcpy( p + 1, *cur, *p );
 802b3de:	b2e4      	uxtb	r4, r4
 802b3e0:	4622      	mov	r2, r4
 802b3e2:	f8d8 1000 	ldr.w	r1, [r8]
 802b3e6:	f004 fd17 	bl	802fe18 <memcpy>
        p += 1 + *p;
 802b3ea:	3401      	adds	r4, #1
 802b3ec:	4425      	add	r5, r4
    for( cur = ssl->conf->alpn_list; *cur != NULL; cur++ )
 802b3ee:	f858 0f04 	ldr.w	r0, [r8, #4]!
 802b3f2:	2800      	cmp	r0, #0
 802b3f4:	d1ed      	bne.n	802b3d2 <mbedtls_ssl_handshake_client_step+0x6d6>
    *olen = p - buf;
 802b3f6:	eba5 0309 	sub.w	r3, r5, r9
    buf[4] = (unsigned char)( ( ( *olen - 6 ) >> 8 ) & 0xFF );
 802b3fa:	1f98      	subs	r0, r3, #6
    buf[5] = (unsigned char)( ( ( *olen - 6 )      ) & 0xFF );
 802b3fc:	b2da      	uxtb	r2, r3
    buf[4] = (unsigned char)( ( ( *olen - 6 ) >> 8 ) & 0xFF );
 802b3fe:	0a00      	lsrs	r0, r0, #8
    buf[2] = (unsigned char)( ( ( *olen - 4 ) >> 8 ) & 0xFF );
 802b400:	1f19      	subs	r1, r3, #4
 802b402:	0a09      	lsrs	r1, r1, #8
    buf[4] = (unsigned char)( ( ( *olen - 6 ) >> 8 ) & 0xFF );
 802b404:	f889 0004 	strb.w	r0, [r9, #4]
 802b408:	9c08      	ldr	r4, [sp, #32]
    buf[5] = (unsigned char)( ( ( *olen - 6 )      ) & 0xFF );
 802b40a:	1f90      	subs	r0, r2, #6
    buf[3] = (unsigned char)( ( ( *olen - 4 )      ) & 0xFF );
 802b40c:	3a04      	subs	r2, #4
    buf[5] = (unsigned char)( ( ( *olen - 6 )      ) & 0xFF );
 802b40e:	f889 0005 	strb.w	r0, [r9, #5]
    buf[3] = (unsigned char)( ( ( *olen - 4 )      ) & 0xFF );
 802b412:	f889 2003 	strb.w	r2, [r9, #3]
    buf[2] = (unsigned char)( ( ( *olen - 4 ) >> 8 ) & 0xFF );
 802b416:	f889 1002 	strb.w	r1, [r9, #2]
    if( ext_len > 0 )
 802b41a:	9a07      	ldr	r2, [sp, #28]
 802b41c:	18d3      	adds	r3, r2, r3
 802b41e:	d004      	beq.n	802b42a <mbedtls_ssl_handshake_client_step+0x72e>
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
 802b420:	0a1a      	lsrs	r2, r3, #8
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
 802b422:	717b      	strb	r3, [r7, #5]
        p += ext_len;
 802b424:	eb0b 0a03 	add.w	sl, fp, r3
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
 802b428:	713a      	strb	r2, [r7, #4]
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 802b42a:	2201      	movs	r2, #1
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 802b42c:	2116      	movs	r1, #22
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 802b42e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    ssl->out_msglen  = p - buf;
 802b432:	ebaa 0606 	sub.w	r6, sl, r6
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 802b436:	e9c4 1629 	strd	r1, r6, [r4, #164]	; 0xa4
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 802b43a:	701a      	strb	r2, [r3, #0]
    ssl->state++;
 802b43c:	6863      	ldr	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
 802b43e:	4620      	mov	r0, r4
    ssl->state++;
 802b440:	4413      	add	r3, r2
 802b442:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
 802b444:	f000 ff20 	bl	802c288 <mbedtls_ssl_write_handshake_msg>
 802b448:	4605      	mov	r5, r0
 802b44a:	e4b5      	b.n	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
            ssl->state = MBEDTLS_SSL_CLIENT_HELLO;
 802b44c:	2201      	movs	r2, #1
    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 802b44e:	461d      	mov	r5, r3
            ssl->state = MBEDTLS_SSL_CLIENT_HELLO;
 802b450:	6062      	str	r2, [r4, #4]
            break;
 802b452:	e4b1      	b.n	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 802b454:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if( ! mbedtls_ssl_ciphersuite_cert_req_allowed( ciphersuite_info ) )
 802b456:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 802b45a:	7a9b      	ldrb	r3, [r3, #10]
 802b45c:	2b04      	cmp	r3, #4
 802b45e:	f63f ac74 	bhi.w	802ad4a <mbedtls_ssl_handshake_client_step+0x4e>
 802b462:	2b00      	cmp	r3, #0
 802b464:	f47f ac75 	bne.w	802ad52 <mbedtls_ssl_handshake_client_step+0x56>
        ssl->state++;
 802b468:	2306      	movs	r3, #6
 802b46a:	6063      	str	r3, [r4, #4]
        return( 0 );
 802b46c:	e4a4      	b.n	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 802b46e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802b470:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 802b474:	7ab3      	ldrb	r3, [r6, #10]
 802b476:	2b01      	cmp	r3, #1
 802b478:	f000 80c8 	beq.w	802b60c <mbedtls_ssl_handshake_client_step+0x910>
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 802b47c:	2101      	movs	r1, #1
 802b47e:	4620      	mov	r0, r4
 802b480:	f001 f8da 	bl	802c638 <mbedtls_ssl_read_record>
 802b484:	4605      	mov	r5, r0
 802b486:	2800      	cmp	r0, #0
 802b488:	f47f ac96 	bne.w	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 802b48c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 802b48e:	2b16      	cmp	r3, #22
 802b490:	d10a      	bne.n	802b4a8 <mbedtls_ssl_handshake_client_step+0x7ac>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE )
 802b492:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 802b494:	781b      	ldrb	r3, [r3, #0]
 802b496:	2b0c      	cmp	r3, #12
 802b498:	f000 81a4 	beq.w	802b7e4 <mbedtls_ssl_handshake_client_step+0xae8>
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 802b49c:	7ab3      	ldrb	r3, [r6, #10]
 802b49e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 802b4a2:	2b05      	cmp	r3, #5
 802b4a4:	f000 8097 	beq.w	802b5d6 <mbedtls_ssl_handshake_client_step+0x8da>
        mbedtls_ssl_send_alert_message(
 802b4a8:	4620      	mov	r0, r4
 802b4aa:	220a      	movs	r2, #10
 802b4ac:	2102      	movs	r1, #2
 802b4ae:	f001 fa33 	bl	802c918 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 802b4b2:	4db3      	ldr	r5, [pc, #716]	; (802b780 <mbedtls_ssl_handshake_client_step+0xa84>)
 802b4b4:	e480      	b.n	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 802b4b6:	2101      	movs	r1, #1
 802b4b8:	4620      	mov	r0, r4
 802b4ba:	f001 f8bd 	bl	802c638 <mbedtls_ssl_read_record>
 802b4be:	4605      	mov	r5, r0
 802b4c0:	2800      	cmp	r0, #0
 802b4c2:	f47f ac79 	bne.w	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 802b4c6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 802b4c8:	2b16      	cmp	r3, #22
 802b4ca:	f040 81aa 	bne.w	802b822 <mbedtls_ssl_handshake_client_step+0xb26>
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 802b4ce:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 802b4d2:	2b04      	cmp	r3, #4
 802b4d4:	d104      	bne.n	802b4e0 <mbedtls_ssl_handshake_client_step+0x7e4>
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
 802b4d6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 802b4d8:	781b      	ldrb	r3, [r3, #0]
 802b4da:	2b0e      	cmp	r3, #14
 802b4dc:	f43f ac9d 	beq.w	802ae1a <mbedtls_ssl_handshake_client_step+0x11e>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 802b4e0:	4620      	mov	r0, r4
 802b4e2:	2232      	movs	r2, #50	; 0x32
 802b4e4:	2102      	movs	r1, #2
 802b4e6:	f001 fa17 	bl	802c918 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE );
 802b4ea:	4da6      	ldr	r5, [pc, #664]	; (802b784 <mbedtls_ssl_handshake_client_step+0xa88>)
 802b4ec:	e464      	b.n	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
 802b4ee:	3b09      	subs	r3, #9
 802b4f0:	2b01      	cmp	r3, #1
 802b4f2:	f63f ac92 	bhi.w	802ae1a <mbedtls_ssl_handshake_client_step+0x11e>
    if( ssl->client_auth == 0 || mbedtls_ssl_own_cert( ssl ) == NULL )
 802b4f6:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 802b4fa:	2b00      	cmp	r3, #0
 802b4fc:	f43f ac8d 	beq.w	802ae1a <mbedtls_ssl_handshake_client_step+0x11e>
 802b500:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802b502:	6821      	ldr	r1, [r4, #0]

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 802b504:	2b00      	cmp	r3, #0
 802b506:	f000 8106 	beq.w	802b716 <mbedtls_ssl_handshake_client_step+0xa1a>
 802b50a:	685a      	ldr	r2, [r3, #4]
 802b50c:	2a00      	cmp	r2, #0
 802b50e:	f000 8102 	beq.w	802b716 <mbedtls_ssl_handshake_client_step+0xa1a>
 802b512:	6811      	ldr	r1, [r2, #0]
 802b514:	2900      	cmp	r1, #0
 802b516:	f43f ac80 	beq.w	802ae1a <mbedtls_ssl_handshake_client_step+0x11e>
    if( mbedtls_ssl_own_key( ssl ) == NULL )
 802b51a:	6852      	ldr	r2, [r2, #4]
 802b51c:	2a00      	cmp	r2, #0
 802b51e:	f000 8193 	beq.w	802b848 <mbedtls_ssl_handshake_client_step+0xb4c>
    ssl->handshake->calc_verify( ssl, hash, &hashlen );
 802b522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802b526:	4620      	mov	r0, r4
 802b528:	a90c      	add	r1, sp, #48	; 0x30
 802b52a:	aa0b      	add	r2, sp, #44	; 0x2c
 802b52c:	4798      	blx	r3
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 802b52e:	68e3      	ldr	r3, [r4, #12]
 802b530:	2b03      	cmp	r3, #3
 802b532:	f040 8157 	bne.w	802b7e4 <mbedtls_ssl_handshake_client_step+0xae8>
        if( ssl->handshake->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
 802b536:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802b538:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 802b53c:	7a5f      	ldrb	r7, [r3, #9]
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 802b53e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        if( ssl->handshake->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
 802b542:	2f07      	cmp	r7, #7
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 802b544:	bf0c      	ite	eq
 802b546:	2205      	moveq	r2, #5
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 802b548:	2204      	movne	r2, #4
 802b54a:	711a      	strb	r2, [r3, #4]
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 802b54c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            md_alg = MBEDTLS_MD_SHA256;
 802b54e:	bf18      	it	ne
 802b550:	2706      	movne	r7, #6
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 802b552:	2b00      	cmp	r3, #0
 802b554:	f000 810d 	beq.w	802b772 <mbedtls_ssl_handshake_client_step+0xa76>
 802b558:	6858      	ldr	r0, [r3, #4]
 802b55a:	2800      	cmp	r0, #0
 802b55c:	f000 8109 	beq.w	802b772 <mbedtls_ssl_handshake_client_step+0xa76>
    return( key_cert == NULL ? NULL : key_cert->key );
 802b560:	6840      	ldr	r0, [r0, #4]
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 802b562:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 802b566:	f002 fe21 	bl	802e1ac <mbedtls_ssl_sig_from_pk>
        hashlen = 0;
 802b56a:	2100      	movs	r1, #0
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 802b56c:	7168      	strb	r0, [r5, #5]
    if( ( ret = mbedtls_pk_sign_restartable( mbedtls_ssl_own_key( ssl ),
 802b56e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802b570:	6822      	ldr	r2, [r4, #0]
        hashlen = 0;
 802b572:	910b      	str	r1, [sp, #44]	; 0x2c
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 802b574:	2b00      	cmp	r3, #0
 802b576:	f000 80f7 	beq.w	802b768 <mbedtls_ssl_handshake_client_step+0xa6c>
 802b57a:	6858      	ldr	r0, [r3, #4]
 802b57c:	2800      	cmp	r0, #0
 802b57e:	f000 80f3 	beq.w	802b768 <mbedtls_ssl_handshake_client_step+0xa6c>
    return( key_cert == NULL ? NULL : key_cert->key );
 802b582:	6840      	ldr	r0, [r0, #4]
    if( ( ret = mbedtls_pk_sign_restartable( mbedtls_ssl_own_key( ssl ),
 802b584:	2300      	movs	r3, #0
 802b586:	9304      	str	r3, [sp, #16]
 802b588:	69d1      	ldr	r1, [r2, #28]
 802b58a:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 802b58e:	9103      	str	r1, [sp, #12]
 802b590:	6992      	ldr	r2, [r2, #24]
 802b592:	3508      	adds	r5, #8
 802b594:	ae0a      	add	r6, sp, #40	; 0x28
 802b596:	e9cd 5600 	strd	r5, r6, [sp]
 802b59a:	9202      	str	r2, [sp, #8]
 802b59c:	4639      	mov	r1, r7
 802b59e:	aa0c      	add	r2, sp, #48	; 0x30
 802b5a0:	f7fb fe94 	bl	80272cc <mbedtls_pk_sign_restartable>
 802b5a4:	4605      	mov	r5, r0
 802b5a6:	2800      	cmp	r0, #0
 802b5a8:	f47f ac06 	bne.w	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 802b5ac:	2116      	movs	r1, #22
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_VERIFY;
 802b5ae:	220f      	movs	r2, #15
    ssl->out_msg[4 + offset] = (unsigned char)( n >> 8 );
 802b5b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b5b2:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 802b5b6:	0a1d      	lsrs	r5, r3, #8
 802b5b8:	7185      	strb	r5, [r0, #6]
    ssl->out_msg[5 + offset] = (unsigned char)( n      );
 802b5ba:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
    ssl->out_msglen  = 6 + n + offset;
 802b5be:	f103 0008 	add.w	r0, r3, #8
    ssl->out_msg[5 + offset] = (unsigned char)( n      );
 802b5c2:	71eb      	strb	r3, [r5, #7]
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_VERIFY;
 802b5c4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 802b5c8:	e9c4 1029 	strd	r1, r0, [r4, #164]	; 0xa4
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_VERIFY;
 802b5cc:	701a      	strb	r2, [r3, #0]
 802b5ce:	e494      	b.n	802aefa <mbedtls_ssl_handshake_client_step+0x1fe>
    MBEDTLS_SSL_CHK_BUF_PTR( p, end, 2 );
 802b5d0:	4d6d      	ldr	r5, [pc, #436]	; (802b788 <mbedtls_ssl_handshake_client_step+0xa8c>)
 802b5d2:	f7ff bbf1 	b.w	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
            ssl->keep_current_message = 1;
 802b5d6:	2201      	movs	r2, #1
    ssl->state++;
 802b5d8:	6863      	ldr	r3, [r4, #4]
            ssl->keep_current_message = 1;
 802b5da:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
    ssl->state++;
 802b5de:	4413      	add	r3, r2
 802b5e0:	6063      	str	r3, [r4, #4]
    return( 0 );
 802b5e2:	f7ff bbe9 	b.w	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 802b5e6:	2250      	movs	r2, #80	; 0x50
 802b5e8:	2102      	movs	r1, #2
 802b5ea:	f001 f995 	bl	802c918 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 802b5ee:	4d67      	ldr	r5, [pc, #412]	; (802b78c <mbedtls_ssl_handshake_client_step+0xa90>)
 802b5f0:	f7ff bbe2 	b.w	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
 802b5f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802b5f6:	f106 0127 	add.w	r1, r6, #39	; 0x27
 802b5fa:	f103 060c 	add.w	r6, r3, #12
 802b5fe:	e530      	b.n	802b062 <mbedtls_ssl_handshake_client_step+0x366>
    *p++ = (unsigned char) n;
 802b600:	2300      	movs	r3, #0
 802b602:	f106 0827 	add.w	r8, r6, #39	; 0x27
 802b606:	f886 3026 	strb.w	r3, [r6, #38]	; 0x26
    for( i = 0; i < n; i++ )
 802b60a:	e5c0      	b.n	802b18e <mbedtls_ssl_handshake_client_step+0x492>
        ssl->state++;
 802b60c:	2305      	movs	r3, #5
 802b60e:	6063      	str	r3, [r4, #4]
        return( 0 );
 802b610:	f7ff bbd2 	b.w	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
    else if( ssl->in_hslen == mbedtls_ssl_hs_hdr_len( ssl ) + 38 + n )
 802b614:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 802b618:	429a      	cmp	r2, r3
 802b61a:	f040 808e 	bne.w	802b73a <mbedtls_ssl_handshake_client_step+0xa3e>
        ext_len = 0;
 802b61e:	f04f 0b00 	mov.w	fp, #0
 802b622:	eb08 0307 	add.w	r3, r8, r7
 802b626:	e4ee      	b.n	802b006 <mbedtls_ssl_handshake_client_step+0x30a>
    suite_info = mbedtls_ssl_ciphersuite_from_id(
 802b628:	f7ff fb4a 	bl	802acc0 <mbedtls_ssl_ciphersuite_from_id>
    if( suite_info == NULL )
 802b62c:	2800      	cmp	r0, #0
 802b62e:	f43f ad35 	beq.w	802b09c <mbedtls_ssl_handshake_client_step+0x3a0>
    if( ssl_validate_ciphersuite( suite_info, ssl, ssl->minor_ver,
 802b632:	68e3      	ldr	r3, [r4, #12]
    if( suite_info->min_minor_ver > max_minor_ver ||
 802b634:	6902      	ldr	r2, [r0, #16]
 802b636:	4293      	cmp	r3, r2
 802b638:	f6ff ad30 	blt.w	802b09c <mbedtls_ssl_handshake_client_step+0x3a0>
 802b63c:	6982      	ldr	r2, [r0, #24]
 802b63e:	4293      	cmp	r3, r2
 802b640:	f73f ad2c 	bgt.w	802b09c <mbedtls_ssl_handshake_client_step+0x3a0>
    ssl->session_negotiate->compression = comp;
 802b644:	2200      	movs	r2, #0
 802b646:	6b63      	ldr	r3, [r4, #52]	; 0x34
    ext = buf + 40 + n;
 802b648:	3728      	adds	r7, #40	; 0x28
 802b64a:	e9cd b507 	strd	fp, r5, [sp, #28]
 802b64e:	44b8      	add	r8, r7
 802b650:	46a3      	mov	fp, r4
    ssl->session_negotiate->compression = comp;
 802b652:	605a      	str	r2, [r3, #4]
    while( ext_len )
 802b654:	e014      	b.n	802b680 <mbedtls_ssl_handshake_client_step+0x984>
        switch( ext_id )
 802b656:	f64f 7201 	movw	r2, #65281	; 0xff01
 802b65a:	4293      	cmp	r3, r2
 802b65c:	d107      	bne.n	802b66e <mbedtls_ssl_handshake_client_step+0x972>
        if( len != 1 || buf[0] != 0x00 )
 802b65e:	2d01      	cmp	r5, #1
 802b660:	d14a      	bne.n	802b6f8 <mbedtls_ssl_handshake_client_step+0x9fc>
 802b662:	f898 3004 	ldrb.w	r3, [r8, #4]
 802b666:	2b00      	cmp	r3, #0
 802b668:	d146      	bne.n	802b6f8 <mbedtls_ssl_handshake_client_step+0x9fc>
        ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;
 802b66a:	f8cb 50c4 	str.w	r5, [fp, #196]	; 0xc4
        ext_len -= 4 + ext_size;
 802b66e:	9b07      	ldr	r3, [sp, #28]
        ext += 4 + ext_size;
 802b670:	44c8      	add	r8, r9
        ext_len -= 4 + ext_size;
 802b672:	1b5c      	subs	r4, r3, r5
        if( ext_len > 0 && ext_len < 4 )
 802b674:	1f63      	subs	r3, r4, #5
        ext_len -= 4 + ext_size;
 802b676:	1f22      	subs	r2, r4, #4
        if( ext_len > 0 && ext_len < 4 )
 802b678:	2b02      	cmp	r3, #2
        ext_len -= 4 + ext_size;
 802b67a:	9207      	str	r2, [sp, #28]
        if( ext_len > 0 && ext_len < 4 )
 802b67c:	f240 80ce 	bls.w	802b81c <mbedtls_ssl_handshake_client_step+0xb20>
    while( ext_len )
 802b680:	9b07      	ldr	r3, [sp, #28]
 802b682:	2b00      	cmp	r3, #0
 802b684:	f000 80b1 	beq.w	802b7ea <mbedtls_ssl_handshake_client_step+0xaee>
 802b688:	461a      	mov	r2, r3
        unsigned int ext_id   = ( ( ext[0] <<  8 )
 802b68a:	f8b8 5002 	ldrh.w	r5, [r8, #2]
 802b68e:	f8b8 3000 	ldrh.w	r3, [r8]
 802b692:	ba6d      	rev16	r5, r5
 802b694:	b2ad      	uxth	r5, r5
        if( ext_size + 4 > ext_len )
 802b696:	f105 0904 	add.w	r9, r5, #4
 802b69a:	ba5b      	rev16	r3, r3
 802b69c:	4591      	cmp	r9, r2
 802b69e:	b29b      	uxth	r3, r3
 802b6a0:	d84a      	bhi.n	802b738 <mbedtls_ssl_handshake_client_step+0xa3c>
        switch( ext_id )
 802b6a2:	2b10      	cmp	r3, #16
 802b6a4:	d1d7      	bne.n	802b656 <mbedtls_ssl_handshake_client_step+0x95a>
    if( ssl->conf->alpn_list == NULL )
 802b6a6:	f8db 3000 	ldr.w	r3, [fp]
 802b6aa:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 802b6ac:	b326      	cbz	r6, 802b6f8 <mbedtls_ssl_handshake_client_step+0x9fc>
    if( len < 4 )
 802b6ae:	2d03      	cmp	r5, #3
 802b6b0:	d942      	bls.n	802b738 <mbedtls_ssl_handshake_client_step+0xa3c>
    list_len = ( buf[0] << 8 ) | buf[1];
 802b6b2:	f8b8 3004 	ldrh.w	r3, [r8, #4]
    if( list_len != len - 2 )
 802b6b6:	1eaa      	subs	r2, r5, #2
    list_len = ( buf[0] << 8 ) | buf[1];
 802b6b8:	ba5b      	rev16	r3, r3
 802b6ba:	b29b      	uxth	r3, r3
    if( list_len != len - 2 )
 802b6bc:	4293      	cmp	r3, r2
 802b6be:	d13b      	bne.n	802b738 <mbedtls_ssl_handshake_client_step+0xa3c>
    name_len = buf[2];
 802b6c0:	f898 7006 	ldrb.w	r7, [r8, #6]
    if( name_len != list_len - 1 )
 802b6c4:	1eeb      	subs	r3, r5, #3
 802b6c6:	429f      	cmp	r7, r3
 802b6c8:	d136      	bne.n	802b738 <mbedtls_ssl_handshake_client_step+0xa3c>
    for( p = ssl->conf->alpn_list; *p != NULL; p++ )
 802b6ca:	6834      	ldr	r4, [r6, #0]
 802b6cc:	b1a4      	cbz	r4, 802b6f8 <mbedtls_ssl_handshake_client_step+0x9fc>
            memcmp( buf + 3, *p, name_len ) == 0 )
 802b6ce:	f108 0a07 	add.w	sl, r8, #7
 802b6d2:	e002      	b.n	802b6da <mbedtls_ssl_handshake_client_step+0x9de>
    for( p = ssl->conf->alpn_list; *p != NULL; p++ )
 802b6d4:	f856 4f04 	ldr.w	r4, [r6, #4]!
 802b6d8:	b174      	cbz	r4, 802b6f8 <mbedtls_ssl_handshake_client_step+0x9fc>
        if( name_len == strlen( *p ) &&
 802b6da:	4620      	mov	r0, r4
 802b6dc:	f7e4 fdb6 	bl	801024c <strlen>
 802b6e0:	4287      	cmp	r7, r0
 802b6e2:	d1f7      	bne.n	802b6d4 <mbedtls_ssl_handshake_client_step+0x9d8>
            memcmp( buf + 3, *p, name_len ) == 0 )
 802b6e4:	463a      	mov	r2, r7
 802b6e6:	4621      	mov	r1, r4
 802b6e8:	4650      	mov	r0, sl
 802b6ea:	f004 fb87 	bl	802fdfc <memcmp>
        if( name_len == strlen( *p ) &&
 802b6ee:	2800      	cmp	r0, #0
 802b6f0:	d1f0      	bne.n	802b6d4 <mbedtls_ssl_handshake_client_step+0x9d8>
            ssl->alpn_chosen = *p;
 802b6f2:	f8cb 40c0 	str.w	r4, [fp, #192]	; 0xc0
            return( 0 );
 802b6f6:	e7ba      	b.n	802b66e <mbedtls_ssl_handshake_client_step+0x972>
 802b6f8:	465c      	mov	r4, fp
            mbedtls_ssl_send_alert_message(
 802b6fa:	4620      	mov	r0, r4
 802b6fc:	2228      	movs	r2, #40	; 0x28
 802b6fe:	2102      	movs	r1, #2
 802b700:	f001 f90a 	bl	802c918 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 802b704:	4d22      	ldr	r5, [pc, #136]	; (802b790 <mbedtls_ssl_handshake_client_step+0xa94>)
                return( ret );
 802b706:	f7ff bb57 	b.w	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
        ssl->keep_current_message = 1;
 802b70a:	2301      	movs	r3, #1
    return( 0 );
 802b70c:	4605      	mov	r5, r0
        ssl->keep_current_message = 1;
 802b70e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        goto exit;
 802b712:	f7ff bb51 	b.w	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 802b716:	6c09      	ldr	r1, [r1, #64]	; 0x40
 802b718:	460a      	mov	r2, r1

    return( key_cert == NULL ? NULL : key_cert->cert );
 802b71a:	2900      	cmp	r1, #0
 802b71c:	f43f ab7d 	beq.w	802ae1a <mbedtls_ssl_handshake_client_step+0x11e>
    if( ssl->client_auth == 0 || mbedtls_ssl_own_cert( ssl ) == NULL )
 802b720:	6808      	ldr	r0, [r1, #0]
 802b722:	2800      	cmp	r0, #0
 802b724:	f43f ab79 	beq.w	802ae1a <mbedtls_ssl_handshake_client_step+0x11e>
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 802b728:	2b00      	cmp	r3, #0
 802b72a:	f43f aef6 	beq.w	802b51a <mbedtls_ssl_handshake_client_step+0x81e>
 802b72e:	685a      	ldr	r2, [r3, #4]
 802b730:	2a00      	cmp	r2, #0
 802b732:	bf08      	it	eq
 802b734:	460a      	moveq	r2, r1
 802b736:	e6f0      	b.n	802b51a <mbedtls_ssl_handshake_client_step+0x81e>
 802b738:	465c      	mov	r4, fp
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 802b73a:	4620      	mov	r0, r4
 802b73c:	2232      	movs	r2, #50	; 0x32
 802b73e:	2102      	movs	r1, #2
 802b740:	f001 f8ea 	bl	802c918 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 802b744:	4d12      	ldr	r5, [pc, #72]	; (802b790 <mbedtls_ssl_handshake_client_step+0xa94>)
 802b746:	f7ff bb37 	b.w	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
            ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 802b74a:	18d7      	adds	r7, r2, r3
              | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]   ) );
 802b74c:	5c16      	ldrb	r6, [r2, r0]
            ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 802b74e:	797f      	ldrb	r7, [r7, #5]
                                + 3 + n + sig_alg_len )
 802b750:	1dd8      	adds	r0, r3, #7
              | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]   ) );
 802b752:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
                                + 3 + n + sig_alg_len )
 802b756:	4430      	add	r0, r6
        if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl )
 802b758:	4281      	cmp	r1, r0
 802b75a:	f67f ab27 	bls.w	802adac <mbedtls_ssl_handshake_client_step+0xb0>
        n += 2 + sig_alg_len;
 802b75e:	3302      	adds	r3, #2
 802b760:	4433      	add	r3, r6
 802b762:	1d98      	adds	r0, r3, #6
 802b764:	f7ff bb19 	b.w	802ad9a <mbedtls_ssl_handshake_client_step+0x9e>
        key_cert = ssl->conf->key_cert;
 802b768:	6c10      	ldr	r0, [r2, #64]	; 0x40
    return( key_cert == NULL ? NULL : key_cert->key );
 802b76a:	2800      	cmp	r0, #0
 802b76c:	f47f af09 	bne.w	802b582 <mbedtls_ssl_handshake_client_step+0x886>
 802b770:	e708      	b.n	802b584 <mbedtls_ssl_handshake_client_step+0x888>
        key_cert = ssl->conf->key_cert;
 802b772:	6823      	ldr	r3, [r4, #0]
 802b774:	6c18      	ldr	r0, [r3, #64]	; 0x40
    return( key_cert == NULL ? NULL : key_cert->key );
 802b776:	2800      	cmp	r0, #0
 802b778:	f47f aef2 	bne.w	802b560 <mbedtls_ssl_handshake_client_step+0x864>
 802b77c:	e6f1      	b.n	802b562 <mbedtls_ssl_handshake_client_step+0x866>
 802b77e:	bf00      	nop
 802b780:	ffff8900 	.word	0xffff8900
 802b784:	ffff8480 	.word	0xffff8480
 802b788:	ffff9600 	.word	0xffff9600
 802b78c:	ffff8f00 	.word	0xffff8f00
 802b790:	ffff8680 	.word	0xffff8680
        ssl->session_negotiate->ciphersuite != i ||
 802b794:	685a      	ldr	r2, [r3, #4]
 802b796:	2a00      	cmp	r2, #0
 802b798:	f47f ac5f 	bne.w	802b05a <mbedtls_ssl_handshake_client_step+0x35e>
        ssl->session_negotiate->compression != comp ||
 802b79c:	689a      	ldr	r2, [r3, #8]
 802b79e:	f106 0127 	add.w	r1, r6, #39	; 0x27
 802b7a2:	4297      	cmp	r7, r2
 802b7a4:	f103 060c 	add.w	r6, r3, #12
 802b7a8:	f47f ac5b 	bne.w	802b062 <mbedtls_ssl_handshake_client_step+0x366>
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
 802b7ac:	4630      	mov	r0, r6
 802b7ae:	463a      	mov	r2, r7
 802b7b0:	e9cd 1307 	strd	r1, r3, [sp, #28]
 802b7b4:	f004 fb22 	bl	802fdfc <memcmp>
        ssl->session_negotiate->id_len != n ||
 802b7b8:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
 802b7bc:	2800      	cmp	r0, #0
 802b7be:	f47f ac50 	bne.w	802b062 <mbedtls_ssl_handshake_client_step+0x366>
        ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 802b7c2:	230c      	movs	r3, #12
        if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 802b7c4:	4620      	mov	r0, r4
        ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 802b7c6:	6063      	str	r3, [r4, #4]
        if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 802b7c8:	f001 fdc0 	bl	802d34c <mbedtls_ssl_derive_keys>
 802b7cc:	4603      	mov	r3, r0
 802b7ce:	2800      	cmp	r0, #0
 802b7d0:	f43f ac55 	beq.w	802b07e <mbedtls_ssl_handshake_client_step+0x382>
            mbedtls_ssl_send_alert_message(
 802b7d4:	4620      	mov	r0, r4
 802b7d6:	2250      	movs	r2, #80	; 0x50
 802b7d8:	2102      	movs	r1, #2
            return( ret );
 802b7da:	461d      	mov	r5, r3
            mbedtls_ssl_send_alert_message(
 802b7dc:	f001 f89c 	bl	802c918 <mbedtls_ssl_send_alert_message>
            return( ret );
 802b7e0:	f7ff baea 	b.w	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 802b7e4:	4d1e      	ldr	r5, [pc, #120]	; (802b860 <mbedtls_ssl_handshake_client_step+0xb64>)
 802b7e6:	f7ff bae7 	b.w	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 802b7ea:	f8db 30c4 	ldr.w	r3, [fp, #196]	; 0xc4
 802b7ee:	465c      	mov	r4, fp
 802b7f0:	9d08      	ldr	r5, [sp, #32]
 802b7f2:	2b00      	cmp	r3, #0
 802b7f4:	f47f aae0 	bne.w	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
        ssl->conf->allow_legacy_renegotiation ==
 802b7f8:	f8db 3000 	ldr.w	r3, [fp]
 802b7fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 802b800:	f003 0330 	and.w	r3, r3, #48	; 0x30
 802b804:	2b20      	cmp	r3, #32
 802b806:	f47f aad7 	bne.w	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
 802b80a:	e776      	b.n	802b6fa <mbedtls_ssl_handshake_client_step+0x9fe>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 802b80c:	4620      	mov	r0, r4
 802b80e:	2246      	movs	r2, #70	; 0x46
 802b810:	2102      	movs	r1, #2
 802b812:	f001 f881 	bl	802c918 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );
 802b816:	4d13      	ldr	r5, [pc, #76]	; (802b864 <mbedtls_ssl_handshake_client_step+0xb68>)
 802b818:	f7ff bace 	b.w	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 802b81c:	4d12      	ldr	r5, [pc, #72]	; (802b868 <mbedtls_ssl_handshake_client_step+0xb6c>)
 802b81e:	f7ff bacb 	b.w	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 802b822:	4d12      	ldr	r5, [pc, #72]	; (802b86c <mbedtls_ssl_handshake_client_step+0xb70>)
 802b824:	f7ff bac8 	b.w	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
 802b828:	4d11      	ldr	r5, [pc, #68]	; (802b870 <mbedtls_ssl_handshake_client_step+0xb74>)
           break;
 802b82a:	f7ff bac5 	b.w	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
        return( MBEDTLS_ERR_SSL_NO_RNG );
 802b82e:	4d11      	ldr	r5, [pc, #68]	; (802b874 <mbedtls_ssl_handshake_client_step+0xb78>)
 802b830:	f7ff bac2 	b.w	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
    n = 0;
 802b834:	4681      	mov	r9, r0
 802b836:	e4e7      	b.n	802b208 <mbedtls_ssl_handshake_client_step+0x50c>
        mbedtls_ssl_send_alert_message(
 802b838:	4620      	mov	r0, r4
 802b83a:	222f      	movs	r2, #47	; 0x2f
 802b83c:	2102      	movs	r1, #2
 802b83e:	f001 f86b 	bl	802c918 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
 802b842:	4d0d      	ldr	r5, [pc, #52]	; (802b878 <mbedtls_ssl_handshake_client_step+0xb7c>)
 802b844:	f7ff bab8 	b.w	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
 802b848:	4d0c      	ldr	r5, [pc, #48]	; (802b87c <mbedtls_ssl_handshake_client_step+0xb80>)
 802b84a:	f7ff bab5 	b.w	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
        return( MBEDTLS_ERR_SSL_BAD_CONFIG );
 802b84e:	4d0c      	ldr	r5, [pc, #48]	; (802b880 <mbedtls_ssl_handshake_client_step+0xb84>)
 802b850:	f7ff bab2 	b.w	802adb8 <mbedtls_ssl_handshake_client_step+0xbc>
    *olen = 0;
 802b854:	f04f 0800 	mov.w	r8, #0
 802b858:	e58d      	b.n	802b376 <mbedtls_ssl_handshake_client_step+0x67a>
    *olen = 0;
 802b85a:	4603      	mov	r3, r0
 802b85c:	e532      	b.n	802b2c4 <mbedtls_ssl_handshake_client_step+0x5c8>
 802b85e:	bf00      	nop
 802b860:	ffff9400 	.word	0xffff9400
 802b864:	ffff9180 	.word	0xffff9180
 802b868:	ffff8680 	.word	0xffff8680
 802b86c:	ffff8900 	.word	0xffff8900
 802b870:	ffff9300 	.word	0xffff9300
 802b874:	ffff8c00 	.word	0xffff8c00
 802b878:	ffff8f80 	.word	0xffff8f80
 802b87c:	ffff8a00 	.word	0xffff8a00
 802b880:	ffffa180 	.word	0xffffa180

0802b884 <mbedtls_ssl_set_timer>:
 * Start a timer.
 * Passing millisecs = 0 cancels a running timer.
 */
void mbedtls_ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )
{
    if( ssl->f_set_timer == NULL )
 802b884:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
 802b886:	460a      	mov	r2, r1
    if( ssl->f_set_timer == NULL )
 802b888:	b113      	cbz	r3, 802b890 <mbedtls_ssl_set_timer+0xc>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "set_timer to %d ms", (int) millisecs ) );
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
 802b88a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 802b88c:	0889      	lsrs	r1, r1, #2
 802b88e:	4718      	bx	r3
}
 802b890:	4770      	bx	lr
 802b892:	bf00      	nop

0802b894 <mbedtls_ssl_encrypt_buf>:
    ((void) p_rng);
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );

    if( transform == NULL )
 802b894:	2900      	cmp	r1, #0
 802b896:	f000 813c 	beq.w	802bb12 <mbedtls_ssl_encrypt_buf+0x27e>
{
 802b89a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b89e:	4614      	mov	r4, r2
 802b8a0:	b09f      	sub	sp, #124	; 0x7c
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "no transform provided to encrypt_buf" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }
    if( rec == NULL
 802b8a2:	2a00      	cmp	r2, #0
 802b8a4:	f000 808b 	beq.w	802b9be <mbedtls_ssl_encrypt_buf+0x12a>
        || rec->buf == NULL
 802b8a8:	68d6      	ldr	r6, [r2, #12]
 802b8aa:	2e00      	cmp	r6, #0
 802b8ac:	f000 8087 	beq.w	802b9be <mbedtls_ssl_encrypt_buf+0x12a>
 802b8b0:	460d      	mov	r5, r1
        || rec->buf_len < rec->data_offset
 802b8b2:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 802b8b6:	4291      	cmp	r1, r2
 802b8b8:	f0c0 8081 	bcc.w	802b9be <mbedtls_ssl_encrypt_buf+0x12a>
        || rec->buf_len - rec->data_offset < rec->data_len
 802b8bc:	69a7      	ldr	r7, [r4, #24]
 802b8be:	4698      	mov	r8, r3
 802b8c0:	1a8b      	subs	r3, r1, r2
 802b8c2:	42bb      	cmp	r3, r7
 802b8c4:	d37b      	bcc.n	802b9be <mbedtls_ssl_encrypt_buf+0x12a>
    data = rec->buf + rec->data_offset;
    post_avail = rec->buf_len - ( rec->data_len + rec->data_offset );
    MBEDTLS_SSL_DEBUG_BUF( 4, "before encrypt: output payload",
                           data, rec->data_len );

    mode = mbedtls_cipher_get_cipher_mode( &transform->cipher_ctx_enc );
 802b8c6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    data = rec->buf + rec->data_offset;
 802b8c8:	4416      	add	r6, r2
    post_avail = rec->buf_len - ( rec->data_len + rec->data_offset );
 802b8ca:	443a      	add	r2, r7
 802b8cc:	eba1 0902 	sub.w	r9, r1, r2
    if( ctx->cipher_info == NULL )
 802b8d0:	2b00      	cmp	r3, #0
 802b8d2:	f000 8115 	beq.w	802bb00 <mbedtls_ssl_encrypt_buf+0x26c>

    if( rec->data_len > MBEDTLS_SSL_OUT_CONTENT_LEN )
 802b8d6:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
    return ctx->cipher_info->mode;
 802b8da:	f893 a001 	ldrb.w	sl, [r3, #1]
 802b8de:	f200 8113 	bhi.w	802bb08 <mbedtls_ssl_encrypt_buf+0x274>

    /*
     * Add MAC before if needed
     */
#if defined(MBEDTLS_SSL_SOME_MODES_USE_MAC)
    if( mode == MBEDTLS_MODE_STREAM ||
 802b8e2:	f1ba 0f07 	cmp.w	sl, #7
 802b8e6:	d06e      	beq.n	802b9c6 <mbedtls_ssl_encrypt_buf+0x132>
 802b8e8:	f1ba 0f02 	cmp.w	sl, #2
 802b8ec:	d06b      	beq.n	802b9c6 <mbedtls_ssl_encrypt_buf+0x132>
#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */

#if defined(MBEDTLS_GCM_C) || \
    defined(MBEDTLS_CCM_C) || \
    defined(MBEDTLS_CHACHAPOLY_C)
    if( mode == MBEDTLS_MODE_GCM ||
 802b8ee:	f1ba 0f06 	cmp.w	sl, #6
 802b8f2:	f040 80f3 	bne.w	802badc <mbedtls_ssl_encrypt_buf+0x248>
 802b8f6:	f04f 0b01 	mov.w	fp, #1
        size_t dynamic_iv_len;
        int dynamic_iv_is_explicit =
            ssl_transform_aead_dynamic_iv_is_explicit( transform );

        /* Check that there's space for the authentication tag. */
        if( post_avail < transform->taglen )
 802b8fa:	692f      	ldr	r7, [r5, #16]
 802b8fc:	454f      	cmp	r7, r9
 802b8fe:	f200 80e9 	bhi.w	802bad4 <mbedtls_ssl_encrypt_buf+0x240>
    memset( dst_iv, 0, dst_iv_len );
 802b902:	2300      	movs	r3, #0
            ssl_transform_aead_dynamic_iv_is_explicit( transform );
 802b904:	f8d5 8008 	ldr.w	r8, [r5, #8]
    memcpy( dst_iv, fixed_iv, fixed_iv_len );
 802b908:	f105 0114 	add.w	r1, r5, #20
 802b90c:	4642      	mov	r2, r8
 802b90e:	a80a      	add	r0, sp, #40	; 0x28
    memset( dst_iv, 0, dst_iv_len );
 802b910:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
            ssl_transform_aead_dynamic_iv_is_explicit( transform );
 802b914:	f8d5 9004 	ldr.w	r9, [r5, #4]
    memset( dst_iv, 0, dst_iv_len );
 802b918:	930c      	str	r3, [sp, #48]	; 0x30
    memcpy( dst_iv, fixed_iv, fixed_iv_len );
 802b91a:	f004 fa7d 	bl	802fe18 <memcpy>
        cur[0] = ( rec->data_len >> 8 ) & 0xFF;
 802b91e:	46a4      	mov	ip, r4
        dst_iv[i] ^= dynamic_iv[i];
 802b920:	6862      	ldr	r2, [r4, #4]
 802b922:	6820      	ldr	r0, [r4, #0]
        memcpy( cur, rec->ctr, sizeof( rec->ctr ) );
 802b924:	4611      	mov	r1, r2

        /*
         * Encrypt and authenticate
         */

        if( ( ret = mbedtls_cipher_auth_encrypt( &transform->cipher_ctx_enc,
 802b926:	9706      	str	r7, [sp, #24]
        cur[0] = ( rec->data_len >> 8 ) & 0xFF;
 802b928:	f85c ef18 	ldr.w	lr, [ip, #24]!
        memcpy( cur, rec->ctr, sizeof( rec->ctr ) );
 802b92c:	ab12      	add	r3, sp, #72	; 0x48
        if( ( ret = mbedtls_cipher_auth_encrypt( &transform->cipher_ctx_enc,
 802b92e:	eb06 070e 	add.w	r7, r6, lr
 802b932:	9705      	str	r7, [sp, #20]
        dst_iv[i] ^= dynamic_iv[i];
 802b934:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
        if( ( ret = mbedtls_cipher_auth_encrypt( &transform->cipher_ctx_enc,
 802b936:	9603      	str	r6, [sp, #12]
 802b938:	9601      	str	r6, [sp, #4]
 802b93a:	f8cd c010 	str.w	ip, [sp, #16]
 802b93e:	f8cd e008 	str.w	lr, [sp, #8]
        memcpy( cur, rec->ctr, sizeof( rec->ctr ) );
 802b942:	c303      	stmia	r3!, {r0, r1}
        dst_iv[i] ^= dynamic_iv[i];
 802b944:	4078      	eors	r0, r7
 802b946:	4607      	mov	r7, r0
        if( ( ret = mbedtls_cipher_auth_encrypt( &transform->cipher_ctx_enc,
 802b948:	f04f 0a0d 	mov.w	sl, #13
    *cur = rec->type;
 802b94c:	7a23      	ldrb	r3, [r4, #8]
        dst_iv[i] ^= dynamic_iv[i];
 802b94e:	980c      	ldr	r0, [sp, #48]	; 0x30
    *cur = rec->type;
 802b950:	9309      	str	r3, [sp, #36]	; 0x24
        dst_iv[i] ^= dynamic_iv[i];
 802b952:	4050      	eors	r0, r2
    memcpy( cur, rec->ver, sizeof( rec->ver ) );
 802b954:	f8b4 c009 	ldrh.w	ip, [r4, #9]
        dst_iv[i] ^= dynamic_iv[i];
 802b958:	970b      	str	r7, [sp, #44]	; 0x2c
    *cur = rec->type;
 802b95a:	9f09      	ldr	r7, [sp, #36]	; 0x24
        dst_iv[i] ^= dynamic_iv[i];
 802b95c:	900c      	str	r0, [sp, #48]	; 0x30
        if( ( ret = mbedtls_cipher_auth_encrypt( &transform->cipher_ctx_enc,
 802b95e:	f8cd a000 	str.w	sl, [sp]
 802b962:	464a      	mov	r2, r9
        cur[0] = ( rec->data_len >> 8 ) & 0xFF;
 802b964:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
        if( ( ret = mbedtls_cipher_auth_encrypt( &transform->cipher_ctx_enc,
 802b968:	ab12      	add	r3, sp, #72	; 0x48
 802b96a:	a90a      	add	r1, sp, #40	; 0x28
 802b96c:	f105 004c 	add.w	r0, r5, #76	; 0x4c
        cur[1] = ( rec->data_len >> 0 ) & 0xFF;
 802b970:	f88d e054 	strb.w	lr, [sp, #84]	; 0x54
        cur[0] = ( rec->data_len >> 8 ) & 0xFF;
 802b974:	f88d a053 	strb.w	sl, [sp, #83]	; 0x53
    *cur = rec->type;
 802b978:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    memcpy( cur, rec->ver, sizeof( rec->ver ) );
 802b97c:	f8ad c051 	strh.w	ip, [sp, #81]	; 0x51
        if( ( ret = mbedtls_cipher_auth_encrypt( &transform->cipher_ctx_enc,
 802b980:	f7f8 fc8e 	bl	80242a0 <mbedtls_cipher_auth_encrypt>
 802b984:	2800      	cmp	r0, #0
 802b986:	f040 80a6 	bne.w	802bad6 <mbedtls_ssl_encrypt_buf+0x242>
            return( ret );
        }
        MBEDTLS_SSL_DEBUG_BUF( 4, "after encrypt: tag",
                               data + rec->data_len, transform->taglen );
        /* Account for authentication tag. */
        rec->data_len += transform->taglen;
 802b98a:	692a      	ldr	r2, [r5, #16]
 802b98c:	69a3      	ldr	r3, [r4, #24]
        post_avail -= transform->taglen;

        /*
         * Prefix record content with dynamic IV in case it is explicit.
         */
        if( dynamic_iv_is_explicit != 0 )
 802b98e:	45c1      	cmp	r9, r8
        rec->data_len += transform->taglen;
 802b990:	4413      	add	r3, r2
 802b992:	61a3      	str	r3, [r4, #24]
        if( dynamic_iv_is_explicit != 0 )
 802b994:	d00f      	beq.n	802b9b6 <mbedtls_ssl_encrypt_buf+0x122>
        {
            if( rec->data_offset < dynamic_iv_len )
 802b996:	6963      	ldr	r3, [r4, #20]
 802b998:	2b07      	cmp	r3, #7
 802b99a:	f240 809b 	bls.w	802bad4 <mbedtls_ssl_encrypt_buf+0x240>
            {
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "Buffer provided for encrypted record not large enough" ) );
                return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );
            }

            memcpy( data - dynamic_iv_len, dynamic_iv, dynamic_iv_len );
 802b99e:	6822      	ldr	r2, [r4, #0]
 802b9a0:	6863      	ldr	r3, [r4, #4]
 802b9a2:	f846 2c08 	str.w	r2, [r6, #-8]
 802b9a6:	f846 3c04 	str.w	r3, [r6, #-4]
            rec->data_offset -= dynamic_iv_len;
            rec->data_len    += dynamic_iv_len;
 802b9aa:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
            rec->data_offset -= dynamic_iv_len;
 802b9ae:	3a08      	subs	r2, #8
            rec->data_len    += dynamic_iv_len;
 802b9b0:	3308      	adds	r3, #8
 802b9b2:	e9c4 2305 	strd	r2, r3, [r4, #20]
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    /* Make extra sure authentication was performed, exactly once */
    if( auth_done != 1 )
 802b9b6:	f1bb 0f01 	cmp.w	fp, #1
 802b9ba:	f000 808c 	beq.w	802bad6 <mbedtls_ssl_encrypt_buf+0x242>
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 802b9be:	4856      	ldr	r0, [pc, #344]	; (802bb18 <mbedtls_ssl_encrypt_buf+0x284>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= encrypt buf" ) );

    return( 0 );
}
 802b9c0:	b01f      	add	sp, #124	; 0x7c
 802b9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( post_avail < transform->maclen )
 802b9c6:	68eb      	ldr	r3, [r5, #12]
 802b9c8:	454b      	cmp	r3, r9
 802b9ca:	f200 8083 	bhi.w	802bad4 <mbedtls_ssl_encrypt_buf+0x240>
        if( transform->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 802b9ce:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
 802b9d2:	2b00      	cmp	r3, #0
 802b9d4:	ddf3      	ble.n	802b9be <mbedtls_ssl_encrypt_buf+0x12a>
        memcpy( cur, rec->ctr, sizeof( rec->ctr ) );
 802b9d6:	6820      	ldr	r0, [r4, #0]
 802b9d8:	6861      	ldr	r1, [r4, #4]
 802b9da:	ab12      	add	r3, sp, #72	; 0x48
 802b9dc:	c303      	stmia	r3!, {r0, r1}
            mbedtls_md_hmac_update( &transform->md_ctx_enc, add_data,
 802b9de:	f105 0034 	add.w	r0, r5, #52	; 0x34
        cur[0] = ( rec->data_len >> 8 ) & 0xFF;
 802b9e2:	0a3a      	lsrs	r2, r7, #8
        cur[1] = ( rec->data_len >> 0 ) & 0xFF;
 802b9e4:	f88d 7054 	strb.w	r7, [sp, #84]	; 0x54
            mbedtls_md_hmac_update( &transform->md_ctx_enc, add_data,
 802b9e8:	4607      	mov	r7, r0
    memcpy( cur, rec->ver, sizeof( rec->ver ) );
 802b9ea:	f8b4 3009 	ldrh.w	r3, [r4, #9]
    *cur = rec->type;
 802b9ee:	f894 c008 	ldrb.w	ip, [r4, #8]
            mbedtls_md_hmac_update( &transform->md_ctx_enc, add_data,
 802b9f2:	a912      	add	r1, sp, #72	; 0x48
        cur[0] = ( rec->data_len >> 8 ) & 0xFF;
 802b9f4:	f88d 2053 	strb.w	r2, [sp, #83]	; 0x53
            mbedtls_md_hmac_update( &transform->md_ctx_enc, add_data,
 802b9f8:	220d      	movs	r2, #13
    memcpy( cur, rec->ver, sizeof( rec->ver ) );
 802b9fa:	f8ad 3051 	strh.w	r3, [sp, #81]	; 0x51
    *cur = rec->type;
 802b9fe:	f88d c050 	strb.w	ip, [sp, #80]	; 0x50
            mbedtls_md_hmac_update( &transform->md_ctx_enc, add_data,
 802ba02:	f7fa fb49 	bl	8026098 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &transform->md_ctx_enc,
 802ba06:	69a2      	ldr	r2, [r4, #24]
 802ba08:	4631      	mov	r1, r6
 802ba0a:	4638      	mov	r0, r7
 802ba0c:	f7fa fb44 	bl	8026098 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_finish( &transform->md_ctx_enc, mac );
 802ba10:	a90a      	add	r1, sp, #40	; 0x28
 802ba12:	4638      	mov	r0, r7
 802ba14:	f7fa fb5e 	bl	80260d4 <mbedtls_md_hmac_finish>
            mbedtls_md_hmac_reset( &transform->md_ctx_enc );
 802ba18:	4638      	mov	r0, r7
 802ba1a:	f7fa fbd3 	bl	80261c4 <mbedtls_md_hmac_reset>
            memcpy( data + rec->data_len, mac, transform->maclen );
 802ba1e:	69a0      	ldr	r0, [r4, #24]
 802ba20:	68ea      	ldr	r2, [r5, #12]
 802ba22:	a90a      	add	r1, sp, #40	; 0x28
 802ba24:	4430      	add	r0, r6
 802ba26:	f004 f9f7 	bl	802fe18 <memcpy>
        rec->data_len += transform->maclen;
 802ba2a:	68eb      	ldr	r3, [r5, #12]
 802ba2c:	69a2      	ldr	r2, [r4, #24]
    if( mode == MBEDTLS_MODE_GCM ||
 802ba2e:	f1ba 0f06 	cmp.w	sl, #6
        rec->data_len += transform->maclen;
 802ba32:	441a      	add	r2, r3
        post_avail -= transform->maclen;
 802ba34:	eba9 0903 	sub.w	r9, r9, r3
        rec->data_len += transform->maclen;
 802ba38:	61a2      	str	r2, [r4, #24]
    if( mode == MBEDTLS_MODE_GCM ||
 802ba3a:	d058      	beq.n	802baee <mbedtls_ssl_encrypt_buf+0x25a>
    if( mode == MBEDTLS_MODE_CBC )
 802ba3c:	f1ba 0f02 	cmp.w	sl, #2
 802ba40:	d1bd      	bne.n	802b9be <mbedtls_ssl_encrypt_buf+0x12a>
        padlen = transform->ivlen - ( rec->data_len + 1 ) % transform->ivlen;
 802ba42:	6869      	ldr	r1, [r5, #4]
 802ba44:	1c50      	adds	r0, r2, #1
 802ba46:	fbb0 f3f1 	udiv	r3, r0, r1
 802ba4a:	fb01 0313 	mls	r3, r1, r3, r0
 802ba4e:	1acb      	subs	r3, r1, r3
        if( padlen == transform->ivlen )
 802ba50:	4299      	cmp	r1, r3
 802ba52:	d04f      	beq.n	802baf4 <mbedtls_ssl_encrypt_buf+0x260>
        if( post_avail < padlen + 1 )
 802ba54:	1c59      	adds	r1, r3, #1
 802ba56:	4549      	cmp	r1, r9
 802ba58:	d83c      	bhi.n	802bad4 <mbedtls_ssl_encrypt_buf+0x240>
 802ba5a:	b2df      	uxtb	r7, r3
            data[rec->data_len + i] = (unsigned char) padlen;
 802ba5c:	54b7      	strb	r7, [r6, r2]
        for( i = 0; i <= padlen; i++ )
 802ba5e:	b133      	cbz	r3, 802ba6e <mbedtls_ssl_encrypt_buf+0x1da>
 802ba60:	2201      	movs	r2, #1
            data[rec->data_len + i] = (unsigned char) padlen;
 802ba62:	18b0      	adds	r0, r6, r2
 802ba64:	69a1      	ldr	r1, [r4, #24]
        for( i = 0; i <= padlen; i++ )
 802ba66:	3201      	adds	r2, #1
 802ba68:	4293      	cmp	r3, r2
            data[rec->data_len + i] = (unsigned char) padlen;
 802ba6a:	5447      	strb	r7, [r0, r1]
        for( i = 0; i <= padlen; i++ )
 802ba6c:	d2f9      	bcs.n	802ba62 <mbedtls_ssl_encrypt_buf+0x1ce>
        rec->data_len += padlen + 1;
 802ba6e:	69a2      	ldr	r2, [r4, #24]
        if( transform->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 802ba70:	f8d5 10cc 	ldr.w	r1, [r5, #204]	; 0xcc
        rec->data_len += padlen + 1;
 802ba74:	3201      	adds	r2, #1
 802ba76:	4413      	add	r3, r2
        if( transform->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 802ba78:	2901      	cmp	r1, #1
        rec->data_len += padlen + 1;
 802ba7a:	61a3      	str	r3, [r4, #24]
        if( transform->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 802ba7c:	dd46      	ble.n	802bb0c <mbedtls_ssl_encrypt_buf+0x278>
            if( f_rng == NULL )
 802ba7e:	f1b8 0f00 	cmp.w	r8, #0
 802ba82:	d09c      	beq.n	802b9be <mbedtls_ssl_encrypt_buf+0x12a>
            if( rec->data_offset < transform->ivlen )
 802ba84:	686a      	ldr	r2, [r5, #4]
 802ba86:	6963      	ldr	r3, [r4, #20]
 802ba88:	4293      	cmp	r3, r2
 802ba8a:	d323      	bcc.n	802bad4 <mbedtls_ssl_encrypt_buf+0x240>
            ret = f_rng( p_rng, transform->iv_enc, transform->ivlen );
 802ba8c:	f105 0114 	add.w	r1, r5, #20
 802ba90:	9828      	ldr	r0, [sp, #160]	; 0xa0
 802ba92:	9109      	str	r1, [sp, #36]	; 0x24
 802ba94:	47c0      	blx	r8
            if( ret != 0 )
 802ba96:	b9f0      	cbnz	r0, 802bad6 <mbedtls_ssl_encrypt_buf+0x242>
            memcpy( data - transform->ivlen, transform->iv_enc,
 802ba98:	686a      	ldr	r2, [r5, #4]
 802ba9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 802ba9c:	1ab0      	subs	r0, r6, r2
 802ba9e:	f004 f9bb 	bl	802fe18 <memcpy>
 802baa2:	69a3      	ldr	r3, [r4, #24]
 802baa4:	9909      	ldr	r1, [sp, #36]	; 0x24
        if( ( ret = mbedtls_cipher_crypt( &transform->cipher_ctx_enc,
 802baa6:	aa0a      	add	r2, sp, #40	; 0x28
 802baa8:	e9cd 6201 	strd	r6, r2, [sp, #4]
 802baac:	9300      	str	r3, [sp, #0]
 802baae:	686a      	ldr	r2, [r5, #4]
 802bab0:	4633      	mov	r3, r6
 802bab2:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 802bab6:	f7f8 fb3d 	bl	8024134 <mbedtls_cipher_crypt>
 802baba:	b960      	cbnz	r0, 802bad6 <mbedtls_ssl_encrypt_buf+0x242>
        if( rec->data_len != olen )
 802babc:	69a3      	ldr	r3, [r4, #24]
 802babe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802bac0:	4293      	cmp	r3, r2
 802bac2:	f47f af7c 	bne.w	802b9be <mbedtls_ssl_encrypt_buf+0x12a>
            data             -= transform->ivlen;
 802bac6:	6869      	ldr	r1, [r5, #4]
            rec->data_offset -= transform->ivlen;
 802bac8:	6962      	ldr	r2, [r4, #20]
            rec->data_len    += transform->ivlen;
 802baca:	440b      	add	r3, r1
            rec->data_offset -= transform->ivlen;
 802bacc:	1a52      	subs	r2, r2, r1
 802bace:	e9c4 2305 	strd	r2, r3, [r4, #20]
    if( auth_done != 1 )
 802bad2:	e000      	b.n	802bad6 <mbedtls_ssl_encrypt_buf+0x242>
            return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );
 802bad4:	4811      	ldr	r0, [pc, #68]	; (802bb1c <mbedtls_ssl_encrypt_buf+0x288>)
}
 802bad6:	b01f      	add	sp, #124	; 0x7c
 802bad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( mode == MBEDTLS_MODE_GCM ||
 802badc:	f1ba 0f08 	cmp.w	sl, #8
 802bae0:	f43f af09 	beq.w	802b8f6 <mbedtls_ssl_encrypt_buf+0x62>
        mode == MBEDTLS_MODE_CCM ||
 802bae4:	f1ba 0f0a 	cmp.w	sl, #10
 802bae8:	f43f af05 	beq.w	802b8f6 <mbedtls_ssl_encrypt_buf+0x62>
 802baec:	e767      	b.n	802b9be <mbedtls_ssl_encrypt_buf+0x12a>
    if( mode == MBEDTLS_MODE_GCM ||
 802baee:	f04f 0b02 	mov.w	fp, #2
 802baf2:	e702      	b.n	802b8fa <mbedtls_ssl_encrypt_buf+0x66>
        if( post_avail < padlen + 1 )
 802baf4:	f1b9 0f00 	cmp.w	r9, #0
 802baf8:	d0ec      	beq.n	802bad4 <mbedtls_ssl_encrypt_buf+0x240>
            data[rec->data_len + i] = (unsigned char) padlen;
 802bafa:	2300      	movs	r3, #0
 802bafc:	54b3      	strb	r3, [r6, r2]
        for( i = 0; i <= padlen; i++ )
 802bafe:	e7b6      	b.n	802ba6e <mbedtls_ssl_encrypt_buf+0x1da>
    if( rec->data_len > MBEDTLS_SSL_OUT_CONTENT_LEN )
 802bb00:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
 802bb04:	f67f af5b 	bls.w	802b9be <mbedtls_ssl_encrypt_buf+0x12a>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 802bb08:	4805      	ldr	r0, [pc, #20]	; (802bb20 <mbedtls_ssl_encrypt_buf+0x28c>)
 802bb0a:	e7e4      	b.n	802bad6 <mbedtls_ssl_encrypt_buf+0x242>
 802bb0c:	f105 0114 	add.w	r1, r5, #20
 802bb10:	e7c9      	b.n	802baa6 <mbedtls_ssl_encrypt_buf+0x212>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 802bb12:	4801      	ldr	r0, [pc, #4]	; (802bb18 <mbedtls_ssl_encrypt_buf+0x284>)
}
 802bb14:	4770      	bx	lr
 802bb16:	bf00      	nop
 802bb18:	ffff9400 	.word	0xffff9400
 802bb1c:	ffff9600 	.word	0xffff9600
 802bb20:	ffff8f00 	.word	0xffff8f00

0802bb24 <mbedtls_ssl_decrypt_buf>:
#endif /* MBEDTLS_SSL_SOME_SUITES_USE_TLS_CBC */

int mbedtls_ssl_decrypt_buf( mbedtls_ssl_context const *ssl,
                             mbedtls_ssl_transform *transform,
                             mbedtls_record *rec )
{
 802bb24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bb28:	ed2d 8b02 	vpush	{d8}
 802bb2c:	b0b5      	sub	sp, #212	; 0xd4
    ssl = NULL; /* make sure we don't use it except for debug */
    ((void) ssl);
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );
    if( rec == NULL                     ||
 802bb2e:	2a00      	cmp	r2, #0
 802bb30:	f000 80b7 	beq.w	802bca2 <mbedtls_ssl_decrypt_buf+0x17e>
        rec->buf == NULL                ||
 802bb34:	68d5      	ldr	r5, [r2, #12]
 802bb36:	4617      	mov	r7, r2
    if( rec == NULL                     ||
 802bb38:	2d00      	cmp	r5, #0
 802bb3a:	f000 80b2 	beq.w	802bca2 <mbedtls_ssl_decrypt_buf+0x17e>
        rec->buf_len < rec->data_offset ||
 802bb3e:	e9d2 2004 	ldrd	r2, r0, [r2, #16]
        rec->buf == NULL                ||
 802bb42:	4282      	cmp	r2, r0
 802bb44:	f0c0 80ad 	bcc.w	802bca2 <mbedtls_ssl_decrypt_buf+0x17e>
 802bb48:	4688      	mov	r8, r1
        rec->buf_len - rec->data_offset < rec->data_len )
 802bb4a:	69b9      	ldr	r1, [r7, #24]
 802bb4c:	1a12      	subs	r2, r2, r0
        rec->buf_len < rec->data_offset ||
 802bb4e:	428a      	cmp	r2, r1
 802bb50:	f0c0 80a7 	bcc.w	802bca2 <mbedtls_ssl_decrypt_buf+0x17e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad record structure provided to decrypt_buf" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    data = rec->buf + rec->data_offset;
    mode = mbedtls_cipher_get_cipher_mode( &transform->cipher_ctx_dec );
 802bb54:	f8d8 308c 	ldr.w	r3, [r8, #140]	; 0x8c
    data = rec->buf + rec->data_offset;
 802bb58:	4405      	add	r5, r0
    if( ctx->cipher_info == NULL )
 802bb5a:	2b00      	cmp	r3, #0
 802bb5c:	f000 80a1 	beq.w	802bca2 <mbedtls_ssl_decrypt_buf+0x17e>
    return ctx->cipher_info->mode;
 802bb60:	785b      	ldrb	r3, [r3, #1]
    else
#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
#if defined(MBEDTLS_GCM_C) || \
    defined(MBEDTLS_CCM_C) || \
    defined(MBEDTLS_CHACHAPOLY_C)
    if( mode == MBEDTLS_MODE_GCM ||
 802bb62:	2b06      	cmp	r3, #6
 802bb64:	d004      	beq.n	802bb70 <mbedtls_ssl_decrypt_buf+0x4c>
 802bb66:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 802bb6a:	2a08      	cmp	r2, #8
 802bb6c:	f040 80a0 	bne.w	802bcb0 <mbedtls_ssl_decrypt_buf+0x18c>
         *       part of the IV is prepended to the ciphertext and
         *       can be chosen freely - in particular, it need not
         *       agree with the record sequence number.
         */
        dynamic_iv_len = sizeof( rec->ctr );
        if( ssl_transform_aead_dynamic_iv_is_explicit( transform ) == 1 )
 802bb70:	e9d8 9201 	ldrd	r9, r2, [r8, #4]
 802bb74:	4591      	cmp	r9, r2
 802bb76:	d04e      	beq.n	802bc16 <mbedtls_ssl_decrypt_buf+0xf2>
        {
            if( rec->data_len < dynamic_iv_len )
 802bb78:	2907      	cmp	r1, #7
 802bb7a:	d952      	bls.n	802bc22 <mbedtls_ssl_decrypt_buf+0xfe>
        {
            dynamic_iv = rec->ctr;
        }

        /* Check that there's space for the authentication tag. */
        if( rec->data_len < transform->taglen )
 802bb7c:	f8d8 b010 	ldr.w	fp, [r8, #16]
            rec->data_len    -= dynamic_iv_len;
 802bb80:	3908      	subs	r1, #8
            rec->data_offset += dynamic_iv_len;
 802bb82:	3008      	adds	r0, #8
        if( rec->data_len < transform->taglen )
 802bb84:	458b      	cmp	fp, r1
            rec->data_len    -= dynamic_iv_len;
 802bb86:	e9c7 0105 	strd	r0, r1, [r7, #20]
            data += dynamic_iv_len;
 802bb8a:	f105 0a08 	add.w	sl, r5, #8
        if( rec->data_len < transform->taglen )
 802bb8e:	d848      	bhi.n	802bc22 <mbedtls_ssl_decrypt_buf+0xfe>
    memset( dst_iv, 0, dst_iv_len );
 802bb90:	2300      	movs	r3, #0
 802bb92:	ae20      	add	r6, sp, #128	; 0x80
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < taglen (%d) " ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
        rec->data_len -= transform->taglen;
 802bb94:	eba1 040b 	sub.w	r4, r1, fp
    memset( dst_iv, 0, dst_iv_len );
 802bb98:	9320      	str	r3, [sp, #128]	; 0x80
    memcpy( dst_iv, fixed_iv, fixed_iv_len );
 802bb9a:	4630      	mov	r0, r6
    memset( dst_iv, 0, dst_iv_len );
 802bb9c:	e9c6 3301 	strd	r3, r3, [r6, #4]
        rec->data_len -= transform->taglen;
 802bba0:	61bc      	str	r4, [r7, #24]
    memcpy( dst_iv, fixed_iv, fixed_iv_len );
 802bba2:	f108 0124 	add.w	r1, r8, #36	; 0x24
 802bba6:	f004 f937 	bl	802fe18 <memcpy>
    for( i = 0; i < dynamic_iv_len; i++ )
 802bbaa:	42b5      	cmp	r5, r6
 802bbac:	d940      	bls.n	802bc30 <mbedtls_ssl_decrypt_buf+0x10c>
 802bbae:	ab22      	add	r3, sp, #136	; 0x88
 802bbb0:	429d      	cmp	r5, r3
 802bbb2:	d23d      	bcs.n	802bc30 <mbedtls_ssl_decrypt_buf+0x10c>
        dst_iv[i] ^= dynamic_iv[i];
 802bbb4:	7829      	ldrb	r1, [r5, #0]
 802bbb6:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 802bbba:	f89d 3085 	ldrb.w	r3, [sp, #133]	; 0x85
 802bbbe:	404a      	eors	r2, r1
 802bbc0:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
 802bbc4:	7869      	ldrb	r1, [r5, #1]
 802bbc6:	f89d 2086 	ldrb.w	r2, [sp, #134]	; 0x86
 802bbca:	404b      	eors	r3, r1
 802bbcc:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 802bbd0:	78a9      	ldrb	r1, [r5, #2]
 802bbd2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
 802bbd6:	404a      	eors	r2, r1
 802bbd8:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
 802bbdc:	78ea      	ldrb	r2, [r5, #3]
 802bbde:	f89d 1088 	ldrb.w	r1, [sp, #136]	; 0x88
 802bbe2:	4053      	eors	r3, r2
 802bbe4:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
 802bbe8:	792a      	ldrb	r2, [r5, #4]
 802bbea:	f89d 3089 	ldrb.w	r3, [sp, #137]	; 0x89
 802bbee:	404a      	eors	r2, r1
 802bbf0:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 802bbf4:	7969      	ldrb	r1, [r5, #5]
 802bbf6:	f89d 208a 	ldrb.w	r2, [sp, #138]	; 0x8a
 802bbfa:	404b      	eors	r3, r1
 802bbfc:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
 802bc00:	79ab      	ldrb	r3, [r5, #6]
 802bc02:	f89d 108b 	ldrb.w	r1, [sp, #139]	; 0x8b
 802bc06:	405a      	eors	r2, r3
 802bc08:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 802bc0c:	79eb      	ldrb	r3, [r5, #7]
 802bc0e:	404b      	eors	r3, r1
 802bc10:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
    for( i = 0; i < dynamic_iv_len; i++ )
 802bc14:	e014      	b.n	802bc40 <mbedtls_ssl_decrypt_buf+0x11c>
        if( rec->data_len < transform->taglen )
 802bc16:	f8d8 b010 	ldr.w	fp, [r8, #16]
    data = rec->buf + rec->data_offset;
 802bc1a:	46aa      	mov	sl, r5
        if( rec->data_len < transform->taglen )
 802bc1c:	458b      	cmp	fp, r1
            dynamic_iv = rec->ctr;
 802bc1e:	463d      	mov	r5, r7
        if( rec->data_len < transform->taglen )
 802bc20:	d9b6      	bls.n	802bb90 <mbedtls_ssl_decrypt_buf+0x6c>

    /*
     * Finally check the correct flag
     */
    if( correct == 0 )
        return( MBEDTLS_ERR_SSL_INVALID_MAC );
 802bc22:	4c8c      	ldr	r4, [pc, #560]	; (802be54 <mbedtls_ssl_decrypt_buf+0x330>)
#endif /* MBEDTLS_SSL_DTLS_CONNECTION_ID */

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= decrypt buf" ) );

    return( 0 );
}
 802bc24:	4620      	mov	r0, r4
 802bc26:	b035      	add	sp, #212	; 0xd4
 802bc28:	ecbd 8b02 	vpop	{d8}
 802bc2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dst_iv[i] ^= dynamic_iv[i];
 802bc30:	682a      	ldr	r2, [r5, #0]
 802bc32:	e9dd 3121 	ldrd	r3, r1, [sp, #132]	; 0x84
 802bc36:	405a      	eors	r2, r3
 802bc38:	9221      	str	r2, [sp, #132]	; 0x84
 802bc3a:	686b      	ldr	r3, [r5, #4]
 802bc3c:	404b      	eors	r3, r1
 802bc3e:	9322      	str	r3, [sp, #136]	; 0x88
        if( ( ret = mbedtls_cipher_auth_decrypt( &transform->cipher_ctx_dec,
 802bc40:	f04f 0c0d 	mov.w	ip, #13
 802bc44:	f8cd b018 	str.w	fp, [sp, #24]
        memcpy( cur, rec->ctr, sizeof( rec->ctr ) );
 802bc48:	6838      	ldr	r0, [r7, #0]
        if( ( ret = mbedtls_cipher_auth_decrypt( &transform->cipher_ctx_dec,
 802bc4a:	e9cd 4a02 	strd	r4, sl, [sp, #8]
                  data + rec->data_len,
 802bc4e:	eb0a 0304 	add.w	r3, sl, r4
        if( ( ret = mbedtls_cipher_auth_decrypt( &transform->cipher_ctx_dec,
 802bc52:	9305      	str	r3, [sp, #20]
 802bc54:	f8cd a004 	str.w	sl, [sp, #4]
        memcpy( cur, rec->ctr, sizeof( rec->ctr ) );
 802bc58:	6879      	ldr	r1, [r7, #4]
 802bc5a:	ad28      	add	r5, sp, #160	; 0xa0
    *cur = rec->type;
 802bc5c:	f897 e008 	ldrb.w	lr, [r7, #8]
        if( ( ret = mbedtls_cipher_auth_decrypt( &transform->cipher_ctx_dec,
 802bc60:	464a      	mov	r2, r9
 802bc62:	462b      	mov	r3, r5
 802bc64:	f10d 0950 	add.w	r9, sp, #80	; 0x50
        memcpy( cur, rec->ctr, sizeof( rec->ctr ) );
 802bc68:	c503      	stmia	r5!, {r0, r1}
    memcpy( cur, rec->ver, sizeof( rec->ver ) );
 802bc6a:	f8b7 5009 	ldrh.w	r5, [r7, #9]
        if( ( ret = mbedtls_cipher_auth_decrypt( &transform->cipher_ctx_dec,
 802bc6e:	4631      	mov	r1, r6
 802bc70:	f108 008c 	add.w	r0, r8, #140	; 0x8c
        cur[0] = ( rec->data_len >> 8 ) & 0xFF;
 802bc74:	0a26      	lsrs	r6, r4, #8
        if( ( ret = mbedtls_cipher_auth_decrypt( &transform->cipher_ctx_dec,
 802bc76:	f8cd c000 	str.w	ip, [sp]
 802bc7a:	f8cd 9010 	str.w	r9, [sp, #16]
        cur[1] = ( rec->data_len >> 0 ) & 0xFF;
 802bc7e:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
        cur[0] = ( rec->data_len >> 8 ) & 0xFF;
 802bc82:	f88d 60ab 	strb.w	r6, [sp, #171]	; 0xab
    *cur = rec->type;
 802bc86:	f88d e0a8 	strb.w	lr, [sp, #168]	; 0xa8
    memcpy( cur, rec->ver, sizeof( rec->ver ) );
 802bc8a:	f8ad 50a9 	strh.w	r5, [sp, #169]	; 0xa9
        if( ( ret = mbedtls_cipher_auth_decrypt( &transform->cipher_ctx_dec,
 802bc8e:	f7f8 fb2d 	bl	80242ec <mbedtls_cipher_auth_decrypt>
 802bc92:	4604      	mov	r4, r0
 802bc94:	2800      	cmp	r0, #0
 802bc96:	f000 80cb 	beq.w	802be30 <mbedtls_ssl_decrypt_buf+0x30c>
            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
 802bc9a:	f510 4fc6 	cmn.w	r0, #25344	; 0x6300
 802bc9e:	d1c1      	bne.n	802bc24 <mbedtls_ssl_decrypt_buf+0x100>
 802bca0:	e7bf      	b.n	802bc22 <mbedtls_ssl_decrypt_buf+0xfe>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 802bca2:	4c6d      	ldr	r4, [pc, #436]	; (802be58 <mbedtls_ssl_decrypt_buf+0x334>)
}
 802bca4:	4620      	mov	r0, r4
 802bca6:	b035      	add	sp, #212	; 0xd4
 802bca8:	ecbd 8b02 	vpop	{d8}
 802bcac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( mode == MBEDTLS_MODE_CBC )
 802bcb0:	2b02      	cmp	r3, #2
 802bcb2:	d1f6      	bne.n	802bca2 <mbedtls_ssl_decrypt_buf+0x17e>
        if( transform->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 802bcb4:	f8d8 00cc 	ldr.w	r0, [r8, #204]	; 0xcc
 802bcb8:	2801      	cmp	r0, #1
 802bcba:	f340 80c5 	ble.w	802be48 <mbedtls_ssl_decrypt_buf+0x324>
            minlen += transform->ivlen;
 802bcbe:	f8d8 2004 	ldr.w	r2, [r8, #4]
 802bcc2:	4614      	mov	r4, r2
 802bcc4:	0053      	lsls	r3, r2, #1
        if( rec->data_len < minlen + transform->ivlen ||
 802bcc6:	4299      	cmp	r1, r3
 802bcc8:	d3ab      	bcc.n	802bc22 <mbedtls_ssl_decrypt_buf+0xfe>
            rec->data_len < minlen + transform->maclen + 1 )
 802bcca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802bcce:	3301      	adds	r3, #1
 802bcd0:	4413      	add	r3, r2
        if( rec->data_len < minlen + transform->ivlen ||
 802bcd2:	4299      	cmp	r1, r3
 802bcd4:	d3a5      	bcc.n	802bc22 <mbedtls_ssl_decrypt_buf+0xfe>
        if( rec->data_len % transform->ivlen != 0 )
 802bcd6:	fbb1 f3f4 	udiv	r3, r1, r4
 802bcda:	fb04 1313 	mls	r3, r4, r3, r1
 802bcde:	2b00      	cmp	r3, #0
 802bce0:	d19f      	bne.n	802bc22 <mbedtls_ssl_decrypt_buf+0xfe>
        if( transform->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 802bce2:	2801      	cmp	r0, #1
            memcpy( transform->iv_dec, data, transform->ivlen );
 802bce4:	f108 0324 	add.w	r3, r8, #36	; 0x24
        if( transform->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 802bce8:	dd0c      	ble.n	802bd04 <mbedtls_ssl_decrypt_buf+0x1e0>
            memcpy( transform->iv_dec, data, transform->ivlen );
 802bcea:	4629      	mov	r1, r5
 802bcec:	4618      	mov	r0, r3
 802bcee:	4622      	mov	r2, r4
 802bcf0:	f004 f892 	bl	802fe18 <memcpy>
            rec->data_len -= transform->ivlen;
 802bcf4:	e9d7 2105 	ldrd	r2, r1, [r7, #20]
            memcpy( transform->iv_dec, data, transform->ivlen );
 802bcf8:	4603      	mov	r3, r0
            rec->data_offset += transform->ivlen;
 802bcfa:	4422      	add	r2, r4
            rec->data_len -= transform->ivlen;
 802bcfc:	1b09      	subs	r1, r1, r4
 802bcfe:	e9c7 2105 	strd	r2, r1, [r7, #20]
            data += transform->ivlen;
 802bd02:	4425      	add	r5, r4
        if( ( ret = mbedtls_cipher_crypt( &transform->cipher_ctx_dec,
 802bd04:	a814      	add	r0, sp, #80	; 0x50
 802bd06:	4622      	mov	r2, r4
 802bd08:	e9cd 1500 	strd	r1, r5, [sp]
 802bd0c:	9002      	str	r0, [sp, #8]
 802bd0e:	4619      	mov	r1, r3
 802bd10:	f108 008c 	add.w	r0, r8, #140	; 0x8c
 802bd14:	462b      	mov	r3, r5
 802bd16:	f7f8 fa0d 	bl	8024134 <mbedtls_cipher_crypt>
 802bd1a:	4604      	mov	r4, r0
 802bd1c:	2800      	cmp	r0, #0
 802bd1e:	d181      	bne.n	802bc24 <mbedtls_ssl_decrypt_buf+0x100>
        if( rec->data_len != olen )
 802bd20:	69be      	ldr	r6, [r7, #24]
 802bd22:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802bd24:	429e      	cmp	r6, r3
 802bd26:	d1bc      	bne.n	802bca2 <mbedtls_ssl_decrypt_buf+0x17e>
                                transform->maclen + padlen + 1 );
 802bd28:	f8d8 e00c 	ldr.w	lr, [r8, #12]
        padlen = data[rec->data_len - 1];
 802bd2c:	19ab      	adds	r3, r5, r6
    const size_t sub = x - y;
 802bd2e:	ea6f 090e 	mvn.w	r9, lr
        padlen = data[rec->data_len - 1];
 802bd32:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    const size_t sub = x - y;
 802bd36:	44b1      	add	r9, r6
 802bd38:	eba9 0901 	sub.w	r9, r9, r1
        if( transform->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 802bd3c:	f8d8 30cc 	ldr.w	r3, [r8, #204]	; 0xcc
    const size_t sub1 = sub >> ( sizeof( sub ) * 8 - 1 );
 802bd40:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 802bd44:	f109 39ff 	add.w	r9, r9, #4294967295
            padlen  &= mask;
 802bd48:	ea01 0109 	and.w	r1, r1, r9
        if( transform->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 802bd4c:	2b00      	cmp	r3, #0
        padlen++;
 802bd4e:	f101 0c01 	add.w	ip, r1, #1
        if( transform->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 802bd52:	dda6      	ble.n	802bca2 <mbedtls_ssl_decrypt_buf+0x17e>
            size_t const num_checks = rec->data_len <= 256 ? rec->data_len : 256;
 802bd54:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 802bd58:	4632      	mov	r2, r6
 802bd5a:	bf28      	it	cs
 802bd5c:	f44f 7280 	movcs.w	r2, #256	; 0x100
            size_t const start_idx = rec->data_len - num_checks;
 802bd60:	1ab3      	subs	r3, r6, r2
            for( idx = start_idx; idx < rec->data_len; idx++ )
 802bd62:	429e      	cmp	r6, r3
 802bd64:	f240 81f4 	bls.w	802c150 <mbedtls_ssl_decrypt_buf+0x62c>
 802bd68:	eba6 040c 	sub.w	r4, r6, ip
 802bd6c:	ebac 0202 	sub.w	r2, ip, r2
 802bd70:	442c      	add	r4, r5
                const size_t equal = mbedtls_ssl_cf_bool_eq( check[idx],
 802bd72:	f814 a002 	ldrb.w	sl, [r4, r2]
    const size_t sub1 = sub >> ( sizeof( sub ) * 8 - 1 );
 802bd76:	0fd3      	lsrs	r3, r2, #31
                pad_count += mask & equal;
 802bd78:	3b01      	subs	r3, #1
 802bd7a:	458a      	cmp	sl, r1
 802bd7c:	bf14      	ite	ne
 802bd7e:	2300      	movne	r3, #0
 802bd80:	f003 0301 	andeq.w	r3, r3, #1
            for( idx = start_idx; idx < rec->data_len; idx++ )
 802bd84:	4291      	cmp	r1, r2
                pad_count += mask & equal;
 802bd86:	4418      	add	r0, r3
            for( idx = start_idx; idx < rec->data_len; idx++ )
 802bd88:	f102 0201 	add.w	r2, r2, #1
 802bd8c:	d1f1      	bne.n	802bd72 <mbedtls_ssl_decrypt_buf+0x24e>
 802bd8e:	ea8c 0000 	eor.w	r0, ip, r0
    return( 1 ^ diff1 );
 802bd92:	464a      	mov	r2, r9
    const size_t diff_msb = ( diff | -diff );
 802bd94:	4244      	negs	r4, r0
 802bd96:	4320      	orrs	r0, r4
 802bd98:	2800      	cmp	r0, #0
 802bd9a:	bfb4      	ite	lt
 802bd9c:	2200      	movlt	r2, #0
 802bd9e:	f002 0201 	andge.w	r2, r2, #1
 802bda2:	920a      	str	r2, [sp, #40]	; 0x28
    return -bit;
 802bda4:	4252      	negs	r2, r2
 802bda6:	eba6 040e 	sub.w	r4, r6, lr
        memcpy( cur, rec->ctr, sizeof( rec->ctr ) );
 802bdaa:	6879      	ldr	r1, [r7, #4]
 802bdac:	6838      	ldr	r0, [r7, #0]
            padlen &= mbedtls_ssl_cf_mask_from_bit( correct );
 802bdae:	ea02 060c 	and.w	r6, r2, ip
        rec->data_len -= transform->maclen;
 802bdb2:	1ba6      	subs	r6, r4, r6
    memcpy( cur, rec->ver, sizeof( rec->ver ) );
 802bdb4:	f8b7 2009 	ldrh.w	r2, [r7, #9]
        rec->data_len -= transform->maclen;
 802bdb8:	9409      	str	r4, [sp, #36]	; 0x24
        memcpy( cur, rec->ctr, sizeof( rec->ctr ) );
 802bdba:	ab28      	add	r3, sp, #160	; 0xa0
    *cur = rec->type;
 802bdbc:	7a3c      	ldrb	r4, [r7, #8]
        memcpy( cur, rec->ctr, sizeof( rec->ctr ) );
 802bdbe:	c303      	stmia	r3!, {r0, r1}
        cur[0] = ( rec->data_len >> 8 ) & 0xFF;
 802bdc0:	ea4f 2c16 	mov.w	ip, r6, lsr #8
    const mbedtls_md_type_t md_alg = mbedtls_md_get_type( ctx->md_info );
 802bdc4:	f8d8 0040 	ldr.w	r0, [r8, #64]	; 0x40
        rec->data_len -= transform->maclen;
 802bdc8:	61be      	str	r6, [r7, #24]
        cur[0] = ( rec->data_len >> 8 ) & 0xFF;
 802bdca:	f88d c0ab 	strb.w	ip, [sp, #171]	; 0xab
    memcpy( cur, rec->ver, sizeof( rec->ver ) );
 802bdce:	f8ad 20a9 	strh.w	r2, [sp, #169]	; 0xa9
    *cur = rec->type;
 802bdd2:	f88d 40a8 	strb.w	r4, [sp, #168]	; 0xa8
        cur[1] = ( rec->data_len >> 0 ) & 0xFF;
 802bdd6:	f88d 60ac 	strb.w	r6, [sp, #172]	; 0xac
    const mbedtls_md_type_t md_alg = mbedtls_md_get_type( ctx->md_info );
 802bdda:	f7fa fa2f 	bl	802623c <mbedtls_md_get_type>
 802bdde:	4603      	mov	r3, r0
    const size_t block_size = md_alg == MBEDTLS_MD_SHA384 ? 128 : 64;
 802bde0:	2b07      	cmp	r3, #7
 802bde2:	bf0c      	ite	eq
 802bde4:	2280      	moveq	r2, #128	; 0x80
 802bde6:	2240      	movne	r2, #64	; 0x40
 802bde8:	920c      	str	r2, [sp, #48]	; 0x30
    const unsigned char * const ikey = ctx->hmac_ctx;
 802bdea:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
    const size_t hash_size = mbedtls_md_get_size( ctx->md_info );
 802bdee:	f8d8 0040 	ldr.w	r0, [r8, #64]	; 0x40
    const unsigned char * const ikey = ctx->hmac_ctx;
 802bdf2:	920b      	str	r2, [sp, #44]	; 0x2c
    const size_t hash_size = mbedtls_md_get_size( ctx->md_info );
 802bdf4:	f7fa fa1e 	bl	8026234 <mbedtls_md_get_size>
 802bdf8:	4683      	mov	fp, r0
    mbedtls_md_init( &aux );
 802bdfa:	a815      	add	r0, sp, #84	; 0x54
 802bdfc:	f7f9 ff34 	bl	8025c68 <mbedtls_md_init>
    MD_CHK( mbedtls_md_setup( &aux, ctx->md_info, 0 ) );
 802be00:	2200      	movs	r2, #0
 802be02:	f8d8 1040 	ldr.w	r1, [r8, #64]	; 0x40
 802be06:	a815      	add	r0, sp, #84	; 0x54
 802be08:	f7f9 ff7e 	bl	8025d08 <mbedtls_md_setup>
 802be0c:	4604      	mov	r4, r0
 802be0e:	b958      	cbnz	r0, 802be28 <mbedtls_ssl_decrypt_buf+0x304>
            ret = mbedtls_ssl_cf_hmac( &transform->md_ctx_dec,
 802be10:	f108 0240 	add.w	r2, r8, #64	; 0x40
    MD_CHK( mbedtls_md_update( ctx, add_data, add_data_len ) );
 802be14:	4610      	mov	r0, r2
            ret = mbedtls_ssl_cf_hmac( &transform->md_ctx_dec,
 802be16:	ee08 2a10 	vmov	s16, r2
    MD_CHK( mbedtls_md_update( ctx, add_data, add_data_len ) );
 802be1a:	4692      	mov	sl, r2
 802be1c:	a928      	add	r1, sp, #160	; 0xa0
 802be1e:	220d      	movs	r2, #13
 802be20:	f7f9 ffc8 	bl	8025db4 <mbedtls_md_update>
 802be24:	4604      	mov	r4, r0
 802be26:	b1c8      	cbz	r0, 802be5c <mbedtls_ssl_decrypt_buf+0x338>
    mbedtls_md_free( &aux );
 802be28:	a815      	add	r0, sp, #84	; 0x54
 802be2a:	f7f9 ff23 	bl	8025c74 <mbedtls_md_free>
            if( ret != 0 )
 802be2e:	e6f9      	b.n	802bc24 <mbedtls_ssl_decrypt_buf+0x100>
        if( olen != rec->data_len )
 802be30:	69b9      	ldr	r1, [r7, #24]
 802be32:	9a14      	ldr	r2, [sp, #80]	; 0x50
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 802be34:	4b08      	ldr	r3, [pc, #32]	; (802be58 <mbedtls_ssl_decrypt_buf+0x334>)
 802be36:	4291      	cmp	r1, r2
 802be38:	bf18      	it	ne
 802be3a:	461c      	movne	r4, r3
}
 802be3c:	4620      	mov	r0, r4
 802be3e:	b035      	add	sp, #212	; 0xd4
 802be40:	ecbd 8b02 	vpop	{d8}
 802be44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802be48:	f8d8 4004 	ldr.w	r4, [r8, #4]
        size_t minlen = 0;
 802be4c:	2200      	movs	r2, #0
        if( transform->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 802be4e:	4623      	mov	r3, r4
 802be50:	e739      	b.n	802bcc6 <mbedtls_ssl_decrypt_buf+0x1a2>
 802be52:	bf00      	nop
 802be54:	ffff8e80 	.word	0xffff8e80
 802be58:	ffff9400 	.word	0xffff9400
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;
 802be5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    MD_CHK( mbedtls_md_update( ctx, data, min_data_len ) );
 802be5e:	ee18 0a10 	vmov	r0, s16
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;
 802be62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802be66:	bf38      	it	cc
 802be68:	f44f 7380 	movcc.w	r3, #256	; 0x100
 802be6c:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    MD_CHK( mbedtls_md_update( ctx, data, min_data_len ) );
 802be70:	460a      	mov	r2, r1
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;
 802be72:	9110      	str	r1, [sp, #64]	; 0x40
    MD_CHK( mbedtls_md_update( ctx, data, min_data_len ) );
 802be74:	4689      	mov	r9, r1
 802be76:	4629      	mov	r1, r5
 802be78:	f7f9 ff9c 	bl	8025db4 <mbedtls_md_update>
 802be7c:	4604      	mov	r4, r0
 802be7e:	2800      	cmp	r0, #0
 802be80:	d1d2      	bne.n	802be28 <mbedtls_ssl_decrypt_buf+0x304>
    for( offset = min_data_len; offset <= max_data_len; offset++ )
 802be82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802be84:	4599      	cmp	r9, r3
 802be86:	f200 8091 	bhi.w	802bfac <mbedtls_ssl_decrypt_buf+0x488>
 802be8a:	aa18      	add	r2, sp, #96	; 0x60
 802be8c:	f02b 0303 	bic.w	r3, fp, #3
 802be90:	18d3      	adds	r3, r2, r3
        MD_CHK( mbedtls_md_finish( &aux, aux_out ) );
 802be92:	960d      	str	r6, [sp, #52]	; 0x34
 802be94:	9511      	str	r5, [sp, #68]	; 0x44
 802be96:	9713      	str	r7, [sp, #76]	; 0x4c
 802be98:	461d      	mov	r5, r3
 802be9a:	465f      	mov	r7, fp
 802be9c:	4616      	mov	r6, r2
 802be9e:	f10b 31ff 	add.w	r1, fp, #4294967295
 802bea2:	910e      	str	r1, [sp, #56]	; 0x38
 802bea4:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 802bea8:	f02b 0103 	bic.w	r1, fp, #3
    for( offset = min_data_len; offset <= max_data_len; offset++ )
 802beac:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
        MD_CHK( mbedtls_md_finish( &aux, aux_out ) );
 802beb0:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 802beb4:	910f      	str	r1, [sp, #60]	; 0x3c
        MD_CHK( mbedtls_md_clone( &aux, ctx ) );
 802beb6:	4651      	mov	r1, sl
 802beb8:	a815      	add	r0, sp, #84	; 0x54
 802beba:	f7f9 ff03 	bl	8025cc4 <mbedtls_md_clone>
 802bebe:	2800      	cmp	r0, #0
 802bec0:	f040 8144 	bne.w	802c14c <mbedtls_ssl_decrypt_buf+0x628>
        MD_CHK( mbedtls_md_finish( &aux, aux_out ) );
 802bec4:	a920      	add	r1, sp, #128	; 0x80
 802bec6:	a815      	add	r0, sp, #84	; 0x54
 802bec8:	f7f9 ff88 	bl	8025ddc <mbedtls_md_finish>
 802becc:	2800      	cmp	r0, #0
 802bece:	f040 813d 	bne.w	802c14c <mbedtls_ssl_decrypt_buf+0x628>
    const size_t diff = x ^ y;
 802bed2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802bed4:	ea83 0309 	eor.w	r3, r3, r9
    const size_t diff_msb = ( diff | -diff );
 802bed8:	f1c3 0c00 	rsb	ip, r3, #0
 802bedc:	ea4c 0c03 	orr.w	ip, ip, r3
    return( 1 ^ diff1 );
 802bee0:	ea6f 0c0c 	mvn.w	ip, ip
 802bee4:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
    return -bit;
 802bee8:	f1cc 0e00 	rsb	lr, ip, #0
    const unsigned char mask = (unsigned char) mbedtls_ssl_cf_mask_from_bit( equal );
 802beec:	fa5f fe8e 	uxtb.w	lr, lr
    for( size_t i = 0; i < len; i++ )
 802bef0:	2f00      	cmp	r7, #0
 802bef2:	d050      	beq.n	802bf96 <mbedtls_ssl_decrypt_buf+0x472>
 802bef4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802bef6:	f10c 3cff 	add.w	ip, ip, #4294967295
 802befa:	2b02      	cmp	r3, #2
 802befc:	fa4f fc8c 	sxtb.w	ip, ip
 802bf00:	d920      	bls.n	802bf44 <mbedtls_ssl_decrypt_buf+0x420>
 802bf02:	4683      	mov	fp, r0
 802bf04:	4632      	mov	r2, r6
 802bf06:	f36e 0007 	bfi	r0, lr, #0, #8
 802bf0a:	f36c 0b07 	bfi	fp, ip, #0, #8
 802bf0e:	f36e 200f 	bfi	r0, lr, #8, #8
 802bf12:	f36c 2b0f 	bfi	fp, ip, #8, #8
 802bf16:	f36e 4017 	bfi	r0, lr, #16, #8
 802bf1a:	f36c 4b17 	bfi	fp, ip, #16, #8
 802bf1e:	ac20      	add	r4, sp, #128	; 0x80
 802bf20:	f36e 601f 	bfi	r0, lr, #24, #8
 802bf24:	f36c 6b1f 	bfi	fp, ip, #24, #8
        dst[i] = ( src[i] & mask ) | ( dst[i] & ~mask );
 802bf28:	6813      	ldr	r3, [r2, #0]
 802bf2a:	f854 1b04 	ldr.w	r1, [r4], #4
 802bf2e:	ea0b 0303 	and.w	r3, fp, r3
 802bf32:	4001      	ands	r1, r0
 802bf34:	430b      	orrs	r3, r1
 802bf36:	f842 3b04 	str.w	r3, [r2], #4
    for( size_t i = 0; i < len; i++ )
 802bf3a:	42aa      	cmp	r2, r5
 802bf3c:	d1f4      	bne.n	802bf28 <mbedtls_ssl_decrypt_buf+0x404>
 802bf3e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802bf40:	42b8      	cmp	r0, r7
 802bf42:	d028      	beq.n	802bf96 <mbedtls_ssl_decrypt_buf+0x472>
        dst[i] = ( src[i] & mask ) | ( dst[i] & ~mask );
 802bf44:	ab34      	add	r3, sp, #208	; 0xd0
 802bf46:	4403      	add	r3, r0
 802bf48:	5c32      	ldrb	r2, [r6, r0]
 802bf4a:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 802bf4e:	ea0c 0202 	and.w	r2, ip, r2
 802bf52:	ea0e 0303 	and.w	r3, lr, r3
 802bf56:	4313      	orrs	r3, r2
    for( size_t i = 0; i < len; i++ )
 802bf58:	1c42      	adds	r2, r0, #1
 802bf5a:	4297      	cmp	r7, r2
        dst[i] = ( src[i] & mask ) | ( dst[i] & ~mask );
 802bf5c:	5433      	strb	r3, [r6, r0]
    for( size_t i = 0; i < len; i++ )
 802bf5e:	d91a      	bls.n	802bf96 <mbedtls_ssl_decrypt_buf+0x472>
        dst[i] = ( src[i] & mask ) | ( dst[i] & ~mask );
 802bf60:	ab34      	add	r3, sp, #208	; 0xd0
 802bf62:	4413      	add	r3, r2
 802bf64:	5cb1      	ldrb	r1, [r6, r2]
 802bf66:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 802bf6a:	ea0c 0101 	and.w	r1, ip, r1
 802bf6e:	ea0e 0303 	and.w	r3, lr, r3
    for( size_t i = 0; i < len; i++ )
 802bf72:	3002      	adds	r0, #2
        dst[i] = ( src[i] & mask ) | ( dst[i] & ~mask );
 802bf74:	430b      	orrs	r3, r1
    for( size_t i = 0; i < len; i++ )
 802bf76:	4287      	cmp	r7, r0
        dst[i] = ( src[i] & mask ) | ( dst[i] & ~mask );
 802bf78:	54b3      	strb	r3, [r6, r2]
    for( size_t i = 0; i < len; i++ )
 802bf7a:	d90c      	bls.n	802bf96 <mbedtls_ssl_decrypt_buf+0x472>
        dst[i] = ( src[i] & mask ) | ( dst[i] & ~mask );
 802bf7c:	ab34      	add	r3, sp, #208	; 0xd0
 802bf7e:	4403      	add	r3, r0
 802bf80:	f813 2c50 	ldrb.w	r2, [r3, #-80]
 802bf84:	5c33      	ldrb	r3, [r6, r0]
 802bf86:	ea0e 0e02 	and.w	lr, lr, r2
 802bf8a:	ea0c 0c03 	and.w	ip, ip, r3
 802bf8e:	ea4e 0c0c 	orr.w	ip, lr, ip
 802bf92:	f806 c000 	strb.w	ip, [r6, r0]
        if( offset < max_data_len )
 802bf96:	45c8      	cmp	r8, r9
 802bf98:	f200 80ce 	bhi.w	802c138 <mbedtls_ssl_decrypt_buf+0x614>
    for( offset = min_data_len; offset <= max_data_len; offset++ )
 802bf9c:	f109 0901 	add.w	r9, r9, #1
 802bfa0:	45c1      	cmp	r9, r8
 802bfa2:	d988      	bls.n	802beb6 <mbedtls_ssl_decrypt_buf+0x392>
 802bfa4:	46bb      	mov	fp, r7
 802bfa6:	e9dd 5811 	ldrd	r5, r8, [sp, #68]	; 0x44
 802bfaa:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    MD_CHK( mbedtls_md_starts( ctx ) );
 802bfac:	ee18 0a10 	vmov	r0, s16
 802bfb0:	f7f9 fee6 	bl	8025d80 <mbedtls_md_starts>
 802bfb4:	4604      	mov	r4, r0
 802bfb6:	2800      	cmp	r0, #0
 802bfb8:	f47f af36 	bne.w	802be28 <mbedtls_ssl_decrypt_buf+0x304>
    MD_CHK( mbedtls_md_update( ctx, okey, block_size ) );
 802bfbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802bfbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802bfc0:	4619      	mov	r1, r3
 802bfc2:	ee18 0a10 	vmov	r0, s16
 802bfc6:	4411      	add	r1, r2
 802bfc8:	f7f9 fef4 	bl	8025db4 <mbedtls_md_update>
 802bfcc:	4604      	mov	r4, r0
 802bfce:	2800      	cmp	r0, #0
 802bfd0:	f47f af2a 	bne.w	802be28 <mbedtls_ssl_decrypt_buf+0x304>
    MD_CHK( mbedtls_md_update( ctx, output, hash_size ) );
 802bfd4:	ab18      	add	r3, sp, #96	; 0x60
 802bfd6:	465a      	mov	r2, fp
 802bfd8:	4619      	mov	r1, r3
 802bfda:	ee18 0a10 	vmov	r0, s16
 802bfde:	461e      	mov	r6, r3
 802bfe0:	9311      	str	r3, [sp, #68]	; 0x44
 802bfe2:	f7f9 fee7 	bl	8025db4 <mbedtls_md_update>
 802bfe6:	4604      	mov	r4, r0
 802bfe8:	2800      	cmp	r0, #0
 802bfea:	f47f af1d 	bne.w	802be28 <mbedtls_ssl_decrypt_buf+0x304>
    MD_CHK( mbedtls_md_finish( ctx, output ) );
 802bfee:	4631      	mov	r1, r6
 802bff0:	ee18 0a10 	vmov	r0, s16
 802bff4:	f7f9 fef2 	bl	8025ddc <mbedtls_md_finish>
 802bff8:	4604      	mov	r4, r0
 802bffa:	2800      	cmp	r0, #0
 802bffc:	f47f af14 	bne.w	802be28 <mbedtls_ssl_decrypt_buf+0x304>
    MD_CHK( mbedtls_md_hmac_reset( ctx ) );
 802c000:	ee18 0a10 	vmov	r0, s16
 802c004:	f7fa f8de 	bl	80261c4 <mbedtls_md_hmac_reset>
 802c008:	4604      	mov	r4, r0
    mbedtls_md_free( &aux );
 802c00a:	a815      	add	r0, sp, #84	; 0x54
 802c00c:	f7f9 fe32 	bl	8025c74 <mbedtls_md_free>
            if( ret != 0 )
 802c010:	2c00      	cmp	r4, #0
 802c012:	f47f ae07 	bne.w	802bc24 <mbedtls_ssl_decrypt_buf+0x100>
            mbedtls_ssl_cf_memcpy_offset( mac_peer, data,
 802c016:	69bb      	ldr	r3, [r7, #24]
    for( offset = offset_min; offset <= offset_max; offset++ )
 802c018:	9a09      	ldr	r2, [sp, #36]	; 0x24
            mbedtls_ssl_cf_memcpy_offset( mac_peer, data,
 802c01a:	930b      	str	r3, [sp, #44]	; 0x2c
    for( offset = offset_min; offset <= offset_max; offset++ )
 802c01c:	9b10      	ldr	r3, [sp, #64]	; 0x40
            mbedtls_ssl_cf_memcpy_offset( mac_peer, data,
 802c01e:	f8d8 b00c 	ldr.w	fp, [r8, #12]
    for( offset = offset_min; offset <= offset_max; offset++ )
 802c022:	4293      	cmp	r3, r2
 802c024:	f200 809b 	bhi.w	802c15e <mbedtls_ssl_decrypt_buf+0x63a>
 802c028:	f1bb 0f00 	cmp.w	fp, #0
 802c02c:	f000 809e 	beq.w	802c16c <mbedtls_ssl_decrypt_buf+0x648>
 802c030:	4698      	mov	r8, r3
 802c032:	f10b 33ff 	add.w	r3, fp, #4294967295
 802c036:	930c      	str	r3, [sp, #48]	; 0x30
 802c038:	f02b 0303 	bic.w	r3, fp, #3
 802c03c:	469a      	mov	sl, r3
 802c03e:	930e      	str	r3, [sp, #56]	; 0x38
 802c040:	ae20      	add	r6, sp, #128	; 0x80
 802c042:	950d      	str	r5, [sp, #52]	; 0x34
 802c044:	940f      	str	r4, [sp, #60]	; 0x3c
    const size_t diff = x ^ y;
 802c046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802c048:	ea83 0308 	eor.w	r3, r3, r8
    const size_t diff_msb = ( diff | -diff );
 802c04c:	425c      	negs	r4, r3
 802c04e:	431c      	orrs	r4, r3
    return( 1 ^ diff1 );
 802c050:	43e4      	mvns	r4, r4
 802c052:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802c054:	0fe4      	lsrs	r4, r4, #31
    return -bit;
 802c056:	f1c4 0c00 	rsb	ip, r4, #0
 802c05a:	2b02      	cmp	r3, #2
 802c05c:	f104 34ff 	add.w	r4, r4, #4294967295
    const unsigned char mask = (unsigned char) mbedtls_ssl_cf_mask_from_bit( equal );
 802c060:	fa5f fc8c 	uxtb.w	ip, ip
    for( size_t i = 0; i < len; i++ )
 802c064:	b264      	sxtb	r4, r4
 802c066:	d975      	bls.n	802c154 <mbedtls_ssl_decrypt_buf+0x630>
 802c068:	2700      	movs	r7, #0
 802c06a:	463d      	mov	r5, r7
 802c06c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    const unsigned char mask = (unsigned char) mbedtls_ssl_cf_mask_from_bit( equal );
 802c06e:	4631      	mov	r1, r6
 802c070:	eb03 0908 	add.w	r9, r3, r8
 802c074:	4648      	mov	r0, r9
 802c076:	f36c 0707 	bfi	r7, ip, #0, #8
 802c07a:	f364 0507 	bfi	r5, r4, #0, #8
 802c07e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802c080:	f36c 270f 	bfi	r7, ip, #8, #8
 802c084:	f364 250f 	bfi	r5, r4, #8, #8
 802c088:	f36c 4717 	bfi	r7, ip, #16, #8
 802c08c:	f364 4517 	bfi	r5, r4, #16, #8
 802c090:	f36c 671f 	bfi	r7, ip, #24, #8
 802c094:	f364 651f 	bfi	r5, r4, #24, #8
 802c098:	eb09 0e03 	add.w	lr, r9, r3
        dst[i] = ( src[i] & mask ) | ( dst[i] & ~mask );
 802c09c:	f850 3b04 	ldr.w	r3, [r0], #4
 802c0a0:	680a      	ldr	r2, [r1, #0]
 802c0a2:	403b      	ands	r3, r7
 802c0a4:	402a      	ands	r2, r5
 802c0a6:	4313      	orrs	r3, r2
 802c0a8:	4586      	cmp	lr, r0
 802c0aa:	f841 3b04 	str.w	r3, [r1], #4
    for( size_t i = 0; i < len; i++ )
 802c0ae:	d1f5      	bne.n	802c09c <mbedtls_ssl_decrypt_buf+0x578>
 802c0b0:	45d3      	cmp	fp, sl
 802c0b2:	d020      	beq.n	802c0f6 <mbedtls_ssl_decrypt_buf+0x5d2>
        dst[i] = ( src[i] & mask ) | ( dst[i] & ~mask );
 802c0b4:	4653      	mov	r3, sl
 802c0b6:	5cf2      	ldrb	r2, [r6, r3]
 802c0b8:	f819 1003 	ldrb.w	r1, [r9, r3]
 802c0bc:	4022      	ands	r2, r4
 802c0be:	ea0c 0101 	and.w	r1, ip, r1
 802c0c2:	430a      	orrs	r2, r1
    for( size_t i = 0; i < len; i++ )
 802c0c4:	1c59      	adds	r1, r3, #1
 802c0c6:	458b      	cmp	fp, r1
        dst[i] = ( src[i] & mask ) | ( dst[i] & ~mask );
 802c0c8:	54f2      	strb	r2, [r6, r3]
    for( size_t i = 0; i < len; i++ )
 802c0ca:	d914      	bls.n	802c0f6 <mbedtls_ssl_decrypt_buf+0x5d2>
        dst[i] = ( src[i] & mask ) | ( dst[i] & ~mask );
 802c0cc:	5c70      	ldrb	r0, [r6, r1]
 802c0ce:	f819 2001 	ldrb.w	r2, [r9, r1]
 802c0d2:	4020      	ands	r0, r4
 802c0d4:	ea0c 0202 	and.w	r2, ip, r2
    for( size_t i = 0; i < len; i++ )
 802c0d8:	3302      	adds	r3, #2
        dst[i] = ( src[i] & mask ) | ( dst[i] & ~mask );
 802c0da:	4302      	orrs	r2, r0
    for( size_t i = 0; i < len; i++ )
 802c0dc:	459b      	cmp	fp, r3
        dst[i] = ( src[i] & mask ) | ( dst[i] & ~mask );
 802c0de:	5472      	strb	r2, [r6, r1]
    for( size_t i = 0; i < len; i++ )
 802c0e0:	d909      	bls.n	802c0f6 <mbedtls_ssl_decrypt_buf+0x5d2>
        dst[i] = ( src[i] & mask ) | ( dst[i] & ~mask );
 802c0e2:	5cf1      	ldrb	r1, [r6, r3]
 802c0e4:	f819 2003 	ldrb.w	r2, [r9, r3]
 802c0e8:	400c      	ands	r4, r1
 802c0ea:	ea0c 0c02 	and.w	ip, ip, r2
 802c0ee:	ea4c 0c04 	orr.w	ip, ip, r4
 802c0f2:	f806 c003 	strb.w	ip, [r6, r3]
    for( offset = offset_min; offset <= offset_max; offset++ )
 802c0f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c0f8:	f108 0801 	add.w	r8, r8, #1
 802c0fc:	4598      	cmp	r8, r3
 802c0fe:	d9a2      	bls.n	802c046 <mbedtls_ssl_decrypt_buf+0x522>
static inline int mbedtls_ssl_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;
 802c100:	2300      	movs	r3, #0
 802c102:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802c104:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54

    for( i = 0; i < n; i++ )
 802c108:	9911      	ldr	r1, [sp, #68]	; 0x44
 802c10a:	44b3      	add	fp, r6
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
 802c10c:	f816 2b01 	ldrb.w	r2, [r6], #1
 802c110:	f811 0b01 	ldrb.w	r0, [r1], #1
        diff |= x ^ y;
 802c114:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 802c118:	4042      	eors	r2, r0
 802c11a:	4313      	orrs	r3, r2
    for( i = 0; i < n; i++ )
 802c11c:	45b3      	cmp	fp, r6
        diff |= x ^ y;
 802c11e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
    for( i = 0; i < n; i++ )
 802c122:	d1f3      	bne.n	802c10c <mbedtls_ssl_decrypt_buf+0x5e8>
    }

    return( diff );
 802c124:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
        if( mbedtls_ssl_safer_memcmp( mac_peer, mac_expect,
 802c128:	2b00      	cmp	r3, #0
 802c12a:	f47f ad7a 	bne.w	802bc22 <mbedtls_ssl_decrypt_buf+0xfe>
    if( correct == 0 )
 802c12e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802c130:	2b00      	cmp	r3, #0
 802c132:	f47f ad77 	bne.w	802bc24 <mbedtls_ssl_decrypt_buf+0x100>
 802c136:	e574      	b.n	802bc22 <mbedtls_ssl_decrypt_buf+0xfe>
            MD_CHK( mbedtls_md_update( ctx, data + offset, 1 ) );
 802c138:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802c13a:	2201      	movs	r2, #1
 802c13c:	4650      	mov	r0, sl
 802c13e:	eb03 0109 	add.w	r1, r3, r9
 802c142:	f7f9 fe37 	bl	8025db4 <mbedtls_md_update>
 802c146:	2800      	cmp	r0, #0
 802c148:	f43f af28 	beq.w	802bf9c <mbedtls_ssl_decrypt_buf+0x478>
 802c14c:	4604      	mov	r4, r0
 802c14e:	e66b      	b.n	802be28 <mbedtls_ssl_decrypt_buf+0x304>
            for( idx = start_idx; idx < rec->data_len; idx++ )
 802c150:	4660      	mov	r0, ip
 802c152:	e61e      	b.n	802bd92 <mbedtls_ssl_decrypt_buf+0x26e>
 802c154:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    for( size_t i = 0; i < len; i++ )
 802c156:	2300      	movs	r3, #0
 802c158:	eb02 0908 	add.w	r9, r2, r8
 802c15c:	e7ab      	b.n	802c0b6 <mbedtls_ssl_decrypt_buf+0x592>
    volatile unsigned char diff = 0;
 802c15e:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
    for( i = 0; i < n; i++ )
 802c162:	f1bb 0f00 	cmp.w	fp, #0
 802c166:	d0dd      	beq.n	802c124 <mbedtls_ssl_decrypt_buf+0x600>
 802c168:	ae20      	add	r6, sp, #128	; 0x80
 802c16a:	e7cd      	b.n	802c108 <mbedtls_ssl_decrypt_buf+0x5e4>
    volatile unsigned char diff = 0;
 802c16c:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
    for( i = 0; i < n; i++ )
 802c170:	e7d8      	b.n	802c124 <mbedtls_ssl_decrypt_buf+0x600>
 802c172:	bf00      	nop

0802c174 <mbedtls_ssl_fetch_input>:
 *
 * For DTLS, it is up to the caller to set ssl->next_record_offset when
 * they're done reading a record.
 */
int mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
{
 802c174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t in_buf_len = MBEDTLS_SSL_IN_BUFFER_LEN;
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
 802c176:	69c3      	ldr	r3, [r0, #28]
{
 802c178:	4604      	mov	r4, r0
 802c17a:	460e      	mov	r6, r1
    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
 802c17c:	2b00      	cmp	r3, #0
 802c17e:	d031      	beq.n	802c1e4 <mbedtls_ssl_fetch_input+0x70>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    }

    if( nb_want > in_buf_len - (size_t)( ssl->in_hdr - ssl->in_buf ) )
 802c180:	6e23      	ldr	r3, [r4, #96]	; 0x60
 802c182:	6da2      	ldr	r2, [r4, #88]	; 0x58
 802c184:	1a9b      	subs	r3, r3, r2
 802c186:	f5c3 4382 	rsb	r3, r3, #16640	; 0x4100
 802c18a:	333d      	adds	r3, #61	; 0x3d
 802c18c:	42b3      	cmp	r3, r6
 802c18e:	d32c      	bcc.n	802c1ea <mbedtls_ssl_fetch_input+0x76>
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                       ssl->in_left, nb_want ) );

        while( ssl->in_left < nb_want )
 802c190:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 802c192:	4286      	cmp	r6, r0
 802c194:	d811      	bhi.n	802c1ba <mbedtls_ssl_fetch_input+0x46>
 802c196:	e02a      	b.n	802c1ee <mbedtls_ssl_fetch_input+0x7a>
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
            else
            {
                if( ssl->f_recv_timeout != NULL )
                {
                    ret = ssl->f_recv_timeout( ssl->p_bio,
 802c198:	6823      	ldr	r3, [r4, #0]
 802c19a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 802c19c:	462a      	mov	r2, r5
 802c19e:	4401      	add	r1, r0
 802c1a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802c1a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802c1a4:	47b8      	blx	r7

            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                                        ssl->in_left, nb_want ) );
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );

            if( ret == 0 )
 802c1a6:	2800      	cmp	r0, #0
 802c1a8:	d01a      	beq.n	802c1e0 <mbedtls_ssl_fetch_input+0x6c>
                return( MBEDTLS_ERR_SSL_CONN_EOF );

            if( ret < 0 )
 802c1aa:	db1a      	blt.n	802c1e2 <mbedtls_ssl_fetch_input+0x6e>
                return( ret );

            if ( (size_t)ret > len || ( INT_MAX > SIZE_MAX && ret > (int)SIZE_MAX ) )
 802c1ac:	4285      	cmp	r5, r0
 802c1ae:	d320      	bcc.n	802c1f2 <mbedtls_ssl_fetch_input+0x7e>
                    ( "f_recv returned %d bytes but only %lu were requested",
                    ret, (unsigned long)len ) );
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            ssl->in_left += ret;
 802c1b0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 802c1b2:	4408      	add	r0, r1
        while( ssl->in_left < nb_want )
 802c1b4:	4286      	cmp	r6, r0
            ssl->in_left += ret;
 802c1b6:	67e0      	str	r0, [r4, #124]	; 0x7c
        while( ssl->in_left < nb_want )
 802c1b8:	d919      	bls.n	802c1ee <mbedtls_ssl_fetch_input+0x7a>
    if( ssl->f_get_timer == NULL )
 802c1ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
            len = nb_want - ssl->in_left;
 802c1bc:	1a35      	subs	r5, r6, r0
    if( ssl->f_get_timer == NULL )
 802c1be:	b123      	cbz	r3, 802c1ca <mbedtls_ssl_fetch_input+0x56>
    if( ssl->f_get_timer( ssl->p_timer ) == 2 )
 802c1c0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 802c1c2:	4798      	blx	r3
 802c1c4:	2802      	cmp	r0, #2
 802c1c6:	d016      	beq.n	802c1f6 <mbedtls_ssl_fetch_input+0x82>
 802c1c8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
                if( ssl->f_recv_timeout != NULL )
 802c1ca:	6a27      	ldr	r7, [r4, #32]
 802c1cc:	2f00      	cmp	r7, #0
 802c1ce:	d1e3      	bne.n	802c198 <mbedtls_ssl_fetch_input+0x24>
                    ret = ssl->f_recv( ssl->p_bio,
 802c1d0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 802c1d2:	462a      	mov	r2, r5
 802c1d4:	4401      	add	r1, r0
 802c1d6:	69e3      	ldr	r3, [r4, #28]
 802c1d8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802c1da:	4798      	blx	r3
            if( ret == 0 )
 802c1dc:	2800      	cmp	r0, #0
 802c1de:	d1e4      	bne.n	802c1aa <mbedtls_ssl_fetch_input+0x36>
                return( MBEDTLS_ERR_SSL_CONN_EOF );
 802c1e0:	4806      	ldr	r0, [pc, #24]	; (802c1fc <mbedtls_ssl_fetch_input+0x88>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );

    return( 0 );
}
 802c1e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
 802c1e4:	6a03      	ldr	r3, [r0, #32]
 802c1e6:	2b00      	cmp	r3, #0
 802c1e8:	d1ca      	bne.n	802c180 <mbedtls_ssl_fetch_input+0xc>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 802c1ea:	4805      	ldr	r0, [pc, #20]	; (802c200 <mbedtls_ssl_fetch_input+0x8c>)
}
 802c1ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return( 0 );
 802c1ee:	2000      	movs	r0, #0
}
 802c1f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 802c1f2:	4804      	ldr	r0, [pc, #16]	; (802c204 <mbedtls_ssl_fetch_input+0x90>)
}
 802c1f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
 802c1f6:	4804      	ldr	r0, [pc, #16]	; (802c208 <mbedtls_ssl_fetch_input+0x94>)
}
 802c1f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802c1fa:	bf00      	nop
 802c1fc:	ffff8d80 	.word	0xffff8d80
 802c200:	ffff8f00 	.word	0xffff8f00
 802c204:	ffff9400 	.word	0xffff9400
 802c208:	ffff9800 	.word	0xffff9800

0802c20c <mbedtls_ssl_flush_output>:

/*
 * Flush any data not yet written
 */
int mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl )
{
 802c20c:	b538      	push	{r3, r4, r5, lr}
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    unsigned char *buf;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );

    if( ssl->f_send == NULL )
 802c20e:	6983      	ldr	r3, [r0, #24]
 802c210:	b3a3      	cbz	r3, 802c27c <mbedtls_ssl_flush_output+0x70>
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    }

    /* Avoid incrementing counter if data is flushed */
    if( ssl->out_left == 0 )
 802c212:	f8d0 20ac 	ldr.w	r2, [r0, #172]	; 0xac
 802c216:	4604      	mov	r4, r0
 802c218:	b952      	cbnz	r2, 802c230 <mbedtls_ssl_flush_output+0x24>
 802c21a:	e02b      	b.n	802c274 <mbedtls_ssl_flush_output+0x68>
        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );

        if( ret <= 0 )
            return( ret );

        if( (size_t)ret > ssl->out_left || ( INT_MAX > SIZE_MAX && ret > (int)SIZE_MAX ) )
 802c21c:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 802c220:	4282      	cmp	r2, r0
                ( "f_send returned %d bytes but only %lu bytes were sent",
                ret, (unsigned long)ssl->out_left ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_left -= ret;
 802c222:	eba2 0200 	sub.w	r2, r2, r0
        if( (size_t)ret > ssl->out_left || ( INT_MAX > SIZE_MAX && ret > (int)SIZE_MAX ) )
 802c226:	d327      	bcc.n	802c278 <mbedtls_ssl_flush_output+0x6c>
        ssl->out_left -= ret;
 802c228:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
    while( ssl->out_left > 0 )
 802c22c:	b142      	cbz	r2, 802c240 <mbedtls_ssl_flush_output+0x34>
 802c22e:	69a3      	ldr	r3, [r4, #24]
        buf = ssl->out_hdr - ssl->out_left;
 802c230:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
 802c234:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802c236:	1a89      	subs	r1, r1, r2
 802c238:	4798      	blx	r3
        if( ret <= 0 )
 802c23a:	2800      	cmp	r0, #0
 802c23c:	dcee      	bgt.n	802c21c <mbedtls_ssl_flush_output+0x10>
    mbedtls_ssl_update_out_pointers( ssl, ssl->transform_out );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );

    return( 0 );
}
 802c23e:	bd38      	pop	{r3, r4, r5, pc}
        ssl->out_hdr = ssl->out_buf + 8;
 802c240:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    mbedtls_ssl_update_out_pointers( ssl, ssl->transform_out );
 802c244:	6c21      	ldr	r1, [r4, #64]	; 0x40
        ssl->out_ctr = ssl->out_hdr - 8;
        ssl->out_len = ssl->out_hdr + 3;
#if defined(MBEDTLS_SSL_DTLS_CONNECTION_ID)
        ssl->out_cid = ssl->out_len;
#endif
        ssl->out_iv  = ssl->out_hdr + 5;
 802c246:	f103 020d 	add.w	r2, r3, #13
        ssl->out_hdr = ssl->out_buf + 8;
 802c24a:	f103 0508 	add.w	r5, r3, #8
        ssl->out_len = ssl->out_hdr + 3;
 802c24e:	f103 000b 	add.w	r0, r3, #11
        ssl->out_hdr = ssl->out_buf + 8;
 802c252:	e9c4 3524 	strd	r3, r5, [r4, #144]	; 0x90
        ssl->out_iv  = ssl->out_hdr + 5;
 802c256:	e9c4 0226 	strd	r0, r2, [r4, #152]	; 0x98
    }

    ssl->out_msg = ssl->out_iv;
 802c25a:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
    /* Adjust out_msg to make space for explicit IV, if used. */
    if( transform != NULL )
 802c25e:	b149      	cbz	r1, 802c274 <mbedtls_ssl_flush_output+0x68>
    if( transform->minor_ver < MBEDTLS_SSL_MINOR_VERSION_2 )
 802c260:	f8d1 30cc 	ldr.w	r3, [r1, #204]	; 0xcc
 802c264:	2b01      	cmp	r3, #1
 802c266:	dd03      	ble.n	802c270 <mbedtls_ssl_flush_output+0x64>
    return( transform->ivlen - transform->fixed_ivlen );
 802c268:	e9d1 3101 	ldrd	r3, r1, [r1, #4]
 802c26c:	1a5b      	subs	r3, r3, r1
 802c26e:	441a      	add	r2, r3
        ssl->out_msg += ssl_transform_get_explicit_iv_len( transform );
 802c270:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
 802c274:	2000      	movs	r0, #0
}
 802c276:	bd38      	pop	{r3, r4, r5, pc}
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 802c278:	4801      	ldr	r0, [pc, #4]	; (802c280 <mbedtls_ssl_flush_output+0x74>)
}
 802c27a:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 802c27c:	4801      	ldr	r0, [pc, #4]	; (802c284 <mbedtls_ssl_flush_output+0x78>)
}
 802c27e:	bd38      	pop	{r3, r4, r5, pc}
 802c280:	ffff9400 	.word	0xffff9400
 802c284:	ffff8f00 	.word	0xffff8f00

0802c288 <mbedtls_ssl_write_handshake_msg>:
{
 802c288:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( ssl->out_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE          &&
 802c28a:	e9d0 1328 	ldrd	r1, r3, [r0, #160]	; 0xa0
    const size_t hs_len = ssl->out_msglen - 4;
 802c28e:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
    if( ssl->out_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE          &&
 802c292:	2b16      	cmp	r3, #22
{
 802c294:	4604      	mov	r4, r0
    const unsigned char hs_type = ssl->out_msg[0];
 802c296:	780e      	ldrb	r6, [r1, #0]
{
 802c298:	b08b      	sub	sp, #44	; 0x2c
    const size_t hs_len = ssl->out_msglen - 4;
 802c29a:	f1a2 0004 	sub.w	r0, r2, #4
    if( ssl->out_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE          &&
 802c29e:	f000 80cc 	beq.w	802c43a <mbedtls_ssl_write_handshake_msg+0x1b2>
 802c2a2:	2b14      	cmp	r3, #20
 802c2a4:	f040 80f1 	bne.w	802c48a <mbedtls_ssl_write_handshake_msg+0x202>
            hs_type          == MBEDTLS_SSL_HS_HELLO_REQUEST ) &&
 802c2a8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 802c2aa:	2d00      	cmp	r5, #0
 802c2ac:	f000 80ed 	beq.w	802c48a <mbedtls_ssl_write_handshake_msg+0x202>
    if( ssl->out_msglen > MBEDTLS_SSL_OUT_CONTENT_LEN )
 802c2b0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 802c2b4:	f200 80e9 	bhi.w	802c48a <mbedtls_ssl_write_handshake_msg+0x202>
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 802c2b8:	2b16      	cmp	r3, #22
 802c2ba:	f000 80d0 	beq.w	802c45e <mbedtls_ssl_write_handshake_msg+0x1d6>
        memcpy( ssl->out_ctr, ssl->cur_out_ctr, 8 );
 802c2be:	4623      	mov	r3, r4
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 802c2c0:	68e5      	ldr	r5, [r4, #12]
                           ssl->conf->transport, ssl->out_hdr + 1 );
 802c2c2:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 802c2c6:	68a0      	ldr	r0, [r4, #8]
        ver[1] = (unsigned char) minor;
 802c2c8:	708d      	strb	r5, [r1, #2]
        ver[0] = (unsigned char) major;
 802c2ca:	7048      	strb	r0, [r1, #1]
        memcpy( ssl->out_ctr, ssl->cur_out_ctr, 8 );
 802c2cc:	f853 0fb0 	ldr.w	r0, [r3, #176]!
 802c2d0:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 802c2d4:	685b      	ldr	r3, [r3, #4]
 802c2d6:	6008      	str	r0, [r1, #0]
 802c2d8:	604b      	str	r3, [r1, #4]
        ssl->out_len[0] = (unsigned char)( len >> 8 );
 802c2da:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 802c2de:	0a11      	lsrs	r1, r2, #8
 802c2e0:	7019      	strb	r1, [r3, #0]
        ssl->out_len[1] = (unsigned char)( len      );
 802c2e2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 802c2e6:	705a      	strb	r2, [r3, #1]
        if( ssl->transform_out != NULL )
 802c2e8:	6c25      	ldr	r5, [r4, #64]	; 0x40
 802c2ea:	2d00      	cmp	r5, #0
 802c2ec:	d03c      	beq.n	802c368 <mbedtls_ssl_write_handshake_msg+0xe0>
            rec.buf         = ssl->out_iv;
 802c2ee:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
            rec.buf_len     = out_buf_len - ( ssl->out_iv - ssl->out_buf );
 802c2f2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
            rec.data_offset = ssl->out_msg - rec.buf;
 802c2f6:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
            rec.buf_len     = out_buf_len - ( ssl->out_iv - ssl->out_buf );
 802c2fa:	1ac3      	subs	r3, r0, r3
 802c2fc:	f5c3 4382 	rsb	r3, r3, #16640	; 0x4100
            rec.data_offset = ssl->out_msg - rec.buf;
 802c300:	1a09      	subs	r1, r1, r0
            rec.buf         = ssl->out_iv;
 802c302:	9006      	str	r0, [sp, #24]
            rec.buf_len     = out_buf_len - ( ssl->out_iv - ssl->out_buf );
 802c304:	333d      	adds	r3, #61	; 0x3d
            rec.data_len    = ssl->out_msglen;
 802c306:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
            rec.buf_len     = out_buf_len - ( ssl->out_iv - ssl->out_buf );
 802c30a:	9307      	str	r3, [sp, #28]
            memcpy( &rec.ctr[0], ssl->out_ctr, 8 );
 802c30c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
            rec.data_offset = ssl->out_msg - rec.buf;
 802c310:	9108      	str	r1, [sp, #32]
            rec.data_len    = ssl->out_msglen;
 802c312:	9009      	str	r0, [sp, #36]	; 0x24
            memcpy( &rec.ctr[0], ssl->out_ctr, 8 );
 802c314:	6818      	ldr	r0, [r3, #0]
 802c316:	6859      	ldr	r1, [r3, #4]
                                       ssl->conf->transport, rec.ver );
 802c318:	6826      	ldr	r6, [r4, #0]
            memcpy( &rec.ctr[0], ssl->out_ctr, 8 );
 802c31a:	aa03      	add	r2, sp, #12
 802c31c:	c203      	stmia	r2!, {r0, r1}
            if( ( ret = mbedtls_ssl_encrypt_buf( ssl, ssl->transform_out, &rec,
 802c31e:	e9d6 3706 	ldrd	r3, r7, [r6, #24]
        ver[0] = (unsigned char) major;
 802c322:	e9d4 6002 	ldrd	r6, r0, [r4, #8]
            if( ( ret = mbedtls_ssl_encrypt_buf( ssl, ssl->transform_out, &rec,
 802c326:	9700      	str	r7, [sp, #0]
 802c328:	4629      	mov	r1, r5
            rec.type = ssl->out_msgtype;
 802c32a:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
        ver[1] = (unsigned char) minor;
 802c32e:	f88d 0016 	strb.w	r0, [sp, #22]
            if( ( ret = mbedtls_ssl_encrypt_buf( ssl, ssl->transform_out, &rec,
 802c332:	aa03      	add	r2, sp, #12
 802c334:	4620      	mov	r0, r4
        ver[0] = (unsigned char) major;
 802c336:	f88d 6015 	strb.w	r6, [sp, #21]
            rec.type = ssl->out_msgtype;
 802c33a:	f88d 5014 	strb.w	r5, [sp, #20]
            if( ( ret = mbedtls_ssl_encrypt_buf( ssl, ssl->transform_out, &rec,
 802c33e:	f7ff faa9 	bl	802b894 <mbedtls_ssl_encrypt_buf>
 802c342:	2800      	cmp	r0, #0
 802c344:	d172      	bne.n	802c42c <mbedtls_ssl_write_handshake_msg+0x1a4>
            if( rec.data_offset != 0 )
 802c346:	9b08      	ldr	r3, [sp, #32]
 802c348:	2b00      	cmp	r3, #0
 802c34a:	f040 809e 	bne.w	802c48a <mbedtls_ssl_write_handshake_msg+0x202>
            ssl->out_msglen = len = rec.data_len;
 802c34e:	9a09      	ldr	r2, [sp, #36]	; 0x24
            ssl->out_msgtype = rec.type;
 802c350:	f89d 0014 	ldrb.w	r0, [sp, #20]
            ssl->out_len[0] = (unsigned char)( rec.data_len >> 8 );
 802c354:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 802c358:	0a11      	lsrs	r1, r2, #8
            ssl->out_msgtype = rec.type;
 802c35a:	e9c4 0229 	strd	r0, r2, [r4, #164]	; 0xa4
            ssl->out_len[0] = (unsigned char)( rec.data_len >> 8 );
 802c35e:	7019      	strb	r1, [r3, #0]
            ssl->out_len[1] = (unsigned char)( rec.data_len      );
 802c360:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 802c364:	9909      	ldr	r1, [sp, #36]	; 0x24
 802c366:	7059      	strb	r1, [r3, #1]
        protected_record_size = len + mbedtls_ssl_out_hdr_len( ssl );
 802c368:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
 802c36c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return( (size_t) ( ssl->out_iv - ssl->out_hdr ) );
 802c370:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 802c374:	7018      	strb	r0, [r3, #0]
 802c376:	1ac9      	subs	r1, r1, r3
        ssl->out_hdr  += protected_record_size;
 802c378:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        protected_record_size = len + mbedtls_ssl_out_hdr_len( ssl );
 802c37c:	440a      	add	r2, r1
        ssl->out_left += protected_record_size;
 802c37e:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
        ssl->out_hdr  += protected_record_size;
 802c382:	4413      	add	r3, r2
        mbedtls_ssl_update_out_pointers( ssl, ssl->transform_out );
 802c384:	6c20      	ldr	r0, [r4, #64]	; 0x40
        ssl->out_left += protected_record_size;
 802c386:	440a      	add	r2, r1
        ssl->out_ctr = ssl->out_hdr - 8;
 802c388:	f1a3 0508 	sub.w	r5, r3, #8
        ssl->out_len = ssl->out_hdr + 3;
 802c38c:	1cd9      	adds	r1, r3, #3
        ssl->out_hdr  += protected_record_size;
 802c38e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        ssl->out_iv  = ssl->out_hdr + 5;
 802c392:	3305      	adds	r3, #5
 802c394:	e9c4 1326 	strd	r1, r3, [r4, #152]	; 0x98
        ssl->out_left += protected_record_size;
 802c398:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
        ssl->out_ctr = ssl->out_hdr - 8;
 802c39c:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
    ssl->out_msg = ssl->out_iv;
 802c3a0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    if( transform != NULL )
 802c3a4:	b148      	cbz	r0, 802c3ba <mbedtls_ssl_write_handshake_msg+0x132>
    if( transform->minor_ver < MBEDTLS_SSL_MINOR_VERSION_2 )
 802c3a6:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
 802c3aa:	2a01      	cmp	r2, #1
 802c3ac:	dd03      	ble.n	802c3b6 <mbedtls_ssl_write_handshake_msg+0x12e>
    return( transform->ivlen - transform->fixed_ivlen );
 802c3ae:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 802c3b2:	1a52      	subs	r2, r2, r1
 802c3b4:	4413      	add	r3, r2
        ssl->out_msg += ssl_transform_get_explicit_iv_len( transform );
 802c3b6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            if( ++ssl->cur_out_ctr[i - 1] != 0 )
 802c3ba:	f894 30b7 	ldrb.w	r3, [r4, #183]	; 0xb7
 802c3be:	3301      	adds	r3, #1
 802c3c0:	b2db      	uxtb	r3, r3
 802c3c2:	f884 30b7 	strb.w	r3, [r4, #183]	; 0xb7
 802c3c6:	bb9b      	cbnz	r3, 802c430 <mbedtls_ssl_write_handshake_msg+0x1a8>
 802c3c8:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
 802c3cc:	3301      	adds	r3, #1
 802c3ce:	b2db      	uxtb	r3, r3
 802c3d0:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
 802c3d4:	bb63      	cbnz	r3, 802c430 <mbedtls_ssl_write_handshake_msg+0x1a8>
 802c3d6:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
 802c3da:	3301      	adds	r3, #1
 802c3dc:	b2db      	uxtb	r3, r3
 802c3de:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
 802c3e2:	bb2b      	cbnz	r3, 802c430 <mbedtls_ssl_write_handshake_msg+0x1a8>
 802c3e4:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 802c3e8:	3301      	adds	r3, #1
 802c3ea:	b2db      	uxtb	r3, r3
 802c3ec:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 802c3f0:	b9f3      	cbnz	r3, 802c430 <mbedtls_ssl_write_handshake_msg+0x1a8>
 802c3f2:	f894 30b3 	ldrb.w	r3, [r4, #179]	; 0xb3
 802c3f6:	3301      	adds	r3, #1
 802c3f8:	b2db      	uxtb	r3, r3
 802c3fa:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
 802c3fe:	b9bb      	cbnz	r3, 802c430 <mbedtls_ssl_write_handshake_msg+0x1a8>
 802c400:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
 802c404:	3301      	adds	r3, #1
 802c406:	b2db      	uxtb	r3, r3
 802c408:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
 802c40c:	b983      	cbnz	r3, 802c430 <mbedtls_ssl_write_handshake_msg+0x1a8>
 802c40e:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 802c412:	3301      	adds	r3, #1
 802c414:	b2db      	uxtb	r3, r3
 802c416:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 802c41a:	b94b      	cbnz	r3, 802c430 <mbedtls_ssl_write_handshake_msg+0x1a8>
 802c41c:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 802c420:	3301      	adds	r3, #1
 802c422:	b2db      	uxtb	r3, r3
 802c424:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
 802c428:	b913      	cbnz	r3, 802c430 <mbedtls_ssl_write_handshake_msg+0x1a8>
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 802c42a:	4819      	ldr	r0, [pc, #100]	; (802c490 <mbedtls_ssl_write_handshake_msg+0x208>)
}
 802c42c:	b00b      	add	sp, #44	; 0x2c
 802c42e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 802c430:	4620      	mov	r0, r4
 802c432:	f7ff feeb 	bl	802c20c <mbedtls_ssl_flush_output>
}
 802c436:	b00b      	add	sp, #44	; 0x2c
 802c438:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ! ( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&
 802c43a:	2e00      	cmp	r6, #0
 802c43c:	f47f af34 	bne.w	802c2a8 <mbedtls_ssl_write_handshake_msg+0x20>
    if( ssl->out_msglen > MBEDTLS_SSL_OUT_CONTENT_LEN )
 802c440:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 802c444:	d821      	bhi.n	802c48a <mbedtls_ssl_write_handshake_msg+0x202>
        ssl->out_msg[1] = (unsigned char)( hs_len >> 16 );
 802c446:	0c03      	lsrs	r3, r0, #16
 802c448:	704b      	strb	r3, [r1, #1]
        ssl->out_msg[2] = (unsigned char)( hs_len >>  8 );
 802c44a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 802c44e:	0a02      	lsrs	r2, r0, #8
 802c450:	709a      	strb	r2, [r3, #2]
        ssl->out_msg[3] = (unsigned char)( hs_len       );
 802c452:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 802c456:	70d8      	strb	r0, [r3, #3]
        if( hs_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
 802c458:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 802c45c:	e72f      	b.n	802c2be <mbedtls_ssl_write_handshake_msg+0x36>
        ssl->out_msg[1] = (unsigned char)( hs_len >> 16 );
 802c45e:	0c03      	lsrs	r3, r0, #16
 802c460:	704b      	strb	r3, [r1, #1]
        ssl->out_msg[2] = (unsigned char)( hs_len >>  8 );
 802c462:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 802c466:	0a02      	lsrs	r2, r0, #8
 802c468:	709a      	strb	r2, [r3, #2]
        ssl->out_msg[3] = (unsigned char)( hs_len       );
 802c46a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 802c46e:	70d8      	strb	r0, [r3, #3]
        if( hs_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
 802c470:	b146      	cbz	r6, 802c484 <mbedtls_ssl_write_handshake_msg+0x1fc>
            ssl->handshake->update_checksum( ssl, ssl->out_msg, ssl->out_msglen );
 802c472:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802c474:	4620      	mov	r0, r4
 802c476:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 802c47a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802c47e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 802c482:	4798      	blx	r3
 802c484:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 802c488:	e719      	b.n	802c2be <mbedtls_ssl_write_handshake_msg+0x36>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 802c48a:	4802      	ldr	r0, [pc, #8]	; (802c494 <mbedtls_ssl_write_handshake_msg+0x20c>)
}
 802c48c:	b00b      	add	sp, #44	; 0x2c
 802c48e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802c490:	ffff9480 	.word	0xffff9480
 802c494:	ffff9400 	.word	0xffff9400

0802c498 <mbedtls_ssl_write_record>:
        memcpy( ssl->out_ctr, ssl->cur_out_ctr, 8 );
 802c498:	4603      	mov	r3, r0
{
 802c49a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802c49c:	4604      	mov	r4, r0
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 802c49e:	68c6      	ldr	r6, [r0, #12]
                           ssl->conf->transport, ssl->out_hdr + 1 );
 802c4a0:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
        ver[0] = (unsigned char) major;
 802c4a4:	6885      	ldr	r5, [r0, #8]
    size_t len = ssl->out_msglen;
 802c4a6:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
        ver[1] = (unsigned char) minor;
 802c4aa:	7096      	strb	r6, [r2, #2]
        ver[0] = (unsigned char) major;
 802c4ac:	7055      	strb	r5, [r2, #1]
        memcpy( ssl->out_ctr, ssl->cur_out_ctr, 8 );
 802c4ae:	f853 5fb0 	ldr.w	r5, [r3, #176]!
 802c4b2:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 802c4b6:	685b      	ldr	r3, [r3, #4]
 802c4b8:	6015      	str	r5, [r2, #0]
 802c4ba:	6053      	str	r3, [r2, #4]
        ssl->out_len[0] = (unsigned char)( len >> 8 );
 802c4bc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 802c4c0:	0a02      	lsrs	r2, r0, #8
 802c4c2:	701a      	strb	r2, [r3, #0]
        ssl->out_len[1] = (unsigned char)( len      );
 802c4c4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
{
 802c4c8:	460d      	mov	r5, r1
        ssl->out_len[1] = (unsigned char)( len      );
 802c4ca:	7058      	strb	r0, [r3, #1]
        if( ssl->transform_out != NULL )
 802c4cc:	6c26      	ldr	r6, [r4, #64]	; 0x40
{
 802c4ce:	b08b      	sub	sp, #44	; 0x2c
        if( ssl->transform_out != NULL )
 802c4d0:	2e00      	cmp	r6, #0
 802c4d2:	d03c      	beq.n	802c54e <mbedtls_ssl_write_record+0xb6>
            rec.buf         = ssl->out_iv;
 802c4d4:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
            rec.buf_len     = out_buf_len - ( ssl->out_iv - ssl->out_buf );
 802c4d8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
            rec.data_offset = ssl->out_msg - rec.buf;
 802c4dc:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
            rec.buf_len     = out_buf_len - ( ssl->out_iv - ssl->out_buf );
 802c4e0:	1ac3      	subs	r3, r0, r3
 802c4e2:	f5c3 4382 	rsb	r3, r3, #16640	; 0x4100
            rec.data_offset = ssl->out_msg - rec.buf;
 802c4e6:	1a09      	subs	r1, r1, r0
            rec.buf         = ssl->out_iv;
 802c4e8:	9006      	str	r0, [sp, #24]
            rec.buf_len     = out_buf_len - ( ssl->out_iv - ssl->out_buf );
 802c4ea:	333d      	adds	r3, #61	; 0x3d
            rec.data_len    = ssl->out_msglen;
 802c4ec:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
            rec.buf_len     = out_buf_len - ( ssl->out_iv - ssl->out_buf );
 802c4f0:	9307      	str	r3, [sp, #28]
            memcpy( &rec.ctr[0], ssl->out_ctr, 8 );
 802c4f2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
            rec.data_offset = ssl->out_msg - rec.buf;
 802c4f6:	9108      	str	r1, [sp, #32]
            rec.data_len    = ssl->out_msglen;
 802c4f8:	9009      	str	r0, [sp, #36]	; 0x24
            memcpy( &rec.ctr[0], ssl->out_ctr, 8 );
 802c4fa:	6818      	ldr	r0, [r3, #0]
 802c4fc:	6859      	ldr	r1, [r3, #4]
                                       ssl->conf->transport, rec.ver );
 802c4fe:	6827      	ldr	r7, [r4, #0]
            memcpy( &rec.ctr[0], ssl->out_ctr, 8 );
 802c500:	aa03      	add	r2, sp, #12
 802c502:	c203      	stmia	r2!, {r0, r1}
            if( ( ret = mbedtls_ssl_encrypt_buf( ssl, ssl->transform_out, &rec,
 802c504:	e9d7 3c06 	ldrd	r3, ip, [r7, #24]
        ver[0] = (unsigned char) major;
 802c508:	e9d4 7002 	ldrd	r7, r0, [r4, #8]
            if( ( ret = mbedtls_ssl_encrypt_buf( ssl, ssl->transform_out, &rec,
 802c50c:	f8cd c000 	str.w	ip, [sp]
 802c510:	4631      	mov	r1, r6
            rec.type = ssl->out_msgtype;
 802c512:	f8d4 60a4 	ldr.w	r6, [r4, #164]	; 0xa4
        ver[1] = (unsigned char) minor;
 802c516:	f88d 0016 	strb.w	r0, [sp, #22]
            if( ( ret = mbedtls_ssl_encrypt_buf( ssl, ssl->transform_out, &rec,
 802c51a:	aa03      	add	r2, sp, #12
 802c51c:	4620      	mov	r0, r4
        ver[0] = (unsigned char) major;
 802c51e:	f88d 7015 	strb.w	r7, [sp, #21]
            rec.type = ssl->out_msgtype;
 802c522:	f88d 6014 	strb.w	r6, [sp, #20]
            if( ( ret = mbedtls_ssl_encrypt_buf( ssl, ssl->transform_out, &rec,
 802c526:	f7ff f9b5 	bl	802b894 <mbedtls_ssl_encrypt_buf>
 802c52a:	2800      	cmp	r0, #0
 802c52c:	d171      	bne.n	802c612 <mbedtls_ssl_write_record+0x17a>
            if( rec.data_offset != 0 )
 802c52e:	9b08      	ldr	r3, [sp, #32]
 802c530:	2b00      	cmp	r3, #0
 802c532:	d17a      	bne.n	802c62a <mbedtls_ssl_write_record+0x192>
            ssl->out_msglen = len = rec.data_len;
 802c534:	9809      	ldr	r0, [sp, #36]	; 0x24
            ssl->out_msgtype = rec.type;
 802c536:	f89d 1014 	ldrb.w	r1, [sp, #20]
            ssl->out_len[0] = (unsigned char)( rec.data_len >> 8 );
 802c53a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 802c53e:	0a02      	lsrs	r2, r0, #8
            ssl->out_msgtype = rec.type;
 802c540:	e9c4 1029 	strd	r1, r0, [r4, #164]	; 0xa4
            ssl->out_len[0] = (unsigned char)( rec.data_len >> 8 );
 802c544:	701a      	strb	r2, [r3, #0]
            ssl->out_len[1] = (unsigned char)( rec.data_len      );
 802c546:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 802c54a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802c54c:	705a      	strb	r2, [r3, #1]
        protected_record_size = len + mbedtls_ssl_out_hdr_len( ssl );
 802c54e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
 802c552:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 802c556:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 802c55a:	7019      	strb	r1, [r3, #0]
 802c55c:	1ad2      	subs	r2, r2, r3
        ssl->out_hdr  += protected_record_size;
 802c55e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        ssl->out_left += protected_record_size;
 802c562:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
        protected_record_size = len + mbedtls_ssl_out_hdr_len( ssl );
 802c566:	4402      	add	r2, r0
        ssl->out_hdr  += protected_record_size;
 802c568:	4413      	add	r3, r2
        mbedtls_ssl_update_out_pointers( ssl, ssl->transform_out );
 802c56a:	6c20      	ldr	r0, [r4, #64]	; 0x40
        ssl->out_left += protected_record_size;
 802c56c:	440a      	add	r2, r1
        ssl->out_ctr = ssl->out_hdr - 8;
 802c56e:	f1a3 0608 	sub.w	r6, r3, #8
        ssl->out_len = ssl->out_hdr + 3;
 802c572:	1cd9      	adds	r1, r3, #3
        ssl->out_hdr  += protected_record_size;
 802c574:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        ssl->out_iv  = ssl->out_hdr + 5;
 802c578:	3305      	adds	r3, #5
 802c57a:	e9c4 1326 	strd	r1, r3, [r4, #152]	; 0x98
        ssl->out_left += protected_record_size;
 802c57e:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
        ssl->out_ctr = ssl->out_hdr - 8;
 802c582:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
    ssl->out_msg = ssl->out_iv;
 802c586:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    if( transform != NULL )
 802c58a:	b148      	cbz	r0, 802c5a0 <mbedtls_ssl_write_record+0x108>
    if( transform->minor_ver < MBEDTLS_SSL_MINOR_VERSION_2 )
 802c58c:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
 802c590:	2a01      	cmp	r2, #1
 802c592:	dd03      	ble.n	802c59c <mbedtls_ssl_write_record+0x104>
    return( transform->ivlen - transform->fixed_ivlen );
 802c594:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 802c598:	1a52      	subs	r2, r2, r1
 802c59a:	4413      	add	r3, r2
        ssl->out_msg += ssl_transform_get_explicit_iv_len( transform );
 802c59c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            if( ++ssl->cur_out_ctr[i - 1] != 0 )
 802c5a0:	f894 30b7 	ldrb.w	r3, [r4, #183]	; 0xb7
 802c5a4:	3301      	adds	r3, #1
 802c5a6:	b2db      	uxtb	r3, r3
 802c5a8:	f884 30b7 	strb.w	r3, [r4, #183]	; 0xb7
 802c5ac:	bb9b      	cbnz	r3, 802c616 <mbedtls_ssl_write_record+0x17e>
 802c5ae:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
 802c5b2:	3301      	adds	r3, #1
 802c5b4:	b2db      	uxtb	r3, r3
 802c5b6:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
 802c5ba:	bb63      	cbnz	r3, 802c616 <mbedtls_ssl_write_record+0x17e>
 802c5bc:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
 802c5c0:	3301      	adds	r3, #1
 802c5c2:	b2db      	uxtb	r3, r3
 802c5c4:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
 802c5c8:	bb2b      	cbnz	r3, 802c616 <mbedtls_ssl_write_record+0x17e>
 802c5ca:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 802c5ce:	3301      	adds	r3, #1
 802c5d0:	b2db      	uxtb	r3, r3
 802c5d2:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 802c5d6:	b9f3      	cbnz	r3, 802c616 <mbedtls_ssl_write_record+0x17e>
 802c5d8:	f894 30b3 	ldrb.w	r3, [r4, #179]	; 0xb3
 802c5dc:	3301      	adds	r3, #1
 802c5de:	b2db      	uxtb	r3, r3
 802c5e0:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
 802c5e4:	b9bb      	cbnz	r3, 802c616 <mbedtls_ssl_write_record+0x17e>
 802c5e6:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
 802c5ea:	3301      	adds	r3, #1
 802c5ec:	b2db      	uxtb	r3, r3
 802c5ee:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
 802c5f2:	b983      	cbnz	r3, 802c616 <mbedtls_ssl_write_record+0x17e>
 802c5f4:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 802c5f8:	3301      	adds	r3, #1
 802c5fa:	b2db      	uxtb	r3, r3
 802c5fc:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 802c600:	b94b      	cbnz	r3, 802c616 <mbedtls_ssl_write_record+0x17e>
 802c602:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 802c606:	3301      	adds	r3, #1
 802c608:	b2db      	uxtb	r3, r3
 802c60a:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
 802c60e:	b913      	cbnz	r3, 802c616 <mbedtls_ssl_write_record+0x17e>
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 802c610:	4807      	ldr	r0, [pc, #28]	; (802c630 <mbedtls_ssl_write_record+0x198>)
}
 802c612:	b00b      	add	sp, #44	; 0x2c
 802c614:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( flush == SSL_FORCE_FLUSH ) &&
 802c616:	2d01      	cmp	r5, #1
 802c618:	d002      	beq.n	802c620 <mbedtls_ssl_write_record+0x188>
    return( 0 );
 802c61a:	2000      	movs	r0, #0
}
 802c61c:	b00b      	add	sp, #44	; 0x2c
 802c61e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 802c620:	4620      	mov	r0, r4
 802c622:	f7ff fdf3 	bl	802c20c <mbedtls_ssl_flush_output>
}
 802c626:	b00b      	add	sp, #44	; 0x2c
 802c628:	bdf0      	pop	{r4, r5, r6, r7, pc}
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 802c62a:	4802      	ldr	r0, [pc, #8]	; (802c634 <mbedtls_ssl_write_record+0x19c>)
}
 802c62c:	b00b      	add	sp, #44	; 0x2c
 802c62e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802c630:	ffff9480 	.word	0xffff9480
 802c634:	ffff9400 	.word	0xffff9400

0802c638 <mbedtls_ssl_read_record>:
{
 802c638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( ssl->keep_current_message == 0 )
 802c63c:	f8d0 5088 	ldr.w	r5, [r0, #136]	; 0x88
{
 802c640:	4604      	mov	r4, r0
 802c642:	b08b      	sub	sp, #44	; 0x2c
    if( ssl->keep_current_message == 0 )
 802c644:	2d00      	cmp	r5, #0
 802c646:	f040 8111 	bne.w	802c86c <mbedtls_ssl_read_record+0x234>
 802c64a:	460e      	mov	r6, r1
    ret = mbedtls_ssl_fetch_input( ssl, mbedtls_ssl_in_hdr_len( ssl ) );
 802c64c:	f04f 0905 	mov.w	r9, #5
            ssl->nb_zero = 0;
 802c650:	46a8      	mov	r8, r5
    if( ssl->in_hslen != 0 )
 802c652:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
        if( ssl->in_offt != NULL )
 802c656:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if( ssl->in_hslen != 0 )
 802c658:	2900      	cmp	r1, #0
 802c65a:	f000 80a3 	beq.w	802c7a4 <mbedtls_ssl_read_record+0x16c>
        if( ssl->in_offt != NULL )
 802c65e:	2b00      	cmp	r3, #0
 802c660:	f040 812f 	bne.w	802c8c2 <mbedtls_ssl_read_record+0x28a>
        if( ssl->in_hslen < ssl->in_msglen )
 802c664:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 802c666:	4291      	cmp	r1, r2
 802c668:	f0c0 80f4 	bcc.w	802c854 <mbedtls_ssl_read_record+0x21c>
            ssl->in_msglen = 0;
 802c66c:	67a3      	str	r3, [r4, #120]	; 0x78
        ssl->in_hslen   = 0;
 802c66e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    ret = mbedtls_ssl_fetch_input( ssl, mbedtls_ssl_in_hdr_len( ssl ) );
 802c672:	2105      	movs	r1, #5
 802c674:	4620      	mov	r0, r4
 802c676:	f7ff fd7d 	bl	802c174 <mbedtls_ssl_fetch_input>
    if( ret != 0 )
 802c67a:	2800      	cmp	r0, #0
 802c67c:	f040 80b8 	bne.w	802c7f0 <mbedtls_ssl_read_record+0x1b8>
    if( len < rec_hdr_len_offset + rec_hdr_len_len )
 802c680:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    ret = ssl_parse_record_header( ssl, ssl->in_hdr, ssl->in_left, &rec );
 802c682:	6e22      	ldr	r2, [r4, #96]	; 0x60
    if( len < rec_hdr_len_offset + rec_hdr_len_len )
 802c684:	2b04      	cmp	r3, #4
 802c686:	f240 8117 	bls.w	802c8b8 <mbedtls_ssl_read_record+0x280>
    rec->type = buf[ rec_hdr_type_offset ];
 802c68a:	7813      	ldrb	r3, [r2, #0]
    if( record_type != MBEDTLS_SSL_MSG_HANDSHAKE &&
 802c68c:	f1a3 0114 	sub.w	r1, r3, #20
 802c690:	2903      	cmp	r1, #3
    rec->type = buf[ rec_hdr_type_offset ];
 802c692:	f88d 3014 	strb.w	r3, [sp, #20]
    if( record_type != MBEDTLS_SSL_MSG_HANDSHAKE &&
 802c696:	f200 810f 	bhi.w	802c8b8 <mbedtls_ssl_read_record+0x280>
    rec->ver[0] = buf[ rec_hdr_version_offset + 0 ];
 802c69a:	7853      	ldrb	r3, [r2, #1]
    if( major_ver != ssl->major_ver )
 802c69c:	68a7      	ldr	r7, [r4, #8]
    rec->ver[0] = buf[ rec_hdr_version_offset + 0 ];
 802c69e:	f88d 3015 	strb.w	r3, [sp, #21]
    rec->ver[1] = buf[ rec_hdr_version_offset + 1 ];
 802c6a2:	7890      	ldrb	r0, [r2, #2]
    if( major_ver != ssl->major_ver )
 802c6a4:	42bb      	cmp	r3, r7
                              ssl->conf->transport,
 802c6a6:	6821      	ldr	r1, [r4, #0]
    rec->ver[1] = buf[ rec_hdr_version_offset + 1 ];
 802c6a8:	f88d 0016 	strb.w	r0, [sp, #22]
    if( major_ver != ssl->major_ver )
 802c6ac:	f040 8104 	bne.w	802c8b8 <mbedtls_ssl_read_record+0x280>
    if( minor_ver > ssl->conf->max_minor_ver )
 802c6b0:	f891 3059 	ldrb.w	r3, [r1, #89]	; 0x59
 802c6b4:	4283      	cmp	r3, r0
 802c6b6:	f0c0 80ff 	bcc.w	802c8b8 <mbedtls_ssl_read_record+0x280>
        memcpy( &rec->ctr[0], ssl->in_ctr, rec_hdr_ctr_len );
 802c6ba:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 802c6bc:	ab03      	add	r3, sp, #12
 802c6be:	6808      	ldr	r0, [r1, #0]
 802c6c0:	6849      	ldr	r1, [r1, #4]
    rec->data_offset = rec_hdr_len_offset + rec_hdr_len_len;
 802c6c2:	f8cd 9020 	str.w	r9, [sp, #32]
        memcpy( &rec->ctr[0], ssl->in_ctr, rec_hdr_ctr_len );
 802c6c6:	c303      	stmia	r3!, {r0, r1}
    rec->data_len    = ( (size_t) buf[ rec_hdr_len_offset + 0 ] << 8 ) |
 802c6c8:	f8b2 3003 	ldrh.w	r3, [r2, #3]
    rec->buf     = buf;
 802c6cc:	9206      	str	r2, [sp, #24]
 802c6ce:	ba5b      	rev16	r3, r3
 802c6d0:	b29b      	uxth	r3, r3
    rec->buf_len = rec->data_offset + rec->data_len;
 802c6d2:	1d59      	adds	r1, r3, #5
    rec->data_len    = ( (size_t) buf[ rec_hdr_len_offset + 0 ] << 8 ) |
 802c6d4:	9309      	str	r3, [sp, #36]	; 0x24
    rec->buf_len = rec->data_offset + rec->data_len;
 802c6d6:	9107      	str	r1, [sp, #28]
    if( rec->data_len == 0 )
 802c6d8:	2b00      	cmp	r3, #0
 802c6da:	f000 80ed 	beq.w	802c8b8 <mbedtls_ssl_read_record+0x280>
        ret = mbedtls_ssl_fetch_input( ssl, rec.buf_len );
 802c6de:	4620      	mov	r0, r4
 802c6e0:	f7ff fd48 	bl	802c174 <mbedtls_ssl_fetch_input>
        if( ret != 0 )
 802c6e4:	2800      	cmp	r0, #0
 802c6e6:	f040 8083 	bne.w	802c7f0 <mbedtls_ssl_read_record+0x1b8>
    if( !done && ssl->transform_in != NULL )
 802c6ea:	6be1      	ldr	r1, [r4, #60]	; 0x3c
        ssl->in_left = 0;
 802c6ec:	67e0      	str	r0, [r4, #124]	; 0x7c
    if( !done && ssl->transform_in != NULL )
 802c6ee:	2900      	cmp	r1, #0
 802c6f0:	f000 80c0 	beq.w	802c874 <mbedtls_ssl_read_record+0x23c>
        if( ( ret = mbedtls_ssl_decrypt_buf( ssl, ssl->transform_in,
 802c6f4:	4620      	mov	r0, r4
 802c6f6:	aa03      	add	r2, sp, #12
 802c6f8:	f7ff fa14 	bl	802bb24 <mbedtls_ssl_decrypt_buf>
 802c6fc:	2800      	cmp	r0, #0
 802c6fe:	d174      	bne.n	802c7ea <mbedtls_ssl_read_record+0x1b2>
        if( rec->data_len == 0 )
 802c700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c702:	2b00      	cmp	r3, #0
 802c704:	f040 80da 	bne.w	802c8bc <mbedtls_ssl_read_record+0x284>
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3
 802c708:	68e3      	ldr	r3, [r4, #12]
 802c70a:	2b03      	cmp	r3, #3
 802c70c:	f000 80cf 	beq.w	802c8ae <mbedtls_ssl_read_record+0x276>
            ssl->nb_zero++;
 802c710:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 802c714:	3301      	adds	r3, #1
            if( ssl->nb_zero > 3 )
 802c716:	2b03      	cmp	r3, #3
            ssl->nb_zero++;
 802c718:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
            if( ssl->nb_zero > 3 )
 802c71c:	f300 80d3 	bgt.w	802c8c6 <mbedtls_ssl_read_record+0x28e>
                if( ++ssl->in_ctr[i - 1] != 0 )
 802c720:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 802c722:	79d3      	ldrb	r3, [r2, #7]
 802c724:	3301      	adds	r3, #1
 802c726:	b2db      	uxtb	r3, r3
 802c728:	71d3      	strb	r3, [r2, #7]
 802c72a:	2b00      	cmp	r3, #0
 802c72c:	f040 80a2 	bne.w	802c874 <mbedtls_ssl_read_record+0x23c>
 802c730:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 802c732:	7993      	ldrb	r3, [r2, #6]
 802c734:	3301      	adds	r3, #1
 802c736:	b2db      	uxtb	r3, r3
 802c738:	7193      	strb	r3, [r2, #6]
 802c73a:	2b00      	cmp	r3, #0
 802c73c:	f040 809a 	bne.w	802c874 <mbedtls_ssl_read_record+0x23c>
 802c740:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 802c742:	7953      	ldrb	r3, [r2, #5]
 802c744:	3301      	adds	r3, #1
 802c746:	b2db      	uxtb	r3, r3
 802c748:	7153      	strb	r3, [r2, #5]
 802c74a:	2b00      	cmp	r3, #0
 802c74c:	f040 8092 	bne.w	802c874 <mbedtls_ssl_read_record+0x23c>
 802c750:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 802c752:	7913      	ldrb	r3, [r2, #4]
 802c754:	3301      	adds	r3, #1
 802c756:	b2db      	uxtb	r3, r3
 802c758:	7113      	strb	r3, [r2, #4]
 802c75a:	2b00      	cmp	r3, #0
 802c75c:	f040 808a 	bne.w	802c874 <mbedtls_ssl_read_record+0x23c>
 802c760:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 802c762:	78d3      	ldrb	r3, [r2, #3]
 802c764:	3301      	adds	r3, #1
 802c766:	b2db      	uxtb	r3, r3
 802c768:	70d3      	strb	r3, [r2, #3]
 802c76a:	2b00      	cmp	r3, #0
 802c76c:	f040 8082 	bne.w	802c874 <mbedtls_ssl_read_record+0x23c>
 802c770:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 802c772:	7893      	ldrb	r3, [r2, #2]
 802c774:	3301      	adds	r3, #1
 802c776:	b2db      	uxtb	r3, r3
 802c778:	7093      	strb	r3, [r2, #2]
 802c77a:	2b00      	cmp	r3, #0
 802c77c:	d17a      	bne.n	802c874 <mbedtls_ssl_read_record+0x23c>
 802c77e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 802c780:	7853      	ldrb	r3, [r2, #1]
 802c782:	3301      	adds	r3, #1
 802c784:	b2db      	uxtb	r3, r3
 802c786:	7053      	strb	r3, [r2, #1]
 802c788:	2b00      	cmp	r3, #0
 802c78a:	d173      	bne.n	802c874 <mbedtls_ssl_read_record+0x23c>
 802c78c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 802c78e:	7813      	ldrb	r3, [r2, #0]
 802c790:	3301      	adds	r3, #1
 802c792:	b2db      	uxtb	r3, r3
 802c794:	7013      	strb	r3, [r2, #0]
 802c796:	2b00      	cmp	r3, #0
 802c798:	d16c      	bne.n	802c874 <mbedtls_ssl_read_record+0x23c>
                return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 802c79a:	4d58      	ldr	r5, [pc, #352]	; (802c8fc <mbedtls_ssl_read_record+0x2c4>)
}
 802c79c:	4628      	mov	r0, r5
 802c79e:	b00b      	add	sp, #44	; 0x2c
 802c7a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if( ssl->in_offt != NULL )
 802c7a4:	2b00      	cmp	r3, #0
 802c7a6:	d053      	beq.n	802c850 <mbedtls_ssl_read_record+0x218>
 802c7a8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    if( ssl->in_msglen > 0 )
 802c7aa:	2b00      	cmp	r3, #0
 802c7ac:	f43f af61 	beq.w	802c672 <mbedtls_ssl_read_record+0x3a>
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 802c7b0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 802c7b2:	2b16      	cmp	r3, #22
 802c7b4:	d022      	beq.n	802c7fc <mbedtls_ssl_read_record+0x1c4>
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
 802c7b6:	2b14      	cmp	r3, #20
 802c7b8:	d03d      	beq.n	802c836 <mbedtls_ssl_read_record+0x1fe>
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 802c7ba:	2b15      	cmp	r3, #21
 802c7bc:	d111      	bne.n	802c7e2 <mbedtls_ssl_read_record+0x1aa>
        if( ssl->in_msglen != 2 )
 802c7be:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 802c7c0:	2b02      	cmp	r3, #2
 802c7c2:	d179      	bne.n	802c8b8 <mbedtls_ssl_read_record+0x280>
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
 802c7c4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 802c7c6:	7813      	ldrb	r3, [r2, #0]
 802c7c8:	2b02      	cmp	r3, #2
 802c7ca:	f000 8091 	beq.w	802c8f0 <mbedtls_ssl_read_record+0x2b8>
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 802c7ce:	2b01      	cmp	r3, #1
 802c7d0:	f47f af3f 	bne.w	802c652 <mbedtls_ssl_read_record+0x1a>
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
 802c7d4:	7853      	ldrb	r3, [r2, #1]
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 802c7d6:	2b00      	cmp	r3, #0
 802c7d8:	f000 808c 	beq.w	802c8f4 <mbedtls_ssl_read_record+0x2bc>
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 802c7dc:	2b64      	cmp	r3, #100	; 0x64
 802c7de:	f47f af38 	bne.w	802c652 <mbedtls_ssl_read_record+0x1a>
}
 802c7e2:	4628      	mov	r0, r5
 802c7e4:	b00b      	add	sp, #44	; 0x2c
 802c7e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            if( ret == MBEDTLS_ERR_SSL_INVALID_MAC )
 802c7ea:	f510 4fe3 	cmn.w	r0, #29056	; 0x7180
 802c7ee:	d06a      	beq.n	802c8c6 <mbedtls_ssl_read_record+0x28e>
                    if( ret == MBEDTLS_ERR_SSL_CONTINUE_PROCESSING )
 802c7f0:	f510 4fcb 	cmn.w	r0, #25984	; 0x6580
 802c7f4:	f43f af2d 	beq.w	802c652 <mbedtls_ssl_read_record+0x1a>
 802c7f8:	4605      	mov	r5, r0
 802c7fa:	e7f2      	b.n	802c7e2 <mbedtls_ssl_read_record+0x1aa>
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
 802c7fc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 802c7fe:	2b03      	cmp	r3, #3
 802c800:	d95a      	bls.n	802c8b8 <mbedtls_ssl_read_record+0x280>
    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + ssl_get_hs_total_len( ssl );
 802c802:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
            ( ssl->in_msg[2] << 8  ) |
 802c804:	788a      	ldrb	r2, [r1, #2]
    return( ( ssl->in_msg[1] << 16 ) |
 802c806:	784f      	ldrb	r7, [r1, #1]
              ssl->in_msg[3] );
 802c808:	78c8      	ldrb	r0, [r1, #3]
            ( ssl->in_msg[2] << 8  ) |
 802c80a:	0212      	lsls	r2, r2, #8
    return( ( ssl->in_msg[1] << 16 ) |
 802c80c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
            ( ssl->in_msg[2] << 8  ) |
 802c810:	4302      	orrs	r2, r0
    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + ssl_get_hs_total_len( ssl );
 802c812:	3204      	adds	r2, #4
    if( ssl->in_msglen < ssl->in_hslen )
 802c814:	4293      	cmp	r3, r2
    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + ssl_get_hs_total_len( ssl );
 802c816:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if( ssl->in_msglen < ssl->in_hslen )
 802c81a:	d367      	bcc.n	802c8ec <mbedtls_ssl_read_record+0x2b4>
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&
 802c81c:	2e01      	cmp	r6, #1
 802c81e:	d1e0      	bne.n	802c7e2 <mbedtls_ssl_read_record+0x1aa>
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER && hs != NULL )
 802c820:	6863      	ldr	r3, [r4, #4]
 802c822:	2b10      	cmp	r3, #16
 802c824:	d0dd      	beq.n	802c7e2 <mbedtls_ssl_read_record+0x1aa>
    mbedtls_ssl_handshake_params * const hs = ssl->handshake;
 802c826:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER && hs != NULL )
 802c828:	2b00      	cmp	r3, #0
 802c82a:	d0da      	beq.n	802c7e2 <mbedtls_ssl_read_record+0x1aa>
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 802c82c:	4620      	mov	r0, r4
 802c82e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802c832:	4798      	blx	r3
 802c834:	e7d5      	b.n	802c7e2 <mbedtls_ssl_read_record+0x1aa>
        if( ssl->in_msglen != 1 )
 802c836:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 802c838:	2b01      	cmp	r3, #1
 802c83a:	d13d      	bne.n	802c8b8 <mbedtls_ssl_read_record+0x280>
        if( ssl->in_msg[0] != 1 )
 802c83c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 802c83e:	4b30      	ldr	r3, [pc, #192]	; (802c900 <mbedtls_ssl_read_record+0x2c8>)
 802c840:	7812      	ldrb	r2, [r2, #0]
 802c842:	2a01      	cmp	r2, #1
 802c844:	bf18      	it	ne
 802c846:	461d      	movne	r5, r3
}
 802c848:	4628      	mov	r0, r5
 802c84a:	b00b      	add	sp, #44	; 0x2c
 802c84c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ssl->in_msglen = 0;
 802c850:	67a3      	str	r3, [r4, #120]	; 0x78
    if( ssl->in_msglen > 0 )
 802c852:	e70e      	b.n	802c672 <mbedtls_ssl_read_record+0x3a>
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
 802c854:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
            ssl->in_msglen -= ssl->in_hslen;
 802c856:	1a52      	subs	r2, r2, r1
 802c858:	67a2      	str	r2, [r4, #120]	; 0x78
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
 802c85a:	4401      	add	r1, r0
 802c85c:	9301      	str	r3, [sp, #4]
 802c85e:	f003 fae8 	bl	802fe32 <memmove>
        ssl->in_hslen   = 0;
 802c862:	9b01      	ldr	r3, [sp, #4]
 802c864:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 802c868:	6fa3      	ldr	r3, [r4, #120]	; 0x78
            if( ret != 0 )
 802c86a:	e79e      	b.n	802c7aa <mbedtls_ssl_read_record+0x172>
        ssl->keep_current_message = 0;
 802c86c:	2500      	movs	r5, #0
 802c86e:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
 802c872:	e7b6      	b.n	802c7e2 <mbedtls_ssl_read_record+0x1aa>
    if( ssl->in_msglen > MBEDTLS_SSL_IN_CONTENT_LEN )
 802c874:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 802c876:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802c87a:	d81d      	bhi.n	802c8b8 <mbedtls_ssl_read_record+0x280>
        ssl->in_ctr = ssl->in_hdr - 8;
 802c87c:	6e23      	ldr	r3, [r4, #96]	; 0x60
    ssl->in_msgtype = rec.type;
 802c87e:	f89d 2014 	ldrb.w	r2, [sp, #20]
        ssl->in_ctr = ssl->in_hdr - 8;
 802c882:	f1a3 0108 	sub.w	r1, r3, #8
 802c886:	65e1      	str	r1, [r4, #92]	; 0x5c
        ssl->in_len = ssl->in_hdr + 3;
 802c888:	1cd9      	adds	r1, r3, #3
 802c88a:	6661      	str	r1, [r4, #100]	; 0x64
        ssl->in_iv  = ssl->in_hdr + 5;
 802c88c:	1d59      	adds	r1, r3, #5
 802c88e:	66a1      	str	r1, [r4, #104]	; 0x68
    ssl->in_msgtype = rec.type;
 802c890:	6762      	str	r2, [r4, #116]	; 0x74
    ssl->in_hdr[0] = rec.type;
 802c892:	701a      	strb	r2, [r3, #0]
    ssl->in_msg    = rec.buf + rec.data_offset;
 802c894:	9b06      	ldr	r3, [sp, #24]
    ssl->in_msglen = rec.data_len;
 802c896:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
    ssl->in_msg    = rec.buf + rec.data_offset;
 802c89a:	440b      	add	r3, r1
    ssl->in_len[0] = (unsigned char)( rec.data_len >> 8 );
 802c89c:	6e61      	ldr	r1, [r4, #100]	; 0x64
    ssl->in_msg    = rec.buf + rec.data_offset;
 802c89e:	66e3      	str	r3, [r4, #108]	; 0x6c
    ssl->in_len[0] = (unsigned char)( rec.data_len >> 8 );
 802c8a0:	0a13      	lsrs	r3, r2, #8
    ssl->in_msglen = rec.data_len;
 802c8a2:	67a2      	str	r2, [r4, #120]	; 0x78
    ssl->in_len[0] = (unsigned char)( rec.data_len >> 8 );
 802c8a4:	700b      	strb	r3, [r1, #0]
    ssl->in_len[1] = (unsigned char)( rec.data_len      );
 802c8a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802c8a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802c8aa:	705a      	strb	r2, [r3, #1]
                    if( ret == MBEDTLS_ERR_SSL_CONTINUE_PROCESSING )
 802c8ac:	e780      	b.n	802c7b0 <mbedtls_ssl_read_record+0x178>
                && rec->type != MBEDTLS_SSL_MSG_APPLICATION_DATA )
 802c8ae:	f89d 3014 	ldrb.w	r3, [sp, #20]
 802c8b2:	2b17      	cmp	r3, #23
 802c8b4:	f43f af2c 	beq.w	802c710 <mbedtls_ssl_read_record+0xd8>
 802c8b8:	4d11      	ldr	r5, [pc, #68]	; (802c900 <mbedtls_ssl_read_record+0x2c8>)
 802c8ba:	e792      	b.n	802c7e2 <mbedtls_ssl_read_record+0x1aa>
            ssl->nb_zero = 0;
 802c8bc:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
 802c8c0:	e72e      	b.n	802c720 <mbedtls_ssl_read_record+0xe8>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 802c8c2:	4d10      	ldr	r5, [pc, #64]	; (802c904 <mbedtls_ssl_read_record+0x2cc>)
 802c8c4:	e78d      	b.n	802c7e2 <mbedtls_ssl_read_record+0x1aa>
    if( ssl == NULL || ssl->conf == NULL )
 802c8c6:	6823      	ldr	r3, [r4, #0]
 802c8c8:	b1b3      	cbz	r3, 802c8f8 <mbedtls_ssl_read_record+0x2c0>
    ssl->out_msglen = 2;
 802c8ca:	2302      	movs	r3, #2
    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
 802c8cc:	2015      	movs	r0, #21
    ssl->out_msg[1] = message;
 802c8ce:	2214      	movs	r2, #20
    ssl->out_msg[0] = level;
 802c8d0:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
    ssl->out_msglen = 2;
 802c8d4:	e9c4 0329 	strd	r0, r3, [r4, #164]	; 0xa4
    ssl->out_msg[0] = level;
 802c8d8:	700b      	strb	r3, [r1, #0]
    ssl->out_msg[1] = message;
 802c8da:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
 802c8de:	4620      	mov	r0, r4
 802c8e0:	2101      	movs	r1, #1
    ssl->out_msg[1] = message;
 802c8e2:	705a      	strb	r2, [r3, #1]
    if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
 802c8e4:	f7ff fdd8 	bl	802c498 <mbedtls_ssl_write_record>
                    if( ret != 0 )
 802c8e8:	4d07      	ldr	r5, [pc, #28]	; (802c908 <mbedtls_ssl_read_record+0x2d0>)
 802c8ea:	e77a      	b.n	802c7e2 <mbedtls_ssl_read_record+0x1aa>
 802c8ec:	4d07      	ldr	r5, [pc, #28]	; (802c90c <mbedtls_ssl_read_record+0x2d4>)
 802c8ee:	e778      	b.n	802c7e2 <mbedtls_ssl_read_record+0x1aa>
 802c8f0:	4d07      	ldr	r5, [pc, #28]	; (802c910 <mbedtls_ssl_read_record+0x2d8>)
 802c8f2:	e776      	b.n	802c7e2 <mbedtls_ssl_read_record+0x1aa>
 802c8f4:	4d07      	ldr	r5, [pc, #28]	; (802c914 <mbedtls_ssl_read_record+0x2dc>)
 802c8f6:	e774      	b.n	802c7e2 <mbedtls_ssl_read_record+0x1aa>
 802c8f8:	4d03      	ldr	r5, [pc, #12]	; (802c908 <mbedtls_ssl_read_record+0x2d0>)
 802c8fa:	e772      	b.n	802c7e2 <mbedtls_ssl_read_record+0x1aa>
 802c8fc:	ffff9480 	.word	0xffff9480
 802c900:	ffff8e00 	.word	0xffff8e00
 802c904:	ffff9400 	.word	0xffff9400
 802c908:	ffff8e80 	.word	0xffff8e80
 802c90c:	ffff8f80 	.word	0xffff8f80
 802c910:	ffff8880 	.word	0xffff8880
 802c914:	ffff8780 	.word	0xffff8780

0802c918 <mbedtls_ssl_send_alert_message>:
    if( ssl == NULL || ssl->conf == NULL )
 802c918:	2800      	cmp	r0, #0
 802c91a:	f000 80d7 	beq.w	802cacc <mbedtls_ssl_send_alert_message+0x1b4>
{
 802c91e:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( ssl == NULL || ssl->conf == NULL )
 802c920:	6803      	ldr	r3, [r0, #0]
 802c922:	4604      	mov	r4, r0
{
 802c924:	b08b      	sub	sp, #44	; 0x2c
    if( ssl == NULL || ssl->conf == NULL )
 802c926:	2b00      	cmp	r3, #0
 802c928:	f000 80ce 	beq.w	802cac8 <mbedtls_ssl_send_alert_message+0x1b0>
    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
 802c92c:	2015      	movs	r0, #21
    ssl->out_msglen = 2;
 802c92e:	2502      	movs	r5, #2
        memcpy( ssl->out_ctr, ssl->cur_out_ctr, 8 );
 802c930:	4623      	mov	r3, r4
    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
 802c932:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    ssl->out_msg[0] = level;
 802c936:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    ssl->out_msglen = 2;
 802c93a:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
    ssl->out_msg[0] = level;
 802c93e:	7001      	strb	r1, [r0, #0]
    ssl->out_msg[1] = message;
 802c940:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 802c944:	704a      	strb	r2, [r1, #1]
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 802c946:	68e5      	ldr	r5, [r4, #12]
                           ssl->conf->transport, ssl->out_hdr + 1 );
 802c948:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
        ver[0] = (unsigned char) major;
 802c94c:	68a0      	ldr	r0, [r4, #8]
    size_t len = ssl->out_msglen;
 802c94e:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
        ver[1] = (unsigned char) minor;
 802c952:	7095      	strb	r5, [r2, #2]
        ver[0] = (unsigned char) major;
 802c954:	7050      	strb	r0, [r2, #1]
        memcpy( ssl->out_ctr, ssl->cur_out_ctr, 8 );
 802c956:	f853 0fb0 	ldr.w	r0, [r3, #176]!
 802c95a:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 802c95e:	685b      	ldr	r3, [r3, #4]
 802c960:	6010      	str	r0, [r2, #0]
 802c962:	6053      	str	r3, [r2, #4]
        ssl->out_len[0] = (unsigned char)( len >> 8 );
 802c964:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 802c968:	0a0a      	lsrs	r2, r1, #8
 802c96a:	701a      	strb	r2, [r3, #0]
        ssl->out_len[1] = (unsigned char)( len      );
 802c96c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 802c970:	7059      	strb	r1, [r3, #1]
        if( ssl->transform_out != NULL )
 802c972:	6c25      	ldr	r5, [r4, #64]	; 0x40
 802c974:	2d00      	cmp	r5, #0
 802c976:	d03b      	beq.n	802c9f0 <mbedtls_ssl_send_alert_message+0xd8>
            rec.buf         = ssl->out_iv;
 802c978:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
            rec.buf_len     = out_buf_len - ( ssl->out_iv - ssl->out_buf );
 802c97c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
            rec.data_offset = ssl->out_msg - rec.buf;
 802c980:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
            rec.buf_len     = out_buf_len - ( ssl->out_iv - ssl->out_buf );
 802c984:	1ac3      	subs	r3, r0, r3
 802c986:	f5c3 4382 	rsb	r3, r3, #16640	; 0x4100
            rec.data_offset = ssl->out_msg - rec.buf;
 802c98a:	1a09      	subs	r1, r1, r0
            rec.buf         = ssl->out_iv;
 802c98c:	9006      	str	r0, [sp, #24]
            rec.buf_len     = out_buf_len - ( ssl->out_iv - ssl->out_buf );
 802c98e:	333d      	adds	r3, #61	; 0x3d
            rec.data_len    = ssl->out_msglen;
 802c990:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
            rec.buf_len     = out_buf_len - ( ssl->out_iv - ssl->out_buf );
 802c994:	9307      	str	r3, [sp, #28]
            memcpy( &rec.ctr[0], ssl->out_ctr, 8 );
 802c996:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
            rec.data_offset = ssl->out_msg - rec.buf;
 802c99a:	9108      	str	r1, [sp, #32]
            rec.data_len    = ssl->out_msglen;
 802c99c:	9009      	str	r0, [sp, #36]	; 0x24
            memcpy( &rec.ctr[0], ssl->out_ctr, 8 );
 802c99e:	6818      	ldr	r0, [r3, #0]
 802c9a0:	6859      	ldr	r1, [r3, #4]
                                       ssl->conf->transport, rec.ver );
 802c9a2:	6826      	ldr	r6, [r4, #0]
            memcpy( &rec.ctr[0], ssl->out_ctr, 8 );
 802c9a4:	aa03      	add	r2, sp, #12
 802c9a6:	c203      	stmia	r2!, {r0, r1}
            if( ( ret = mbedtls_ssl_encrypt_buf( ssl, ssl->transform_out, &rec,
 802c9a8:	e9d6 3706 	ldrd	r3, r7, [r6, #24]
        ver[0] = (unsigned char) major;
 802c9ac:	e9d4 6002 	ldrd	r6, r0, [r4, #8]
            if( ( ret = mbedtls_ssl_encrypt_buf( ssl, ssl->transform_out, &rec,
 802c9b0:	9700      	str	r7, [sp, #0]
 802c9b2:	4629      	mov	r1, r5
            rec.type = ssl->out_msgtype;
 802c9b4:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
        ver[1] = (unsigned char) minor;
 802c9b8:	f88d 0016 	strb.w	r0, [sp, #22]
            if( ( ret = mbedtls_ssl_encrypt_buf( ssl, ssl->transform_out, &rec,
 802c9bc:	aa03      	add	r2, sp, #12
 802c9be:	4620      	mov	r0, r4
        ver[0] = (unsigned char) major;
 802c9c0:	f88d 6015 	strb.w	r6, [sp, #21]
            rec.type = ssl->out_msgtype;
 802c9c4:	f88d 5014 	strb.w	r5, [sp, #20]
            if( ( ret = mbedtls_ssl_encrypt_buf( ssl, ssl->transform_out, &rec,
 802c9c8:	f7fe ff64 	bl	802b894 <mbedtls_ssl_encrypt_buf>
 802c9cc:	2800      	cmp	r0, #0
 802c9ce:	d171      	bne.n	802cab4 <mbedtls_ssl_send_alert_message+0x19c>
            if( rec.data_offset != 0 )
 802c9d0:	9b08      	ldr	r3, [sp, #32]
 802c9d2:	2b00      	cmp	r3, #0
 802c9d4:	d175      	bne.n	802cac2 <mbedtls_ssl_send_alert_message+0x1aa>
            ssl->out_msglen = len = rec.data_len;
 802c9d6:	9909      	ldr	r1, [sp, #36]	; 0x24
            ssl->out_msgtype = rec.type;
 802c9d8:	f89d 0014 	ldrb.w	r0, [sp, #20]
            ssl->out_len[0] = (unsigned char)( rec.data_len >> 8 );
 802c9dc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 802c9e0:	0a0a      	lsrs	r2, r1, #8
            ssl->out_msgtype = rec.type;
 802c9e2:	e9c4 0129 	strd	r0, r1, [r4, #164]	; 0xa4
            ssl->out_len[0] = (unsigned char)( rec.data_len >> 8 );
 802c9e6:	701a      	strb	r2, [r3, #0]
            ssl->out_len[1] = (unsigned char)( rec.data_len      );
 802c9e8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 802c9ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802c9ee:	705a      	strb	r2, [r3, #1]
        protected_record_size = len + mbedtls_ssl_out_hdr_len( ssl );
 802c9f0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
 802c9f4:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 802c9f8:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 802c9fc:	7018      	strb	r0, [r3, #0]
 802c9fe:	1ad2      	subs	r2, r2, r3
        ssl->out_hdr  += protected_record_size;
 802ca00:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        protected_record_size = len + mbedtls_ssl_out_hdr_len( ssl );
 802ca04:	440a      	add	r2, r1
        ssl->out_left += protected_record_size;
 802ca06:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
        ssl->out_hdr  += protected_record_size;
 802ca0a:	4413      	add	r3, r2
        mbedtls_ssl_update_out_pointers( ssl, ssl->transform_out );
 802ca0c:	6c20      	ldr	r0, [r4, #64]	; 0x40
        ssl->out_left += protected_record_size;
 802ca0e:	440a      	add	r2, r1
        ssl->out_ctr = ssl->out_hdr - 8;
 802ca10:	f1a3 0508 	sub.w	r5, r3, #8
        ssl->out_len = ssl->out_hdr + 3;
 802ca14:	1cd9      	adds	r1, r3, #3
        ssl->out_hdr  += protected_record_size;
 802ca16:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        ssl->out_iv  = ssl->out_hdr + 5;
 802ca1a:	3305      	adds	r3, #5
 802ca1c:	e9c4 1326 	strd	r1, r3, [r4, #152]	; 0x98
        ssl->out_left += protected_record_size;
 802ca20:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
        ssl->out_ctr = ssl->out_hdr - 8;
 802ca24:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
    ssl->out_msg = ssl->out_iv;
 802ca28:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    if( transform != NULL )
 802ca2c:	b148      	cbz	r0, 802ca42 <mbedtls_ssl_send_alert_message+0x12a>
    if( transform->minor_ver < MBEDTLS_SSL_MINOR_VERSION_2 )
 802ca2e:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
 802ca32:	2a01      	cmp	r2, #1
 802ca34:	dd03      	ble.n	802ca3e <mbedtls_ssl_send_alert_message+0x126>
    return( transform->ivlen - transform->fixed_ivlen );
 802ca36:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 802ca3a:	1a52      	subs	r2, r2, r1
 802ca3c:	4413      	add	r3, r2
        ssl->out_msg += ssl_transform_get_explicit_iv_len( transform );
 802ca3e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            if( ++ssl->cur_out_ctr[i - 1] != 0 )
 802ca42:	f894 30b7 	ldrb.w	r3, [r4, #183]	; 0xb7
 802ca46:	3301      	adds	r3, #1
 802ca48:	b2db      	uxtb	r3, r3
 802ca4a:	f884 30b7 	strb.w	r3, [r4, #183]	; 0xb7
 802ca4e:	bb9b      	cbnz	r3, 802cab8 <mbedtls_ssl_send_alert_message+0x1a0>
 802ca50:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
 802ca54:	3301      	adds	r3, #1
 802ca56:	b2db      	uxtb	r3, r3
 802ca58:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
 802ca5c:	bb63      	cbnz	r3, 802cab8 <mbedtls_ssl_send_alert_message+0x1a0>
 802ca5e:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
 802ca62:	3301      	adds	r3, #1
 802ca64:	b2db      	uxtb	r3, r3
 802ca66:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
 802ca6a:	bb2b      	cbnz	r3, 802cab8 <mbedtls_ssl_send_alert_message+0x1a0>
 802ca6c:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 802ca70:	3301      	adds	r3, #1
 802ca72:	b2db      	uxtb	r3, r3
 802ca74:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 802ca78:	b9f3      	cbnz	r3, 802cab8 <mbedtls_ssl_send_alert_message+0x1a0>
 802ca7a:	f894 30b3 	ldrb.w	r3, [r4, #179]	; 0xb3
 802ca7e:	3301      	adds	r3, #1
 802ca80:	b2db      	uxtb	r3, r3
 802ca82:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
 802ca86:	b9bb      	cbnz	r3, 802cab8 <mbedtls_ssl_send_alert_message+0x1a0>
 802ca88:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
 802ca8c:	3301      	adds	r3, #1
 802ca8e:	b2db      	uxtb	r3, r3
 802ca90:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
 802ca94:	b983      	cbnz	r3, 802cab8 <mbedtls_ssl_send_alert_message+0x1a0>
 802ca96:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 802ca9a:	3301      	adds	r3, #1
 802ca9c:	b2db      	uxtb	r3, r3
 802ca9e:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 802caa2:	b94b      	cbnz	r3, 802cab8 <mbedtls_ssl_send_alert_message+0x1a0>
 802caa4:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 802caa8:	3301      	adds	r3, #1
 802caaa:	b2db      	uxtb	r3, r3
 802caac:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
 802cab0:	b913      	cbnz	r3, 802cab8 <mbedtls_ssl_send_alert_message+0x1a0>
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 802cab2:	4807      	ldr	r0, [pc, #28]	; (802cad0 <mbedtls_ssl_send_alert_message+0x1b8>)
}
 802cab4:	b00b      	add	sp, #44	; 0x2c
 802cab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 802cab8:	4620      	mov	r0, r4
 802caba:	f7ff fba7 	bl	802c20c <mbedtls_ssl_flush_output>
}
 802cabe:	b00b      	add	sp, #44	; 0x2c
 802cac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 802cac2:	4804      	ldr	r0, [pc, #16]	; (802cad4 <mbedtls_ssl_send_alert_message+0x1bc>)
}
 802cac4:	b00b      	add	sp, #44	; 0x2c
 802cac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 802cac8:	4803      	ldr	r0, [pc, #12]	; (802cad8 <mbedtls_ssl_send_alert_message+0x1c0>)
 802caca:	e7f3      	b.n	802cab4 <mbedtls_ssl_send_alert_message+0x19c>
 802cacc:	4802      	ldr	r0, [pc, #8]	; (802cad8 <mbedtls_ssl_send_alert_message+0x1c0>)
}
 802cace:	4770      	bx	lr
 802cad0:	ffff9480 	.word	0xffff9480
 802cad4:	ffff9400 	.word	0xffff9400
 802cad8:	ffff8f00 	.word	0xffff8f00

0802cadc <mbedtls_ssl_write_change_cipher_spec>:
    ssl->out_msglen  = 1;
 802cadc:	2301      	movs	r3, #1
    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
 802cade:	2114      	movs	r1, #20
{
 802cae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 802cae2:	4604      	mov	r4, r0
    ssl->out_msg[0]  = 1;
 802cae4:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    ssl->out_msglen  = 1;
 802cae8:	e9c0 1329 	strd	r1, r3, [r0, #164]	; 0xa4
    ssl->out_msg[0]  = 1;
 802caec:	7013      	strb	r3, [r2, #0]
    ssl->state++;
 802caee:	6843      	ldr	r3, [r0, #4]
    const unsigned char hs_type = ssl->out_msg[0];
 802caf0:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
    ssl->state++;
 802caf4:	3301      	adds	r3, #1
 802caf6:	6063      	str	r3, [r4, #4]
    if( ssl->out_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE          &&
 802caf8:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
 802cafc:	2916      	cmp	r1, #22
    const unsigned char hs_type = ssl->out_msg[0];
 802cafe:	7806      	ldrb	r6, [r0, #0]
{
 802cb00:	b08b      	sub	sp, #44	; 0x2c
    const size_t hs_len = ssl->out_msglen - 4;
 802cb02:	f1a2 0304 	sub.w	r3, r2, #4
    if( ssl->out_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE          &&
 802cb06:	f000 80cc 	beq.w	802cca2 <mbedtls_ssl_write_change_cipher_spec+0x1c6>
 802cb0a:	2914      	cmp	r1, #20
 802cb0c:	f040 80f1 	bne.w	802ccf2 <mbedtls_ssl_write_change_cipher_spec+0x216>
            hs_type          == MBEDTLS_SSL_HS_HELLO_REQUEST ) &&
 802cb10:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 802cb12:	2d00      	cmp	r5, #0
 802cb14:	f000 80ed 	beq.w	802ccf2 <mbedtls_ssl_write_change_cipher_spec+0x216>
    if( ssl->out_msglen > MBEDTLS_SSL_OUT_CONTENT_LEN )
 802cb18:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 802cb1c:	f200 80e9 	bhi.w	802ccf2 <mbedtls_ssl_write_change_cipher_spec+0x216>
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 802cb20:	2916      	cmp	r1, #22
 802cb22:	f000 80d0 	beq.w	802ccc6 <mbedtls_ssl_write_change_cipher_spec+0x1ea>
        memcpy( ssl->out_ctr, ssl->cur_out_ctr, 8 );
 802cb26:	4623      	mov	r3, r4
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 802cb28:	68e5      	ldr	r5, [r4, #12]
                           ssl->conf->transport, ssl->out_hdr + 1 );
 802cb2a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
        ver[0] = (unsigned char) major;
 802cb2e:	68a0      	ldr	r0, [r4, #8]
        ver[1] = (unsigned char) minor;
 802cb30:	708d      	strb	r5, [r1, #2]
        ver[0] = (unsigned char) major;
 802cb32:	7048      	strb	r0, [r1, #1]
        memcpy( ssl->out_ctr, ssl->cur_out_ctr, 8 );
 802cb34:	f853 0fb0 	ldr.w	r0, [r3, #176]!
 802cb38:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 802cb3c:	685b      	ldr	r3, [r3, #4]
 802cb3e:	6008      	str	r0, [r1, #0]
 802cb40:	604b      	str	r3, [r1, #4]
        ssl->out_len[0] = (unsigned char)( len >> 8 );
 802cb42:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 802cb46:	0a11      	lsrs	r1, r2, #8
 802cb48:	7019      	strb	r1, [r3, #0]
        ssl->out_len[1] = (unsigned char)( len      );
 802cb4a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 802cb4e:	705a      	strb	r2, [r3, #1]
        if( ssl->transform_out != NULL )
 802cb50:	6c25      	ldr	r5, [r4, #64]	; 0x40
 802cb52:	2d00      	cmp	r5, #0
 802cb54:	d03c      	beq.n	802cbd0 <mbedtls_ssl_write_change_cipher_spec+0xf4>
            rec.buf         = ssl->out_iv;
 802cb56:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
            rec.buf_len     = out_buf_len - ( ssl->out_iv - ssl->out_buf );
 802cb5a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
            rec.data_offset = ssl->out_msg - rec.buf;
 802cb5e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
            rec.buf_len     = out_buf_len - ( ssl->out_iv - ssl->out_buf );
 802cb62:	1ac3      	subs	r3, r0, r3
 802cb64:	f5c3 4382 	rsb	r3, r3, #16640	; 0x4100
            rec.data_offset = ssl->out_msg - rec.buf;
 802cb68:	1a09      	subs	r1, r1, r0
            rec.buf         = ssl->out_iv;
 802cb6a:	9006      	str	r0, [sp, #24]
            rec.buf_len     = out_buf_len - ( ssl->out_iv - ssl->out_buf );
 802cb6c:	333d      	adds	r3, #61	; 0x3d
            rec.data_len    = ssl->out_msglen;
 802cb6e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
            rec.buf_len     = out_buf_len - ( ssl->out_iv - ssl->out_buf );
 802cb72:	9307      	str	r3, [sp, #28]
            memcpy( &rec.ctr[0], ssl->out_ctr, 8 );
 802cb74:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
            rec.data_offset = ssl->out_msg - rec.buf;
 802cb78:	9108      	str	r1, [sp, #32]
            rec.data_len    = ssl->out_msglen;
 802cb7a:	9009      	str	r0, [sp, #36]	; 0x24
            memcpy( &rec.ctr[0], ssl->out_ctr, 8 );
 802cb7c:	6818      	ldr	r0, [r3, #0]
 802cb7e:	6859      	ldr	r1, [r3, #4]
                                       ssl->conf->transport, rec.ver );
 802cb80:	6826      	ldr	r6, [r4, #0]
            memcpy( &rec.ctr[0], ssl->out_ctr, 8 );
 802cb82:	aa03      	add	r2, sp, #12
 802cb84:	c203      	stmia	r2!, {r0, r1}
            if( ( ret = mbedtls_ssl_encrypt_buf( ssl, ssl->transform_out, &rec,
 802cb86:	e9d6 3706 	ldrd	r3, r7, [r6, #24]
        ver[0] = (unsigned char) major;
 802cb8a:	e9d4 6002 	ldrd	r6, r0, [r4, #8]
            if( ( ret = mbedtls_ssl_encrypt_buf( ssl, ssl->transform_out, &rec,
 802cb8e:	9700      	str	r7, [sp, #0]
 802cb90:	4629      	mov	r1, r5
            rec.type = ssl->out_msgtype;
 802cb92:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
        ver[1] = (unsigned char) minor;
 802cb96:	f88d 0016 	strb.w	r0, [sp, #22]
            if( ( ret = mbedtls_ssl_encrypt_buf( ssl, ssl->transform_out, &rec,
 802cb9a:	aa03      	add	r2, sp, #12
 802cb9c:	4620      	mov	r0, r4
        ver[0] = (unsigned char) major;
 802cb9e:	f88d 6015 	strb.w	r6, [sp, #21]
            rec.type = ssl->out_msgtype;
 802cba2:	f88d 5014 	strb.w	r5, [sp, #20]
            if( ( ret = mbedtls_ssl_encrypt_buf( ssl, ssl->transform_out, &rec,
 802cba6:	f7fe fe75 	bl	802b894 <mbedtls_ssl_encrypt_buf>
 802cbaa:	2800      	cmp	r0, #0
 802cbac:	d172      	bne.n	802cc94 <mbedtls_ssl_write_change_cipher_spec+0x1b8>
            if( rec.data_offset != 0 )
 802cbae:	9b08      	ldr	r3, [sp, #32]
 802cbb0:	2b00      	cmp	r3, #0
 802cbb2:	f040 809e 	bne.w	802ccf2 <mbedtls_ssl_write_change_cipher_spec+0x216>
            ssl->out_msglen = len = rec.data_len;
 802cbb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
            ssl->out_msgtype = rec.type;
 802cbb8:	f89d 0014 	ldrb.w	r0, [sp, #20]
            ssl->out_len[0] = (unsigned char)( rec.data_len >> 8 );
 802cbbc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 802cbc0:	0a11      	lsrs	r1, r2, #8
            ssl->out_msgtype = rec.type;
 802cbc2:	e9c4 0229 	strd	r0, r2, [r4, #164]	; 0xa4
            ssl->out_len[0] = (unsigned char)( rec.data_len >> 8 );
 802cbc6:	7019      	strb	r1, [r3, #0]
            ssl->out_len[1] = (unsigned char)( rec.data_len      );
 802cbc8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 802cbcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 802cbce:	7059      	strb	r1, [r3, #1]
        protected_record_size = len + mbedtls_ssl_out_hdr_len( ssl );
 802cbd0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
 802cbd4:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 802cbd8:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 802cbdc:	7018      	strb	r0, [r3, #0]
 802cbde:	1ac9      	subs	r1, r1, r3
        ssl->out_hdr  += protected_record_size;
 802cbe0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        protected_record_size = len + mbedtls_ssl_out_hdr_len( ssl );
 802cbe4:	440a      	add	r2, r1
        ssl->out_left += protected_record_size;
 802cbe6:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
        ssl->out_hdr  += protected_record_size;
 802cbea:	4413      	add	r3, r2
        mbedtls_ssl_update_out_pointers( ssl, ssl->transform_out );
 802cbec:	6c20      	ldr	r0, [r4, #64]	; 0x40
        ssl->out_left += protected_record_size;
 802cbee:	440a      	add	r2, r1
        ssl->out_ctr = ssl->out_hdr - 8;
 802cbf0:	f1a3 0508 	sub.w	r5, r3, #8
        ssl->out_len = ssl->out_hdr + 3;
 802cbf4:	1cd9      	adds	r1, r3, #3
        ssl->out_hdr  += protected_record_size;
 802cbf6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        ssl->out_iv  = ssl->out_hdr + 5;
 802cbfa:	3305      	adds	r3, #5
 802cbfc:	e9c4 1326 	strd	r1, r3, [r4, #152]	; 0x98
        ssl->out_left += protected_record_size;
 802cc00:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
        ssl->out_ctr = ssl->out_hdr - 8;
 802cc04:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
    ssl->out_msg = ssl->out_iv;
 802cc08:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    if( transform != NULL )
 802cc0c:	b148      	cbz	r0, 802cc22 <mbedtls_ssl_write_change_cipher_spec+0x146>
    if( transform->minor_ver < MBEDTLS_SSL_MINOR_VERSION_2 )
 802cc0e:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
 802cc12:	2a01      	cmp	r2, #1
 802cc14:	dd03      	ble.n	802cc1e <mbedtls_ssl_write_change_cipher_spec+0x142>
    return( transform->ivlen - transform->fixed_ivlen );
 802cc16:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 802cc1a:	1a52      	subs	r2, r2, r1
 802cc1c:	4413      	add	r3, r2
        ssl->out_msg += ssl_transform_get_explicit_iv_len( transform );
 802cc1e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            if( ++ssl->cur_out_ctr[i - 1] != 0 )
 802cc22:	f894 30b7 	ldrb.w	r3, [r4, #183]	; 0xb7
 802cc26:	3301      	adds	r3, #1
 802cc28:	b2db      	uxtb	r3, r3
 802cc2a:	f884 30b7 	strb.w	r3, [r4, #183]	; 0xb7
 802cc2e:	bb9b      	cbnz	r3, 802cc98 <mbedtls_ssl_write_change_cipher_spec+0x1bc>
 802cc30:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
 802cc34:	3301      	adds	r3, #1
 802cc36:	b2db      	uxtb	r3, r3
 802cc38:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
 802cc3c:	bb63      	cbnz	r3, 802cc98 <mbedtls_ssl_write_change_cipher_spec+0x1bc>
 802cc3e:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
 802cc42:	3301      	adds	r3, #1
 802cc44:	b2db      	uxtb	r3, r3
 802cc46:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
 802cc4a:	bb2b      	cbnz	r3, 802cc98 <mbedtls_ssl_write_change_cipher_spec+0x1bc>
 802cc4c:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 802cc50:	3301      	adds	r3, #1
 802cc52:	b2db      	uxtb	r3, r3
 802cc54:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 802cc58:	b9f3      	cbnz	r3, 802cc98 <mbedtls_ssl_write_change_cipher_spec+0x1bc>
 802cc5a:	f894 30b3 	ldrb.w	r3, [r4, #179]	; 0xb3
 802cc5e:	3301      	adds	r3, #1
 802cc60:	b2db      	uxtb	r3, r3
 802cc62:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
 802cc66:	b9bb      	cbnz	r3, 802cc98 <mbedtls_ssl_write_change_cipher_spec+0x1bc>
 802cc68:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
 802cc6c:	3301      	adds	r3, #1
 802cc6e:	b2db      	uxtb	r3, r3
 802cc70:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
 802cc74:	b983      	cbnz	r3, 802cc98 <mbedtls_ssl_write_change_cipher_spec+0x1bc>
 802cc76:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 802cc7a:	3301      	adds	r3, #1
 802cc7c:	b2db      	uxtb	r3, r3
 802cc7e:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 802cc82:	b94b      	cbnz	r3, 802cc98 <mbedtls_ssl_write_change_cipher_spec+0x1bc>
 802cc84:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 802cc88:	3301      	adds	r3, #1
 802cc8a:	b2db      	uxtb	r3, r3
 802cc8c:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
 802cc90:	b913      	cbnz	r3, 802cc98 <mbedtls_ssl_write_change_cipher_spec+0x1bc>
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 802cc92:	4819      	ldr	r0, [pc, #100]	; (802ccf8 <mbedtls_ssl_write_change_cipher_spec+0x21c>)
}
 802cc94:	b00b      	add	sp, #44	; 0x2c
 802cc96:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 802cc98:	4620      	mov	r0, r4
 802cc9a:	f7ff fab7 	bl	802c20c <mbedtls_ssl_flush_output>
}
 802cc9e:	b00b      	add	sp, #44	; 0x2c
 802cca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ! ( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&
 802cca2:	2e00      	cmp	r6, #0
 802cca4:	f47f af34 	bne.w	802cb10 <mbedtls_ssl_write_change_cipher_spec+0x34>
    if( ssl->out_msglen > MBEDTLS_SSL_OUT_CONTENT_LEN )
 802cca8:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 802ccac:	d821      	bhi.n	802ccf2 <mbedtls_ssl_write_change_cipher_spec+0x216>
        ssl->out_msg[1] = (unsigned char)( hs_len >> 16 );
 802ccae:	0c1a      	lsrs	r2, r3, #16
 802ccb0:	7042      	strb	r2, [r0, #1]
        ssl->out_msg[2] = (unsigned char)( hs_len >>  8 );
 802ccb2:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 802ccb6:	0a19      	lsrs	r1, r3, #8
 802ccb8:	7091      	strb	r1, [r2, #2]
        ssl->out_msg[3] = (unsigned char)( hs_len       );
 802ccba:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 802ccbe:	70d3      	strb	r3, [r2, #3]
        if( hs_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
 802ccc0:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 802ccc4:	e72f      	b.n	802cb26 <mbedtls_ssl_write_change_cipher_spec+0x4a>
        ssl->out_msg[1] = (unsigned char)( hs_len >> 16 );
 802ccc6:	0c1a      	lsrs	r2, r3, #16
 802ccc8:	7042      	strb	r2, [r0, #1]
        ssl->out_msg[2] = (unsigned char)( hs_len >>  8 );
 802ccca:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 802ccce:	0a19      	lsrs	r1, r3, #8
 802ccd0:	7091      	strb	r1, [r2, #2]
        ssl->out_msg[3] = (unsigned char)( hs_len       );
 802ccd2:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 802ccd6:	70d3      	strb	r3, [r2, #3]
        if( hs_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
 802ccd8:	b146      	cbz	r6, 802ccec <mbedtls_ssl_write_change_cipher_spec+0x210>
            ssl->handshake->update_checksum( ssl, ssl->out_msg, ssl->out_msglen );
 802ccda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802ccdc:	4620      	mov	r0, r4
 802ccde:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 802cce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802cce6:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 802ccea:	4798      	blx	r3
 802ccec:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 802ccf0:	e719      	b.n	802cb26 <mbedtls_ssl_write_change_cipher_spec+0x4a>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 802ccf2:	4802      	ldr	r0, [pc, #8]	; (802ccfc <mbedtls_ssl_write_change_cipher_spec+0x220>)
}
 802ccf4:	b00b      	add	sp, #44	; 0x2c
 802ccf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802ccf8:	ffff9480 	.word	0xffff9480
 802ccfc:	ffff9400 	.word	0xffff9400

0802cd00 <mbedtls_ssl_parse_change_cipher_spec>:
{
 802cd00:	b538      	push	{r3, r4, r5, lr}
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 802cd02:	2101      	movs	r1, #1
{
 802cd04:	4604      	mov	r4, r0
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 802cd06:	f7ff fc97 	bl	802c638 <mbedtls_ssl_read_record>
 802cd0a:	b9a8      	cbnz	r0, 802cd38 <mbedtls_ssl_parse_change_cipher_spec+0x38>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
 802cd0c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 802cd0e:	2b14      	cmp	r3, #20
 802cd10:	d113      	bne.n	802cd3a <mbedtls_ssl_parse_change_cipher_spec+0x3a>
    ssl->transform_in = ssl->transform_negotiate;
 802cd12:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    ssl->session_in = ssl->session_negotiate;
 802cd14:	6b62      	ldr	r2, [r4, #52]	; 0x34
    memset( ssl->in_ctr, 0, 8 );
 802cd16:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    ssl->transform_in = ssl->transform_negotiate;
 802cd18:	63e1      	str	r1, [r4, #60]	; 0x3c
    ssl->session_in = ssl->session_negotiate;
 802cd1a:	62a2      	str	r2, [r4, #40]	; 0x28
    memset( ssl->in_ctr, 0, 8 );
 802cd1c:	6018      	str	r0, [r3, #0]
 802cd1e:	6058      	str	r0, [r3, #4]
        ssl->in_ctr = ssl->in_hdr - 8;
 802cd20:	6e23      	ldr	r3, [r4, #96]	; 0x60
    ssl->state++;
 802cd22:	6862      	ldr	r2, [r4, #4]
        ssl->in_ctr = ssl->in_hdr - 8;
 802cd24:	f1a3 0508 	sub.w	r5, r3, #8
        ssl->in_len = ssl->in_hdr + 3;
 802cd28:	1cd9      	adds	r1, r3, #3
        ssl->in_iv  = ssl->in_hdr + 5;
 802cd2a:	3305      	adds	r3, #5
 802cd2c:	e9c4 1319 	strd	r1, r3, [r4, #100]	; 0x64
    ssl->state++;
 802cd30:	3201      	adds	r2, #1
        ssl->in_ctr = ssl->in_hdr - 8;
 802cd32:	65e5      	str	r5, [r4, #92]	; 0x5c
    ssl->in_msg = ssl->in_iv;
 802cd34:	66e3      	str	r3, [r4, #108]	; 0x6c
    ssl->state++;
 802cd36:	6062      	str	r2, [r4, #4]
}
 802cd38:	bd38      	pop	{r3, r4, r5, pc}
    if( ssl == NULL || ssl->conf == NULL )
 802cd3a:	6823      	ldr	r3, [r4, #0]
 802cd3c:	b183      	cbz	r3, 802cd60 <mbedtls_ssl_parse_change_cipher_spec+0x60>
    ssl->out_msglen = 2;
 802cd3e:	2302      	movs	r3, #2
    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
 802cd40:	2015      	movs	r0, #21
    ssl->out_msg[1] = message;
 802cd42:	220a      	movs	r2, #10
    ssl->out_msg[0] = level;
 802cd44:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
    ssl->out_msglen = 2;
 802cd48:	e9c4 0329 	strd	r0, r3, [r4, #164]	; 0xa4
    ssl->out_msg[0] = level;
 802cd4c:	700b      	strb	r3, [r1, #0]
    ssl->out_msg[1] = message;
 802cd4e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
 802cd52:	4620      	mov	r0, r4
 802cd54:	2101      	movs	r1, #1
    ssl->out_msg[1] = message;
 802cd56:	705a      	strb	r2, [r3, #1]
    if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
 802cd58:	f7ff fb9e 	bl	802c498 <mbedtls_ssl_write_record>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 802cd5c:	4801      	ldr	r0, [pc, #4]	; (802cd64 <mbedtls_ssl_parse_change_cipher_spec+0x64>)
}
 802cd5e:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 802cd60:	4800      	ldr	r0, [pc, #0]	; (802cd64 <mbedtls_ssl_parse_change_cipher_spec+0x64>)
}
 802cd62:	bd38      	pop	{r3, r4, r5, pc}
 802cd64:	ffff8900 	.word	0xffff8900

0802cd68 <mbedtls_ssl_update_out_pointers>:
        ssl->out_ctr = ssl->out_hdr - 8;
 802cd68:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
{
 802cd6c:	b410      	push	{r4}
        ssl->out_len = ssl->out_hdr + 3;
 802cd6e:	1cda      	adds	r2, r3, #3
        ssl->out_ctr = ssl->out_hdr - 8;
 802cd70:	f1a3 0408 	sub.w	r4, r3, #8
        ssl->out_iv  = ssl->out_hdr + 5;
 802cd74:	3305      	adds	r3, #5
 802cd76:	e9c0 2326 	strd	r2, r3, [r0, #152]	; 0x98
        ssl->out_ctr = ssl->out_hdr - 8;
 802cd7a:	f8c0 4090 	str.w	r4, [r0, #144]	; 0x90
    ssl->out_msg = ssl->out_iv;
 802cd7e:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
    if( transform != NULL )
 802cd82:	b149      	cbz	r1, 802cd98 <mbedtls_ssl_update_out_pointers+0x30>
    if( transform->minor_ver < MBEDTLS_SSL_MINOR_VERSION_2 )
 802cd84:	f8d1 20cc 	ldr.w	r2, [r1, #204]	; 0xcc
 802cd88:	2a01      	cmp	r2, #1
 802cd8a:	dd03      	ble.n	802cd94 <mbedtls_ssl_update_out_pointers+0x2c>
    return( transform->ivlen - transform->fixed_ivlen );
 802cd8c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 802cd90:	1a52      	subs	r2, r2, r1
 802cd92:	4413      	add	r3, r2
        ssl->out_msg += ssl_transform_get_explicit_iv_len( transform );
 802cd94:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
 802cd98:	f85d 4b04 	ldr.w	r4, [sp], #4
 802cd9c:	4770      	bx	lr
 802cd9e:	bf00      	nop

0802cda0 <mbedtls_ssl_reset_in_out_pointers>:
{
 802cda0:	b430      	push	{r4, r5}
        ssl->out_hdr = ssl->out_buf + 8;
 802cda2:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
        ssl->in_hdr  = ssl->in_buf  + 8;
 802cda6:	6d83      	ldr	r3, [r0, #88]	; 0x58
        ssl->out_hdr = ssl->out_buf + 8;
 802cda8:	f102 0108 	add.w	r1, r2, #8
        ssl->in_hdr  = ssl->in_buf  + 8;
 802cdac:	f103 0508 	add.w	r5, r3, #8
        ssl->out_len = ssl->out_hdr + 3;
 802cdb0:	f102 040b 	add.w	r4, r2, #11
        ssl->out_ctr = ssl->out_hdr - 8;
 802cdb4:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
        ssl->out_hdr = ssl->out_buf + 8;
 802cdb8:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
        ssl->out_iv  = ssl->out_hdr + 5;
 802cdbc:	320d      	adds	r2, #13
        ssl->in_len = ssl->in_hdr + 3;
 802cdbe:	f103 010b 	add.w	r1, r3, #11
        ssl->in_ctr = ssl->in_hdr - 8;
 802cdc2:	65c3      	str	r3, [r0, #92]	; 0x5c
        ssl->in_iv  = ssl->in_hdr + 5;
 802cdc4:	330d      	adds	r3, #13
        ssl->out_iv  = ssl->out_hdr + 5;
 802cdc6:	e9c0 4226 	strd	r4, r2, [r0, #152]	; 0x98
        ssl->in_hdr  = ssl->in_buf  + 8;
 802cdca:	6605      	str	r5, [r0, #96]	; 0x60
        ssl->in_iv  = ssl->in_hdr + 5;
 802cdcc:	e9c0 1319 	strd	r1, r3, [r0, #100]	; 0x64
}
 802cdd0:	bc30      	pop	{r4, r5}
    ssl->out_msg = ssl->out_iv;
 802cdd2:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
    ssl->in_msg = ssl->in_iv;
 802cdd6:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 802cdd8:	4770      	bx	lr
 802cdda:	bf00      	nop

0802cddc <mbedtls_ssl_read>:
    if( ssl == NULL || ssl->conf == NULL )
 802cddc:	2800      	cmp	r0, #0
 802cdde:	f000 80a2 	beq.w	802cf26 <mbedtls_ssl_read+0x14a>
 802cde2:	6803      	ldr	r3, [r0, #0]
{
 802cde4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802cde8:	4604      	mov	r4, r0
    if( ssl == NULL || ssl->conf == NULL )
 802cdea:	2b00      	cmp	r3, #0
 802cdec:	f000 8099 	beq.w	802cf22 <mbedtls_ssl_read+0x146>
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 802cdf0:	6843      	ldr	r3, [r0, #4]
 802cdf2:	460d      	mov	r5, r1
 802cdf4:	2b10      	cmp	r3, #16
 802cdf6:	4616      	mov	r6, r2
 802cdf8:	d17a      	bne.n	802cef0 <mbedtls_ssl_read+0x114>
    while( ssl->in_offt == NULL )
 802cdfa:	6f21      	ldr	r1, [r4, #112]	; 0x70
 802cdfc:	bb09      	cbnz	r1, 802ce42 <mbedtls_ssl_read+0x66>
        if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 802cdfe:	f04f 0801 	mov.w	r8, #1
    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
 802ce02:	2715      	movs	r7, #21
        if( ssl->f_get_timer != NULL &&
 802ce04:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802ce06:	b11b      	cbz	r3, 802ce10 <mbedtls_ssl_read+0x34>
            ssl->f_get_timer( ssl->p_timer ) == -1 )
 802ce08:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 802ce0a:	4798      	blx	r3
        if( ssl->f_get_timer != NULL &&
 802ce0c:	3001      	adds	r0, #1
 802ce0e:	d066      	beq.n	802cede <mbedtls_ssl_read+0x102>
        if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 802ce10:	2101      	movs	r1, #1
 802ce12:	4620      	mov	r0, r4
 802ce14:	f7ff fc10 	bl	802c638 <mbedtls_ssl_read_record>
 802ce18:	2800      	cmp	r0, #0
 802ce1a:	d174      	bne.n	802cf06 <mbedtls_ssl_read+0x12a>
        if( ssl->in_msglen  == 0 &&
 802ce1c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 802ce1e:	2b00      	cmp	r3, #0
 802ce20:	d138      	bne.n	802ce94 <mbedtls_ssl_read+0xb8>
            ssl->in_msgtype == MBEDTLS_SSL_MSG_APPLICATION_DATA )
 802ce22:	6f63      	ldr	r3, [r4, #116]	; 0x74
        if( ssl->in_msglen  == 0 &&
 802ce24:	2b17      	cmp	r3, #23
 802ce26:	d02f      	beq.n	802ce88 <mbedtls_ssl_read+0xac>
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 802ce28:	2b16      	cmp	r3, #22
 802ce2a:	d036      	beq.n	802ce9a <mbedtls_ssl_read+0xbe>
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 802ce2c:	2b15      	cmp	r3, #21
 802ce2e:	d074      	beq.n	802cf1a <mbedtls_ssl_read+0x13e>
        if( ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
 802ce30:	2b17      	cmp	r3, #23
 802ce32:	d16d      	bne.n	802cf10 <mbedtls_ssl_read+0x134>
        if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
 802ce34:	6863      	ldr	r3, [r4, #4]
        ssl->in_offt = ssl->in_msg;
 802ce36:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
        if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
 802ce38:	2b10      	cmp	r3, #16
        ssl->in_offt = ssl->in_msg;
 802ce3a:	6721      	str	r1, [r4, #112]	; 0x70
        if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
 802ce3c:	d019      	beq.n	802ce72 <mbedtls_ssl_read+0x96>
    while( ssl->in_offt == NULL )
 802ce3e:	2900      	cmp	r1, #0
 802ce40:	d0e0      	beq.n	802ce04 <mbedtls_ssl_read+0x28>
    n = ( len < ssl->in_msglen )
 802ce42:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 802ce44:	4286      	cmp	r6, r0
 802ce46:	bf28      	it	cs
 802ce48:	4606      	movcs	r6, r0
    memcpy( buf, ssl->in_offt, n );
 802ce4a:	4628      	mov	r0, r5
 802ce4c:	4632      	mov	r2, r6
 802ce4e:	f002 ffe3 	bl	802fe18 <memcpy>
    ssl->in_msglen -= n;
 802ce52:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    mbedtls_platform_zeroize( ssl->in_offt, n );
 802ce54:	4631      	mov	r1, r6
    ssl->in_msglen -= n;
 802ce56:	1b9b      	subs	r3, r3, r6
 802ce58:	67a3      	str	r3, [r4, #120]	; 0x78
    mbedtls_platform_zeroize( ssl->in_offt, n );
 802ce5a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 802ce5c:	f7fa fe66 	bl	8027b2c <mbedtls_platform_zeroize>
    if( ssl->in_msglen == 0 )
 802ce60:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 802ce62:	2b00      	cmp	r3, #0
 802ce64:	d056      	beq.n	802cf14 <mbedtls_ssl_read+0x138>
        ssl->in_offt += n;
 802ce66:	6f23      	ldr	r3, [r4, #112]	; 0x70
 802ce68:	4433      	add	r3, r6
    return( (int) n );
 802ce6a:	4630      	mov	r0, r6
 802ce6c:	6723      	str	r3, [r4, #112]	; 0x70
}
 802ce6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ssl->f_set_timer == NULL )
 802ce72:	6d23      	ldr	r3, [r4, #80]	; 0x50
 802ce74:	2b00      	cmp	r3, #0
 802ce76:	d0e2      	beq.n	802ce3e <mbedtls_ssl_read+0x62>
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
 802ce78:	2200      	movs	r2, #0
 802ce7a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 802ce7c:	4611      	mov	r1, r2
 802ce7e:	4798      	blx	r3
 802ce80:	6f21      	ldr	r1, [r4, #112]	; 0x70
    while( ssl->in_offt == NULL )
 802ce82:	2900      	cmp	r1, #0
 802ce84:	d0be      	beq.n	802ce04 <mbedtls_ssl_read+0x28>
 802ce86:	e7dc      	b.n	802ce42 <mbedtls_ssl_read+0x66>
            if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 802ce88:	2101      	movs	r1, #1
 802ce8a:	4620      	mov	r0, r4
 802ce8c:	f7ff fbd4 	bl	802c638 <mbedtls_ssl_read_record>
 802ce90:	2800      	cmp	r0, #0
 802ce92:	d138      	bne.n	802cf06 <mbedtls_ssl_read+0x12a>
 802ce94:	6f63      	ldr	r3, [r4, #116]	; 0x74
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 802ce96:	2b16      	cmp	r3, #22
 802ce98:	d1c8      	bne.n	802ce2c <mbedtls_ssl_read+0x50>
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 802ce9a:	6823      	ldr	r3, [r4, #0]
 802ce9c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 802cea0:	07db      	lsls	r3, r3, #31
 802cea2:	d406      	bmi.n	802ceb2 <mbedtls_ssl_read+0xd6>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
 802cea4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 802cea6:	781b      	ldrb	r3, [r3, #0]
 802cea8:	bb93      	cbnz	r3, 802cf10 <mbedtls_ssl_read+0x134>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
 802ceaa:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 802ceae:	2b04      	cmp	r3, #4
 802ceb0:	d12e      	bne.n	802cf10 <mbedtls_ssl_read+0x134>
                if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 802ceb2:	68e3      	ldr	r3, [r4, #12]
 802ceb4:	2b00      	cmp	r3, #0
 802ceb6:	dd32      	ble.n	802cf1e <mbedtls_ssl_read+0x142>
    ssl->out_msglen = 2;
 802ceb8:	2102      	movs	r1, #2
    ssl->out_msg[1] = message;
 802ceba:	2264      	movs	r2, #100	; 0x64
    ssl->out_msg[0] = level;
 802cebc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    ssl->out_msglen = 2;
 802cec0:	e9c4 7129 	strd	r7, r1, [r4, #164]	; 0xa4
    ssl->out_msg[0] = level;
 802cec4:	f883 8000 	strb.w	r8, [r3]
    ssl->out_msg[1] = message;
 802cec8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
 802cecc:	2101      	movs	r1, #1
 802cece:	4620      	mov	r0, r4
    ssl->out_msg[1] = message;
 802ced0:	705a      	strb	r2, [r3, #1]
    if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
 802ced2:	f7ff fae1 	bl	802c498 <mbedtls_ssl_write_record>
 802ced6:	2800      	cmp	r0, #0
 802ced8:	d0d2      	beq.n	802ce80 <mbedtls_ssl_read+0xa4>
}
 802ceda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ssl->f_set_timer == NULL )
 802cede:	6d23      	ldr	r3, [r4, #80]	; 0x50
 802cee0:	2b00      	cmp	r3, #0
 802cee2:	d095      	beq.n	802ce10 <mbedtls_ssl_read+0x34>
            mbedtls_ssl_set_timer( ssl, ssl->conf->read_timeout );
 802cee4:	6822      	ldr	r2, [r4, #0]
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
 802cee6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
            mbedtls_ssl_set_timer( ssl, ssl->conf->read_timeout );
 802cee8:	6d52      	ldr	r2, [r2, #84]	; 0x54
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
 802ceea:	0891      	lsrs	r1, r2, #2
 802ceec:	4798      	blx	r3
 802ceee:	e78f      	b.n	802ce10 <mbedtls_ssl_read+0x34>
        ret = mbedtls_ssl_handshake( ssl );
 802cef0:	f001 f86a 	bl	802dfc8 <mbedtls_ssl_handshake>
        if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 802cef4:	f510 4fd6 	cmn.w	r0, #27392	; 0x6b00
 802cef8:	f43f af7f 	beq.w	802cdfa <mbedtls_ssl_read+0x1e>
 802cefc:	2800      	cmp	r0, #0
 802cefe:	f43f af7c 	beq.w	802cdfa <mbedtls_ssl_read+0x1e>
}
 802cf02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
 802cf06:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
 802cf0a:	d1b0      	bne.n	802ce6e <mbedtls_ssl_read+0x92>
                return( 0 );
 802cf0c:	2000      	movs	r0, #0
 802cf0e:	e7ae      	b.n	802ce6e <mbedtls_ssl_read+0x92>
                return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 802cf10:	4806      	ldr	r0, [pc, #24]	; (802cf2c <mbedtls_ssl_read+0x150>)
 802cf12:	e7ac      	b.n	802ce6e <mbedtls_ssl_read+0x92>
        ssl->keep_current_message = 0;
 802cf14:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802cf18:	e7a7      	b.n	802ce6a <mbedtls_ssl_read+0x8e>
            return( MBEDTLS_ERR_SSL_WANT_READ );
 802cf1a:	4805      	ldr	r0, [pc, #20]	; (802cf30 <mbedtls_ssl_read+0x154>)
 802cf1c:	e7a7      	b.n	802ce6e <mbedtls_ssl_read+0x92>
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 802cf1e:	4805      	ldr	r0, [pc, #20]	; (802cf34 <mbedtls_ssl_read+0x158>)
 802cf20:	e7a5      	b.n	802ce6e <mbedtls_ssl_read+0x92>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 802cf22:	4805      	ldr	r0, [pc, #20]	; (802cf38 <mbedtls_ssl_read+0x15c>)
 802cf24:	e7a3      	b.n	802ce6e <mbedtls_ssl_read+0x92>
 802cf26:	4804      	ldr	r0, [pc, #16]	; (802cf38 <mbedtls_ssl_read+0x15c>)
}
 802cf28:	4770      	bx	lr
 802cf2a:	bf00      	nop
 802cf2c:	ffff8900 	.word	0xffff8900
 802cf30:	ffff9700 	.word	0xffff9700
 802cf34:	ffff9400 	.word	0xffff9400
 802cf38:	ffff8f00 	.word	0xffff8f00

0802cf3c <mbedtls_ssl_write>:
    if( ssl == NULL || ssl->conf == NULL )
 802cf3c:	b388      	cbz	r0, 802cfa2 <mbedtls_ssl_write+0x66>
 802cf3e:	6803      	ldr	r3, [r0, #0]
{
 802cf40:	b570      	push	{r4, r5, r6, lr}
 802cf42:	4604      	mov	r4, r0
    if( ssl == NULL || ssl->conf == NULL )
 802cf44:	b35b      	cbz	r3, 802cf9e <mbedtls_ssl_write+0x62>
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 802cf46:	6843      	ldr	r3, [r0, #4]
 802cf48:	460e      	mov	r6, r1
 802cf4a:	2b10      	cmp	r3, #16
 802cf4c:	4615      	mov	r5, r2
 802cf4e:	d002      	beq.n	802cf56 <mbedtls_ssl_write+0x1a>
        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
 802cf50:	f001 f83a 	bl	802dfc8 <mbedtls_ssl_handshake>
 802cf54:	b978      	cbnz	r0, 802cf76 <mbedtls_ssl_write+0x3a>
    int ret = mbedtls_ssl_get_max_out_record_payload( ssl );
 802cf56:	4620      	mov	r0, r4
 802cf58:	f001 f832 	bl	802dfc0 <mbedtls_ssl_get_max_out_record_payload>
    if( ret < 0 )
 802cf5c:	2800      	cmp	r0, #0
 802cf5e:	db0a      	blt.n	802cf76 <mbedtls_ssl_write+0x3a>
    if( ssl->out_left != 0 )
 802cf60:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 802cf64:	4285      	cmp	r5, r0
 802cf66:	bf28      	it	cs
 802cf68:	4605      	movcs	r5, r0
 802cf6a:	b12b      	cbz	r3, 802cf78 <mbedtls_ssl_write+0x3c>
        if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 802cf6c:	4620      	mov	r0, r4
 802cf6e:	f7ff f94d 	bl	802c20c <mbedtls_ssl_flush_output>
 802cf72:	b900      	cbnz	r0, 802cf76 <mbedtls_ssl_write+0x3a>
    return( (int) len );
 802cf74:	4628      	mov	r0, r5
}
 802cf76:	bd70      	pop	{r4, r5, r6, pc}
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
 802cf78:	2317      	movs	r3, #23
        memcpy( ssl->out_msg, buf, len );
 802cf7a:	4631      	mov	r1, r6
 802cf7c:	462a      	mov	r2, r5
 802cf7e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
        ssl->out_msglen  = len;
 802cf82:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
 802cf86:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        memcpy( ssl->out_msg, buf, len );
 802cf8a:	f002 ff45 	bl	802fe18 <memcpy>
        if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
 802cf8e:	4620      	mov	r0, r4
 802cf90:	2101      	movs	r1, #1
 802cf92:	f7ff fa81 	bl	802c498 <mbedtls_ssl_write_record>
 802cf96:	2800      	cmp	r0, #0
 802cf98:	d1ed      	bne.n	802cf76 <mbedtls_ssl_write+0x3a>
    return( (int) len );
 802cf9a:	4628      	mov	r0, r5
 802cf9c:	e7eb      	b.n	802cf76 <mbedtls_ssl_write+0x3a>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 802cf9e:	4802      	ldr	r0, [pc, #8]	; (802cfa8 <mbedtls_ssl_write+0x6c>)
}
 802cfa0:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 802cfa2:	4801      	ldr	r0, [pc, #4]	; (802cfa8 <mbedtls_ssl_write+0x6c>)
}
 802cfa4:	4770      	bx	lr
 802cfa6:	bf00      	nop
 802cfa8:	ffff8f00 	.word	0xffff8f00

0802cfac <mbedtls_ssl_close_notify>:
    if( ssl == NULL || ssl->conf == NULL )
 802cfac:	b1e0      	cbz	r0, 802cfe8 <mbedtls_ssl_close_notify+0x3c>
 802cfae:	6802      	ldr	r2, [r0, #0]
 802cfb0:	b1d2      	cbz	r2, 802cfe8 <mbedtls_ssl_close_notify+0x3c>
    if( ssl->out_left != 0 )
 802cfb2:	f8d0 20ac 	ldr.w	r2, [r0, #172]	; 0xac
 802cfb6:	b922      	cbnz	r2, 802cfc2 <mbedtls_ssl_close_notify+0x16>
    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
 802cfb8:	6841      	ldr	r1, [r0, #4]
 802cfba:	2910      	cmp	r1, #16
 802cfbc:	d003      	beq.n	802cfc6 <mbedtls_ssl_close_notify+0x1a>
    return( 0 );
 802cfbe:	4610      	mov	r0, r2
}
 802cfc0:	4770      	bx	lr
        return( mbedtls_ssl_flush_output( ssl ) );
 802cfc2:	f7ff b923 	b.w	802c20c <mbedtls_ssl_flush_output>
{
 802cfc6:	b430      	push	{r4, r5}
    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
 802cfc8:	2415      	movs	r4, #21
    ssl->out_msglen = 2;
 802cfca:	2502      	movs	r5, #2
    ssl->out_msg[0] = level;
 802cfcc:	2101      	movs	r1, #1
    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
 802cfce:	f8c0 40a4 	str.w	r4, [r0, #164]	; 0xa4
    ssl->out_msg[0] = level;
 802cfd2:	f8d0 40a0 	ldr.w	r4, [r0, #160]	; 0xa0
    ssl->out_msglen = 2;
 802cfd6:	f8c0 50a8 	str.w	r5, [r0, #168]	; 0xa8
    ssl->out_msg[0] = level;
 802cfda:	7021      	strb	r1, [r4, #0]
    ssl->out_msg[1] = message;
 802cfdc:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 802cfe0:	705a      	strb	r2, [r3, #1]
}
 802cfe2:	bc30      	pop	{r4, r5}
    if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
 802cfe4:	f7ff ba58 	b.w	802c498 <mbedtls_ssl_write_record>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 802cfe8:	4800      	ldr	r0, [pc, #0]	; (802cfec <mbedtls_ssl_close_notify+0x40>)
 802cfea:	4770      	bx	lr
 802cfec:	ffff8f00 	.word	0xffff8f00

0802cff0 <mbedtls_ssl_transform_free>:
    if( transform == NULL )
 802cff0:	b1b0      	cbz	r0, 802d020 <mbedtls_ssl_transform_free+0x30>
{
 802cff2:	b510      	push	{r4, lr}
 802cff4:	4604      	mov	r4, r0
    mbedtls_cipher_free( &transform->cipher_ctx_enc );
 802cff6:	304c      	adds	r0, #76	; 0x4c
 802cff8:	f7f6 feec 	bl	8023dd4 <mbedtls_cipher_free>
    mbedtls_cipher_free( &transform->cipher_ctx_dec );
 802cffc:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 802d000:	f7f6 fee8 	bl	8023dd4 <mbedtls_cipher_free>
    mbedtls_md_free( &transform->md_ctx_enc );
 802d004:	f104 0034 	add.w	r0, r4, #52	; 0x34
 802d008:	f7f8 fe34 	bl	8025c74 <mbedtls_md_free>
    mbedtls_md_free( &transform->md_ctx_dec );
 802d00c:	f104 0040 	add.w	r0, r4, #64	; 0x40
 802d010:	f7f8 fe30 	bl	8025c74 <mbedtls_md_free>
    mbedtls_platform_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 802d014:	4620      	mov	r0, r4
}
 802d016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 802d01a:	21d0      	movs	r1, #208	; 0xd0
 802d01c:	f7fa bd86 	b.w	8027b2c <mbedtls_platform_zeroize>
 802d020:	4770      	bx	lr
 802d022:	bf00      	nop

0802d024 <mbedtls_ssl_write_version>:
        ver[0] = (unsigned char) major;
 802d024:	7018      	strb	r0, [r3, #0]
        ver[1] = (unsigned char) minor;
 802d026:	7059      	strb	r1, [r3, #1]
    }
}
 802d028:	4770      	bx	lr
 802d02a:	bf00      	nop

0802d02c <mbedtls_ssl_read_version>:
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
 802d02c:	781a      	ldrb	r2, [r3, #0]
 802d02e:	6002      	str	r2, [r0, #0]
        *minor = ver[1];
 802d030:	785b      	ldrb	r3, [r3, #1]
 802d032:	600b      	str	r3, [r1, #0]
    }
}
 802d034:	4770      	bx	lr
 802d036:	bf00      	nop

0802d038 <ssl_calc_finished_tls_sha256>:

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_calc_finished_tls_sha256(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 802d038:	b5f0      	push	{r4, r5, r6, r7, lr}
    psa_status_t status;
#else
    mbedtls_sha256_context sha256;
#endif

    mbedtls_ssl_session *session = ssl->session_negotiate;
 802d03a:	6b46      	ldr	r6, [r0, #52]	; 0x34
{
 802d03c:	4604      	mov	r4, r0
 802d03e:	460d      	mov	r5, r1
 802d040:	b0ab      	sub	sp, #172	; 0xac
    if( !session )
 802d042:	b34e      	cbz	r6, 802d098 <ssl_calc_finished_tls_sha256+0x60>
        session = ssl->session;

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 802d044:	4b15      	ldr	r3, [pc, #84]	; (802d09c <ssl_calc_finished_tls_sha256+0x64>)
 802d046:	4916      	ldr	r1, [pc, #88]	; (802d0a0 <ssl_calc_finished_tls_sha256+0x68>)
        return;
    }
    MBEDTLS_SSL_DEBUG_BUF( 3, "PSA calculated padbuf", padbuf, 32 );
#else

    mbedtls_sha256_init( &sha256 );
 802d048:	a80f      	add	r0, sp, #60	; 0x3c
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 802d04a:	2a00      	cmp	r2, #0
 802d04c:	bf0c      	ite	eq
 802d04e:	461a      	moveq	r2, r3
 802d050:	460a      	movne	r2, r1
 802d052:	9205      	str	r2, [sp, #20]
    mbedtls_sha256_init( &sha256 );
 802d054:	f7fc ff24 	bl	8029ea0 <mbedtls_sha256_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha256" ) );

    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 802d058:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802d05a:	a80f      	add	r0, sp, #60	; 0x3c
 802d05c:	3120      	adds	r1, #32
 802d05e:	f7fc ff29 	bl	8029eb4 <mbedtls_sha256_clone>
#if !defined(MBEDTLS_SHA256_ALT)
    MBEDTLS_SSL_DEBUG_BUF( 4, "finished sha2 state", (unsigned char *)
                   sha256.state, sizeof( sha256.state ) );
#endif

    mbedtls_sha256_finish_ret( &sha256, padbuf );
 802d062:	a907      	add	r1, sp, #28
 802d064:	a80f      	add	r0, sp, #60	; 0x3c
 802d066:	f7fd fc8b 	bl	802a980 <mbedtls_sha256_finish_ret>
    mbedtls_sha256_free( &sha256 );
 802d06a:	a80f      	add	r0, sp, #60	; 0x3c
 802d06c:	f7fc ff1c 	bl	8029ea8 <mbedtls_sha256_free>
#endif /* MBEDTLS_USE_PSA_CRYPTO */

    ssl->handshake->tls_prf( session->master, 48, sender,
 802d070:	210c      	movs	r1, #12
 802d072:	2720      	movs	r7, #32
 802d074:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802d076:	e9cd 5101 	strd	r5, r1, [sp, #4]
 802d07a:	9700      	str	r7, [sp, #0]
 802d07c:	9a05      	ldr	r2, [sp, #20]
 802d07e:	f8d3 4098 	ldr.w	r4, [r3, #152]	; 0x98
 802d082:	2130      	movs	r1, #48	; 0x30
 802d084:	ab07      	add	r3, sp, #28
 802d086:	f106 002c 	add.w	r0, r6, #44	; 0x2c
 802d08a:	47a0      	blx	r4
                             padbuf, 32, buf, len );

    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );

    mbedtls_platform_zeroize(  padbuf, sizeof(  padbuf ) );
 802d08c:	4639      	mov	r1, r7
 802d08e:	a807      	add	r0, sp, #28
 802d090:	f7fa fd4c 	bl	8027b2c <mbedtls_platform_zeroize>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
}
 802d094:	b02b      	add	sp, #172	; 0xac
 802d096:	bdf0      	pop	{r4, r5, r6, r7, pc}
        session = ssl->session;
 802d098:	6b06      	ldr	r6, [r0, #48]	; 0x30
 802d09a:	e7d3      	b.n	802d044 <ssl_calc_finished_tls_sha256+0xc>
 802d09c:	08035944 	.word	0x08035944
 802d0a0:	08035954 	.word	0x08035954

0802d0a4 <ssl_calc_verify_tls_sha256>:
{
 802d0a4:	b570      	push	{r4, r5, r6, lr}
 802d0a6:	4606      	mov	r6, r0
 802d0a8:	460d      	mov	r5, r1
 802d0aa:	b09c      	sub	sp, #112	; 0x70
    mbedtls_sha256_init( &sha256 );
 802d0ac:	a801      	add	r0, sp, #4
{
 802d0ae:	4614      	mov	r4, r2
    mbedtls_sha256_init( &sha256 );
 802d0b0:	f7fc fef6 	bl	8029ea0 <mbedtls_sha256_init>
    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 802d0b4:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 802d0b6:	a801      	add	r0, sp, #4
 802d0b8:	3120      	adds	r1, #32
 802d0ba:	f7fc fefb 	bl	8029eb4 <mbedtls_sha256_clone>
    mbedtls_sha256_finish_ret( &sha256, hash );
 802d0be:	4629      	mov	r1, r5
 802d0c0:	a801      	add	r0, sp, #4
 802d0c2:	f7fd fc5d 	bl	802a980 <mbedtls_sha256_finish_ret>
    *hlen = 32;
 802d0c6:	2320      	movs	r3, #32
    mbedtls_sha256_free( &sha256 );
 802d0c8:	a801      	add	r0, sp, #4
    *hlen = 32;
 802d0ca:	6023      	str	r3, [r4, #0]
    mbedtls_sha256_free( &sha256 );
 802d0cc:	f7fc feec 	bl	8029ea8 <mbedtls_sha256_free>
}
 802d0d0:	b01c      	add	sp, #112	; 0x70
 802d0d2:	bd70      	pop	{r4, r5, r6, pc}

0802d0d4 <ssl_update_checksum_start>:
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
 802d0d4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 802d0d6:	3020      	adds	r0, #32
 802d0d8:	f7fd bc4c 	b.w	802a974 <mbedtls_sha256_update_ret>

0802d0dc <tls_prf_generic.constprop.0>:
static int tls_prf_generic( mbedtls_md_type_t md_type,
 802d0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d0e0:	4604      	mov	r4, r0
 802d0e2:	b091      	sub	sp, #68	; 0x44
    mbedtls_md_init( &md_ctx );
 802d0e4:	a805      	add	r0, sp, #20
static int tls_prf_generic( mbedtls_md_type_t md_type,
 802d0e6:	4691      	mov	r9, r2
 802d0e8:	e9cd 4101 	strd	r4, r1, [sp, #4]
 802d0ec:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 802d0ee:	9300      	str	r3, [sp, #0]
    mbedtls_md_init( &md_ctx );
 802d0f0:	f7f8 fdba 	bl	8025c68 <mbedtls_md_init>
    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
 802d0f4:	2006      	movs	r0, #6
 802d0f6:	f7f8 fdab 	bl	8025c50 <mbedtls_md_info_from_type>
 802d0fa:	2800      	cmp	r0, #0
 802d0fc:	d079      	beq.n	802d1f2 <tls_prf_generic.constprop.0+0x116>
    md_len = mbedtls_md_get_size( md_info );
 802d0fe:	4680      	mov	r8, r0
 802d100:	f7f9 f898 	bl	8026234 <mbedtls_md_get_size>
 802d104:	4605      	mov	r5, r0
    tmp_len = md_len + strlen( label ) + rlen;
 802d106:	4648      	mov	r0, r9
 802d108:	f7e3 f8a0 	bl	801024c <strlen>
 802d10c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 802d10e:	4683      	mov	fp, r0
 802d110:	1882      	adds	r2, r0, r2
 802d112:	1957      	adds	r7, r2, r5
    tmp = mbedtls_calloc( 1, tmp_len );
 802d114:	4639      	mov	r1, r7
 802d116:	2001      	movs	r0, #1
    tmp_len = md_len + strlen( label ) + rlen;
 802d118:	9203      	str	r2, [sp, #12]
    tmp = mbedtls_calloc( 1, tmp_len );
 802d11a:	f002 fe2d 	bl	802fd78 <calloc>
    if( tmp == NULL )
 802d11e:	4604      	mov	r4, r0
 802d120:	2800      	cmp	r0, #0
 802d122:	d069      	beq.n	802d1f8 <tls_prf_generic.constprop.0+0x11c>
    memcpy( tmp + md_len, label, nb );
 802d124:	eb00 0a05 	add.w	sl, r0, r5
 802d128:	4649      	mov	r1, r9
 802d12a:	465a      	mov	r2, fp
 802d12c:	4650      	mov	r0, sl
 802d12e:	f002 fe73 	bl	802fe18 <memcpy>
    memcpy( tmp + md_len + nb, random, rlen );
 802d132:	eb05 000b 	add.w	r0, r5, fp
 802d136:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 802d138:	9900      	ldr	r1, [sp, #0]
 802d13a:	4420      	add	r0, r4
 802d13c:	f002 fe6c 	bl	802fe18 <memcpy>
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
 802d140:	4641      	mov	r1, r8
 802d142:	2201      	movs	r2, #1
 802d144:	a805      	add	r0, sp, #20
 802d146:	f7f8 fddf 	bl	8025d08 <mbedtls_md_setup>
 802d14a:	4680      	mov	r8, r0
 802d14c:	b198      	cbz	r0, 802d176 <tls_prf_generic.constprop.0+0x9a>
 802d14e:	f10d 0a20 	add.w	sl, sp, #32
    mbedtls_md_free( &md_ctx );
 802d152:	a805      	add	r0, sp, #20
 802d154:	f7f8 fd8e 	bl	8025c74 <mbedtls_md_free>
    mbedtls_platform_zeroize( tmp, tmp_len );
 802d158:	4639      	mov	r1, r7
 802d15a:	4620      	mov	r0, r4
 802d15c:	f7fa fce6 	bl	8027b2c <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( h_i, sizeof( h_i ) );
 802d160:	4650      	mov	r0, sl
 802d162:	2120      	movs	r1, #32
 802d164:	f7fa fce2 	bl	8027b2c <mbedtls_platform_zeroize>
    mbedtls_free( tmp );
 802d168:	4620      	mov	r0, r4
 802d16a:	f002 fe3f 	bl	802fdec <free>
}
 802d16e:	4640      	mov	r0, r8
 802d170:	b011      	add	sp, #68	; 0x44
 802d172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 802d176:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 802d17a:	a805      	add	r0, sp, #20
 802d17c:	f7f8 fe64 	bl	8025e48 <mbedtls_md_hmac_starts>
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
 802d180:	4651      	mov	r1, sl
 802d182:	9a03      	ldr	r2, [sp, #12]
 802d184:	a805      	add	r0, sp, #20
 802d186:	f7f8 ff87 	bl	8026098 <mbedtls_md_hmac_update>
    mbedtls_md_hmac_finish( &md_ctx, tmp );
 802d18a:	4621      	mov	r1, r4
 802d18c:	a805      	add	r0, sp, #20
 802d18e:	f7f8 ffa1 	bl	80260d4 <mbedtls_md_hmac_finish>
    for( i = 0; i < dlen; i += md_len )
 802d192:	2e00      	cmp	r6, #0
 802d194:	d0db      	beq.n	802d14e <tls_prf_generic.constprop.0+0x72>
 802d196:	46c1      	mov	r9, r8
 802d198:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 802d19c:	f10d 0a20 	add.w	sl, sp, #32
        mbedtls_md_hmac_reset ( &md_ctx );
 802d1a0:	a805      	add	r0, sp, #20
 802d1a2:	f7f9 f80f 	bl	80261c4 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 802d1a6:	463a      	mov	r2, r7
 802d1a8:	4621      	mov	r1, r4
 802d1aa:	a805      	add	r0, sp, #20
 802d1ac:	f7f8 ff74 	bl	8026098 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, h_i );
 802d1b0:	4651      	mov	r1, sl
 802d1b2:	a805      	add	r0, sp, #20
 802d1b4:	f7f8 ff8e 	bl	80260d4 <mbedtls_md_hmac_finish>
        mbedtls_md_hmac_reset ( &md_ctx );
 802d1b8:	a805      	add	r0, sp, #20
 802d1ba:	f7f9 f803 	bl	80261c4 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
 802d1be:	462a      	mov	r2, r5
 802d1c0:	4621      	mov	r1, r4
 802d1c2:	a805      	add	r0, sp, #20
 802d1c4:	f7f8 ff68 	bl	8026098 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, tmp );
 802d1c8:	4621      	mov	r1, r4
 802d1ca:	a805      	add	r0, sp, #20
 802d1cc:	f7f8 ff82 	bl	80260d4 <mbedtls_md_hmac_finish>
        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 802d1d0:	4648      	mov	r0, r9
 802d1d2:	44a9      	add	r9, r5
 802d1d4:	45b1      	cmp	r9, r6
 802d1d6:	bf8a      	itet	hi
 802d1d8:	fbb6 f2f5 	udivhi	r2, r6, r5
 802d1dc:	462a      	movls	r2, r5
 802d1de:	fb05 6212 	mlshi	r2, r5, r2, r6
        for( j = 0; j < k; j++ )
 802d1e2:	4458      	add	r0, fp
 802d1e4:	b112      	cbz	r2, 802d1ec <tls_prf_generic.constprop.0+0x110>
 802d1e6:	4651      	mov	r1, sl
 802d1e8:	f002 fe16 	bl	802fe18 <memcpy>
    for( i = 0; i < dlen; i += md_len )
 802d1ec:	45b1      	cmp	r9, r6
 802d1ee:	d3d7      	bcc.n	802d1a0 <tls_prf_generic.constprop.0+0xc4>
 802d1f0:	e7af      	b.n	802d152 <tls_prf_generic.constprop.0+0x76>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 802d1f2:	f8df 800c 	ldr.w	r8, [pc, #12]	; 802d200 <tls_prf_generic.constprop.0+0x124>
 802d1f6:	e7ba      	b.n	802d16e <tls_prf_generic.constprop.0+0x92>
        ret = MBEDTLS_ERR_SSL_ALLOC_FAILED;
 802d1f8:	f8df 8008 	ldr.w	r8, [pc, #8]	; 802d204 <tls_prf_generic.constprop.0+0x128>
 802d1fc:	e7a7      	b.n	802d14e <tls_prf_generic.constprop.0+0x72>
 802d1fe:	bf00      	nop
 802d200:	ffff9400 	.word	0xffff9400
 802d204:	ffff8100 	.word	0xffff8100

0802d208 <tls_prf_sha256>:
    return( tls_prf_generic( MBEDTLS_MD_SHA256, secret, slen,
 802d208:	f7ff bf68 	b.w	802d0dc <tls_prf_generic.constprop.0>

0802d20c <ssl_update_checksum_sha256>:
 802d20c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 802d20e:	3020      	adds	r0, #32
 802d210:	f7fd bbb0 	b.w	802a974 <mbedtls_sha256_update_ret>

0802d214 <ssl_handshake_init>:
{
    memset( session, 0, sizeof(mbedtls_ssl_session) );
}

static int ssl_handshake_init( mbedtls_ssl_context *ssl )
{
 802d214:	b570      	push	{r4, r5, r6, lr}
 802d216:	4604      	mov	r4, r0
    /* Clear old handshake information if present */
    if( ssl->transform_negotiate )
 802d218:	6c80      	ldr	r0, [r0, #72]	; 0x48
 802d21a:	b108      	cbz	r0, 802d220 <ssl_handshake_init+0xc>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 802d21c:	f7ff fee8 	bl	802cff0 <mbedtls_ssl_transform_free>
    if( ssl->session_negotiate )
 802d220:	6b65      	ldr	r5, [r4, #52]	; 0x34
 802d222:	b165      	cbz	r5, 802d23e <ssl_handshake_init+0x2a>
    if( session->peer_cert_digest != NULL )
 802d224:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 802d226:	b130      	cbz	r0, 802d236 <ssl_handshake_init+0x22>
        mbedtls_free( session->peer_cert_digest );
 802d228:	f002 fde0 	bl	802fdec <free>
        session->peer_cert_digest      = NULL;
 802d22c:	2300      	movs	r3, #0
 802d22e:	65eb      	str	r3, [r5, #92]	; 0x5c
        session->peer_cert_digest_type = MBEDTLS_MD_NONE;
 802d230:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
        session->peer_cert_digest_len  = 0;
 802d234:	662b      	str	r3, [r5, #96]	; 0x60

#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
    mbedtls_free( session->ticket );
#endif

    mbedtls_platform_zeroize( session, sizeof( mbedtls_ssl_session ) );
 802d236:	4628      	mov	r0, r5
 802d238:	216c      	movs	r1, #108	; 0x6c
 802d23a:	f7fa fc77 	bl	8027b2c <mbedtls_platform_zeroize>
    if( ssl->handshake )
 802d23e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 802d240:	b1ad      	cbz	r5, 802d26e <ssl_handshake_init+0x5a>
    mbedtls_sha256_free(   &handshake->fin_sha256    );
 802d242:	f105 0020 	add.w	r0, r5, #32
 802d246:	f7fc fe2f 	bl	8029ea8 <mbedtls_sha256_free>
    if( handshake->sni_key_cert != NULL )
 802d24a:	68ee      	ldr	r6, [r5, #12]
 802d24c:	b12e      	cbz	r6, 802d25a <ssl_handshake_init+0x46>
            next = cur->next;
 802d24e:	4630      	mov	r0, r6
 802d250:	68b6      	ldr	r6, [r6, #8]
            mbedtls_free( cur );
 802d252:	f002 fdcb 	bl	802fdec <free>
        while( cur != NULL )
 802d256:	2e00      	cmp	r6, #0
 802d258:	d1f9      	bne.n	802d24e <ssl_handshake_init+0x3a>
    mbedtls_pk_free( &handshake->peer_pubkey );
 802d25a:	f105 0018 	add.w	r0, r5, #24
 802d25e:	f7f9 ff91 	bl	8027184 <mbedtls_pk_free>
    mbedtls_platform_zeroize( handshake,
 802d262:	4628      	mov	r0, r5
 802d264:	f44f 7192 	mov.w	r1, #292	; 0x124
 802d268:	f7fa fc60 	bl	8027b2c <mbedtls_platform_zeroize>
 802d26c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    if( ssl->transform_negotiate == NULL )
 802d26e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 802d270:	2b00      	cmp	r3, #0
 802d272:	d061      	beq.n	802d338 <ssl_handshake_init+0x124>
    if( ssl->session_negotiate == NULL )
 802d274:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802d276:	2b00      	cmp	r3, #0
 802d278:	d03f      	beq.n	802d2fa <ssl_handshake_init+0xe6>
    if( ssl->handshake == NULL )
 802d27a:	2d00      	cmp	r5, #0
 802d27c:	d044      	beq.n	802d308 <ssl_handshake_init+0xf4>
    if( ssl->handshake == NULL ||
 802d27e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 802d280:	2b00      	cmp	r3, #0
 802d282:	d04a      	beq.n	802d31a <ssl_handshake_init+0x106>
        ssl->session_negotiate == NULL )
 802d284:	6b60      	ldr	r0, [r4, #52]	; 0x34
        ssl->transform_negotiate == NULL ||
 802d286:	2800      	cmp	r0, #0
 802d288:	d047      	beq.n	802d31a <ssl_handshake_init+0x106>
    memset( session, 0, sizeof(mbedtls_ssl_session) );
 802d28a:	226c      	movs	r2, #108	; 0x6c
 802d28c:	2100      	movs	r1, #0
 802d28e:	f002 fdea 	bl	802fe66 <memset>
    mbedtls_ssl_transform_init( ssl->transform_negotiate );
 802d292:	6ca5      	ldr	r5, [r4, #72]	; 0x48
    memset( transform, 0, sizeof(mbedtls_ssl_transform) );
 802d294:	22d0      	movs	r2, #208	; 0xd0
 802d296:	2100      	movs	r1, #0
 802d298:	4628      	mov	r0, r5
 802d29a:	f002 fde4 	bl	802fe66 <memset>
    mbedtls_cipher_init( &transform->cipher_ctx_enc );
 802d29e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 802d2a2:	f7f6 fd93 	bl	8023dcc <mbedtls_cipher_init>
    mbedtls_cipher_init( &transform->cipher_ctx_dec );
 802d2a6:	f105 008c 	add.w	r0, r5, #140	; 0x8c
 802d2aa:	f7f6 fd8f 	bl	8023dcc <mbedtls_cipher_init>
    mbedtls_md_init( &transform->md_ctx_enc );
 802d2ae:	f105 0034 	add.w	r0, r5, #52	; 0x34
 802d2b2:	f7f8 fcd9 	bl	8025c68 <mbedtls_md_init>
    mbedtls_md_init( &transform->md_ctx_dec );
 802d2b6:	f105 0040 	add.w	r0, r5, #64	; 0x40
 802d2ba:	f7f8 fcd5 	bl	8025c68 <mbedtls_md_init>
    ssl_handshake_params_init( ssl->handshake );
 802d2be:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
 802d2c0:	f44f 7292 	mov.w	r2, #292	; 0x124
    mbedtls_sha256_init(   &handshake->fin_sha256    );
 802d2c4:	f104 0520 	add.w	r5, r4, #32
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
 802d2c8:	2100      	movs	r1, #0
 802d2ca:	4620      	mov	r0, r4
 802d2cc:	f002 fdcb 	bl	802fe66 <memset>
    mbedtls_sha256_init(   &handshake->fin_sha256    );
 802d2d0:	4628      	mov	r0, r5
 802d2d2:	f7fc fde5 	bl	8029ea0 <mbedtls_sha256_init>
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
 802d2d6:	2100      	movs	r1, #0
 802d2d8:	4628      	mov	r0, r5
 802d2da:	f7fc fdf1 	bl	8029ec0 <mbedtls_sha256_starts_ret>

/* Allow exactly one hash algorithm for each signature. */
void mbedtls_ssl_sig_hash_set_const_hash( mbedtls_ssl_sig_hash_set_t *set,
                                          mbedtls_md_type_t md_alg )
{
    set->rsa   = md_alg;
 802d2de:	2500      	movs	r5, #0
    handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;
 802d2e0:	2203      	movs	r2, #3
    handshake->update_checksum = ssl_update_checksum_start;
 802d2e2:	4b18      	ldr	r3, [pc, #96]	; (802d344 <ssl_handshake_init+0x130>)
    mbedtls_pk_init( &handshake->peer_pubkey );
 802d2e4:	f104 0018 	add.w	r0, r4, #24
    handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;
 802d2e8:	60a2      	str	r2, [r4, #8]
    handshake->update_checksum = ssl_update_checksum_start;
 802d2ea:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    set->rsa   = md_alg;
 802d2ee:	7025      	strb	r5, [r4, #0]
    set->ecdsa = md_alg;
 802d2f0:	7065      	strb	r5, [r4, #1]
    mbedtls_pk_init( &handshake->peer_pubkey );
 802d2f2:	f7f9 ff43 	bl	802717c <mbedtls_pk_init>
    return( 0 );
 802d2f6:	4628      	mov	r0, r5
}
 802d2f8:	bd70      	pop	{r4, r5, r6, pc}
        ssl->session_negotiate = mbedtls_calloc( 1, sizeof(mbedtls_ssl_session) );
 802d2fa:	216c      	movs	r1, #108	; 0x6c
 802d2fc:	2001      	movs	r0, #1
 802d2fe:	f002 fd3b 	bl	802fd78 <calloc>
 802d302:	6360      	str	r0, [r4, #52]	; 0x34
    if( ssl->handshake == NULL )
 802d304:	2d00      	cmp	r5, #0
 802d306:	d1ba      	bne.n	802d27e <ssl_handshake_init+0x6a>
        ssl->handshake = mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
 802d308:	f44f 7192 	mov.w	r1, #292	; 0x124
 802d30c:	2001      	movs	r0, #1
 802d30e:	f002 fd33 	bl	802fd78 <calloc>
 802d312:	4605      	mov	r5, r0
 802d314:	63a0      	str	r0, [r4, #56]	; 0x38
    if( ssl->handshake == NULL ||
 802d316:	2800      	cmp	r0, #0
 802d318:	d1b1      	bne.n	802d27e <ssl_handshake_init+0x6a>
        mbedtls_free( ssl->handshake );
 802d31a:	4628      	mov	r0, r5
 802d31c:	f002 fd66 	bl	802fdec <free>
        mbedtls_free( ssl->transform_negotiate );
 802d320:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 802d322:	f002 fd63 	bl	802fdec <free>
        mbedtls_free( ssl->session_negotiate );
 802d326:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802d328:	f002 fd60 	bl	802fdec <free>
        ssl->handshake = NULL;
 802d32c:	2300      	movs	r3, #0
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 802d32e:	4806      	ldr	r0, [pc, #24]	; (802d348 <ssl_handshake_init+0x134>)
        ssl->handshake = NULL;
 802d330:	63a3      	str	r3, [r4, #56]	; 0x38
        ssl->transform_negotiate = NULL;
 802d332:	64a3      	str	r3, [r4, #72]	; 0x48
        ssl->session_negotiate = NULL;
 802d334:	6363      	str	r3, [r4, #52]	; 0x34
}
 802d336:	bd70      	pop	{r4, r5, r6, pc}
        ssl->transform_negotiate = mbedtls_calloc( 1, sizeof(mbedtls_ssl_transform) );
 802d338:	21d0      	movs	r1, #208	; 0xd0
 802d33a:	2001      	movs	r0, #1
 802d33c:	f002 fd1c 	bl	802fd78 <calloc>
 802d340:	64a0      	str	r0, [r4, #72]	; 0x48
 802d342:	e797      	b.n	802d274 <ssl_handshake_init+0x60>
 802d344:	0802d0d5 	.word	0x0802d0d5
 802d348:	ffff8100 	.word	0xffff8100

0802d34c <mbedtls_ssl_derive_keys>:
{
 802d34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d350:	ed2d 8b02 	vpush	{d8}
    if( minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 802d354:	68c3      	ldr	r3, [r0, #12]
{
 802d356:	4604      	mov	r4, r0
    if( minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 802d358:	2b03      	cmp	r3, #3
        ssl->handshake->ciphersuite_info;
 802d35a:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 802d35c:	b0c7      	sub	sp, #284	; 0x11c
    if( minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 802d35e:	f040 81b0 	bne.w	802d6c2 <mbedtls_ssl_derive_keys+0x376>
        handshake->tls_prf = tls_prf_sha256;
 802d362:	4db4      	ldr	r5, [pc, #720]	; (802d634 <mbedtls_ssl_derive_keys+0x2e8>)
        handshake->calc_verify = ssl_calc_verify_tls_sha256;
 802d364:	49b4      	ldr	r1, [pc, #720]	; (802d638 <mbedtls_ssl_derive_keys+0x2ec>)
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
 802d366:	4ab5      	ldr	r2, [pc, #724]	; (802d63c <mbedtls_ssl_derive_keys+0x2f0>)
    if( handshake->resume != 0 )
 802d368:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
 802d36c:	e9c0 1224 	strd	r1, r2, [r0, #144]	; 0x90
        handshake->tls_prf = tls_prf_sha256;
 802d370:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
    unsigned char const *salt = handshake->randbytes;
 802d374:	f100 0ca4 	add.w	ip, r0, #164	; 0xa4
    if( handshake->resume != 0 )
 802d378:	b9fb      	cbnz	r3, 802d3ba <mbedtls_ssl_derive_keys+0x6e>
    return( tls_prf_generic( MBEDTLS_MD_SHA256, secret, slen,
 802d37a:	2630      	movs	r6, #48	; 0x30
 802d37c:	2740      	movs	r7, #64	; 0x40
                              ssl->session_negotiate->master,
 802d37e:	6b63      	ldr	r3, [r4, #52]	; 0x34
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 802d380:	f100 05e4 	add.w	r5, r0, #228	; 0xe4
                              ssl->session_negotiate->master,
 802d384:	f103 022c 	add.w	r2, r3, #44	; 0x2c
    return( tls_prf_generic( MBEDTLS_MD_SHA256, secret, slen,
 802d388:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
 802d38c:	4663      	mov	r3, ip
 802d38e:	9201      	str	r2, [sp, #4]
 802d390:	4628      	mov	r0, r5
 802d392:	4aab      	ldr	r2, [pc, #684]	; (802d640 <mbedtls_ssl_derive_keys+0x2f4>)
 802d394:	9602      	str	r6, [sp, #8]
 802d396:	9700      	str	r7, [sp, #0]
 802d398:	f7ff fea0 	bl	802d0dc <tls_prf_generic.constprop.0>
        if( ret != 0 )
 802d39c:	4682      	mov	sl, r0
 802d39e:	b128      	cbz	r0, 802d3ac <mbedtls_ssl_derive_keys+0x60>
}
 802d3a0:	4650      	mov	r0, sl
 802d3a2:	b047      	add	sp, #284	; 0x11c
 802d3a4:	ecbd 8b02 	vpop	{d8}
 802d3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mbedtls_platform_zeroize( handshake->premaster,
 802d3ac:	4628      	mov	r0, r5
 802d3ae:	4631      	mov	r1, r6
 802d3b0:	f7fa fbbc 	bl	8027b2c <mbedtls_platform_zeroize>
    if( ret != 0 )
 802d3b4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 802d3b6:	f100 0ca4 	add.w	ip, r0, #164	; 0xa4
        memcpy( tmp, ssl->handshake->randbytes, 64 );
 802d3ba:	4666      	mov	r6, ip
 802d3bc:	f10d 0e18 	add.w	lr, sp, #24
 802d3c0:	f100 05e4 	add.w	r5, r0, #228	; 0xe4
 802d3c4:	4677      	mov	r7, lr
 802d3c6:	6830      	ldr	r0, [r6, #0]
 802d3c8:	6871      	ldr	r1, [r6, #4]
 802d3ca:	68b2      	ldr	r2, [r6, #8]
 802d3cc:	68f3      	ldr	r3, [r6, #12]
 802d3ce:	3610      	adds	r6, #16
 802d3d0:	42ae      	cmp	r6, r5
 802d3d2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 802d3d4:	f10e 0e10 	add.w	lr, lr, #16
 802d3d8:	d1f4      	bne.n	802d3c4 <mbedtls_ssl_derive_keys+0x78>
        memcpy( ssl->handshake->randbytes, tmp + 32, 32 );
 802d3da:	ae0e      	add	r6, sp, #56	; 0x38
 802d3dc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 802d3de:	f8cc 0000 	str.w	r0, [ip]
 802d3e2:	f8cc 1004 	str.w	r1, [ip, #4]
 802d3e6:	f8cc 2008 	str.w	r2, [ip, #8]
 802d3ea:	f8cc 300c 	str.w	r3, [ip, #12]
 802d3ee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 802d3f0:	f8cc 0010 	str.w	r0, [ip, #16]
 802d3f4:	f8cc 1014 	str.w	r1, [ip, #20]
 802d3f8:	f8cc 2018 	str.w	r2, [ip, #24]
 802d3fc:	f8cc 301c 	str.w	r3, [ip, #28]
        memcpy( ssl->handshake->randbytes + 32, tmp, 32 );
 802d400:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802d402:	ad06      	add	r5, sp, #24
 802d404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802d406:	f8c6 00c4 	str.w	r0, [r6, #196]	; 0xc4
 802d40a:	f8c6 10c8 	str.w	r1, [r6, #200]	; 0xc8
 802d40e:	f8c6 20cc 	str.w	r2, [r6, #204]	; 0xcc
 802d412:	f8c6 30d0 	str.w	r3, [r6, #208]	; 0xd0
 802d416:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802d418:	f8c6 00d4 	str.w	r0, [r6, #212]	; 0xd4
 802d41c:	f8c6 10d8 	str.w	r1, [r6, #216]	; 0xd8
        mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 802d420:	a806      	add	r0, sp, #24
 802d422:	2140      	movs	r1, #64	; 0x40
        memcpy( ssl->handshake->randbytes + 32, tmp, 32 );
 802d424:	f8c6 20dc 	str.w	r2, [r6, #220]	; 0xdc
 802d428:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
        mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 802d42c:	f7fa fb7e 	bl	8027b2c <mbedtls_platform_zeroize>
                                  ssl->conf->endpoint,
 802d430:	6822      	ldr	r2, [r4, #0]
                                  ssl->handshake->tls_prf,
 802d432:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    ret = ssl_populate_transform( ssl->transform_negotiate,
 802d434:	f8d4 a034 	ldr.w	sl, [r4, #52]	; 0x34
 802d438:	68e1      	ldr	r1, [r4, #12]
                                  ssl->conf->endpoint,
 802d43a:	f892 205c 	ldrb.w	r2, [r2, #92]	; 0x5c
    ret = ssl_populate_transform( ssl->transform_negotiate,
 802d43e:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 802d440:	f85a 0b2c 	ldr.w	r0, [sl], #44
                                  ssl->handshake->tls_prf,
 802d444:	f8d3 b098 	ldr.w	fp, [r3, #152]	; 0x98
                                  ssl->conf->endpoint,
 802d448:	f002 0201 	and.w	r2, r2, #1
    transform->minor_ver = minor_ver;
 802d44c:	f8c5 10cc 	str.w	r1, [r5, #204]	; 0xcc
    ret = ssl_populate_transform( ssl->transform_negotiate,
 802d450:	9105      	str	r1, [sp, #20]
                                  ssl->conf->endpoint,
 802d452:	9204      	str	r2, [sp, #16]
                                  ssl->handshake->randbytes,
 802d454:	f103 08a4 	add.w	r8, r3, #164	; 0xa4
    ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuite );
 802d458:	f7fd fc32 	bl	802acc0 <mbedtls_ssl_ciphersuite_from_id>
    if( ciphersuite_info == NULL )
 802d45c:	4606      	mov	r6, r0
 802d45e:	2800      	cmp	r0, #0
 802d460:	f000 8132 	beq.w	802d6c8 <mbedtls_ssl_derive_keys+0x37c>
    cipher_info = mbedtls_cipher_info_from_type( ciphersuite_info->cipher );
 802d464:	7a00      	ldrb	r0, [r0, #8]
 802d466:	f7f6 fc8b 	bl	8023d80 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
 802d46a:	4607      	mov	r7, r0
 802d46c:	2800      	cmp	r0, #0
 802d46e:	f000 812b 	beq.w	802d6c8 <mbedtls_ssl_derive_keys+0x37c>
    md_info = mbedtls_md_info_from_type( ciphersuite_info->mac );
 802d472:	7a70      	ldrb	r0, [r6, #9]
 802d474:	f7f8 fbec 	bl	8025c50 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 802d478:	4681      	mov	r9, r0
 802d47a:	2800      	cmp	r0, #0
 802d47c:	f000 8124 	beq.w	802d6c8 <mbedtls_ssl_derive_keys+0x37c>
    ret = tls_prf( master, 48, "key expansion", randbytes, 64, keyblk, 256 );
 802d480:	f44f 7180 	mov.w	r1, #256	; 0x100
 802d484:	2240      	movs	r2, #64	; 0x40
 802d486:	ab06      	add	r3, sp, #24
 802d488:	4650      	mov	r0, sl
 802d48a:	9301      	str	r3, [sp, #4]
 802d48c:	9102      	str	r1, [sp, #8]
 802d48e:	9200      	str	r2, [sp, #0]
 802d490:	4643      	mov	r3, r8
 802d492:	2130      	movs	r1, #48	; 0x30
 802d494:	4a6b      	ldr	r2, [pc, #428]	; (802d644 <mbedtls_ssl_derive_keys+0x2f8>)
 802d496:	47d8      	blx	fp
    if( ret != 0 )
 802d498:	4682      	mov	sl, r0
 802d49a:	2800      	cmp	r0, #0
 802d49c:	d180      	bne.n	802d3a0 <mbedtls_ssl_derive_keys+0x54>
    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
 802d49e:	787b      	ldrb	r3, [r7, #1]
    keylen = cipher_info->key_bitlen / 8;
 802d4a0:	6879      	ldr	r1, [r7, #4]
    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
 802d4a2:	2b06      	cmp	r3, #6
    keylen = cipher_info->key_bitlen / 8;
 802d4a4:	ea4f 08d1 	mov.w	r8, r1, lsr #3
    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
 802d4a8:	f000 8092 	beq.w	802d5d0 <mbedtls_ssl_derive_keys+0x284>
 802d4ac:	2b08      	cmp	r3, #8
 802d4ae:	d06e      	beq.n	802d58e <mbedtls_ssl_derive_keys+0x242>
        cipher_info->mode == MBEDTLS_MODE_CCM ||
 802d4b0:	2b0a      	cmp	r3, #10
 802d4b2:	f000 80f8 	beq.w	802d6a6 <mbedtls_ssl_derive_keys+0x35a>
    if( cipher_info->mode == MBEDTLS_MODE_STREAM ||
 802d4b6:	2b07      	cmp	r3, #7
 802d4b8:	d002      	beq.n	802d4c0 <mbedtls_ssl_derive_keys+0x174>
 802d4ba:	2b02      	cmp	r3, #2
 802d4bc:	f040 8101 	bne.w	802d6c2 <mbedtls_ssl_derive_keys+0x376>
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
 802d4c0:	f105 0634 	add.w	r6, r5, #52	; 0x34
 802d4c4:	4630      	mov	r0, r6
 802d4c6:	2201      	movs	r2, #1
 802d4c8:	4649      	mov	r1, r9
 802d4ca:	f7f8 fc1d 	bl	8025d08 <mbedtls_md_setup>
 802d4ce:	4682      	mov	sl, r0
 802d4d0:	2800      	cmp	r0, #0
 802d4d2:	f040 80a8 	bne.w	802d626 <mbedtls_ssl_derive_keys+0x2da>
            ( ret = mbedtls_md_setup( &transform->md_ctx_dec, md_info, 1 ) ) != 0 )
 802d4d6:	f105 0340 	add.w	r3, r5, #64	; 0x40
 802d4da:	4618      	mov	r0, r3
 802d4dc:	2201      	movs	r2, #1
 802d4de:	4649      	mov	r1, r9
 802d4e0:	ee08 3a10 	vmov	s16, r3
 802d4e4:	f7f8 fc10 	bl	8025d08 <mbedtls_md_setup>
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
 802d4e8:	4682      	mov	sl, r0
 802d4ea:	2800      	cmp	r0, #0
 802d4ec:	f040 809b 	bne.w	802d626 <mbedtls_ssl_derive_keys+0x2da>
        mac_key_len = mbedtls_md_get_size( md_info );
 802d4f0:	4648      	mov	r0, r9
 802d4f2:	f7f8 fe9f 	bl	8026234 <mbedtls_md_get_size>
        transform->ivlen = cipher_info->iv_size;
 802d4f6:	f8d7 b00c 	ldr.w	fp, [r7, #12]
        transform->maclen = mac_key_len;
 802d4fa:	60e8      	str	r0, [r5, #12]
        transform->ivlen = cipher_info->iv_size;
 802d4fc:	f8c5 b004 	str.w	fp, [r5, #4]
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
 802d500:	787b      	ldrb	r3, [r7, #1]
        mac_key_len = mbedtls_md_get_size( md_info );
 802d502:	4682      	mov	sl, r0
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
 802d504:	2b07      	cmp	r3, #7
 802d506:	f000 80e2 	beq.w	802d6ce <mbedtls_ssl_derive_keys+0x382>
                                  + cipher_info->block_size
 802d50a:	697b      	ldr	r3, [r7, #20]
            if( minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
 802d50c:	9a05      	ldr	r2, [sp, #20]
                                  - transform->maclen % cipher_info->block_size;
 802d50e:	fbb0 f1f3 	udiv	r1, r0, r3
            if( minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
 802d512:	3a02      	subs	r2, #2
 802d514:	2a01      	cmp	r2, #1
                                  - transform->maclen % cipher_info->block_size;
 802d516:	fb03 3301 	mla	r3, r3, r1, r3
            if( minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
 802d51a:	f200 80da 	bhi.w	802d6d2 <mbedtls_ssl_derive_keys+0x386>
                transform->minlen += transform->ivlen;
 802d51e:	445b      	add	r3, fp
 802d520:	602b      	str	r3, [r5, #0]
    if( endpoint == MBEDTLS_SSL_IS_CLIENT )
 802d522:	9b04      	ldr	r3, [sp, #16]
 802d524:	2b00      	cmp	r3, #0
 802d526:	d146      	bne.n	802d5b6 <mbedtls_ssl_derive_keys+0x26a>
        iv_copy_len = ( transform->fixed_ivlen ) ?
 802d528:	68aa      	ldr	r2, [r5, #8]
        key1 = keyblk + mac_key_len * 2;
 802d52a:	fa0f f38a 	sxth.w	r3, sl
                            transform->fixed_ivlen : transform->ivlen;
 802d52e:	2a00      	cmp	r2, #0
 802d530:	bf18      	it	ne
 802d532:	4693      	movne	fp, r2
        key2 = keyblk + mac_key_len * 2 + keylen;
 802d534:	eb08 0943 	add.w	r9, r8, r3, lsl #1
 802d538:	aa06      	add	r2, sp, #24
 802d53a:	4491      	add	r9, r2
        key1 = keyblk + mac_key_len * 2;
 802d53c:	f10d 0c18 	add.w	ip, sp, #24
 802d540:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
        memcpy( transform->iv_enc, key2 + keylen,  iv_copy_len );
 802d544:	eb09 0108 	add.w	r1, r9, r8
 802d548:	465a      	mov	r2, fp
 802d54a:	f105 0014 	add.w	r0, r5, #20
        key1 = keyblk + mac_key_len * 2;
 802d54e:	9304      	str	r3, [sp, #16]
        memcpy( transform->iv_enc, key2 + keylen,  iv_copy_len );
 802d550:	f002 fc62 	bl	802fe18 <memcpy>
        memcpy( transform->iv_dec, key2 + keylen + iv_copy_len,
 802d554:	eb08 010b 	add.w	r1, r8, fp
        mac_dec = keyblk + mac_key_len;
 802d558:	ab06      	add	r3, sp, #24
        memcpy( transform->iv_dec, key2 + keylen + iv_copy_len,
 802d55a:	465a      	mov	r2, fp
 802d55c:	4449      	add	r1, r9
 802d55e:	f105 0024 	add.w	r0, r5, #36	; 0x24
        mac_dec = keyblk + mac_key_len;
 802d562:	eb03 080a 	add.w	r8, r3, sl
        memcpy( transform->iv_dec, key2 + keylen + iv_copy_len,
 802d566:	f002 fc57 	bl	802fe18 <memcpy>
    if( minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 802d56a:	9b05      	ldr	r3, [sp, #20]
 802d56c:	2b00      	cmp	r3, #0
 802d56e:	dd22      	ble.n	802d5b6 <mbedtls_ssl_derive_keys+0x26a>
        if( mac_key_len != 0 )
 802d570:	f1ba 0f00 	cmp.w	sl, #0
 802d574:	d04f      	beq.n	802d616 <mbedtls_ssl_derive_keys+0x2ca>
            mbedtls_md_hmac_starts( &transform->md_ctx_enc, mac_enc, mac_key_len );
 802d576:	4652      	mov	r2, sl
 802d578:	a906      	add	r1, sp, #24
 802d57a:	4630      	mov	r0, r6
 802d57c:	f7f8 fc64 	bl	8025e48 <mbedtls_md_hmac_starts>
            mbedtls_md_hmac_starts( &transform->md_ctx_dec, mac_dec, mac_key_len );
 802d580:	4652      	mov	r2, sl
 802d582:	4641      	mov	r1, r8
 802d584:	ee18 0a10 	vmov	r0, s16
 802d588:	f7f8 fc5e 	bl	8025e48 <mbedtls_md_hmac_starts>
 802d58c:	e043      	b.n	802d616 <mbedtls_ssl_derive_keys+0x2ca>
        transform->maclen = 0;
 802d58e:	60e8      	str	r0, [r5, #12]
            ciphersuite_info->flags & MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 802d590:	7f32      	ldrb	r2, [r6, #28]
 802d592:	0792      	lsls	r2, r2, #30
 802d594:	d505      	bpl.n	802d5a2 <mbedtls_ssl_derive_keys+0x256>
        transform->ivlen = 12;
 802d596:	220c      	movs	r2, #12
        transform->taglen =
 802d598:	612b      	str	r3, [r5, #16]
                transform->fixed_ivlen = 4;
 802d59a:	2604      	movs	r6, #4
        transform->ivlen = 12;
 802d59c:	2310      	movs	r3, #16
 802d59e:	606a      	str	r2, [r5, #4]
            if( cipher_info->mode == MBEDTLS_MODE_CHACHAPOLY )
 802d5a0:	e005      	b.n	802d5ae <mbedtls_ssl_derive_keys+0x262>
        transform->ivlen = 12;
 802d5a2:	230c      	movs	r3, #12
        transform->taglen =
 802d5a4:	2210      	movs	r2, #16
        transform->ivlen = 12;
 802d5a6:	606b      	str	r3, [r5, #4]
                transform->fixed_ivlen = 4;
 802d5a8:	2604      	movs	r6, #4
        transform->ivlen = 12;
 802d5aa:	2318      	movs	r3, #24
        transform->taglen =
 802d5ac:	612a      	str	r2, [r5, #16]
        transform->minlen = explicit_ivlen + transform->taglen;
 802d5ae:	602b      	str	r3, [r5, #0]
    if( endpoint == MBEDTLS_SSL_IS_CLIENT )
 802d5b0:	9b04      	ldr	r3, [sp, #16]
 802d5b2:	60ae      	str	r6, [r5, #8]
 802d5b4:	b1bb      	cbz	r3, 802d5e6 <mbedtls_ssl_derive_keys+0x29a>
                ret = MBEDTLS_ERR_SSL_INTERNAL_ERROR;
 802d5b6:	f8df a090 	ldr.w	sl, [pc, #144]	; 802d648 <mbedtls_ssl_derive_keys+0x2fc>
    mbedtls_platform_zeroize( keyblk, sizeof( keyblk ) );
 802d5ba:	a806      	add	r0, sp, #24
 802d5bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 802d5c0:	f7fa fab4 	bl	8027b2c <mbedtls_platform_zeroize>
}
 802d5c4:	4650      	mov	r0, sl
 802d5c6:	b047      	add	sp, #284	; 0x11c
 802d5c8:	ecbd 8b02 	vpop	{d8}
 802d5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        transform->maclen = 0;
 802d5d0:	60e8      	str	r0, [r5, #12]
            ciphersuite_info->flags & MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 802d5d2:	7f33      	ldrb	r3, [r6, #28]
 802d5d4:	0798      	lsls	r0, r3, #30
 802d5d6:	d5e4      	bpl.n	802d5a2 <mbedtls_ssl_derive_keys+0x256>
        transform->ivlen = 12;
 802d5d8:	230c      	movs	r3, #12
        transform->taglen =
 802d5da:	2208      	movs	r2, #8
        transform->ivlen = 12;
 802d5dc:	606b      	str	r3, [r5, #4]
                transform->fixed_ivlen = 4;
 802d5de:	2604      	movs	r6, #4
        transform->ivlen = 12;
 802d5e0:	2310      	movs	r3, #16
        transform->taglen =
 802d5e2:	612a      	str	r2, [r5, #16]
            if( cipher_info->mode == MBEDTLS_MODE_CHACHAPOLY )
 802d5e4:	e7e3      	b.n	802d5ae <mbedtls_ssl_derive_keys+0x262>
        memcpy( transform->iv_enc, key2 + keylen,  iv_copy_len );
 802d5e6:	ab06      	add	r3, sp, #24
 802d5e8:	eb03 0148 	add.w	r1, r3, r8, lsl #1
 802d5ec:	4632      	mov	r2, r6
 802d5ee:	f105 0014 	add.w	r0, r5, #20
 802d5f2:	f002 fc11 	bl	802fe18 <memcpy>
        key2 = keyblk + mac_key_len * 2 + keylen;
 802d5f6:	ab06      	add	r3, sp, #24
 802d5f8:	eb03 0908 	add.w	r9, r3, r8
        memcpy( transform->iv_dec, key2 + keylen + iv_copy_len,
 802d5fc:	eb06 0108 	add.w	r1, r6, r8
 802d600:	4632      	mov	r2, r6
 802d602:	4449      	add	r1, r9
 802d604:	f105 0024 	add.w	r0, r5, #36	; 0x24
 802d608:	f002 fc06 	bl	802fe18 <memcpy>
    if( minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 802d60c:	9b05      	ldr	r3, [sp, #20]
 802d60e:	2b00      	cmp	r3, #0
 802d610:	ddd1      	ble.n	802d5b6 <mbedtls_ssl_derive_keys+0x26a>
        key1 = keyblk + mac_key_len * 2;
 802d612:	ab06      	add	r3, sp, #24
 802d614:	9304      	str	r3, [sp, #16]
    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
 802d616:	f105 064c 	add.w	r6, r5, #76	; 0x4c
 802d61a:	4630      	mov	r0, r6
 802d61c:	4639      	mov	r1, r7
 802d61e:	f7f6 fbe9 	bl	8023df4 <mbedtls_cipher_setup>
 802d622:	4682      	mov	sl, r0
 802d624:	b190      	cbz	r0, 802d64c <mbedtls_ssl_derive_keys+0x300>
    mbedtls_platform_zeroize( keyblk, sizeof( keyblk ) );
 802d626:	f44f 7180 	mov.w	r1, #256	; 0x100
 802d62a:	a806      	add	r0, sp, #24
 802d62c:	f7fa fa7e 	bl	8027b2c <mbedtls_platform_zeroize>
    if( ret != 0 )
 802d630:	e6b6      	b.n	802d3a0 <mbedtls_ssl_derive_keys+0x54>
 802d632:	bf00      	nop
 802d634:	0802d209 	.word	0x0802d209
 802d638:	0802d0a5 	.word	0x0802d0a5
 802d63c:	0802d039 	.word	0x0802d039
 802d640:	08035964 	.word	0x08035964
 802d644:	08035974 	.word	0x08035974
 802d648:	ffff9400 	.word	0xffff9400
    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_dec,
 802d64c:	358c      	adds	r5, #140	; 0x8c
 802d64e:	4628      	mov	r0, r5
 802d650:	4639      	mov	r1, r7
 802d652:	f7f6 fbcf 	bl	8023df4 <mbedtls_cipher_setup>
 802d656:	4682      	mov	sl, r0
 802d658:	2800      	cmp	r0, #0
 802d65a:	d1e4      	bne.n	802d626 <mbedtls_ssl_derive_keys+0x2da>
    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_enc, key1,
 802d65c:	2301      	movs	r3, #1
 802d65e:	4630      	mov	r0, r6
 802d660:	9904      	ldr	r1, [sp, #16]
 802d662:	687a      	ldr	r2, [r7, #4]
 802d664:	f7f6 fbe6 	bl	8023e34 <mbedtls_cipher_setkey>
 802d668:	4682      	mov	sl, r0
 802d66a:	2800      	cmp	r0, #0
 802d66c:	d1db      	bne.n	802d626 <mbedtls_ssl_derive_keys+0x2da>
    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_dec, key2,
 802d66e:	4603      	mov	r3, r0
 802d670:	4649      	mov	r1, r9
 802d672:	4628      	mov	r0, r5
 802d674:	687a      	ldr	r2, [r7, #4]
 802d676:	f7f6 fbdd 	bl	8023e34 <mbedtls_cipher_setkey>
 802d67a:	4682      	mov	sl, r0
 802d67c:	2800      	cmp	r0, #0
 802d67e:	d1d2      	bne.n	802d626 <mbedtls_ssl_derive_keys+0x2da>
    if( cipher_info->mode == MBEDTLS_MODE_CBC )
 802d680:	787b      	ldrb	r3, [r7, #1]
 802d682:	2b02      	cmp	r3, #2
 802d684:	d027      	beq.n	802d6d6 <mbedtls_ssl_derive_keys+0x38a>
    mbedtls_platform_zeroize( keyblk, sizeof( keyblk ) );
 802d686:	f44f 7180 	mov.w	r1, #256	; 0x100
 802d68a:	a806      	add	r0, sp, #24
 802d68c:	f7fa fa4e 	bl	8027b2c <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( ssl->handshake->randbytes,
 802d690:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 802d692:	2140      	movs	r1, #64	; 0x40
 802d694:	30a4      	adds	r0, #164	; 0xa4
 802d696:	f7fa fa49 	bl	8027b2c <mbedtls_platform_zeroize>
}
 802d69a:	4650      	mov	r0, sl
 802d69c:	b047      	add	sp, #284	; 0x11c
 802d69e:	ecbd 8b02 	vpop	{d8}
 802d6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        transform->maclen = 0;
 802d6a6:	60e8      	str	r0, [r5, #12]
            ciphersuite_info->flags & MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 802d6a8:	7f33      	ldrb	r3, [r6, #28]
 802d6aa:	0799      	lsls	r1, r3, #30
 802d6ac:	d504      	bpl.n	802d6b8 <mbedtls_ssl_derive_keys+0x36c>
        transform->taglen =
 802d6ae:	2308      	movs	r3, #8
        transform->ivlen = 12;
 802d6b0:	260c      	movs	r6, #12
        transform->taglen =
 802d6b2:	612b      	str	r3, [r5, #16]
        transform->ivlen = 12;
 802d6b4:	606e      	str	r6, [r5, #4]
            if( cipher_info->mode == MBEDTLS_MODE_CHACHAPOLY )
 802d6b6:	e77a      	b.n	802d5ae <mbedtls_ssl_derive_keys+0x262>
        transform->taglen =
 802d6b8:	2310      	movs	r3, #16
        transform->ivlen = 12;
 802d6ba:	260c      	movs	r6, #12
        transform->taglen =
 802d6bc:	612b      	str	r3, [r5, #16]
        transform->ivlen = 12;
 802d6be:	606e      	str	r6, [r5, #4]
            if( cipher_info->mode == MBEDTLS_MODE_CHACHAPOLY )
 802d6c0:	e775      	b.n	802d5ae <mbedtls_ssl_derive_keys+0x262>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 802d6c2:	f8df a03c 	ldr.w	sl, [pc, #60]	; 802d700 <mbedtls_ssl_derive_keys+0x3b4>
 802d6c6:	e66b      	b.n	802d3a0 <mbedtls_ssl_derive_keys+0x54>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 802d6c8:	f8df a038 	ldr.w	sl, [pc, #56]	; 802d704 <mbedtls_ssl_derive_keys+0x3b8>
 802d6cc:	e668      	b.n	802d3a0 <mbedtls_ssl_derive_keys+0x54>
            transform->minlen = transform->maclen;
 802d6ce:	6028      	str	r0, [r5, #0]
 802d6d0:	e727      	b.n	802d522 <mbedtls_ssl_derive_keys+0x1d6>
                transform->minlen = transform->maclen
 802d6d2:	602b      	str	r3, [r5, #0]
 802d6d4:	e76f      	b.n	802d5b6 <mbedtls_ssl_derive_keys+0x26a>
        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_enc,
 802d6d6:	4630      	mov	r0, r6
 802d6d8:	2104      	movs	r1, #4
 802d6da:	f7f6 fd13 	bl	8024104 <mbedtls_cipher_set_padding_mode>
 802d6de:	b108      	cbz	r0, 802d6e4 <mbedtls_ssl_derive_keys+0x398>
 802d6e0:	4682      	mov	sl, r0
 802d6e2:	e7a0      	b.n	802d626 <mbedtls_ssl_derive_keys+0x2da>
        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_dec,
 802d6e4:	4628      	mov	r0, r5
 802d6e6:	2104      	movs	r1, #4
 802d6e8:	f7f6 fd0c 	bl	8024104 <mbedtls_cipher_set_padding_mode>
 802d6ec:	4605      	mov	r5, r0
    mbedtls_platform_zeroize( keyblk, sizeof( keyblk ) );
 802d6ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 802d6f2:	a806      	add	r0, sp, #24
 802d6f4:	f7fa fa1a 	bl	8027b2c <mbedtls_platform_zeroize>
    if( ret != 0 )
 802d6f8:	2d00      	cmp	r5, #0
 802d6fa:	d0c9      	beq.n	802d690 <mbedtls_ssl_derive_keys+0x344>
 802d6fc:	46aa      	mov	sl, r5
 802d6fe:	e64f      	b.n	802d3a0 <mbedtls_ssl_derive_keys+0x54>
 802d700:	ffff9400 	.word	0xffff9400
 802d704:	ffff8f00 	.word	0xffff8f00

0802d708 <mbedtls_ssl_write_certificate>:
{
 802d708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        ssl->handshake->ciphersuite_info;
 802d70c:	6b84      	ldr	r4, [r0, #56]	; 0x38
{
 802d70e:	4605      	mov	r5, r0
    if( !mbedtls_ssl_ciphersuite_uses_srv_cert( ciphersuite_info ) )
 802d710:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 802d714:	7a9b      	ldrb	r3, [r3, #10]
 802d716:	3b01      	subs	r3, #1
 802d718:	b2da      	uxtb	r2, r3
 802d71a:	2a09      	cmp	r2, #9
 802d71c:	d839      	bhi.n	802d792 <mbedtls_ssl_write_certificate+0x8a>
 802d71e:	2301      	movs	r3, #1
 802d720:	f240 314f 	movw	r1, #847	; 0x34f
 802d724:	4093      	lsls	r3, r2
 802d726:	420b      	tst	r3, r1
 802d728:	d033      	beq.n	802d792 <mbedtls_ssl_write_certificate+0x8a>
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 802d72a:	6803      	ldr	r3, [r0, #0]
 802d72c:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 802d730:	07d2      	lsls	r2, r2, #31
 802d732:	d534      	bpl.n	802d79e <mbedtls_ssl_write_certificate+0x96>
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 802d734:	6866      	ldr	r6, [r4, #4]
 802d736:	2e00      	cmp	r6, #0
 802d738:	d057      	beq.n	802d7ea <mbedtls_ssl_write_certificate+0xe2>
    return( key_cert == NULL ? NULL : key_cert->cert );
 802d73a:	6836      	ldr	r6, [r6, #0]
    while( crt != NULL )
 802d73c:	2307      	movs	r3, #7
 802d73e:	2e00      	cmp	r6, #0
 802d740:	d05a      	beq.n	802d7f8 <mbedtls_ssl_write_certificate+0xf0>
        if( n > MBEDTLS_SSL_OUT_CONTENT_LEN - 3 - i )
 802d742:	f643 77fd 	movw	r7, #16381	; 0x3ffd
 802d746:	e017      	b.n	802d778 <mbedtls_ssl_write_certificate+0x70>
        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
 802d748:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 802d74c:	4622      	mov	r2, r4
        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
 802d74e:	f801 c003 	strb.w	ip, [r1, r3]
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
 802d752:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 802d756:	4419      	add	r1, r3
 802d758:	7048      	strb	r0, [r1, #1]
        ssl->out_msg[i + 2] = (unsigned char)( n       );
 802d75a:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 802d75e:	440b      	add	r3, r1
 802d760:	709c      	strb	r4, [r3, #2]
        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 802d762:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
 802d766:	68f1      	ldr	r1, [r6, #12]
 802d768:	4440      	add	r0, r8
 802d76a:	f002 fb55 	bl	802fe18 <memcpy>
        i += n; crt = crt->next;
 802d76e:	f8d6 6150 	ldr.w	r6, [r6, #336]	; 0x150
 802d772:	eb04 0308 	add.w	r3, r4, r8
    while( crt != NULL )
 802d776:	b1d6      	cbz	r6, 802d7ae <mbedtls_ssl_write_certificate+0xa6>
        n = crt->raw.len;
 802d778:	68b4      	ldr	r4, [r6, #8]
        if( n > MBEDTLS_SSL_OUT_CONTENT_LEN - 3 - i )
 802d77a:	1afa      	subs	r2, r7, r3
 802d77c:	42a2      	cmp	r2, r4
        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 802d77e:	f103 0803 	add.w	r8, r3, #3
        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
 802d782:	ea4f 4c14 	mov.w	ip, r4, lsr #16
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
 802d786:	ea4f 2014 	mov.w	r0, r4, lsr #8
        if( n > MBEDTLS_SSL_OUT_CONTENT_LEN - 3 - i )
 802d78a:	d2dd      	bcs.n	802d748 <mbedtls_ssl_write_certificate+0x40>
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
 802d78c:	481c      	ldr	r0, [pc, #112]	; (802d800 <mbedtls_ssl_write_certificate+0xf8>)
}
 802d78e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( 0 );
 802d792:	2000      	movs	r0, #0
        ssl->state++;
 802d794:	686b      	ldr	r3, [r5, #4]
 802d796:	3301      	adds	r3, #1
 802d798:	606b      	str	r3, [r5, #4]
}
 802d79a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ssl->client_auth == 0 )
 802d79e:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 802d7a2:	2800      	cmp	r0, #0
 802d7a4:	d1c6      	bne.n	802d734 <mbedtls_ssl_write_certificate+0x2c>
            ssl->state++;
 802d7a6:	686b      	ldr	r3, [r5, #4]
 802d7a8:	3301      	adds	r3, #1
 802d7aa:	606b      	str	r3, [r5, #4]
            return( 0 );
 802d7ac:	e7f5      	b.n	802d79a <mbedtls_ssl_write_certificate+0x92>
 802d7ae:	1fde      	subs	r6, r3, #7
 802d7b0:	f3c6 4707 	ubfx	r7, r6, #16, #8
 802d7b4:	f3c6 2007 	ubfx	r0, r6, #8, #8
 802d7b8:	b2f6      	uxtb	r6, r6
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 802d7ba:	2416      	movs	r4, #22
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
 802d7bc:	210b      	movs	r1, #11
    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
 802d7be:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
 802d7c2:	7117      	strb	r7, [r2, #4]
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
 802d7c4:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
 802d7c8:	7150      	strb	r0, [r2, #5]
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
 802d7ca:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
 802d7ce:	4628      	mov	r0, r5
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
 802d7d0:	7196      	strb	r6, [r2, #6]
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
 802d7d2:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 802d7d6:	e9c5 4329 	strd	r4, r3, [r5, #164]	; 0xa4
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
 802d7da:	7011      	strb	r1, [r2, #0]
    ssl->state++;
 802d7dc:	686b      	ldr	r3, [r5, #4]
 802d7de:	3301      	adds	r3, #1
 802d7e0:	606b      	str	r3, [r5, #4]
}
 802d7e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
 802d7e6:	f7fe bd4f 	b.w	802c288 <mbedtls_ssl_write_handshake_msg>
        key_cert = ssl->conf->key_cert;
 802d7ea:	6c1e      	ldr	r6, [r3, #64]	; 0x40
    return( key_cert == NULL ? NULL : key_cert->cert );
 802d7ec:	2e00      	cmp	r6, #0
 802d7ee:	d1a4      	bne.n	802d73a <mbedtls_ssl_write_certificate+0x32>
 802d7f0:	2307      	movs	r3, #7
 802d7f2:	4630      	mov	r0, r6
 802d7f4:	4637      	mov	r7, r6
 802d7f6:	e7e0      	b.n	802d7ba <mbedtls_ssl_write_certificate+0xb2>
    while( crt != NULL )
 802d7f8:	4630      	mov	r0, r6
 802d7fa:	4637      	mov	r7, r6
 802d7fc:	e7dd      	b.n	802d7ba <mbedtls_ssl_write_certificate+0xb2>
 802d7fe:	bf00      	nop
 802d800:	ffff8b00 	.word	0xffff8b00

0802d804 <mbedtls_ssl_parse_certificate>:
{
 802d804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 802d808:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
 802d80a:	4604      	mov	r4, r0
    if( !mbedtls_ssl_ciphersuite_uses_srv_cert( ciphersuite_info ) )
 802d80c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
{
 802d810:	b088      	sub	sp, #32
 802d812:	7a9b      	ldrb	r3, [r3, #10]
 802d814:	3b01      	subs	r3, #1
 802d816:	b2db      	uxtb	r3, r3
 802d818:	2b09      	cmp	r3, #9
 802d81a:	f200 80c4 	bhi.w	802d9a6 <mbedtls_ssl_parse_certificate+0x1a2>
 802d81e:	2101      	movs	r1, #1
 802d820:	f240 324f 	movw	r2, #847	; 0x34f
 802d824:	fa01 f303 	lsl.w	r3, r1, r3
 802d828:	4213      	tst	r3, r2
 802d82a:	f000 80bc 	beq.w	802d9a6 <mbedtls_ssl_parse_certificate+0x1a2>
    const int authmode = ssl->conf->authmode;
 802d82e:	6803      	ldr	r3, [r0, #0]
 802d830:	f893 705c 	ldrb.w	r7, [r3, #92]	; 0x5c
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 802d834:	f7fe ff00 	bl	802c638 <mbedtls_ssl_read_record>
    const int authmode = ssl->conf->authmode;
 802d838:	f3c7 0781 	ubfx	r7, r7, #2, #2
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 802d83c:	4605      	mov	r5, r0
 802d83e:	2800      	cmp	r0, #0
 802d840:	f040 80ad 	bne.w	802d99e <mbedtls_ssl_parse_certificate+0x19a>
    ssl_clear_peer_cert( ssl->session_negotiate );
 802d844:	6b66      	ldr	r6, [r4, #52]	; 0x34
    if( session->peer_cert_digest != NULL )
 802d846:	6df0      	ldr	r0, [r6, #92]	; 0x5c
 802d848:	b128      	cbz	r0, 802d856 <mbedtls_ssl_parse_certificate+0x52>
        mbedtls_free( session->peer_cert_digest );
 802d84a:	f002 facf 	bl	802fdec <free>
        session->peer_cert_digest      = NULL;
 802d84e:	65f5      	str	r5, [r6, #92]	; 0x5c
        session->peer_cert_digest_type = MBEDTLS_MD_NONE;
 802d850:	f886 5064 	strb.w	r5, [r6, #100]	; 0x64
        session->peer_cert_digest_len  = 0;
 802d854:	6635      	str	r5, [r6, #96]	; 0x60
    chain = mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );
 802d856:	f44f 71aa 	mov.w	r1, #340	; 0x154
 802d85a:	2001      	movs	r0, #1
 802d85c:	f002 fa8c 	bl	802fd78 <calloc>
    if( chain == NULL )
 802d860:	4606      	mov	r6, r0
 802d862:	2800      	cmp	r0, #0
 802d864:	f000 811b 	beq.w	802da9e <mbedtls_ssl_parse_certificate+0x29a>
    mbedtls_x509_crt_init( chain );
 802d868:	f002 fa74 	bl	802fd54 <mbedtls_x509_crt_init>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 802d86c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 802d86e:	2b16      	cmp	r3, #22
 802d870:	f040 810e 	bne.w	802da90 <mbedtls_ssl_parse_certificate+0x28c>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 802d874:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 802d876:	7813      	ldrb	r3, [r2, #0]
 802d878:	2b0b      	cmp	r3, #11
 802d87a:	f040 80dc 	bne.w	802da36 <mbedtls_ssl_parse_certificate+0x232>
        ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 3 + 3 )
 802d87e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 802d882:	2809      	cmp	r0, #9
 802d884:	f240 80d7 	bls.w	802da36 <mbedtls_ssl_parse_certificate+0x232>
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];
 802d888:	f8b2 3005 	ldrh.w	r3, [r2, #5]
    if( ssl->in_msg[i] != 0 ||
 802d88c:	7912      	ldrb	r2, [r2, #4]
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];
 802d88e:	ba5b      	rev16	r3, r3
 802d890:	b29b      	uxth	r3, r3
    if( ssl->in_msg[i] != 0 ||
 802d892:	2a00      	cmp	r2, #0
 802d894:	f040 80cf 	bne.w	802da36 <mbedtls_ssl_parse_certificate+0x232>
        ssl->in_hslen != n + 3 + mbedtls_ssl_hs_hdr_len( ssl ) )
 802d898:	3307      	adds	r3, #7
    if( ssl->in_msg[i] != 0 ||
 802d89a:	4298      	cmp	r0, r3
 802d89c:	f040 80cb 	bne.w	802da36 <mbedtls_ssl_parse_certificate+0x232>
    i += 3;
 802d8a0:	f04f 0807 	mov.w	r8, #7
        switch( ret )
 802d8a4:	f8df a220 	ldr.w	sl, [pc, #544]	; 802dac8 <mbedtls_ssl_parse_certificate+0x2c4>
 802d8a8:	f8df 9220 	ldr.w	r9, [pc, #544]	; 802dacc <mbedtls_ssl_parse_certificate+0x2c8>
        if ( i + 3 > ssl->in_hslen ) {
 802d8ac:	f108 0303 	add.w	r3, r8, #3
 802d8b0:	4283      	cmp	r3, r0
 802d8b2:	f200 80c0 	bhi.w	802da36 <mbedtls_ssl_parse_certificate+0x232>
        if( ssl->in_msg[i] != 0 )
 802d8b6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
        ret = mbedtls_x509_crt_parse_der_nocopy( chain, ssl->in_msg + i, n );
 802d8b8:	18d1      	adds	r1, r2, r3
        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
 802d8ba:	eb02 0508 	add.w	r5, r2, r8
        if( ssl->in_msg[i] != 0 )
 802d8be:	f812 2008 	ldrb.w	r2, [r2, r8]
 802d8c2:	2a00      	cmp	r2, #0
 802d8c4:	f040 80b7 	bne.w	802da36 <mbedtls_ssl_parse_certificate+0x232>
        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
 802d8c8:	f895 c001 	ldrb.w	ip, [r5, #1]
            | (unsigned int) ssl->in_msg[i + 2];
 802d8cc:	78aa      	ldrb	r2, [r5, #2]
        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
 802d8ce:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
        if( n < 128 || i + n > ssl->in_hslen )
 802d8d2:	2a7f      	cmp	r2, #127	; 0x7f
 802d8d4:	eb03 0802 	add.w	r8, r3, r2
 802d8d8:	f240 80ad 	bls.w	802da36 <mbedtls_ssl_parse_certificate+0x232>
 802d8dc:	4580      	cmp	r8, r0
 802d8de:	f200 80aa 	bhi.w	802da36 <mbedtls_ssl_parse_certificate+0x232>
        ret = mbedtls_x509_crt_parse_der_nocopy( chain, ssl->in_msg + i, n );
 802d8e2:	4630      	mov	r0, r6
 802d8e4:	f002 f8f8 	bl	802fad8 <mbedtls_x509_crt_parse_der_nocopy>
        switch( ret )
 802d8e8:	f510 5f16 	cmn.w	r0, #9600	; 0x2580
        ret = mbedtls_x509_crt_parse_der_nocopy( chain, ssl->in_msg + i, n );
 802d8ec:	4605      	mov	r5, r0
        switch( ret )
 802d8ee:	f000 809e 	beq.w	802da2e <mbedtls_ssl_parse_certificate+0x22a>
 802d8f2:	4550      	cmp	r0, sl
 802d8f4:	da46      	bge.n	802d984 <mbedtls_ssl_parse_certificate+0x180>
 802d8f6:	f510 5f22 	cmn.w	r0, #10368	; 0x2880
 802d8fa:	d05c      	beq.n	802d9b6 <mbedtls_ssl_parse_certificate+0x1b2>
 802d8fc:	4548      	cmp	r0, r9
 802d8fe:	d143      	bne.n	802d988 <mbedtls_ssl_parse_certificate+0x184>
    while( i < ssl->in_hslen )
 802d900:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 802d904:	4540      	cmp	r0, r8
 802d906:	d8d1      	bhi.n	802d8ac <mbedtls_ssl_parse_certificate+0xa8>
    if( authmode == MBEDTLS_SSL_VERIFY_NONE )
 802d908:	2f00      	cmp	r7, #0
 802d90a:	d056      	beq.n	802d9ba <mbedtls_ssl_parse_certificate+0x1b6>
    if( ssl->f_vrfy != NULL )
 802d90c:	6920      	ldr	r0, [r4, #16]
 802d90e:	2800      	cmp	r0, #0
 802d910:	f000 80b8 	beq.w	802da84 <mbedtls_ssl_parse_certificate+0x280>
        p_vrfy = ssl->p_vrfy;
 802d914:	f8d4 c014 	ldr.w	ip, [r4, #20]
 802d918:	6822      	ldr	r2, [r4, #0]
        ssl->handshake->ciphersuite_info;
 802d91a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
        if( ssl->handshake->sni_ca_chain != NULL )
 802d91c:	6929      	ldr	r1, [r5, #16]
 802d91e:	2900      	cmp	r1, #0
 802d920:	f000 8090 	beq.w	802da44 <mbedtls_ssl_parse_certificate+0x240>
        ret = mbedtls_x509_crt_verify_restartable(
 802d924:	f04f 0e00 	mov.w	lr, #0
 802d928:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 802d92a:	696a      	ldr	r2, [r5, #20]
 802d92c:	6b65      	ldr	r5, [r4, #52]	; 0x34
 802d92e:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 802d932:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
 802d936:	3568      	adds	r5, #104	; 0x68
 802d938:	9501      	str	r5, [sp, #4]
 802d93a:	9000      	str	r0, [sp, #0]
 802d93c:	f8cd e010 	str.w	lr, [sp, #16]
 802d940:	4630      	mov	r0, r6
 802d942:	f002 fa05 	bl	802fd50 <mbedtls_x509_crt_verify_restartable>
    if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 802d946:	2f01      	cmp	r7, #1
        ret = mbedtls_x509_crt_verify_restartable(
 802d948:	4605      	mov	r5, r0
                                      &ssl->session_negotiate->verify_result ) != 0 )
 802d94a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 802d94c:	d105      	bne.n	802d95a <mbedtls_ssl_parse_certificate+0x156>
 802d94e:	f515 5f1c 	cmn.w	r5, #9984	; 0x2700
 802d952:	d032      	beq.n	802d9ba <mbedtls_ssl_parse_certificate+0x1b6>
        ( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED ||
 802d954:	f515 4ff4 	cmn.w	r5, #31232	; 0x7a00
 802d958:	d02f      	beq.n	802d9ba <mbedtls_ssl_parse_certificate+0x1b6>
    if( ret != 0 )
 802d95a:	b375      	cbz	r5, 802d9ba <mbedtls_ssl_parse_certificate+0x1b6>
        if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
 802d95c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802d95e:	05d9      	lsls	r1, r3, #23
 802d960:	d467      	bmi.n	802da32 <mbedtls_ssl_parse_certificate+0x22e>
        else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
 802d962:	075f      	lsls	r7, r3, #29
 802d964:	d410      	bmi.n	802d988 <mbedtls_ssl_parse_certificate+0x184>
        else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
 802d966:	f413 3fdc 	tst.w	r3, #112640	; 0x1b800
 802d96a:	d160      	bne.n	802da2e <mbedtls_ssl_parse_certificate+0x22a>
        else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
 802d96c:	07d8      	lsls	r0, r3, #31
 802d96e:	f100 809d 	bmi.w	802daac <mbedtls_ssl_parse_certificate+0x2a8>
        else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
 802d972:	0799      	lsls	r1, r3, #30
 802d974:	f100 809c 	bmi.w	802dab0 <mbedtls_ssl_parse_certificate+0x2ac>
            alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
 802d978:	f013 0f08 	tst.w	r3, #8
 802d97c:	bf14      	ite	ne
 802d97e:	2230      	movne	r2, #48	; 0x30
 802d980:	222e      	moveq	r2, #46	; 0x2e
 802d982:	e002      	b.n	802d98a <mbedtls_ssl_parse_certificate+0x186>
        switch( ret )
 802d984:	2800      	cmp	r0, #0
 802d986:	d0bb      	beq.n	802d900 <mbedtls_ssl_parse_certificate+0xfc>
            alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
 802d988:	222a      	movs	r2, #42	; 0x2a
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 802d98a:	4620      	mov	r0, r4
 802d98c:	2102      	movs	r1, #2
 802d98e:	f7fe ffc3 	bl	802c918 <mbedtls_ssl_send_alert_message>
        mbedtls_x509_crt_free( chain );
 802d992:	4630      	mov	r0, r6
 802d994:	f002 f9e4 	bl	802fd60 <mbedtls_x509_crt_free>
        mbedtls_free( chain );
 802d998:	4630      	mov	r0, r6
 802d99a:	f002 fa27 	bl	802fdec <free>
}
 802d99e:	4628      	mov	r0, r5
 802d9a0:	b008      	add	sp, #32
 802d9a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int ret = 0;
 802d9a6:	2500      	movs	r5, #0
}
 802d9a8:	4628      	mov	r0, r5
        ssl->state++;
 802d9aa:	6863      	ldr	r3, [r4, #4]
 802d9ac:	3301      	adds	r3, #1
 802d9ae:	6063      	str	r3, [r4, #4]
}
 802d9b0:	b008      	add	sp, #32
 802d9b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        switch( ret )
 802d9b6:	2250      	movs	r2, #80	; 0x50
                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL, alert );
 802d9b8:	e7e7      	b.n	802d98a <mbedtls_ssl_parse_certificate+0x186>
        mbedtls_x509_crt_free( chain );
 802d9ba:	4630      	mov	r0, r6
        crt_len   = chain->raw.len;
 802d9bc:	e9d6 9502 	ldrd	r9, r5, [r6, #8]
        pk_len   = chain->pk_raw.len;
 802d9c0:	e9d6 8731 	ldrd	r8, r7, [r6, #196]	; 0xc4
        mbedtls_x509_crt_free( chain );
 802d9c4:	f002 f9cc 	bl	802fd60 <mbedtls_x509_crt_free>
        mbedtls_free( chain );
 802d9c8:	4630      	mov	r0, r6
 802d9ca:	f002 fa0f 	bl	802fdec <free>
        mbedtls_calloc( 1, MBEDTLS_SSL_PEER_CERT_DIGEST_DFL_LEN );
 802d9ce:	2120      	movs	r1, #32
 802d9d0:	2001      	movs	r0, #1
    ssl->session_negotiate->peer_cert_digest =
 802d9d2:	6b66      	ldr	r6, [r4, #52]	; 0x34
        mbedtls_calloc( 1, MBEDTLS_SSL_PEER_CERT_DIGEST_DFL_LEN );
 802d9d4:	f002 f9d0 	bl	802fd78 <calloc>
    ssl->session_negotiate->peer_cert_digest =
 802d9d8:	65f0      	str	r0, [r6, #92]	; 0x5c
    if( ssl->session_negotiate->peer_cert_digest == NULL )
 802d9da:	2800      	cmp	r0, #0
 802d9dc:	d05f      	beq.n	802da9e <mbedtls_ssl_parse_certificate+0x29a>
    ret = mbedtls_md( mbedtls_md_info_from_type(
 802d9de:	2006      	movs	r0, #6
 802d9e0:	f7f8 f936 	bl	8025c50 <mbedtls_md_info_from_type>
 802d9e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802d9e6:	4629      	mov	r1, r5
 802d9e8:	464a      	mov	r2, r9
 802d9ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d9ec:	f7f8 fa0a 	bl	8025e04 <mbedtls_md>
    ssl->session_negotiate->peer_cert_digest_type =
 802d9f0:	2106      	movs	r1, #6
    ssl->session_negotiate->peer_cert_digest_len =
 802d9f2:	2220      	movs	r2, #32
    ssl->session_negotiate->peer_cert_digest_type =
 802d9f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
        if( ret != 0 )
 802d9f6:	4605      	mov	r5, r0
    ssl->session_negotiate->peer_cert_digest_type =
 802d9f8:	f883 1064 	strb.w	r1, [r3, #100]	; 0x64
    ssl->session_negotiate->peer_cert_digest_len =
 802d9fc:	661a      	str	r2, [r3, #96]	; 0x60
        if( ret != 0 )
 802d9fe:	2800      	cmp	r0, #0
 802da00:	d1cd      	bne.n	802d99e <mbedtls_ssl_parse_certificate+0x19a>
    mbedtls_pk_init( &ssl->handshake->peer_pubkey );
 802da02:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 802da04:	9707      	str	r7, [sp, #28]
 802da06:	3018      	adds	r0, #24
 802da08:	f7f9 fbb8 	bl	802717c <mbedtls_pk_init>
    ret = mbedtls_pk_parse_subpubkey( &start, end,
 802da0c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    unsigned char *end = start + len;
 802da0e:	eb07 0108 	add.w	r1, r7, r8
    ret = mbedtls_pk_parse_subpubkey( &start, end,
 802da12:	3218      	adds	r2, #24
 802da14:	a807      	add	r0, sp, #28
 802da16:	f7f9 ff79 	bl	802790c <mbedtls_pk_parse_subpubkey>
    if( ret != 0 )
 802da1a:	4605      	mov	r5, r0
 802da1c:	2800      	cmp	r0, #0
 802da1e:	d135      	bne.n	802da8c <mbedtls_ssl_parse_certificate+0x288>
}
 802da20:	4628      	mov	r0, r5
        ssl->state++;
 802da22:	6863      	ldr	r3, [r4, #4]
 802da24:	3301      	adds	r3, #1
 802da26:	6063      	str	r3, [r4, #4]
}
 802da28:	b008      	add	sp, #32
 802da2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 802da2e:	222b      	movs	r2, #43	; 0x2b
 802da30:	e7ab      	b.n	802d98a <mbedtls_ssl_parse_certificate+0x186>
            alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
 802da32:	2231      	movs	r2, #49	; 0x31
 802da34:	e7a9      	b.n	802d98a <mbedtls_ssl_parse_certificate+0x186>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 802da36:	4620      	mov	r0, r4
 802da38:	2232      	movs	r2, #50	; 0x32
 802da3a:	2102      	movs	r1, #2
 802da3c:	f7fe ff6c 	bl	802c918 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 802da40:	4d1c      	ldr	r5, [pc, #112]	; (802dab4 <mbedtls_ssl_parse_certificate+0x2b0>)
 802da42:	e7a6      	b.n	802d992 <mbedtls_ssl_parse_certificate+0x18e>
        ret = mbedtls_x509_crt_verify_restartable(
 802da44:	6b65      	ldr	r5, [r4, #52]	; 0x34
            ca_chain = ssl->conf->ca_chain;
 802da46:	f8d2 8044 	ldr.w	r8, [r2, #68]	; 0x44
        ret = mbedtls_x509_crt_verify_restartable(
 802da4a:	f8d4 e0bc 	ldr.w	lr, [r4, #188]	; 0xbc
 802da4e:	3568      	adds	r5, #104	; 0x68
 802da50:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 802da52:	6c92      	ldr	r2, [r2, #72]	; 0x48
 802da54:	e9cd c103 	strd	ip, r1, [sp, #12]
 802da58:	9501      	str	r5, [sp, #4]
 802da5a:	9002      	str	r0, [sp, #8]
 802da5c:	4641      	mov	r1, r8
 802da5e:	4630      	mov	r0, r6
 802da60:	f8cd e000 	str.w	lr, [sp]
 802da64:	f002 f974 	bl	802fd50 <mbedtls_x509_crt_verify_restartable>
    if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 802da68:	2f01      	cmp	r7, #1
        ret = mbedtls_x509_crt_verify_restartable(
 802da6a:	4605      	mov	r5, r0
                                      &ssl->session_negotiate->verify_result ) != 0 )
 802da6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 802da6e:	f43f af6e 	beq.w	802d94e <mbedtls_ssl_parse_certificate+0x14a>
    if( have_ca_chain == 0 && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 802da72:	f1b8 0f00 	cmp.w	r8, #0
 802da76:	f47f af70 	bne.w	802d95a <mbedtls_ssl_parse_certificate+0x156>
 802da7a:	2f02      	cmp	r7, #2
 802da7c:	f47f af6d 	bne.w	802d95a <mbedtls_ssl_parse_certificate+0x156>
        ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
 802da80:	4d0d      	ldr	r5, [pc, #52]	; (802dab8 <mbedtls_ssl_parse_certificate+0x2b4>)
 802da82:	e76b      	b.n	802d95c <mbedtls_ssl_parse_certificate+0x158>
        f_vrfy = ssl->conf->f_vrfy;
 802da84:	6822      	ldr	r2, [r4, #0]
        p_vrfy = ssl->conf->p_vrfy;
 802da86:	e9d2 0c0d 	ldrd	r0, ip, [r2, #52]	; 0x34
 802da8a:	e746      	b.n	802d91a <mbedtls_ssl_parse_certificate+0x116>
        ret = ssl_remember_peer_pubkey( ssl, pk_start, pk_len );
 802da8c:	4d0b      	ldr	r5, [pc, #44]	; (802dabc <mbedtls_ssl_parse_certificate+0x2b8>)
 802da8e:	e786      	b.n	802d99e <mbedtls_ssl_parse_certificate+0x19a>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 802da90:	4620      	mov	r0, r4
 802da92:	220a      	movs	r2, #10
 802da94:	2102      	movs	r1, #2
 802da96:	f7fe ff3f 	bl	802c918 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 802da9a:	4d09      	ldr	r5, [pc, #36]	; (802dac0 <mbedtls_ssl_parse_certificate+0x2bc>)
 802da9c:	e779      	b.n	802d992 <mbedtls_ssl_parse_certificate+0x18e>
        mbedtls_ssl_send_alert_message( ssl,
 802da9e:	4620      	mov	r0, r4
 802daa0:	2250      	movs	r2, #80	; 0x50
 802daa2:	2102      	movs	r1, #2
 802daa4:	f7fe ff38 	bl	802c918 <mbedtls_ssl_send_alert_message>
        ret = MBEDTLS_ERR_SSL_ALLOC_FAILED;
 802daa8:	4d06      	ldr	r5, [pc, #24]	; (802dac4 <mbedtls_ssl_parse_certificate+0x2c0>)
 802daaa:	e778      	b.n	802d99e <mbedtls_ssl_parse_certificate+0x19a>
            alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
 802daac:	222d      	movs	r2, #45	; 0x2d
 802daae:	e76c      	b.n	802d98a <mbedtls_ssl_parse_certificate+0x186>
            alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
 802dab0:	222c      	movs	r2, #44	; 0x2c
 802dab2:	e76a      	b.n	802d98a <mbedtls_ssl_parse_certificate+0x186>
 802dab4:	ffff8600 	.word	0xffff8600
 802dab8:	ffff8980 	.word	0xffff8980
 802dabc:	ffff9400 	.word	0xffff9400
 802dac0:	ffff8900 	.word	0xffff8900
 802dac4:	ffff8100 	.word	0xffff8100
 802dac8:	ffffda81 	.word	0xffffda81
 802dacc:	ffffd9d2 	.word	0xffffd9d2

0802dad0 <mbedtls_ssl_optimize_checksum>:
    if( ciphersuite_info->mac != MBEDTLS_MD_SHA384 )
 802dad0:	7a4b      	ldrb	r3, [r1, #9]
 802dad2:	2b07      	cmp	r3, #7
 802dad4:	d003      	beq.n	802dade <mbedtls_ssl_optimize_checksum+0xe>
        ssl->handshake->update_checksum = ssl_update_checksum_sha256;
 802dad6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 802dad8:	4a01      	ldr	r2, [pc, #4]	; (802dae0 <mbedtls_ssl_optimize_checksum+0x10>)
 802dada:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 802dade:	4770      	bx	lr
 802dae0:	0802d20d 	.word	0x0802d20d

0802dae4 <mbedtls_ssl_handshake_wrapup>:
{
 802dae4:	b570      	push	{r4, r5, r6, lr}
    int resume = ssl->handshake->resume;
 802dae6:	6b83      	ldr	r3, [r0, #56]	; 0x38
    if( ssl->session )
 802dae8:	6b05      	ldr	r5, [r0, #48]	; 0x30
{
 802daea:	4604      	mov	r4, r0
    int resume = ssl->handshake->resume;
 802daec:	f8d3 6114 	ldr.w	r6, [r3, #276]	; 0x114
    if( ssl->session )
 802daf0:	b17d      	cbz	r5, 802db12 <mbedtls_ssl_handshake_wrapup+0x2e>
    if( session->peer_cert_digest != NULL )
 802daf2:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 802daf4:	b130      	cbz	r0, 802db04 <mbedtls_ssl_handshake_wrapup+0x20>
        mbedtls_free( session->peer_cert_digest );
 802daf6:	f002 f979 	bl	802fdec <free>
        session->peer_cert_digest      = NULL;
 802dafa:	2300      	movs	r3, #0
 802dafc:	65eb      	str	r3, [r5, #92]	; 0x5c
        session->peer_cert_digest_type = MBEDTLS_MD_NONE;
 802dafe:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
        session->peer_cert_digest_len  = 0;
 802db02:	662b      	str	r3, [r5, #96]	; 0x60
    mbedtls_platform_zeroize( session, sizeof( mbedtls_ssl_session ) );
 802db04:	4628      	mov	r0, r5
 802db06:	216c      	movs	r1, #108	; 0x6c
 802db08:	f7fa f810 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( ssl->session );
 802db0c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 802db0e:	f002 f96d 	bl	802fdec <free>
    ssl->session_negotiate = NULL;
 802db12:	2000      	movs	r0, #0
    if( ssl->conf->f_set_cache != NULL &&
 802db14:	6822      	ldr	r2, [r4, #0]
    ssl->session = ssl->session_negotiate;
 802db16:	6b61      	ldr	r1, [r4, #52]	; 0x34
    if( ssl->conf->f_set_cache != NULL &&
 802db18:	6a53      	ldr	r3, [r2, #36]	; 0x24
    ssl->session = ssl->session_negotiate;
 802db1a:	e9c4 100c 	strd	r1, r0, [r4, #48]	; 0x30
    if( ssl->conf->f_set_cache != NULL &&
 802db1e:	b10b      	cbz	r3, 802db24 <mbedtls_ssl_handshake_wrapup+0x40>
 802db20:	6888      	ldr	r0, [r1, #8]
 802db22:	bb58      	cbnz	r0, 802db7c <mbedtls_ssl_handshake_wrapup+0x98>
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
 802db24:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    if( handshake == NULL )
 802db26:	b1ad      	cbz	r5, 802db54 <mbedtls_ssl_handshake_wrapup+0x70>
    mbedtls_sha256_free(   &handshake->fin_sha256    );
 802db28:	f105 0020 	add.w	r0, r5, #32
 802db2c:	f7fc f9bc 	bl	8029ea8 <mbedtls_sha256_free>
    if( handshake->sni_key_cert != NULL )
 802db30:	68ee      	ldr	r6, [r5, #12]
 802db32:	b12e      	cbz	r6, 802db40 <mbedtls_ssl_handshake_wrapup+0x5c>
            next = cur->next;
 802db34:	4630      	mov	r0, r6
 802db36:	68b6      	ldr	r6, [r6, #8]
            mbedtls_free( cur );
 802db38:	f002 f958 	bl	802fdec <free>
        while( cur != NULL )
 802db3c:	2e00      	cmp	r6, #0
 802db3e:	d1f9      	bne.n	802db34 <mbedtls_ssl_handshake_wrapup+0x50>
    mbedtls_pk_free( &handshake->peer_pubkey );
 802db40:	f105 0018 	add.w	r0, r5, #24
 802db44:	f7f9 fb1e 	bl	8027184 <mbedtls_pk_free>
    mbedtls_platform_zeroize( handshake,
 802db48:	4628      	mov	r0, r5
 802db4a:	f44f 7192 	mov.w	r1, #292	; 0x124
 802db4e:	f7f9 ffed 	bl	8027b2c <mbedtls_platform_zeroize>
 802db52:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    mbedtls_free( ssl->handshake );
 802db54:	4628      	mov	r0, r5
 802db56:	f002 f949 	bl	802fdec <free>
    ssl->handshake = NULL;
 802db5a:	2300      	movs	r3, #0
    if( ssl->transform )
 802db5c:	6c60      	ldr	r0, [r4, #68]	; 0x44
    ssl->handshake = NULL;
 802db5e:	63a3      	str	r3, [r4, #56]	; 0x38
    if( ssl->transform )
 802db60:	b120      	cbz	r0, 802db6c <mbedtls_ssl_handshake_wrapup+0x88>
        mbedtls_ssl_transform_free( ssl->transform );
 802db62:	f7ff fa45 	bl	802cff0 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 802db66:	6c60      	ldr	r0, [r4, #68]	; 0x44
 802db68:	f002 f940 	bl	802fdec <free>
    ssl->transform_negotiate = NULL;
 802db6c:	2100      	movs	r1, #0
    ssl->state++;
 802db6e:	6863      	ldr	r3, [r4, #4]
    ssl->transform = ssl->transform_negotiate;
 802db70:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    ssl->state++;
 802db72:	3301      	adds	r3, #1
    ssl->transform = ssl->transform_negotiate;
 802db74:	e9c4 2111 	strd	r2, r1, [r4, #68]	; 0x44
    ssl->state++;
 802db78:	6063      	str	r3, [r4, #4]
}
 802db7a:	bd70      	pop	{r4, r5, r6, pc}
        ssl->session->id_len != 0 &&
 802db7c:	2e00      	cmp	r6, #0
 802db7e:	d1d1      	bne.n	802db24 <mbedtls_ssl_handshake_wrapup+0x40>
        if( ssl->conf->f_set_cache( ssl->conf->p_cache, ssl->session ) != 0 )
 802db80:	6a90      	ldr	r0, [r2, #40]	; 0x28
 802db82:	4798      	blx	r3
 802db84:	e7ce      	b.n	802db24 <mbedtls_ssl_handshake_wrapup+0x40>
 802db86:	bf00      	nop

0802db88 <mbedtls_ssl_write_finished>:
{
 802db88:	b510      	push	{r4, lr}
 802db8a:	4604      	mov	r4, r0
    mbedtls_ssl_update_out_pointers( ssl, ssl->transform_negotiate );
 802db8c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 802db8e:	f7ff f8eb 	bl	802cd68 <mbedtls_ssl_update_out_pointers>
    ssl->handshake->calc_finished( ssl, ssl->out_msg + 4, ssl->conf->endpoint );
 802db92:	6823      	ldr	r3, [r4, #0]
 802db94:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 802db98:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 802db9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802db9e:	4620      	mov	r0, r4
 802dba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 802dba4:	f002 0201 	and.w	r2, r2, #1
 802dba8:	3104      	adds	r1, #4
 802dbaa:	4798      	blx	r3
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 802dbac:	68e3      	ldr	r3, [r4, #12]
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 802dbae:	2116      	movs	r1, #22
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 802dbb0:	2b00      	cmp	r3, #0
 802dbb2:	bf0c      	ite	eq
 802dbb4:	2028      	moveq	r0, #40	; 0x28
 802dbb6:	2010      	movne	r0, #16
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 802dbb8:	2214      	movs	r2, #20
 802dbba:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 802dbbe:	e9c4 1029 	strd	r1, r0, [r4, #164]	; 0xa4
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 802dbc2:	701a      	strb	r2, [r3, #0]
    if( ssl->handshake->resume != 0 )
 802dbc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802dbc6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 802dbca:	b1a3      	cbz	r3, 802dbf6 <mbedtls_ssl_write_finished+0x6e>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 802dbcc:	6823      	ldr	r3, [r4, #0]
 802dbce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 802dbd2:	07db      	lsls	r3, r3, #31
 802dbd4:	d401      	bmi.n	802dbda <mbedtls_ssl_write_finished+0x52>
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 802dbd6:	230f      	movs	r3, #15
 802dbd8:	6063      	str	r3, [r4, #4]
    memset( ssl->cur_out_ctr, 0, 8 );
 802dbda:	2300      	movs	r3, #0
    ssl->transform_out = ssl->transform_negotiate;
 802dbdc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    ssl->session_out = ssl->session_negotiate;
 802dbde:	6b62      	ldr	r2, [r4, #52]	; 0x34
    memset( ssl->cur_out_ctr, 0, 8 );
 802dbe0:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 802dbe4:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
 802dbe8:	4620      	mov	r0, r4
    ssl->transform_out = ssl->transform_negotiate;
 802dbea:	6421      	str	r1, [r4, #64]	; 0x40
    ssl->session_out = ssl->session_negotiate;
 802dbec:	62e2      	str	r2, [r4, #44]	; 0x2c
}
 802dbee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
 802dbf2:	f7fe bb49 	b.w	802c288 <mbedtls_ssl_write_handshake_msg>
        ssl->state++;
 802dbf6:	6863      	ldr	r3, [r4, #4]
 802dbf8:	3301      	adds	r3, #1
 802dbfa:	6063      	str	r3, [r4, #4]
 802dbfc:	e7ed      	b.n	802dbda <mbedtls_ssl_write_finished+0x52>
 802dbfe:	bf00      	nop

0802dc00 <mbedtls_ssl_parse_finished>:
    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
 802dc00:	6802      	ldr	r2, [r0, #0]
{
 802dc02:	b530      	push	{r4, r5, lr}
    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
 802dc04:	f892 205c 	ldrb.w	r2, [r2, #92]	; 0x5c
{
 802dc08:	4604      	mov	r4, r0
    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
 802dc0a:	43d2      	mvns	r2, r2
 802dc0c:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
 802dc0e:	b085      	sub	sp, #20
    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
 802dc10:	a901      	add	r1, sp, #4
 802dc12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 802dc16:	f002 0201 	and.w	r2, r2, #1
 802dc1a:	4798      	blx	r3
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 802dc1c:	4620      	mov	r0, r4
 802dc1e:	2101      	movs	r1, #1
 802dc20:	f7fe fd0a 	bl	802c638 <mbedtls_ssl_read_record>
 802dc24:	2800      	cmp	r0, #0
 802dc26:	f040 808a 	bne.w	802dd3e <mbedtls_ssl_parse_finished+0x13e>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 802dc2a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 802dc2c:	2b16      	cmp	r3, #22
 802dc2e:	f040 8094 	bne.w	802dd5a <mbedtls_ssl_parse_finished+0x15a>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_FINISHED ||
 802dc32:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 802dc34:	781a      	ldrb	r2, [r3, #0]
 802dc36:	2a14      	cmp	r2, #20
 802dc38:	f040 8088 	bne.w	802dd4c <mbedtls_ssl_parse_finished+0x14c>
 802dc3c:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 802dc40:	2a10      	cmp	r2, #16
 802dc42:	f040 8083 	bne.w	802dd4c <mbedtls_ssl_parse_finished+0x14c>
    volatile unsigned char diff = 0;
 802dc46:	f88d 0003 	strb.w	r0, [sp, #3]
        unsigned char x = A[i], y = B[i];
 802dc4a:	791d      	ldrb	r5, [r3, #4]
 802dc4c:	f89d 1004 	ldrb.w	r1, [sp, #4]
        diff |= x ^ y;
 802dc50:	f89d 2003 	ldrb.w	r2, [sp, #3]
 802dc54:	4069      	eors	r1, r5
 802dc56:	430a      	orrs	r2, r1
 802dc58:	f88d 2003 	strb.w	r2, [sp, #3]
        unsigned char x = A[i], y = B[i];
 802dc5c:	7959      	ldrb	r1, [r3, #5]
 802dc5e:	f89d 5005 	ldrb.w	r5, [sp, #5]
        diff |= x ^ y;
 802dc62:	f89d 2003 	ldrb.w	r2, [sp, #3]
 802dc66:	4069      	eors	r1, r5
 802dc68:	430a      	orrs	r2, r1
 802dc6a:	f88d 2003 	strb.w	r2, [sp, #3]
        unsigned char x = A[i], y = B[i];
 802dc6e:	7999      	ldrb	r1, [r3, #6]
 802dc70:	f89d 5006 	ldrb.w	r5, [sp, #6]
        diff |= x ^ y;
 802dc74:	f89d 2003 	ldrb.w	r2, [sp, #3]
 802dc78:	4069      	eors	r1, r5
 802dc7a:	430a      	orrs	r2, r1
 802dc7c:	f88d 2003 	strb.w	r2, [sp, #3]
        unsigned char x = A[i], y = B[i];
 802dc80:	79d9      	ldrb	r1, [r3, #7]
 802dc82:	f89d 5007 	ldrb.w	r5, [sp, #7]
        diff |= x ^ y;
 802dc86:	f89d 2003 	ldrb.w	r2, [sp, #3]
 802dc8a:	4069      	eors	r1, r5
 802dc8c:	430a      	orrs	r2, r1
 802dc8e:	f88d 2003 	strb.w	r2, [sp, #3]
        unsigned char x = A[i], y = B[i];
 802dc92:	7a19      	ldrb	r1, [r3, #8]
 802dc94:	f89d 5008 	ldrb.w	r5, [sp, #8]
        diff |= x ^ y;
 802dc98:	f89d 2003 	ldrb.w	r2, [sp, #3]
 802dc9c:	4069      	eors	r1, r5
 802dc9e:	430a      	orrs	r2, r1
 802dca0:	f88d 2003 	strb.w	r2, [sp, #3]
        unsigned char x = A[i], y = B[i];
 802dca4:	7a59      	ldrb	r1, [r3, #9]
 802dca6:	f89d 5009 	ldrb.w	r5, [sp, #9]
        diff |= x ^ y;
 802dcaa:	f89d 2003 	ldrb.w	r2, [sp, #3]
 802dcae:	4069      	eors	r1, r5
 802dcb0:	430a      	orrs	r2, r1
 802dcb2:	f88d 2003 	strb.w	r2, [sp, #3]
        unsigned char x = A[i], y = B[i];
 802dcb6:	7a99      	ldrb	r1, [r3, #10]
 802dcb8:	f89d 500a 	ldrb.w	r5, [sp, #10]
        diff |= x ^ y;
 802dcbc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 802dcc0:	4069      	eors	r1, r5
 802dcc2:	430a      	orrs	r2, r1
 802dcc4:	f88d 2003 	strb.w	r2, [sp, #3]
        unsigned char x = A[i], y = B[i];
 802dcc8:	7ad9      	ldrb	r1, [r3, #11]
 802dcca:	f89d 500b 	ldrb.w	r5, [sp, #11]
        diff |= x ^ y;
 802dcce:	f89d 2003 	ldrb.w	r2, [sp, #3]
 802dcd2:	4069      	eors	r1, r5
 802dcd4:	430a      	orrs	r2, r1
 802dcd6:	f88d 2003 	strb.w	r2, [sp, #3]
        unsigned char x = A[i], y = B[i];
 802dcda:	7b19      	ldrb	r1, [r3, #12]
 802dcdc:	f89d 500c 	ldrb.w	r5, [sp, #12]
        diff |= x ^ y;
 802dce0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 802dce4:	4069      	eors	r1, r5
 802dce6:	430a      	orrs	r2, r1
 802dce8:	f88d 2003 	strb.w	r2, [sp, #3]
        unsigned char x = A[i], y = B[i];
 802dcec:	7b59      	ldrb	r1, [r3, #13]
 802dcee:	f89d 500d 	ldrb.w	r5, [sp, #13]
        diff |= x ^ y;
 802dcf2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 802dcf6:	4069      	eors	r1, r5
 802dcf8:	430a      	orrs	r2, r1
 802dcfa:	f88d 2003 	strb.w	r2, [sp, #3]
        unsigned char x = A[i], y = B[i];
 802dcfe:	7b99      	ldrb	r1, [r3, #14]
 802dd00:	f89d 500e 	ldrb.w	r5, [sp, #14]
        diff |= x ^ y;
 802dd04:	f89d 2003 	ldrb.w	r2, [sp, #3]
 802dd08:	4069      	eors	r1, r5
 802dd0a:	430a      	orrs	r2, r1
 802dd0c:	f88d 2003 	strb.w	r2, [sp, #3]
        unsigned char x = A[i], y = B[i];
 802dd10:	7bda      	ldrb	r2, [r3, #15]
 802dd12:	f89d 100f 	ldrb.w	r1, [sp, #15]
        diff |= x ^ y;
 802dd16:	f89d 3003 	ldrb.w	r3, [sp, #3]
 802dd1a:	404a      	eors	r2, r1
 802dd1c:	4313      	orrs	r3, r2
 802dd1e:	f88d 3003 	strb.w	r3, [sp, #3]
    return( diff );
 802dd22:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if( mbedtls_ssl_safer_memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ),
 802dd26:	b98b      	cbnz	r3, 802dd4c <mbedtls_ssl_parse_finished+0x14c>
    if( ssl->handshake->resume != 0 )
 802dd28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802dd2a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 802dd2e:	b143      	cbz	r3, 802dd42 <mbedtls_ssl_parse_finished+0x142>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 802dd30:	6823      	ldr	r3, [r4, #0]
 802dd32:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 802dd36:	07db      	lsls	r3, r3, #31
 802dd38:	d401      	bmi.n	802dd3e <mbedtls_ssl_parse_finished+0x13e>
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
 802dd3a:	230a      	movs	r3, #10
 802dd3c:	6063      	str	r3, [r4, #4]
}
 802dd3e:	b005      	add	sp, #20
 802dd40:	bd30      	pop	{r4, r5, pc}
        ssl->state++;
 802dd42:	6863      	ldr	r3, [r4, #4]
 802dd44:	3301      	adds	r3, #1
 802dd46:	6063      	str	r3, [r4, #4]
}
 802dd48:	b005      	add	sp, #20
 802dd4a:	bd30      	pop	{r4, r5, pc}
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 802dd4c:	4620      	mov	r0, r4
 802dd4e:	2232      	movs	r2, #50	; 0x32
 802dd50:	2102      	movs	r1, #2
 802dd52:	f7fe fde1 	bl	802c918 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
 802dd56:	4804      	ldr	r0, [pc, #16]	; (802dd68 <mbedtls_ssl_parse_finished+0x168>)
 802dd58:	e7f1      	b.n	802dd3e <mbedtls_ssl_parse_finished+0x13e>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 802dd5a:	4620      	mov	r0, r4
 802dd5c:	220a      	movs	r2, #10
 802dd5e:	2102      	movs	r1, #2
 802dd60:	f7fe fdda 	bl	802c918 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 802dd64:	4801      	ldr	r0, [pc, #4]	; (802dd6c <mbedtls_ssl_parse_finished+0x16c>)
 802dd66:	e7ea      	b.n	802dd3e <mbedtls_ssl_parse_finished+0x13e>
 802dd68:	ffff8180 	.word	0xffff8180
 802dd6c:	ffff8900 	.word	0xffff8900

0802dd70 <mbedtls_ssl_init>:
    memset( ssl, 0, sizeof( mbedtls_ssl_context ) );
 802dd70:	22c8      	movs	r2, #200	; 0xc8
 802dd72:	2100      	movs	r1, #0
 802dd74:	f002 b877 	b.w	802fe66 <memset>

0802dd78 <mbedtls_ssl_setup>:
{
 802dd78:	b538      	push	{r3, r4, r5, lr}
    ssl->out_buf = NULL;
 802dd7a:	2300      	movs	r3, #0
    ssl->conf = conf;
 802dd7c:	6001      	str	r1, [r0, #0]
{
 802dd7e:	4604      	mov	r4, r0
    ssl->out_buf = NULL;
 802dd80:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    ssl->in_buf = mbedtls_calloc( 1, in_buf_len );
 802dd84:	f244 113d 	movw	r1, #16701	; 0x413d
 802dd88:	2001      	movs	r0, #1
 802dd8a:	f001 fff5 	bl	802fd78 <calloc>
 802dd8e:	65a0      	str	r0, [r4, #88]	; 0x58
    if( ssl->in_buf == NULL )
 802dd90:	b188      	cbz	r0, 802ddb6 <mbedtls_ssl_setup+0x3e>
    ssl->out_buf = mbedtls_calloc( 1, out_buf_len );
 802dd92:	f244 113d 	movw	r1, #16701	; 0x413d
 802dd96:	2001      	movs	r0, #1
 802dd98:	f001 ffee 	bl	802fd78 <calloc>
 802dd9c:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if( ssl->out_buf == NULL )
 802dda0:	b148      	cbz	r0, 802ddb6 <mbedtls_ssl_setup+0x3e>
    mbedtls_ssl_reset_in_out_pointers( ssl );
 802dda2:	4620      	mov	r0, r4
 802dda4:	f7fe fffc 	bl	802cda0 <mbedtls_ssl_reset_in_out_pointers>
    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 802dda8:	4620      	mov	r0, r4
 802ddaa:	f7ff fa33 	bl	802d214 <ssl_handshake_init>
 802ddae:	4605      	mov	r5, r0
 802ddb0:	b910      	cbnz	r0, 802ddb8 <mbedtls_ssl_setup+0x40>
}
 802ddb2:	4628      	mov	r0, r5
 802ddb4:	bd38      	pop	{r3, r4, r5, pc}
        ret = MBEDTLS_ERR_SSL_ALLOC_FAILED;
 802ddb6:	4d0d      	ldr	r5, [pc, #52]	; (802ddec <mbedtls_ssl_setup+0x74>)
    mbedtls_free( ssl->in_buf );
 802ddb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802ddba:	f002 f817 	bl	802fdec <free>
    mbedtls_free( ssl->out_buf );
 802ddbe:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 802ddc2:	f002 f813 	bl	802fdec <free>
    ssl->conf = NULL;
 802ddc6:	2300      	movs	r3, #0
}
 802ddc8:	4628      	mov	r0, r5
    ssl->in_ctr = NULL;
 802ddca:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
    ssl->in_iv = NULL;
 802ddce:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
    ssl->out_ctr = NULL;
 802ddd2:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
    ssl->out_iv = NULL;
 802ddd6:	e9c4 3326 	strd	r3, r3, [r4, #152]	; 0x98
    ssl->conf = NULL;
 802ddda:	6023      	str	r3, [r4, #0]
    ssl->in_buf = NULL;
 802dddc:	65a3      	str	r3, [r4, #88]	; 0x58
    ssl->out_buf = NULL;
 802ddde:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    ssl->in_msg = NULL;
 802dde2:	66e3      	str	r3, [r4, #108]	; 0x6c
    ssl->out_msg = NULL;
 802dde4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
}
 802dde8:	bd38      	pop	{r3, r4, r5, pc}
 802ddea:	bf00      	nop
 802ddec:	ffff8100 	.word	0xffff8100

0802ddf0 <mbedtls_ssl_session_reset>:
{
 802ddf0:	b538      	push	{r3, r4, r5, lr}
    ssl->state = MBEDTLS_SSL_HELLO_REQUEST;
 802ddf2:	2500      	movs	r5, #0
{
 802ddf4:	4604      	mov	r4, r0
    mbedtls_ssl_set_timer( ssl, 0 );
 802ddf6:	4629      	mov	r1, r5
    ssl->state = MBEDTLS_SSL_HELLO_REQUEST;
 802ddf8:	6045      	str	r5, [r0, #4]
    mbedtls_ssl_set_timer( ssl, 0 );
 802ddfa:	f7fd fd43 	bl	802b884 <mbedtls_ssl_set_timer>
    mbedtls_ssl_reset_in_out_pointers( ssl );
 802ddfe:	4620      	mov	r0, r4
    ssl->secure_renegotiation = MBEDTLS_SSL_LEGACY_RENEGOTIATION;
 802de00:	f8c4 50c4 	str.w	r5, [r4, #196]	; 0xc4
    ssl->in_offt = NULL;
 802de04:	6725      	str	r5, [r4, #112]	; 0x70
    mbedtls_ssl_reset_in_out_pointers( ssl );
 802de06:	f7fe ffcb 	bl	802cda0 <mbedtls_ssl_reset_in_out_pointers>
    memset( ssl->out_buf, 0, out_buf_len );
 802de0a:	4629      	mov	r1, r5
 802de0c:	f244 123d 	movw	r2, #16701	; 0x413d
    ssl->in_msglen = 0;
 802de10:	e9c4 551d 	strd	r5, r5, [r4, #116]	; 0x74
    ssl->nb_zero = 0;
 802de14:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
    ssl->out_msglen = 0;
 802de18:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
    ssl->transform_out = NULL;
 802de1c:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
    ssl->session_out = NULL;
 802de20:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
    memset( ssl->out_buf, 0, out_buf_len );
 802de24:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    ssl->keep_current_message = 0;
 802de28:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    ssl->out_left = 0;
 802de2c:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
    memset( ssl->cur_out_ctr, 0, sizeof( ssl->cur_out_ctr ) );
 802de30:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
 802de34:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
    memset( ssl->out_buf, 0, out_buf_len );
 802de38:	f002 f815 	bl	802fe66 <memset>
        memset( ssl->in_buf, 0, in_buf_len );
 802de3c:	4629      	mov	r1, r5
 802de3e:	f244 123d 	movw	r2, #16701	; 0x413d
 802de42:	6da0      	ldr	r0, [r4, #88]	; 0x58
        ssl->in_left = 0;
 802de44:	67e5      	str	r5, [r4, #124]	; 0x7c
        memset( ssl->in_buf, 0, in_buf_len );
 802de46:	f002 f80e 	bl	802fe66 <memset>
    if( ssl->transform )
 802de4a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 802de4c:	b128      	cbz	r0, 802de5a <mbedtls_ssl_session_reset+0x6a>
        mbedtls_ssl_transform_free( ssl->transform );
 802de4e:	f7ff f8cf 	bl	802cff0 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 802de52:	6c60      	ldr	r0, [r4, #68]	; 0x44
 802de54:	f001 ffca 	bl	802fdec <free>
        ssl->transform = NULL;
 802de58:	6465      	str	r5, [r4, #68]	; 0x44
    if( ssl->session )
 802de5a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 802de5c:	b18d      	cbz	r5, 802de82 <mbedtls_ssl_session_reset+0x92>
    if( session->peer_cert_digest != NULL )
 802de5e:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 802de60:	b130      	cbz	r0, 802de70 <mbedtls_ssl_session_reset+0x80>
        mbedtls_free( session->peer_cert_digest );
 802de62:	f001 ffc3 	bl	802fdec <free>
        session->peer_cert_digest      = NULL;
 802de66:	2300      	movs	r3, #0
 802de68:	65eb      	str	r3, [r5, #92]	; 0x5c
        session->peer_cert_digest_type = MBEDTLS_MD_NONE;
 802de6a:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
        session->peer_cert_digest_len  = 0;
 802de6e:	662b      	str	r3, [r5, #96]	; 0x60
    mbedtls_platform_zeroize( session, sizeof( mbedtls_ssl_session ) );
 802de70:	4628      	mov	r0, r5
 802de72:	216c      	movs	r1, #108	; 0x6c
 802de74:	f7f9 fe5a 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( ssl->session );
 802de78:	6b20      	ldr	r0, [r4, #48]	; 0x30
 802de7a:	f001 ffb7 	bl	802fdec <free>
        ssl->session = NULL;
 802de7e:	2300      	movs	r3, #0
 802de80:	6323      	str	r3, [r4, #48]	; 0x30
    ssl->alpn_chosen = NULL;
 802de82:	2300      	movs	r3, #0
    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 802de84:	4620      	mov	r0, r4
    ssl->alpn_chosen = NULL;
 802de86:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
}
 802de8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 802de8e:	f7ff b9c1 	b.w	802d214 <ssl_handshake_init>
 802de92:	bf00      	nop

0802de94 <mbedtls_ssl_conf_endpoint>:
    conf->endpoint   = endpoint;
 802de94:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 802de98:	f361 0300 	bfi	r3, r1, #0, #1
 802de9c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
}
 802dea0:	4770      	bx	lr
 802dea2:	bf00      	nop

0802dea4 <mbedtls_ssl_conf_authmode>:
    conf->authmode   = authmode;
 802dea4:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 802dea8:	f361 0383 	bfi	r3, r1, #2, #2
 802deac:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
}
 802deb0:	4770      	bx	lr
 802deb2:	bf00      	nop

0802deb4 <mbedtls_ssl_conf_rng>:
    conf->p_rng      = p_rng;
 802deb4:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 802deb8:	4770      	bx	lr
 802deba:	bf00      	nop

0802debc <mbedtls_ssl_set_bio>:
{
 802debc:	b410      	push	{r4}
 802debe:	9c01      	ldr	r4, [sp, #4]
    ssl->f_recv         = f_recv;
 802dec0:	e9c0 2306 	strd	r2, r3, [r0, #24]
    ssl->f_recv_timeout = f_recv_timeout;
 802dec4:	6204      	str	r4, [r0, #32]
    ssl->p_bio          = p_bio;
 802dec6:	6241      	str	r1, [r0, #36]	; 0x24
}
 802dec8:	f85d 4b04 	ldr.w	r4, [sp], #4
 802decc:	4770      	bx	lr
 802dece:	bf00      	nop

0802ded0 <mbedtls_ssl_conf_read_timeout>:
    conf->read_timeout   = timeout;
 802ded0:	6541      	str	r1, [r0, #84]	; 0x54
}
 802ded2:	4770      	bx	lr

0802ded4 <mbedtls_ssl_conf_own_cert>:
{
 802ded4:	b570      	push	{r4, r5, r6, lr}
 802ded6:	4604      	mov	r4, r0
 802ded8:	460e      	mov	r6, r1
    new_cert = mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 802deda:	2001      	movs	r0, #1
 802dedc:	210c      	movs	r1, #12
{
 802dede:	4615      	mov	r5, r2
    new_cert = mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 802dee0:	f001 ff4a 	bl	802fd78 <calloc>
    if( new_cert == NULL )
 802dee4:	b178      	cbz	r0, 802df06 <mbedtls_ssl_conf_own_cert+0x32>
    new_cert->next = NULL;
 802dee6:	2200      	movs	r2, #0
    if( *head == NULL )
 802dee8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    new_cert->key  = key;
 802deea:	e9c0 6500 	strd	r6, r5, [r0]
    new_cert->next = NULL;
 802deee:	6082      	str	r2, [r0, #8]
    if( *head == NULL )
 802def0:	b133      	cbz	r3, 802df00 <mbedtls_ssl_conf_own_cert+0x2c>
        while( cur->next != NULL )
 802def2:	461a      	mov	r2, r3
 802def4:	689b      	ldr	r3, [r3, #8]
 802def6:	2b00      	cmp	r3, #0
 802def8:	d1fb      	bne.n	802def2 <mbedtls_ssl_conf_own_cert+0x1e>
        cur->next = new_cert;
 802defa:	6090      	str	r0, [r2, #8]
    return( 0 );
 802defc:	4618      	mov	r0, r3
}
 802defe:	bd70      	pop	{r4, r5, r6, pc}
        *head = new_cert;
 802df00:	6420      	str	r0, [r4, #64]	; 0x40
    return( 0 );
 802df02:	4618      	mov	r0, r3
}
 802df04:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 802df06:	4801      	ldr	r0, [pc, #4]	; (802df0c <mbedtls_ssl_conf_own_cert+0x38>)
}
 802df08:	bd70      	pop	{r4, r5, r6, pc}
 802df0a:	bf00      	nop
 802df0c:	ffff8100 	.word	0xffff8100

0802df10 <mbedtls_ssl_conf_ca_chain>:
    conf->ca_crl     = ca_crl;
 802df10:	e9c0 1211 	strd	r1, r2, [r0, #68]	; 0x44
}
 802df14:	4770      	bx	lr
 802df16:	bf00      	nop

0802df18 <mbedtls_ssl_set_hostname>:
{
 802df18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802df1a:	4604      	mov	r4, r0
    if( hostname != NULL )
 802df1c:	b321      	cbz	r1, 802df68 <mbedtls_ssl_set_hostname+0x50>
        hostname_len = strlen( hostname );
 802df1e:	4608      	mov	r0, r1
 802df20:	460d      	mov	r5, r1
 802df22:	f7e2 f993 	bl	801024c <strlen>
        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
 802df26:	28ff      	cmp	r0, #255	; 0xff
        hostname_len = strlen( hostname );
 802df28:	4606      	mov	r6, r0
        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
 802df2a:	d82f      	bhi.n	802df8c <mbedtls_ssl_set_hostname+0x74>
    if( ssl->hostname != NULL )
 802df2c:	f8d4 70bc 	ldr.w	r7, [r4, #188]	; 0xbc
 802df30:	b157      	cbz	r7, 802df48 <mbedtls_ssl_set_hostname+0x30>
        mbedtls_platform_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 802df32:	4638      	mov	r0, r7
 802df34:	f7e2 f98a 	bl	801024c <strlen>
 802df38:	4601      	mov	r1, r0
 802df3a:	4638      	mov	r0, r7
 802df3c:	f7f9 fdf6 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( ssl->hostname );
 802df40:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
 802df44:	f001 ff52 	bl	802fdec <free>
        ssl->hostname = mbedtls_calloc( 1, hostname_len + 1 );
 802df48:	2001      	movs	r0, #1
 802df4a:	1c71      	adds	r1, r6, #1
 802df4c:	f001 ff14 	bl	802fd78 <calloc>
 802df50:	4607      	mov	r7, r0
 802df52:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
        if( ssl->hostname == NULL )
 802df56:	b1d8      	cbz	r0, 802df90 <mbedtls_ssl_set_hostname+0x78>
        memcpy( ssl->hostname, hostname, hostname_len );
 802df58:	4629      	mov	r1, r5
 802df5a:	4632      	mov	r2, r6
 802df5c:	f001 ff5c 	bl	802fe18 <memcpy>
        ssl->hostname[hostname_len] = '\0';
 802df60:	2300      	movs	r3, #0
 802df62:	55bb      	strb	r3, [r7, r6]
    return( 0 );
 802df64:	4618      	mov	r0, r3
}
 802df66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if( ssl->hostname != NULL )
 802df68:	f8d0 50bc 	ldr.w	r5, [r0, #188]	; 0xbc
 802df6c:	b155      	cbz	r5, 802df84 <mbedtls_ssl_set_hostname+0x6c>
        mbedtls_platform_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 802df6e:	4628      	mov	r0, r5
 802df70:	f7e2 f96c 	bl	801024c <strlen>
 802df74:	4601      	mov	r1, r0
 802df76:	4628      	mov	r0, r5
 802df78:	f7f9 fdd8 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( ssl->hostname );
 802df7c:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
 802df80:	f001 ff34 	bl	802fdec <free>
        ssl->hostname = NULL;
 802df84:	2000      	movs	r0, #0
 802df86:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
}
 802df8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 802df8c:	4801      	ldr	r0, [pc, #4]	; (802df94 <mbedtls_ssl_set_hostname+0x7c>)
}
 802df8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 802df90:	4801      	ldr	r0, [pc, #4]	; (802df98 <mbedtls_ssl_set_hostname+0x80>)
}
 802df92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802df94:	ffff8f00 	.word	0xffff8f00
 802df98:	ffff8100 	.word	0xffff8100

0802df9c <mbedtls_ssl_get_verify_result>:
    if( ssl->session != NULL )
 802df9c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 802df9e:	b10b      	cbz	r3, 802dfa4 <mbedtls_ssl_get_verify_result+0x8>
        return( ssl->session_negotiate->verify_result );
 802dfa0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 802dfa2:	4770      	bx	lr
    if( ssl->session_negotiate != NULL )
 802dfa4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 802dfa6:	2b00      	cmp	r3, #0
 802dfa8:	d1fa      	bne.n	802dfa0 <mbedtls_ssl_get_verify_result+0x4>
    return( 0xFFFFFFFF );
 802dfaa:	f04f 30ff 	mov.w	r0, #4294967295
}
 802dfae:	4770      	bx	lr

0802dfb0 <mbedtls_ssl_get_ciphersuite>:
    if( ssl == NULL || ssl->session == NULL )
 802dfb0:	b120      	cbz	r0, 802dfbc <mbedtls_ssl_get_ciphersuite+0xc>
 802dfb2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 802dfb4:	b113      	cbz	r3, 802dfbc <mbedtls_ssl_get_ciphersuite+0xc>
    return mbedtls_ssl_get_ciphersuite_name( ssl->session->ciphersuite );
 802dfb6:	6818      	ldr	r0, [r3, #0]
 802dfb8:	f7fc be90 	b.w	802acdc <mbedtls_ssl_get_ciphersuite_name>
}
 802dfbc:	2000      	movs	r0, #0
 802dfbe:	4770      	bx	lr

0802dfc0 <mbedtls_ssl_get_max_out_record_payload>:
}
 802dfc0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 802dfc4:	4770      	bx	lr
 802dfc6:	bf00      	nop

0802dfc8 <mbedtls_ssl_handshake>:
    if( ssl == NULL || ssl->conf == NULL )
 802dfc8:	b1b8      	cbz	r0, 802dffa <mbedtls_ssl_handshake+0x32>
 802dfca:	6803      	ldr	r3, [r0, #0]
{
 802dfcc:	b510      	push	{r4, lr}
 802dfce:	4604      	mov	r4, r0
    if( ssl == NULL || ssl->conf == NULL )
 802dfd0:	b953      	cbnz	r3, 802dfe8 <mbedtls_ssl_handshake+0x20>
 802dfd2:	e010      	b.n	802dff6 <mbedtls_ssl_handshake+0x2e>
    if( ssl == NULL || ssl->conf == NULL )
 802dfd4:	6823      	ldr	r3, [r4, #0]
 802dfd6:	b173      	cbz	r3, 802dff6 <mbedtls_ssl_handshake+0x2e>
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 802dfd8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 802dfdc:	07db      	lsls	r3, r3, #31
 802dfde:	d408      	bmi.n	802dff2 <mbedtls_ssl_handshake+0x2a>
        ret = mbedtls_ssl_handshake_client_step( ssl );
 802dfe0:	4620      	mov	r0, r4
 802dfe2:	f7fc fe8b 	bl	802acfc <mbedtls_ssl_handshake_client_step>
        if( ret != 0 )
 802dfe6:	b918      	cbnz	r0, 802dff0 <mbedtls_ssl_handshake+0x28>
    while( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 802dfe8:	6863      	ldr	r3, [r4, #4]
 802dfea:	2b10      	cmp	r3, #16
 802dfec:	d1f2      	bne.n	802dfd4 <mbedtls_ssl_handshake+0xc>
 802dfee:	2000      	movs	r0, #0
}
 802dff0:	bd10      	pop	{r4, pc}
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
 802dff2:	4803      	ldr	r0, [pc, #12]	; (802e000 <mbedtls_ssl_handshake+0x38>)
}
 802dff4:	bd10      	pop	{r4, pc}
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 802dff6:	4803      	ldr	r0, [pc, #12]	; (802e004 <mbedtls_ssl_handshake+0x3c>)
}
 802dff8:	bd10      	pop	{r4, pc}
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 802dffa:	4802      	ldr	r0, [pc, #8]	; (802e004 <mbedtls_ssl_handshake+0x3c>)
}
 802dffc:	4770      	bx	lr
 802dffe:	bf00      	nop
 802e000:	ffff8f80 	.word	0xffff8f80
 802e004:	ffff8f00 	.word	0xffff8f00

0802e008 <mbedtls_ssl_free>:
    if( ssl == NULL )
 802e008:	2800      	cmp	r0, #0
 802e00a:	d079      	beq.n	802e100 <mbedtls_ssl_free+0xf8>
{
 802e00c:	b570      	push	{r4, r5, r6, lr}
 802e00e:	4604      	mov	r4, r0
    if( ssl->out_buf != NULL )
 802e010:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 802e014:	b150      	cbz	r0, 802e02c <mbedtls_ssl_free+0x24>
        mbedtls_platform_zeroize( ssl->out_buf, out_buf_len );
 802e016:	f244 113d 	movw	r1, #16701	; 0x413d
 802e01a:	f7f9 fd87 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( ssl->out_buf );
 802e01e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 802e022:	f001 fee3 	bl	802fdec <free>
        ssl->out_buf = NULL;
 802e026:	2300      	movs	r3, #0
 802e028:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    if( ssl->in_buf != NULL )
 802e02c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802e02e:	b140      	cbz	r0, 802e042 <mbedtls_ssl_free+0x3a>
        mbedtls_platform_zeroize( ssl->in_buf, in_buf_len );
 802e030:	f244 113d 	movw	r1, #16701	; 0x413d
 802e034:	f7f9 fd7a 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( ssl->in_buf );
 802e038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802e03a:	f001 fed7 	bl	802fdec <free>
        ssl->in_buf = NULL;
 802e03e:	2300      	movs	r3, #0
 802e040:	65a3      	str	r3, [r4, #88]	; 0x58
    if( ssl->transform )
 802e042:	6c60      	ldr	r0, [r4, #68]	; 0x44
 802e044:	b120      	cbz	r0, 802e050 <mbedtls_ssl_free+0x48>
        mbedtls_ssl_transform_free( ssl->transform );
 802e046:	f7fe ffd3 	bl	802cff0 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 802e04a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 802e04c:	f001 fece 	bl	802fdec <free>
    if( ssl->handshake )
 802e050:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802e052:	b37e      	cbz	r6, 802e0b4 <mbedtls_ssl_free+0xac>
    mbedtls_sha256_free(   &handshake->fin_sha256    );
 802e054:	f106 0020 	add.w	r0, r6, #32
 802e058:	f7fb ff26 	bl	8029ea8 <mbedtls_sha256_free>
    if( handshake->sni_key_cert != NULL )
 802e05c:	68f5      	ldr	r5, [r6, #12]
 802e05e:	b12d      	cbz	r5, 802e06c <mbedtls_ssl_free+0x64>
            next = cur->next;
 802e060:	4628      	mov	r0, r5
 802e062:	68ad      	ldr	r5, [r5, #8]
            mbedtls_free( cur );
 802e064:	f001 fec2 	bl	802fdec <free>
        while( cur != NULL )
 802e068:	2d00      	cmp	r5, #0
 802e06a:	d1f9      	bne.n	802e060 <mbedtls_ssl_free+0x58>
    mbedtls_pk_free( &handshake->peer_pubkey );
 802e06c:	f106 0018 	add.w	r0, r6, #24
 802e070:	f7f9 f888 	bl	8027184 <mbedtls_pk_free>
    mbedtls_platform_zeroize( handshake,
 802e074:	4630      	mov	r0, r6
 802e076:	f44f 7192 	mov.w	r1, #292	; 0x124
 802e07a:	f7f9 fd57 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 802e07e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 802e080:	f7fe ffb6 	bl	802cff0 <mbedtls_ssl_transform_free>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 802e084:	6b65      	ldr	r5, [r4, #52]	; 0x34
    if( session == NULL )
 802e086:	b165      	cbz	r5, 802e0a2 <mbedtls_ssl_free+0x9a>
    if( session->peer_cert_digest != NULL )
 802e088:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 802e08a:	b130      	cbz	r0, 802e09a <mbedtls_ssl_free+0x92>
        mbedtls_free( session->peer_cert_digest );
 802e08c:	f001 feae 	bl	802fdec <free>
        session->peer_cert_digest      = NULL;
 802e090:	2300      	movs	r3, #0
 802e092:	65eb      	str	r3, [r5, #92]	; 0x5c
        session->peer_cert_digest_type = MBEDTLS_MD_NONE;
 802e094:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
        session->peer_cert_digest_len  = 0;
 802e098:	662b      	str	r3, [r5, #96]	; 0x60
    mbedtls_platform_zeroize( session, sizeof( mbedtls_ssl_session ) );
 802e09a:	4628      	mov	r0, r5
 802e09c:	216c      	movs	r1, #108	; 0x6c
 802e09e:	f7f9 fd45 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( ssl->handshake );
 802e0a2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 802e0a4:	f001 fea2 	bl	802fdec <free>
        mbedtls_free( ssl->transform_negotiate );
 802e0a8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 802e0aa:	f001 fe9f 	bl	802fdec <free>
        mbedtls_free( ssl->session_negotiate );
 802e0ae:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802e0b0:	f001 fe9c 	bl	802fdec <free>
    if( ssl->session )
 802e0b4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 802e0b6:	b17d      	cbz	r5, 802e0d8 <mbedtls_ssl_free+0xd0>
    if( session->peer_cert_digest != NULL )
 802e0b8:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 802e0ba:	b130      	cbz	r0, 802e0ca <mbedtls_ssl_free+0xc2>
        mbedtls_free( session->peer_cert_digest );
 802e0bc:	f001 fe96 	bl	802fdec <free>
        session->peer_cert_digest      = NULL;
 802e0c0:	2300      	movs	r3, #0
 802e0c2:	65eb      	str	r3, [r5, #92]	; 0x5c
        session->peer_cert_digest_type = MBEDTLS_MD_NONE;
 802e0c4:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
        session->peer_cert_digest_len  = 0;
 802e0c8:	662b      	str	r3, [r5, #96]	; 0x60
    mbedtls_platform_zeroize( session, sizeof( mbedtls_ssl_session ) );
 802e0ca:	4628      	mov	r0, r5
 802e0cc:	216c      	movs	r1, #108	; 0x6c
 802e0ce:	f7f9 fd2d 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( ssl->session );
 802e0d2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 802e0d4:	f001 fe8a 	bl	802fdec <free>
    if( ssl->hostname != NULL )
 802e0d8:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 802e0dc:	b155      	cbz	r5, 802e0f4 <mbedtls_ssl_free+0xec>
        mbedtls_platform_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 802e0de:	4628      	mov	r0, r5
 802e0e0:	f7e2 f8b4 	bl	801024c <strlen>
 802e0e4:	4601      	mov	r1, r0
 802e0e6:	4628      	mov	r0, r5
 802e0e8:	f7f9 fd20 	bl	8027b2c <mbedtls_platform_zeroize>
        mbedtls_free( ssl->hostname );
 802e0ec:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
 802e0f0:	f001 fe7c 	bl	802fdec <free>
    mbedtls_platform_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 802e0f4:	4620      	mov	r0, r4
}
 802e0f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbedtls_platform_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 802e0fa:	21c8      	movs	r1, #200	; 0xc8
 802e0fc:	f7f9 bd16 	b.w	8027b2c <mbedtls_platform_zeroize>
 802e100:	4770      	bx	lr
 802e102:	bf00      	nop

0802e104 <mbedtls_ssl_config_init>:
    memset( conf, 0, sizeof( mbedtls_ssl_config ) );
 802e104:	2260      	movs	r2, #96	; 0x60
 802e106:	2100      	movs	r1, #0
 802e108:	f001 bead 	b.w	802fe66 <memset>

0802e10c <mbedtls_ssl_config_defaults>:
{
 802e10c:	b538      	push	{r3, r4, r5, lr}
 802e10e:	4604      	mov	r4, r0
    conf->endpoint   = endpoint;
 802e110:	f890 505c 	ldrb.w	r5, [r0, #92]	; 0x5c
 802e114:	f002 0201 	and.w	r2, r2, #1
 802e118:	f001 0001 	and.w	r0, r1, #1
 802e11c:	ea40 0242 	orr.w	r2, r0, r2, lsl #1
 802e120:	f025 0503 	bic.w	r5, r5, #3
 802e124:	432a      	orrs	r2, r5
 802e126:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    if( endpoint == MBEDTLS_SSL_IS_CLIENT )
 802e12a:	b929      	cbnz	r1, 802e138 <mbedtls_ssl_config_defaults+0x2c>
        conf->authmode = MBEDTLS_SSL_VERIFY_REQUIRED;
 802e12c:	2102      	movs	r1, #2
 802e12e:	b2d2      	uxtb	r2, r2
 802e130:	f361 0283 	bfi	r2, r1, #2, #2
 802e134:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    switch( preset )
 802e138:	2b02      	cmp	r3, #2
 802e13a:	d10d      	bne.n	802e158 <mbedtls_ssl_config_defaults+0x4c>
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
 802e13c:	f04f 3003 	mov.w	r0, #50529027	; 0x3030303
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
 802e140:	4b0d      	ldr	r3, [pc, #52]	; (802e178 <mbedtls_ssl_config_defaults+0x6c>)
            conf->cert_profile = &mbedtls_x509_crt_profile_suiteb;
 802e142:	490e      	ldr	r1, [pc, #56]	; (802e17c <mbedtls_ssl_config_defaults+0x70>)
            conf->sig_hashes = ssl_preset_suiteb_hashes;
 802e144:	4a0e      	ldr	r2, [pc, #56]	; (802e180 <mbedtls_ssl_config_defaults+0x74>)
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
 802e146:	65a0      	str	r0, [r4, #88]	; 0x58
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
 802e148:	e9c4 3302 	strd	r3, r3, [r4, #8]
}
 802e14c:	2000      	movs	r0, #0
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
 802e14e:	e9c4 3300 	strd	r3, r3, [r4]
            conf->cert_profile = &mbedtls_x509_crt_profile_suiteb;
 802e152:	63e1      	str	r1, [r4, #60]	; 0x3c
            conf->sig_hashes = ssl_preset_suiteb_hashes;
 802e154:	64e2      	str	r2, [r4, #76]	; 0x4c
}
 802e156:	bd38      	pop	{r3, r4, r5, pc}
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
 802e158:	f04f 3303 	mov.w	r3, #50529027	; 0x3030303
 802e15c:	65a3      	str	r3, [r4, #88]	; 0x58
                                   mbedtls_ssl_list_ciphersuites();
 802e15e:	f7fc fd83 	bl	802ac68 <mbedtls_ssl_list_ciphersuites>
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
 802e162:	4a08      	ldr	r2, [pc, #32]	; (802e184 <mbedtls_ssl_config_defaults+0x78>)
            conf->sig_hashes = ssl_preset_default_hashes;
 802e164:	4b08      	ldr	r3, [pc, #32]	; (802e188 <mbedtls_ssl_config_defaults+0x7c>)
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
 802e166:	e9c4 0002 	strd	r0, r0, [r4, #8]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
 802e16a:	e9c4 0000 	strd	r0, r0, [r4]
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
 802e16e:	63e2      	str	r2, [r4, #60]	; 0x3c
}
 802e170:	2000      	movs	r0, #0
            conf->sig_hashes = ssl_preset_default_hashes;
 802e172:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 802e174:	bd38      	pop	{r3, r4, r5, pc}
 802e176:	bf00      	nop
 802e178:	200182e8 	.word	0x200182e8
 802e17c:	08035dfc 	.word	0x08035dfc
 802e180:	200182f4 	.word	0x200182f4
 802e184:	08035dec 	.word	0x08035dec
 802e188:	200182dc 	.word	0x200182dc

0802e18c <mbedtls_ssl_config_free>:
{
 802e18c:	b538      	push	{r3, r4, r5, lr}
    ssl_key_cert_free( conf->key_cert );
 802e18e:	6c04      	ldr	r4, [r0, #64]	; 0x40
{
 802e190:	4605      	mov	r5, r0
    while( cur != NULL )
 802e192:	b12c      	cbz	r4, 802e1a0 <mbedtls_ssl_config_free+0x14>
        next = cur->next;
 802e194:	4620      	mov	r0, r4
 802e196:	68a4      	ldr	r4, [r4, #8]
        mbedtls_free( cur );
 802e198:	f001 fe28 	bl	802fdec <free>
    while( cur != NULL )
 802e19c:	2c00      	cmp	r4, #0
 802e19e:	d1f9      	bne.n	802e194 <mbedtls_ssl_config_free+0x8>
    mbedtls_platform_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 802e1a0:	4628      	mov	r0, r5
}
 802e1a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mbedtls_platform_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 802e1a6:	2160      	movs	r1, #96	; 0x60
 802e1a8:	f7f9 bcc0 	b.w	8027b2c <mbedtls_platform_zeroize>

0802e1ac <mbedtls_ssl_sig_from_pk>:
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
 802e1ac:	2101      	movs	r1, #1
{
 802e1ae:	b508      	push	{r3, lr}
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
 802e1b0:	f7f9 f818 	bl	80271e4 <mbedtls_pk_can_do>
}
 802e1b4:	3800      	subs	r0, #0
 802e1b6:	bf18      	it	ne
 802e1b8:	2001      	movne	r0, #1
 802e1ba:	bd08      	pop	{r3, pc}

0802e1bc <mbedtls_ssl_hash_from_md_alg>:
/*
 * Convert from MBEDTLS_MD_XXX to MBEDTLS_SSL_HASH_XXX
 */
unsigned char mbedtls_ssl_hash_from_md_alg( int md )
{
    switch( md )
 802e1bc:	3803      	subs	r0, #3
 802e1be:	2803      	cmp	r0, #3
 802e1c0:	bf9a      	itte	ls
 802e1c2:	4b02      	ldrls	r3, [pc, #8]	; (802e1cc <mbedtls_ssl_hash_from_md_alg+0x10>)
 802e1c4:	5c18      	ldrbls	r0, [r3, r0]
 802e1c6:	2000      	movhi	r0, #0
            return( MBEDTLS_SSL_HASH_SHA512 );
#endif
        default:
            return( MBEDTLS_SSL_HASH_NONE );
    }
}
 802e1c8:	4770      	bx	lr
 802e1ca:	bf00      	nop
 802e1cc:	08035984 	.word	0x08035984

0802e1d0 <mbedtls_x509_get_serial>:
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;

    if( ( end - *p ) < 1 )
 802e1d0:	6803      	ldr	r3, [r0, #0]
{
 802e1d2:	b570      	push	{r4, r5, r6, lr}
 802e1d4:	4615      	mov	r5, r2
    if( ( end - *p ) < 1 )
 802e1d6:	1aca      	subs	r2, r1, r3
 802e1d8:	2a00      	cmp	r2, #0
 802e1da:	dd19      	ble.n	802e210 <mbedtls_x509_get_serial+0x40>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
 802e1dc:	781a      	ldrb	r2, [r3, #0]
 802e1de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 802e1e2:	2a02      	cmp	r2, #2
 802e1e4:	d112      	bne.n	802e20c <mbedtls_x509_get_serial+0x3c>
        **p !=   MBEDTLS_ASN1_INTEGER )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    serial->tag = *(*p)++;
 802e1e6:	462a      	mov	r2, r5
 802e1e8:	1c5e      	adds	r6, r3, #1
 802e1ea:	6006      	str	r6, [r0, #0]
 802e1ec:	781b      	ldrb	r3, [r3, #0]
 802e1ee:	4604      	mov	r4, r0
 802e1f0:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_len( p, end, &serial->len ) ) != 0 )
 802e1f4:	f7f2 f8dc 	bl	80203b0 <mbedtls_asn1_get_len>
 802e1f8:	b928      	cbnz	r0, 802e206 <mbedtls_x509_get_serial+0x36>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL + ret );

    serial->p = *p;
 802e1fa:	6823      	ldr	r3, [r4, #0]
    *p += serial->len;
 802e1fc:	686a      	ldr	r2, [r5, #4]
    serial->p = *p;
 802e1fe:	60ab      	str	r3, [r5, #8]
    *p += serial->len;
 802e200:	4413      	add	r3, r2
 802e202:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 802e204:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_X509_INVALID_SERIAL + ret );
 802e206:	f5a0 500a 	sub.w	r0, r0, #8832	; 0x2280
}
 802e20a:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
 802e20c:	4801      	ldr	r0, [pc, #4]	; (802e214 <mbedtls_x509_get_serial+0x44>)
}
 802e20e:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
 802e210:	4801      	ldr	r0, [pc, #4]	; (802e218 <mbedtls_x509_get_serial+0x48>)
}
 802e212:	bd70      	pop	{r4, r5, r6, pc}
 802e214:	ffffdd1e 	.word	0xffffdd1e
 802e218:	ffffdd20 	.word	0xffffdd20

0802e21c <mbedtls_x509_get_alg>:
/*
 * Parse an algorithm identifier with (optional) parameters
 */
int mbedtls_x509_get_alg( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *alg, mbedtls_x509_buf *params )
{
 802e21c:	b508      	push	{r3, lr}
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, params ) ) != 0 )
 802e21e:	f7f2 fbcd 	bl	80209bc <mbedtls_asn1_get_alg>
 802e222:	b900      	cbnz	r0, 802e226 <mbedtls_x509_get_alg+0xa>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    return( 0 );
}
 802e224:	bd08      	pop	{r3, pc}
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 802e226:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
}
 802e22a:	bd08      	pop	{r3, pc}

0802e22c <mbedtls_x509_get_name>:
 * same set so that they are "merged" together in the functions that consume
 * this list, eg mbedtls_x509_dn_gets().
 */
int mbedtls_x509_get_name( unsigned char **p, const unsigned char *end,
                   mbedtls_x509_name *cur )
{
 802e22c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802e230:	4605      	mov	r5, r0
 802e232:	460f      	mov	r7, r1
 802e234:	4614      	mov	r4, r2
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 802e236:	f8df 8100 	ldr.w	r8, [pc, #256]	; 802e338 <mbedtls_x509_get_name+0x10c>
{
 802e23a:	b083      	sub	sp, #12
    while( 1 )
    {
        /*
         * parse SET
         */
        if( ( ret = mbedtls_asn1_get_tag( p, end, &set_len,
 802e23c:	2331      	movs	r3, #49	; 0x31
 802e23e:	466a      	mov	r2, sp
 802e240:	4639      	mov	r1, r7
 802e242:	4628      	mov	r0, r5
 802e244:	f7f2 f8fe 	bl	8020444 <mbedtls_asn1_get_tag>
 802e248:	2800      	cmp	r0, #0
 802e24a:	d165      	bne.n	802e318 <mbedtls_x509_get_name+0xec>
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SET ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

        end_set  = *p + set_len;
 802e24c:	682e      	ldr	r6, [r5, #0]
 802e24e:	9b00      	ldr	r3, [sp, #0]
 802e250:	441e      	add	r6, r3
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 802e252:	2330      	movs	r3, #48	; 0x30
 802e254:	4631      	mov	r1, r6
 802e256:	4628      	mov	r0, r5
 802e258:	aa01      	add	r2, sp, #4
 802e25a:	f7f2 f8f3 	bl	8020444 <mbedtls_asn1_get_tag>
 802e25e:	b9f8      	cbnz	r0, 802e2a0 <mbedtls_x509_get_name+0x74>
    end = *p + len;
 802e260:	9b01      	ldr	r3, [sp, #4]
 802e262:	6829      	ldr	r1, [r5, #0]
    if( ( end - *p ) < 1 )
 802e264:	2b00      	cmp	r3, #0
    end = *p + len;
 802e266:	eb01 0903 	add.w	r9, r1, r3
    if( ( end - *p ) < 1 )
 802e26a:	dd4d      	ble.n	802e308 <mbedtls_x509_get_name+0xdc>
    oid->tag = **p;
 802e26c:	4622      	mov	r2, r4
 802e26e:	7809      	ldrb	r1, [r1, #0]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
 802e270:	2306      	movs	r3, #6
    oid->tag = **p;
 802e272:	f842 1b04 	str.w	r1, [r2], #4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
 802e276:	4628      	mov	r0, r5
 802e278:	4649      	mov	r1, r9
 802e27a:	f7f2 f8e3 	bl	8020444 <mbedtls_asn1_get_tag>
 802e27e:	b978      	cbnz	r0, 802e2a0 <mbedtls_x509_get_name+0x74>
    oid->p = *p;
 802e280:	682a      	ldr	r2, [r5, #0]
    *p += oid->len;
 802e282:	6861      	ldr	r1, [r4, #4]
    oid->p = *p;
 802e284:	60a2      	str	r2, [r4, #8]
    *p += oid->len;
 802e286:	1853      	adds	r3, r2, r1
    if( ( end - *p ) < 1 )
 802e288:	eba9 0003 	sub.w	r0, r9, r3
 802e28c:	2800      	cmp	r0, #0
    *p += oid->len;
 802e28e:	602b      	str	r3, [r5, #0]
    if( ( end - *p ) < 1 )
 802e290:	dd3a      	ble.n	802e308 <mbedtls_x509_get_name+0xdc>
    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
 802e292:	5c50      	ldrb	r0, [r2, r1]
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 802e294:	281e      	cmp	r0, #30
 802e296:	d91e      	bls.n	802e2d6 <mbedtls_x509_get_name+0xaa>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
 802e298:	4823      	ldr	r0, [pc, #140]	; (802e328 <mbedtls_x509_get_name+0xfc>)
        if( cur->next == NULL )
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );

        cur = cur->next;
    }
}
 802e29a:	b003      	add	sp, #12
 802e29c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 802e2a0:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
 802e2a4:	2800      	cmp	r0, #0
 802e2a6:	d1f8      	bne.n	802e29a <mbedtls_x509_get_name+0x6e>
 802e2a8:	682b      	ldr	r3, [r5, #0]
            if( *p == end_set )
 802e2aa:	429e      	cmp	r6, r3
 802e2ac:	d009      	beq.n	802e2c2 <mbedtls_x509_get_name+0x96>
            cur->next_merged = 1;
 802e2ae:	2001      	movs	r0, #1
            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 802e2b0:	2120      	movs	r1, #32
            cur->next_merged = 1;
 802e2b2:	7720      	strb	r0, [r4, #28]
            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 802e2b4:	f001 fd60 	bl	802fd78 <calloc>
 802e2b8:	61a0      	str	r0, [r4, #24]
            if( cur->next == NULL )
 802e2ba:	2800      	cmp	r0, #0
 802e2bc:	d031      	beq.n	802e322 <mbedtls_x509_get_name+0xf6>
 802e2be:	4604      	mov	r4, r0
 802e2c0:	e7c7      	b.n	802e252 <mbedtls_x509_get_name+0x26>
        if( *p == end )
 802e2c2:	42b7      	cmp	r7, r6
 802e2c4:	d02b      	beq.n	802e31e <mbedtls_x509_get_name+0xf2>
        cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 802e2c6:	2120      	movs	r1, #32
 802e2c8:	2001      	movs	r0, #1
 802e2ca:	f001 fd55 	bl	802fd78 <calloc>
 802e2ce:	61a0      	str	r0, [r4, #24]
        if( cur->next == NULL )
 802e2d0:	b338      	cbz	r0, 802e322 <mbedtls_x509_get_name+0xf6>
 802e2d2:	4604      	mov	r4, r0
 802e2d4:	e7b2      	b.n	802e23c <mbedtls_x509_get_name+0x10>
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 802e2d6:	fa28 f000 	lsr.w	r0, r8, r0
 802e2da:	07c0      	lsls	r0, r0, #31
 802e2dc:	d5dc      	bpl.n	802e298 <mbedtls_x509_get_name+0x6c>
    val->tag = *(*p)++;
 802e2de:	3301      	adds	r3, #1
 802e2e0:	602b      	str	r3, [r5, #0]
 802e2e2:	5c53      	ldrb	r3, [r2, r1]
    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
 802e2e4:	4628      	mov	r0, r5
 802e2e6:	4649      	mov	r1, r9
 802e2e8:	f104 0210 	add.w	r2, r4, #16
    val->tag = *(*p)++;
 802e2ec:	60e3      	str	r3, [r4, #12]
    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
 802e2ee:	f7f2 f85f 	bl	80203b0 <mbedtls_asn1_get_len>
 802e2f2:	2800      	cmp	r0, #0
 802e2f4:	d1d4      	bne.n	802e2a0 <mbedtls_x509_get_name+0x74>
    val->p = *p;
 802e2f6:	682b      	ldr	r3, [r5, #0]
    *p += val->len;
 802e2f8:	6922      	ldr	r2, [r4, #16]
    val->p = *p;
 802e2fa:	6163      	str	r3, [r4, #20]
    *p += val->len;
 802e2fc:	4413      	add	r3, r2
    if( *p != end )
 802e2fe:	4599      	cmp	r9, r3
    *p += val->len;
 802e300:	602b      	str	r3, [r5, #0]
    if( *p != end )
 802e302:	d105      	bne.n	802e310 <mbedtls_x509_get_name+0xe4>
    cur->next = NULL;
 802e304:	61a0      	str	r0, [r4, #24]
    return( 0 );
 802e306:	e7d0      	b.n	802e2aa <mbedtls_x509_get_name+0x7e>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
 802e308:	4808      	ldr	r0, [pc, #32]	; (802e32c <mbedtls_x509_get_name+0x100>)
}
 802e30a:	b003      	add	sp, #12
 802e30c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return( MBEDTLS_ERR_X509_INVALID_NAME +
 802e310:	4807      	ldr	r0, [pc, #28]	; (802e330 <mbedtls_x509_get_name+0x104>)
}
 802e312:	b003      	add	sp, #12
 802e314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 802e318:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
 802e31c:	e7bd      	b.n	802e29a <mbedtls_x509_get_name+0x6e>
            return( 0 );
 802e31e:	2000      	movs	r0, #0
 802e320:	e7bb      	b.n	802e29a <mbedtls_x509_get_name+0x6e>
                return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 802e322:	4804      	ldr	r0, [pc, #16]	; (802e334 <mbedtls_x509_get_name+0x108>)
 802e324:	e7b9      	b.n	802e29a <mbedtls_x509_get_name+0x6e>
 802e326:	bf00      	nop
 802e328:	ffffdc1e 	.word	0xffffdc1e
 802e32c:	ffffdc20 	.word	0xffffdc20
 802e330:	ffffdc1a 	.word	0xffffdc1a
 802e334:	ffffd780 	.word	0xffffd780
 802e338:	50581008 	.word	0x50581008

0802e33c <mbedtls_x509_get_time>:
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
 802e33c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 802e340:	6803      	ldr	r3, [r0, #0]
{
 802e342:	4615      	mov	r5, r2
    if( ( end - *p ) < 1 )
 802e344:	1aca      	subs	r2, r1, r3
 802e346:	2a00      	cmp	r2, #0
{
 802e348:	b083      	sub	sp, #12
    if( ( end - *p ) < 1 )
 802e34a:	f340 8145 	ble.w	802e5d8 <mbedtls_x509_get_time+0x29c>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;
 802e34e:	781a      	ldrb	r2, [r3, #0]
 802e350:	4604      	mov	r4, r0

    if( tag == MBEDTLS_ASN1_UTC_TIME )
 802e352:	2a17      	cmp	r2, #23
 802e354:	f000 8120 	beq.w	802e598 <mbedtls_x509_get_time+0x25c>
        year_len = 2;
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
 802e358:	2a18      	cmp	r2, #24
 802e35a:	f040 813b 	bne.w	802e5d4 <mbedtls_x509_get_time+0x298>
 802e35e:	270c      	movs	r7, #12
        year_len = 4;
 802e360:	2604      	movs	r6, #4
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 802e362:	3301      	adds	r3, #1
    ret = mbedtls_asn1_get_len( p, end, &len );
 802e364:	4620      	mov	r0, r4
    (*p)++;
 802e366:	6023      	str	r3, [r4, #0]
    ret = mbedtls_asn1_get_len( p, end, &len );
 802e368:	aa01      	add	r2, sp, #4
 802e36a:	f7f2 f821 	bl	80203b0 <mbedtls_asn1_get_len>

    if( ret != 0 )
 802e36e:	b120      	cbz	r0, 802e37a <mbedtls_x509_get_time+0x3e>
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
 802e370:	f5a0 5010 	sub.w	r0, r0, #9216	; 0x2400

    return x509_parse_time( p, len, year_len, tm );
}
 802e374:	b003      	add	sp, #12
 802e376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return x509_parse_time( p, len, year_len, tm );
 802e37a:	f8dd c004 	ldr.w	ip, [sp, #4]
    if ( len < yearlen + 8 )
 802e37e:	45bc      	cmp	ip, r7
 802e380:	f0c0 8106 	bcc.w	802e590 <mbedtls_x509_get_time+0x254>
    *res = 0;
 802e384:	6821      	ldr	r1, [r4, #0]
 802e386:	6028      	str	r0, [r5, #0]
        if( ( **p < '0') || ( **p > '9' ) )
 802e388:	780b      	ldrb	r3, [r1, #0]
 802e38a:	3b30      	subs	r3, #48	; 0x30
 802e38c:	2b09      	cmp	r3, #9
 802e38e:	f200 80ff 	bhi.w	802e590 <mbedtls_x509_get_time+0x254>
        *res += ( *(*p)++ - '0' );
 802e392:	1c4b      	adds	r3, r1, #1
 802e394:	6023      	str	r3, [r4, #0]
 802e396:	780a      	ldrb	r2, [r1, #0]
 802e398:	3a30      	subs	r2, #48	; 0x30
 802e39a:	602a      	str	r2, [r5, #0]
        if( ( **p < '0') || ( **p > '9' ) )
 802e39c:	784b      	ldrb	r3, [r1, #1]
 802e39e:	3b30      	subs	r3, #48	; 0x30
 802e3a0:	2b09      	cmp	r3, #9
 802e3a2:	f200 80f5 	bhi.w	802e590 <mbedtls_x509_get_time+0x254>
        *res *= 10;
 802e3a6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 802e3aa:	0057      	lsls	r7, r2, #1
        *res += ( *(*p)++ - '0' );
 802e3ac:	1c8b      	adds	r3, r1, #2
        *res *= 10;
 802e3ae:	602f      	str	r7, [r5, #0]
        *res += ( *(*p)++ - '0' );
 802e3b0:	6023      	str	r3, [r4, #0]
 802e3b2:	784a      	ldrb	r2, [r1, #1]
    for( ; n > 0; --n )
 802e3b4:	2e02      	cmp	r6, #2
        *res += ( *(*p)++ - '0' );
 802e3b6:	f1a2 0230 	sub.w	r2, r2, #48	; 0x30
 802e3ba:	443a      	add	r2, r7
 802e3bc:	602a      	str	r2, [r5, #0]
    for( ; n > 0; --n )
 802e3be:	f000 80ee 	beq.w	802e59e <mbedtls_x509_get_time+0x262>
        if( ( **p < '0') || ( **p > '9' ) )
 802e3c2:	788b      	ldrb	r3, [r1, #2]
 802e3c4:	3b30      	subs	r3, #48	; 0x30
 802e3c6:	2b09      	cmp	r3, #9
 802e3c8:	f200 80e2 	bhi.w	802e590 <mbedtls_x509_get_time+0x254>
        *res *= 10;
 802e3cc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 802e3d0:	0052      	lsls	r2, r2, #1
        *res += ( *(*p)++ - '0' );
 802e3d2:	1ccb      	adds	r3, r1, #3
        *res *= 10;
 802e3d4:	602a      	str	r2, [r5, #0]
        *res += ( *(*p)++ - '0' );
 802e3d6:	6023      	str	r3, [r4, #0]
 802e3d8:	788b      	ldrb	r3, [r1, #2]
 802e3da:	3b30      	subs	r3, #48	; 0x30
 802e3dc:	441a      	add	r2, r3
 802e3de:	602a      	str	r2, [r5, #0]
        if( ( **p < '0') || ( **p > '9' ) )
 802e3e0:	78cb      	ldrb	r3, [r1, #3]
 802e3e2:	3b30      	subs	r3, #48	; 0x30
 802e3e4:	2b09      	cmp	r3, #9
 802e3e6:	f200 80d3 	bhi.w	802e590 <mbedtls_x509_get_time+0x254>
        *res *= 10;
 802e3ea:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 802e3ee:	0052      	lsls	r2, r2, #1
        *res += ( *(*p)++ - '0' );
 802e3f0:	1d0b      	adds	r3, r1, #4
        *res *= 10;
 802e3f2:	602a      	str	r2, [r5, #0]
        *res += ( *(*p)++ - '0' );
 802e3f4:	6023      	str	r3, [r4, #0]
 802e3f6:	78c9      	ldrb	r1, [r1, #3]
 802e3f8:	3930      	subs	r1, #48	; 0x30
 802e3fa:	440a      	add	r2, r1
 802e3fc:	602a      	str	r2, [r5, #0]
    *res = 0;
 802e3fe:	2700      	movs	r7, #0
 802e400:	606f      	str	r7, [r5, #4]
        if( ( **p < '0') || ( **p > '9' ) )
 802e402:	781a      	ldrb	r2, [r3, #0]
 802e404:	3a30      	subs	r2, #48	; 0x30
 802e406:	2a09      	cmp	r2, #9
 802e408:	f200 80c2 	bhi.w	802e590 <mbedtls_x509_get_time+0x254>
        *res += ( *(*p)++ - '0' );
 802e40c:	1c5a      	adds	r2, r3, #1
 802e40e:	6022      	str	r2, [r4, #0]
 802e410:	781a      	ldrb	r2, [r3, #0]
 802e412:	3a30      	subs	r2, #48	; 0x30
 802e414:	606a      	str	r2, [r5, #4]
        if( ( **p < '0') || ( **p > '9' ) )
 802e416:	7859      	ldrb	r1, [r3, #1]
 802e418:	3930      	subs	r1, #48	; 0x30
 802e41a:	2909      	cmp	r1, #9
 802e41c:	f200 80b8 	bhi.w	802e590 <mbedtls_x509_get_time+0x254>
        *res *= 10;
 802e420:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 802e424:	0052      	lsls	r2, r2, #1
        *res += ( *(*p)++ - '0' );
 802e426:	1c99      	adds	r1, r3, #2
        *res *= 10;
 802e428:	606a      	str	r2, [r5, #4]
        *res += ( *(*p)++ - '0' );
 802e42a:	6021      	str	r1, [r4, #0]
 802e42c:	7859      	ldrb	r1, [r3, #1]
    *res = 0;
 802e42e:	60af      	str	r7, [r5, #8]
        *res += ( *(*p)++ - '0' );
 802e430:	3930      	subs	r1, #48	; 0x30
 802e432:	440a      	add	r2, r1
 802e434:	606a      	str	r2, [r5, #4]
        if( ( **p < '0') || ( **p > '9' ) )
 802e436:	7899      	ldrb	r1, [r3, #2]
 802e438:	3930      	subs	r1, #48	; 0x30
 802e43a:	2909      	cmp	r1, #9
 802e43c:	f200 80a8 	bhi.w	802e590 <mbedtls_x509_get_time+0x254>
        *res += ( *(*p)++ - '0' );
 802e440:	1cd9      	adds	r1, r3, #3
 802e442:	6021      	str	r1, [r4, #0]
 802e444:	7899      	ldrb	r1, [r3, #2]
 802e446:	3930      	subs	r1, #48	; 0x30
 802e448:	60a9      	str	r1, [r5, #8]
        if( ( **p < '0') || ( **p > '9' ) )
 802e44a:	f893 e003 	ldrb.w	lr, [r3, #3]
 802e44e:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 802e452:	f1be 0f09 	cmp.w	lr, #9
 802e456:	f200 809b 	bhi.w	802e590 <mbedtls_x509_get_time+0x254>
        *res *= 10;
 802e45a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 802e45e:	0049      	lsls	r1, r1, #1
        *res += ( *(*p)++ - '0' );
 802e460:	f103 0e04 	add.w	lr, r3, #4
        *res *= 10;
 802e464:	60a9      	str	r1, [r5, #8]
        *res += ( *(*p)++ - '0' );
 802e466:	f8c4 e000 	str.w	lr, [r4]
 802e46a:	f893 e003 	ldrb.w	lr, [r3, #3]
    *res = 0;
 802e46e:	60ef      	str	r7, [r5, #12]
        *res += ( *(*p)++ - '0' );
 802e470:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 802e474:	448e      	add	lr, r1
 802e476:	f8c5 e008 	str.w	lr, [r5, #8]
        if( ( **p < '0') || ( **p > '9' ) )
 802e47a:	7919      	ldrb	r1, [r3, #4]
 802e47c:	3930      	subs	r1, #48	; 0x30
 802e47e:	2909      	cmp	r1, #9
 802e480:	f200 8086 	bhi.w	802e590 <mbedtls_x509_get_time+0x254>
        *res += ( *(*p)++ - '0' );
 802e484:	1d59      	adds	r1, r3, #5
 802e486:	6021      	str	r1, [r4, #0]
 802e488:	7919      	ldrb	r1, [r3, #4]
 802e48a:	3930      	subs	r1, #48	; 0x30
 802e48c:	60e9      	str	r1, [r5, #12]
        if( ( **p < '0') || ( **p > '9' ) )
 802e48e:	f893 8005 	ldrb.w	r8, [r3, #5]
 802e492:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 802e496:	f1b8 0f09 	cmp.w	r8, #9
 802e49a:	d879      	bhi.n	802e590 <mbedtls_x509_get_time+0x254>
        *res *= 10;
 802e49c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 802e4a0:	0049      	lsls	r1, r1, #1
        *res += ( *(*p)++ - '0' );
 802e4a2:	f103 0806 	add.w	r8, r3, #6
        *res *= 10;
 802e4a6:	60e9      	str	r1, [r5, #12]
        *res += ( *(*p)++ - '0' );
 802e4a8:	f8c4 8000 	str.w	r8, [r4]
 802e4ac:	f893 8005 	ldrb.w	r8, [r3, #5]
    *res = 0;
 802e4b0:	612f      	str	r7, [r5, #16]
        *res += ( *(*p)++ - '0' );
 802e4b2:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 802e4b6:	4488      	add	r8, r1
 802e4b8:	f8c5 800c 	str.w	r8, [r5, #12]
        if( ( **p < '0') || ( **p > '9' ) )
 802e4bc:	7999      	ldrb	r1, [r3, #6]
 802e4be:	3930      	subs	r1, #48	; 0x30
 802e4c0:	2909      	cmp	r1, #9
 802e4c2:	d865      	bhi.n	802e590 <mbedtls_x509_get_time+0x254>
        *res += ( *(*p)++ - '0' );
 802e4c4:	1dd9      	adds	r1, r3, #7
 802e4c6:	6021      	str	r1, [r4, #0]
 802e4c8:	7999      	ldrb	r1, [r3, #6]
 802e4ca:	3930      	subs	r1, #48	; 0x30
 802e4cc:	6129      	str	r1, [r5, #16]
        if( ( **p < '0') || ( **p > '9' ) )
 802e4ce:	f893 9007 	ldrb.w	r9, [r3, #7]
 802e4d2:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
 802e4d6:	f1b9 0f09 	cmp.w	r9, #9
 802e4da:	d859      	bhi.n	802e590 <mbedtls_x509_get_time+0x254>
        *res *= 10;
 802e4dc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 802e4e0:	0049      	lsls	r1, r1, #1
        *res += ( *(*p)++ - '0' );
 802e4e2:	f103 0908 	add.w	r9, r3, #8
        *res *= 10;
 802e4e6:	6129      	str	r1, [r5, #16]
        *res += ( *(*p)++ - '0' );
 802e4e8:	f8c4 9000 	str.w	r9, [r4]
 802e4ec:	f893 9007 	ldrb.w	r9, [r3, #7]
    len -= yearlen + 8;
 802e4f0:	ebac 0606 	sub.w	r6, ip, r6
        *res += ( *(*p)++ - '0' );
 802e4f4:	f1a9 0c30 	sub.w	ip, r9, #48	; 0x30
 802e4f8:	4461      	add	r1, ip
    len -= yearlen + 8;
 802e4fa:	f1a6 0c08 	sub.w	ip, r6, #8
    if ( len >= 2 )
 802e4fe:	f1bc 0f01 	cmp.w	ip, #1
        *res += ( *(*p)++ - '0' );
 802e502:	6129      	str	r1, [r5, #16]
    if ( len >= 2 )
 802e504:	d944      	bls.n	802e590 <mbedtls_x509_get_time+0x254>
    *res = 0;
 802e506:	616f      	str	r7, [r5, #20]
        if( ( **p < '0') || ( **p > '9' ) )
 802e508:	7a1f      	ldrb	r7, [r3, #8]
 802e50a:	3f30      	subs	r7, #48	; 0x30
 802e50c:	2f09      	cmp	r7, #9
 802e50e:	d83f      	bhi.n	802e590 <mbedtls_x509_get_time+0x254>
        *res += ( *(*p)++ - '0' );
 802e510:	f103 0709 	add.w	r7, r3, #9
 802e514:	6027      	str	r7, [r4, #0]
 802e516:	7a1f      	ldrb	r7, [r3, #8]
 802e518:	3f30      	subs	r7, #48	; 0x30
 802e51a:	616f      	str	r7, [r5, #20]
        if( ( **p < '0') || ( **p > '9' ) )
 802e51c:	f893 c009 	ldrb.w	ip, [r3, #9]
 802e520:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 802e524:	f1bc 0f09 	cmp.w	ip, #9
 802e528:	d832      	bhi.n	802e590 <mbedtls_x509_get_time+0x254>
        *res *= 10;
 802e52a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 802e52e:	007f      	lsls	r7, r7, #1
        *res += ( *(*p)++ - '0' );
 802e530:	f103 0c0a 	add.w	ip, r3, #10
        *res *= 10;
 802e534:	616f      	str	r7, [r5, #20]
        *res += ( *(*p)++ - '0' );
 802e536:	f8c4 c000 	str.w	ip, [r4]
 802e53a:	f893 c009 	ldrb.w	ip, [r3, #9]
    if ( 1 == len && 'Z' == **p )
 802e53e:	2e0b      	cmp	r6, #11
        *res += ( *(*p)++ - '0' );
 802e540:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 802e544:	4467      	add	r7, ip
        len -= 2;
 802e546:	f1a6 090a 	sub.w	r9, r6, #10
        *res += ( *(*p)++ - '0' );
 802e54a:	616f      	str	r7, [r5, #20]
    if ( 1 == len && 'Z' == **p )
 802e54c:	d03c      	beq.n	802e5c8 <mbedtls_x509_get_time+0x28c>
    if ( 0 != len )
 802e54e:	f1b9 0f00 	cmp.w	r9, #0
 802e552:	d11d      	bne.n	802e590 <mbedtls_x509_get_time+0x254>
    CHECK_RANGE( 0, 9999, t->year );
 802e554:	f242 740f 	movw	r4, #9999	; 0x270f
 802e558:	682b      	ldr	r3, [r5, #0]
 802e55a:	42a3      	cmp	r3, r4
 802e55c:	d818      	bhi.n	802e590 <mbedtls_x509_get_time+0x254>
    CHECK_RANGE( 0, 23,   t->hour );
 802e55e:	f1b8 0f17 	cmp.w	r8, #23
 802e562:	d815      	bhi.n	802e590 <mbedtls_x509_get_time+0x254>
    CHECK_RANGE( 0, 59,   t->min  );
 802e564:	293b      	cmp	r1, #59	; 0x3b
 802e566:	d813      	bhi.n	802e590 <mbedtls_x509_get_time+0x254>
    CHECK_RANGE( 0, 59,   t->sec  );
 802e568:	2f3b      	cmp	r7, #59	; 0x3b
 802e56a:	d811      	bhi.n	802e590 <mbedtls_x509_get_time+0x254>
    switch( t->mon )
 802e56c:	3a01      	subs	r2, #1
 802e56e:	2a0b      	cmp	r2, #11
 802e570:	d80e      	bhi.n	802e590 <mbedtls_x509_get_time+0x254>
 802e572:	e8df f002 	tbb	[pc, r2]
 802e576:	1d1b      	.short	0x1d1b
 802e578:	061b061b 	.word	0x061b061b
 802e57c:	1b061b1b 	.word	0x1b061b1b
 802e580:	1b06      	.short	0x1b06
    CHECK_RANGE( 0, 59,   t->sec  );
 802e582:	231e      	movs	r3, #30
    CHECK_RANGE( 1, month_len, t->day );
 802e584:	f1be 0f00 	cmp.w	lr, #0
 802e588:	dd02      	ble.n	802e590 <mbedtls_x509_get_time+0x254>
 802e58a:	459e      	cmp	lr, r3
 802e58c:	f77f aef2 	ble.w	802e374 <mbedtls_x509_get_time+0x38>
    CHECK_RANGE( 0, 59,   t->sec  );
 802e590:	4818      	ldr	r0, [pc, #96]	; (802e5f4 <mbedtls_x509_get_time+0x2b8>)
}
 802e592:	b003      	add	sp, #12
 802e594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802e598:	270a      	movs	r7, #10
        year_len = 2;
 802e59a:	2602      	movs	r6, #2
 802e59c:	e6e1      	b.n	802e362 <mbedtls_x509_get_time+0x26>
        if ( tm->year < 50 )
 802e59e:	2a31      	cmp	r2, #49	; 0x31
 802e5a0:	dc00      	bgt.n	802e5a4 <mbedtls_x509_get_time+0x268>
            tm->year += 100;
 802e5a2:	3264      	adds	r2, #100	; 0x64
        tm->year += 1900;
 802e5a4:	f202 726c 	addw	r2, r2, #1900	; 0x76c
 802e5a8:	602a      	str	r2, [r5, #0]
 802e5aa:	e728      	b.n	802e3fe <mbedtls_x509_get_time+0xc2>
            month_len = 31;
 802e5ac:	231f      	movs	r3, #31
 802e5ae:	e7e9      	b.n	802e584 <mbedtls_x509_get_time+0x248>
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
 802e5b0:	079a      	lsls	r2, r3, #30
 802e5b2:	d113      	bne.n	802e5dc <mbedtls_x509_get_time+0x2a0>
 802e5b4:	4a10      	ldr	r2, [pc, #64]	; (802e5f8 <mbedtls_x509_get_time+0x2bc>)
 802e5b6:	4c11      	ldr	r4, [pc, #68]	; (802e5fc <mbedtls_x509_get_time+0x2c0>)
 802e5b8:	4911      	ldr	r1, [pc, #68]	; (802e600 <mbedtls_x509_get_time+0x2c4>)
 802e5ba:	fb02 4203 	mla	r2, r2, r3, r4
 802e5be:	ebb1 0fb2 	cmp.w	r1, r2, ror #2
 802e5c2:	d20b      	bcs.n	802e5dc <mbedtls_x509_get_time+0x2a0>
                month_len = 29;
 802e5c4:	231d      	movs	r3, #29
 802e5c6:	e7dd      	b.n	802e584 <mbedtls_x509_get_time+0x248>
    if ( 1 == len && 'Z' == **p )
 802e5c8:	7a9e      	ldrb	r6, [r3, #10]
 802e5ca:	2e5a      	cmp	r6, #90	; 0x5a
 802e5cc:	d1e0      	bne.n	802e590 <mbedtls_x509_get_time+0x254>
        (*p)++;
 802e5ce:	330b      	adds	r3, #11
 802e5d0:	6023      	str	r3, [r4, #0]
    if ( 0 != len )
 802e5d2:	e7bf      	b.n	802e554 <mbedtls_x509_get_time+0x218>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 802e5d4:	480b      	ldr	r0, [pc, #44]	; (802e604 <mbedtls_x509_get_time+0x2c8>)
 802e5d6:	e6cd      	b.n	802e374 <mbedtls_x509_get_time+0x38>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 802e5d8:	480b      	ldr	r0, [pc, #44]	; (802e608 <mbedtls_x509_get_time+0x2cc>)
 802e5da:	e6cb      	b.n	802e374 <mbedtls_x509_get_time+0x38>
 802e5dc:	4c06      	ldr	r4, [pc, #24]	; (802e5f8 <mbedtls_x509_get_time+0x2bc>)
 802e5de:	4907      	ldr	r1, [pc, #28]	; (802e5fc <mbedtls_x509_get_time+0x2c0>)
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
 802e5e0:	4a0a      	ldr	r2, [pc, #40]	; (802e60c <mbedtls_x509_get_time+0x2d0>)
 802e5e2:	fb04 1303 	mla	r3, r4, r3, r1
                month_len = 28;
 802e5e6:	ebb2 1f33 	cmp.w	r2, r3, ror #4
 802e5ea:	bf2c      	ite	cs
 802e5ec:	231d      	movcs	r3, #29
 802e5ee:	231c      	movcc	r3, #28
 802e5f0:	e7c8      	b.n	802e584 <mbedtls_x509_get_time+0x248>
 802e5f2:	bf00      	nop
 802e5f4:	ffffdc00 	.word	0xffffdc00
 802e5f8:	c28f5c29 	.word	0xc28f5c29
 802e5fc:	051eb850 	.word	0x051eb850
 802e600:	028f5c28 	.word	0x028f5c28
 802e604:	ffffdb9e 	.word	0xffffdb9e
 802e608:	ffffdba0 	.word	0xffffdba0
 802e60c:	00a3d70a 	.word	0x00a3d70a

0802e610 <mbedtls_x509_get_sig>:

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
 802e610:	b570      	push	{r4, r5, r6, lr}
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 802e612:	6806      	ldr	r6, [r0, #0]
{
 802e614:	b082      	sub	sp, #8
    if( ( end - *p ) < 1 )
 802e616:	1b8b      	subs	r3, r1, r6
 802e618:	2b00      	cmp	r3, #0
 802e61a:	dd14      	ble.n	802e646 <mbedtls_x509_get_sig+0x36>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;
 802e61c:	4615      	mov	r5, r2

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 802e61e:	aa01      	add	r2, sp, #4
 802e620:	4604      	mov	r4, r0
    tag_type = **p;
 802e622:	7836      	ldrb	r6, [r6, #0]
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 802e624:	f7f2 f8c6 	bl	80207b4 <mbedtls_asn1_get_bitstring_null>
 802e628:	b948      	cbnz	r0, 802e63e <mbedtls_x509_get_sig+0x2e>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );

    sig->tag = tag_type;
    sig->len = len;
    sig->p = *p;
 802e62a:	6823      	ldr	r3, [r4, #0]
    sig->len = len;
 802e62c:	9a01      	ldr	r2, [sp, #4]
    sig->p = *p;
 802e62e:	60ab      	str	r3, [r5, #8]

    *p += len;
 802e630:	6823      	ldr	r3, [r4, #0]
    tag_type = **p;
 802e632:	602e      	str	r6, [r5, #0]
    *p += len;
 802e634:	4413      	add	r3, r2
    sig->len = len;
 802e636:	606a      	str	r2, [r5, #4]
    *p += len;
 802e638:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 802e63a:	b002      	add	sp, #8
 802e63c:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );
 802e63e:	f5a0 5012 	sub.w	r0, r0, #9344	; 0x2480
}
 802e642:	b002      	add	sp, #8
 802e644:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
 802e646:	4801      	ldr	r0, [pc, #4]	; (802e64c <mbedtls_x509_get_sig+0x3c>)
 802e648:	e7f7      	b.n	802e63a <mbedtls_x509_get_sig+0x2a>
 802e64a:	bf00      	nop
 802e64c:	ffffdb20 	.word	0xffffdb20

0802e650 <mbedtls_x509_get_sig_alg>:
 * Get signature algorithm from alg OID and optional parameters
 */
int mbedtls_x509_get_sig_alg( const mbedtls_x509_buf *sig_oid, const mbedtls_x509_buf *sig_params,
                      mbedtls_md_type_t *md_alg, mbedtls_pk_type_t *pk_alg,
                      void **sig_opts )
{
 802e650:	b538      	push	{r3, r4, r5, lr}
 802e652:	9d04      	ldr	r5, [sp, #16]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;

    if( *sig_opts != NULL )
 802e654:	682d      	ldr	r5, [r5, #0]
 802e656:	b9a5      	cbnz	r5, 802e682 <mbedtls_x509_get_sig_alg+0x32>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    if( ( ret = mbedtls_oid_get_sig_alg( sig_oid, md_alg, pk_alg ) ) != 0 )
 802e658:	460c      	mov	r4, r1
 802e65a:	4611      	mov	r1, r2
 802e65c:	461a      	mov	r2, r3
 802e65e:	f7f8 fae1 	bl	8026c24 <mbedtls_oid_get_sig_alg>
 802e662:	b948      	cbnz	r0, 802e678 <mbedtls_x509_get_sig_alg+0x28>
    }
    else
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    {
        /* Make sure parameters are absent or NULL */
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
 802e664:	6823      	ldr	r3, [r4, #0]
 802e666:	2b05      	cmp	r3, #5
 802e668:	d000      	beq.n	802e66c <mbedtls_x509_get_sig_alg+0x1c>
 802e66a:	b943      	cbnz	r3, 802e67e <mbedtls_x509_get_sig_alg+0x2e>
 802e66c:	6862      	ldr	r2, [r4, #4]
              sig_params->len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG );
 802e66e:	4b06      	ldr	r3, [pc, #24]	; (802e688 <mbedtls_x509_get_sig_alg+0x38>)
 802e670:	2a00      	cmp	r2, #0
 802e672:	bf18      	it	ne
 802e674:	4618      	movne	r0, r3
    }

    return( 0 );
}
 802e676:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + ret );
 802e678:	f5a0 5018 	sub.w	r0, r0, #9728	; 0x2600
}
 802e67c:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_X509_INVALID_ALG );
 802e67e:	4802      	ldr	r0, [pc, #8]	; (802e688 <mbedtls_x509_get_sig_alg+0x38>)
}
 802e680:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 802e682:	4802      	ldr	r0, [pc, #8]	; (802e68c <mbedtls_x509_get_sig_alg+0x3c>)
}
 802e684:	bd38      	pop	{r3, r4, r5, pc}
 802e686:	bf00      	nop
 802e688:	ffffdd00 	.word	0xffffdd00
 802e68c:	ffffd800 	.word	0xffffd800

0802e690 <mbedtls_x509_get_ext>:
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                          mbedtls_x509_buf *ext, int tag )
{
 802e690:	b570      	push	{r4, r5, r6, lr}
    size_t len;

    /* Extension structure use EXPLICIT tagging. That is, the actual
     * `Extensions` structure is wrapped by a tag-length pair using
     * the respective context-specific tag. */
    ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 802e692:	f043 06a0 	orr.w	r6, r3, #160	; 0xa0
{
 802e696:	4614      	mov	r4, r2
 802e698:	b082      	sub	sp, #8
    ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 802e69a:	4633      	mov	r3, r6
 802e69c:	3204      	adds	r2, #4
{
 802e69e:	4605      	mov	r5, r0
    ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 802e6a0:	f7f1 fed0 	bl	8020444 <mbedtls_asn1_get_tag>
              MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag );
    if( ret != 0 )
 802e6a4:	b118      	cbz	r0, 802e6ae <mbedtls_x509_get_ext+0x1e>
    /*
     * Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 802e6a6:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
    if( end != *p + len )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 802e6aa:	b002      	add	sp, #8
 802e6ac:	bd70      	pop	{r4, r5, r6, pc}
    ext->p   = *p;
 802e6ae:	682a      	ldr	r2, [r5, #0]
    end      = *p + ext->len;
 802e6b0:	6863      	ldr	r3, [r4, #4]
    ext->p   = *p;
 802e6b2:	60a2      	str	r2, [r4, #8]
    end      = *p + ext->len;
 802e6b4:	6829      	ldr	r1, [r5, #0]
    ext->tag = MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag;
 802e6b6:	6026      	str	r6, [r4, #0]
    end      = *p + ext->len;
 802e6b8:	18cc      	adds	r4, r1, r3
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 802e6ba:	4621      	mov	r1, r4
 802e6bc:	2330      	movs	r3, #48	; 0x30
 802e6be:	4628      	mov	r0, r5
 802e6c0:	aa01      	add	r2, sp, #4
 802e6c2:	f7f1 febf 	bl	8020444 <mbedtls_asn1_get_tag>
 802e6c6:	2800      	cmp	r0, #0
 802e6c8:	d1ed      	bne.n	802e6a6 <mbedtls_x509_get_ext+0x16>
    if( end != *p + len )
 802e6ca:	682b      	ldr	r3, [r5, #0]
 802e6cc:	9901      	ldr	r1, [sp, #4]
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 802e6ce:	4a03      	ldr	r2, [pc, #12]	; (802e6dc <mbedtls_x509_get_ext+0x4c>)
    if( end != *p + len )
 802e6d0:	440b      	add	r3, r1
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 802e6d2:	429c      	cmp	r4, r3
 802e6d4:	bf18      	it	ne
 802e6d6:	4610      	movne	r0, r2
}
 802e6d8:	b002      	add	sp, #8
 802e6da:	bd70      	pop	{r4, r5, r6, pc}
 802e6dc:	ffffda9a 	.word	0xffffda9a

0802e6e0 <mbedtls_x509_time_is_past>:

int mbedtls_x509_time_is_past( const mbedtls_x509_time *to )
{
    ((void) to);
    return( 0 );
}
 802e6e0:	2000      	movs	r0, #0
 802e6e2:	4770      	bx	lr

0802e6e4 <mbedtls_x509_time_is_future>:
 802e6e4:	2000      	movs	r0, #0
 802e6e6:	4770      	bx	lr

0802e6e8 <x509_name_cmp>:
 * or space folding.)
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
 802e6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e6ea:	460c      	mov	r4, r1
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
 802e6ec:	2800      	cmp	r0, #0
 802e6ee:	d050      	beq.n	802e792 <x509_name_cmp+0xaa>
    {
        if( a == NULL || b == NULL )
 802e6f0:	4605      	mov	r5, r0
 802e6f2:	2900      	cmp	r1, #0
 802e6f4:	d03f      	beq.n	802e776 <x509_name_cmp+0x8e>
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
 802e6f6:	682a      	ldr	r2, [r5, #0]
 802e6f8:	6823      	ldr	r3, [r4, #0]
 802e6fa:	429a      	cmp	r2, r3
 802e6fc:	d13b      	bne.n	802e776 <x509_name_cmp+0x8e>
            a->oid.len != b->oid.len ||
 802e6fe:	6863      	ldr	r3, [r4, #4]
        if( a->oid.tag != b->oid.tag ||
 802e700:	686a      	ldr	r2, [r5, #4]
 802e702:	429a      	cmp	r2, r3
 802e704:	d137      	bne.n	802e776 <x509_name_cmp+0x8e>
            memcmp( a->oid.p, b->oid.p, b->oid.len ) != 0 )
 802e706:	68a1      	ldr	r1, [r4, #8]
 802e708:	68a8      	ldr	r0, [r5, #8]
 802e70a:	f001 fb77 	bl	802fdfc <memcmp>
            a->oid.len != b->oid.len ||
 802e70e:	bb90      	cbnz	r0, 802e776 <x509_name_cmp+0x8e>
    if( a->tag == b->tag &&
 802e710:	68ee      	ldr	r6, [r5, #12]
 802e712:	68e7      	ldr	r7, [r4, #12]
 802e714:	42be      	cmp	r6, r7
 802e716:	d031      	beq.n	802e77c <x509_name_cmp+0x94>
    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 802e718:	2e0c      	cmp	r6, #12
 802e71a:	d001      	beq.n	802e720 <x509_name_cmp+0x38>
 802e71c:	2e13      	cmp	r6, #19
 802e71e:	d12a      	bne.n	802e776 <x509_name_cmp+0x8e>
 802e720:	2f0c      	cmp	r7, #12
 802e722:	d001      	beq.n	802e728 <x509_name_cmp+0x40>
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 802e724:	2f13      	cmp	r7, #19
 802e726:	d126      	bne.n	802e776 <x509_name_cmp+0x8e>
        a->len == b->len &&
 802e728:	6922      	ldr	r2, [r4, #16]
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 802e72a:	692b      	ldr	r3, [r5, #16]
 802e72c:	4293      	cmp	r3, r2
 802e72e:	d122      	bne.n	802e776 <x509_name_cmp+0x8e>
        x509_memcasecmp( a->p, b->p, b->len ) == 0 )
 802e730:	696a      	ldr	r2, [r5, #20]
 802e732:	6961      	ldr	r1, [r4, #20]
    for( i = 0; i < len; i++ )
 802e734:	b1b3      	cbz	r3, 802e764 <x509_name_cmp+0x7c>
 802e736:	3b01      	subs	r3, #1
 802e738:	4413      	add	r3, r2
 802e73a:	3901      	subs	r1, #1
 802e73c:	3a01      	subs	r2, #1
        diff = n1[i] ^ n2[i];
 802e73e:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 802e742:	f811 7f01 	ldrb.w	r7, [r1, #1]!
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 802e746:	f026 0020 	bic.w	r0, r6, #32
        if( diff == 0 )
 802e74a:	42be      	cmp	r6, r7
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 802e74c:	f1a0 0041 	sub.w	r0, r0, #65	; 0x41
        diff = n1[i] ^ n2[i];
 802e750:	ea86 0c07 	eor.w	ip, r6, r7
        if( diff == 0 )
 802e754:	d004      	beq.n	802e760 <x509_name_cmp+0x78>
        if( diff == 32 &&
 802e756:	f1bc 0f20 	cmp.w	ip, #32
 802e75a:	d10c      	bne.n	802e776 <x509_name_cmp+0x8e>
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 802e75c:	2819      	cmp	r0, #25
 802e75e:	d80a      	bhi.n	802e776 <x509_name_cmp+0x8e>
    for( i = 0; i < len; i++ )
 802e760:	4293      	cmp	r3, r2
 802e762:	d1ec      	bne.n	802e73e <x509_name_cmp+0x56>
        /* value */
        if( x509_string_cmp( &a->val, &b->val ) != 0 )
            return( -1 );

        /* structure of the list of sets */
        if( a->next_merged != b->next_merged )
 802e764:	7f2a      	ldrb	r2, [r5, #28]
 802e766:	7f23      	ldrb	r3, [r4, #28]
 802e768:	429a      	cmp	r2, r3
 802e76a:	d104      	bne.n	802e776 <x509_name_cmp+0x8e>
            return( -1 );

        a = a->next;
 802e76c:	69ad      	ldr	r5, [r5, #24]
        b = b->next;
 802e76e:	69a4      	ldr	r4, [r4, #24]
    while( a != NULL || b != NULL )
 802e770:	b17d      	cbz	r5, 802e792 <x509_name_cmp+0xaa>
        if( a == NULL || b == NULL )
 802e772:	2c00      	cmp	r4, #0
 802e774:	d1bf      	bne.n	802e6f6 <x509_name_cmp+0xe>
            return( -1 );
 802e776:	f04f 30ff 	mov.w	r0, #4294967295
    }

    /* a == NULL == b */
    return( 0 );
}
 802e77a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        a->len == b->len &&
 802e77c:	6923      	ldr	r3, [r4, #16]
    if( a->tag == b->tag &&
 802e77e:	692a      	ldr	r2, [r5, #16]
 802e780:	429a      	cmp	r2, r3
 802e782:	d1c9      	bne.n	802e718 <x509_name_cmp+0x30>
        memcmp( a->p, b->p, b->len ) == 0 )
 802e784:	6961      	ldr	r1, [r4, #20]
 802e786:	6968      	ldr	r0, [r5, #20]
 802e788:	f001 fb38 	bl	802fdfc <memcmp>
        a->len == b->len &&
 802e78c:	2800      	cmp	r0, #0
 802e78e:	d1c3      	bne.n	802e718 <x509_name_cmp+0x30>
 802e790:	e7e8      	b.n	802e764 <x509_name_cmp+0x7c>
    while( a != NULL || b != NULL )
 802e792:	1e20      	subs	r0, r4, #0
 802e794:	bf18      	it	ne
 802e796:	2001      	movne	r0, #1
 802e798:	4240      	negs	r0, r0
}
 802e79a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802e79c <x509_crt_check_cn>:
/*
 * Check for CN match
 */
static int x509_crt_check_cn( const mbedtls_x509_buf *name,
                              const char *cn, size_t cn_len )
{
 802e79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* try exact match */
    if( name->len == cn_len &&
 802e79e:	6845      	ldr	r5, [r0, #4]
{
 802e7a0:	4606      	mov	r6, r0
    if( name->len == cn_len &&
 802e7a2:	4295      	cmp	r5, r2
{
 802e7a4:	460c      	mov	r4, r1
    if( name->len == cn_len &&
 802e7a6:	d039      	beq.n	802e81c <x509_crt_check_cn+0x80>
    size_t cn_idx = 0, cn_len = strlen( cn );
 802e7a8:	4620      	mov	r0, r4
 802e7aa:	f7e1 fd4f 	bl	801024c <strlen>
    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
 802e7ae:	2d02      	cmp	r5, #2
 802e7b0:	d931      	bls.n	802e816 <x509_crt_check_cn+0x7a>
 802e7b2:	68b2      	ldr	r2, [r6, #8]
 802e7b4:	7813      	ldrb	r3, [r2, #0]
 802e7b6:	2b2a      	cmp	r3, #42	; 0x2a
 802e7b8:	d12d      	bne.n	802e816 <x509_crt_check_cn+0x7a>
 802e7ba:	7853      	ldrb	r3, [r2, #1]
 802e7bc:	2b2e      	cmp	r3, #46	; 0x2e
 802e7be:	d12a      	bne.n	802e816 <x509_crt_check_cn+0x7a>
    for( i = 0; i < cn_len; ++i )
 802e7c0:	b348      	cbz	r0, 802e816 <x509_crt_check_cn+0x7a>
 802e7c2:	1e63      	subs	r3, r4, #1
 802e7c4:	eb03 0c00 	add.w	ip, r3, r0
 802e7c8:	f1c4 0701 	rsb	r7, r4, #1
 802e7cc:	e001      	b.n	802e7d2 <x509_crt_check_cn+0x36>
 802e7ce:	4563      	cmp	r3, ip
 802e7d0:	d021      	beq.n	802e816 <x509_crt_check_cn+0x7a>
 802e7d2:	18f9      	adds	r1, r7, r3
        if( cn[i] == '.' )
 802e7d4:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 802e7d8:	2e2e      	cmp	r6, #46	; 0x2e
 802e7da:	d1f8      	bne.n	802e7ce <x509_crt_check_cn+0x32>
    if( cn_idx == 0 )
 802e7dc:	b1d9      	cbz	r1, 802e816 <x509_crt_check_cn+0x7a>
    if( cn_len - cn_idx == name->len - 1 &&
 802e7de:	3d01      	subs	r5, #1
 802e7e0:	1a40      	subs	r0, r0, r1
 802e7e2:	42a8      	cmp	r0, r5
 802e7e4:	d117      	bne.n	802e816 <x509_crt_check_cn+0x7a>
 802e7e6:	4613      	mov	r3, r2
 802e7e8:	3901      	subs	r1, #1
 802e7ea:	4410      	add	r0, r2
 802e7ec:	4421      	add	r1, r4
        diff = n1[i] ^ n2[i];
 802e7ee:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 802e7f2:	f811 5f01 	ldrb.w	r5, [r1, #1]!
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 802e7f6:	f024 0220 	bic.w	r2, r4, #32
        if( diff == 0 )
 802e7fa:	42ac      	cmp	r4, r5
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 802e7fc:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
        diff = n1[i] ^ n2[i];
 802e800:	ea84 0605 	eor.w	r6, r4, r5
        if( diff == 0 )
 802e804:	d003      	beq.n	802e80e <x509_crt_check_cn+0x72>
        if( diff == 32 &&
 802e806:	2e20      	cmp	r6, #32
 802e808:	d105      	bne.n	802e816 <x509_crt_check_cn+0x7a>
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 802e80a:	2a19      	cmp	r2, #25
 802e80c:	d803      	bhi.n	802e816 <x509_crt_check_cn+0x7a>
    for( i = 0; i < len; i++ )
 802e80e:	4298      	cmp	r0, r3
 802e810:	d1ed      	bne.n	802e7ee <x509_crt_check_cn+0x52>
        x509_memcasecmp( cn, name->p, cn_len ) == 0 )
    {
        return( 0 );
 802e812:	2000      	movs	r0, #0
    {
        return( 0 );
    }

    return( -1 );
}
 802e814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return( -1 );
 802e816:	f04f 30ff 	mov.w	r0, #4294967295
}
 802e81a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        x509_memcasecmp( cn, name->p, cn_len ) == 0 )
 802e81c:	6887      	ldr	r7, [r0, #8]
    for( i = 0; i < len; i++ )
 802e81e:	2d00      	cmp	r5, #0
 802e820:	d0f7      	beq.n	802e812 <x509_crt_check_cn+0x76>
 802e822:	eb01 0e05 	add.w	lr, r1, r5
 802e826:	3f01      	subs	r7, #1
 802e828:	f10e 3eff 	add.w	lr, lr, #4294967295
 802e82c:	3901      	subs	r1, #1
        diff = n1[i] ^ n2[i];
 802e82e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802e832:	f817 0f01 	ldrb.w	r0, [r7, #1]!
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 802e836:	f023 0220 	bic.w	r2, r3, #32
        if( diff == 0 )
 802e83a:	4283      	cmp	r3, r0
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 802e83c:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
        diff = n1[i] ^ n2[i];
 802e840:	ea83 0c00 	eor.w	ip, r3, r0
        if( diff == 0 )
 802e844:	d004      	beq.n	802e850 <x509_crt_check_cn+0xb4>
        if( diff == 32 &&
 802e846:	f1bc 0f20 	cmp.w	ip, #32
 802e84a:	d1ad      	bne.n	802e7a8 <x509_crt_check_cn+0xc>
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 802e84c:	2a19      	cmp	r2, #25
 802e84e:	d8ab      	bhi.n	802e7a8 <x509_crt_check_cn+0xc>
    for( i = 0; i < len; i++ )
 802e850:	4571      	cmp	r1, lr
 802e852:	d1ec      	bne.n	802e82e <x509_crt_check_cn+0x92>
        return( 0 );
 802e854:	2000      	movs	r0, #0
 802e856:	e7dd      	b.n	802e814 <x509_crt_check_cn+0x78>

0802e858 <mbedtls_x509_parse_subject_alt_name.part.0>:
int mbedtls_x509_parse_subject_alt_name( const mbedtls_x509_buf *san_buf,
 802e858:	b5f0      	push	{r4, r5, r6, r7, lr}
    const unsigned char *end = p + subject_alt_name->len;
 802e85a:	e9d0 2501 	ldrd	r2, r5, [r0, #4]
    if( ( subject_alt_name->tag &
 802e85e:	6803      	ldr	r3, [r0, #0]
int mbedtls_x509_parse_subject_alt_name( const mbedtls_x509_buf *san_buf,
 802e860:	b08d      	sub	sp, #52	; 0x34
    if( ( subject_alt_name->tag &
 802e862:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802e866:	2b80      	cmp	r3, #128	; 0x80
    unsigned char *p = subject_alt_name->p;
 802e868:	9502      	str	r5, [sp, #8]
    const unsigned char *end = p + subject_alt_name->len;
 802e86a:	4415      	add	r5, r2
    if( ( subject_alt_name->tag &
 802e86c:	d16b      	bne.n	802e946 <mbedtls_x509_parse_subject_alt_name.part.0+0xee>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 802e86e:	460c      	mov	r4, r1
 802e870:	2306      	movs	r3, #6
 802e872:	4629      	mov	r1, r5
 802e874:	aa01      	add	r2, sp, #4
 802e876:	a802      	add	r0, sp, #8
 802e878:	f7f1 fde4 	bl	8020444 <mbedtls_asn1_get_tag>
 802e87c:	b9a0      	cbnz	r0, 802e8a8 <mbedtls_x509_parse_subject_alt_name.part.0+0x50>
    cur_oid.p = p;
 802e87e:	e9dd 2601 	ldrd	r2, r6, [sp, #4]
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_ON_HW_MODULE_NAME, &cur_oid ) != 0 )
 802e882:	2a08      	cmp	r2, #8
 802e884:	d161      	bne.n	802e94a <mbedtls_x509_parse_subject_alt_name.part.0+0xf2>
 802e886:	4631      	mov	r1, r6
 802e888:	4831      	ldr	r0, [pc, #196]	; (802e950 <mbedtls_x509_parse_subject_alt_name.part.0+0xf8>)
 802e88a:	f001 fab7 	bl	802fdfc <memcmp>
 802e88e:	2800      	cmp	r0, #0
 802e890:	d15b      	bne.n	802e94a <mbedtls_x509_parse_subject_alt_name.part.0+0xf2>
    if( p + len >= end )
 802e892:	3608      	adds	r6, #8
 802e894:	42b5      	cmp	r5, r6
 802e896:	d950      	bls.n	802e93a <mbedtls_x509_parse_subject_alt_name.part.0+0xe2>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 802e898:	23a0      	movs	r3, #160	; 0xa0
 802e89a:	4629      	mov	r1, r5
 802e89c:	aa01      	add	r2, sp, #4
 802e89e:	a802      	add	r0, sp, #8
    p += len;
 802e8a0:	9602      	str	r6, [sp, #8]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 802e8a2:	f7f1 fdcf 	bl	8020444 <mbedtls_asn1_get_tag>
 802e8a6:	b128      	cbz	r0, 802e8b4 <mbedtls_x509_parse_subject_alt_name.part.0+0x5c>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 802e8a8:	f5a0 5314 	sub.w	r3, r0, #9472	; 0x2500
            if( ret != 0 )
 802e8ac:	b373      	cbz	r3, 802e90c <mbedtls_x509_parse_subject_alt_name.part.0+0xb4>
}
 802e8ae:	4618      	mov	r0, r3
 802e8b0:	b00d      	add	sp, #52	; 0x34
 802e8b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 802e8b4:	2330      	movs	r3, #48	; 0x30
 802e8b6:	4629      	mov	r1, r5
 802e8b8:	aa01      	add	r2, sp, #4
 802e8ba:	a802      	add	r0, sp, #8
 802e8bc:	f7f1 fdc2 	bl	8020444 <mbedtls_asn1_get_tag>
 802e8c0:	2800      	cmp	r0, #0
 802e8c2:	d1f1      	bne.n	802e8a8 <mbedtls_x509_parse_subject_alt_name.part.0+0x50>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OID ) ) != 0 )
 802e8c4:	2306      	movs	r3, #6
 802e8c6:	4629      	mov	r1, r5
 802e8c8:	aa01      	add	r2, sp, #4
 802e8ca:	a802      	add	r0, sp, #8
 802e8cc:	f7f1 fdba 	bl	8020444 <mbedtls_asn1_get_tag>
 802e8d0:	2800      	cmp	r0, #0
 802e8d2:	d1e9      	bne.n	802e8a8 <mbedtls_x509_parse_subject_alt_name.part.0+0x50>
    other_name->value.hardware_module_name.oid.len = len;
 802e8d4:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
    other_name->value.hardware_module_name.oid.tag = MBEDTLS_ASN1_OID;
 802e8d8:	2106      	movs	r1, #6
    if( p + len >= end )
 802e8da:	18d6      	adds	r6, r2, r3
 802e8dc:	42b5      	cmp	r5, r6
    other_name->value.hardware_module_name.oid.len = len;
 802e8de:	e9cd 3207 	strd	r3, r2, [sp, #28]
    other_name->value.hardware_module_name.oid.tag = MBEDTLS_ASN1_OID;
 802e8e2:	9106      	str	r1, [sp, #24]
    if( p + len >= end )
 802e8e4:	d929      	bls.n	802e93a <mbedtls_x509_parse_subject_alt_name.part.0+0xe2>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 802e8e6:	2304      	movs	r3, #4
 802e8e8:	4629      	mov	r1, r5
 802e8ea:	aa01      	add	r2, sp, #4
 802e8ec:	a802      	add	r0, sp, #8
    p += len;
 802e8ee:	9602      	str	r6, [sp, #8]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 802e8f0:	f7f1 fda8 	bl	8020444 <mbedtls_asn1_get_tag>
 802e8f4:	2800      	cmp	r0, #0
 802e8f6:	d1d7      	bne.n	802e8a8 <mbedtls_x509_parse_subject_alt_name.part.0+0x50>
    other_name->value.hardware_module_name.val.len = len;
 802e8f8:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
    other_name->value.hardware_module_name.val.tag = MBEDTLS_ASN1_OCTET_STRING;
 802e8fc:	2104      	movs	r1, #4
    other_name->value.hardware_module_name.val.p = p;
 802e8fe:	930b      	str	r3, [sp, #44]	; 0x2c
    p += len;
 802e900:	4413      	add	r3, r2
    if( p != end )
 802e902:	429d      	cmp	r5, r3
    other_name->value.hardware_module_name.val.tag = MBEDTLS_ASN1_OCTET_STRING;
 802e904:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
    p += len;
 802e908:	9302      	str	r3, [sp, #8]
    if( p != end )
 802e90a:	d116      	bne.n	802e93a <mbedtls_x509_parse_subject_alt_name.part.0+0xe2>
            san->type = MBEDTLS_X509_SAN_OTHER_NAME;
 802e90c:	2300      	movs	r3, #0
            memcpy( &san->san.other_name,
 802e90e:	ae03      	add	r6, sp, #12
            san->type = MBEDTLS_X509_SAN_OTHER_NAME;
 802e910:	f844 3b04 	str.w	r3, [r4], #4
            memcpy( &san->san.other_name,
 802e914:	af0b      	add	r7, sp, #44	; 0x2c
 802e916:	4635      	mov	r5, r6
 802e918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802e91a:	42bd      	cmp	r5, r7
 802e91c:	6020      	str	r0, [r4, #0]
 802e91e:	6061      	str	r1, [r4, #4]
 802e920:	60a2      	str	r2, [r4, #8]
 802e922:	60e3      	str	r3, [r4, #12]
 802e924:	f106 0610 	add.w	r6, r6, #16
 802e928:	f104 0410 	add.w	r4, r4, #16
 802e92c:	d1f3      	bne.n	802e916 <mbedtls_x509_parse_subject_alt_name.part.0+0xbe>
    return( 0 );
 802e92e:	2300      	movs	r3, #0
            memcpy( &san->san.other_name,
 802e930:	6830      	ldr	r0, [r6, #0]
 802e932:	6020      	str	r0, [r4, #0]
}
 802e934:	4618      	mov	r0, r3
 802e936:	b00d      	add	sp, #52	; 0x34
 802e938:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mbedtls_platform_zeroize( other_name, sizeof( *other_name ) );
 802e93a:	2124      	movs	r1, #36	; 0x24
 802e93c:	a803      	add	r0, sp, #12
 802e93e:	f7f9 f8f5 	bl	8027b2c <mbedtls_platform_zeroize>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 802e942:	4b04      	ldr	r3, [pc, #16]	; (802e954 <mbedtls_x509_parse_subject_alt_name.part.0+0xfc>)
 802e944:	e7b3      	b.n	802e8ae <mbedtls_x509_parse_subject_alt_name.part.0+0x56>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 802e946:	4b04      	ldr	r3, [pc, #16]	; (802e958 <mbedtls_x509_parse_subject_alt_name.part.0+0x100>)
 802e948:	e7b1      	b.n	802e8ae <mbedtls_x509_parse_subject_alt_name.part.0+0x56>
        return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
 802e94a:	4b04      	ldr	r3, [pc, #16]	; (802e95c <mbedtls_x509_parse_subject_alt_name.part.0+0x104>)
 802e94c:	e7af      	b.n	802e8ae <mbedtls_x509_parse_subject_alt_name.part.0+0x56>
 802e94e:	bf00      	nop
 802e950:	08035988 	.word	0x08035988
 802e954:	ffffda9a 	.word	0xffffda9a
 802e958:	ffffd800 	.word	0xffffd800
 802e95c:	ffffdf80 	.word	0xffffdf80

0802e960 <mbedtls_x509_crt_free.part.0>:
}

/*
 * Unallocate all certificate data
 */
void mbedtls_x509_crt_free( mbedtls_x509_crt *crt )
 802e960:	b570      	push	{r4, r5, r6, lr}
 802e962:	4606      	mov	r6, r0
 802e964:	4605      	mov	r5, r0
 802e966:	b082      	sub	sp, #8
    if( crt == NULL )
        return;

    do
    {
        mbedtls_pk_free( &cert_cur->pk );
 802e968:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
 802e96c:	f7f8 fc0a 	bl	8027184 <mbedtls_pk_free>

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
#endif

        name_cur = cert_cur->issuer.next;
 802e970:	6eac      	ldr	r4, [r5, #104]	; 0x68
        while( name_cur != NULL )
 802e972:	b154      	cbz	r4, 802e98a <mbedtls_x509_crt_free.part.0+0x2a>
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 802e974:	4620      	mov	r0, r4
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 802e976:	2120      	movs	r1, #32
            name_cur = name_cur->next;
 802e978:	69a4      	ldr	r4, [r4, #24]
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 802e97a:	9001      	str	r0, [sp, #4]
 802e97c:	f7f9 f8d6 	bl	8027b2c <mbedtls_platform_zeroize>
            mbedtls_free( name_prv );
 802e980:	9801      	ldr	r0, [sp, #4]
 802e982:	f001 fa33 	bl	802fdec <free>
        while( name_cur != NULL )
 802e986:	2c00      	cmp	r4, #0
 802e988:	d1f4      	bne.n	802e974 <mbedtls_x509_crt_free.part.0+0x14>
        }

        name_cur = cert_cur->subject.next;
 802e98a:	f8d5 4088 	ldr.w	r4, [r5, #136]	; 0x88
        while( name_cur != NULL )
 802e98e:	b154      	cbz	r4, 802e9a6 <mbedtls_x509_crt_free.part.0+0x46>
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 802e990:	4620      	mov	r0, r4
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 802e992:	2120      	movs	r1, #32
            name_cur = name_cur->next;
 802e994:	69a4      	ldr	r4, [r4, #24]
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 802e996:	9001      	str	r0, [sp, #4]
 802e998:	f7f9 f8c8 	bl	8027b2c <mbedtls_platform_zeroize>
            mbedtls_free( name_prv );
 802e99c:	9801      	ldr	r0, [sp, #4]
 802e99e:	f001 fa25 	bl	802fdec <free>
        while( name_cur != NULL )
 802e9a2:	2c00      	cmp	r4, #0
 802e9a4:	d1f4      	bne.n	802e990 <mbedtls_x509_crt_free.part.0+0x30>
        }

        seq_cur = cert_cur->ext_key_usage.next;
 802e9a6:	f8d5 4134 	ldr.w	r4, [r5, #308]	; 0x134
        while( seq_cur != NULL )
 802e9aa:	b154      	cbz	r4, 802e9c2 <mbedtls_x509_crt_free.part.0+0x62>
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 802e9ac:	4620      	mov	r0, r4
            mbedtls_platform_zeroize( seq_prv,
 802e9ae:	2110      	movs	r1, #16
            seq_cur = seq_cur->next;
 802e9b0:	68e4      	ldr	r4, [r4, #12]
            mbedtls_platform_zeroize( seq_prv,
 802e9b2:	9001      	str	r0, [sp, #4]
 802e9b4:	f7f9 f8ba 	bl	8027b2c <mbedtls_platform_zeroize>
                                      sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
 802e9b8:	9801      	ldr	r0, [sp, #4]
 802e9ba:	f001 fa17 	bl	802fdec <free>
        while( seq_cur != NULL )
 802e9be:	2c00      	cmp	r4, #0
 802e9c0:	d1f4      	bne.n	802e9ac <mbedtls_x509_crt_free.part.0+0x4c>
        }

        seq_cur = cert_cur->subject_alt_names.next;
 802e9c2:	f8d5 4104 	ldr.w	r4, [r5, #260]	; 0x104
        while( seq_cur != NULL )
 802e9c6:	b154      	cbz	r4, 802e9de <mbedtls_x509_crt_free.part.0+0x7e>
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 802e9c8:	4620      	mov	r0, r4
            mbedtls_platform_zeroize( seq_prv,
 802e9ca:	2110      	movs	r1, #16
            seq_cur = seq_cur->next;
 802e9cc:	68e4      	ldr	r4, [r4, #12]
            mbedtls_platform_zeroize( seq_prv,
 802e9ce:	9001      	str	r0, [sp, #4]
 802e9d0:	f7f9 f8ac 	bl	8027b2c <mbedtls_platform_zeroize>
                                      sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
 802e9d4:	9801      	ldr	r0, [sp, #4]
 802e9d6:	f001 fa09 	bl	802fdec <free>
        while( seq_cur != NULL )
 802e9da:	2c00      	cmp	r4, #0
 802e9dc:	d1f4      	bne.n	802e9c8 <mbedtls_x509_crt_free.part.0+0x68>
        }

        seq_cur = cert_cur->certificate_policies.next;
 802e9de:	f8d5 4114 	ldr.w	r4, [r5, #276]	; 0x114
        while( seq_cur != NULL )
 802e9e2:	b154      	cbz	r4, 802e9fa <mbedtls_x509_crt_free.part.0+0x9a>
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 802e9e4:	4620      	mov	r0, r4
            mbedtls_platform_zeroize( seq_prv,
 802e9e6:	2110      	movs	r1, #16
            seq_cur = seq_cur->next;
 802e9e8:	68e4      	ldr	r4, [r4, #12]
            mbedtls_platform_zeroize( seq_prv,
 802e9ea:	9001      	str	r0, [sp, #4]
 802e9ec:	f7f9 f89e 	bl	8027b2c <mbedtls_platform_zeroize>
                                      sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
 802e9f0:	9801      	ldr	r0, [sp, #4]
 802e9f2:	f001 f9fb 	bl	802fdec <free>
        while( seq_cur != NULL )
 802e9f6:	2c00      	cmp	r4, #0
 802e9f8:	d1f4      	bne.n	802e9e4 <mbedtls_x509_crt_free.part.0+0x84>
        }

        if( cert_cur->raw.p != NULL && cert_cur->own_buffer )
 802e9fa:	68e8      	ldr	r0, [r5, #12]
 802e9fc:	b108      	cbz	r0, 802ea02 <mbedtls_x509_crt_free.part.0+0xa2>
 802e9fe:	682b      	ldr	r3, [r5, #0]
 802ea00:	b9e3      	cbnz	r3, 802ea3c <mbedtls_x509_crt_free.part.0+0xdc>
        {
            mbedtls_platform_zeroize( cert_cur->raw.p, cert_cur->raw.len );
            mbedtls_free( cert_cur->raw.p );
        }

        cert_cur = cert_cur->next;
 802ea02:	f8d5 5150 	ldr.w	r5, [r5, #336]	; 0x150
    }
    while( cert_cur != NULL );
 802ea06:	2d00      	cmp	r5, #0
 802ea08:	d1ae      	bne.n	802e968 <mbedtls_x509_crt_free.part.0+0x8>
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;

        mbedtls_platform_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 802ea0a:	f44f 71aa 	mov.w	r1, #340	; 0x154
 802ea0e:	4630      	mov	r0, r6
        cert_cur = cert_cur->next;
 802ea10:	f8d6 4150 	ldr.w	r4, [r6, #336]	; 0x150
        mbedtls_platform_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 802ea14:	f7f9 f88a 	bl	8027b2c <mbedtls_platform_zeroize>
        if( cert_prv != crt )
            mbedtls_free( cert_prv );
    }
    while( cert_cur != NULL );
 802ea18:	b174      	cbz	r4, 802ea38 <mbedtls_x509_crt_free.part.0+0xd8>
        cert_cur = cert_cur->next;
 802ea1a:	4625      	mov	r5, r4
        mbedtls_platform_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 802ea1c:	4620      	mov	r0, r4
 802ea1e:	f44f 71aa 	mov.w	r1, #340	; 0x154
        cert_cur = cert_cur->next;
 802ea22:	f8d4 4150 	ldr.w	r4, [r4, #336]	; 0x150
        mbedtls_platform_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 802ea26:	f7f9 f881 	bl	8027b2c <mbedtls_platform_zeroize>
        if( cert_prv != crt )
 802ea2a:	42ae      	cmp	r6, r5
 802ea2c:	d0f4      	beq.n	802ea18 <mbedtls_x509_crt_free.part.0+0xb8>
            mbedtls_free( cert_prv );
 802ea2e:	4628      	mov	r0, r5
 802ea30:	f001 f9dc 	bl	802fdec <free>
    while( cert_cur != NULL );
 802ea34:	2c00      	cmp	r4, #0
 802ea36:	d1f0      	bne.n	802ea1a <mbedtls_x509_crt_free.part.0+0xba>
}
 802ea38:	b002      	add	sp, #8
 802ea3a:	bd70      	pop	{r4, r5, r6, pc}
            mbedtls_platform_zeroize( cert_cur->raw.p, cert_cur->raw.len );
 802ea3c:	68a9      	ldr	r1, [r5, #8]
 802ea3e:	f7f9 f875 	bl	8027b2c <mbedtls_platform_zeroize>
            mbedtls_free( cert_cur->raw.p );
 802ea42:	68e8      	ldr	r0, [r5, #12]
 802ea44:	f001 f9d2 	bl	802fdec <free>
 802ea48:	e7db      	b.n	802ea02 <mbedtls_x509_crt_free.part.0+0xa2>
 802ea4a:	bf00      	nop

0802ea4c <x509_crt_verify_restartable_ca_cb.isra.0>:
static int x509_crt_verify_restartable_ca_cb( mbedtls_x509_crt *crt,
 802ea4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ea50:	ed2d 8b02 	vpush	{d8}
    *flags = 0;
 802ea54:	2400      	movs	r4, #0
        ver_chain->items[i].flags = (uint32_t) -1;
 802ea56:	f04f 35ff 	mov.w	r5, #4294967295
    if( profile == NULL )
 802ea5a:	461e      	mov	r6, r3
static int x509_crt_verify_restartable_ca_cb( mbedtls_x509_crt *crt,
 802ea5c:	b0b1      	sub	sp, #196	; 0xc4
    *flags = 0;
 802ea5e:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
        ver_chain->items[i].flags = (uint32_t) -1;
 802ea60:	951c      	str	r5, [sp, #112]	; 0x70
 802ea62:	951e      	str	r5, [sp, #120]	; 0x78
 802ea64:	9520      	str	r5, [sp, #128]	; 0x80
 802ea66:	9522      	str	r5, [sp, #136]	; 0x88
 802ea68:	9524      	str	r5, [sp, #144]	; 0x90
 802ea6a:	9526      	str	r5, [sp, #152]	; 0x98
 802ea6c:	9528      	str	r5, [sp, #160]	; 0xa0
 802ea6e:	952a      	str	r5, [sp, #168]	; 0xa8
 802ea70:	952c      	str	r5, [sp, #176]	; 0xb0
 802ea72:	952e      	str	r5, [sp, #184]	; 0xb8
static int x509_crt_verify_restartable_ca_cb( mbedtls_x509_crt *crt,
 802ea74:	910e      	str	r1, [sp, #56]	; 0x38
 802ea76:	9d3c      	ldr	r5, [sp, #240]	; 0xf0
 802ea78:	9210      	str	r2, [sp, #64]	; 0x40
        ver_chain->items[i].crt = NULL;
 802ea7a:	941b      	str	r4, [sp, #108]	; 0x6c
 802ea7c:	941d      	str	r4, [sp, #116]	; 0x74
 802ea7e:	941f      	str	r4, [sp, #124]	; 0x7c
 802ea80:	9421      	str	r4, [sp, #132]	; 0x84
 802ea82:	9423      	str	r4, [sp, #140]	; 0x8c
 802ea84:	9425      	str	r4, [sp, #148]	; 0x94
 802ea86:	9427      	str	r4, [sp, #156]	; 0x9c
 802ea88:	9429      	str	r4, [sp, #164]	; 0xa4
 802ea8a:	942b      	str	r4, [sp, #172]	; 0xac
 802ea8c:	942d      	str	r4, [sp, #180]	; 0xb4
    *flags = 0;
 802ea8e:	601c      	str	r4, [r3, #0]
    if( profile == NULL )
 802ea90:	2e00      	cmp	r6, #0
 802ea92:	f000 8362 	beq.w	802f15a <x509_crt_verify_restartable_ca_cb.isra.0+0x70e>
    if( cn != NULL )
 802ea96:	4682      	mov	sl, r0
 802ea98:	b335      	cbz	r5, 802eae8 <x509_crt_verify_restartable_ca_cb.isra.0+0x9c>
    size_t cn_len = strlen( cn );
 802ea9a:	4628      	mov	r0, r5
 802ea9c:	f7e1 fbd6 	bl	801024c <strlen>
    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 802eaa0:	f8da 3118 	ldr.w	r3, [sl, #280]	; 0x118
    size_t cn_len = strlen( cn );
 802eaa4:	4607      	mov	r7, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 802eaa6:	0698      	lsls	r0, r3, #26
 802eaa8:	f140 8332 	bpl.w	802f110 <x509_crt_verify_restartable_ca_cb.isra.0+0x6c4>
        for( cur = &crt->subject_alt_names; cur != NULL; cur = cur->next )
 802eaac:	f10a 04f8 	add.w	r4, sl, #248	; 0xf8
    const unsigned char san_type = (unsigned char) name->tag &
 802eab0:	6823      	ldr	r3, [r4, #0]
    if( san_type == MBEDTLS_X509_SAN_DNS_NAME )
 802eab2:	f003 031f 	and.w	r3, r3, #31
 802eab6:	2b02      	cmp	r3, #2
 802eab8:	d107      	bne.n	802eaca <x509_crt_verify_restartable_ca_cb.isra.0+0x7e>
        return( x509_crt_check_cn( name, cn, cn_len ) );
 802eaba:	463a      	mov	r2, r7
 802eabc:	4629      	mov	r1, r5
 802eabe:	4620      	mov	r0, r4
 802eac0:	f7ff fe6c 	bl	802e79c <x509_crt_check_cn>
            if( x509_crt_check_san( &cur->buf, cn, cn_len ) == 0 )
 802eac4:	2800      	cmp	r0, #0
 802eac6:	f000 8340 	beq.w	802f14a <x509_crt_verify_restartable_ca_cb.isra.0+0x6fe>
        for( cur = &crt->subject_alt_names; cur != NULL; cur = cur->next )
 802eaca:	68e4      	ldr	r4, [r4, #12]
 802eacc:	2c00      	cmp	r4, #0
 802eace:	d1ef      	bne.n	802eab0 <x509_crt_verify_restartable_ca_cb.isra.0+0x64>
            *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
 802ead0:	2304      	movs	r3, #4
 802ead2:	f248 0504 	movw	r5, #32772	; 0x8004
 802ead6:	f8df 800c 	ldr.w	r8, [pc, #12]	; 802eae4 <x509_crt_verify_restartable_ca_cb.isra.0+0x98>
 802eada:	4c01      	ldr	r4, [pc, #4]	; (802eae0 <x509_crt_verify_restartable_ca_cb.isra.0+0x94>)
 802eadc:	9311      	str	r3, [sp, #68]	; 0x44
 802eade:	e00a      	b.n	802eaf6 <x509_crt_verify_restartable_ca_cb.isra.0+0xaa>
 802eae0:	00010004 	.word	0x00010004
 802eae4:	00018004 	.word	0x00018004
    ee_flags = 0;
 802eae8:	9511      	str	r5, [sp, #68]	; 0x44
 802eaea:	f44f 38c0 	mov.w	r8, #98304	; 0x18000
 802eaee:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 802eaf2:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    pk_type = mbedtls_pk_get_type( &crt->pk );
 802eaf6:	f10a 07cc 	add.w	r7, sl, #204	; 0xcc
 802eafa:	4638      	mov	r0, r7
 802eafc:	f7f8 fc30 	bl	8027360 <mbedtls_pk_get_type>
    if( pk_alg == MBEDTLS_PK_NONE )
 802eb00:	2800      	cmp	r0, #0
 802eb02:	f000 832c 	beq.w	802f15e <x509_crt_verify_restartable_ca_cb.isra.0+0x712>
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 802eb06:	2201      	movs	r2, #1
 802eb08:	6873      	ldr	r3, [r6, #4]
 802eb0a:	3801      	subs	r0, #1
 802eb0c:	fa02 f000 	lsl.w	r0, r2, r0
 802eb10:	4018      	ands	r0, r3
 802eb12:	2800      	cmp	r0, #0
 802eb14:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802eb16:	bf04      	itt	eq
 802eb18:	462b      	moveq	r3, r5
 802eb1a:	4644      	moveq	r4, r8
 802eb1c:	9311      	str	r3, [sp, #68]	; 0x44
    const mbedtls_pk_type_t pk_alg = mbedtls_pk_get_type( pk );
 802eb1e:	4638      	mov	r0, r7
 802eb20:	f7f8 fc1e 	bl	8027360 <mbedtls_pk_get_type>
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 802eb24:	2801      	cmp	r0, #1
 802eb26:	d002      	beq.n	802eb2e <x509_crt_verify_restartable_ca_cb.isra.0+0xe2>
 802eb28:	2806      	cmp	r0, #6
 802eb2a:	f040 82e4 	bne.w	802f0f6 <x509_crt_verify_restartable_ca_cb.isra.0+0x6aa>
        if( mbedtls_pk_get_bitlen( pk ) >= profile->rsa_min_bitlen )
 802eb2e:	4638      	mov	r0, r7
 802eb30:	f7f8 fc0e 	bl	8027350 <mbedtls_pk_get_bitlen>
 802eb34:	68f3      	ldr	r3, [r6, #12]
 802eb36:	4298      	cmp	r0, r3
 802eb38:	f0c0 82dd 	bcc.w	802f0f6 <x509_crt_verify_restartable_ca_cb.isra.0+0x6aa>
    ver_chain->len = 0;
 802eb3c:	2300      	movs	r3, #0
    child_is_trusted = 0;
 802eb3e:	469b      	mov	fp, r3
    ver_chain->len = 0;
 802eb40:	9309      	str	r3, [sp, #36]	; 0x24
    self_cnt = 0;
 802eb42:	930f      	str	r3, [sp, #60]	; 0x3c
 802eb44:	ab1b      	add	r3, sp, #108	; 0x6c
 802eb46:	4654      	mov	r4, sl
 802eb48:	461d      	mov	r5, r3
 802eb4a:	9307      	str	r3, [sp, #28]
        cur->flags = 0;
 802eb4c:	2200      	movs	r2, #0
        if( mbedtls_x509_time_is_past( &child->valid_to ) )
 802eb4e:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
        cur->crt = child;
 802eb52:	602c      	str	r4, [r5, #0]
        cur->flags = 0;
 802eb54:	606a      	str	r2, [r5, #4]
        if( mbedtls_x509_time_is_past( &child->valid_to ) )
 802eb56:	f7ff fdc3 	bl	802e6e0 <mbedtls_x509_time_is_past>
        ver_chain->len++;
 802eb5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802eb5c:	3301      	adds	r3, #1
 802eb5e:	9306      	str	r3, [sp, #24]
        if( mbedtls_x509_time_is_past( &child->valid_to ) )
 802eb60:	2800      	cmp	r0, #0
 802eb62:	f000 8215 	beq.w	802ef90 <x509_crt_verify_restartable_ca_cb.isra.0+0x544>
            *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 802eb66:	f24c 2301 	movw	r3, #49665	; 0xc201
 802eb6a:	2001      	movs	r0, #1
 802eb6c:	9308      	str	r3, [sp, #32]
 802eb6e:	f244 0301 	movw	r3, #16385	; 0x4001
 802eb72:	6068      	str	r0, [r5, #4]
 802eb74:	f248 2a01 	movw	sl, #33281	; 0x8201
 802eb78:	f244 2901 	movw	r9, #16897	; 0x4201
 802eb7c:	f24c 0801 	movw	r8, #49153	; 0xc001
 802eb80:	f248 0501 	movw	r5, #32769	; 0x8001
 802eb84:	f240 2701 	movw	r7, #513	; 0x201
 802eb88:	9005      	str	r0, [sp, #20]
 802eb8a:	9304      	str	r3, [sp, #16]
        if( mbedtls_x509_time_is_future( &child->valid_from ) )
 802eb8c:	f104 0090 	add.w	r0, r4, #144	; 0x90
 802eb90:	f7ff fda8 	bl	802e6e4 <mbedtls_x509_time_is_future>
 802eb94:	b130      	cbz	r0, 802eba4 <x509_crt_verify_restartable_ca_cb.isra.0+0x158>
            *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 802eb96:	4655      	mov	r5, sl
 802eb98:	9b07      	ldr	r3, [sp, #28]
 802eb9a:	e9cd 9704 	strd	r9, r7, [sp, #16]
 802eb9e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802eba2:	605f      	str	r7, [r3, #4]
        if( child_is_trusted )
 802eba4:	f1bb 0f00 	cmp.w	fp, #0
 802eba8:	f040 821b 	bne.w	802efe2 <x509_crt_verify_restartable_ca_cb.isra.0+0x596>
        if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
 802ebac:	f894 3148 	ldrb.w	r3, [r4, #328]	; 0x148
    if( md_alg == MBEDTLS_MD_NONE )
 802ebb0:	2b00      	cmp	r3, #0
 802ebb2:	f000 829a 	beq.w	802f0ea <x509_crt_verify_restartable_ca_cb.isra.0+0x69e>
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 802ebb6:	2201      	movs	r2, #1
 802ebb8:	6831      	ldr	r1, [r6, #0]
 802ebba:	3b01      	subs	r3, #1
 802ebbc:	fa02 f303 	lsl.w	r3, r2, r3
 802ebc0:	420b      	tst	r3, r1
 802ebc2:	f000 8292 	beq.w	802f0ea <x509_crt_verify_restartable_ca_cb.isra.0+0x69e>
        if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
 802ebc6:	f894 3149 	ldrb.w	r3, [r4, #329]	; 0x149
    if( pk_alg == MBEDTLS_PK_NONE )
 802ebca:	2b00      	cmp	r3, #0
 802ebcc:	f000 8289 	beq.w	802f0e2 <x509_crt_verify_restartable_ca_cb.isra.0+0x696>
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 802ebd0:	2201      	movs	r2, #1
 802ebd2:	6871      	ldr	r1, [r6, #4]
 802ebd4:	3b01      	subs	r3, #1
 802ebd6:	fa02 f303 	lsl.w	r3, r2, r3
 802ebda:	420b      	tst	r3, r1
 802ebdc:	f000 8281 	beq.w	802f0e2 <x509_crt_verify_restartable_ca_cb.isra.0+0x696>
        if( ver_chain->len == 1 &&
 802ebe0:	9b06      	ldr	r3, [sp, #24]
 802ebe2:	2b01      	cmp	r3, #1
 802ebe4:	f000 8140 	beq.w	802ee68 <x509_crt_verify_restartable_ca_cb.isra.0+0x41c>
 802ebe8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
        if( crt->raw.len == cur->raw.len &&
 802ebea:	2302      	movs	r3, #2
 802ebec:	f104 0a50 	add.w	sl, r4, #80	; 0x50
 802ebf0:	9308      	str	r3, [sp, #32]
 802ebf2:	2301      	movs	r3, #1
 802ebf4:	e9cd b60c 	strd	fp, r6, [sp, #48]	; 0x30
 802ebf8:	46d3      	mov	fp, sl
 802ebfa:	9304      	str	r3, [sp, #16]
    for( parent = candidates; parent != NULL; parent = parent->next )
 802ebfc:	2d00      	cmp	r5, #0
 802ebfe:	f000 81af 	beq.w	802ef60 <x509_crt_verify_restartable_ca_cb.isra.0+0x514>
 802ec02:	f04f 0a00 	mov.w	sl, #0
 802ec06:	4656      	mov	r6, sl
            (size_t) parent->max_pathlen < 1 + path_cnt - self_cnt )
 802ec08:	9b06      	ldr	r3, [sp, #24]
 802ec0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 802ec0c:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
            (size_t) parent->max_pathlen < 1 + path_cnt - self_cnt )
 802ec10:	1a9b      	subs	r3, r3, r2
 802ec12:	930a      	str	r3, [sp, #40]	; 0x28
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 802ec14:	4658      	mov	r0, fp
 802ec16:	f105 0170 	add.w	r1, r5, #112	; 0x70
 802ec1a:	f7ff fd65 	bl	802e6e8 <x509_name_cmp>
 802ec1e:	4607      	mov	r7, r0
 802ec20:	2800      	cmp	r0, #0
 802ec22:	f040 8195 	bne.w	802ef50 <x509_crt_verify_restartable_ca_cb.isra.0+0x504>
    if( top && parent->version < 3 )
 802ec26:	9b04      	ldr	r3, [sp, #16]
 802ec28:	2b00      	cmp	r3, #0
 802ec2a:	f000 818c 	beq.w	802ef46 <x509_crt_verify_restartable_ca_cb.isra.0+0x4fa>
 802ec2e:	69eb      	ldr	r3, [r5, #28]
 802ec30:	2b02      	cmp	r3, #2
 802ec32:	f300 8188 	bgt.w	802ef46 <x509_crt_verify_restartable_ca_cb.isra.0+0x4fa>
        if( parent->max_pathlen > 0 &&
 802ec36:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 802ec3a:	2b00      	cmp	r3, #0
 802ec3c:	dd03      	ble.n	802ec46 <x509_crt_verify_restartable_ca_cb.isra.0+0x1fa>
 802ec3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802ec40:	4293      	cmp	r3, r2
 802ec42:	f0c0 8185 	bcc.w	802ef50 <x509_crt_verify_restartable_ca_cb.isra.0+0x504>
    md_info = mbedtls_md_info_from_type( child->sig_md );
 802ec46:	f894 0148 	ldrb.w	r0, [r4, #328]	; 0x148
 802ec4a:	f7f7 f801 	bl	8025c50 <mbedtls_md_info_from_type>
 802ec4e:	4680      	mov	r8, r0
    hash_len = mbedtls_md_get_size( md_info );
 802ec50:	f7f7 faf0 	bl	8026234 <mbedtls_md_get_size>
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 802ec54:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
    hash_len = mbedtls_md_get_size( md_info );
 802ec58:	4684      	mov	ip, r0
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 802ec5a:	464b      	mov	r3, r9
 802ec5c:	4640      	mov	r0, r8
    hash_len = mbedtls_md_get_size( md_info );
 802ec5e:	46e0      	mov	r8, ip
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 802ec60:	f7f7 f8d0 	bl	8025e04 <mbedtls_md>
 802ec64:	2800      	cmp	r0, #0
 802ec66:	f040 8189 	bne.w	802ef7c <x509_crt_verify_restartable_ca_cb.isra.0+0x530>
    if( ! mbedtls_pk_can_do( &parent->pk, child->sig_pk ) )
 802ec6a:	f105 02cc 	add.w	r2, r5, #204	; 0xcc
 802ec6e:	4610      	mov	r0, r2
 802ec70:	f894 1149 	ldrb.w	r1, [r4, #329]	; 0x149
 802ec74:	920b      	str	r2, [sp, #44]	; 0x2c
 802ec76:	f7f8 fab5 	bl	80271e4 <mbedtls_pk_can_do>
 802ec7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802ec7c:	2800      	cmp	r0, #0
 802ec7e:	f000 817d 	beq.w	802ef7c <x509_crt_verify_restartable_ca_cb.isra.0+0x530>
    return( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 802ec82:	f8d4 7140 	ldr.w	r7, [r4, #320]	; 0x140
 802ec86:	f894 3148 	ldrb.w	r3, [r4, #328]	; 0x148
 802ec8a:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 802ec8e:	f894 0149 	ldrb.w	r0, [r4, #329]	; 0x149
 802ec92:	9703      	str	r7, [sp, #12]
 802ec94:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
 802ec98:	f8cd 9000 	str.w	r9, [sp]
 802ec9c:	e9cd 8701 	strd	r8, r7, [sp, #4]
 802eca0:	f7f8 faa8 	bl	80271f4 <mbedtls_pk_verify_ext>
        signature_is_good = ret == 0;
 802eca4:	fab0 f780 	clz	r7, r0
        if( top && ! signature_is_good )
 802eca8:	9b04      	ldr	r3, [sp, #16]
        signature_is_good = ret == 0;
 802ecaa:	097f      	lsrs	r7, r7, #5
        if( top && ! signature_is_good )
 802ecac:	b113      	cbz	r3, 802ecb4 <x509_crt_verify_restartable_ca_cb.isra.0+0x268>
 802ecae:	2800      	cmp	r0, #0
 802ecb0:	f040 814e 	bne.w	802ef50 <x509_crt_verify_restartable_ca_cb.isra.0+0x504>
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
 802ecb4:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
 802ecb8:	f7ff fd12 	bl	802e6e0 <mbedtls_x509_time_is_past>
 802ecbc:	2800      	cmp	r0, #0
 802ecbe:	f040 8134 	bne.w	802ef2a <x509_crt_verify_restartable_ca_cb.isra.0+0x4de>
            mbedtls_x509_time_is_future( &parent->valid_from ) )
 802ecc2:	f105 0090 	add.w	r0, r5, #144	; 0x90
 802ecc6:	f7ff fd0d 	bl	802e6e4 <mbedtls_x509_time_is_future>
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
 802ecca:	2800      	cmp	r0, #0
 802eccc:	f040 812d 	bne.w	802ef2a <x509_crt_verify_restartable_ca_cb.isra.0+0x4de>
 802ecd0:	46da      	mov	sl, fp
 802ecd2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802ecd4:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
        if( ver_chain->len != 1 &&
 802ecd8:	9b06      	ldr	r3, [sp, #24]
 802ecda:	2b01      	cmp	r3, #1
 802ecdc:	d00e      	beq.n	802ecfc <x509_crt_verify_restartable_ca_cb.isra.0+0x2b0>
            x509_name_cmp( &child->issuer, &child->subject ) == 0 )
 802ecde:	4650      	mov	r0, sl
 802ece0:	f104 0170 	add.w	r1, r4, #112	; 0x70
 802ece4:	f7ff fd00 	bl	802e6e8 <x509_name_cmp>
        if( ver_chain->len != 1 &&
 802ece8:	b910      	cbnz	r0, 802ecf0 <x509_crt_verify_restartable_ca_cb.isra.0+0x2a4>
            self_cnt++;
 802ecea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802ecec:	3301      	adds	r3, #1
 802ecee:	930f      	str	r3, [sp, #60]	; 0x3c
        if( ! parent_is_trusted &&
 802ecf0:	9b04      	ldr	r3, [sp, #16]
 802ecf2:	b91b      	cbnz	r3, 802ecfc <x509_crt_verify_restartable_ca_cb.isra.0+0x2b0>
 802ecf4:	9b06      	ldr	r3, [sp, #24]
 802ecf6:	2b08      	cmp	r3, #8
 802ecf8:	f200 8100 	bhi.w	802eefc <x509_crt_verify_restartable_ca_cb.isra.0+0x4b0>
        if( ! signature_is_good )
 802ecfc:	b92f      	cbnz	r7, 802ed0a <x509_crt_verify_restartable_ca_cb.isra.0+0x2be>
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 802ecfe:	9b05      	ldr	r3, [sp, #20]
 802ed00:	9a07      	ldr	r2, [sp, #28]
 802ed02:	f043 0308 	orr.w	r3, r3, #8
 802ed06:	9305      	str	r3, [sp, #20]
 802ed08:	6053      	str	r3, [r2, #4]
        if( x509_profile_check_key( profile, &parent->pk ) != 0 )
 802ed0a:	f105 08cc 	add.w	r8, r5, #204	; 0xcc
    const mbedtls_pk_type_t pk_alg = mbedtls_pk_get_type( pk );
 802ed0e:	4640      	mov	r0, r8
 802ed10:	f7f8 fb26 	bl	8027360 <mbedtls_pk_get_type>
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 802ed14:	2801      	cmp	r0, #1
 802ed16:	d002      	beq.n	802ed1e <x509_crt_verify_restartable_ca_cb.isra.0+0x2d2>
 802ed18:	2806      	cmp	r0, #6
 802ed1a:	f040 814b 	bne.w	802efb4 <x509_crt_verify_restartable_ca_cb.isra.0+0x568>
        if( mbedtls_pk_get_bitlen( pk ) >= profile->rsa_min_bitlen )
 802ed1e:	4640      	mov	r0, r8
 802ed20:	f7f8 fb16 	bl	8027350 <mbedtls_pk_get_bitlen>
 802ed24:	68f3      	ldr	r3, [r6, #12]
 802ed26:	4298      	cmp	r0, r3
 802ed28:	f0c0 8144 	bcc.w	802efb4 <x509_crt_verify_restartable_ca_cb.isra.0+0x568>
    while( crl_list != NULL )
 802ed2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802ed2e:	2b00      	cmp	r3, #0
 802ed30:	f000 808e 	beq.w	802ee50 <x509_crt_verify_restartable_ca_cb.isra.0+0x404>
 802ed34:	461f      	mov	r7, r3
            x509_name_cmp( &crl_list->issuer, &ca->subject ) != 0 )
 802ed36:	f105 0370 	add.w	r3, r5, #112	; 0x70
 802ed3a:	ee08 3a10 	vmov	s16, r3
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
 802ed3e:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
        if( crl_list->version == 0 ||
 802ed42:	69bb      	ldr	r3, [r7, #24]
 802ed44:	2b00      	cmp	r3, #0
 802ed46:	f000 80e3 	beq.w	802ef10 <x509_crt_verify_restartable_ca_cb.isra.0+0x4c4>
            x509_name_cmp( &crl_list->issuer, &ca->subject ) != 0 )
 802ed4a:	ee18 1a10 	vmov	r1, s16
 802ed4e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 802ed52:	f7ff fcc9 	bl	802e6e8 <x509_name_cmp>
        if( crl_list->version == 0 ||
 802ed56:	2800      	cmp	r0, #0
 802ed58:	f040 80da 	bne.w	802ef10 <x509_crt_verify_restartable_ca_cb.isra.0+0x4c4>
        if( x509_profile_check_md_alg( profile, crl_list->sig_md ) != 0 )
 802ed5c:	f897 00e8 	ldrb.w	r0, [r7, #232]	; 0xe8
    if( md_alg == MBEDTLS_MD_NONE )
 802ed60:	2800      	cmp	r0, #0
 802ed62:	f000 8134 	beq.w	802efce <x509_crt_verify_restartable_ca_cb.isra.0+0x582>
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 802ed66:	2101      	movs	r1, #1
 802ed68:	6832      	ldr	r2, [r6, #0]
 802ed6a:	1e43      	subs	r3, r0, #1
 802ed6c:	fa01 f303 	lsl.w	r3, r1, r3
 802ed70:	4213      	tst	r3, r2
 802ed72:	f000 812c 	beq.w	802efce <x509_crt_verify_restartable_ca_cb.isra.0+0x582>
        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
 802ed76:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
    if( pk_alg == MBEDTLS_PK_NONE )
 802ed7a:	2b00      	cmp	r3, #0
 802ed7c:	f000 812e 	beq.w	802efdc <x509_crt_verify_restartable_ca_cb.isra.0+0x590>
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 802ed80:	2101      	movs	r1, #1
 802ed82:	6872      	ldr	r2, [r6, #4]
 802ed84:	3b01      	subs	r3, #1
 802ed86:	fa01 f303 	lsl.w	r3, r1, r3
 802ed8a:	4213      	tst	r3, r2
 802ed8c:	f000 8126 	beq.w	802efdc <x509_crt_verify_restartable_ca_cb.isra.0+0x590>
        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
 802ed90:	f7f6 ff5e 	bl	8025c50 <mbedtls_md_info_from_type>
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
 802ed94:	e9d7 2104 	ldrd	r2, r1, [r7, #16]
 802ed98:	4653      	mov	r3, sl
        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
 802ed9a:	4681      	mov	r9, r0
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
 802ed9c:	f7f7 f832 	bl	8025e04 <mbedtls_md>
 802eda0:	2800      	cmp	r0, #0
 802eda2:	f040 810e 	bne.w	802efc2 <x509_crt_verify_restartable_ca_cb.isra.0+0x576>
    const mbedtls_pk_type_t pk_alg = mbedtls_pk_get_type( pk );
 802eda6:	4640      	mov	r0, r8
 802eda8:	f7f8 fada 	bl	8027360 <mbedtls_pk_get_type>
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 802edac:	2801      	cmp	r0, #1
 802edae:	d002      	beq.n	802edb6 <x509_crt_verify_restartable_ca_cb.isra.0+0x36a>
 802edb0:	2806      	cmp	r0, #6
 802edb2:	f040 80b7 	bne.w	802ef24 <x509_crt_verify_restartable_ca_cb.isra.0+0x4d8>
        if( mbedtls_pk_get_bitlen( pk ) >= profile->rsa_min_bitlen )
 802edb6:	4640      	mov	r0, r8
 802edb8:	f7f8 faca 	bl	8027350 <mbedtls_pk_get_bitlen>
 802edbc:	68f3      	ldr	r3, [r6, #12]
 802edbe:	4298      	cmp	r0, r3
 802edc0:	f0c0 80b0 	bcc.w	802ef24 <x509_crt_verify_restartable_ca_cb.isra.0+0x4d8>
        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 802edc4:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 802edc8:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
 802edcc:	4648      	mov	r0, r9
        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 802edce:	9109      	str	r1, [sp, #36]	; 0x24
 802edd0:	f897 90e9 	ldrb.w	r9, [r7, #233]	; 0xe9
 802edd4:	9308      	str	r3, [sp, #32]
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
 802edd6:	f7f7 fa2d 	bl	8026234 <mbedtls_md_get_size>
 802edda:	4602      	mov	r2, r0
        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 802eddc:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 802ede0:	9b08      	ldr	r3, [sp, #32]
 802ede2:	9003      	str	r0, [sp, #12]
 802ede4:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 802ede8:	4648      	mov	r0, r9
 802edea:	e9cd a200 	strd	sl, r2, [sp]
 802edee:	9102      	str	r1, [sp, #8]
 802edf0:	4642      	mov	r2, r8
 802edf2:	9909      	ldr	r1, [sp, #36]	; 0x24
 802edf4:	f7f8 f9fe 	bl	80271f4 <mbedtls_pk_verify_ext>
 802edf8:	2800      	cmp	r0, #0
 802edfa:	f040 80e2 	bne.w	802efc2 <x509_crt_verify_restartable_ca_cb.isra.0+0x576>
        if( mbedtls_x509_time_is_past( &crl_list->next_update ) )
 802edfe:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 802ee02:	f7ff fc6d 	bl	802e6e0 <mbedtls_x509_time_is_past>
 802ee06:	b108      	cbz	r0, 802ee0c <x509_crt_verify_restartable_ca_cb.isra.0+0x3c0>
            flags |= MBEDTLS_X509_BADCRL_EXPIRED;
 802ee08:	f04b 0b20 	orr.w	fp, fp, #32
        if( mbedtls_x509_time_is_future( &crl_list->this_update ) )
 802ee0c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 802ee10:	f7ff fc68 	bl	802e6e4 <mbedtls_x509_time_is_future>
 802ee14:	b108      	cbz	r0, 802ee1a <x509_crt_verify_restartable_ca_cb.isra.0+0x3ce>
            flags |= MBEDTLS_X509_BADCRL_FUTURE;
 802ee16:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
    const mbedtls_x509_crl_entry *cur = &crl->entry;
 802ee1a:	f107 0984 	add.w	r9, r7, #132	; 0x84
    while( cur != NULL && cur->serial.len != 0 )
 802ee1e:	e004      	b.n	802ee2a <x509_crt_verify_restartable_ca_cb.isra.0+0x3de>
        cur = cur->next;
 802ee20:	f8d9 903c 	ldr.w	r9, [r9, #60]	; 0x3c
    while( cur != NULL && cur->serial.len != 0 )
 802ee24:	f1b9 0f00 	cmp.w	r9, #0
 802ee28:	d072      	beq.n	802ef10 <x509_crt_verify_restartable_ca_cb.isra.0+0x4c4>
 802ee2a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802ee2e:	2b00      	cmp	r3, #0
 802ee30:	d06e      	beq.n	802ef10 <x509_crt_verify_restartable_ca_cb.isra.0+0x4c4>
        if( crt->serial.len == cur->serial.len &&
 802ee32:	6a62      	ldr	r2, [r4, #36]	; 0x24
 802ee34:	429a      	cmp	r2, r3
 802ee36:	d1f3      	bne.n	802ee20 <x509_crt_verify_restartable_ca_cb.isra.0+0x3d4>
            memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
 802ee38:	f8d9 1014 	ldr.w	r1, [r9, #20]
 802ee3c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 802ee3e:	f000 ffdd 	bl	802fdfc <memcmp>
        if( crt->serial.len == cur->serial.len &&
 802ee42:	2800      	cmp	r0, #0
 802ee44:	d1ec      	bne.n	802ee20 <x509_crt_verify_restartable_ca_cb.isra.0+0x3d4>
            break;
 802ee46:	9a05      	ldr	r2, [sp, #20]
            flags |= MBEDTLS_X509_BADCERT_REVOKED;
 802ee48:	f04b 0302 	orr.w	r3, fp, #2
 802ee4c:	431a      	orrs	r2, r3
 802ee4e:	9205      	str	r2, [sp, #20]
        *flags |= x509_crt_verifycrl( child, parent, ca_crl, profile );
 802ee50:	9b07      	ldr	r3, [sp, #28]
 802ee52:	9905      	ldr	r1, [sp, #20]
        ver_chain->len++;
 802ee54:	9a06      	ldr	r2, [sp, #24]
        *flags |= x509_crt_verifycrl( child, parent, ca_crl, profile );
 802ee56:	6059      	str	r1, [r3, #4]
    while( 1 ) {
 802ee58:	3308      	adds	r3, #8
        cur = &ver_chain->items[ver_chain->len];
 802ee5a:	462c      	mov	r4, r5
 802ee5c:	f8dd b010 	ldr.w	fp, [sp, #16]
 802ee60:	461d      	mov	r5, r3
        ver_chain->len++;
 802ee62:	9209      	str	r2, [sp, #36]	; 0x24
 802ee64:	9307      	str	r3, [sp, #28]
        cur = &ver_chain->items[ver_chain->len];
 802ee66:	e671      	b.n	802eb4c <x509_crt_verify_restartable_ca_cb.isra.0+0x100>
    if( x509_name_cmp( &crt->issuer, &crt->subject ) != 0 )
 802ee68:	f104 0170 	add.w	r1, r4, #112	; 0x70
 802ee6c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802ee70:	f7ff fc3a 	bl	802e6e8 <x509_name_cmp>
 802ee74:	2800      	cmp	r0, #0
 802ee76:	f47f aeb7 	bne.w	802ebe8 <x509_crt_verify_restartable_ca_cb.isra.0+0x19c>
    for( cur = trust_ca; cur != NULL; cur = cur->next )
 802ee7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802ee7c:	461d      	mov	r5, r3
 802ee7e:	2b00      	cmp	r3, #0
 802ee80:	f43f aeb3 	beq.w	802ebea <x509_crt_verify_restartable_ca_cb.isra.0+0x19e>
        if( crt->raw.len == cur->raw.len &&
 802ee84:	68a7      	ldr	r7, [r4, #8]
 802ee86:	e004      	b.n	802ee92 <x509_crt_verify_restartable_ca_cb.isra.0+0x446>
    for( cur = trust_ca; cur != NULL; cur = cur->next )
 802ee88:	f8d5 5150 	ldr.w	r5, [r5, #336]	; 0x150
 802ee8c:	2d00      	cmp	r5, #0
 802ee8e:	f43f aeab 	beq.w	802ebe8 <x509_crt_verify_restartable_ca_cb.isra.0+0x19c>
        if( crt->raw.len == cur->raw.len &&
 802ee92:	68ab      	ldr	r3, [r5, #8]
 802ee94:	429f      	cmp	r7, r3
 802ee96:	d1f7      	bne.n	802ee88 <x509_crt_verify_restartable_ca_cb.isra.0+0x43c>
            memcmp( crt->raw.p, cur->raw.p, crt->raw.len ) == 0 )
 802ee98:	463a      	mov	r2, r7
 802ee9a:	68e9      	ldr	r1, [r5, #12]
 802ee9c:	68e0      	ldr	r0, [r4, #12]
 802ee9e:	f000 ffad 	bl	802fdfc <memcmp>
        if( crt->raw.len == cur->raw.len &&
 802eea2:	2800      	cmp	r0, #0
 802eea4:	d1f0      	bne.n	802ee88 <x509_crt_verify_restartable_ca_cb.isra.0+0x43c>
    ver_chain.items[0].flags |= ee_flags;
 802eea6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 802eea8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802eeaa:	432b      	orrs	r3, r5
 802eeac:	461d      	mov	r5, r3
 802eeae:	931c      	str	r3, [sp, #112]	; 0x70
    for( i = ver_chain->len; i != 0; --i )
 802eeb0:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 802eeb2:	2b00      	cmp	r3, #0
 802eeb4:	f000 8156 	beq.w	802f164 <x509_crt_verify_restartable_ca_cb.isra.0+0x718>
 802eeb8:	9e06      	ldr	r6, [sp, #24]
 802eeba:	aa1b      	add	r2, sp, #108	; 0x6c
 802eebc:	46ac      	mov	ip, r5
 802eebe:	e9dd 753d 	ldrd	r7, r5, [sp, #244]	; 0xf4
 802eec2:	f8dd 80fc 	ldr.w	r8, [sp, #252]	; 0xfc
 802eec6:	eb02 04c6 	add.w	r4, r2, r6, lsl #3
 802eeca:	e009      	b.n	802eee0 <x509_crt_verify_restartable_ca_cb.isra.0+0x494>
        *flags |= cur_flags;
 802eecc:	683b      	ldr	r3, [r7, #0]
 802eece:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802eed0:	3c08      	subs	r4, #8
 802eed2:	4313      	orrs	r3, r2
 802eed4:	603b      	str	r3, [r7, #0]
    for( i = ver_chain->len; i != 0; --i )
 802eed6:	2e00      	cmp	r6, #0
 802eed8:	f000 80fa 	beq.w	802f0d0 <x509_crt_verify_restartable_ca_cb.isra.0+0x684>
 802eedc:	f854 cc04 	ldr.w	ip, [r4, #-4]
        cur = &ver_chain->items[i-1];
 802eee0:	3e01      	subs	r6, #1
            if( ( ret = f_vrfy( p_vrfy, cur->crt, (int) i-1, &cur_flags ) ) != 0 )
 802eee2:	4632      	mov	r2, r6
 802eee4:	4640      	mov	r0, r8
 802eee6:	f854 1c08 	ldr.w	r1, [r4, #-8]
 802eeea:	ab13      	add	r3, sp, #76	; 0x4c
        cur_flags = cur->flags;
 802eeec:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
            if( ( ret = f_vrfy( p_vrfy, cur->crt, (int) i-1, &cur_flags ) ) != 0 )
 802eef0:	47a8      	blx	r5
 802eef2:	2800      	cmp	r0, #0
 802eef4:	d0ea      	beq.n	802eecc <x509_crt_verify_restartable_ca_cb.isra.0+0x480>
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
 802eef6:	f510 5f1c 	cmn.w	r0, #9984	; 0x2700
 802eefa:	d100      	bne.n	802eefe <x509_crt_verify_restartable_ca_cb.isra.0+0x4b2>
            return( MBEDTLS_ERR_X509_FATAL_ERROR );
 802eefc:	48a1      	ldr	r0, [pc, #644]	; (802f184 <x509_crt_verify_restartable_ca_cb.isra.0+0x738>)
        *flags = (uint32_t) -1;
 802eefe:	f04f 33ff 	mov.w	r3, #4294967295
 802ef02:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 802ef04:	6013      	str	r3, [r2, #0]
}
 802ef06:	b031      	add	sp, #196	; 0xc4
 802ef08:	ecbd 8b02 	vpop	{d8}
 802ef0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        crl_list = crl_list->next;
 802ef10:	f8d7 70f0 	ldr.w	r7, [r7, #240]	; 0xf0
    while( crl_list != NULL )
 802ef14:	2f00      	cmp	r7, #0
 802ef16:	f47f af14 	bne.w	802ed42 <x509_crt_verify_restartable_ca_cb.isra.0+0x2f6>
 802ef1a:	9b05      	ldr	r3, [sp, #20]
 802ef1c:	ea43 030b 	orr.w	r3, r3, fp
 802ef20:	9305      	str	r3, [sp, #20]
 802ef22:	e795      	b.n	802ee50 <x509_crt_verify_restartable_ca_cb.isra.0+0x404>
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 802ef24:	f44b 3b80 	orr.w	fp, fp, #65536	; 0x10000
 802ef28:	e74c      	b.n	802edc4 <x509_crt_verify_restartable_ca_cb.isra.0+0x378>
            if( fallback_parent == NULL )
 802ef2a:	b326      	cbz	r6, 802ef76 <x509_crt_verify_restartable_ca_cb.isra.0+0x52a>
    for( parent = candidates; parent != NULL; parent = parent->next )
 802ef2c:	f8d5 5150 	ldr.w	r5, [r5, #336]	; 0x150
 802ef30:	2d00      	cmp	r5, #0
 802ef32:	f47f ae6f 	bne.w	802ec14 <x509_crt_verify_restartable_ca_cb.isra.0+0x1c8>
 802ef36:	46b0      	mov	r8, r6
 802ef38:	4657      	mov	r7, sl
 802ef3a:	4645      	mov	r5, r8
 802ef3c:	46da      	mov	sl, fp
 802ef3e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802ef40:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 802ef44:	e6c8      	b.n	802ecd8 <x509_crt_verify_restartable_ca_cb.isra.0+0x28c>
    if( need_ca_bit && ! parent->ca_istrue )
 802ef46:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
 802ef4a:	2b00      	cmp	r3, #0
 802ef4c:	f47f ae73 	bne.w	802ec36 <x509_crt_verify_restartable_ca_cb.isra.0+0x1ea>
    for( parent = candidates; parent != NULL; parent = parent->next )
 802ef50:	f8d5 5150 	ldr.w	r5, [r5, #336]	; 0x150
 802ef54:	2d00      	cmp	r5, #0
 802ef56:	f47f ae5d 	bne.w	802ec14 <x509_crt_verify_restartable_ca_cb.isra.0+0x1c8>
        if( *parent != NULL || *parent_is_trusted == 0 )
 802ef5a:	2e00      	cmp	r6, #0
 802ef5c:	f040 8108 	bne.w	802f170 <x509_crt_verify_restartable_ca_cb.isra.0+0x724>
 802ef60:	9b08      	ldr	r3, [sp, #32]
 802ef62:	2b01      	cmp	r3, #1
 802ef64:	f000 80c9 	beq.w	802f0fa <x509_crt_verify_restartable_ca_cb.isra.0+0x6ae>
        search_list = *parent_is_trusted ? trust_ca : child->next;
 802ef68:	2300      	movs	r3, #0
 802ef6a:	9304      	str	r3, [sp, #16]
 802ef6c:	2301      	movs	r3, #1
 802ef6e:	f8d4 5150 	ldr.w	r5, [r4, #336]	; 0x150
 802ef72:	9308      	str	r3, [sp, #32]
 802ef74:	e642      	b.n	802ebfc <x509_crt_verify_restartable_ca_cb.isra.0+0x1b0>
            if( fallback_parent == NULL )
 802ef76:	46ba      	mov	sl, r7
 802ef78:	462e      	mov	r6, r5
 802ef7a:	e7d7      	b.n	802ef2c <x509_crt_verify_restartable_ca_cb.isra.0+0x4e0>
        if( top && ! signature_is_good )
 802ef7c:	9b04      	ldr	r3, [sp, #16]
 802ef7e:	2b00      	cmp	r3, #0
 802ef80:	f43f ae98 	beq.w	802ecb4 <x509_crt_verify_restartable_ca_cb.isra.0+0x268>
    for( parent = candidates; parent != NULL; parent = parent->next )
 802ef84:	f8d5 5150 	ldr.w	r5, [r5, #336]	; 0x150
 802ef88:	2d00      	cmp	r5, #0
 802ef8a:	f47f ae43 	bne.w	802ec14 <x509_crt_verify_restartable_ca_cb.isra.0+0x1c8>
 802ef8e:	e7e4      	b.n	802ef5a <x509_crt_verify_restartable_ca_cb.isra.0+0x50e>
 802ef90:	f44f 4342 	mov.w	r3, #49664	; 0xc200
 802ef94:	9308      	str	r3, [sp, #32]
 802ef96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 802ef9a:	f44f 4a02 	mov.w	sl, #33280	; 0x8200
 802ef9e:	f44f 4984 	mov.w	r9, #16896	; 0x4200
 802efa2:	f44f 4840 	mov.w	r8, #49152	; 0xc000
 802efa6:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 802efaa:	f44f 7700 	mov.w	r7, #512	; 0x200
 802efae:	9005      	str	r0, [sp, #20]
 802efb0:	9304      	str	r3, [sp, #16]
 802efb2:	e5eb      	b.n	802eb8c <x509_crt_verify_restartable_ca_cb.isra.0+0x140>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 802efb4:	9b05      	ldr	r3, [sp, #20]
 802efb6:	9a07      	ldr	r2, [sp, #28]
 802efb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802efbc:	9305      	str	r3, [sp, #20]
 802efbe:	6053      	str	r3, [r2, #4]
 802efc0:	e6b4      	b.n	802ed2c <x509_crt_verify_restartable_ca_cb.isra.0+0x2e0>
            break;
 802efc2:	9a05      	ldr	r2, [sp, #20]
            flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
 802efc4:	f04b 0310 	orr.w	r3, fp, #16
 802efc8:	431a      	orrs	r2, r3
 802efca:	9205      	str	r2, [sp, #20]
            break;
 802efcc:	e740      	b.n	802ee50 <x509_crt_verify_restartable_ca_cb.isra.0+0x404>
        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
 802efce:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;
 802efd2:	f44b 3b00 	orr.w	fp, fp, #131072	; 0x20000
    if( pk_alg == MBEDTLS_PK_NONE )
 802efd6:	2b00      	cmp	r3, #0
 802efd8:	f47f aed2 	bne.w	802ed80 <x509_crt_verify_restartable_ca_cb.isra.0+0x334>
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;
 802efdc:	f44b 2b80 	orr.w	fp, fp, #262144	; 0x40000
 802efe0:	e6d6      	b.n	802ed90 <x509_crt_verify_restartable_ca_cb.isra.0+0x344>
 802efe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802efe4:	00db      	lsls	r3, r3, #3
    ver_chain.items[0].flags |= ee_flags;
 802efe6:	a930      	add	r1, sp, #192	; 0xc0
 802efe8:	440b      	add	r3, r1
 802efea:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 802efec:	9911      	ldr	r1, [sp, #68]	; 0x44
 802efee:	430a      	orrs	r2, r1
 802eff0:	921c      	str	r2, [sp, #112]	; 0x70
    for( i = ver_chain->len; i != 0; --i )
 802eff2:	f853 5c50 	ldr.w	r5, [r3, #-80]
 802eff6:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 802eff8:	2b00      	cmp	r3, #0
 802effa:	f47f af5d 	bne.w	802eeb8 <x509_crt_verify_restartable_ca_cb.isra.0+0x46c>
        *flags |= cur_flags;
 802effe:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 802f000:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 802f002:	681b      	ldr	r3, [r3, #0]
 802f004:	432b      	orrs	r3, r5
 802f006:	6013      	str	r3, [r2, #0]
    for( i = ver_chain->len; i != 0; --i )
 802f008:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802f00a:	2a00      	cmp	r2, #0
 802f00c:	d060      	beq.n	802f0d0 <x509_crt_verify_restartable_ca_cb.isra.0+0x684>
 802f00e:	1e51      	subs	r1, r2, #1
        *flags |= cur_flags;
 802f010:	aa30      	add	r2, sp, #192	; 0xc0
 802f012:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 802f016:	f852 2c50 	ldr.w	r2, [r2, #-80]
 802f01a:	4313      	orrs	r3, r2
 802f01c:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 802f01e:	6013      	str	r3, [r2, #0]
    for( i = ver_chain->len; i != 0; --i )
 802f020:	2900      	cmp	r1, #0
 802f022:	d055      	beq.n	802f0d0 <x509_crt_verify_restartable_ca_cb.isra.0+0x684>
 802f024:	9a09      	ldr	r2, [sp, #36]	; 0x24
        *flags |= cur_flags;
 802f026:	a930      	add	r1, sp, #192	; 0xc0
 802f028:	3a02      	subs	r2, #2
 802f02a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 802f02e:	f851 1c50 	ldr.w	r1, [r1, #-80]
 802f032:	430b      	orrs	r3, r1
 802f034:	993d      	ldr	r1, [sp, #244]	; 0xf4
 802f036:	600b      	str	r3, [r1, #0]
    for( i = ver_chain->len; i != 0; --i )
 802f038:	2a00      	cmp	r2, #0
 802f03a:	d049      	beq.n	802f0d0 <x509_crt_verify_restartable_ca_cb.isra.0+0x684>
 802f03c:	9a09      	ldr	r2, [sp, #36]	; 0x24
        *flags |= cur_flags;
 802f03e:	a930      	add	r1, sp, #192	; 0xc0
 802f040:	3a03      	subs	r2, #3
 802f042:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 802f046:	f851 1c50 	ldr.w	r1, [r1, #-80]
 802f04a:	430b      	orrs	r3, r1
 802f04c:	993d      	ldr	r1, [sp, #244]	; 0xf4
 802f04e:	600b      	str	r3, [r1, #0]
    for( i = ver_chain->len; i != 0; --i )
 802f050:	2a00      	cmp	r2, #0
 802f052:	d03d      	beq.n	802f0d0 <x509_crt_verify_restartable_ca_cb.isra.0+0x684>
 802f054:	9a09      	ldr	r2, [sp, #36]	; 0x24
        *flags |= cur_flags;
 802f056:	a930      	add	r1, sp, #192	; 0xc0
 802f058:	3a04      	subs	r2, #4
 802f05a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 802f05e:	f851 1c50 	ldr.w	r1, [r1, #-80]
 802f062:	430b      	orrs	r3, r1
 802f064:	993d      	ldr	r1, [sp, #244]	; 0xf4
 802f066:	600b      	str	r3, [r1, #0]
    for( i = ver_chain->len; i != 0; --i )
 802f068:	2a00      	cmp	r2, #0
 802f06a:	d031      	beq.n	802f0d0 <x509_crt_verify_restartable_ca_cb.isra.0+0x684>
 802f06c:	9a09      	ldr	r2, [sp, #36]	; 0x24
        *flags |= cur_flags;
 802f06e:	a930      	add	r1, sp, #192	; 0xc0
 802f070:	3a05      	subs	r2, #5
 802f072:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 802f076:	f851 1c50 	ldr.w	r1, [r1, #-80]
 802f07a:	430b      	orrs	r3, r1
 802f07c:	993d      	ldr	r1, [sp, #244]	; 0xf4
 802f07e:	600b      	str	r3, [r1, #0]
    for( i = ver_chain->len; i != 0; --i )
 802f080:	b332      	cbz	r2, 802f0d0 <x509_crt_verify_restartable_ca_cb.isra.0+0x684>
 802f082:	9a09      	ldr	r2, [sp, #36]	; 0x24
        *flags |= cur_flags;
 802f084:	a930      	add	r1, sp, #192	; 0xc0
 802f086:	3a06      	subs	r2, #6
 802f088:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 802f08c:	f851 1c50 	ldr.w	r1, [r1, #-80]
 802f090:	430b      	orrs	r3, r1
 802f092:	993d      	ldr	r1, [sp, #244]	; 0xf4
 802f094:	600b      	str	r3, [r1, #0]
    for( i = ver_chain->len; i != 0; --i )
 802f096:	b1da      	cbz	r2, 802f0d0 <x509_crt_verify_restartable_ca_cb.isra.0+0x684>
 802f098:	9a09      	ldr	r2, [sp, #36]	; 0x24
        *flags |= cur_flags;
 802f09a:	a930      	add	r1, sp, #192	; 0xc0
 802f09c:	3a07      	subs	r2, #7
 802f09e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 802f0a2:	f851 1c50 	ldr.w	r1, [r1, #-80]
 802f0a6:	430b      	orrs	r3, r1
 802f0a8:	993d      	ldr	r1, [sp, #244]	; 0xf4
 802f0aa:	600b      	str	r3, [r1, #0]
    for( i = ver_chain->len; i != 0; --i )
 802f0ac:	b182      	cbz	r2, 802f0d0 <x509_crt_verify_restartable_ca_cb.isra.0+0x684>
 802f0ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802f0b0:	f1a2 0108 	sub.w	r1, r2, #8
        *flags |= cur_flags;
 802f0b4:	aa30      	add	r2, sp, #192	; 0xc0
 802f0b6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 802f0ba:	f852 2c50 	ldr.w	r2, [r2, #-80]
 802f0be:	431a      	orrs	r2, r3
 802f0c0:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 802f0c2:	601a      	str	r2, [r3, #0]
    for( i = ver_chain->len; i != 0; --i )
 802f0c4:	4613      	mov	r3, r2
 802f0c6:	b119      	cbz	r1, 802f0d0 <x509_crt_verify_restartable_ca_cb.isra.0+0x684>
        *flags |= cur_flags;
 802f0c8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802f0ca:	4313      	orrs	r3, r2
 802f0cc:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 802f0ce:	6013      	str	r3, [r2, #0]
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );
 802f0d0:	2b00      	cmp	r3, #0
 802f0d2:	482d      	ldr	r0, [pc, #180]	; (802f188 <x509_crt_verify_restartable_ca_cb.isra.0+0x73c>)
 802f0d4:	bf08      	it	eq
 802f0d6:	2000      	moveq	r0, #0
}
 802f0d8:	b031      	add	sp, #196	; 0xc4
 802f0da:	ecbd 8b02 	vpop	{d8}
 802f0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 802f0e2:	9b07      	ldr	r3, [sp, #28]
 802f0e4:	9505      	str	r5, [sp, #20]
 802f0e6:	605d      	str	r5, [r3, #4]
 802f0e8:	e57a      	b.n	802ebe0 <x509_crt_verify_restartable_ca_cb.isra.0+0x194>
            *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 802f0ea:	9b04      	ldr	r3, [sp, #16]
 802f0ec:	9a07      	ldr	r2, [sp, #28]
 802f0ee:	4645      	mov	r5, r8
 802f0f0:	9305      	str	r3, [sp, #20]
 802f0f2:	6053      	str	r3, [r2, #4]
 802f0f4:	e567      	b.n	802ebc6 <x509_crt_verify_restartable_ca_cb.isra.0+0x17a>
        ee_flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 802f0f6:	9411      	str	r4, [sp, #68]	; 0x44
 802f0f8:	e520      	b.n	802eb3c <x509_crt_verify_restartable_ca_cb.isra.0+0xf0>
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 802f0fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 802f0fc:	9b05      	ldr	r3, [sp, #20]
 802f0fe:	a830      	add	r0, sp, #192	; 0xc0
 802f100:	f043 0308 	orr.w	r3, r3, #8
 802f104:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 802f108:	f842 3c50 	str.w	r3, [r2, #-80]
 802f10c:	00cb      	lsls	r3, r1, #3
 802f10e:	e76a      	b.n	802efe6 <x509_crt_verify_restartable_ca_cb.isra.0+0x59a>
        for( name = &crt->subject; name != NULL; name = name->next )
 802f110:	f10a 0470 	add.w	r4, sl, #112	; 0x70
 802f114:	e003      	b.n	802f11e <x509_crt_verify_restartable_ca_cb.isra.0+0x6d2>
 802f116:	69a4      	ldr	r4, [r4, #24]
 802f118:	2c00      	cmp	r4, #0
 802f11a:	f43f acd9 	beq.w	802ead0 <x509_crt_verify_restartable_ca_cb.isra.0+0x84>
            if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 &&
 802f11e:	6863      	ldr	r3, [r4, #4]
 802f120:	2b03      	cmp	r3, #3
 802f122:	d1f8      	bne.n	802f116 <x509_crt_verify_restartable_ca_cb.isra.0+0x6ca>
 802f124:	68a3      	ldr	r3, [r4, #8]
 802f126:	7818      	ldrb	r0, [r3, #0]
 802f128:	2855      	cmp	r0, #85	; 0x55
 802f12a:	d1f4      	bne.n	802f116 <x509_crt_verify_restartable_ca_cb.isra.0+0x6ca>
 802f12c:	7858      	ldrb	r0, [r3, #1]
 802f12e:	3301      	adds	r3, #1
 802f130:	2804      	cmp	r0, #4
 802f132:	d1f0      	bne.n	802f116 <x509_crt_verify_restartable_ca_cb.isra.0+0x6ca>
 802f134:	785b      	ldrb	r3, [r3, #1]
 802f136:	2b03      	cmp	r3, #3
 802f138:	d1ed      	bne.n	802f116 <x509_crt_verify_restartable_ca_cb.isra.0+0x6ca>
                x509_crt_check_cn( &name->val, cn, cn_len ) == 0 )
 802f13a:	463a      	mov	r2, r7
 802f13c:	4629      	mov	r1, r5
 802f13e:	f104 000c 	add.w	r0, r4, #12
 802f142:	f7ff fb2b 	bl	802e79c <x509_crt_check_cn>
            if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 &&
 802f146:	2800      	cmp	r0, #0
 802f148:	d1e5      	bne.n	802f116 <x509_crt_verify_restartable_ca_cb.isra.0+0x6ca>
 802f14a:	f44f 38c0 	mov.w	r8, #98304	; 0x18000
 802f14e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 802f152:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    ee_flags = 0;
 802f156:	9011      	str	r0, [sp, #68]	; 0x44
 802f158:	e4cd      	b.n	802eaf6 <x509_crt_verify_restartable_ca_cb.isra.0+0xaa>
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
 802f15a:	480c      	ldr	r0, [pc, #48]	; (802f18c <x509_crt_verify_restartable_ca_cb.isra.0+0x740>)
 802f15c:	e6cf      	b.n	802eefe <x509_crt_verify_restartable_ca_cb.isra.0+0x4b2>
 802f15e:	4644      	mov	r4, r8
        ee_flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 802f160:	9511      	str	r5, [sp, #68]	; 0x44
 802f162:	e4dc      	b.n	802eb1e <x509_crt_verify_restartable_ca_cb.isra.0+0xd2>
        *flags |= cur_flags;
 802f164:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 802f166:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 802f168:	681b      	ldr	r3, [r3, #0]
 802f16a:	432b      	orrs	r3, r5
 802f16c:	6013      	str	r3, [r2, #0]
    for( i = ver_chain->len; i != 0; --i )
 802f16e:	e7af      	b.n	802f0d0 <x509_crt_verify_restartable_ca_cb.isra.0+0x684>
 802f170:	46b0      	mov	r8, r6
 802f172:	4653      	mov	r3, sl
 802f174:	4645      	mov	r5, r8
 802f176:	46da      	mov	sl, fp
 802f178:	461f      	mov	r7, r3
 802f17a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802f17c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 802f180:	e5aa      	b.n	802ecd8 <x509_crt_verify_restartable_ca_cb.isra.0+0x28c>
 802f182:	bf00      	nop
 802f184:	ffffd000 	.word	0xffffd000
 802f188:	ffffd900 	.word	0xffffd900
 802f18c:	ffffd800 	.word	0xffffd800

0802f190 <x509_crt_parse_der_core>:
{
 802f190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f194:	ed2d 8b02 	vpush	{d8}
    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
 802f198:	2500      	movs	r5, #0
{
 802f19a:	b0a3      	sub	sp, #140	; 0x8c
    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
 802f19c:	e9cd 550d 	strd	r5, r5, [sp, #52]	; 0x34
    memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
 802f1a0:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
    memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
 802f1a4:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
 802f1a8:	950c      	str	r5, [sp, #48]	; 0x30
    memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
 802f1aa:	950f      	str	r5, [sp, #60]	; 0x3c
    memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
 802f1ac:	9512      	str	r5, [sp, #72]	; 0x48
    if( crt == NULL || buf == NULL )
 802f1ae:	2800      	cmp	r0, #0
 802f1b0:	f000 8157 	beq.w	802f462 <x509_crt_parse_der_core+0x2d2>
 802f1b4:	460f      	mov	r7, r1
 802f1b6:	2900      	cmp	r1, #0
 802f1b8:	f000 8153 	beq.w	802f462 <x509_crt_parse_der_core+0x2d2>
    p = (unsigned char*) buf;
 802f1bc:	4616      	mov	r6, r2
 802f1be:	4698      	mov	r8, r3
 802f1c0:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 802f1c2:	4411      	add	r1, r2
 802f1c4:	2330      	movs	r3, #48	; 0x30
 802f1c6:	aa05      	add	r2, sp, #20
 802f1c8:	a806      	add	r0, sp, #24
    len = buflen;
 802f1ca:	e9cd 6705 	strd	r6, r7, [sp, #20]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 802f1ce:	f7f1 f939 	bl	8020444 <mbedtls_asn1_get_tag>
 802f1d2:	2800      	cmp	r0, #0
 802f1d4:	f040 80ff 	bne.w	802f3d6 <x509_crt_parse_der_core+0x246>
    end = crt_end = p + len;
 802f1d8:	e9dd 9305 	ldrd	r9, r3, [sp, #20]
 802f1dc:	eb03 0609 	add.w	r6, r3, r9
    crt->raw.len = crt_end - buf;
 802f1e0:	1bf5      	subs	r5, r6, r7
 802f1e2:	60a5      	str	r5, [r4, #8]
    if( make_copy != 0 )
 802f1e4:	f1b8 0f00 	cmp.w	r8, #0
 802f1e8:	f040 8100 	bne.w	802f3ec <x509_crt_parse_der_core+0x25c>
        crt->raw.p = (unsigned char*) buf;
 802f1ec:	60e7      	str	r7, [r4, #12]
        crt->own_buffer = 0;
 802f1ee:	f8c4 8000 	str.w	r8, [r4]
    crt->tbs.p = p;
 802f1f2:	61a3      	str	r3, [r4, #24]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 802f1f4:	4631      	mov	r1, r6
 802f1f6:	2330      	movs	r3, #48	; 0x30
 802f1f8:	aa05      	add	r2, sp, #20
 802f1fa:	a806      	add	r0, sp, #24
 802f1fc:	f7f1 f922 	bl	8020444 <mbedtls_asn1_get_tag>
 802f200:	4605      	mov	r5, r0
 802f202:	2800      	cmp	r0, #0
 802f204:	f040 80e7 	bne.w	802f3d6 <x509_crt_parse_der_core+0x246>
    end = p + len;
 802f208:	e9dd 2705 	ldrd	r2, r7, [sp, #20]
    crt->tbs.len = end - crt->tbs.p;
 802f20c:	69a3      	ldr	r3, [r4, #24]
    end = p + len;
 802f20e:	4417      	add	r7, r2
    crt->tbs.len = end - crt->tbs.p;
 802f210:	1afb      	subs	r3, r7, r3
 802f212:	6163      	str	r3, [r4, #20]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 802f214:	4639      	mov	r1, r7
 802f216:	23a0      	movs	r3, #160	; 0xa0
 802f218:	aa18      	add	r2, sp, #96	; 0x60
 802f21a:	a806      	add	r0, sp, #24
 802f21c:	f7f1 f912 	bl	8020444 <mbedtls_asn1_get_tag>
 802f220:	b178      	cbz	r0, 802f242 <x509_crt_parse_der_core+0xb2>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 802f222:	f110 0f62 	cmn.w	r0, #98	; 0x62
 802f226:	f000 80fa 	beq.w	802f41e <x509_crt_parse_der_core+0x28e>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 802f22a:	f5a0 5506 	sub.w	r5, r0, #8576	; 0x2180
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 802f22e:	b1cd      	cbz	r5, 802f264 <x509_crt_parse_der_core+0xd4>
    if( crt == NULL )
 802f230:	4620      	mov	r0, r4
 802f232:	f7ff fb95 	bl	802e960 <mbedtls_x509_crt_free.part.0>
}
 802f236:	4628      	mov	r0, r5
 802f238:	b023      	add	sp, #140	; 0x8c
 802f23a:	ecbd 8b02 	vpop	{d8}
 802f23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    end = *p + len;
 802f242:	9906      	ldr	r1, [sp, #24]
 802f244:	9b18      	ldr	r3, [sp, #96]	; 0x60
    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 802f246:	f104 021c 	add.w	r2, r4, #28
    end = *p + len;
 802f24a:	eb01 0803 	add.w	r8, r1, r3
    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 802f24e:	4641      	mov	r1, r8
 802f250:	a806      	add	r0, sp, #24
 802f252:	f7f1 f9a5 	bl	80205a0 <mbedtls_asn1_get_int>
 802f256:	2800      	cmp	r0, #0
 802f258:	f040 80de 	bne.w	802f418 <x509_crt_parse_der_core+0x288>
    if( *p != end )
 802f25c:	9b06      	ldr	r3, [sp, #24]
 802f25e:	4598      	cmp	r8, r3
 802f260:	f040 80df 	bne.w	802f422 <x509_crt_parse_der_core+0x292>
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 802f264:	4639      	mov	r1, r7
 802f266:	f104 0220 	add.w	r2, r4, #32
 802f26a:	a806      	add	r0, sp, #24
 802f26c:	f7fe ffb0 	bl	802e1d0 <mbedtls_x509_get_serial>
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 802f270:	4605      	mov	r5, r0
 802f272:	2800      	cmp	r0, #0
 802f274:	d1dc      	bne.n	802f230 <x509_crt_parse_der_core+0xa0>
        ( ret = mbedtls_x509_get_alg(      &p, end, &crt->sig_oid,
 802f276:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 802f27a:	4642      	mov	r2, r8
 802f27c:	4639      	mov	r1, r7
 802f27e:	ab0c      	add	r3, sp, #48	; 0x30
 802f280:	a806      	add	r0, sp, #24
 802f282:	f7fe ffcb 	bl	802e21c <mbedtls_x509_get_alg>
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 802f286:	4605      	mov	r5, r0
 802f288:	2800      	cmp	r0, #0
 802f28a:	d1d1      	bne.n	802f230 <x509_crt_parse_der_core+0xa0>
    if( crt->version < 0 || crt->version > 2 )
 802f28c:	69e3      	ldr	r3, [r4, #28]
 802f28e:	2b02      	cmp	r3, #2
 802f290:	f200 8270 	bhi.w	802f774 <x509_crt_parse_der_core+0x5e4>
    crt->version++;
 802f294:	3301      	adds	r3, #1
    if( ( ret = mbedtls_x509_get_sig_alg( &crt->sig_oid, &sig_params1,
 802f296:	f504 72a6 	add.w	r2, r4, #332	; 0x14c
    crt->version++;
 802f29a:	61e3      	str	r3, [r4, #28]
    if( ( ret = mbedtls_x509_get_sig_alg( &crt->sig_oid, &sig_params1,
 802f29c:	4640      	mov	r0, r8
 802f29e:	9200      	str	r2, [sp, #0]
 802f2a0:	a90c      	add	r1, sp, #48	; 0x30
 802f2a2:	f204 1349 	addw	r3, r4, #329	; 0x149
 802f2a6:	f504 72a4 	add.w	r2, r4, #328	; 0x148
 802f2aa:	f7ff f9d1 	bl	802e650 <mbedtls_x509_get_sig_alg>
 802f2ae:	4605      	mov	r5, r0
 802f2b0:	2800      	cmp	r0, #0
 802f2b2:	d1bd      	bne.n	802f230 <x509_crt_parse_der_core+0xa0>
    crt->issuer_raw.p = p;
 802f2b4:	9a06      	ldr	r2, [sp, #24]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 802f2b6:	2330      	movs	r3, #48	; 0x30
    crt->issuer_raw.p = p;
 802f2b8:	6422      	str	r2, [r4, #64]	; 0x40
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 802f2ba:	4639      	mov	r1, r7
 802f2bc:	aa05      	add	r2, sp, #20
 802f2be:	a806      	add	r0, sp, #24
 802f2c0:	f7f1 f8c0 	bl	8020444 <mbedtls_asn1_get_tag>
 802f2c4:	4605      	mov	r5, r0
 802f2c6:	2800      	cmp	r0, #0
 802f2c8:	f040 8085 	bne.w	802f3d6 <x509_crt_parse_der_core+0x246>
    if( ( ret = mbedtls_x509_get_name( &p, p + len, &crt->issuer ) ) != 0 )
 802f2cc:	e9dd 3105 	ldrd	r3, r1, [sp, #20]
 802f2d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 802f2d4:	4419      	add	r1, r3
 802f2d6:	a806      	add	r0, sp, #24
 802f2d8:	f7fe ffa8 	bl	802e22c <mbedtls_x509_get_name>
 802f2dc:	4605      	mov	r5, r0
 802f2de:	2800      	cmp	r0, #0
 802f2e0:	d1a6      	bne.n	802f230 <x509_crt_parse_der_core+0xa0>
    crt->issuer_raw.len = p - crt->issuer_raw.p;
 802f2e2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802f2e4:	9a06      	ldr	r2, [sp, #24]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 802f2e6:	2330      	movs	r3, #48	; 0x30
    crt->issuer_raw.len = p - crt->issuer_raw.p;
 802f2e8:	1a52      	subs	r2, r2, r1
 802f2ea:	63e2      	str	r2, [r4, #60]	; 0x3c
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 802f2ec:	4639      	mov	r1, r7
 802f2ee:	aa18      	add	r2, sp, #96	; 0x60
 802f2f0:	a806      	add	r0, sp, #24
 802f2f2:	f7f1 f8a7 	bl	8020444 <mbedtls_asn1_get_tag>
 802f2f6:	2800      	cmp	r0, #0
 802f2f8:	f000 8095 	beq.w	802f426 <x509_crt_parse_der_core+0x296>
    if( ( ret = x509_get_dates( &p, end, &crt->valid_from,
 802f2fc:	f5b0 5510 	subs.w	r5, r0, #9216	; 0x2400
 802f300:	d196      	bne.n	802f230 <x509_crt_parse_der_core+0xa0>
 802f302:	9b06      	ldr	r3, [sp, #24]
    crt->subject_raw.p = p;
 802f304:	64e3      	str	r3, [r4, #76]	; 0x4c
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 802f306:	4639      	mov	r1, r7
 802f308:	2330      	movs	r3, #48	; 0x30
 802f30a:	aa05      	add	r2, sp, #20
 802f30c:	a806      	add	r0, sp, #24
 802f30e:	f7f1 f899 	bl	8020444 <mbedtls_asn1_get_tag>
 802f312:	4605      	mov	r5, r0
 802f314:	2800      	cmp	r0, #0
 802f316:	d15e      	bne.n	802f3d6 <x509_crt_parse_der_core+0x246>
    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
 802f318:	9b05      	ldr	r3, [sp, #20]
 802f31a:	b153      	cbz	r3, 802f332 <x509_crt_parse_der_core+0x1a2>
 802f31c:	9906      	ldr	r1, [sp, #24]
 802f31e:	f104 0270 	add.w	r2, r4, #112	; 0x70
 802f322:	4419      	add	r1, r3
 802f324:	a806      	add	r0, sp, #24
 802f326:	f7fe ff81 	bl	802e22c <mbedtls_x509_get_name>
 802f32a:	4605      	mov	r5, r0
 802f32c:	2800      	cmp	r0, #0
 802f32e:	f47f af7f 	bne.w	802f230 <x509_crt_parse_der_core+0xa0>
    crt->subject_raw.len = p - crt->subject_raw.p;
 802f332:	9b06      	ldr	r3, [sp, #24]
 802f334:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    crt->pk_raw.p = p;
 802f336:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    crt->subject_raw.len = p - crt->subject_raw.p;
 802f33a:	1a9b      	subs	r3, r3, r2
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
 802f33c:	4639      	mov	r1, r7
    crt->subject_raw.len = p - crt->subject_raw.p;
 802f33e:	64a3      	str	r3, [r4, #72]	; 0x48
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
 802f340:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
 802f344:	a806      	add	r0, sp, #24
 802f346:	f7f8 fae1 	bl	802790c <mbedtls_pk_parse_subpubkey>
 802f34a:	4605      	mov	r5, r0
 802f34c:	2800      	cmp	r0, #0
 802f34e:	f47f af6f 	bne.w	802f230 <x509_crt_parse_der_core+0xa0>
    if( crt->version == 2 || crt->version == 3 )
 802f352:	69e3      	ldr	r3, [r4, #28]
    crt->pk_raw.len = p - crt->pk_raw.p;
 802f354:	9a06      	ldr	r2, [sp, #24]
 802f356:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
    if( crt->version == 2 || crt->version == 3 )
 802f35a:	3b02      	subs	r3, #2
    crt->pk_raw.len = p - crt->pk_raw.p;
 802f35c:	1a51      	subs	r1, r2, r1
    if( crt->version == 2 || crt->version == 3 )
 802f35e:	2b01      	cmp	r3, #1
    crt->pk_raw.len = p - crt->pk_raw.p;
 802f360:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
    if( crt->version == 2 || crt->version == 3 )
 802f364:	d97f      	bls.n	802f466 <x509_crt_parse_der_core+0x2d6>
    if( p != end )
 802f366:	4297      	cmp	r7, r2
 802f368:	d130      	bne.n	802f3cc <x509_crt_parse_der_core+0x23c>
    if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
 802f36a:	4631      	mov	r1, r6
 802f36c:	ab0f      	add	r3, sp, #60	; 0x3c
 802f36e:	aa12      	add	r2, sp, #72	; 0x48
 802f370:	a806      	add	r0, sp, #24
 802f372:	f7fe ff53 	bl	802e21c <mbedtls_x509_get_alg>
 802f376:	4605      	mov	r5, r0
 802f378:	2800      	cmp	r0, #0
 802f37a:	f47f af59 	bne.w	802f230 <x509_crt_parse_der_core+0xa0>
    if( crt->sig_oid.len != sig_oid2.len ||
 802f37e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 802f380:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802f382:	429a      	cmp	r2, r3
 802f384:	f040 8214 	bne.w	802f7b0 <x509_crt_parse_der_core+0x620>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 802f388:	9914      	ldr	r1, [sp, #80]	; 0x50
 802f38a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802f38c:	f000 fd36 	bl	802fdfc <memcmp>
    if( crt->sig_oid.len != sig_oid2.len ||
 802f390:	2800      	cmp	r0, #0
 802f392:	f040 820d 	bne.w	802f7b0 <x509_crt_parse_der_core+0x620>
        sig_params1.len != sig_params2.len ||
 802f396:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 802f398:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802f39a:	429a      	cmp	r2, r3
 802f39c:	f040 8208 	bne.w	802f7b0 <x509_crt_parse_der_core+0x620>
        sig_params1.len != sig_params2.len ||
 802f3a0:	b132      	cbz	r2, 802f3b0 <x509_crt_parse_der_core+0x220>
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
 802f3a2:	9911      	ldr	r1, [sp, #68]	; 0x44
 802f3a4:	980e      	ldr	r0, [sp, #56]	; 0x38
 802f3a6:	f000 fd29 	bl	802fdfc <memcmp>
        ( sig_params1.len != 0 &&
 802f3aa:	2800      	cmp	r0, #0
 802f3ac:	f040 8200 	bne.w	802f7b0 <x509_crt_parse_der_core+0x620>
    if( ( ret = mbedtls_x509_get_sig( &p, end, &crt->sig ) ) != 0 )
 802f3b0:	4631      	mov	r1, r6
 802f3b2:	a806      	add	r0, sp, #24
 802f3b4:	f504 729e 	add.w	r2, r4, #316	; 0x13c
 802f3b8:	f7ff f92a 	bl	802e610 <mbedtls_x509_get_sig>
 802f3bc:	4605      	mov	r5, r0
 802f3be:	2800      	cmp	r0, #0
 802f3c0:	f47f af36 	bne.w	802f230 <x509_crt_parse_der_core+0xa0>
    if( p != end )
 802f3c4:	9b06      	ldr	r3, [sp, #24]
 802f3c6:	42b3      	cmp	r3, r6
 802f3c8:	f43f af35 	beq.w	802f236 <x509_crt_parse_der_core+0xa6>
    if( crt == NULL )
 802f3cc:	4620      	mov	r0, r4
 802f3ce:	f7ff fac7 	bl	802e960 <mbedtls_x509_crt_free.part.0>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
 802f3d2:	4d95      	ldr	r5, [pc, #596]	; (802f628 <x509_crt_parse_der_core+0x498>)
 802f3d4:	e72f      	b.n	802f236 <x509_crt_parse_der_core+0xa6>
    if( crt == NULL )
 802f3d6:	4620      	mov	r0, r4
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 802f3d8:	f5a5 5506 	sub.w	r5, r5, #8576	; 0x2180
 802f3dc:	f7ff fac0 	bl	802e960 <mbedtls_x509_crt_free.part.0>
}
 802f3e0:	4628      	mov	r0, r5
 802f3e2:	b023      	add	sp, #140	; 0x8c
 802f3e4:	ecbd 8b02 	vpop	{d8}
 802f3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        crt->raw.p = p = mbedtls_calloc( 1, crt->raw.len );
 802f3ec:	4629      	mov	r1, r5
 802f3ee:	2001      	movs	r0, #1
 802f3f0:	f000 fcc2 	bl	802fd78 <calloc>
 802f3f4:	4606      	mov	r6, r0
 802f3f6:	9006      	str	r0, [sp, #24]
 802f3f8:	60e0      	str	r0, [r4, #12]
        if( crt->raw.p == NULL )
 802f3fa:	2800      	cmp	r0, #0
 802f3fc:	f000 82df 	beq.w	802f9be <x509_crt_parse_der_core+0x82e>
        memcpy( crt->raw.p, buf, crt->raw.len );
 802f400:	462a      	mov	r2, r5
 802f402:	4639      	mov	r1, r7
 802f404:	f000 fd08 	bl	802fe18 <memcpy>
        crt->own_buffer = 1;
 802f408:	2201      	movs	r2, #1
        p += crt->raw.len - len;
 802f40a:	eba5 0309 	sub.w	r3, r5, r9
 802f40e:	4433      	add	r3, r6
 802f410:	9306      	str	r3, [sp, #24]
        end = crt_end = p + len;
 802f412:	442e      	add	r6, r5
        crt->own_buffer = 1;
 802f414:	6022      	str	r2, [r4, #0]
        end = crt_end = p + len;
 802f416:	e6ec      	b.n	802f1f2 <x509_crt_parse_der_core+0x62>
        return( MBEDTLS_ERR_X509_INVALID_VERSION + ret );
 802f418:	f5a0 5508 	sub.w	r5, r0, #8704	; 0x2200
 802f41c:	e707      	b.n	802f22e <x509_crt_parse_der_core+0x9e>
            *ver = 0;
 802f41e:	61e5      	str	r5, [r4, #28]
            return( 0 );
 802f420:	e720      	b.n	802f264 <x509_crt_parse_der_core+0xd4>
        return( MBEDTLS_ERR_X509_INVALID_VERSION +
 802f422:	4d82      	ldr	r5, [pc, #520]	; (802f62c <x509_crt_parse_der_core+0x49c>)
 802f424:	e704      	b.n	802f230 <x509_crt_parse_der_core+0xa0>
    end = *p + len;
 802f426:	9906      	ldr	r1, [sp, #24]
 802f428:	9b18      	ldr	r3, [sp, #96]	; 0x60
    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
 802f42a:	f104 0290 	add.w	r2, r4, #144	; 0x90
    end = *p + len;
 802f42e:	eb01 0803 	add.w	r8, r1, r3
    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
 802f432:	4641      	mov	r1, r8
 802f434:	a806      	add	r0, sp, #24
 802f436:	f7fe ff81 	bl	802e33c <mbedtls_x509_get_time>
 802f43a:	4605      	mov	r5, r0
 802f43c:	2800      	cmp	r0, #0
 802f43e:	f47f aef7 	bne.w	802f230 <x509_crt_parse_der_core+0xa0>
    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
 802f442:	4641      	mov	r1, r8
 802f444:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
 802f448:	a806      	add	r0, sp, #24
 802f44a:	f7fe ff77 	bl	802e33c <mbedtls_x509_get_time>
 802f44e:	4605      	mov	r5, r0
 802f450:	2800      	cmp	r0, #0
 802f452:	f47f aeed 	bne.w	802f230 <x509_crt_parse_der_core+0xa0>
    if( *p != end )
 802f456:	9b06      	ldr	r3, [sp, #24]
 802f458:	4598      	cmp	r8, r3
 802f45a:	f43f af53 	beq.w	802f304 <x509_crt_parse_der_core+0x174>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 802f45e:	4d74      	ldr	r5, [pc, #464]	; (802f630 <x509_crt_parse_der_core+0x4a0>)
    if( crt == NULL )
 802f460:	e6e6      	b.n	802f230 <x509_crt_parse_der_core+0xa0>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 802f462:	4d74      	ldr	r5, [pc, #464]	; (802f634 <x509_crt_parse_der_core+0x4a4>)
 802f464:	e6e7      	b.n	802f236 <x509_crt_parse_der_core+0xa6>
    if( *p == end )
 802f466:	42ba      	cmp	r2, r7
 802f468:	f43f af7f 	beq.w	802f36a <x509_crt_parse_der_core+0x1da>
    uid->tag = **p;
 802f46c:	7812      	ldrb	r2, [r2, #0]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 802f46e:	23a1      	movs	r3, #161	; 0xa1
    uid->tag = **p;
 802f470:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 802f474:	4639      	mov	r1, r7
 802f476:	f104 02d8 	add.w	r2, r4, #216	; 0xd8
 802f47a:	a806      	add	r0, sp, #24
 802f47c:	f7f0 ffe2 	bl	8020444 <mbedtls_asn1_get_tag>
 802f480:	2800      	cmp	r0, #0
 802f482:	f000 817c 	beq.w	802f77e <x509_crt_parse_der_core+0x5ee>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 802f486:	f110 0f62 	cmn.w	r0, #98	; 0x62
 802f48a:	d003      	beq.n	802f494 <x509_crt_parse_der_core+0x304>
        if( ret != 0 )
 802f48c:	f5b0 5506 	subs.w	r5, r0, #8576	; 0x2180
 802f490:	f47f aece 	bne.w	802f230 <x509_crt_parse_der_core+0xa0>
 802f494:	9a06      	ldr	r2, [sp, #24]
    if( crt->version == 2 || crt->version == 3 )
 802f496:	69e3      	ldr	r3, [r4, #28]
 802f498:	3b02      	subs	r3, #2
 802f49a:	2b01      	cmp	r3, #1
 802f49c:	f63f af63 	bhi.w	802f366 <x509_crt_parse_der_core+0x1d6>
    if( *p == end )
 802f4a0:	4297      	cmp	r7, r2
 802f4a2:	f43f af62 	beq.w	802f36a <x509_crt_parse_der_core+0x1da>
    uid->tag = **p;
 802f4a6:	7812      	ldrb	r2, [r2, #0]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 802f4a8:	23a2      	movs	r3, #162	; 0xa2
    uid->tag = **p;
 802f4aa:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 802f4ae:	4639      	mov	r1, r7
 802f4b0:	f104 02e4 	add.w	r2, r4, #228	; 0xe4
 802f4b4:	a806      	add	r0, sp, #24
 802f4b6:	f7f0 ffc5 	bl	8020444 <mbedtls_asn1_get_tag>
 802f4ba:	2800      	cmp	r0, #0
 802f4bc:	f000 8167 	beq.w	802f78e <x509_crt_parse_der_core+0x5fe>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 802f4c0:	f110 0f62 	cmn.w	r0, #98	; 0x62
 802f4c4:	d003      	beq.n	802f4ce <x509_crt_parse_der_core+0x33e>
        if( ret != 0 )
 802f4c6:	f5b0 5506 	subs.w	r5, r0, #8576	; 0x2180
 802f4ca:	f47f aeb1 	bne.w	802f230 <x509_crt_parse_der_core+0xa0>
 802f4ce:	69e3      	ldr	r3, [r4, #28]
 802f4d0:	9a06      	ldr	r2, [sp, #24]
    if( crt->version == 3 )
 802f4d2:	2b03      	cmp	r3, #3
 802f4d4:	f47f af47 	bne.w	802f366 <x509_crt_parse_der_core+0x1d6>
    if( *p == end )
 802f4d8:	4297      	cmp	r7, r2
 802f4da:	f43f af46 	beq.w	802f36a <x509_crt_parse_der_core+0x1da>
    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
 802f4de:	4639      	mov	r1, r7
 802f4e0:	f104 02ec 	add.w	r2, r4, #236	; 0xec
 802f4e4:	a806      	add	r0, sp, #24
 802f4e6:	f7ff f8d3 	bl	802e690 <mbedtls_x509_get_ext>
 802f4ea:	4605      	mov	r5, r0
 802f4ec:	2800      	cmp	r0, #0
 802f4ee:	f47f ae9f 	bne.w	802f230 <x509_crt_parse_der_core+0xa0>
    end = crt->v3_ext.p + crt->v3_ext.len;
 802f4f2:	e9d4 323c 	ldrd	r3, r2, [r4, #240]	; 0xf0
    while( *p < end )
 802f4f6:	f8dd 8018 	ldr.w	r8, [sp, #24]
    end = crt->v3_ext.p + crt->v3_ext.len;
 802f4fa:	eb02 0a03 	add.w	sl, r2, r3
    while( *p < end )
 802f4fe:	45c2      	cmp	sl, r8
 802f500:	d95f      	bls.n	802f5c2 <x509_crt_parse_der_core+0x432>
 802f502:	ee08 7a10 	vmov	s16, r7
 802f506:	46a0      	mov	r8, r4
 802f508:	9603      	str	r6, [sp, #12]
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 802f50a:	2500      	movs	r5, #0
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 802f50c:	2330      	movs	r3, #48	; 0x30
 802f50e:	4651      	mov	r1, sl
 802f510:	aa07      	add	r2, sp, #28
 802f512:	a806      	add	r0, sp, #24
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 802f514:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
        int ext_type = 0;
 802f518:	e9cd 5508 	strd	r5, r5, [sp, #32]
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 802f51c:	9517      	str	r5, [sp, #92]	; 0x5c
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 802f51e:	f7f0 ff91 	bl	8020444 <mbedtls_asn1_get_tag>
 802f522:	2800      	cmp	r0, #0
 802f524:	f040 8149 	bne.w	802f7ba <x509_crt_parse_der_core+0x62a>
        end_ext_data = *p + len;
 802f528:	e9dd 5206 	ldrd	r5, r2, [sp, #24]
 802f52c:	4415      	add	r5, r2
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &extn_oid.len,
 802f52e:	2306      	movs	r3, #6
 802f530:	4629      	mov	r1, r5
 802f532:	aa16      	add	r2, sp, #88	; 0x58
 802f534:	a806      	add	r0, sp, #24
 802f536:	f7f0 ff85 	bl	8020444 <mbedtls_asn1_get_tag>
 802f53a:	2800      	cmp	r0, #0
 802f53c:	f040 813d 	bne.w	802f7ba <x509_crt_parse_der_core+0x62a>
        extn_oid.tag = MBEDTLS_ASN1_OID;
 802f540:	2406      	movs	r4, #6
        extn_oid.p = *p;
 802f542:	9906      	ldr	r1, [sp, #24]
        *p += extn_oid.len;
 802f544:	9b16      	ldr	r3, [sp, #88]	; 0x58
        extn_oid.p = *p;
 802f546:	9117      	str	r1, [sp, #92]	; 0x5c
        *p += extn_oid.len;
 802f548:	440b      	add	r3, r1
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 802f54a:	aa08      	add	r2, sp, #32
 802f54c:	4629      	mov	r1, r5
 802f54e:	a806      	add	r0, sp, #24
        *p += extn_oid.len;
 802f550:	9306      	str	r3, [sp, #24]
        extn_oid.tag = MBEDTLS_ASN1_OID;
 802f552:	9415      	str	r4, [sp, #84]	; 0x54
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 802f554:	f7f0 ffca 	bl	80204ec <mbedtls_asn1_get_bool>
 802f558:	b118      	cbz	r0, 802f562 <x509_crt_parse_der_core+0x3d2>
 802f55a:	f110 0f62 	cmn.w	r0, #98	; 0x62
 802f55e:	f040 812c 	bne.w	802f7ba <x509_crt_parse_der_core+0x62a>
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &len,
 802f562:	2304      	movs	r3, #4
 802f564:	4629      	mov	r1, r5
 802f566:	aa07      	add	r2, sp, #28
 802f568:	a806      	add	r0, sp, #24
 802f56a:	f7f0 ff6b 	bl	8020444 <mbedtls_asn1_get_tag>
 802f56e:	2800      	cmp	r0, #0
 802f570:	f040 8123 	bne.w	802f7ba <x509_crt_parse_der_core+0x62a>
        end_ext_octet = *p + len;
 802f574:	e9dd b406 	ldrd	fp, r4, [sp, #24]
 802f578:	445c      	add	r4, fp
        if( end_ext_octet != end_ext_data )
 802f57a:	42a5      	cmp	r5, r4
 802f57c:	f040 81f3 	bne.w	802f966 <x509_crt_parse_der_core+0x7d6>
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );
 802f580:	a815      	add	r0, sp, #84	; 0x54
 802f582:	a909      	add	r1, sp, #36	; 0x24
 802f584:	f7f7 fb2c 	bl	8026be0 <mbedtls_oid_get_x509_ext_type>
        if( ret != 0 )
 802f588:	b300      	cbz	r0, 802f5cc <x509_crt_parse_der_core+0x43c>
            if( cb != NULL )
 802f58a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802f58c:	2b00      	cmp	r3, #0
 802f58e:	f000 8107 	beq.w	802f7a0 <x509_crt_parse_der_core+0x610>
                ret = cb( p_ctx, crt, &extn_oid, is_critical, *p, end_ext_octet );
 802f592:	461d      	mov	r5, r3
 802f594:	9b06      	ldr	r3, [sp, #24]
 802f596:	4641      	mov	r1, r8
 802f598:	9300      	str	r3, [sp, #0]
 802f59a:	982f      	ldr	r0, [sp, #188]	; 0xbc
 802f59c:	9b08      	ldr	r3, [sp, #32]
 802f59e:	9401      	str	r4, [sp, #4]
 802f5a0:	aa15      	add	r2, sp, #84	; 0x54
 802f5a2:	47a8      	blx	r5
                if( ret != 0 && is_critical )
 802f5a4:	4605      	mov	r5, r0
 802f5a6:	b118      	cbz	r0, 802f5b0 <x509_crt_parse_der_core+0x420>
 802f5a8:	9b08      	ldr	r3, [sp, #32]
 802f5aa:	b10b      	cbz	r3, 802f5b0 <x509_crt_parse_der_core+0x420>
 802f5ac:	4644      	mov	r4, r8
    if( crt == NULL )
 802f5ae:	e63f      	b.n	802f230 <x509_crt_parse_der_core+0xa0>
                *p = end_ext_octet;
 802f5b0:	9406      	str	r4, [sp, #24]
    while( *p < end )
 802f5b2:	45a2      	cmp	sl, r4
 802f5b4:	d8a9      	bhi.n	802f50a <x509_crt_parse_der_core+0x37a>
 802f5b6:	4643      	mov	r3, r8
 802f5b8:	ee18 7a10 	vmov	r7, s16
 802f5bc:	46a0      	mov	r8, r4
 802f5be:	461c      	mov	r4, r3
 802f5c0:	9e03      	ldr	r6, [sp, #12]
    if( *p != end )
 802f5c2:	45c2      	cmp	sl, r8
 802f5c4:	f040 81d0 	bne.w	802f968 <x509_crt_parse_der_core+0x7d8>
        if( ret != 0 )
 802f5c8:	9a06      	ldr	r2, [sp, #24]
 802f5ca:	e6cc      	b.n	802f366 <x509_crt_parse_der_core+0x1d6>
        if( ( crt->ext_types & ext_type ) != 0 )
 802f5cc:	f8d8 2118 	ldr.w	r2, [r8, #280]	; 0x118
 802f5d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802f5d2:	ea12 0703 	ands.w	r7, r2, r3
 802f5d6:	f040 81be 	bne.w	802f956 <x509_crt_parse_der_core+0x7c6>
        crt->ext_types |= ext_type;
 802f5da:	431a      	orrs	r2, r3
        switch( ext_type )
 802f5dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
        crt->ext_types |= ext_type;
 802f5e0:	f8c8 2118 	str.w	r2, [r8, #280]	; 0x118
        switch( ext_type )
 802f5e4:	f000 80f3 	beq.w	802f7ce <x509_crt_parse_der_core+0x63e>
 802f5e8:	f300 80a9 	bgt.w	802f73e <x509_crt_parse_der_core+0x5ae>
 802f5ec:	2b08      	cmp	r3, #8
 802f5ee:	f000 812a 	beq.w	802f846 <x509_crt_parse_der_core+0x6b6>
 802f5f2:	2b20      	cmp	r3, #32
 802f5f4:	d17c      	bne.n	802f6f0 <x509_crt_parse_der_core+0x560>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 802f5f6:	4629      	mov	r1, r5
 802f5f8:	2330      	movs	r3, #48	; 0x30
 802f5fa:	aa0a      	add	r2, sp, #40	; 0x28
 802f5fc:	a806      	add	r0, sp, #24
 802f5fe:	f7f0 ff21 	bl	8020444 <mbedtls_asn1_get_tag>
 802f602:	2800      	cmp	r0, #0
 802f604:	f040 80fe 	bne.w	802f804 <x509_crt_parse_der_core+0x674>
    if( *p + len != end )
 802f608:	9b06      	ldr	r3, [sp, #24]
 802f60a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802f60c:	461d      	mov	r5, r3
 802f60e:	441a      	add	r2, r3
 802f610:	4294      	cmp	r4, r2
 802f612:	f040 81a8 	bne.w	802f966 <x509_crt_parse_der_core+0x7d6>
    while( *p < end )
 802f616:	429c      	cmp	r4, r3
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 802f618:	f108 07f8 	add.w	r7, r8, #248	; 0xf8
    while( *p < end )
 802f61c:	f240 819e 	bls.w	802f95c <x509_crt_parse_der_core+0x7cc>
            san->type = MBEDTLS_X509_SAN_DNS_NAME;
 802f620:	f04f 0b02 	mov.w	fp, #2
 802f624:	e031      	b.n	802f68a <x509_crt_parse_der_core+0x4fa>
 802f626:	bf00      	nop
 802f628:	ffffde1a 	.word	0xffffde1a
 802f62c:	ffffdd9a 	.word	0xffffdd9a
 802f630:	ffffdb9a 	.word	0xffffdb9a
 802f634:	ffffd800 	.word	0xffffd800
    switch( san_buf->tag &
 802f638:	2b82      	cmp	r3, #130	; 0x82
 802f63a:	d10c      	bne.n	802f656 <x509_crt_parse_der_core+0x4c6>
            memcpy( &san->san.unstructured_name,
 802f63c:	6838      	ldr	r0, [r7, #0]
 802f63e:	6879      	ldr	r1, [r7, #4]
 802f640:	68ba      	ldr	r2, [r7, #8]
 802f642:	ab19      	add	r3, sp, #100	; 0x64
            memset( san, 0, sizeof( mbedtls_x509_subject_alternative_name ) );
 802f644:	e9cd 551d 	strd	r5, r5, [sp, #116]	; 0x74
 802f648:	e9cd 551f 	strd	r5, r5, [sp, #124]	; 0x7c
 802f64c:	951c      	str	r5, [sp, #112]	; 0x70
            san->type = MBEDTLS_X509_SAN_DNS_NAME;
 802f64e:	f8cd b060 	str.w	fp, [sp, #96]	; 0x60
            memset( san, 0, sizeof( mbedtls_x509_subject_alternative_name ) );
 802f652:	9521      	str	r5, [sp, #132]	; 0x84
            memcpy( &san->san.unstructured_name,
 802f654:	c307      	stmia	r3!, {r0, r1, r2}
        if( cur->buf.p != NULL )
 802f656:	68bb      	ldr	r3, [r7, #8]
 802f658:	b163      	cbz	r3, 802f674 <x509_crt_parse_der_core+0x4e4>
            if( cur->next != NULL )
 802f65a:	68fb      	ldr	r3, [r7, #12]
 802f65c:	2b00      	cmp	r3, #0
 802f65e:	f040 817a 	bne.w	802f956 <x509_crt_parse_der_core+0x7c6>
            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );
 802f662:	2110      	movs	r1, #16
 802f664:	2001      	movs	r0, #1
 802f666:	f000 fb87 	bl	802fd78 <calloc>
 802f66a:	60f8      	str	r0, [r7, #12]
            if( cur->next == NULL )
 802f66c:	2800      	cmp	r0, #0
 802f66e:	f000 81c7 	beq.w	802fa00 <x509_crt_parse_der_core+0x870>
 802f672:	4607      	mov	r7, r0
        buf->p = *p;
 802f674:	9b06      	ldr	r3, [sp, #24]
        buf->len = tag_len;
 802f676:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        buf->p = *p;
 802f678:	60bb      	str	r3, [r7, #8]
        *p += buf->len;
 802f67a:	189d      	adds	r5, r3, r2
    while( *p < end )
 802f67c:	42ac      	cmp	r4, r5
        *p += buf->len;
 802f67e:	462b      	mov	r3, r5
        buf->tag = tag;
 802f680:	603e      	str	r6, [r7, #0]
        *p += buf->len;
 802f682:	9506      	str	r5, [sp, #24]
        buf->len = tag_len;
 802f684:	607a      	str	r2, [r7, #4]
    while( *p < end )
 802f686:	f240 8169 	bls.w	802f95c <x509_crt_parse_der_core+0x7cc>
        memset( &dummy_san_buf, 0, sizeof( dummy_san_buf ) );
 802f68a:	2228      	movs	r2, #40	; 0x28
 802f68c:	2100      	movs	r1, #0
 802f68e:	a818      	add	r0, sp, #96	; 0x60
 802f690:	f000 fbe9 	bl	802fe66 <memset>
        tag = **p;
 802f694:	f815 6b01 	ldrb.w	r6, [r5], #1
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 802f698:	4621      	mov	r1, r4
 802f69a:	aa0b      	add	r2, sp, #44	; 0x2c
 802f69c:	a806      	add	r0, sp, #24
        (*p)++;
 802f69e:	9506      	str	r5, [sp, #24]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 802f6a0:	f7f0 fe86 	bl	80203b0 <mbedtls_asn1_get_len>
 802f6a4:	4605      	mov	r5, r0
 802f6a6:	2800      	cmp	r0, #0
 802f6a8:	f040 81a4 	bne.w	802f9f4 <x509_crt_parse_der_core+0x864>
        if( ( tag & MBEDTLS_ASN1_TAG_CLASS_MASK ) !=
 802f6ac:	f006 03c0 	and.w	r3, r6, #192	; 0xc0
 802f6b0:	2b80      	cmp	r3, #128	; 0x80
 802f6b2:	d17a      	bne.n	802f7aa <x509_crt_parse_der_core+0x61a>
    switch( san_buf->tag &
 802f6b4:	683b      	ldr	r3, [r7, #0]
 802f6b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802f6ba:	2b80      	cmp	r3, #128	; 0x80
 802f6bc:	d1bc      	bne.n	802f638 <x509_crt_parse_der_core+0x4a8>
 802f6be:	4638      	mov	r0, r7
 802f6c0:	a918      	add	r1, sp, #96	; 0x60
 802f6c2:	f7ff f8c9 	bl	802e858 <mbedtls_x509_parse_subject_alt_name.part.0>
        if( ret != 0 && ret != MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE )
 802f6c6:	2800      	cmp	r0, #0
 802f6c8:	d0c5      	beq.n	802f656 <x509_crt_parse_der_core+0x4c6>
 802f6ca:	f510 5f02 	cmn.w	r0, #8320	; 0x2080
 802f6ce:	d0c2      	beq.n	802f656 <x509_crt_parse_der_core+0x4c6>
 802f6d0:	4605      	mov	r5, r0
            mbedtls_x509_sequence *seq_cur = subject_alt_name->next;
 802f6d2:	f8d8 4104 	ldr.w	r4, [r8, #260]	; 0x104
            while( seq_cur != NULL )
 802f6d6:	2c00      	cmp	r4, #0
 802f6d8:	f000 8186 	beq.w	802f9e8 <x509_crt_parse_der_core+0x858>
                mbedtls_platform_zeroize( seq_prv,
 802f6dc:	4620      	mov	r0, r4
 802f6de:	2110      	movs	r1, #16
                seq_cur = seq_cur->next;
 802f6e0:	68e6      	ldr	r6, [r4, #12]
                mbedtls_platform_zeroize( seq_prv,
 802f6e2:	f7f8 fa23 	bl	8027b2c <mbedtls_platform_zeroize>
                mbedtls_free( seq_prv );
 802f6e6:	4620      	mov	r0, r4
 802f6e8:	f000 fb80 	bl	802fdec <free>
                seq_cur = seq_cur->next;
 802f6ec:	4634      	mov	r4, r6
 802f6ee:	e7f2      	b.n	802f6d6 <x509_crt_parse_der_core+0x546>
        switch( ext_type )
 802f6f0:	2b04      	cmp	r3, #4
 802f6f2:	f040 808c 	bne.w	802f80e <x509_crt_parse_der_core+0x67e>
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 802f6f6:	4629      	mov	r1, r5
 802f6f8:	aa18      	add	r2, sp, #96	; 0x60
 802f6fa:	a806      	add	r0, sp, #24
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 802f6fc:	9718      	str	r7, [sp, #96]	; 0x60
 802f6fe:	f88d 7064 	strb.w	r7, [sp, #100]	; 0x64
 802f702:	971a      	str	r7, [sp, #104]	; 0x68
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 802f704:	f7f0 fff0 	bl	80206e8 <mbedtls_asn1_get_bitstring>
 802f708:	2800      	cmp	r0, #0
 802f70a:	f040 8097 	bne.w	802f83c <x509_crt_parse_der_core+0x6ac>
    if( bs.len < 1 )
 802f70e:	9818      	ldr	r0, [sp, #96]	; 0x60
 802f710:	2800      	cmp	r0, #0
 802f712:	f000 8090 	beq.w	802f836 <x509_crt_parse_der_core+0x6a6>
    *key_usage = 0;
 802f716:	2100      	movs	r1, #0
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 802f718:	460b      	mov	r3, r1
 802f71a:	460a      	mov	r2, r1
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 802f71c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
    *key_usage = 0;
 802f71e:	f8c8 1124 	str.w	r1, [r8, #292]	; 0x124
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 802f722:	5ce1      	ldrb	r1, [r4, r3]
 802f724:	00dd      	lsls	r5, r3, #3
 802f726:	40a9      	lsls	r1, r5
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 802f728:	3301      	adds	r3, #1
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 802f72a:	430a      	orrs	r2, r1
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 802f72c:	4298      	cmp	r0, r3
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 802f72e:	f8c8 2124 	str.w	r2, [r8, #292]	; 0x124
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 802f732:	d001      	beq.n	802f738 <x509_crt_parse_der_core+0x5a8>
 802f734:	2b04      	cmp	r3, #4
 802f736:	d1f4      	bne.n	802f722 <x509_crt_parse_der_core+0x592>
 802f738:	9b06      	ldr	r3, [sp, #24]
 802f73a:	461c      	mov	r4, r3
 802f73c:	e739      	b.n	802f5b2 <x509_crt_parse_der_core+0x422>
        switch( ext_type )
 802f73e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802f742:	d06c      	beq.n	802f81e <x509_crt_parse_der_core+0x68e>
 802f744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802f748:	d161      	bne.n	802f80e <x509_crt_parse_der_core+0x67e>
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 802f74a:	4629      	mov	r1, r5
 802f74c:	aa18      	add	r2, sp, #96	; 0x60
 802f74e:	a806      	add	r0, sp, #24
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 802f750:	9718      	str	r7, [sp, #96]	; 0x60
 802f752:	f88d 7064 	strb.w	r7, [sp, #100]	; 0x64
 802f756:	971a      	str	r7, [sp, #104]	; 0x68
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 802f758:	f7f0 ffc6 	bl	80206e8 <mbedtls_asn1_get_bitstring>
 802f75c:	2800      	cmp	r0, #0
 802f75e:	d16d      	bne.n	802f83c <x509_crt_parse_der_core+0x6ac>
    if( bs.len != 1 )
 802f760:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802f762:	2b01      	cmp	r3, #1
 802f764:	d167      	bne.n	802f836 <x509_crt_parse_der_core+0x6a6>
    *ns_cert_type = *bs.p;
 802f766:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 802f768:	9b06      	ldr	r3, [sp, #24]
 802f76a:	7812      	ldrb	r2, [r2, #0]
 802f76c:	461c      	mov	r4, r3
 802f76e:	f888 2138 	strb.w	r2, [r8, #312]	; 0x138
    return( 0 );
 802f772:	e71e      	b.n	802f5b2 <x509_crt_parse_der_core+0x422>
    if( crt == NULL )
 802f774:	4620      	mov	r0, r4
 802f776:	f7ff f8f3 	bl	802e960 <mbedtls_x509_crt_free.part.0>
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
 802f77a:	4da3      	ldr	r5, [pc, #652]	; (802fa08 <x509_crt_parse_der_core+0x878>)
 802f77c:	e55b      	b.n	802f236 <x509_crt_parse_der_core+0xa6>
    uid->p = *p;
 802f77e:	9a06      	ldr	r2, [sp, #24]
    *p += uid->len;
 802f780:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    uid->p = *p;
 802f784:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
    *p += uid->len;
 802f788:	441a      	add	r2, r3
 802f78a:	9206      	str	r2, [sp, #24]
        if( ret != 0 )
 802f78c:	e683      	b.n	802f496 <x509_crt_parse_der_core+0x306>
    uid->p = *p;
 802f78e:	9a06      	ldr	r2, [sp, #24]
    *p += uid->len;
 802f790:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    uid->p = *p;
 802f794:	f8c4 20e8 	str.w	r2, [r4, #232]	; 0xe8
    *p += uid->len;
 802f798:	441a      	add	r2, r3
 802f79a:	9206      	str	r2, [sp, #24]
        if( ret != 0 )
 802f79c:	69e3      	ldr	r3, [r4, #28]
 802f79e:	e698      	b.n	802f4d2 <x509_crt_parse_der_core+0x342>
            if( is_critical )
 802f7a0:	9b08      	ldr	r3, [sp, #32]
            *p = end_ext_octet;
 802f7a2:	9506      	str	r5, [sp, #24]
            if( is_critical )
 802f7a4:	2b00      	cmp	r3, #0
 802f7a6:	f43f af04 	beq.w	802f5b2 <x509_crt_parse_der_core+0x422>
 802f7aa:	4644      	mov	r4, r8
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 802f7ac:	4d97      	ldr	r5, [pc, #604]	; (802fa0c <x509_crt_parse_der_core+0x87c>)
 802f7ae:	e53f      	b.n	802f230 <x509_crt_parse_der_core+0xa0>
    if( crt == NULL )
 802f7b0:	4620      	mov	r0, r4
 802f7b2:	f7ff f8d5 	bl	802e960 <mbedtls_x509_crt_free.part.0>
        return( MBEDTLS_ERR_X509_SIG_MISMATCH );
 802f7b6:	4d96      	ldr	r5, [pc, #600]	; (802fa10 <x509_crt_parse_der_core+0x880>)
 802f7b8:	e53d      	b.n	802f236 <x509_crt_parse_der_core+0xa6>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 802f7ba:	f5a0 5514 	sub.w	r5, r0, #9472	; 0x2500
 802f7be:	ee18 7a10 	vmov	r7, s16
 802f7c2:	4644      	mov	r4, r8
        if( ret != 0 )
 802f7c4:	9e03      	ldr	r6, [sp, #12]
 802f7c6:	2d00      	cmp	r5, #0
 802f7c8:	f43f aefe 	beq.w	802f5c8 <x509_crt_parse_der_core+0x438>
 802f7cc:	e530      	b.n	802f230 <x509_crt_parse_der_core+0xa0>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 802f7ce:	4629      	mov	r1, r5
 802f7d0:	2330      	movs	r3, #48	; 0x30
    *max_pathlen = 0; /* endless */
 802f7d2:	e9c8 7747 	strd	r7, r7, [r8, #284]	; 0x11c
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 802f7d6:	aa18      	add	r2, sp, #96	; 0x60
 802f7d8:	a806      	add	r0, sp, #24
 802f7da:	f7f0 fe33 	bl	8020444 <mbedtls_asn1_get_tag>
 802f7de:	b988      	cbnz	r0, 802f804 <x509_crt_parse_der_core+0x674>
    if( *p == end )
 802f7e0:	9b06      	ldr	r3, [sp, #24]
 802f7e2:	429c      	cmp	r4, r3
 802f7e4:	d0a9      	beq.n	802f73a <x509_crt_parse_der_core+0x5aa>
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 802f7e6:	f508 728e 	add.w	r2, r8, #284	; 0x11c
    if( ( ret = mbedtls_asn1_get_bool( p, end, ca_istrue ) ) != 0 )
 802f7ea:	4621      	mov	r1, r4
 802f7ec:	a806      	add	r0, sp, #24
 802f7ee:	9202      	str	r2, [sp, #8]
 802f7f0:	f7f0 fe7c 	bl	80204ec <mbedtls_asn1_get_bool>
 802f7f4:	2800      	cmp	r0, #0
 802f7f6:	f000 80c6 	beq.w	802f986 <x509_crt_parse_der_core+0x7f6>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 802f7fa:	f110 0f62 	cmn.w	r0, #98	; 0x62
 802f7fe:	9a02      	ldr	r2, [sp, #8]
 802f800:	f000 80b4 	beq.w	802f96c <x509_crt_parse_der_core+0x7dc>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 802f804:	f5a0 5514 	sub.w	r5, r0, #9472	; 0x2500
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 802f808:	2d00      	cmp	r5, #0
 802f80a:	d095      	beq.n	802f738 <x509_crt_parse_der_core+0x5a8>
 802f80c:	e6ce      	b.n	802f5ac <x509_crt_parse_der_core+0x41c>
            if( is_critical )
 802f80e:	9b08      	ldr	r3, [sp, #32]
 802f810:	2b00      	cmp	r3, #0
 802f812:	f040 809a 	bne.w	802f94a <x509_crt_parse_der_core+0x7ba>
                *p = end_ext_octet;
 802f816:	4623      	mov	r3, r4
 802f818:	9406      	str	r4, [sp, #24]
 802f81a:	461c      	mov	r4, r3
 802f81c:	e6c9      	b.n	802f5b2 <x509_crt_parse_der_core+0x422>
    if( ( ret = mbedtls_asn1_get_sequence_of( p, end, ext_key_usage, MBEDTLS_ASN1_OID ) ) != 0 )
 802f81e:	4629      	mov	r1, r5
 802f820:	2306      	movs	r3, #6
 802f822:	f508 7294 	add.w	r2, r8, #296	; 0x128
 802f826:	a806      	add	r0, sp, #24
 802f828:	f7f1 f824 	bl	8020874 <mbedtls_asn1_get_sequence_of>
 802f82c:	b930      	cbnz	r0, 802f83c <x509_crt_parse_der_core+0x6ac>
    if( ext_key_usage->buf.p == NULL )
 802f82e:	f8d8 3130 	ldr.w	r3, [r8, #304]	; 0x130
 802f832:	2b00      	cmp	r3, #0
 802f834:	d180      	bne.n	802f738 <x509_crt_parse_der_core+0x5a8>
 802f836:	4644      	mov	r4, r8
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 802f838:	4d76      	ldr	r5, [pc, #472]	; (802fa14 <x509_crt_parse_der_core+0x884>)
        if( ret != 0 )
 802f83a:	e4f9      	b.n	802f230 <x509_crt_parse_der_core+0xa0>
            if( ( ret = x509_get_ns_cert_type( p, end_ext_octet,
 802f83c:	f5b0 5514 	subs.w	r5, r0, #9472	; 0x2500
 802f840:	f43f af7a 	beq.w	802f738 <x509_crt_parse_der_core+0x5a8>
 802f844:	e6b2      	b.n	802f5ac <x509_crt_parse_der_core+0x41c>
    ret = mbedtls_asn1_get_tag( p, end, &len,
 802f846:	2330      	movs	r3, #48	; 0x30
 802f848:	4621      	mov	r1, r4
 802f84a:	aa18      	add	r2, sp, #96	; 0x60
 802f84c:	a806      	add	r0, sp, #24
 802f84e:	f7f0 fdf9 	bl	8020444 <mbedtls_asn1_get_tag>
    if( ret != 0 )
 802f852:	4605      	mov	r5, r0
 802f854:	2800      	cmp	r0, #0
 802f856:	d17b      	bne.n	802f950 <x509_crt_parse_der_core+0x7c0>
    if( *p + len != end )
 802f858:	9b06      	ldr	r3, [sp, #24]
 802f85a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802f85c:	1899      	adds	r1, r3, r2
 802f85e:	428c      	cmp	r4, r1
 802f860:	f040 8081 	bne.w	802f966 <x509_crt_parse_der_core+0x7d6>
    if( len == 0 )
 802f864:	2a00      	cmp	r2, #0
 802f866:	d07e      	beq.n	802f966 <x509_crt_parse_der_core+0x7d6>
            if( ( ret = x509_get_certificate_policies( p, end_ext_octet,
 802f868:	f508 7984 	add.w	r9, r8, #264	; 0x108
 802f86c:	f8cd 8008 	str.w	r8, [sp, #8]
 802f870:	e01f      	b.n	802f8b2 <x509_crt_parse_der_core+0x722>
            parse_ret = MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE;
 802f872:	4d69      	ldr	r5, [pc, #420]	; (802fa18 <x509_crt_parse_der_core+0x888>)
        if( cur->buf.p != NULL )
 802f874:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802f878:	b173      	cbz	r3, 802f898 <x509_crt_parse_der_core+0x708>
            if( cur->next != NULL )
 802f87a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 802f87e:	2b00      	cmp	r3, #0
 802f880:	f040 80af 	bne.w	802f9e2 <x509_crt_parse_der_core+0x852>
            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );
 802f884:	2110      	movs	r1, #16
 802f886:	2001      	movs	r0, #1
 802f888:	f000 fa76 	bl	802fd78 <calloc>
 802f88c:	f8c9 000c 	str.w	r0, [r9, #12]
            if( cur->next == NULL )
 802f890:	2800      	cmp	r0, #0
 802f892:	f000 80a3 	beq.w	802f9dc <x509_crt_parse_der_core+0x84c>
 802f896:	4681      	mov	r9, r0
        buf->tag = policy_oid.tag;
 802f898:	2106      	movs	r1, #6
        *p += len;
 802f89a:	eb07 0308 	add.w	r3, r7, r8
        if( *p < policy_end )
 802f89e:	429e      	cmp	r6, r3
        buf->tag = policy_oid.tag;
 802f8a0:	e9c9 1800 	strd	r1, r8, [r9]
        buf->p = policy_oid.p;
 802f8a4:	f8c9 7008 	str.w	r7, [r9, #8]
        *p += len;
 802f8a8:	9306      	str	r3, [sp, #24]
        if( *p < policy_end )
 802f8aa:	d826      	bhi.n	802f8fa <x509_crt_parse_der_core+0x76a>
        if( *p != policy_end )
 802f8ac:	429e      	cmp	r6, r3
 802f8ae:	f040 808b 	bne.w	802f9c8 <x509_crt_parse_der_core+0x838>
    while( *p < end )
 802f8b2:	429c      	cmp	r4, r3
 802f8b4:	f240 808a 	bls.w	802f9cc <x509_crt_parse_der_core+0x83c>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 802f8b8:	2330      	movs	r3, #48	; 0x30
 802f8ba:	4621      	mov	r1, r4
 802f8bc:	aa18      	add	r2, sp, #96	; 0x60
 802f8be:	a806      	add	r0, sp, #24
 802f8c0:	f7f0 fdc0 	bl	8020444 <mbedtls_asn1_get_tag>
 802f8c4:	bb28      	cbnz	r0, 802f912 <x509_crt_parse_der_core+0x782>
        policy_end = *p + len;
 802f8c6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802f8c8:	9e06      	ldr	r6, [sp, #24]
        if( ( ret = mbedtls_asn1_get_tag( p, policy_end, &len,
 802f8ca:	2306      	movs	r3, #6
        policy_end = *p + len;
 802f8cc:	4416      	add	r6, r2
        if( ( ret = mbedtls_asn1_get_tag( p, policy_end, &len,
 802f8ce:	4631      	mov	r1, r6
 802f8d0:	aa18      	add	r2, sp, #96	; 0x60
 802f8d2:	a806      	add	r0, sp, #24
 802f8d4:	f7f0 fdb6 	bl	8020444 <mbedtls_asn1_get_tag>
 802f8d8:	b9d8      	cbnz	r0, 802f912 <x509_crt_parse_der_core+0x782>
        policy_oid.len = len;
 802f8da:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
        policy_oid.p = *p;
 802f8de:	9f06      	ldr	r7, [sp, #24]
        if( MBEDTLS_OID_CMP( MBEDTLS_OID_ANY_POLICY, &policy_oid ) != 0 )
 802f8e0:	f1b8 0f04 	cmp.w	r8, #4
 802f8e4:	d1c5      	bne.n	802f872 <x509_crt_parse_der_core+0x6e2>
 802f8e6:	4642      	mov	r2, r8
 802f8e8:	4639      	mov	r1, r7
 802f8ea:	484c      	ldr	r0, [pc, #304]	; (802fa1c <x509_crt_parse_der_core+0x88c>)
 802f8ec:	f000 fa86 	bl	802fdfc <memcmp>
            parse_ret = MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE;
 802f8f0:	4b49      	ldr	r3, [pc, #292]	; (802fa18 <x509_crt_parse_der_core+0x888>)
 802f8f2:	2800      	cmp	r0, #0
 802f8f4:	bf18      	it	ne
 802f8f6:	461d      	movne	r5, r3
 802f8f8:	e7bc      	b.n	802f874 <x509_crt_parse_der_core+0x6e4>
            if( ( ret = mbedtls_asn1_get_tag( p, policy_end, &len,
 802f8fa:	2330      	movs	r3, #48	; 0x30
 802f8fc:	4631      	mov	r1, r6
 802f8fe:	aa18      	add	r2, sp, #96	; 0x60
 802f900:	a806      	add	r0, sp, #24
 802f902:	f7f0 fd9f 	bl	8020444 <mbedtls_asn1_get_tag>
 802f906:	b920      	cbnz	r0, 802f912 <x509_crt_parse_der_core+0x782>
            *p += len;
 802f908:	9b06      	ldr	r3, [sp, #24]
 802f90a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802f90c:	4413      	add	r3, r2
 802f90e:	9306      	str	r3, [sp, #24]
 802f910:	e7cc      	b.n	802f8ac <x509_crt_parse_der_core+0x71c>
 802f912:	f8dd 8008 	ldr.w	r8, [sp, #8]
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 802f916:	f5a0 5514 	sub.w	r5, r0, #9472	; 0x2500
            if( ( ret = x509_get_certificate_policies( p, end_ext_octet,
 802f91a:	2d00      	cmp	r5, #0
 802f91c:	f43f af0c 	beq.w	802f738 <x509_crt_parse_der_core+0x5a8>
                if( ret == MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE && cb != NULL &&
 802f920:	f515 5f02 	cmn.w	r5, #8320	; 0x2080
 802f924:	f47f ae42 	bne.w	802f5ac <x509_crt_parse_der_core+0x41c>
 802f928:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802f92a:	b153      	cbz	r3, 802f942 <x509_crt_parse_der_core+0x7b2>
                    cb( p_ctx, crt, &extn_oid, is_critical,
 802f92c:	e9cd b400 	strd	fp, r4, [sp]
 802f930:	e9dd 402e 	ldrd	r4, r0, [sp, #184]	; 0xb8
 802f934:	4641      	mov	r1, r8
 802f936:	9b08      	ldr	r3, [sp, #32]
 802f938:	aa15      	add	r2, sp, #84	; 0x54
 802f93a:	47a0      	blx	r4
                if( ret == MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE && cb != NULL &&
 802f93c:	2800      	cmp	r0, #0
 802f93e:	f43f aefb 	beq.w	802f738 <x509_crt_parse_der_core+0x5a8>
                if( is_critical )
 802f942:	9b08      	ldr	r3, [sp, #32]
 802f944:	2b00      	cmp	r3, #0
 802f946:	f43f aef7 	beq.w	802f738 <x509_crt_parse_der_core+0x5a8>
 802f94a:	4644      	mov	r4, r8
                return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
 802f94c:	4d32      	ldr	r5, [pc, #200]	; (802fa18 <x509_crt_parse_der_core+0x888>)
 802f94e:	e46f      	b.n	802f230 <x509_crt_parse_der_core+0xa0>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 802f950:	f5a0 5514 	sub.w	r5, r0, #9472	; 0x2500
 802f954:	e7e1      	b.n	802f91a <x509_crt_parse_der_core+0x78a>
 802f956:	4644      	mov	r4, r8
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
 802f958:	4d31      	ldr	r5, [pc, #196]	; (802fa20 <x509_crt_parse_der_core+0x890>)
 802f95a:	e469      	b.n	802f230 <x509_crt_parse_der_core+0xa0>
    cur->next = NULL;
 802f95c:	2200      	movs	r2, #0
    if( *p != end )
 802f95e:	42ac      	cmp	r4, r5
    cur->next = NULL;
 802f960:	60fa      	str	r2, [r7, #12]
    if( *p != end )
 802f962:	f43f aeea 	beq.w	802f73a <x509_crt_parse_der_core+0x5aa>
 802f966:	4644      	mov	r4, r8
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 802f968:	4d2e      	ldr	r5, [pc, #184]	; (802fa24 <x509_crt_parse_der_core+0x894>)
                if( ret == MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE && cb != NULL &&
 802f96a:	e461      	b.n	802f230 <x509_crt_parse_der_core+0xa0>
            ret = mbedtls_asn1_get_int( p, end, ca_istrue );
 802f96c:	4621      	mov	r1, r4
 802f96e:	a806      	add	r0, sp, #24
 802f970:	f7f0 fe16 	bl	80205a0 <mbedtls_asn1_get_int>
        if( ret != 0 )
 802f974:	2800      	cmp	r0, #0
 802f976:	f47f af45 	bne.w	802f804 <x509_crt_parse_der_core+0x674>
        if( *ca_istrue != 0 )
 802f97a:	f8d8 311c 	ldr.w	r3, [r8, #284]	; 0x11c
 802f97e:	b113      	cbz	r3, 802f986 <x509_crt_parse_der_core+0x7f6>
            *ca_istrue = 1;
 802f980:	2301      	movs	r3, #1
 802f982:	f8c8 311c 	str.w	r3, [r8, #284]	; 0x11c
    if( *p == end )
 802f986:	9b06      	ldr	r3, [sp, #24]
 802f988:	429c      	cmp	r4, r3
 802f98a:	f43f aed6 	beq.w	802f73a <x509_crt_parse_der_core+0x5aa>
    if( ( ret = mbedtls_asn1_get_int( p, end, max_pathlen ) ) != 0 )
 802f98e:	4621      	mov	r1, r4
 802f990:	f508 7290 	add.w	r2, r8, #288	; 0x120
 802f994:	a806      	add	r0, sp, #24
 802f996:	f7f0 fe03 	bl	80205a0 <mbedtls_asn1_get_int>
 802f99a:	2800      	cmp	r0, #0
 802f99c:	f47f af32 	bne.w	802f804 <x509_crt_parse_der_core+0x674>
    if( *p != end )
 802f9a0:	9b06      	ldr	r3, [sp, #24]
 802f9a2:	429c      	cmp	r4, r3
 802f9a4:	d10d      	bne.n	802f9c2 <x509_crt_parse_der_core+0x832>
    if( *max_pathlen == INT_MAX )
 802f9a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802f9aa:	f8d8 2120 	ldr.w	r2, [r8, #288]	; 0x120
 802f9ae:	428a      	cmp	r2, r1
 802f9b0:	f43f af41 	beq.w	802f836 <x509_crt_parse_der_core+0x6a6>
    (*max_pathlen)++;
 802f9b4:	3201      	adds	r2, #1
 802f9b6:	461c      	mov	r4, r3
 802f9b8:	f8c8 2120 	str.w	r2, [r8, #288]	; 0x120
    return( 0 );
 802f9bc:	e5f9      	b.n	802f5b2 <x509_crt_parse_der_core+0x422>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 802f9be:	4d1a      	ldr	r5, [pc, #104]	; (802fa28 <x509_crt_parse_der_core+0x898>)
 802f9c0:	e439      	b.n	802f236 <x509_crt_parse_der_core+0xa6>
 802f9c2:	4644      	mov	r4, r8
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 802f9c4:	4d17      	ldr	r5, [pc, #92]	; (802fa24 <x509_crt_parse_der_core+0x894>)
 802f9c6:	e433      	b.n	802f230 <x509_crt_parse_der_core+0xa0>
 802f9c8:	9c02      	ldr	r4, [sp, #8]
 802f9ca:	e7cd      	b.n	802f968 <x509_crt_parse_der_core+0x7d8>
    cur->next = NULL;
 802f9cc:	f04f 0300 	mov.w	r3, #0
 802f9d0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 802f9d4:	f8c9 300c 	str.w	r3, [r9, #12]
    if( *p != end )
 802f9d8:	d09f      	beq.n	802f91a <x509_crt_parse_der_core+0x78a>
 802f9da:	e7c4      	b.n	802f966 <x509_crt_parse_der_core+0x7d6>
 802f9dc:	9c02      	ldr	r4, [sp, #8]
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 802f9de:	4d13      	ldr	r5, [pc, #76]	; (802fa2c <x509_crt_parse_der_core+0x89c>)
 802f9e0:	e426      	b.n	802f230 <x509_crt_parse_der_core+0xa0>
 802f9e2:	9c02      	ldr	r4, [sp, #8]
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
 802f9e4:	4d0e      	ldr	r5, [pc, #56]	; (802fa20 <x509_crt_parse_der_core+0x890>)
 802f9e6:	e423      	b.n	802f230 <x509_crt_parse_der_core+0xa0>
            subject_alt_name->next = NULL;
 802f9e8:	f8c8 4104 	str.w	r4, [r8, #260]	; 0x104
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 802f9ec:	2d00      	cmp	r5, #0
 802f9ee:	f43f aea3 	beq.w	802f738 <x509_crt_parse_der_core+0x5a8>
 802f9f2:	e5db      	b.n	802f5ac <x509_crt_parse_der_core+0x41c>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 802f9f4:	f5a0 5514 	sub.w	r5, r0, #9472	; 0x2500
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 802f9f8:	2d00      	cmp	r5, #0
 802f9fa:	f43f ae9d 	beq.w	802f738 <x509_crt_parse_der_core+0x5a8>
 802f9fe:	e5d5      	b.n	802f5ac <x509_crt_parse_der_core+0x41c>
 802fa00:	4644      	mov	r4, r8
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 802fa02:	4d0a      	ldr	r5, [pc, #40]	; (802fa2c <x509_crt_parse_der_core+0x89c>)
 802fa04:	e414      	b.n	802f230 <x509_crt_parse_der_core+0xa0>
 802fa06:	bf00      	nop
 802fa08:	ffffda80 	.word	0xffffda80
 802fa0c:	ffffda9e 	.word	0xffffda9e
 802fa10:	ffffd980 	.word	0xffffd980
 802fa14:	ffffda9c 	.word	0xffffda9c
 802fa18:	ffffdf80 	.word	0xffffdf80
 802fa1c:	08031774 	.word	0x08031774
 802fa20:	ffffdb00 	.word	0xffffdb00
 802fa24:	ffffda9a 	.word	0xffffda9a
 802fa28:	ffffd780 	.word	0xffffd780
 802fa2c:	ffffda96 	.word	0xffffda96

0802fa30 <mbedtls_x509_crt_parse_der_internal.part.0>:
static int mbedtls_x509_crt_parse_der_internal( mbedtls_x509_crt *chain,
 802fa30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802fa34:	4607      	mov	r7, r0
 802fa36:	4688      	mov	r8, r1
 802fa38:	4691      	mov	r9, r2
 802fa3a:	469b      	mov	fp, r3
    mbedtls_x509_crt *crt = chain, *prev = NULL;
 802fa3c:	4604      	mov	r4, r0
 802fa3e:	2600      	movs	r6, #0
static int mbedtls_x509_crt_parse_der_internal( mbedtls_x509_crt *chain,
 802fa40:	b083      	sub	sp, #12
 802fa42:	e004      	b.n	802fa4e <mbedtls_x509_crt_parse_der_internal.part.0+0x1e>
    while( crt->version != 0 && crt->next != NULL )
 802fa44:	f8d4 5150 	ldr.w	r5, [r4, #336]	; 0x150
 802fa48:	4626      	mov	r6, r4
 802fa4a:	b1a5      	cbz	r5, 802fa76 <mbedtls_x509_crt_parse_der_internal.part.0+0x46>
 802fa4c:	462c      	mov	r4, r5
 802fa4e:	69e5      	ldr	r5, [r4, #28]
 802fa50:	2d00      	cmp	r5, #0
 802fa52:	d1f7      	bne.n	802fa44 <mbedtls_x509_crt_parse_der_internal.part.0+0x14>
    ret = x509_crt_parse_der_core( crt, buf, buflen, make_copy, cb, p_ctx );
 802fa54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802fa56:	464a      	mov	r2, r9
 802fa58:	9301      	str	r3, [sp, #4]
 802fa5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802fa5c:	4641      	mov	r1, r8
 802fa5e:	9300      	str	r3, [sp, #0]
 802fa60:	4620      	mov	r0, r4
 802fa62:	465b      	mov	r3, fp
 802fa64:	f7ff fb94 	bl	802f190 <x509_crt_parse_der_core>
    if( ret != 0 )
 802fa68:	4605      	mov	r5, r0
 802fa6a:	bb70      	cbnz	r0, 802faca <mbedtls_x509_crt_parse_der_internal.part.0+0x9a>
    return( 0 );
 802fa6c:	2500      	movs	r5, #0
}
 802fa6e:	4628      	mov	r0, r5
 802fa70:	b003      	add	sp, #12
 802fa72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        crt->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );
 802fa76:	f44f 71aa 	mov.w	r1, #340	; 0x154
 802fa7a:	2001      	movs	r0, #1
 802fa7c:	f000 f97c 	bl	802fd78 <calloc>
 802fa80:	f8c4 0150 	str.w	r0, [r4, #336]	; 0x150
        if( crt->next == NULL )
 802fa84:	b320      	cbz	r0, 802fad0 <mbedtls_x509_crt_parse_der_internal.part.0+0xa0>
    memset( crt, 0, sizeof(mbedtls_x509_crt) );
 802fa86:	4629      	mov	r1, r5
 802fa88:	f44f 72aa 	mov.w	r2, #340	; 0x154
 802fa8c:	f000 f9eb 	bl	802fe66 <memset>
    ret = x509_crt_parse_der_core( crt, buf, buflen, make_copy, cb, p_ctx );
 802fa90:	980d      	ldr	r0, [sp, #52]	; 0x34
        crt = crt->next;
 802fa92:	f8d4 a150 	ldr.w	sl, [r4, #336]	; 0x150
    ret = x509_crt_parse_der_core( crt, buf, buflen, make_copy, cb, p_ctx );
 802fa96:	9001      	str	r0, [sp, #4]
 802fa98:	980c      	ldr	r0, [sp, #48]	; 0x30
 802fa9a:	465b      	mov	r3, fp
 802fa9c:	9000      	str	r0, [sp, #0]
 802fa9e:	464a      	mov	r2, r9
 802faa0:	4641      	mov	r1, r8
 802faa2:	4650      	mov	r0, sl
 802faa4:	f7ff fb74 	bl	802f190 <x509_crt_parse_der_core>
    if( ret != 0 )
 802faa8:	4605      	mov	r5, r0
 802faaa:	2800      	cmp	r0, #0
 802faac:	d0de      	beq.n	802fa6c <mbedtls_x509_crt_parse_der_internal.part.0+0x3c>
 802faae:	4626      	mov	r6, r4
        crt = crt->next;
 802fab0:	4654      	mov	r4, sl
            prev->next = NULL;
 802fab2:	2300      	movs	r3, #0
 802fab4:	f8c6 3150 	str.w	r3, [r6, #336]	; 0x150
        if( crt != chain )
 802fab8:	42a7      	cmp	r7, r4
 802faba:	d0d8      	beq.n	802fa6e <mbedtls_x509_crt_parse_der_internal.part.0+0x3e>
            mbedtls_free( crt );
 802fabc:	4620      	mov	r0, r4
 802fabe:	f000 f995 	bl	802fdec <free>
}
 802fac2:	4628      	mov	r0, r5
 802fac4:	b003      	add	sp, #12
 802fac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( prev )
 802faca:	2e00      	cmp	r6, #0
 802facc:	d1f1      	bne.n	802fab2 <mbedtls_x509_crt_parse_der_internal.part.0+0x82>
 802face:	e7f3      	b.n	802fab8 <mbedtls_x509_crt_parse_der_internal.part.0+0x88>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 802fad0:	4d00      	ldr	r5, [pc, #0]	; (802fad4 <mbedtls_x509_crt_parse_der_internal.part.0+0xa4>)
 802fad2:	e7cc      	b.n	802fa6e <mbedtls_x509_crt_parse_der_internal.part.0+0x3e>
 802fad4:	ffffd780 	.word	0xffffd780

0802fad8 <mbedtls_x509_crt_parse_der_nocopy>:
{
 802fad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802fadc:	b082      	sub	sp, #8
    if( crt == NULL || buf == NULL )
 802fade:	2800      	cmp	r0, #0
 802fae0:	d04c      	beq.n	802fb7c <mbedtls_x509_crt_parse_der_nocopy+0xa4>
 802fae2:	460d      	mov	r5, r1
 802fae4:	2900      	cmp	r1, #0
 802fae6:	d049      	beq.n	802fb7c <mbedtls_x509_crt_parse_der_nocopy+0xa4>
 802fae8:	4617      	mov	r7, r2
 802faea:	4606      	mov	r6, r0
 802faec:	4604      	mov	r4, r0
    mbedtls_x509_crt *crt = chain, *prev = NULL;
 802faee:	f04f 0800 	mov.w	r8, #0
 802faf2:	e006      	b.n	802fb02 <mbedtls_x509_crt_parse_der_nocopy+0x2a>
    while( crt->version != 0 && crt->next != NULL )
 802faf4:	f8d4 a150 	ldr.w	sl, [r4, #336]	; 0x150
 802faf8:	46a0      	mov	r8, r4
 802fafa:	f1ba 0f00 	cmp.w	sl, #0
 802fafe:	d011      	beq.n	802fb24 <mbedtls_x509_crt_parse_der_nocopy+0x4c>
 802fb00:	4654      	mov	r4, sl
 802fb02:	69e3      	ldr	r3, [r4, #28]
 802fb04:	2b00      	cmp	r3, #0
 802fb06:	d1f5      	bne.n	802faf4 <mbedtls_x509_crt_parse_der_nocopy+0x1c>
    ret = x509_crt_parse_der_core( crt, buf, buflen, make_copy, cb, p_ctx );
 802fb08:	4629      	mov	r1, r5
 802fb0a:	463a      	mov	r2, r7
 802fb0c:	4620      	mov	r0, r4
 802fb0e:	e9cd 3300 	strd	r3, r3, [sp]
 802fb12:	f7ff fb3d 	bl	802f190 <x509_crt_parse_der_core>
    if( ret != 0 )
 802fb16:	4605      	mov	r5, r0
 802fb18:	bb60      	cbnz	r0, 802fb74 <mbedtls_x509_crt_parse_der_nocopy+0x9c>
    return( 0 );
 802fb1a:	2500      	movs	r5, #0
}
 802fb1c:	4628      	mov	r0, r5
 802fb1e:	b002      	add	sp, #8
 802fb20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        crt->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );
 802fb24:	f44f 71aa 	mov.w	r1, #340	; 0x154
 802fb28:	2001      	movs	r0, #1
 802fb2a:	f000 f925 	bl	802fd78 <calloc>
 802fb2e:	f8c4 0150 	str.w	r0, [r4, #336]	; 0x150
        if( crt->next == NULL )
 802fb32:	b328      	cbz	r0, 802fb80 <mbedtls_x509_crt_parse_der_nocopy+0xa8>
    memset( crt, 0, sizeof(mbedtls_x509_crt) );
 802fb34:	f44f 72aa 	mov.w	r2, #340	; 0x154
 802fb38:	4651      	mov	r1, sl
 802fb3a:	f000 f994 	bl	802fe66 <memset>
        crt = crt->next;
 802fb3e:	f8d4 9150 	ldr.w	r9, [r4, #336]	; 0x150
    ret = x509_crt_parse_der_core( crt, buf, buflen, make_copy, cb, p_ctx );
 802fb42:	4629      	mov	r1, r5
 802fb44:	463a      	mov	r2, r7
 802fb46:	4653      	mov	r3, sl
 802fb48:	4648      	mov	r0, r9
 802fb4a:	e9cd aa00 	strd	sl, sl, [sp]
 802fb4e:	f7ff fb1f 	bl	802f190 <x509_crt_parse_der_core>
    if( ret != 0 )
 802fb52:	4605      	mov	r5, r0
 802fb54:	2800      	cmp	r0, #0
 802fb56:	d0e0      	beq.n	802fb1a <mbedtls_x509_crt_parse_der_nocopy+0x42>
 802fb58:	46a0      	mov	r8, r4
        crt = crt->next;
 802fb5a:	464c      	mov	r4, r9
            prev->next = NULL;
 802fb5c:	2300      	movs	r3, #0
 802fb5e:	f8c8 3150 	str.w	r3, [r8, #336]	; 0x150
        if( crt != chain )
 802fb62:	42a6      	cmp	r6, r4
 802fb64:	d0da      	beq.n	802fb1c <mbedtls_x509_crt_parse_der_nocopy+0x44>
            mbedtls_free( crt );
 802fb66:	4620      	mov	r0, r4
 802fb68:	f000 f940 	bl	802fdec <free>
}
 802fb6c:	4628      	mov	r0, r5
 802fb6e:	b002      	add	sp, #8
 802fb70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( prev )
 802fb74:	f1b8 0f00 	cmp.w	r8, #0
 802fb78:	d1f0      	bne.n	802fb5c <mbedtls_x509_crt_parse_der_nocopy+0x84>
 802fb7a:	e7f2      	b.n	802fb62 <mbedtls_x509_crt_parse_der_nocopy+0x8a>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 802fb7c:	4d01      	ldr	r5, [pc, #4]	; (802fb84 <mbedtls_x509_crt_parse_der_nocopy+0xac>)
 802fb7e:	e7cd      	b.n	802fb1c <mbedtls_x509_crt_parse_der_nocopy+0x44>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 802fb80:	4d01      	ldr	r5, [pc, #4]	; (802fb88 <mbedtls_x509_crt_parse_der_nocopy+0xb0>)
    return( mbedtls_x509_crt_parse_der_internal( chain, buf, buflen, 0, NULL, NULL ) );
 802fb82:	e7cb      	b.n	802fb1c <mbedtls_x509_crt_parse_der_nocopy+0x44>
 802fb84:	ffffd800 	.word	0xffffd800
 802fb88:	ffffd780 	.word	0xffffd780

0802fb8c <mbedtls_x509_crt_parse>:
{
 802fb8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802fb90:	b08b      	sub	sp, #44	; 0x2c
    if( chain == NULL || buf == NULL )
 802fb92:	2800      	cmp	r0, #0
 802fb94:	f000 8087 	beq.w	802fca6 <mbedtls_x509_crt_parse+0x11a>
 802fb98:	460c      	mov	r4, r1
 802fb9a:	2900      	cmp	r1, #0
 802fb9c:	f000 8083 	beq.w	802fca6 <mbedtls_x509_crt_parse+0x11a>
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
 802fba0:	4615      	mov	r5, r2
 802fba2:	4606      	mov	r6, r0
 802fba4:	2a00      	cmp	r2, #0
 802fba6:	d040      	beq.n	802fc2a <mbedtls_x509_crt_parse+0x9e>
 802fba8:	188b      	adds	r3, r1, r2
 802fbaa:	f813 7c01 	ldrb.w	r7, [r3, #-1]
 802fbae:	2f00      	cmp	r7, #0
 802fbb0:	d13b      	bne.n	802fc2a <mbedtls_x509_crt_parse+0x9e>
        strstr( (const char *) buf, "-----BEGIN CERTIFICATE-----" ) != NULL )
 802fbb2:	4620      	mov	r0, r4
 802fbb4:	4940      	ldr	r1, [pc, #256]	; (802fcb8 <mbedtls_x509_crt_parse+0x12c>)
 802fbb6:	f000 fbba 	bl	803032e <strstr>
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
 802fbba:	2800      	cmp	r0, #0
 802fbbc:	d035      	beq.n	802fc2a <mbedtls_x509_crt_parse+0x9e>
        while( buflen > 1 )
 802fbbe:	2d01      	cmp	r5, #1
 802fbc0:	d96e      	bls.n	802fca0 <mbedtls_x509_crt_parse+0x114>
            ret = mbedtls_pem_read_buffer( &pem,
 802fbc2:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 802fcc0 <mbedtls_x509_crt_parse+0x134>
 802fbc6:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 802fcb8 <mbedtls_x509_crt_parse+0x12c>
    int success = 0, first_error = 0, total_failed = 0;
 802fbca:	46b9      	mov	r9, r7
 802fbcc:	46b8      	mov	r8, r7
 802fbce:	9704      	str	r7, [sp, #16]
 802fbd0:	af06      	add	r7, sp, #24
            mbedtls_pem_init( &pem );
 802fbd2:	a807      	add	r0, sp, #28
 802fbd4:	f7f7 f92c 	bl	8026e30 <mbedtls_pem_init>
            ret = mbedtls_pem_read_buffer( &pem,
 802fbd8:	2300      	movs	r3, #0
 802fbda:	465a      	mov	r2, fp
 802fbdc:	e9cd 3701 	strd	r3, r7, [sp, #4]
 802fbe0:	9300      	str	r3, [sp, #0]
 802fbe2:	4651      	mov	r1, sl
 802fbe4:	4623      	mov	r3, r4
 802fbe6:	a807      	add	r0, sp, #28
 802fbe8:	f7f7 f928 	bl	8026e3c <mbedtls_pem_read_buffer>
            if( ret == 0 )
 802fbec:	4603      	mov	r3, r0
 802fbee:	bb50      	cbnz	r0, 802fc46 <mbedtls_x509_crt_parse+0xba>
            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 802fbf0:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
                buflen -= use_len;
 802fbf4:	1aad      	subs	r5, r5, r2
                buf += use_len;
 802fbf6:	4414      	add	r4, r2
            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 802fbf8:	9a08      	ldr	r2, [sp, #32]
    if( crt == NULL || buf == NULL )
 802fbfa:	2900      	cmp	r1, #0
 802fbfc:	d056      	beq.n	802fcac <mbedtls_x509_crt_parse+0x120>
 802fbfe:	2301      	movs	r3, #1
 802fc00:	e9cd 0000 	strd	r0, r0, [sp]
 802fc04:	4630      	mov	r0, r6
 802fc06:	f7ff ff13 	bl	802fa30 <mbedtls_x509_crt_parse_der_internal.part.0>
 802fc0a:	9005      	str	r0, [sp, #20]
            mbedtls_pem_free( &pem );
 802fc0c:	a807      	add	r0, sp, #28
 802fc0e:	f7f7 faa1 	bl	8027154 <mbedtls_pem_free>
            if( ret != 0 )
 802fc12:	9b05      	ldr	r3, [sp, #20]
 802fc14:	b34b      	cbz	r3, 802fc6a <mbedtls_x509_crt_parse+0xde>
                if( ret == MBEDTLS_ERR_X509_ALLOC_FAILED )
 802fc16:	f513 5f22 	cmn.w	r3, #10368	; 0x2880
 802fc1a:	d02b      	beq.n	802fc74 <mbedtls_x509_crt_parse+0xe8>
                if( first_error == 0 )
 802fc1c:	f1b8 0f00 	cmp.w	r8, #0
 802fc20:	bf08      	it	eq
 802fc22:	4698      	moveq	r8, r3
                total_failed++;
 802fc24:	f109 0901 	add.w	r9, r9, #1
                continue;
 802fc28:	e021      	b.n	802fc6e <mbedtls_x509_crt_parse+0xe2>
    if( crt == NULL || buf == NULL )
 802fc2a:	2300      	movs	r3, #0
 802fc2c:	462a      	mov	r2, r5
 802fc2e:	e9cd 3300 	strd	r3, r3, [sp]
 802fc32:	4621      	mov	r1, r4
 802fc34:	4630      	mov	r0, r6
 802fc36:	2301      	movs	r3, #1
 802fc38:	f7ff fefa 	bl	802fa30 <mbedtls_x509_crt_parse_der_internal.part.0>
 802fc3c:	4680      	mov	r8, r0
}
 802fc3e:	4640      	mov	r0, r8
 802fc40:	b00b      	add	sp, #44	; 0x2c
 802fc42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            else if( ret == MBEDTLS_ERR_PEM_BAD_INPUT_DATA )
 802fc46:	f510 5fa4 	cmn.w	r0, #5248	; 0x1480
 802fc4a:	d013      	beq.n	802fc74 <mbedtls_x509_crt_parse+0xe8>
            else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 802fc4c:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 802fc50:	d112      	bne.n	802fc78 <mbedtls_x509_crt_parse+0xec>
    if( success )
 802fc52:	9b04      	ldr	r3, [sp, #16]
 802fc54:	b9fb      	cbnz	r3, 802fc96 <mbedtls_x509_crt_parse+0x10a>
        return( MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT );
 802fc56:	f5a3 531e 	sub.w	r3, r3, #10112	; 0x2780
 802fc5a:	f1b8 0f00 	cmp.w	r8, #0
 802fc5e:	bf08      	it	eq
 802fc60:	4698      	moveq	r8, r3
}
 802fc62:	4640      	mov	r0, r8
 802fc64:	b00b      	add	sp, #44	; 0x2c
 802fc66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            success = 1;
 802fc6a:	2301      	movs	r3, #1
 802fc6c:	9304      	str	r3, [sp, #16]
        while( buflen > 1 )
 802fc6e:	2d01      	cmp	r5, #1
 802fc70:	d8af      	bhi.n	802fbd2 <mbedtls_x509_crt_parse+0x46>
 802fc72:	e7ee      	b.n	802fc52 <mbedtls_x509_crt_parse+0xc6>
 802fc74:	4698      	mov	r8, r3
 802fc76:	e7e2      	b.n	802fc3e <mbedtls_x509_crt_parse+0xb2>
                mbedtls_pem_free( &pem );
 802fc78:	9005      	str	r0, [sp, #20]
 802fc7a:	a807      	add	r0, sp, #28
 802fc7c:	f7f7 fa6a 	bl	8027154 <mbedtls_pem_free>
                if( first_error == 0 )
 802fc80:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
                total_failed++;
 802fc84:	f109 0901 	add.w	r9, r9, #1
                if( first_error == 0 )
 802fc88:	f1b8 0f00 	cmp.w	r8, #0
 802fc8c:	bf08      	it	eq
 802fc8e:	4698      	moveq	r8, r3
                buflen -= use_len;
 802fc90:	1aad      	subs	r5, r5, r2
                buf += use_len;
 802fc92:	4414      	add	r4, r2
                continue;
 802fc94:	e7eb      	b.n	802fc6e <mbedtls_x509_crt_parse+0xe2>
 802fc96:	46c8      	mov	r8, r9
}
 802fc98:	4640      	mov	r0, r8
 802fc9a:	b00b      	add	sp, #44	; 0x2c
 802fc9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT );
 802fca0:	f8df 8020 	ldr.w	r8, [pc, #32]	; 802fcc4 <mbedtls_x509_crt_parse+0x138>
 802fca4:	e7cb      	b.n	802fc3e <mbedtls_x509_crt_parse+0xb2>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 802fca6:	f8df 8014 	ldr.w	r8, [pc, #20]	; 802fcbc <mbedtls_x509_crt_parse+0x130>
 802fcaa:	e7c8      	b.n	802fc3e <mbedtls_x509_crt_parse+0xb2>
            mbedtls_pem_free( &pem );
 802fcac:	a807      	add	r0, sp, #28
 802fcae:	f7f7 fa51 	bl	8027154 <mbedtls_pem_free>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 802fcb2:	4b02      	ldr	r3, [pc, #8]	; (802fcbc <mbedtls_x509_crt_parse+0x130>)
 802fcb4:	e7b2      	b.n	802fc1c <mbedtls_x509_crt_parse+0x90>
 802fcb6:	bf00      	nop
 802fcb8:	08035994 	.word	0x08035994
 802fcbc:	ffffd800 	.word	0xffffd800
 802fcc0:	08031e8c 	.word	0x08031e8c
 802fcc4:	ffffd880 	.word	0xffffd880

0802fcc8 <mbedtls_x509_crt_verify_info>:
{
 802fcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802fccc:	468a      	mov	sl, r1
 802fcce:	4680      	mov	r8, r0
 802fcd0:	461e      	mov	r6, r3
    size_t n = size;
 802fcd2:	460f      	mov	r7, r1
{
 802fcd4:	4691      	mov	r9, r2
 802fcd6:	4c19      	ldr	r4, [pc, #100]	; (802fd3c <mbedtls_x509_crt_verify_info+0x74>)
    for( cur = x509_crt_verify_strings; cur->string != NULL ; cur++ )
 802fcd8:	4a19      	ldr	r2, [pc, #100]	; (802fd40 <mbedtls_x509_crt_verify_info+0x78>)
        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
 802fcda:	f8df b070 	ldr.w	fp, [pc, #112]	; 802fd4c <mbedtls_x509_crt_verify_info+0x84>
{
 802fcde:	b083      	sub	sp, #12
        if( ( flags & cur->code ) == 0 )
 802fce0:	f854 3c08 	ldr.w	r3, [r4, #-8]
 802fce4:	421e      	tst	r6, r3
 802fce6:	d00f      	beq.n	802fd08 <mbedtls_x509_crt_verify_info+0x40>
        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
 802fce8:	9200      	str	r2, [sp, #0]
 802fcea:	464b      	mov	r3, r9
 802fcec:	465a      	mov	r2, fp
 802fcee:	4639      	mov	r1, r7
 802fcf0:	4640      	mov	r0, r8
 802fcf2:	f000 fa85 	bl	8030200 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 802fcf6:	1e05      	subs	r5, r0, #0
 802fcf8:	db10      	blt.n	802fd1c <mbedtls_x509_crt_verify_info+0x54>
 802fcfa:	42bd      	cmp	r5, r7
 802fcfc:	d20e      	bcs.n	802fd1c <mbedtls_x509_crt_verify_info+0x54>
        flags ^= cur->code;
 802fcfe:	f854 3c08 	ldr.w	r3, [r4, #-8]
        MBEDTLS_X509_SAFE_SNPRINTF;
 802fd02:	1b7f      	subs	r7, r7, r5
 802fd04:	44a8      	add	r8, r5
        flags ^= cur->code;
 802fd06:	405e      	eors	r6, r3
    for( cur = x509_crt_verify_strings; cur->string != NULL ; cur++ )
 802fd08:	6862      	ldr	r2, [r4, #4]
 802fd0a:	3408      	adds	r4, #8
 802fd0c:	2a00      	cmp	r2, #0
 802fd0e:	d1e7      	bne.n	802fce0 <mbedtls_x509_crt_verify_info+0x18>
    if( flags != 0 )
 802fd10:	b946      	cbnz	r6, 802fd24 <mbedtls_x509_crt_verify_info+0x5c>
    return( (int) ( size - n ) );
 802fd12:	ebaa 0007 	sub.w	r0, sl, r7
}
 802fd16:	b003      	add	sp, #12
 802fd18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MBEDTLS_X509_SAFE_SNPRINTF;
 802fd1c:	4809      	ldr	r0, [pc, #36]	; (802fd44 <mbedtls_x509_crt_verify_info+0x7c>)
}
 802fd1e:	b003      	add	sp, #12
 802fd20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ret = mbedtls_snprintf( p, n, "%sUnknown reason "
 802fd24:	464b      	mov	r3, r9
 802fd26:	4640      	mov	r0, r8
 802fd28:	4639      	mov	r1, r7
 802fd2a:	4a07      	ldr	r2, [pc, #28]	; (802fd48 <mbedtls_x509_crt_verify_info+0x80>)
 802fd2c:	f000 fa68 	bl	8030200 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 802fd30:	2800      	cmp	r0, #0
 802fd32:	dbf3      	blt.n	802fd1c <mbedtls_x509_crt_verify_info+0x54>
 802fd34:	42b8      	cmp	r0, r7
 802fd36:	d2f1      	bcs.n	802fd1c <mbedtls_x509_crt_verify_info+0x54>
 802fd38:	1a3f      	subs	r7, r7, r0
 802fd3a:	e7ea      	b.n	802fd12 <mbedtls_x509_crt_verify_info+0x4a>
 802fd3c:	08035e14 	.word	0x08035e14
 802fd40:	080359b0 	.word	0x080359b0
 802fd44:	ffffd680 	.word	0xffffd680
 802fd48:	080359e0 	.word	0x080359e0
 802fd4c:	080359d8 	.word	0x080359d8

0802fd50 <mbedtls_x509_crt_verify_restartable>:
    return( x509_crt_verify_restartable_ca_cb( crt, trust_ca, ca_crl,
 802fd50:	f7fe be7c 	b.w	802ea4c <x509_crt_verify_restartable_ca_cb.isra.0>

0802fd54 <mbedtls_x509_crt_init>:
    memset( crt, 0, sizeof(mbedtls_x509_crt) );
 802fd54:	f44f 72aa 	mov.w	r2, #340	; 0x154
 802fd58:	2100      	movs	r1, #0
 802fd5a:	f000 b884 	b.w	802fe66 <memset>
 802fd5e:	bf00      	nop

0802fd60 <mbedtls_x509_crt_free>:
    if( crt == NULL )
 802fd60:	b108      	cbz	r0, 802fd66 <mbedtls_x509_crt_free+0x6>
 802fd62:	f7fe bdfd 	b.w	802e960 <mbedtls_x509_crt_free.part.0>
}
 802fd66:	4770      	bx	lr

0802fd68 <atoi>:
 802fd68:	220a      	movs	r2, #10
 802fd6a:	2100      	movs	r1, #0
 802fd6c:	f000 bbd4 	b.w	8030518 <strtol>

0802fd70 <atol>:
 802fd70:	220a      	movs	r2, #10
 802fd72:	2100      	movs	r1, #0
 802fd74:	f000 bbd0 	b.w	8030518 <strtol>

0802fd78 <calloc>:
 802fd78:	4b02      	ldr	r3, [pc, #8]	; (802fd84 <calloc+0xc>)
 802fd7a:	460a      	mov	r2, r1
 802fd7c:	4601      	mov	r1, r0
 802fd7e:	6818      	ldr	r0, [r3, #0]
 802fd80:	f000 b879 	b.w	802fe76 <_calloc_r>
 802fd84:	20018300 	.word	0x20018300

0802fd88 <__errno>:
 802fd88:	4b01      	ldr	r3, [pc, #4]	; (802fd90 <__errno+0x8>)
 802fd8a:	6818      	ldr	r0, [r3, #0]
 802fd8c:	4770      	bx	lr
 802fd8e:	bf00      	nop
 802fd90:	20018300 	.word	0x20018300

0802fd94 <__libc_init_array>:
 802fd94:	b570      	push	{r4, r5, r6, lr}
 802fd96:	4d0d      	ldr	r5, [pc, #52]	; (802fdcc <__libc_init_array+0x38>)
 802fd98:	2600      	movs	r6, #0
 802fd9a:	4c0d      	ldr	r4, [pc, #52]	; (802fdd0 <__libc_init_array+0x3c>)
 802fd9c:	1b64      	subs	r4, r4, r5
 802fd9e:	10a4      	asrs	r4, r4, #2
 802fda0:	42a6      	cmp	r6, r4
 802fda2:	d109      	bne.n	802fdb8 <__libc_init_array+0x24>
 802fda4:	4d0b      	ldr	r5, [pc, #44]	; (802fdd4 <__libc_init_array+0x40>)
 802fda6:	2600      	movs	r6, #0
 802fda8:	4c0b      	ldr	r4, [pc, #44]	; (802fdd8 <__libc_init_array+0x44>)
 802fdaa:	f001 fc77 	bl	803169c <_init>
 802fdae:	1b64      	subs	r4, r4, r5
 802fdb0:	10a4      	asrs	r4, r4, #2
 802fdb2:	42a6      	cmp	r6, r4
 802fdb4:	d105      	bne.n	802fdc2 <__libc_init_array+0x2e>
 802fdb6:	bd70      	pop	{r4, r5, r6, pc}
 802fdb8:	f855 3b04 	ldr.w	r3, [r5], #4
 802fdbc:	3601      	adds	r6, #1
 802fdbe:	4798      	blx	r3
 802fdc0:	e7ee      	b.n	802fda0 <__libc_init_array+0xc>
 802fdc2:	f855 3b04 	ldr.w	r3, [r5], #4
 802fdc6:	3601      	adds	r6, #1
 802fdc8:	4798      	blx	r3
 802fdca:	e7f2      	b.n	802fdb2 <__libc_init_array+0x1e>
 802fdcc:	0803616c 	.word	0x0803616c
 802fdd0:	0803616c 	.word	0x0803616c
 802fdd4:	0803616c 	.word	0x0803616c
 802fdd8:	08036170 	.word	0x08036170

0802fddc <malloc>:
 802fddc:	4b02      	ldr	r3, [pc, #8]	; (802fde8 <malloc+0xc>)
 802fdde:	4601      	mov	r1, r0
 802fde0:	6818      	ldr	r0, [r3, #0]
 802fde2:	f000 b8a7 	b.w	802ff34 <_malloc_r>
 802fde6:	bf00      	nop
 802fde8:	20018300 	.word	0x20018300

0802fdec <free>:
 802fdec:	4b02      	ldr	r3, [pc, #8]	; (802fdf8 <free+0xc>)
 802fdee:	4601      	mov	r1, r0
 802fdf0:	6818      	ldr	r0, [r3, #0]
 802fdf2:	f000 b84f 	b.w	802fe94 <_free_r>
 802fdf6:	bf00      	nop
 802fdf8:	20018300 	.word	0x20018300

0802fdfc <memcmp>:
 802fdfc:	b530      	push	{r4, r5, lr}
 802fdfe:	3901      	subs	r1, #1
 802fe00:	2400      	movs	r4, #0
 802fe02:	42a2      	cmp	r2, r4
 802fe04:	d101      	bne.n	802fe0a <memcmp+0xe>
 802fe06:	2000      	movs	r0, #0
 802fe08:	e005      	b.n	802fe16 <memcmp+0x1a>
 802fe0a:	5d03      	ldrb	r3, [r0, r4]
 802fe0c:	3401      	adds	r4, #1
 802fe0e:	5d0d      	ldrb	r5, [r1, r4]
 802fe10:	42ab      	cmp	r3, r5
 802fe12:	d0f6      	beq.n	802fe02 <memcmp+0x6>
 802fe14:	1b58      	subs	r0, r3, r5
 802fe16:	bd30      	pop	{r4, r5, pc}

0802fe18 <memcpy>:
 802fe18:	440a      	add	r2, r1
 802fe1a:	1e43      	subs	r3, r0, #1
 802fe1c:	4291      	cmp	r1, r2
 802fe1e:	d100      	bne.n	802fe22 <memcpy+0xa>
 802fe20:	4770      	bx	lr
 802fe22:	b510      	push	{r4, lr}
 802fe24:	f811 4b01 	ldrb.w	r4, [r1], #1
 802fe28:	4291      	cmp	r1, r2
 802fe2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802fe2e:	d1f9      	bne.n	802fe24 <memcpy+0xc>
 802fe30:	bd10      	pop	{r4, pc}

0802fe32 <memmove>:
 802fe32:	4288      	cmp	r0, r1
 802fe34:	b510      	push	{r4, lr}
 802fe36:	eb01 0402 	add.w	r4, r1, r2
 802fe3a:	d902      	bls.n	802fe42 <memmove+0x10>
 802fe3c:	4284      	cmp	r4, r0
 802fe3e:	4623      	mov	r3, r4
 802fe40:	d807      	bhi.n	802fe52 <memmove+0x20>
 802fe42:	1e43      	subs	r3, r0, #1
 802fe44:	42a1      	cmp	r1, r4
 802fe46:	d008      	beq.n	802fe5a <memmove+0x28>
 802fe48:	f811 2b01 	ldrb.w	r2, [r1], #1
 802fe4c:	f803 2f01 	strb.w	r2, [r3, #1]!
 802fe50:	e7f8      	b.n	802fe44 <memmove+0x12>
 802fe52:	4402      	add	r2, r0
 802fe54:	4601      	mov	r1, r0
 802fe56:	428a      	cmp	r2, r1
 802fe58:	d100      	bne.n	802fe5c <memmove+0x2a>
 802fe5a:	bd10      	pop	{r4, pc}
 802fe5c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802fe60:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802fe64:	e7f7      	b.n	802fe56 <memmove+0x24>

0802fe66 <memset>:
 802fe66:	4402      	add	r2, r0
 802fe68:	4603      	mov	r3, r0
 802fe6a:	4293      	cmp	r3, r2
 802fe6c:	d100      	bne.n	802fe70 <memset+0xa>
 802fe6e:	4770      	bx	lr
 802fe70:	f803 1b01 	strb.w	r1, [r3], #1
 802fe74:	e7f9      	b.n	802fe6a <memset+0x4>

0802fe76 <_calloc_r>:
 802fe76:	434a      	muls	r2, r1
 802fe78:	b513      	push	{r0, r1, r4, lr}
 802fe7a:	4611      	mov	r1, r2
 802fe7c:	9201      	str	r2, [sp, #4]
 802fe7e:	f000 f859 	bl	802ff34 <_malloc_r>
 802fe82:	4604      	mov	r4, r0
 802fe84:	b118      	cbz	r0, 802fe8e <_calloc_r+0x18>
 802fe86:	9a01      	ldr	r2, [sp, #4]
 802fe88:	2100      	movs	r1, #0
 802fe8a:	f7ff ffec 	bl	802fe66 <memset>
 802fe8e:	4620      	mov	r0, r4
 802fe90:	b002      	add	sp, #8
 802fe92:	bd10      	pop	{r4, pc}

0802fe94 <_free_r>:
 802fe94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802fe96:	2900      	cmp	r1, #0
 802fe98:	d047      	beq.n	802ff2a <_free_r+0x96>
 802fe9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802fe9e:	1f0c      	subs	r4, r1, #4
 802fea0:	9001      	str	r0, [sp, #4]
 802fea2:	2b00      	cmp	r3, #0
 802fea4:	bfb8      	it	lt
 802fea6:	18e4      	addlt	r4, r4, r3
 802fea8:	f000 fe6c 	bl	8030b84 <__malloc_lock>
 802feac:	4a20      	ldr	r2, [pc, #128]	; (802ff30 <_free_r+0x9c>)
 802feae:	9801      	ldr	r0, [sp, #4]
 802feb0:	6813      	ldr	r3, [r2, #0]
 802feb2:	4615      	mov	r5, r2
 802feb4:	b933      	cbnz	r3, 802fec4 <_free_r+0x30>
 802feb6:	6063      	str	r3, [r4, #4]
 802feb8:	6014      	str	r4, [r2, #0]
 802feba:	b003      	add	sp, #12
 802febc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802fec0:	f000 be66 	b.w	8030b90 <__malloc_unlock>
 802fec4:	42a3      	cmp	r3, r4
 802fec6:	d90b      	bls.n	802fee0 <_free_r+0x4c>
 802fec8:	6821      	ldr	r1, [r4, #0]
 802feca:	1862      	adds	r2, r4, r1
 802fecc:	4293      	cmp	r3, r2
 802fece:	bf02      	ittt	eq
 802fed0:	681a      	ldreq	r2, [r3, #0]
 802fed2:	685b      	ldreq	r3, [r3, #4]
 802fed4:	1852      	addeq	r2, r2, r1
 802fed6:	6063      	str	r3, [r4, #4]
 802fed8:	bf08      	it	eq
 802feda:	6022      	streq	r2, [r4, #0]
 802fedc:	602c      	str	r4, [r5, #0]
 802fede:	e7ec      	b.n	802feba <_free_r+0x26>
 802fee0:	461a      	mov	r2, r3
 802fee2:	685b      	ldr	r3, [r3, #4]
 802fee4:	b10b      	cbz	r3, 802feea <_free_r+0x56>
 802fee6:	42a3      	cmp	r3, r4
 802fee8:	d9fa      	bls.n	802fee0 <_free_r+0x4c>
 802feea:	6811      	ldr	r1, [r2, #0]
 802feec:	1855      	adds	r5, r2, r1
 802feee:	42a5      	cmp	r5, r4
 802fef0:	d10b      	bne.n	802ff0a <_free_r+0x76>
 802fef2:	6824      	ldr	r4, [r4, #0]
 802fef4:	4421      	add	r1, r4
 802fef6:	1854      	adds	r4, r2, r1
 802fef8:	6011      	str	r1, [r2, #0]
 802fefa:	42a3      	cmp	r3, r4
 802fefc:	d1dd      	bne.n	802feba <_free_r+0x26>
 802fefe:	681c      	ldr	r4, [r3, #0]
 802ff00:	685b      	ldr	r3, [r3, #4]
 802ff02:	4421      	add	r1, r4
 802ff04:	6053      	str	r3, [r2, #4]
 802ff06:	6011      	str	r1, [r2, #0]
 802ff08:	e7d7      	b.n	802feba <_free_r+0x26>
 802ff0a:	d902      	bls.n	802ff12 <_free_r+0x7e>
 802ff0c:	230c      	movs	r3, #12
 802ff0e:	6003      	str	r3, [r0, #0]
 802ff10:	e7d3      	b.n	802feba <_free_r+0x26>
 802ff12:	6825      	ldr	r5, [r4, #0]
 802ff14:	1961      	adds	r1, r4, r5
 802ff16:	428b      	cmp	r3, r1
 802ff18:	bf02      	ittt	eq
 802ff1a:	6819      	ldreq	r1, [r3, #0]
 802ff1c:	685b      	ldreq	r3, [r3, #4]
 802ff1e:	1949      	addeq	r1, r1, r5
 802ff20:	6063      	str	r3, [r4, #4]
 802ff22:	bf08      	it	eq
 802ff24:	6021      	streq	r1, [r4, #0]
 802ff26:	6054      	str	r4, [r2, #4]
 802ff28:	e7c7      	b.n	802feba <_free_r+0x26>
 802ff2a:	b003      	add	sp, #12
 802ff2c:	bd30      	pop	{r4, r5, pc}
 802ff2e:	bf00      	nop
 802ff30:	2001bc48 	.word	0x2001bc48

0802ff34 <_malloc_r>:
 802ff34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ff36:	1ccd      	adds	r5, r1, #3
 802ff38:	4606      	mov	r6, r0
 802ff3a:	f025 0503 	bic.w	r5, r5, #3
 802ff3e:	3508      	adds	r5, #8
 802ff40:	2d0c      	cmp	r5, #12
 802ff42:	bf38      	it	cc
 802ff44:	250c      	movcc	r5, #12
 802ff46:	2d00      	cmp	r5, #0
 802ff48:	db01      	blt.n	802ff4e <_malloc_r+0x1a>
 802ff4a:	42a9      	cmp	r1, r5
 802ff4c:	d903      	bls.n	802ff56 <_malloc_r+0x22>
 802ff4e:	230c      	movs	r3, #12
 802ff50:	6033      	str	r3, [r6, #0]
 802ff52:	2000      	movs	r0, #0
 802ff54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802ff56:	f000 fe15 	bl	8030b84 <__malloc_lock>
 802ff5a:	4921      	ldr	r1, [pc, #132]	; (802ffe0 <_malloc_r+0xac>)
 802ff5c:	680a      	ldr	r2, [r1, #0]
 802ff5e:	4614      	mov	r4, r2
 802ff60:	b99c      	cbnz	r4, 802ff8a <_malloc_r+0x56>
 802ff62:	4f20      	ldr	r7, [pc, #128]	; (802ffe4 <_malloc_r+0xb0>)
 802ff64:	683b      	ldr	r3, [r7, #0]
 802ff66:	b923      	cbnz	r3, 802ff72 <_malloc_r+0x3e>
 802ff68:	4621      	mov	r1, r4
 802ff6a:	4630      	mov	r0, r6
 802ff6c:	f000 f938 	bl	80301e0 <_sbrk_r>
 802ff70:	6038      	str	r0, [r7, #0]
 802ff72:	4629      	mov	r1, r5
 802ff74:	4630      	mov	r0, r6
 802ff76:	f000 f933 	bl	80301e0 <_sbrk_r>
 802ff7a:	1c43      	adds	r3, r0, #1
 802ff7c:	d123      	bne.n	802ffc6 <_malloc_r+0x92>
 802ff7e:	230c      	movs	r3, #12
 802ff80:	4630      	mov	r0, r6
 802ff82:	6033      	str	r3, [r6, #0]
 802ff84:	f000 fe04 	bl	8030b90 <__malloc_unlock>
 802ff88:	e7e3      	b.n	802ff52 <_malloc_r+0x1e>
 802ff8a:	6823      	ldr	r3, [r4, #0]
 802ff8c:	1b5b      	subs	r3, r3, r5
 802ff8e:	d417      	bmi.n	802ffc0 <_malloc_r+0x8c>
 802ff90:	2b0b      	cmp	r3, #11
 802ff92:	d903      	bls.n	802ff9c <_malloc_r+0x68>
 802ff94:	6023      	str	r3, [r4, #0]
 802ff96:	441c      	add	r4, r3
 802ff98:	6025      	str	r5, [r4, #0]
 802ff9a:	e004      	b.n	802ffa6 <_malloc_r+0x72>
 802ff9c:	6863      	ldr	r3, [r4, #4]
 802ff9e:	42a2      	cmp	r2, r4
 802ffa0:	bf0c      	ite	eq
 802ffa2:	600b      	streq	r3, [r1, #0]
 802ffa4:	6053      	strne	r3, [r2, #4]
 802ffa6:	4630      	mov	r0, r6
 802ffa8:	f000 fdf2 	bl	8030b90 <__malloc_unlock>
 802ffac:	f104 000b 	add.w	r0, r4, #11
 802ffb0:	1d23      	adds	r3, r4, #4
 802ffb2:	f020 0007 	bic.w	r0, r0, #7
 802ffb6:	1ac2      	subs	r2, r0, r3
 802ffb8:	d0cc      	beq.n	802ff54 <_malloc_r+0x20>
 802ffba:	1a1b      	subs	r3, r3, r0
 802ffbc:	50a3      	str	r3, [r4, r2]
 802ffbe:	e7c9      	b.n	802ff54 <_malloc_r+0x20>
 802ffc0:	4622      	mov	r2, r4
 802ffc2:	6864      	ldr	r4, [r4, #4]
 802ffc4:	e7cc      	b.n	802ff60 <_malloc_r+0x2c>
 802ffc6:	1cc4      	adds	r4, r0, #3
 802ffc8:	f024 0403 	bic.w	r4, r4, #3
 802ffcc:	42a0      	cmp	r0, r4
 802ffce:	d0e3      	beq.n	802ff98 <_malloc_r+0x64>
 802ffd0:	1a21      	subs	r1, r4, r0
 802ffd2:	4630      	mov	r0, r6
 802ffd4:	f000 f904 	bl	80301e0 <_sbrk_r>
 802ffd8:	3001      	adds	r0, #1
 802ffda:	d1dd      	bne.n	802ff98 <_malloc_r+0x64>
 802ffdc:	e7cf      	b.n	802ff7e <_malloc_r+0x4a>
 802ffde:	bf00      	nop
 802ffe0:	2001bc48 	.word	0x2001bc48
 802ffe4:	2001bc4c 	.word	0x2001bc4c

0802ffe8 <iprintf>:
 802ffe8:	b40f      	push	{r0, r1, r2, r3}
 802ffea:	4b0a      	ldr	r3, [pc, #40]	; (8030014 <iprintf+0x2c>)
 802ffec:	b513      	push	{r0, r1, r4, lr}
 802ffee:	681c      	ldr	r4, [r3, #0]
 802fff0:	b124      	cbz	r4, 802fffc <iprintf+0x14>
 802fff2:	69a3      	ldr	r3, [r4, #24]
 802fff4:	b913      	cbnz	r3, 802fffc <iprintf+0x14>
 802fff6:	4620      	mov	r0, r4
 802fff8:	f000 fcae 	bl	8030958 <__sinit>
 802fffc:	ab05      	add	r3, sp, #20
 802fffe:	9a04      	ldr	r2, [sp, #16]
 8030000:	68a1      	ldr	r1, [r4, #8]
 8030002:	4620      	mov	r0, r4
 8030004:	9301      	str	r3, [sp, #4]
 8030006:	f000 ff4f 	bl	8030ea8 <_vfiprintf_r>
 803000a:	b002      	add	sp, #8
 803000c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8030010:	b004      	add	sp, #16
 8030012:	4770      	bx	lr
 8030014:	20018300 	.word	0x20018300

08030018 <_puts_r>:
 8030018:	b570      	push	{r4, r5, r6, lr}
 803001a:	460e      	mov	r6, r1
 803001c:	4605      	mov	r5, r0
 803001e:	b118      	cbz	r0, 8030028 <_puts_r+0x10>
 8030020:	6983      	ldr	r3, [r0, #24]
 8030022:	b90b      	cbnz	r3, 8030028 <_puts_r+0x10>
 8030024:	f000 fc98 	bl	8030958 <__sinit>
 8030028:	69ab      	ldr	r3, [r5, #24]
 803002a:	68ac      	ldr	r4, [r5, #8]
 803002c:	b913      	cbnz	r3, 8030034 <_puts_r+0x1c>
 803002e:	4628      	mov	r0, r5
 8030030:	f000 fc92 	bl	8030958 <__sinit>
 8030034:	4b2c      	ldr	r3, [pc, #176]	; (80300e8 <_puts_r+0xd0>)
 8030036:	429c      	cmp	r4, r3
 8030038:	d120      	bne.n	803007c <_puts_r+0x64>
 803003a:	686c      	ldr	r4, [r5, #4]
 803003c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 803003e:	07db      	lsls	r3, r3, #31
 8030040:	d405      	bmi.n	803004e <_puts_r+0x36>
 8030042:	89a3      	ldrh	r3, [r4, #12]
 8030044:	0598      	lsls	r0, r3, #22
 8030046:	d402      	bmi.n	803004e <_puts_r+0x36>
 8030048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803004a:	f000 fd35 	bl	8030ab8 <__retarget_lock_acquire_recursive>
 803004e:	89a3      	ldrh	r3, [r4, #12]
 8030050:	0719      	lsls	r1, r3, #28
 8030052:	d51d      	bpl.n	8030090 <_puts_r+0x78>
 8030054:	6923      	ldr	r3, [r4, #16]
 8030056:	b1db      	cbz	r3, 8030090 <_puts_r+0x78>
 8030058:	3e01      	subs	r6, #1
 803005a:	68a3      	ldr	r3, [r4, #8]
 803005c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8030060:	3b01      	subs	r3, #1
 8030062:	60a3      	str	r3, [r4, #8]
 8030064:	bb39      	cbnz	r1, 80300b6 <_puts_r+0x9e>
 8030066:	2b00      	cmp	r3, #0
 8030068:	da38      	bge.n	80300dc <_puts_r+0xc4>
 803006a:	4622      	mov	r2, r4
 803006c:	210a      	movs	r1, #10
 803006e:	4628      	mov	r0, r5
 8030070:	f000 fa7c 	bl	803056c <__swbuf_r>
 8030074:	3001      	adds	r0, #1
 8030076:	d011      	beq.n	803009c <_puts_r+0x84>
 8030078:	250a      	movs	r5, #10
 803007a:	e011      	b.n	80300a0 <_puts_r+0x88>
 803007c:	4b1b      	ldr	r3, [pc, #108]	; (80300ec <_puts_r+0xd4>)
 803007e:	429c      	cmp	r4, r3
 8030080:	d101      	bne.n	8030086 <_puts_r+0x6e>
 8030082:	68ac      	ldr	r4, [r5, #8]
 8030084:	e7da      	b.n	803003c <_puts_r+0x24>
 8030086:	4b1a      	ldr	r3, [pc, #104]	; (80300f0 <_puts_r+0xd8>)
 8030088:	429c      	cmp	r4, r3
 803008a:	bf08      	it	eq
 803008c:	68ec      	ldreq	r4, [r5, #12]
 803008e:	e7d5      	b.n	803003c <_puts_r+0x24>
 8030090:	4621      	mov	r1, r4
 8030092:	4628      	mov	r0, r5
 8030094:	f000 fabc 	bl	8030610 <__swsetup_r>
 8030098:	2800      	cmp	r0, #0
 803009a:	d0dd      	beq.n	8030058 <_puts_r+0x40>
 803009c:	f04f 35ff 	mov.w	r5, #4294967295
 80300a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80300a2:	07da      	lsls	r2, r3, #31
 80300a4:	d405      	bmi.n	80300b2 <_puts_r+0x9a>
 80300a6:	89a3      	ldrh	r3, [r4, #12]
 80300a8:	059b      	lsls	r3, r3, #22
 80300aa:	d402      	bmi.n	80300b2 <_puts_r+0x9a>
 80300ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80300ae:	f000 fd04 	bl	8030aba <__retarget_lock_release_recursive>
 80300b2:	4628      	mov	r0, r5
 80300b4:	bd70      	pop	{r4, r5, r6, pc}
 80300b6:	2b00      	cmp	r3, #0
 80300b8:	da04      	bge.n	80300c4 <_puts_r+0xac>
 80300ba:	69a2      	ldr	r2, [r4, #24]
 80300bc:	429a      	cmp	r2, r3
 80300be:	dc06      	bgt.n	80300ce <_puts_r+0xb6>
 80300c0:	290a      	cmp	r1, #10
 80300c2:	d004      	beq.n	80300ce <_puts_r+0xb6>
 80300c4:	6823      	ldr	r3, [r4, #0]
 80300c6:	1c5a      	adds	r2, r3, #1
 80300c8:	6022      	str	r2, [r4, #0]
 80300ca:	7019      	strb	r1, [r3, #0]
 80300cc:	e7c5      	b.n	803005a <_puts_r+0x42>
 80300ce:	4622      	mov	r2, r4
 80300d0:	4628      	mov	r0, r5
 80300d2:	f000 fa4b 	bl	803056c <__swbuf_r>
 80300d6:	3001      	adds	r0, #1
 80300d8:	d1bf      	bne.n	803005a <_puts_r+0x42>
 80300da:	e7df      	b.n	803009c <_puts_r+0x84>
 80300dc:	6823      	ldr	r3, [r4, #0]
 80300de:	250a      	movs	r5, #10
 80300e0:	1c5a      	adds	r2, r3, #1
 80300e2:	6022      	str	r2, [r4, #0]
 80300e4:	701d      	strb	r5, [r3, #0]
 80300e6:	e7db      	b.n	80300a0 <_puts_r+0x88>
 80300e8:	080360f0 	.word	0x080360f0
 80300ec:	08036110 	.word	0x08036110
 80300f0:	080360d0 	.word	0x080360d0

080300f4 <puts>:
 80300f4:	4b02      	ldr	r3, [pc, #8]	; (8030100 <puts+0xc>)
 80300f6:	4601      	mov	r1, r0
 80300f8:	6818      	ldr	r0, [r3, #0]
 80300fa:	f7ff bf8d 	b.w	8030018 <_puts_r>
 80300fe:	bf00      	nop
 8030100:	20018300 	.word	0x20018300

08030104 <srand>:
 8030104:	b538      	push	{r3, r4, r5, lr}
 8030106:	4b10      	ldr	r3, [pc, #64]	; (8030148 <srand+0x44>)
 8030108:	4604      	mov	r4, r0
 803010a:	681d      	ldr	r5, [r3, #0]
 803010c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 803010e:	b9b3      	cbnz	r3, 803013e <srand+0x3a>
 8030110:	2018      	movs	r0, #24
 8030112:	f7ff fe63 	bl	802fddc <malloc>
 8030116:	4602      	mov	r2, r0
 8030118:	63a8      	str	r0, [r5, #56]	; 0x38
 803011a:	b920      	cbnz	r0, 8030126 <srand+0x22>
 803011c:	4b0b      	ldr	r3, [pc, #44]	; (803014c <srand+0x48>)
 803011e:	2142      	movs	r1, #66	; 0x42
 8030120:	480b      	ldr	r0, [pc, #44]	; (8030150 <srand+0x4c>)
 8030122:	f000 fae3 	bl	80306ec <__assert_func>
 8030126:	490b      	ldr	r1, [pc, #44]	; (8030154 <srand+0x50>)
 8030128:	4b0b      	ldr	r3, [pc, #44]	; (8030158 <srand+0x54>)
 803012a:	e9c0 1300 	strd	r1, r3, [r0]
 803012e:	4b0b      	ldr	r3, [pc, #44]	; (803015c <srand+0x58>)
 8030130:	2100      	movs	r1, #0
 8030132:	6083      	str	r3, [r0, #8]
 8030134:	230b      	movs	r3, #11
 8030136:	8183      	strh	r3, [r0, #12]
 8030138:	2001      	movs	r0, #1
 803013a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 803013e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8030140:	2200      	movs	r2, #0
 8030142:	611c      	str	r4, [r3, #16]
 8030144:	615a      	str	r2, [r3, #20]
 8030146:	bd38      	pop	{r3, r4, r5, pc}
 8030148:	20018300 	.word	0x20018300
 803014c:	08035fbc 	.word	0x08035fbc
 8030150:	08035fd3 	.word	0x08035fd3
 8030154:	abcd330e 	.word	0xabcd330e
 8030158:	e66d1234 	.word	0xe66d1234
 803015c:	0005deec 	.word	0x0005deec

08030160 <rand>:
 8030160:	4b17      	ldr	r3, [pc, #92]	; (80301c0 <rand+0x60>)
 8030162:	b510      	push	{r4, lr}
 8030164:	681c      	ldr	r4, [r3, #0]
 8030166:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8030168:	b9b3      	cbnz	r3, 8030198 <rand+0x38>
 803016a:	2018      	movs	r0, #24
 803016c:	f7ff fe36 	bl	802fddc <malloc>
 8030170:	63a0      	str	r0, [r4, #56]	; 0x38
 8030172:	b928      	cbnz	r0, 8030180 <rand+0x20>
 8030174:	4602      	mov	r2, r0
 8030176:	4b13      	ldr	r3, [pc, #76]	; (80301c4 <rand+0x64>)
 8030178:	214e      	movs	r1, #78	; 0x4e
 803017a:	4813      	ldr	r0, [pc, #76]	; (80301c8 <rand+0x68>)
 803017c:	f000 fab6 	bl	80306ec <__assert_func>
 8030180:	4a12      	ldr	r2, [pc, #72]	; (80301cc <rand+0x6c>)
 8030182:	4b13      	ldr	r3, [pc, #76]	; (80301d0 <rand+0x70>)
 8030184:	e9c0 2300 	strd	r2, r3, [r0]
 8030188:	4b12      	ldr	r3, [pc, #72]	; (80301d4 <rand+0x74>)
 803018a:	2201      	movs	r2, #1
 803018c:	6083      	str	r3, [r0, #8]
 803018e:	230b      	movs	r3, #11
 8030190:	8183      	strh	r3, [r0, #12]
 8030192:	2300      	movs	r3, #0
 8030194:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8030198:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 803019a:	480f      	ldr	r0, [pc, #60]	; (80301d8 <rand+0x78>)
 803019c:	690a      	ldr	r2, [r1, #16]
 803019e:	694b      	ldr	r3, [r1, #20]
 80301a0:	4c0e      	ldr	r4, [pc, #56]	; (80301dc <rand+0x7c>)
 80301a2:	4350      	muls	r0, r2
 80301a4:	fb04 0003 	mla	r0, r4, r3, r0
 80301a8:	fba2 3404 	umull	r3, r4, r2, r4
 80301ac:	1c5a      	adds	r2, r3, #1
 80301ae:	4404      	add	r4, r0
 80301b0:	f144 0000 	adc.w	r0, r4, #0
 80301b4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80301b8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80301bc:	bd10      	pop	{r4, pc}
 80301be:	bf00      	nop
 80301c0:	20018300 	.word	0x20018300
 80301c4:	08035fbc 	.word	0x08035fbc
 80301c8:	08035fd3 	.word	0x08035fd3
 80301cc:	abcd330e 	.word	0xabcd330e
 80301d0:	e66d1234 	.word	0xe66d1234
 80301d4:	0005deec 	.word	0x0005deec
 80301d8:	5851f42d 	.word	0x5851f42d
 80301dc:	4c957f2d 	.word	0x4c957f2d

080301e0 <_sbrk_r>:
 80301e0:	b538      	push	{r3, r4, r5, lr}
 80301e2:	2300      	movs	r3, #0
 80301e4:	4d05      	ldr	r5, [pc, #20]	; (80301fc <_sbrk_r+0x1c>)
 80301e6:	4604      	mov	r4, r0
 80301e8:	4608      	mov	r0, r1
 80301ea:	602b      	str	r3, [r5, #0]
 80301ec:	f7e0 fd00 	bl	8010bf0 <_sbrk>
 80301f0:	1c43      	adds	r3, r0, #1
 80301f2:	d102      	bne.n	80301fa <_sbrk_r+0x1a>
 80301f4:	682b      	ldr	r3, [r5, #0]
 80301f6:	b103      	cbz	r3, 80301fa <_sbrk_r+0x1a>
 80301f8:	6023      	str	r3, [r4, #0]
 80301fa:	bd38      	pop	{r3, r4, r5, pc}
 80301fc:	2001fedc 	.word	0x2001fedc

08030200 <sniprintf>:
 8030200:	b40c      	push	{r2, r3}
 8030202:	4b18      	ldr	r3, [pc, #96]	; (8030264 <sniprintf+0x64>)
 8030204:	b530      	push	{r4, r5, lr}
 8030206:	1e0c      	subs	r4, r1, #0
 8030208:	b09d      	sub	sp, #116	; 0x74
 803020a:	681d      	ldr	r5, [r3, #0]
 803020c:	da08      	bge.n	8030220 <sniprintf+0x20>
 803020e:	238b      	movs	r3, #139	; 0x8b
 8030210:	f04f 30ff 	mov.w	r0, #4294967295
 8030214:	602b      	str	r3, [r5, #0]
 8030216:	b01d      	add	sp, #116	; 0x74
 8030218:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 803021c:	b002      	add	sp, #8
 803021e:	4770      	bx	lr
 8030220:	f44f 7302 	mov.w	r3, #520	; 0x208
 8030224:	9002      	str	r0, [sp, #8]
 8030226:	9006      	str	r0, [sp, #24]
 8030228:	a902      	add	r1, sp, #8
 803022a:	f8ad 3014 	strh.w	r3, [sp, #20]
 803022e:	bf14      	ite	ne
 8030230:	f104 33ff 	addne.w	r3, r4, #4294967295
 8030234:	4623      	moveq	r3, r4
 8030236:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8030238:	4628      	mov	r0, r5
 803023a:	9304      	str	r3, [sp, #16]
 803023c:	9307      	str	r3, [sp, #28]
 803023e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8030242:	f8ad 3016 	strh.w	r3, [sp, #22]
 8030246:	ab21      	add	r3, sp, #132	; 0x84
 8030248:	9301      	str	r3, [sp, #4]
 803024a:	f000 fd03 	bl	8030c54 <_svfiprintf_r>
 803024e:	1c43      	adds	r3, r0, #1
 8030250:	bfbc      	itt	lt
 8030252:	238b      	movlt	r3, #139	; 0x8b
 8030254:	602b      	strlt	r3, [r5, #0]
 8030256:	2c00      	cmp	r4, #0
 8030258:	d0dd      	beq.n	8030216 <sniprintf+0x16>
 803025a:	9b02      	ldr	r3, [sp, #8]
 803025c:	2200      	movs	r2, #0
 803025e:	701a      	strb	r2, [r3, #0]
 8030260:	e7d9      	b.n	8030216 <sniprintf+0x16>
 8030262:	bf00      	nop
 8030264:	20018300 	.word	0x20018300

08030268 <siprintf>:
 8030268:	b40e      	push	{r1, r2, r3}
 803026a:	b500      	push	{lr}
 803026c:	b09c      	sub	sp, #112	; 0x70
 803026e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8030272:	ab1d      	add	r3, sp, #116	; 0x74
 8030274:	9002      	str	r0, [sp, #8]
 8030276:	9006      	str	r0, [sp, #24]
 8030278:	9107      	str	r1, [sp, #28]
 803027a:	9104      	str	r1, [sp, #16]
 803027c:	4808      	ldr	r0, [pc, #32]	; (80302a0 <siprintf+0x38>)
 803027e:	4909      	ldr	r1, [pc, #36]	; (80302a4 <siprintf+0x3c>)
 8030280:	f853 2b04 	ldr.w	r2, [r3], #4
 8030284:	9105      	str	r1, [sp, #20]
 8030286:	a902      	add	r1, sp, #8
 8030288:	6800      	ldr	r0, [r0, #0]
 803028a:	9301      	str	r3, [sp, #4]
 803028c:	f000 fce2 	bl	8030c54 <_svfiprintf_r>
 8030290:	9b02      	ldr	r3, [sp, #8]
 8030292:	2200      	movs	r2, #0
 8030294:	701a      	strb	r2, [r3, #0]
 8030296:	b01c      	add	sp, #112	; 0x70
 8030298:	f85d eb04 	ldr.w	lr, [sp], #4
 803029c:	b003      	add	sp, #12
 803029e:	4770      	bx	lr
 80302a0:	20018300 	.word	0x20018300
 80302a4:	ffff0208 	.word	0xffff0208

080302a8 <stpcpy>:
 80302a8:	4603      	mov	r3, r0
 80302aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80302ae:	4618      	mov	r0, r3
 80302b0:	f803 2b01 	strb.w	r2, [r3], #1
 80302b4:	2a00      	cmp	r2, #0
 80302b6:	d1f8      	bne.n	80302aa <stpcpy+0x2>
 80302b8:	4770      	bx	lr

080302ba <strchr>:
 80302ba:	b2c9      	uxtb	r1, r1
 80302bc:	4603      	mov	r3, r0
 80302be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80302c2:	b11a      	cbz	r2, 80302cc <strchr+0x12>
 80302c4:	428a      	cmp	r2, r1
 80302c6:	d1f9      	bne.n	80302bc <strchr+0x2>
 80302c8:	4618      	mov	r0, r3
 80302ca:	4770      	bx	lr
 80302cc:	2900      	cmp	r1, #0
 80302ce:	bf18      	it	ne
 80302d0:	2300      	movne	r3, #0
 80302d2:	e7f9      	b.n	80302c8 <strchr+0xe>

080302d4 <strcpy>:
 80302d4:	4603      	mov	r3, r0
 80302d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80302da:	f803 2b01 	strb.w	r2, [r3], #1
 80302de:	2a00      	cmp	r2, #0
 80302e0:	d1f9      	bne.n	80302d6 <strcpy+0x2>
 80302e2:	4770      	bx	lr

080302e4 <strncmp>:
 80302e4:	b510      	push	{r4, lr}
 80302e6:	b16a      	cbz	r2, 8030304 <strncmp+0x20>
 80302e8:	3901      	subs	r1, #1
 80302ea:	1884      	adds	r4, r0, r2
 80302ec:	f810 3b01 	ldrb.w	r3, [r0], #1
 80302f0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80302f4:	4293      	cmp	r3, r2
 80302f6:	d103      	bne.n	8030300 <strncmp+0x1c>
 80302f8:	42a0      	cmp	r0, r4
 80302fa:	d001      	beq.n	8030300 <strncmp+0x1c>
 80302fc:	2b00      	cmp	r3, #0
 80302fe:	d1f5      	bne.n	80302ec <strncmp+0x8>
 8030300:	1a98      	subs	r0, r3, r2
 8030302:	bd10      	pop	{r4, pc}
 8030304:	4610      	mov	r0, r2
 8030306:	e7fc      	b.n	8030302 <strncmp+0x1e>

08030308 <strncpy>:
 8030308:	3901      	subs	r1, #1
 803030a:	4603      	mov	r3, r0
 803030c:	b510      	push	{r4, lr}
 803030e:	b132      	cbz	r2, 803031e <strncpy+0x16>
 8030310:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8030314:	3a01      	subs	r2, #1
 8030316:	f803 4b01 	strb.w	r4, [r3], #1
 803031a:	2c00      	cmp	r4, #0
 803031c:	d1f7      	bne.n	803030e <strncpy+0x6>
 803031e:	441a      	add	r2, r3
 8030320:	2100      	movs	r1, #0
 8030322:	4293      	cmp	r3, r2
 8030324:	d100      	bne.n	8030328 <strncpy+0x20>
 8030326:	bd10      	pop	{r4, pc}
 8030328:	f803 1b01 	strb.w	r1, [r3], #1
 803032c:	e7f9      	b.n	8030322 <strncpy+0x1a>

0803032e <strstr>:
 803032e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8030330:	780c      	ldrb	r4, [r1, #0]
 8030332:	b164      	cbz	r4, 803034e <strstr+0x20>
 8030334:	4603      	mov	r3, r0
 8030336:	781a      	ldrb	r2, [r3, #0]
 8030338:	4618      	mov	r0, r3
 803033a:	1c5e      	adds	r6, r3, #1
 803033c:	b90a      	cbnz	r2, 8030342 <strstr+0x14>
 803033e:	4610      	mov	r0, r2
 8030340:	e005      	b.n	803034e <strstr+0x20>
 8030342:	4294      	cmp	r4, r2
 8030344:	d108      	bne.n	8030358 <strstr+0x2a>
 8030346:	460d      	mov	r5, r1
 8030348:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 803034c:	b902      	cbnz	r2, 8030350 <strstr+0x22>
 803034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8030350:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8030354:	4297      	cmp	r7, r2
 8030356:	d0f7      	beq.n	8030348 <strstr+0x1a>
 8030358:	4633      	mov	r3, r6
 803035a:	e7ec      	b.n	8030336 <strstr+0x8>

0803035c <strtok>:
 803035c:	4b16      	ldr	r3, [pc, #88]	; (80303b8 <strtok+0x5c>)
 803035e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8030360:	681e      	ldr	r6, [r3, #0]
 8030362:	4605      	mov	r5, r0
 8030364:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8030366:	b9fc      	cbnz	r4, 80303a8 <strtok+0x4c>
 8030368:	2050      	movs	r0, #80	; 0x50
 803036a:	9101      	str	r1, [sp, #4]
 803036c:	f7ff fd36 	bl	802fddc <malloc>
 8030370:	9901      	ldr	r1, [sp, #4]
 8030372:	4602      	mov	r2, r0
 8030374:	65b0      	str	r0, [r6, #88]	; 0x58
 8030376:	b920      	cbnz	r0, 8030382 <strtok+0x26>
 8030378:	4b10      	ldr	r3, [pc, #64]	; (80303bc <strtok+0x60>)
 803037a:	2157      	movs	r1, #87	; 0x57
 803037c:	4810      	ldr	r0, [pc, #64]	; (80303c0 <strtok+0x64>)
 803037e:	f000 f9b5 	bl	80306ec <__assert_func>
 8030382:	e9c0 4400 	strd	r4, r4, [r0]
 8030386:	e9c0 4402 	strd	r4, r4, [r0, #8]
 803038a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 803038e:	6184      	str	r4, [r0, #24]
 8030390:	7704      	strb	r4, [r0, #28]
 8030392:	6244      	str	r4, [r0, #36]	; 0x24
 8030394:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8030398:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 803039c:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80303a0:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80303a4:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80303a8:	2301      	movs	r3, #1
 80303aa:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80303ac:	4628      	mov	r0, r5
 80303ae:	b002      	add	sp, #8
 80303b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80303b4:	f000 b806 	b.w	80303c4 <__strtok_r>
 80303b8:	20018300 	.word	0x20018300
 80303bc:	08035fbc 	.word	0x08035fbc
 80303c0:	08036032 	.word	0x08036032

080303c4 <__strtok_r>:
 80303c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80303c6:	b908      	cbnz	r0, 80303cc <__strtok_r+0x8>
 80303c8:	6810      	ldr	r0, [r2, #0]
 80303ca:	b188      	cbz	r0, 80303f0 <__strtok_r+0x2c>
 80303cc:	4604      	mov	r4, r0
 80303ce:	4620      	mov	r0, r4
 80303d0:	460f      	mov	r7, r1
 80303d2:	f814 5b01 	ldrb.w	r5, [r4], #1
 80303d6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80303da:	b91e      	cbnz	r6, 80303e4 <__strtok_r+0x20>
 80303dc:	b965      	cbnz	r5, 80303f8 <__strtok_r+0x34>
 80303de:	4628      	mov	r0, r5
 80303e0:	6015      	str	r5, [r2, #0]
 80303e2:	e005      	b.n	80303f0 <__strtok_r+0x2c>
 80303e4:	42b5      	cmp	r5, r6
 80303e6:	d1f6      	bne.n	80303d6 <__strtok_r+0x12>
 80303e8:	2b00      	cmp	r3, #0
 80303ea:	d1f0      	bne.n	80303ce <__strtok_r+0xa>
 80303ec:	6014      	str	r4, [r2, #0]
 80303ee:	7003      	strb	r3, [r0, #0]
 80303f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80303f2:	461c      	mov	r4, r3
 80303f4:	e00c      	b.n	8030410 <__strtok_r+0x4c>
 80303f6:	b915      	cbnz	r5, 80303fe <__strtok_r+0x3a>
 80303f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80303fc:	460e      	mov	r6, r1
 80303fe:	f816 5b01 	ldrb.w	r5, [r6], #1
 8030402:	42ab      	cmp	r3, r5
 8030404:	d1f7      	bne.n	80303f6 <__strtok_r+0x32>
 8030406:	2b00      	cmp	r3, #0
 8030408:	d0f3      	beq.n	80303f2 <__strtok_r+0x2e>
 803040a:	2300      	movs	r3, #0
 803040c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8030410:	6014      	str	r4, [r2, #0]
 8030412:	e7ed      	b.n	80303f0 <__strtok_r+0x2c>

08030414 <_strtol_l.isra.0>:
 8030414:	2b01      	cmp	r3, #1
 8030416:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803041a:	d001      	beq.n	8030420 <_strtol_l.isra.0+0xc>
 803041c:	2b24      	cmp	r3, #36	; 0x24
 803041e:	d906      	bls.n	803042e <_strtol_l.isra.0+0x1a>
 8030420:	f7ff fcb2 	bl	802fd88 <__errno>
 8030424:	2316      	movs	r3, #22
 8030426:	6003      	str	r3, [r0, #0]
 8030428:	2000      	movs	r0, #0
 803042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803042e:	468e      	mov	lr, r1
 8030430:	4f38      	ldr	r7, [pc, #224]	; (8030514 <_strtol_l.isra.0+0x100>)
 8030432:	4676      	mov	r6, lr
 8030434:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8030438:	5de5      	ldrb	r5, [r4, r7]
 803043a:	f015 0508 	ands.w	r5, r5, #8
 803043e:	d1f8      	bne.n	8030432 <_strtol_l.isra.0+0x1e>
 8030440:	2c2d      	cmp	r4, #45	; 0x2d
 8030442:	d134      	bne.n	80304ae <_strtol_l.isra.0+0x9a>
 8030444:	f89e 4000 	ldrb.w	r4, [lr]
 8030448:	f04f 0801 	mov.w	r8, #1
 803044c:	f106 0e02 	add.w	lr, r6, #2
 8030450:	2b00      	cmp	r3, #0
 8030452:	d05b      	beq.n	803050c <_strtol_l.isra.0+0xf8>
 8030454:	2b10      	cmp	r3, #16
 8030456:	d10c      	bne.n	8030472 <_strtol_l.isra.0+0x5e>
 8030458:	2c30      	cmp	r4, #48	; 0x30
 803045a:	d10a      	bne.n	8030472 <_strtol_l.isra.0+0x5e>
 803045c:	f89e 4000 	ldrb.w	r4, [lr]
 8030460:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8030464:	2c58      	cmp	r4, #88	; 0x58
 8030466:	d14c      	bne.n	8030502 <_strtol_l.isra.0+0xee>
 8030468:	f89e 4001 	ldrb.w	r4, [lr, #1]
 803046c:	2310      	movs	r3, #16
 803046e:	f10e 0e02 	add.w	lr, lr, #2
 8030472:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8030476:	2600      	movs	r6, #0
 8030478:	f10c 3cff 	add.w	ip, ip, #4294967295
 803047c:	4635      	mov	r5, r6
 803047e:	fbbc f9f3 	udiv	r9, ip, r3
 8030482:	fb03 ca19 	mls	sl, r3, r9, ip
 8030486:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 803048a:	2f09      	cmp	r7, #9
 803048c:	d817      	bhi.n	80304be <_strtol_l.isra.0+0xaa>
 803048e:	463c      	mov	r4, r7
 8030490:	42a3      	cmp	r3, r4
 8030492:	dd23      	ble.n	80304dc <_strtol_l.isra.0+0xc8>
 8030494:	2e00      	cmp	r6, #0
 8030496:	db1e      	blt.n	80304d6 <_strtol_l.isra.0+0xc2>
 8030498:	45a9      	cmp	r9, r5
 803049a:	d31c      	bcc.n	80304d6 <_strtol_l.isra.0+0xc2>
 803049c:	d101      	bne.n	80304a2 <_strtol_l.isra.0+0x8e>
 803049e:	45a2      	cmp	sl, r4
 80304a0:	db19      	blt.n	80304d6 <_strtol_l.isra.0+0xc2>
 80304a2:	fb05 4503 	mla	r5, r5, r3, r4
 80304a6:	2601      	movs	r6, #1
 80304a8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80304ac:	e7eb      	b.n	8030486 <_strtol_l.isra.0+0x72>
 80304ae:	2c2b      	cmp	r4, #43	; 0x2b
 80304b0:	46a8      	mov	r8, r5
 80304b2:	bf04      	itt	eq
 80304b4:	f89e 4000 	ldrbeq.w	r4, [lr]
 80304b8:	f106 0e02 	addeq.w	lr, r6, #2
 80304bc:	e7c8      	b.n	8030450 <_strtol_l.isra.0+0x3c>
 80304be:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80304c2:	2f19      	cmp	r7, #25
 80304c4:	d801      	bhi.n	80304ca <_strtol_l.isra.0+0xb6>
 80304c6:	3c37      	subs	r4, #55	; 0x37
 80304c8:	e7e2      	b.n	8030490 <_strtol_l.isra.0+0x7c>
 80304ca:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80304ce:	2f19      	cmp	r7, #25
 80304d0:	d804      	bhi.n	80304dc <_strtol_l.isra.0+0xc8>
 80304d2:	3c57      	subs	r4, #87	; 0x57
 80304d4:	e7dc      	b.n	8030490 <_strtol_l.isra.0+0x7c>
 80304d6:	f04f 36ff 	mov.w	r6, #4294967295
 80304da:	e7e5      	b.n	80304a8 <_strtol_l.isra.0+0x94>
 80304dc:	2e00      	cmp	r6, #0
 80304de:	da05      	bge.n	80304ec <_strtol_l.isra.0+0xd8>
 80304e0:	2322      	movs	r3, #34	; 0x22
 80304e2:	4665      	mov	r5, ip
 80304e4:	6003      	str	r3, [r0, #0]
 80304e6:	b942      	cbnz	r2, 80304fa <_strtol_l.isra.0+0xe6>
 80304e8:	4628      	mov	r0, r5
 80304ea:	e79e      	b.n	803042a <_strtol_l.isra.0+0x16>
 80304ec:	f1b8 0f00 	cmp.w	r8, #0
 80304f0:	d000      	beq.n	80304f4 <_strtol_l.isra.0+0xe0>
 80304f2:	426d      	negs	r5, r5
 80304f4:	2a00      	cmp	r2, #0
 80304f6:	d0f7      	beq.n	80304e8 <_strtol_l.isra.0+0xd4>
 80304f8:	b10e      	cbz	r6, 80304fe <_strtol_l.isra.0+0xea>
 80304fa:	f10e 31ff 	add.w	r1, lr, #4294967295
 80304fe:	6011      	str	r1, [r2, #0]
 8030500:	e7f2      	b.n	80304e8 <_strtol_l.isra.0+0xd4>
 8030502:	2430      	movs	r4, #48	; 0x30
 8030504:	2b00      	cmp	r3, #0
 8030506:	d1b4      	bne.n	8030472 <_strtol_l.isra.0+0x5e>
 8030508:	2308      	movs	r3, #8
 803050a:	e7b2      	b.n	8030472 <_strtol_l.isra.0+0x5e>
 803050c:	2c30      	cmp	r4, #48	; 0x30
 803050e:	d0a5      	beq.n	803045c <_strtol_l.isra.0+0x48>
 8030510:	230a      	movs	r3, #10
 8030512:	e7ae      	b.n	8030472 <_strtol_l.isra.0+0x5e>
 8030514:	08035eb5 	.word	0x08035eb5

08030518 <strtol>:
 8030518:	4613      	mov	r3, r2
 803051a:	460a      	mov	r2, r1
 803051c:	4601      	mov	r1, r0
 803051e:	4802      	ldr	r0, [pc, #8]	; (8030528 <strtol+0x10>)
 8030520:	6800      	ldr	r0, [r0, #0]
 8030522:	f7ff bf77 	b.w	8030414 <_strtol_l.isra.0>
 8030526:	bf00      	nop
 8030528:	20018300 	.word	0x20018300

0803052c <_vsiprintf_r>:
 803052c:	b500      	push	{lr}
 803052e:	b09b      	sub	sp, #108	; 0x6c
 8030530:	9100      	str	r1, [sp, #0]
 8030532:	9104      	str	r1, [sp, #16]
 8030534:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8030538:	9105      	str	r1, [sp, #20]
 803053a:	9102      	str	r1, [sp, #8]
 803053c:	4905      	ldr	r1, [pc, #20]	; (8030554 <_vsiprintf_r+0x28>)
 803053e:	9103      	str	r1, [sp, #12]
 8030540:	4669      	mov	r1, sp
 8030542:	f000 fb87 	bl	8030c54 <_svfiprintf_r>
 8030546:	9b00      	ldr	r3, [sp, #0]
 8030548:	2200      	movs	r2, #0
 803054a:	701a      	strb	r2, [r3, #0]
 803054c:	b01b      	add	sp, #108	; 0x6c
 803054e:	f85d fb04 	ldr.w	pc, [sp], #4
 8030552:	bf00      	nop
 8030554:	ffff0208 	.word	0xffff0208

08030558 <vsiprintf>:
 8030558:	4613      	mov	r3, r2
 803055a:	460a      	mov	r2, r1
 803055c:	4601      	mov	r1, r0
 803055e:	4802      	ldr	r0, [pc, #8]	; (8030568 <vsiprintf+0x10>)
 8030560:	6800      	ldr	r0, [r0, #0]
 8030562:	f7ff bfe3 	b.w	803052c <_vsiprintf_r>
 8030566:	bf00      	nop
 8030568:	20018300 	.word	0x20018300

0803056c <__swbuf_r>:
 803056c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803056e:	460e      	mov	r6, r1
 8030570:	4614      	mov	r4, r2
 8030572:	4605      	mov	r5, r0
 8030574:	b118      	cbz	r0, 803057e <__swbuf_r+0x12>
 8030576:	6983      	ldr	r3, [r0, #24]
 8030578:	b90b      	cbnz	r3, 803057e <__swbuf_r+0x12>
 803057a:	f000 f9ed 	bl	8030958 <__sinit>
 803057e:	4b21      	ldr	r3, [pc, #132]	; (8030604 <__swbuf_r+0x98>)
 8030580:	429c      	cmp	r4, r3
 8030582:	d12b      	bne.n	80305dc <__swbuf_r+0x70>
 8030584:	686c      	ldr	r4, [r5, #4]
 8030586:	69a3      	ldr	r3, [r4, #24]
 8030588:	60a3      	str	r3, [r4, #8]
 803058a:	89a3      	ldrh	r3, [r4, #12]
 803058c:	071a      	lsls	r2, r3, #28
 803058e:	d52f      	bpl.n	80305f0 <__swbuf_r+0x84>
 8030590:	6923      	ldr	r3, [r4, #16]
 8030592:	b36b      	cbz	r3, 80305f0 <__swbuf_r+0x84>
 8030594:	6923      	ldr	r3, [r4, #16]
 8030596:	b2f6      	uxtb	r6, r6
 8030598:	6820      	ldr	r0, [r4, #0]
 803059a:	4637      	mov	r7, r6
 803059c:	1ac0      	subs	r0, r0, r3
 803059e:	6963      	ldr	r3, [r4, #20]
 80305a0:	4283      	cmp	r3, r0
 80305a2:	dc04      	bgt.n	80305ae <__swbuf_r+0x42>
 80305a4:	4621      	mov	r1, r4
 80305a6:	4628      	mov	r0, r5
 80305a8:	f000 f942 	bl	8030830 <_fflush_r>
 80305ac:	bb30      	cbnz	r0, 80305fc <__swbuf_r+0x90>
 80305ae:	68a3      	ldr	r3, [r4, #8]
 80305b0:	3001      	adds	r0, #1
 80305b2:	3b01      	subs	r3, #1
 80305b4:	60a3      	str	r3, [r4, #8]
 80305b6:	6823      	ldr	r3, [r4, #0]
 80305b8:	1c5a      	adds	r2, r3, #1
 80305ba:	6022      	str	r2, [r4, #0]
 80305bc:	701e      	strb	r6, [r3, #0]
 80305be:	6963      	ldr	r3, [r4, #20]
 80305c0:	4283      	cmp	r3, r0
 80305c2:	d004      	beq.n	80305ce <__swbuf_r+0x62>
 80305c4:	89a3      	ldrh	r3, [r4, #12]
 80305c6:	07db      	lsls	r3, r3, #31
 80305c8:	d506      	bpl.n	80305d8 <__swbuf_r+0x6c>
 80305ca:	2e0a      	cmp	r6, #10
 80305cc:	d104      	bne.n	80305d8 <__swbuf_r+0x6c>
 80305ce:	4621      	mov	r1, r4
 80305d0:	4628      	mov	r0, r5
 80305d2:	f000 f92d 	bl	8030830 <_fflush_r>
 80305d6:	b988      	cbnz	r0, 80305fc <__swbuf_r+0x90>
 80305d8:	4638      	mov	r0, r7
 80305da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80305dc:	4b0a      	ldr	r3, [pc, #40]	; (8030608 <__swbuf_r+0x9c>)
 80305de:	429c      	cmp	r4, r3
 80305e0:	d101      	bne.n	80305e6 <__swbuf_r+0x7a>
 80305e2:	68ac      	ldr	r4, [r5, #8]
 80305e4:	e7cf      	b.n	8030586 <__swbuf_r+0x1a>
 80305e6:	4b09      	ldr	r3, [pc, #36]	; (803060c <__swbuf_r+0xa0>)
 80305e8:	429c      	cmp	r4, r3
 80305ea:	bf08      	it	eq
 80305ec:	68ec      	ldreq	r4, [r5, #12]
 80305ee:	e7ca      	b.n	8030586 <__swbuf_r+0x1a>
 80305f0:	4621      	mov	r1, r4
 80305f2:	4628      	mov	r0, r5
 80305f4:	f000 f80c 	bl	8030610 <__swsetup_r>
 80305f8:	2800      	cmp	r0, #0
 80305fa:	d0cb      	beq.n	8030594 <__swbuf_r+0x28>
 80305fc:	f04f 37ff 	mov.w	r7, #4294967295
 8030600:	e7ea      	b.n	80305d8 <__swbuf_r+0x6c>
 8030602:	bf00      	nop
 8030604:	080360f0 	.word	0x080360f0
 8030608:	08036110 	.word	0x08036110
 803060c:	080360d0 	.word	0x080360d0

08030610 <__swsetup_r>:
 8030610:	4b32      	ldr	r3, [pc, #200]	; (80306dc <__swsetup_r+0xcc>)
 8030612:	b570      	push	{r4, r5, r6, lr}
 8030614:	681d      	ldr	r5, [r3, #0]
 8030616:	4606      	mov	r6, r0
 8030618:	460c      	mov	r4, r1
 803061a:	b125      	cbz	r5, 8030626 <__swsetup_r+0x16>
 803061c:	69ab      	ldr	r3, [r5, #24]
 803061e:	b913      	cbnz	r3, 8030626 <__swsetup_r+0x16>
 8030620:	4628      	mov	r0, r5
 8030622:	f000 f999 	bl	8030958 <__sinit>
 8030626:	4b2e      	ldr	r3, [pc, #184]	; (80306e0 <__swsetup_r+0xd0>)
 8030628:	429c      	cmp	r4, r3
 803062a:	d10f      	bne.n	803064c <__swsetup_r+0x3c>
 803062c:	686c      	ldr	r4, [r5, #4]
 803062e:	89a3      	ldrh	r3, [r4, #12]
 8030630:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8030634:	0719      	lsls	r1, r3, #28
 8030636:	d42c      	bmi.n	8030692 <__swsetup_r+0x82>
 8030638:	06dd      	lsls	r5, r3, #27
 803063a:	d411      	bmi.n	8030660 <__swsetup_r+0x50>
 803063c:	2309      	movs	r3, #9
 803063e:	6033      	str	r3, [r6, #0]
 8030640:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8030644:	f04f 30ff 	mov.w	r0, #4294967295
 8030648:	81a3      	strh	r3, [r4, #12]
 803064a:	e03e      	b.n	80306ca <__swsetup_r+0xba>
 803064c:	4b25      	ldr	r3, [pc, #148]	; (80306e4 <__swsetup_r+0xd4>)
 803064e:	429c      	cmp	r4, r3
 8030650:	d101      	bne.n	8030656 <__swsetup_r+0x46>
 8030652:	68ac      	ldr	r4, [r5, #8]
 8030654:	e7eb      	b.n	803062e <__swsetup_r+0x1e>
 8030656:	4b24      	ldr	r3, [pc, #144]	; (80306e8 <__swsetup_r+0xd8>)
 8030658:	429c      	cmp	r4, r3
 803065a:	bf08      	it	eq
 803065c:	68ec      	ldreq	r4, [r5, #12]
 803065e:	e7e6      	b.n	803062e <__swsetup_r+0x1e>
 8030660:	0758      	lsls	r0, r3, #29
 8030662:	d512      	bpl.n	803068a <__swsetup_r+0x7a>
 8030664:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8030666:	b141      	cbz	r1, 803067a <__swsetup_r+0x6a>
 8030668:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803066c:	4299      	cmp	r1, r3
 803066e:	d002      	beq.n	8030676 <__swsetup_r+0x66>
 8030670:	4630      	mov	r0, r6
 8030672:	f7ff fc0f 	bl	802fe94 <_free_r>
 8030676:	2300      	movs	r3, #0
 8030678:	6363      	str	r3, [r4, #52]	; 0x34
 803067a:	89a3      	ldrh	r3, [r4, #12]
 803067c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8030680:	81a3      	strh	r3, [r4, #12]
 8030682:	2300      	movs	r3, #0
 8030684:	6063      	str	r3, [r4, #4]
 8030686:	6923      	ldr	r3, [r4, #16]
 8030688:	6023      	str	r3, [r4, #0]
 803068a:	89a3      	ldrh	r3, [r4, #12]
 803068c:	f043 0308 	orr.w	r3, r3, #8
 8030690:	81a3      	strh	r3, [r4, #12]
 8030692:	6923      	ldr	r3, [r4, #16]
 8030694:	b94b      	cbnz	r3, 80306aa <__swsetup_r+0x9a>
 8030696:	89a3      	ldrh	r3, [r4, #12]
 8030698:	f403 7320 	and.w	r3, r3, #640	; 0x280
 803069c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80306a0:	d003      	beq.n	80306aa <__swsetup_r+0x9a>
 80306a2:	4621      	mov	r1, r4
 80306a4:	4630      	mov	r0, r6
 80306a6:	f000 fa2d 	bl	8030b04 <__smakebuf_r>
 80306aa:	89a0      	ldrh	r0, [r4, #12]
 80306ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80306b0:	f010 0301 	ands.w	r3, r0, #1
 80306b4:	d00a      	beq.n	80306cc <__swsetup_r+0xbc>
 80306b6:	2300      	movs	r3, #0
 80306b8:	60a3      	str	r3, [r4, #8]
 80306ba:	6963      	ldr	r3, [r4, #20]
 80306bc:	425b      	negs	r3, r3
 80306be:	61a3      	str	r3, [r4, #24]
 80306c0:	6923      	ldr	r3, [r4, #16]
 80306c2:	b943      	cbnz	r3, 80306d6 <__swsetup_r+0xc6>
 80306c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80306c8:	d1ba      	bne.n	8030640 <__swsetup_r+0x30>
 80306ca:	bd70      	pop	{r4, r5, r6, pc}
 80306cc:	0781      	lsls	r1, r0, #30
 80306ce:	bf58      	it	pl
 80306d0:	6963      	ldrpl	r3, [r4, #20]
 80306d2:	60a3      	str	r3, [r4, #8]
 80306d4:	e7f4      	b.n	80306c0 <__swsetup_r+0xb0>
 80306d6:	2000      	movs	r0, #0
 80306d8:	e7f7      	b.n	80306ca <__swsetup_r+0xba>
 80306da:	bf00      	nop
 80306dc:	20018300 	.word	0x20018300
 80306e0:	080360f0 	.word	0x080360f0
 80306e4:	08036110 	.word	0x08036110
 80306e8:	080360d0 	.word	0x080360d0

080306ec <__assert_func>:
 80306ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80306ee:	4614      	mov	r4, r2
 80306f0:	461a      	mov	r2, r3
 80306f2:	4b09      	ldr	r3, [pc, #36]	; (8030718 <__assert_func+0x2c>)
 80306f4:	4605      	mov	r5, r0
 80306f6:	681b      	ldr	r3, [r3, #0]
 80306f8:	68d8      	ldr	r0, [r3, #12]
 80306fa:	b14c      	cbz	r4, 8030710 <__assert_func+0x24>
 80306fc:	4b07      	ldr	r3, [pc, #28]	; (803071c <__assert_func+0x30>)
 80306fe:	9100      	str	r1, [sp, #0]
 8030700:	4907      	ldr	r1, [pc, #28]	; (8030720 <__assert_func+0x34>)
 8030702:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8030706:	462b      	mov	r3, r5
 8030708:	f000 f9a4 	bl	8030a54 <fiprintf>
 803070c:	f000 fee8 	bl	80314e0 <abort>
 8030710:	4b04      	ldr	r3, [pc, #16]	; (8030724 <__assert_func+0x38>)
 8030712:	461c      	mov	r4, r3
 8030714:	e7f3      	b.n	80306fe <__assert_func+0x12>
 8030716:	bf00      	nop
 8030718:	20018300 	.word	0x20018300
 803071c:	08036093 	.word	0x08036093
 8030720:	080360a0 	.word	0x080360a0
 8030724:	080360ce 	.word	0x080360ce

08030728 <__sflush_r>:
 8030728:	898a      	ldrh	r2, [r1, #12]
 803072a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803072e:	4605      	mov	r5, r0
 8030730:	0710      	lsls	r0, r2, #28
 8030732:	460c      	mov	r4, r1
 8030734:	d458      	bmi.n	80307e8 <__sflush_r+0xc0>
 8030736:	684b      	ldr	r3, [r1, #4]
 8030738:	2b00      	cmp	r3, #0
 803073a:	dc05      	bgt.n	8030748 <__sflush_r+0x20>
 803073c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 803073e:	2b00      	cmp	r3, #0
 8030740:	dc02      	bgt.n	8030748 <__sflush_r+0x20>
 8030742:	2000      	movs	r0, #0
 8030744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8030748:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803074a:	2e00      	cmp	r6, #0
 803074c:	d0f9      	beq.n	8030742 <__sflush_r+0x1a>
 803074e:	2300      	movs	r3, #0
 8030750:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8030754:	682f      	ldr	r7, [r5, #0]
 8030756:	602b      	str	r3, [r5, #0]
 8030758:	d032      	beq.n	80307c0 <__sflush_r+0x98>
 803075a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 803075c:	89a3      	ldrh	r3, [r4, #12]
 803075e:	075a      	lsls	r2, r3, #29
 8030760:	d505      	bpl.n	803076e <__sflush_r+0x46>
 8030762:	6863      	ldr	r3, [r4, #4]
 8030764:	1ac0      	subs	r0, r0, r3
 8030766:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8030768:	b10b      	cbz	r3, 803076e <__sflush_r+0x46>
 803076a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 803076c:	1ac0      	subs	r0, r0, r3
 803076e:	2300      	movs	r3, #0
 8030770:	4602      	mov	r2, r0
 8030772:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8030774:	4628      	mov	r0, r5
 8030776:	6a21      	ldr	r1, [r4, #32]
 8030778:	47b0      	blx	r6
 803077a:	1c43      	adds	r3, r0, #1
 803077c:	89a3      	ldrh	r3, [r4, #12]
 803077e:	d106      	bne.n	803078e <__sflush_r+0x66>
 8030780:	6829      	ldr	r1, [r5, #0]
 8030782:	291d      	cmp	r1, #29
 8030784:	d82c      	bhi.n	80307e0 <__sflush_r+0xb8>
 8030786:	4a29      	ldr	r2, [pc, #164]	; (803082c <__sflush_r+0x104>)
 8030788:	40ca      	lsrs	r2, r1
 803078a:	07d6      	lsls	r6, r2, #31
 803078c:	d528      	bpl.n	80307e0 <__sflush_r+0xb8>
 803078e:	2200      	movs	r2, #0
 8030790:	04d9      	lsls	r1, r3, #19
 8030792:	6062      	str	r2, [r4, #4]
 8030794:	6922      	ldr	r2, [r4, #16]
 8030796:	6022      	str	r2, [r4, #0]
 8030798:	d504      	bpl.n	80307a4 <__sflush_r+0x7c>
 803079a:	1c42      	adds	r2, r0, #1
 803079c:	d101      	bne.n	80307a2 <__sflush_r+0x7a>
 803079e:	682b      	ldr	r3, [r5, #0]
 80307a0:	b903      	cbnz	r3, 80307a4 <__sflush_r+0x7c>
 80307a2:	6560      	str	r0, [r4, #84]	; 0x54
 80307a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80307a6:	602f      	str	r7, [r5, #0]
 80307a8:	2900      	cmp	r1, #0
 80307aa:	d0ca      	beq.n	8030742 <__sflush_r+0x1a>
 80307ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80307b0:	4299      	cmp	r1, r3
 80307b2:	d002      	beq.n	80307ba <__sflush_r+0x92>
 80307b4:	4628      	mov	r0, r5
 80307b6:	f7ff fb6d 	bl	802fe94 <_free_r>
 80307ba:	2000      	movs	r0, #0
 80307bc:	6360      	str	r0, [r4, #52]	; 0x34
 80307be:	e7c1      	b.n	8030744 <__sflush_r+0x1c>
 80307c0:	6a21      	ldr	r1, [r4, #32]
 80307c2:	2301      	movs	r3, #1
 80307c4:	4628      	mov	r0, r5
 80307c6:	47b0      	blx	r6
 80307c8:	1c41      	adds	r1, r0, #1
 80307ca:	d1c7      	bne.n	803075c <__sflush_r+0x34>
 80307cc:	682b      	ldr	r3, [r5, #0]
 80307ce:	2b00      	cmp	r3, #0
 80307d0:	d0c4      	beq.n	803075c <__sflush_r+0x34>
 80307d2:	2b1d      	cmp	r3, #29
 80307d4:	d001      	beq.n	80307da <__sflush_r+0xb2>
 80307d6:	2b16      	cmp	r3, #22
 80307d8:	d101      	bne.n	80307de <__sflush_r+0xb6>
 80307da:	602f      	str	r7, [r5, #0]
 80307dc:	e7b1      	b.n	8030742 <__sflush_r+0x1a>
 80307de:	89a3      	ldrh	r3, [r4, #12]
 80307e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80307e4:	81a3      	strh	r3, [r4, #12]
 80307e6:	e7ad      	b.n	8030744 <__sflush_r+0x1c>
 80307e8:	690f      	ldr	r7, [r1, #16]
 80307ea:	2f00      	cmp	r7, #0
 80307ec:	d0a9      	beq.n	8030742 <__sflush_r+0x1a>
 80307ee:	0793      	lsls	r3, r2, #30
 80307f0:	680e      	ldr	r6, [r1, #0]
 80307f2:	600f      	str	r7, [r1, #0]
 80307f4:	bf0c      	ite	eq
 80307f6:	694b      	ldreq	r3, [r1, #20]
 80307f8:	2300      	movne	r3, #0
 80307fa:	eba6 0807 	sub.w	r8, r6, r7
 80307fe:	608b      	str	r3, [r1, #8]
 8030800:	f1b8 0f00 	cmp.w	r8, #0
 8030804:	dd9d      	ble.n	8030742 <__sflush_r+0x1a>
 8030806:	4643      	mov	r3, r8
 8030808:	463a      	mov	r2, r7
 803080a:	6a21      	ldr	r1, [r4, #32]
 803080c:	4628      	mov	r0, r5
 803080e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8030810:	47b0      	blx	r6
 8030812:	2800      	cmp	r0, #0
 8030814:	dc06      	bgt.n	8030824 <__sflush_r+0xfc>
 8030816:	89a3      	ldrh	r3, [r4, #12]
 8030818:	f04f 30ff 	mov.w	r0, #4294967295
 803081c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8030820:	81a3      	strh	r3, [r4, #12]
 8030822:	e78f      	b.n	8030744 <__sflush_r+0x1c>
 8030824:	4407      	add	r7, r0
 8030826:	eba8 0800 	sub.w	r8, r8, r0
 803082a:	e7e9      	b.n	8030800 <__sflush_r+0xd8>
 803082c:	20400001 	.word	0x20400001

08030830 <_fflush_r>:
 8030830:	b538      	push	{r3, r4, r5, lr}
 8030832:	690b      	ldr	r3, [r1, #16]
 8030834:	4605      	mov	r5, r0
 8030836:	460c      	mov	r4, r1
 8030838:	b913      	cbnz	r3, 8030840 <_fflush_r+0x10>
 803083a:	2500      	movs	r5, #0
 803083c:	4628      	mov	r0, r5
 803083e:	bd38      	pop	{r3, r4, r5, pc}
 8030840:	b118      	cbz	r0, 803084a <_fflush_r+0x1a>
 8030842:	6983      	ldr	r3, [r0, #24]
 8030844:	b90b      	cbnz	r3, 803084a <_fflush_r+0x1a>
 8030846:	f000 f887 	bl	8030958 <__sinit>
 803084a:	4b14      	ldr	r3, [pc, #80]	; (803089c <_fflush_r+0x6c>)
 803084c:	429c      	cmp	r4, r3
 803084e:	d11b      	bne.n	8030888 <_fflush_r+0x58>
 8030850:	686c      	ldr	r4, [r5, #4]
 8030852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8030856:	2b00      	cmp	r3, #0
 8030858:	d0ef      	beq.n	803083a <_fflush_r+0xa>
 803085a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 803085c:	07d0      	lsls	r0, r2, #31
 803085e:	d404      	bmi.n	803086a <_fflush_r+0x3a>
 8030860:	0599      	lsls	r1, r3, #22
 8030862:	d402      	bmi.n	803086a <_fflush_r+0x3a>
 8030864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8030866:	f000 f927 	bl	8030ab8 <__retarget_lock_acquire_recursive>
 803086a:	4628      	mov	r0, r5
 803086c:	4621      	mov	r1, r4
 803086e:	f7ff ff5b 	bl	8030728 <__sflush_r>
 8030872:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8030874:	4605      	mov	r5, r0
 8030876:	07da      	lsls	r2, r3, #31
 8030878:	d4e0      	bmi.n	803083c <_fflush_r+0xc>
 803087a:	89a3      	ldrh	r3, [r4, #12]
 803087c:	059b      	lsls	r3, r3, #22
 803087e:	d4dd      	bmi.n	803083c <_fflush_r+0xc>
 8030880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8030882:	f000 f91a 	bl	8030aba <__retarget_lock_release_recursive>
 8030886:	e7d9      	b.n	803083c <_fflush_r+0xc>
 8030888:	4b05      	ldr	r3, [pc, #20]	; (80308a0 <_fflush_r+0x70>)
 803088a:	429c      	cmp	r4, r3
 803088c:	d101      	bne.n	8030892 <_fflush_r+0x62>
 803088e:	68ac      	ldr	r4, [r5, #8]
 8030890:	e7df      	b.n	8030852 <_fflush_r+0x22>
 8030892:	4b04      	ldr	r3, [pc, #16]	; (80308a4 <_fflush_r+0x74>)
 8030894:	429c      	cmp	r4, r3
 8030896:	bf08      	it	eq
 8030898:	68ec      	ldreq	r4, [r5, #12]
 803089a:	e7da      	b.n	8030852 <_fflush_r+0x22>
 803089c:	080360f0 	.word	0x080360f0
 80308a0:	08036110 	.word	0x08036110
 80308a4:	080360d0 	.word	0x080360d0

080308a8 <std>:
 80308a8:	2300      	movs	r3, #0
 80308aa:	b510      	push	{r4, lr}
 80308ac:	4604      	mov	r4, r0
 80308ae:	6083      	str	r3, [r0, #8]
 80308b0:	8181      	strh	r1, [r0, #12]
 80308b2:	4619      	mov	r1, r3
 80308b4:	6643      	str	r3, [r0, #100]	; 0x64
 80308b6:	81c2      	strh	r2, [r0, #14]
 80308b8:	2208      	movs	r2, #8
 80308ba:	6183      	str	r3, [r0, #24]
 80308bc:	e9c0 3300 	strd	r3, r3, [r0]
 80308c0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80308c4:	305c      	adds	r0, #92	; 0x5c
 80308c6:	f7ff face 	bl	802fe66 <memset>
 80308ca:	4b05      	ldr	r3, [pc, #20]	; (80308e0 <std+0x38>)
 80308cc:	6224      	str	r4, [r4, #32]
 80308ce:	6263      	str	r3, [r4, #36]	; 0x24
 80308d0:	4b04      	ldr	r3, [pc, #16]	; (80308e4 <std+0x3c>)
 80308d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80308d4:	4b04      	ldr	r3, [pc, #16]	; (80308e8 <std+0x40>)
 80308d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80308d8:	4b04      	ldr	r3, [pc, #16]	; (80308ec <std+0x44>)
 80308da:	6323      	str	r3, [r4, #48]	; 0x30
 80308dc:	bd10      	pop	{r4, pc}
 80308de:	bf00      	nop
 80308e0:	08031435 	.word	0x08031435
 80308e4:	08031457 	.word	0x08031457
 80308e8:	0803148f 	.word	0x0803148f
 80308ec:	080314b3 	.word	0x080314b3

080308f0 <_cleanup_r>:
 80308f0:	4901      	ldr	r1, [pc, #4]	; (80308f8 <_cleanup_r+0x8>)
 80308f2:	f000 b8c1 	b.w	8030a78 <_fwalk_reent>
 80308f6:	bf00      	nop
 80308f8:	08030831 	.word	0x08030831

080308fc <__sfmoreglue>:
 80308fc:	b570      	push	{r4, r5, r6, lr}
 80308fe:	1e4a      	subs	r2, r1, #1
 8030900:	2568      	movs	r5, #104	; 0x68
 8030902:	460e      	mov	r6, r1
 8030904:	4355      	muls	r5, r2
 8030906:	f105 0174 	add.w	r1, r5, #116	; 0x74
 803090a:	f7ff fb13 	bl	802ff34 <_malloc_r>
 803090e:	4604      	mov	r4, r0
 8030910:	b140      	cbz	r0, 8030924 <__sfmoreglue+0x28>
 8030912:	2100      	movs	r1, #0
 8030914:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8030918:	e9c0 1600 	strd	r1, r6, [r0]
 803091c:	300c      	adds	r0, #12
 803091e:	60a0      	str	r0, [r4, #8]
 8030920:	f7ff faa1 	bl	802fe66 <memset>
 8030924:	4620      	mov	r0, r4
 8030926:	bd70      	pop	{r4, r5, r6, pc}

08030928 <__sfp_lock_acquire>:
 8030928:	4801      	ldr	r0, [pc, #4]	; (8030930 <__sfp_lock_acquire+0x8>)
 803092a:	f000 b8c5 	b.w	8030ab8 <__retarget_lock_acquire_recursive>
 803092e:	bf00      	nop
 8030930:	2001fed8 	.word	0x2001fed8

08030934 <__sfp_lock_release>:
 8030934:	4801      	ldr	r0, [pc, #4]	; (803093c <__sfp_lock_release+0x8>)
 8030936:	f000 b8c0 	b.w	8030aba <__retarget_lock_release_recursive>
 803093a:	bf00      	nop
 803093c:	2001fed8 	.word	0x2001fed8

08030940 <__sinit_lock_acquire>:
 8030940:	4801      	ldr	r0, [pc, #4]	; (8030948 <__sinit_lock_acquire+0x8>)
 8030942:	f000 b8b9 	b.w	8030ab8 <__retarget_lock_acquire_recursive>
 8030946:	bf00      	nop
 8030948:	2001fed3 	.word	0x2001fed3

0803094c <__sinit_lock_release>:
 803094c:	4801      	ldr	r0, [pc, #4]	; (8030954 <__sinit_lock_release+0x8>)
 803094e:	f000 b8b4 	b.w	8030aba <__retarget_lock_release_recursive>
 8030952:	bf00      	nop
 8030954:	2001fed3 	.word	0x2001fed3

08030958 <__sinit>:
 8030958:	b510      	push	{r4, lr}
 803095a:	4604      	mov	r4, r0
 803095c:	f7ff fff0 	bl	8030940 <__sinit_lock_acquire>
 8030960:	69a3      	ldr	r3, [r4, #24]
 8030962:	b11b      	cbz	r3, 803096c <__sinit+0x14>
 8030964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8030968:	f7ff bff0 	b.w	803094c <__sinit_lock_release>
 803096c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8030970:	6523      	str	r3, [r4, #80]	; 0x50
 8030972:	4620      	mov	r0, r4
 8030974:	4b12      	ldr	r3, [pc, #72]	; (80309c0 <__sinit+0x68>)
 8030976:	4a13      	ldr	r2, [pc, #76]	; (80309c4 <__sinit+0x6c>)
 8030978:	681b      	ldr	r3, [r3, #0]
 803097a:	62a2      	str	r2, [r4, #40]	; 0x28
 803097c:	42a3      	cmp	r3, r4
 803097e:	bf04      	itt	eq
 8030980:	2301      	moveq	r3, #1
 8030982:	61a3      	streq	r3, [r4, #24]
 8030984:	f000 f820 	bl	80309c8 <__sfp>
 8030988:	6060      	str	r0, [r4, #4]
 803098a:	4620      	mov	r0, r4
 803098c:	f000 f81c 	bl	80309c8 <__sfp>
 8030990:	60a0      	str	r0, [r4, #8]
 8030992:	4620      	mov	r0, r4
 8030994:	f000 f818 	bl	80309c8 <__sfp>
 8030998:	2200      	movs	r2, #0
 803099a:	2104      	movs	r1, #4
 803099c:	60e0      	str	r0, [r4, #12]
 803099e:	6860      	ldr	r0, [r4, #4]
 80309a0:	f7ff ff82 	bl	80308a8 <std>
 80309a4:	2201      	movs	r2, #1
 80309a6:	2109      	movs	r1, #9
 80309a8:	68a0      	ldr	r0, [r4, #8]
 80309aa:	f7ff ff7d 	bl	80308a8 <std>
 80309ae:	2202      	movs	r2, #2
 80309b0:	2112      	movs	r1, #18
 80309b2:	68e0      	ldr	r0, [r4, #12]
 80309b4:	f7ff ff78 	bl	80308a8 <std>
 80309b8:	2301      	movs	r3, #1
 80309ba:	61a3      	str	r3, [r4, #24]
 80309bc:	e7d2      	b.n	8030964 <__sinit+0xc>
 80309be:	bf00      	nop
 80309c0:	08035fb8 	.word	0x08035fb8
 80309c4:	080308f1 	.word	0x080308f1

080309c8 <__sfp>:
 80309c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80309ca:	4607      	mov	r7, r0
 80309cc:	f7ff ffac 	bl	8030928 <__sfp_lock_acquire>
 80309d0:	4b1e      	ldr	r3, [pc, #120]	; (8030a4c <__sfp+0x84>)
 80309d2:	681e      	ldr	r6, [r3, #0]
 80309d4:	69b3      	ldr	r3, [r6, #24]
 80309d6:	b913      	cbnz	r3, 80309de <__sfp+0x16>
 80309d8:	4630      	mov	r0, r6
 80309da:	f7ff ffbd 	bl	8030958 <__sinit>
 80309de:	3648      	adds	r6, #72	; 0x48
 80309e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80309e4:	3b01      	subs	r3, #1
 80309e6:	d503      	bpl.n	80309f0 <__sfp+0x28>
 80309e8:	6833      	ldr	r3, [r6, #0]
 80309ea:	b30b      	cbz	r3, 8030a30 <__sfp+0x68>
 80309ec:	6836      	ldr	r6, [r6, #0]
 80309ee:	e7f7      	b.n	80309e0 <__sfp+0x18>
 80309f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80309f4:	b9d5      	cbnz	r5, 8030a2c <__sfp+0x64>
 80309f6:	4b16      	ldr	r3, [pc, #88]	; (8030a50 <__sfp+0x88>)
 80309f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80309fc:	6665      	str	r5, [r4, #100]	; 0x64
 80309fe:	60e3      	str	r3, [r4, #12]
 8030a00:	f000 f859 	bl	8030ab6 <__retarget_lock_init_recursive>
 8030a04:	f7ff ff96 	bl	8030934 <__sfp_lock_release>
 8030a08:	2208      	movs	r2, #8
 8030a0a:	4629      	mov	r1, r5
 8030a0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8030a10:	6025      	str	r5, [r4, #0]
 8030a12:	61a5      	str	r5, [r4, #24]
 8030a14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8030a18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8030a1c:	f7ff fa23 	bl	802fe66 <memset>
 8030a20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8030a24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8030a28:	4620      	mov	r0, r4
 8030a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8030a2c:	3468      	adds	r4, #104	; 0x68
 8030a2e:	e7d9      	b.n	80309e4 <__sfp+0x1c>
 8030a30:	2104      	movs	r1, #4
 8030a32:	4638      	mov	r0, r7
 8030a34:	f7ff ff62 	bl	80308fc <__sfmoreglue>
 8030a38:	4604      	mov	r4, r0
 8030a3a:	6030      	str	r0, [r6, #0]
 8030a3c:	2800      	cmp	r0, #0
 8030a3e:	d1d5      	bne.n	80309ec <__sfp+0x24>
 8030a40:	f7ff ff78 	bl	8030934 <__sfp_lock_release>
 8030a44:	230c      	movs	r3, #12
 8030a46:	603b      	str	r3, [r7, #0]
 8030a48:	e7ee      	b.n	8030a28 <__sfp+0x60>
 8030a4a:	bf00      	nop
 8030a4c:	08035fb8 	.word	0x08035fb8
 8030a50:	ffff0001 	.word	0xffff0001

08030a54 <fiprintf>:
 8030a54:	b40e      	push	{r1, r2, r3}
 8030a56:	b503      	push	{r0, r1, lr}
 8030a58:	ab03      	add	r3, sp, #12
 8030a5a:	4601      	mov	r1, r0
 8030a5c:	4805      	ldr	r0, [pc, #20]	; (8030a74 <fiprintf+0x20>)
 8030a5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8030a62:	6800      	ldr	r0, [r0, #0]
 8030a64:	9301      	str	r3, [sp, #4]
 8030a66:	f000 fa1f 	bl	8030ea8 <_vfiprintf_r>
 8030a6a:	b002      	add	sp, #8
 8030a6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8030a70:	b003      	add	sp, #12
 8030a72:	4770      	bx	lr
 8030a74:	20018300 	.word	0x20018300

08030a78 <_fwalk_reent>:
 8030a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8030a7c:	4606      	mov	r6, r0
 8030a7e:	4688      	mov	r8, r1
 8030a80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8030a84:	2700      	movs	r7, #0
 8030a86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8030a8a:	f1b9 0901 	subs.w	r9, r9, #1
 8030a8e:	d505      	bpl.n	8030a9c <_fwalk_reent+0x24>
 8030a90:	6824      	ldr	r4, [r4, #0]
 8030a92:	2c00      	cmp	r4, #0
 8030a94:	d1f7      	bne.n	8030a86 <_fwalk_reent+0xe>
 8030a96:	4638      	mov	r0, r7
 8030a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8030a9c:	89ab      	ldrh	r3, [r5, #12]
 8030a9e:	2b01      	cmp	r3, #1
 8030aa0:	d907      	bls.n	8030ab2 <_fwalk_reent+0x3a>
 8030aa2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8030aa6:	3301      	adds	r3, #1
 8030aa8:	d003      	beq.n	8030ab2 <_fwalk_reent+0x3a>
 8030aaa:	4629      	mov	r1, r5
 8030aac:	4630      	mov	r0, r6
 8030aae:	47c0      	blx	r8
 8030ab0:	4307      	orrs	r7, r0
 8030ab2:	3568      	adds	r5, #104	; 0x68
 8030ab4:	e7e9      	b.n	8030a8a <_fwalk_reent+0x12>

08030ab6 <__retarget_lock_init_recursive>:
 8030ab6:	4770      	bx	lr

08030ab8 <__retarget_lock_acquire_recursive>:
 8030ab8:	4770      	bx	lr

08030aba <__retarget_lock_release_recursive>:
 8030aba:	4770      	bx	lr

08030abc <__swhatbuf_r>:
 8030abc:	b570      	push	{r4, r5, r6, lr}
 8030abe:	460e      	mov	r6, r1
 8030ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8030ac4:	b096      	sub	sp, #88	; 0x58
 8030ac6:	4614      	mov	r4, r2
 8030ac8:	2900      	cmp	r1, #0
 8030aca:	461d      	mov	r5, r3
 8030acc:	da07      	bge.n	8030ade <__swhatbuf_r+0x22>
 8030ace:	2300      	movs	r3, #0
 8030ad0:	602b      	str	r3, [r5, #0]
 8030ad2:	89b3      	ldrh	r3, [r6, #12]
 8030ad4:	061a      	lsls	r2, r3, #24
 8030ad6:	d410      	bmi.n	8030afa <__swhatbuf_r+0x3e>
 8030ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8030adc:	e00e      	b.n	8030afc <__swhatbuf_r+0x40>
 8030ade:	466a      	mov	r2, sp
 8030ae0:	f000 fd16 	bl	8031510 <_fstat_r>
 8030ae4:	2800      	cmp	r0, #0
 8030ae6:	dbf2      	blt.n	8030ace <__swhatbuf_r+0x12>
 8030ae8:	9a01      	ldr	r2, [sp, #4]
 8030aea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8030aee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8030af2:	425a      	negs	r2, r3
 8030af4:	415a      	adcs	r2, r3
 8030af6:	602a      	str	r2, [r5, #0]
 8030af8:	e7ee      	b.n	8030ad8 <__swhatbuf_r+0x1c>
 8030afa:	2340      	movs	r3, #64	; 0x40
 8030afc:	2000      	movs	r0, #0
 8030afe:	6023      	str	r3, [r4, #0]
 8030b00:	b016      	add	sp, #88	; 0x58
 8030b02:	bd70      	pop	{r4, r5, r6, pc}

08030b04 <__smakebuf_r>:
 8030b04:	898b      	ldrh	r3, [r1, #12]
 8030b06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8030b08:	079d      	lsls	r5, r3, #30
 8030b0a:	4606      	mov	r6, r0
 8030b0c:	460c      	mov	r4, r1
 8030b0e:	d507      	bpl.n	8030b20 <__smakebuf_r+0x1c>
 8030b10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8030b14:	6023      	str	r3, [r4, #0]
 8030b16:	6123      	str	r3, [r4, #16]
 8030b18:	2301      	movs	r3, #1
 8030b1a:	6163      	str	r3, [r4, #20]
 8030b1c:	b002      	add	sp, #8
 8030b1e:	bd70      	pop	{r4, r5, r6, pc}
 8030b20:	ab01      	add	r3, sp, #4
 8030b22:	466a      	mov	r2, sp
 8030b24:	f7ff ffca 	bl	8030abc <__swhatbuf_r>
 8030b28:	9900      	ldr	r1, [sp, #0]
 8030b2a:	4605      	mov	r5, r0
 8030b2c:	4630      	mov	r0, r6
 8030b2e:	f7ff fa01 	bl	802ff34 <_malloc_r>
 8030b32:	b948      	cbnz	r0, 8030b48 <__smakebuf_r+0x44>
 8030b34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8030b38:	059a      	lsls	r2, r3, #22
 8030b3a:	d4ef      	bmi.n	8030b1c <__smakebuf_r+0x18>
 8030b3c:	f023 0303 	bic.w	r3, r3, #3
 8030b40:	f043 0302 	orr.w	r3, r3, #2
 8030b44:	81a3      	strh	r3, [r4, #12]
 8030b46:	e7e3      	b.n	8030b10 <__smakebuf_r+0xc>
 8030b48:	4b0d      	ldr	r3, [pc, #52]	; (8030b80 <__smakebuf_r+0x7c>)
 8030b4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8030b4c:	89a3      	ldrh	r3, [r4, #12]
 8030b4e:	6020      	str	r0, [r4, #0]
 8030b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8030b54:	6120      	str	r0, [r4, #16]
 8030b56:	81a3      	strh	r3, [r4, #12]
 8030b58:	9b00      	ldr	r3, [sp, #0]
 8030b5a:	6163      	str	r3, [r4, #20]
 8030b5c:	9b01      	ldr	r3, [sp, #4]
 8030b5e:	b15b      	cbz	r3, 8030b78 <__smakebuf_r+0x74>
 8030b60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8030b64:	4630      	mov	r0, r6
 8030b66:	f000 fce5 	bl	8031534 <_isatty_r>
 8030b6a:	b128      	cbz	r0, 8030b78 <__smakebuf_r+0x74>
 8030b6c:	89a3      	ldrh	r3, [r4, #12]
 8030b6e:	f023 0303 	bic.w	r3, r3, #3
 8030b72:	f043 0301 	orr.w	r3, r3, #1
 8030b76:	81a3      	strh	r3, [r4, #12]
 8030b78:	89a0      	ldrh	r0, [r4, #12]
 8030b7a:	4305      	orrs	r5, r0
 8030b7c:	81a5      	strh	r5, [r4, #12]
 8030b7e:	e7cd      	b.n	8030b1c <__smakebuf_r+0x18>
 8030b80:	080308f1 	.word	0x080308f1

08030b84 <__malloc_lock>:
 8030b84:	4801      	ldr	r0, [pc, #4]	; (8030b8c <__malloc_lock+0x8>)
 8030b86:	f7ff bf97 	b.w	8030ab8 <__retarget_lock_acquire_recursive>
 8030b8a:	bf00      	nop
 8030b8c:	2001fed4 	.word	0x2001fed4

08030b90 <__malloc_unlock>:
 8030b90:	4801      	ldr	r0, [pc, #4]	; (8030b98 <__malloc_unlock+0x8>)
 8030b92:	f7ff bf92 	b.w	8030aba <__retarget_lock_release_recursive>
 8030b96:	bf00      	nop
 8030b98:	2001fed4 	.word	0x2001fed4

08030b9c <__ssputs_r>:
 8030b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8030ba0:	688e      	ldr	r6, [r1, #8]
 8030ba2:	4682      	mov	sl, r0
 8030ba4:	460c      	mov	r4, r1
 8030ba6:	4690      	mov	r8, r2
 8030ba8:	429e      	cmp	r6, r3
 8030baa:	461f      	mov	r7, r3
 8030bac:	d838      	bhi.n	8030c20 <__ssputs_r+0x84>
 8030bae:	898a      	ldrh	r2, [r1, #12]
 8030bb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8030bb4:	d032      	beq.n	8030c1c <__ssputs_r+0x80>
 8030bb6:	6825      	ldr	r5, [r4, #0]
 8030bb8:	3301      	adds	r3, #1
 8030bba:	6909      	ldr	r1, [r1, #16]
 8030bbc:	eba5 0901 	sub.w	r9, r5, r1
 8030bc0:	6965      	ldr	r5, [r4, #20]
 8030bc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8030bc6:	444b      	add	r3, r9
 8030bc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8030bcc:	106d      	asrs	r5, r5, #1
 8030bce:	429d      	cmp	r5, r3
 8030bd0:	bf38      	it	cc
 8030bd2:	461d      	movcc	r5, r3
 8030bd4:	0553      	lsls	r3, r2, #21
 8030bd6:	d531      	bpl.n	8030c3c <__ssputs_r+0xa0>
 8030bd8:	4629      	mov	r1, r5
 8030bda:	f7ff f9ab 	bl	802ff34 <_malloc_r>
 8030bde:	4606      	mov	r6, r0
 8030be0:	b950      	cbnz	r0, 8030bf8 <__ssputs_r+0x5c>
 8030be2:	230c      	movs	r3, #12
 8030be4:	f04f 30ff 	mov.w	r0, #4294967295
 8030be8:	f8ca 3000 	str.w	r3, [sl]
 8030bec:	89a3      	ldrh	r3, [r4, #12]
 8030bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8030bf2:	81a3      	strh	r3, [r4, #12]
 8030bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8030bf8:	464a      	mov	r2, r9
 8030bfa:	6921      	ldr	r1, [r4, #16]
 8030bfc:	f7ff f90c 	bl	802fe18 <memcpy>
 8030c00:	89a3      	ldrh	r3, [r4, #12]
 8030c02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8030c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8030c0a:	81a3      	strh	r3, [r4, #12]
 8030c0c:	6126      	str	r6, [r4, #16]
 8030c0e:	444e      	add	r6, r9
 8030c10:	6165      	str	r5, [r4, #20]
 8030c12:	eba5 0509 	sub.w	r5, r5, r9
 8030c16:	6026      	str	r6, [r4, #0]
 8030c18:	463e      	mov	r6, r7
 8030c1a:	60a5      	str	r5, [r4, #8]
 8030c1c:	42be      	cmp	r6, r7
 8030c1e:	d900      	bls.n	8030c22 <__ssputs_r+0x86>
 8030c20:	463e      	mov	r6, r7
 8030c22:	4632      	mov	r2, r6
 8030c24:	4641      	mov	r1, r8
 8030c26:	6820      	ldr	r0, [r4, #0]
 8030c28:	f7ff f903 	bl	802fe32 <memmove>
 8030c2c:	68a3      	ldr	r3, [r4, #8]
 8030c2e:	6822      	ldr	r2, [r4, #0]
 8030c30:	2000      	movs	r0, #0
 8030c32:	1b9b      	subs	r3, r3, r6
 8030c34:	4432      	add	r2, r6
 8030c36:	60a3      	str	r3, [r4, #8]
 8030c38:	6022      	str	r2, [r4, #0]
 8030c3a:	e7db      	b.n	8030bf4 <__ssputs_r+0x58>
 8030c3c:	462a      	mov	r2, r5
 8030c3e:	f000 fca9 	bl	8031594 <_realloc_r>
 8030c42:	4606      	mov	r6, r0
 8030c44:	2800      	cmp	r0, #0
 8030c46:	d1e1      	bne.n	8030c0c <__ssputs_r+0x70>
 8030c48:	6921      	ldr	r1, [r4, #16]
 8030c4a:	4650      	mov	r0, sl
 8030c4c:	f7ff f922 	bl	802fe94 <_free_r>
 8030c50:	e7c7      	b.n	8030be2 <__ssputs_r+0x46>
	...

08030c54 <_svfiprintf_r>:
 8030c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030c58:	4698      	mov	r8, r3
 8030c5a:	898b      	ldrh	r3, [r1, #12]
 8030c5c:	b09d      	sub	sp, #116	; 0x74
 8030c5e:	4607      	mov	r7, r0
 8030c60:	061b      	lsls	r3, r3, #24
 8030c62:	460d      	mov	r5, r1
 8030c64:	4614      	mov	r4, r2
 8030c66:	d50e      	bpl.n	8030c86 <_svfiprintf_r+0x32>
 8030c68:	690b      	ldr	r3, [r1, #16]
 8030c6a:	b963      	cbnz	r3, 8030c86 <_svfiprintf_r+0x32>
 8030c6c:	2140      	movs	r1, #64	; 0x40
 8030c6e:	f7ff f961 	bl	802ff34 <_malloc_r>
 8030c72:	6028      	str	r0, [r5, #0]
 8030c74:	6128      	str	r0, [r5, #16]
 8030c76:	b920      	cbnz	r0, 8030c82 <_svfiprintf_r+0x2e>
 8030c78:	230c      	movs	r3, #12
 8030c7a:	603b      	str	r3, [r7, #0]
 8030c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8030c80:	e0d1      	b.n	8030e26 <_svfiprintf_r+0x1d2>
 8030c82:	2340      	movs	r3, #64	; 0x40
 8030c84:	616b      	str	r3, [r5, #20]
 8030c86:	2300      	movs	r3, #0
 8030c88:	f8cd 800c 	str.w	r8, [sp, #12]
 8030c8c:	f04f 0901 	mov.w	r9, #1
 8030c90:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8030e40 <_svfiprintf_r+0x1ec>
 8030c94:	9309      	str	r3, [sp, #36]	; 0x24
 8030c96:	2320      	movs	r3, #32
 8030c98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8030c9c:	2330      	movs	r3, #48	; 0x30
 8030c9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8030ca2:	4623      	mov	r3, r4
 8030ca4:	469a      	mov	sl, r3
 8030ca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8030caa:	b10a      	cbz	r2, 8030cb0 <_svfiprintf_r+0x5c>
 8030cac:	2a25      	cmp	r2, #37	; 0x25
 8030cae:	d1f9      	bne.n	8030ca4 <_svfiprintf_r+0x50>
 8030cb0:	ebba 0b04 	subs.w	fp, sl, r4
 8030cb4:	d00b      	beq.n	8030cce <_svfiprintf_r+0x7a>
 8030cb6:	465b      	mov	r3, fp
 8030cb8:	4622      	mov	r2, r4
 8030cba:	4629      	mov	r1, r5
 8030cbc:	4638      	mov	r0, r7
 8030cbe:	f7ff ff6d 	bl	8030b9c <__ssputs_r>
 8030cc2:	3001      	adds	r0, #1
 8030cc4:	f000 80aa 	beq.w	8030e1c <_svfiprintf_r+0x1c8>
 8030cc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8030cca:	445a      	add	r2, fp
 8030ccc:	9209      	str	r2, [sp, #36]	; 0x24
 8030cce:	f89a 3000 	ldrb.w	r3, [sl]
 8030cd2:	2b00      	cmp	r3, #0
 8030cd4:	f000 80a2 	beq.w	8030e1c <_svfiprintf_r+0x1c8>
 8030cd8:	2300      	movs	r3, #0
 8030cda:	f04f 32ff 	mov.w	r2, #4294967295
 8030cde:	f10a 0a01 	add.w	sl, sl, #1
 8030ce2:	9304      	str	r3, [sp, #16]
 8030ce4:	9307      	str	r3, [sp, #28]
 8030ce6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8030cea:	931a      	str	r3, [sp, #104]	; 0x68
 8030cec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8030cf0:	4654      	mov	r4, sl
 8030cf2:	2205      	movs	r2, #5
 8030cf4:	4852      	ldr	r0, [pc, #328]	; (8030e40 <_svfiprintf_r+0x1ec>)
 8030cf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8030cfa:	f000 fc3d 	bl	8031578 <memchr>
 8030cfe:	9a04      	ldr	r2, [sp, #16]
 8030d00:	b9d8      	cbnz	r0, 8030d3a <_svfiprintf_r+0xe6>
 8030d02:	06d0      	lsls	r0, r2, #27
 8030d04:	bf44      	itt	mi
 8030d06:	2320      	movmi	r3, #32
 8030d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8030d0c:	0711      	lsls	r1, r2, #28
 8030d0e:	bf44      	itt	mi
 8030d10:	232b      	movmi	r3, #43	; 0x2b
 8030d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8030d16:	f89a 3000 	ldrb.w	r3, [sl]
 8030d1a:	2b2a      	cmp	r3, #42	; 0x2a
 8030d1c:	d015      	beq.n	8030d4a <_svfiprintf_r+0xf6>
 8030d1e:	9a07      	ldr	r2, [sp, #28]
 8030d20:	4654      	mov	r4, sl
 8030d22:	2000      	movs	r0, #0
 8030d24:	f04f 0c0a 	mov.w	ip, #10
 8030d28:	4621      	mov	r1, r4
 8030d2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8030d2e:	3b30      	subs	r3, #48	; 0x30
 8030d30:	2b09      	cmp	r3, #9
 8030d32:	d94e      	bls.n	8030dd2 <_svfiprintf_r+0x17e>
 8030d34:	b1b0      	cbz	r0, 8030d64 <_svfiprintf_r+0x110>
 8030d36:	9207      	str	r2, [sp, #28]
 8030d38:	e014      	b.n	8030d64 <_svfiprintf_r+0x110>
 8030d3a:	eba0 0308 	sub.w	r3, r0, r8
 8030d3e:	46a2      	mov	sl, r4
 8030d40:	fa09 f303 	lsl.w	r3, r9, r3
 8030d44:	4313      	orrs	r3, r2
 8030d46:	9304      	str	r3, [sp, #16]
 8030d48:	e7d2      	b.n	8030cf0 <_svfiprintf_r+0x9c>
 8030d4a:	9b03      	ldr	r3, [sp, #12]
 8030d4c:	1d19      	adds	r1, r3, #4
 8030d4e:	681b      	ldr	r3, [r3, #0]
 8030d50:	2b00      	cmp	r3, #0
 8030d52:	9103      	str	r1, [sp, #12]
 8030d54:	bfbb      	ittet	lt
 8030d56:	425b      	neglt	r3, r3
 8030d58:	f042 0202 	orrlt.w	r2, r2, #2
 8030d5c:	9307      	strge	r3, [sp, #28]
 8030d5e:	9307      	strlt	r3, [sp, #28]
 8030d60:	bfb8      	it	lt
 8030d62:	9204      	strlt	r2, [sp, #16]
 8030d64:	7823      	ldrb	r3, [r4, #0]
 8030d66:	2b2e      	cmp	r3, #46	; 0x2e
 8030d68:	d10c      	bne.n	8030d84 <_svfiprintf_r+0x130>
 8030d6a:	7863      	ldrb	r3, [r4, #1]
 8030d6c:	2b2a      	cmp	r3, #42	; 0x2a
 8030d6e:	d135      	bne.n	8030ddc <_svfiprintf_r+0x188>
 8030d70:	9b03      	ldr	r3, [sp, #12]
 8030d72:	3402      	adds	r4, #2
 8030d74:	1d1a      	adds	r2, r3, #4
 8030d76:	681b      	ldr	r3, [r3, #0]
 8030d78:	2b00      	cmp	r3, #0
 8030d7a:	9203      	str	r2, [sp, #12]
 8030d7c:	bfb8      	it	lt
 8030d7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8030d82:	9305      	str	r3, [sp, #20]
 8030d84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8030e50 <_svfiprintf_r+0x1fc>
 8030d88:	2203      	movs	r2, #3
 8030d8a:	7821      	ldrb	r1, [r4, #0]
 8030d8c:	4650      	mov	r0, sl
 8030d8e:	f000 fbf3 	bl	8031578 <memchr>
 8030d92:	b140      	cbz	r0, 8030da6 <_svfiprintf_r+0x152>
 8030d94:	2340      	movs	r3, #64	; 0x40
 8030d96:	eba0 000a 	sub.w	r0, r0, sl
 8030d9a:	3401      	adds	r4, #1
 8030d9c:	fa03 f000 	lsl.w	r0, r3, r0
 8030da0:	9b04      	ldr	r3, [sp, #16]
 8030da2:	4303      	orrs	r3, r0
 8030da4:	9304      	str	r3, [sp, #16]
 8030da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8030daa:	2206      	movs	r2, #6
 8030dac:	4825      	ldr	r0, [pc, #148]	; (8030e44 <_svfiprintf_r+0x1f0>)
 8030dae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8030db2:	f000 fbe1 	bl	8031578 <memchr>
 8030db6:	2800      	cmp	r0, #0
 8030db8:	d038      	beq.n	8030e2c <_svfiprintf_r+0x1d8>
 8030dba:	4b23      	ldr	r3, [pc, #140]	; (8030e48 <_svfiprintf_r+0x1f4>)
 8030dbc:	bb1b      	cbnz	r3, 8030e06 <_svfiprintf_r+0x1b2>
 8030dbe:	9b03      	ldr	r3, [sp, #12]
 8030dc0:	3307      	adds	r3, #7
 8030dc2:	f023 0307 	bic.w	r3, r3, #7
 8030dc6:	3308      	adds	r3, #8
 8030dc8:	9303      	str	r3, [sp, #12]
 8030dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8030dcc:	4433      	add	r3, r6
 8030dce:	9309      	str	r3, [sp, #36]	; 0x24
 8030dd0:	e767      	b.n	8030ca2 <_svfiprintf_r+0x4e>
 8030dd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8030dd6:	460c      	mov	r4, r1
 8030dd8:	2001      	movs	r0, #1
 8030dda:	e7a5      	b.n	8030d28 <_svfiprintf_r+0xd4>
 8030ddc:	2300      	movs	r3, #0
 8030dde:	3401      	adds	r4, #1
 8030de0:	f04f 0c0a 	mov.w	ip, #10
 8030de4:	4619      	mov	r1, r3
 8030de6:	9305      	str	r3, [sp, #20]
 8030de8:	4620      	mov	r0, r4
 8030dea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8030dee:	3a30      	subs	r2, #48	; 0x30
 8030df0:	2a09      	cmp	r2, #9
 8030df2:	d903      	bls.n	8030dfc <_svfiprintf_r+0x1a8>
 8030df4:	2b00      	cmp	r3, #0
 8030df6:	d0c5      	beq.n	8030d84 <_svfiprintf_r+0x130>
 8030df8:	9105      	str	r1, [sp, #20]
 8030dfa:	e7c3      	b.n	8030d84 <_svfiprintf_r+0x130>
 8030dfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8030e00:	4604      	mov	r4, r0
 8030e02:	2301      	movs	r3, #1
 8030e04:	e7f0      	b.n	8030de8 <_svfiprintf_r+0x194>
 8030e06:	ab03      	add	r3, sp, #12
 8030e08:	462a      	mov	r2, r5
 8030e0a:	a904      	add	r1, sp, #16
 8030e0c:	4638      	mov	r0, r7
 8030e0e:	9300      	str	r3, [sp, #0]
 8030e10:	4b0e      	ldr	r3, [pc, #56]	; (8030e4c <_svfiprintf_r+0x1f8>)
 8030e12:	e000      	b.n	8030e16 <_svfiprintf_r+0x1c2>
 8030e14:	bf00      	nop
 8030e16:	1c42      	adds	r2, r0, #1
 8030e18:	4606      	mov	r6, r0
 8030e1a:	d1d6      	bne.n	8030dca <_svfiprintf_r+0x176>
 8030e1c:	89ab      	ldrh	r3, [r5, #12]
 8030e1e:	065b      	lsls	r3, r3, #25
 8030e20:	f53f af2c 	bmi.w	8030c7c <_svfiprintf_r+0x28>
 8030e24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8030e26:	b01d      	add	sp, #116	; 0x74
 8030e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030e2c:	ab03      	add	r3, sp, #12
 8030e2e:	462a      	mov	r2, r5
 8030e30:	a904      	add	r1, sp, #16
 8030e32:	4638      	mov	r0, r7
 8030e34:	9300      	str	r3, [sp, #0]
 8030e36:	4b05      	ldr	r3, [pc, #20]	; (8030e4c <_svfiprintf_r+0x1f8>)
 8030e38:	f000 f9d6 	bl	80311e8 <_printf_i>
 8030e3c:	e7eb      	b.n	8030e16 <_svfiprintf_r+0x1c2>
 8030e3e:	bf00      	nop
 8030e40:	08036130 	.word	0x08036130
 8030e44:	0803613a 	.word	0x0803613a
 8030e48:	00000000 	.word	0x00000000
 8030e4c:	08030b9d 	.word	0x08030b9d
 8030e50:	08036136 	.word	0x08036136

08030e54 <__sfputc_r>:
 8030e54:	6893      	ldr	r3, [r2, #8]
 8030e56:	3b01      	subs	r3, #1
 8030e58:	2b00      	cmp	r3, #0
 8030e5a:	6093      	str	r3, [r2, #8]
 8030e5c:	b410      	push	{r4}
 8030e5e:	da08      	bge.n	8030e72 <__sfputc_r+0x1e>
 8030e60:	6994      	ldr	r4, [r2, #24]
 8030e62:	42a3      	cmp	r3, r4
 8030e64:	db01      	blt.n	8030e6a <__sfputc_r+0x16>
 8030e66:	290a      	cmp	r1, #10
 8030e68:	d103      	bne.n	8030e72 <__sfputc_r+0x1e>
 8030e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8030e6e:	f7ff bb7d 	b.w	803056c <__swbuf_r>
 8030e72:	6813      	ldr	r3, [r2, #0]
 8030e74:	1c58      	adds	r0, r3, #1
 8030e76:	6010      	str	r0, [r2, #0]
 8030e78:	4608      	mov	r0, r1
 8030e7a:	7019      	strb	r1, [r3, #0]
 8030e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8030e80:	4770      	bx	lr

08030e82 <__sfputs_r>:
 8030e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8030e84:	4606      	mov	r6, r0
 8030e86:	460f      	mov	r7, r1
 8030e88:	4614      	mov	r4, r2
 8030e8a:	18d5      	adds	r5, r2, r3
 8030e8c:	42ac      	cmp	r4, r5
 8030e8e:	d101      	bne.n	8030e94 <__sfputs_r+0x12>
 8030e90:	2000      	movs	r0, #0
 8030e92:	e007      	b.n	8030ea4 <__sfputs_r+0x22>
 8030e94:	463a      	mov	r2, r7
 8030e96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8030e9a:	4630      	mov	r0, r6
 8030e9c:	f7ff ffda 	bl	8030e54 <__sfputc_r>
 8030ea0:	1c43      	adds	r3, r0, #1
 8030ea2:	d1f3      	bne.n	8030e8c <__sfputs_r+0xa>
 8030ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08030ea8 <_vfiprintf_r>:
 8030ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030eac:	460d      	mov	r5, r1
 8030eae:	b09d      	sub	sp, #116	; 0x74
 8030eb0:	4614      	mov	r4, r2
 8030eb2:	4698      	mov	r8, r3
 8030eb4:	4606      	mov	r6, r0
 8030eb6:	b118      	cbz	r0, 8030ec0 <_vfiprintf_r+0x18>
 8030eb8:	6983      	ldr	r3, [r0, #24]
 8030eba:	b90b      	cbnz	r3, 8030ec0 <_vfiprintf_r+0x18>
 8030ebc:	f7ff fd4c 	bl	8030958 <__sinit>
 8030ec0:	4b89      	ldr	r3, [pc, #548]	; (80310e8 <_vfiprintf_r+0x240>)
 8030ec2:	429d      	cmp	r5, r3
 8030ec4:	d11b      	bne.n	8030efe <_vfiprintf_r+0x56>
 8030ec6:	6875      	ldr	r5, [r6, #4]
 8030ec8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8030eca:	07d9      	lsls	r1, r3, #31
 8030ecc:	d405      	bmi.n	8030eda <_vfiprintf_r+0x32>
 8030ece:	89ab      	ldrh	r3, [r5, #12]
 8030ed0:	059a      	lsls	r2, r3, #22
 8030ed2:	d402      	bmi.n	8030eda <_vfiprintf_r+0x32>
 8030ed4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8030ed6:	f7ff fdef 	bl	8030ab8 <__retarget_lock_acquire_recursive>
 8030eda:	89ab      	ldrh	r3, [r5, #12]
 8030edc:	071b      	lsls	r3, r3, #28
 8030ede:	d501      	bpl.n	8030ee4 <_vfiprintf_r+0x3c>
 8030ee0:	692b      	ldr	r3, [r5, #16]
 8030ee2:	b9eb      	cbnz	r3, 8030f20 <_vfiprintf_r+0x78>
 8030ee4:	4629      	mov	r1, r5
 8030ee6:	4630      	mov	r0, r6
 8030ee8:	f7ff fb92 	bl	8030610 <__swsetup_r>
 8030eec:	b1c0      	cbz	r0, 8030f20 <_vfiprintf_r+0x78>
 8030eee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8030ef0:	07dc      	lsls	r4, r3, #31
 8030ef2:	d50e      	bpl.n	8030f12 <_vfiprintf_r+0x6a>
 8030ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8030ef8:	b01d      	add	sp, #116	; 0x74
 8030efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030efe:	4b7b      	ldr	r3, [pc, #492]	; (80310ec <_vfiprintf_r+0x244>)
 8030f00:	429d      	cmp	r5, r3
 8030f02:	d101      	bne.n	8030f08 <_vfiprintf_r+0x60>
 8030f04:	68b5      	ldr	r5, [r6, #8]
 8030f06:	e7df      	b.n	8030ec8 <_vfiprintf_r+0x20>
 8030f08:	4b79      	ldr	r3, [pc, #484]	; (80310f0 <_vfiprintf_r+0x248>)
 8030f0a:	429d      	cmp	r5, r3
 8030f0c:	bf08      	it	eq
 8030f0e:	68f5      	ldreq	r5, [r6, #12]
 8030f10:	e7da      	b.n	8030ec8 <_vfiprintf_r+0x20>
 8030f12:	89ab      	ldrh	r3, [r5, #12]
 8030f14:	0598      	lsls	r0, r3, #22
 8030f16:	d4ed      	bmi.n	8030ef4 <_vfiprintf_r+0x4c>
 8030f18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8030f1a:	f7ff fdce 	bl	8030aba <__retarget_lock_release_recursive>
 8030f1e:	e7e9      	b.n	8030ef4 <_vfiprintf_r+0x4c>
 8030f20:	2300      	movs	r3, #0
 8030f22:	f8cd 800c 	str.w	r8, [sp, #12]
 8030f26:	f04f 0901 	mov.w	r9, #1
 8030f2a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80310f4 <_vfiprintf_r+0x24c>
 8030f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8030f30:	2320      	movs	r3, #32
 8030f32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8030f36:	2330      	movs	r3, #48	; 0x30
 8030f38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8030f3c:	4623      	mov	r3, r4
 8030f3e:	469a      	mov	sl, r3
 8030f40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8030f44:	b10a      	cbz	r2, 8030f4a <_vfiprintf_r+0xa2>
 8030f46:	2a25      	cmp	r2, #37	; 0x25
 8030f48:	d1f9      	bne.n	8030f3e <_vfiprintf_r+0x96>
 8030f4a:	ebba 0b04 	subs.w	fp, sl, r4
 8030f4e:	d00b      	beq.n	8030f68 <_vfiprintf_r+0xc0>
 8030f50:	465b      	mov	r3, fp
 8030f52:	4622      	mov	r2, r4
 8030f54:	4629      	mov	r1, r5
 8030f56:	4630      	mov	r0, r6
 8030f58:	f7ff ff93 	bl	8030e82 <__sfputs_r>
 8030f5c:	3001      	adds	r0, #1
 8030f5e:	f000 80aa 	beq.w	80310b6 <_vfiprintf_r+0x20e>
 8030f62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8030f64:	445a      	add	r2, fp
 8030f66:	9209      	str	r2, [sp, #36]	; 0x24
 8030f68:	f89a 3000 	ldrb.w	r3, [sl]
 8030f6c:	2b00      	cmp	r3, #0
 8030f6e:	f000 80a2 	beq.w	80310b6 <_vfiprintf_r+0x20e>
 8030f72:	2300      	movs	r3, #0
 8030f74:	f04f 32ff 	mov.w	r2, #4294967295
 8030f78:	f10a 0a01 	add.w	sl, sl, #1
 8030f7c:	9304      	str	r3, [sp, #16]
 8030f7e:	9307      	str	r3, [sp, #28]
 8030f80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8030f84:	931a      	str	r3, [sp, #104]	; 0x68
 8030f86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8030f8a:	4654      	mov	r4, sl
 8030f8c:	2205      	movs	r2, #5
 8030f8e:	4859      	ldr	r0, [pc, #356]	; (80310f4 <_vfiprintf_r+0x24c>)
 8030f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8030f94:	f000 faf0 	bl	8031578 <memchr>
 8030f98:	9a04      	ldr	r2, [sp, #16]
 8030f9a:	b9d8      	cbnz	r0, 8030fd4 <_vfiprintf_r+0x12c>
 8030f9c:	06d1      	lsls	r1, r2, #27
 8030f9e:	bf44      	itt	mi
 8030fa0:	2320      	movmi	r3, #32
 8030fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8030fa6:	0713      	lsls	r3, r2, #28
 8030fa8:	bf44      	itt	mi
 8030faa:	232b      	movmi	r3, #43	; 0x2b
 8030fac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8030fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8030fb4:	2b2a      	cmp	r3, #42	; 0x2a
 8030fb6:	d015      	beq.n	8030fe4 <_vfiprintf_r+0x13c>
 8030fb8:	9a07      	ldr	r2, [sp, #28]
 8030fba:	4654      	mov	r4, sl
 8030fbc:	2000      	movs	r0, #0
 8030fbe:	f04f 0c0a 	mov.w	ip, #10
 8030fc2:	4621      	mov	r1, r4
 8030fc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8030fc8:	3b30      	subs	r3, #48	; 0x30
 8030fca:	2b09      	cmp	r3, #9
 8030fcc:	d94e      	bls.n	803106c <_vfiprintf_r+0x1c4>
 8030fce:	b1b0      	cbz	r0, 8030ffe <_vfiprintf_r+0x156>
 8030fd0:	9207      	str	r2, [sp, #28]
 8030fd2:	e014      	b.n	8030ffe <_vfiprintf_r+0x156>
 8030fd4:	eba0 0308 	sub.w	r3, r0, r8
 8030fd8:	46a2      	mov	sl, r4
 8030fda:	fa09 f303 	lsl.w	r3, r9, r3
 8030fde:	4313      	orrs	r3, r2
 8030fe0:	9304      	str	r3, [sp, #16]
 8030fe2:	e7d2      	b.n	8030f8a <_vfiprintf_r+0xe2>
 8030fe4:	9b03      	ldr	r3, [sp, #12]
 8030fe6:	1d19      	adds	r1, r3, #4
 8030fe8:	681b      	ldr	r3, [r3, #0]
 8030fea:	2b00      	cmp	r3, #0
 8030fec:	9103      	str	r1, [sp, #12]
 8030fee:	bfbb      	ittet	lt
 8030ff0:	425b      	neglt	r3, r3
 8030ff2:	f042 0202 	orrlt.w	r2, r2, #2
 8030ff6:	9307      	strge	r3, [sp, #28]
 8030ff8:	9307      	strlt	r3, [sp, #28]
 8030ffa:	bfb8      	it	lt
 8030ffc:	9204      	strlt	r2, [sp, #16]
 8030ffe:	7823      	ldrb	r3, [r4, #0]
 8031000:	2b2e      	cmp	r3, #46	; 0x2e
 8031002:	d10c      	bne.n	803101e <_vfiprintf_r+0x176>
 8031004:	7863      	ldrb	r3, [r4, #1]
 8031006:	2b2a      	cmp	r3, #42	; 0x2a
 8031008:	d135      	bne.n	8031076 <_vfiprintf_r+0x1ce>
 803100a:	9b03      	ldr	r3, [sp, #12]
 803100c:	3402      	adds	r4, #2
 803100e:	1d1a      	adds	r2, r3, #4
 8031010:	681b      	ldr	r3, [r3, #0]
 8031012:	2b00      	cmp	r3, #0
 8031014:	9203      	str	r2, [sp, #12]
 8031016:	bfb8      	it	lt
 8031018:	f04f 33ff 	movlt.w	r3, #4294967295
 803101c:	9305      	str	r3, [sp, #20]
 803101e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8031104 <_vfiprintf_r+0x25c>
 8031022:	2203      	movs	r2, #3
 8031024:	7821      	ldrb	r1, [r4, #0]
 8031026:	4650      	mov	r0, sl
 8031028:	f000 faa6 	bl	8031578 <memchr>
 803102c:	b140      	cbz	r0, 8031040 <_vfiprintf_r+0x198>
 803102e:	2340      	movs	r3, #64	; 0x40
 8031030:	eba0 000a 	sub.w	r0, r0, sl
 8031034:	3401      	adds	r4, #1
 8031036:	fa03 f000 	lsl.w	r0, r3, r0
 803103a:	9b04      	ldr	r3, [sp, #16]
 803103c:	4303      	orrs	r3, r0
 803103e:	9304      	str	r3, [sp, #16]
 8031040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8031044:	2206      	movs	r2, #6
 8031046:	482c      	ldr	r0, [pc, #176]	; (80310f8 <_vfiprintf_r+0x250>)
 8031048:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 803104c:	f000 fa94 	bl	8031578 <memchr>
 8031050:	2800      	cmp	r0, #0
 8031052:	d03f      	beq.n	80310d4 <_vfiprintf_r+0x22c>
 8031054:	4b29      	ldr	r3, [pc, #164]	; (80310fc <_vfiprintf_r+0x254>)
 8031056:	bb1b      	cbnz	r3, 80310a0 <_vfiprintf_r+0x1f8>
 8031058:	9b03      	ldr	r3, [sp, #12]
 803105a:	3307      	adds	r3, #7
 803105c:	f023 0307 	bic.w	r3, r3, #7
 8031060:	3308      	adds	r3, #8
 8031062:	9303      	str	r3, [sp, #12]
 8031064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8031066:	443b      	add	r3, r7
 8031068:	9309      	str	r3, [sp, #36]	; 0x24
 803106a:	e767      	b.n	8030f3c <_vfiprintf_r+0x94>
 803106c:	fb0c 3202 	mla	r2, ip, r2, r3
 8031070:	460c      	mov	r4, r1
 8031072:	2001      	movs	r0, #1
 8031074:	e7a5      	b.n	8030fc2 <_vfiprintf_r+0x11a>
 8031076:	2300      	movs	r3, #0
 8031078:	3401      	adds	r4, #1
 803107a:	f04f 0c0a 	mov.w	ip, #10
 803107e:	4619      	mov	r1, r3
 8031080:	9305      	str	r3, [sp, #20]
 8031082:	4620      	mov	r0, r4
 8031084:	f810 2b01 	ldrb.w	r2, [r0], #1
 8031088:	3a30      	subs	r2, #48	; 0x30
 803108a:	2a09      	cmp	r2, #9
 803108c:	d903      	bls.n	8031096 <_vfiprintf_r+0x1ee>
 803108e:	2b00      	cmp	r3, #0
 8031090:	d0c5      	beq.n	803101e <_vfiprintf_r+0x176>
 8031092:	9105      	str	r1, [sp, #20]
 8031094:	e7c3      	b.n	803101e <_vfiprintf_r+0x176>
 8031096:	fb0c 2101 	mla	r1, ip, r1, r2
 803109a:	4604      	mov	r4, r0
 803109c:	2301      	movs	r3, #1
 803109e:	e7f0      	b.n	8031082 <_vfiprintf_r+0x1da>
 80310a0:	ab03      	add	r3, sp, #12
 80310a2:	462a      	mov	r2, r5
 80310a4:	a904      	add	r1, sp, #16
 80310a6:	4630      	mov	r0, r6
 80310a8:	9300      	str	r3, [sp, #0]
 80310aa:	4b15      	ldr	r3, [pc, #84]	; (8031100 <_vfiprintf_r+0x258>)
 80310ac:	e000      	b.n	80310b0 <_vfiprintf_r+0x208>
 80310ae:	bf00      	nop
 80310b0:	4607      	mov	r7, r0
 80310b2:	1c78      	adds	r0, r7, #1
 80310b4:	d1d6      	bne.n	8031064 <_vfiprintf_r+0x1bc>
 80310b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80310b8:	07d9      	lsls	r1, r3, #31
 80310ba:	d405      	bmi.n	80310c8 <_vfiprintf_r+0x220>
 80310bc:	89ab      	ldrh	r3, [r5, #12]
 80310be:	059a      	lsls	r2, r3, #22
 80310c0:	d402      	bmi.n	80310c8 <_vfiprintf_r+0x220>
 80310c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80310c4:	f7ff fcf9 	bl	8030aba <__retarget_lock_release_recursive>
 80310c8:	89ab      	ldrh	r3, [r5, #12]
 80310ca:	065b      	lsls	r3, r3, #25
 80310cc:	f53f af12 	bmi.w	8030ef4 <_vfiprintf_r+0x4c>
 80310d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80310d2:	e711      	b.n	8030ef8 <_vfiprintf_r+0x50>
 80310d4:	ab03      	add	r3, sp, #12
 80310d6:	462a      	mov	r2, r5
 80310d8:	a904      	add	r1, sp, #16
 80310da:	4630      	mov	r0, r6
 80310dc:	9300      	str	r3, [sp, #0]
 80310de:	4b08      	ldr	r3, [pc, #32]	; (8031100 <_vfiprintf_r+0x258>)
 80310e0:	f000 f882 	bl	80311e8 <_printf_i>
 80310e4:	e7e4      	b.n	80310b0 <_vfiprintf_r+0x208>
 80310e6:	bf00      	nop
 80310e8:	080360f0 	.word	0x080360f0
 80310ec:	08036110 	.word	0x08036110
 80310f0:	080360d0 	.word	0x080360d0
 80310f4:	08036130 	.word	0x08036130
 80310f8:	0803613a 	.word	0x0803613a
 80310fc:	00000000 	.word	0x00000000
 8031100:	08030e83 	.word	0x08030e83
 8031104:	08036136 	.word	0x08036136

08031108 <_printf_common>:
 8031108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803110c:	4616      	mov	r6, r2
 803110e:	4699      	mov	r9, r3
 8031110:	688a      	ldr	r2, [r1, #8]
 8031112:	4607      	mov	r7, r0
 8031114:	690b      	ldr	r3, [r1, #16]
 8031116:	460c      	mov	r4, r1
 8031118:	f8dd 8020 	ldr.w	r8, [sp, #32]
 803111c:	4293      	cmp	r3, r2
 803111e:	bfb8      	it	lt
 8031120:	4613      	movlt	r3, r2
 8031122:	6033      	str	r3, [r6, #0]
 8031124:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8031128:	b10a      	cbz	r2, 803112e <_printf_common+0x26>
 803112a:	3301      	adds	r3, #1
 803112c:	6033      	str	r3, [r6, #0]
 803112e:	6823      	ldr	r3, [r4, #0]
 8031130:	0699      	lsls	r1, r3, #26
 8031132:	bf42      	ittt	mi
 8031134:	6833      	ldrmi	r3, [r6, #0]
 8031136:	3302      	addmi	r3, #2
 8031138:	6033      	strmi	r3, [r6, #0]
 803113a:	6825      	ldr	r5, [r4, #0]
 803113c:	f015 0506 	ands.w	r5, r5, #6
 8031140:	d106      	bne.n	8031150 <_printf_common+0x48>
 8031142:	f104 0a19 	add.w	sl, r4, #25
 8031146:	68e3      	ldr	r3, [r4, #12]
 8031148:	6832      	ldr	r2, [r6, #0]
 803114a:	1a9b      	subs	r3, r3, r2
 803114c:	42ab      	cmp	r3, r5
 803114e:	dc29      	bgt.n	80311a4 <_printf_common+0x9c>
 8031150:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8031154:	1e13      	subs	r3, r2, #0
 8031156:	6822      	ldr	r2, [r4, #0]
 8031158:	bf18      	it	ne
 803115a:	2301      	movne	r3, #1
 803115c:	0692      	lsls	r2, r2, #26
 803115e:	d42e      	bmi.n	80311be <_printf_common+0xb6>
 8031160:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8031164:	4649      	mov	r1, r9
 8031166:	4638      	mov	r0, r7
 8031168:	47c0      	blx	r8
 803116a:	3001      	adds	r0, #1
 803116c:	d021      	beq.n	80311b2 <_printf_common+0xaa>
 803116e:	6823      	ldr	r3, [r4, #0]
 8031170:	341a      	adds	r4, #26
 8031172:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8031176:	f003 0306 	and.w	r3, r3, #6
 803117a:	6832      	ldr	r2, [r6, #0]
 803117c:	2600      	movs	r6, #0
 803117e:	2b04      	cmp	r3, #4
 8031180:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8031184:	bf08      	it	eq
 8031186:	1aad      	subeq	r5, r5, r2
 8031188:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 803118c:	bf14      	ite	ne
 803118e:	2500      	movne	r5, #0
 8031190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8031194:	4293      	cmp	r3, r2
 8031196:	bfc4      	itt	gt
 8031198:	1a9b      	subgt	r3, r3, r2
 803119a:	18ed      	addgt	r5, r5, r3
 803119c:	42b5      	cmp	r5, r6
 803119e:	d11a      	bne.n	80311d6 <_printf_common+0xce>
 80311a0:	2000      	movs	r0, #0
 80311a2:	e008      	b.n	80311b6 <_printf_common+0xae>
 80311a4:	2301      	movs	r3, #1
 80311a6:	4652      	mov	r2, sl
 80311a8:	4649      	mov	r1, r9
 80311aa:	4638      	mov	r0, r7
 80311ac:	47c0      	blx	r8
 80311ae:	3001      	adds	r0, #1
 80311b0:	d103      	bne.n	80311ba <_printf_common+0xb2>
 80311b2:	f04f 30ff 	mov.w	r0, #4294967295
 80311b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80311ba:	3501      	adds	r5, #1
 80311bc:	e7c3      	b.n	8031146 <_printf_common+0x3e>
 80311be:	18e1      	adds	r1, r4, r3
 80311c0:	1c5a      	adds	r2, r3, #1
 80311c2:	2030      	movs	r0, #48	; 0x30
 80311c4:	3302      	adds	r3, #2
 80311c6:	4422      	add	r2, r4
 80311c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80311cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80311d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80311d4:	e7c4      	b.n	8031160 <_printf_common+0x58>
 80311d6:	2301      	movs	r3, #1
 80311d8:	4622      	mov	r2, r4
 80311da:	4649      	mov	r1, r9
 80311dc:	4638      	mov	r0, r7
 80311de:	47c0      	blx	r8
 80311e0:	3001      	adds	r0, #1
 80311e2:	d0e6      	beq.n	80311b2 <_printf_common+0xaa>
 80311e4:	3601      	adds	r6, #1
 80311e6:	e7d9      	b.n	803119c <_printf_common+0x94>

080311e8 <_printf_i>:
 80311e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80311ec:	460c      	mov	r4, r1
 80311ee:	4691      	mov	r9, r2
 80311f0:	4680      	mov	r8, r0
 80311f2:	469a      	mov	sl, r3
 80311f4:	7e27      	ldrb	r7, [r4, #24]
 80311f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80311fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80311fc:	2f78      	cmp	r7, #120	; 0x78
 80311fe:	d807      	bhi.n	8031210 <_printf_i+0x28>
 8031200:	2f62      	cmp	r7, #98	; 0x62
 8031202:	d80a      	bhi.n	803121a <_printf_i+0x32>
 8031204:	2f00      	cmp	r7, #0
 8031206:	f000 80d8 	beq.w	80313ba <_printf_i+0x1d2>
 803120a:	2f58      	cmp	r7, #88	; 0x58
 803120c:	f000 80a3 	beq.w	8031356 <_printf_i+0x16e>
 8031210:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8031214:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8031218:	e03a      	b.n	8031290 <_printf_i+0xa8>
 803121a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 803121e:	2b15      	cmp	r3, #21
 8031220:	d8f6      	bhi.n	8031210 <_printf_i+0x28>
 8031222:	a001      	add	r0, pc, #4	; (adr r0, 8031228 <_printf_i+0x40>)
 8031224:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8031228:	08031281 	.word	0x08031281
 803122c:	08031295 	.word	0x08031295
 8031230:	08031211 	.word	0x08031211
 8031234:	08031211 	.word	0x08031211
 8031238:	08031211 	.word	0x08031211
 803123c:	08031211 	.word	0x08031211
 8031240:	08031295 	.word	0x08031295
 8031244:	08031211 	.word	0x08031211
 8031248:	08031211 	.word	0x08031211
 803124c:	08031211 	.word	0x08031211
 8031250:	08031211 	.word	0x08031211
 8031254:	080313a1 	.word	0x080313a1
 8031258:	080312c5 	.word	0x080312c5
 803125c:	08031383 	.word	0x08031383
 8031260:	08031211 	.word	0x08031211
 8031264:	08031211 	.word	0x08031211
 8031268:	080313c3 	.word	0x080313c3
 803126c:	08031211 	.word	0x08031211
 8031270:	080312c5 	.word	0x080312c5
 8031274:	08031211 	.word	0x08031211
 8031278:	08031211 	.word	0x08031211
 803127c:	0803138b 	.word	0x0803138b
 8031280:	680b      	ldr	r3, [r1, #0]
 8031282:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8031286:	1d1a      	adds	r2, r3, #4
 8031288:	681b      	ldr	r3, [r3, #0]
 803128a:	600a      	str	r2, [r1, #0]
 803128c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8031290:	2301      	movs	r3, #1
 8031292:	e0a3      	b.n	80313dc <_printf_i+0x1f4>
 8031294:	6825      	ldr	r5, [r4, #0]
 8031296:	6808      	ldr	r0, [r1, #0]
 8031298:	062e      	lsls	r6, r5, #24
 803129a:	f100 0304 	add.w	r3, r0, #4
 803129e:	d50a      	bpl.n	80312b6 <_printf_i+0xce>
 80312a0:	6805      	ldr	r5, [r0, #0]
 80312a2:	600b      	str	r3, [r1, #0]
 80312a4:	2d00      	cmp	r5, #0
 80312a6:	da03      	bge.n	80312b0 <_printf_i+0xc8>
 80312a8:	232d      	movs	r3, #45	; 0x2d
 80312aa:	426d      	negs	r5, r5
 80312ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80312b0:	485e      	ldr	r0, [pc, #376]	; (803142c <_printf_i+0x244>)
 80312b2:	230a      	movs	r3, #10
 80312b4:	e019      	b.n	80312ea <_printf_i+0x102>
 80312b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80312ba:	6805      	ldr	r5, [r0, #0]
 80312bc:	600b      	str	r3, [r1, #0]
 80312be:	bf18      	it	ne
 80312c0:	b22d      	sxthne	r5, r5
 80312c2:	e7ef      	b.n	80312a4 <_printf_i+0xbc>
 80312c4:	680b      	ldr	r3, [r1, #0]
 80312c6:	6825      	ldr	r5, [r4, #0]
 80312c8:	1d18      	adds	r0, r3, #4
 80312ca:	6008      	str	r0, [r1, #0]
 80312cc:	0628      	lsls	r0, r5, #24
 80312ce:	d501      	bpl.n	80312d4 <_printf_i+0xec>
 80312d0:	681d      	ldr	r5, [r3, #0]
 80312d2:	e002      	b.n	80312da <_printf_i+0xf2>
 80312d4:	0669      	lsls	r1, r5, #25
 80312d6:	d5fb      	bpl.n	80312d0 <_printf_i+0xe8>
 80312d8:	881d      	ldrh	r5, [r3, #0]
 80312da:	2f6f      	cmp	r7, #111	; 0x6f
 80312dc:	4853      	ldr	r0, [pc, #332]	; (803142c <_printf_i+0x244>)
 80312de:	bf0c      	ite	eq
 80312e0:	2308      	moveq	r3, #8
 80312e2:	230a      	movne	r3, #10
 80312e4:	2100      	movs	r1, #0
 80312e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80312ea:	6866      	ldr	r6, [r4, #4]
 80312ec:	2e00      	cmp	r6, #0
 80312ee:	60a6      	str	r6, [r4, #8]
 80312f0:	bfa2      	ittt	ge
 80312f2:	6821      	ldrge	r1, [r4, #0]
 80312f4:	f021 0104 	bicge.w	r1, r1, #4
 80312f8:	6021      	strge	r1, [r4, #0]
 80312fa:	b90d      	cbnz	r5, 8031300 <_printf_i+0x118>
 80312fc:	2e00      	cmp	r6, #0
 80312fe:	d04d      	beq.n	803139c <_printf_i+0x1b4>
 8031300:	4616      	mov	r6, r2
 8031302:	fbb5 f1f3 	udiv	r1, r5, r3
 8031306:	fb03 5711 	mls	r7, r3, r1, r5
 803130a:	5dc7      	ldrb	r7, [r0, r7]
 803130c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8031310:	462f      	mov	r7, r5
 8031312:	460d      	mov	r5, r1
 8031314:	42bb      	cmp	r3, r7
 8031316:	d9f4      	bls.n	8031302 <_printf_i+0x11a>
 8031318:	2b08      	cmp	r3, #8
 803131a:	d10b      	bne.n	8031334 <_printf_i+0x14c>
 803131c:	6823      	ldr	r3, [r4, #0]
 803131e:	07df      	lsls	r7, r3, #31
 8031320:	d508      	bpl.n	8031334 <_printf_i+0x14c>
 8031322:	6923      	ldr	r3, [r4, #16]
 8031324:	6861      	ldr	r1, [r4, #4]
 8031326:	4299      	cmp	r1, r3
 8031328:	bfde      	ittt	le
 803132a:	2330      	movle	r3, #48	; 0x30
 803132c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8031330:	f106 36ff 	addle.w	r6, r6, #4294967295
 8031334:	1b92      	subs	r2, r2, r6
 8031336:	6122      	str	r2, [r4, #16]
 8031338:	464b      	mov	r3, r9
 803133a:	aa03      	add	r2, sp, #12
 803133c:	4621      	mov	r1, r4
 803133e:	4640      	mov	r0, r8
 8031340:	f8cd a000 	str.w	sl, [sp]
 8031344:	f7ff fee0 	bl	8031108 <_printf_common>
 8031348:	3001      	adds	r0, #1
 803134a:	d14c      	bne.n	80313e6 <_printf_i+0x1fe>
 803134c:	f04f 30ff 	mov.w	r0, #4294967295
 8031350:	b004      	add	sp, #16
 8031352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8031356:	4835      	ldr	r0, [pc, #212]	; (803142c <_printf_i+0x244>)
 8031358:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 803135c:	6823      	ldr	r3, [r4, #0]
 803135e:	680e      	ldr	r6, [r1, #0]
 8031360:	061f      	lsls	r7, r3, #24
 8031362:	f856 5b04 	ldr.w	r5, [r6], #4
 8031366:	600e      	str	r6, [r1, #0]
 8031368:	d514      	bpl.n	8031394 <_printf_i+0x1ac>
 803136a:	07d9      	lsls	r1, r3, #31
 803136c:	bf44      	itt	mi
 803136e:	f043 0320 	orrmi.w	r3, r3, #32
 8031372:	6023      	strmi	r3, [r4, #0]
 8031374:	b91d      	cbnz	r5, 803137e <_printf_i+0x196>
 8031376:	6823      	ldr	r3, [r4, #0]
 8031378:	f023 0320 	bic.w	r3, r3, #32
 803137c:	6023      	str	r3, [r4, #0]
 803137e:	2310      	movs	r3, #16
 8031380:	e7b0      	b.n	80312e4 <_printf_i+0xfc>
 8031382:	6823      	ldr	r3, [r4, #0]
 8031384:	f043 0320 	orr.w	r3, r3, #32
 8031388:	6023      	str	r3, [r4, #0]
 803138a:	2378      	movs	r3, #120	; 0x78
 803138c:	4828      	ldr	r0, [pc, #160]	; (8031430 <_printf_i+0x248>)
 803138e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8031392:	e7e3      	b.n	803135c <_printf_i+0x174>
 8031394:	065e      	lsls	r6, r3, #25
 8031396:	bf48      	it	mi
 8031398:	b2ad      	uxthmi	r5, r5
 803139a:	e7e6      	b.n	803136a <_printf_i+0x182>
 803139c:	4616      	mov	r6, r2
 803139e:	e7bb      	b.n	8031318 <_printf_i+0x130>
 80313a0:	680b      	ldr	r3, [r1, #0]
 80313a2:	6826      	ldr	r6, [r4, #0]
 80313a4:	1d1d      	adds	r5, r3, #4
 80313a6:	6960      	ldr	r0, [r4, #20]
 80313a8:	600d      	str	r5, [r1, #0]
 80313aa:	0635      	lsls	r5, r6, #24
 80313ac:	681b      	ldr	r3, [r3, #0]
 80313ae:	d501      	bpl.n	80313b4 <_printf_i+0x1cc>
 80313b0:	6018      	str	r0, [r3, #0]
 80313b2:	e002      	b.n	80313ba <_printf_i+0x1d2>
 80313b4:	0671      	lsls	r1, r6, #25
 80313b6:	d5fb      	bpl.n	80313b0 <_printf_i+0x1c8>
 80313b8:	8018      	strh	r0, [r3, #0]
 80313ba:	2300      	movs	r3, #0
 80313bc:	4616      	mov	r6, r2
 80313be:	6123      	str	r3, [r4, #16]
 80313c0:	e7ba      	b.n	8031338 <_printf_i+0x150>
 80313c2:	680b      	ldr	r3, [r1, #0]
 80313c4:	1d1a      	adds	r2, r3, #4
 80313c6:	600a      	str	r2, [r1, #0]
 80313c8:	2100      	movs	r1, #0
 80313ca:	681e      	ldr	r6, [r3, #0]
 80313cc:	6862      	ldr	r2, [r4, #4]
 80313ce:	4630      	mov	r0, r6
 80313d0:	f000 f8d2 	bl	8031578 <memchr>
 80313d4:	b108      	cbz	r0, 80313da <_printf_i+0x1f2>
 80313d6:	1b80      	subs	r0, r0, r6
 80313d8:	6060      	str	r0, [r4, #4]
 80313da:	6863      	ldr	r3, [r4, #4]
 80313dc:	6123      	str	r3, [r4, #16]
 80313de:	2300      	movs	r3, #0
 80313e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80313e4:	e7a8      	b.n	8031338 <_printf_i+0x150>
 80313e6:	6923      	ldr	r3, [r4, #16]
 80313e8:	4632      	mov	r2, r6
 80313ea:	4649      	mov	r1, r9
 80313ec:	4640      	mov	r0, r8
 80313ee:	47d0      	blx	sl
 80313f0:	3001      	adds	r0, #1
 80313f2:	d0ab      	beq.n	803134c <_printf_i+0x164>
 80313f4:	6823      	ldr	r3, [r4, #0]
 80313f6:	079b      	lsls	r3, r3, #30
 80313f8:	d413      	bmi.n	8031422 <_printf_i+0x23a>
 80313fa:	68e0      	ldr	r0, [r4, #12]
 80313fc:	9b03      	ldr	r3, [sp, #12]
 80313fe:	4298      	cmp	r0, r3
 8031400:	bfb8      	it	lt
 8031402:	4618      	movlt	r0, r3
 8031404:	e7a4      	b.n	8031350 <_printf_i+0x168>
 8031406:	2301      	movs	r3, #1
 8031408:	4632      	mov	r2, r6
 803140a:	4649      	mov	r1, r9
 803140c:	4640      	mov	r0, r8
 803140e:	47d0      	blx	sl
 8031410:	3001      	adds	r0, #1
 8031412:	d09b      	beq.n	803134c <_printf_i+0x164>
 8031414:	3501      	adds	r5, #1
 8031416:	68e3      	ldr	r3, [r4, #12]
 8031418:	9903      	ldr	r1, [sp, #12]
 803141a:	1a5b      	subs	r3, r3, r1
 803141c:	42ab      	cmp	r3, r5
 803141e:	dcf2      	bgt.n	8031406 <_printf_i+0x21e>
 8031420:	e7eb      	b.n	80313fa <_printf_i+0x212>
 8031422:	2500      	movs	r5, #0
 8031424:	f104 0619 	add.w	r6, r4, #25
 8031428:	e7f5      	b.n	8031416 <_printf_i+0x22e>
 803142a:	bf00      	nop
 803142c:	08036141 	.word	0x08036141
 8031430:	08036152 	.word	0x08036152

08031434 <__sread>:
 8031434:	b510      	push	{r4, lr}
 8031436:	460c      	mov	r4, r1
 8031438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803143c:	f000 f8d0 	bl	80315e0 <_read_r>
 8031440:	2800      	cmp	r0, #0
 8031442:	bfab      	itete	ge
 8031444:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8031446:	89a3      	ldrhlt	r3, [r4, #12]
 8031448:	181b      	addge	r3, r3, r0
 803144a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 803144e:	bfac      	ite	ge
 8031450:	6563      	strge	r3, [r4, #84]	; 0x54
 8031452:	81a3      	strhlt	r3, [r4, #12]
 8031454:	bd10      	pop	{r4, pc}

08031456 <__swrite>:
 8031456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803145a:	461f      	mov	r7, r3
 803145c:	898b      	ldrh	r3, [r1, #12]
 803145e:	4605      	mov	r5, r0
 8031460:	460c      	mov	r4, r1
 8031462:	05db      	lsls	r3, r3, #23
 8031464:	4616      	mov	r6, r2
 8031466:	d505      	bpl.n	8031474 <__swrite+0x1e>
 8031468:	2302      	movs	r3, #2
 803146a:	2200      	movs	r2, #0
 803146c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8031470:	f000 f870 	bl	8031554 <_lseek_r>
 8031474:	89a3      	ldrh	r3, [r4, #12]
 8031476:	4632      	mov	r2, r6
 8031478:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803147c:	4628      	mov	r0, r5
 803147e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8031482:	81a3      	strh	r3, [r4, #12]
 8031484:	463b      	mov	r3, r7
 8031486:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 803148a:	f000 b817 	b.w	80314bc <_write_r>

0803148e <__sseek>:
 803148e:	b510      	push	{r4, lr}
 8031490:	460c      	mov	r4, r1
 8031492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8031496:	f000 f85d 	bl	8031554 <_lseek_r>
 803149a:	1c43      	adds	r3, r0, #1
 803149c:	89a3      	ldrh	r3, [r4, #12]
 803149e:	bf15      	itete	ne
 80314a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80314a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80314a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80314aa:	81a3      	strheq	r3, [r4, #12]
 80314ac:	bf18      	it	ne
 80314ae:	81a3      	strhne	r3, [r4, #12]
 80314b0:	bd10      	pop	{r4, pc}

080314b2 <__sclose>:
 80314b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80314b6:	f000 b81b 	b.w	80314f0 <_close_r>
	...

080314bc <_write_r>:
 80314bc:	b538      	push	{r3, r4, r5, lr}
 80314be:	4604      	mov	r4, r0
 80314c0:	4d06      	ldr	r5, [pc, #24]	; (80314dc <_write_r+0x20>)
 80314c2:	4608      	mov	r0, r1
 80314c4:	4611      	mov	r1, r2
 80314c6:	2200      	movs	r2, #0
 80314c8:	602a      	str	r2, [r5, #0]
 80314ca:	461a      	mov	r2, r3
 80314cc:	f7df fb74 	bl	8010bb8 <_write>
 80314d0:	1c43      	adds	r3, r0, #1
 80314d2:	d102      	bne.n	80314da <_write_r+0x1e>
 80314d4:	682b      	ldr	r3, [r5, #0]
 80314d6:	b103      	cbz	r3, 80314da <_write_r+0x1e>
 80314d8:	6023      	str	r3, [r4, #0]
 80314da:	bd38      	pop	{r3, r4, r5, pc}
 80314dc:	2001fedc 	.word	0x2001fedc

080314e0 <abort>:
 80314e0:	2006      	movs	r0, #6
 80314e2:	b508      	push	{r3, lr}
 80314e4:	f000 f8b6 	bl	8031654 <raise>
 80314e8:	2001      	movs	r0, #1
 80314ea:	f7df fb51 	bl	8010b90 <_exit>
	...

080314f0 <_close_r>:
 80314f0:	b538      	push	{r3, r4, r5, lr}
 80314f2:	2300      	movs	r3, #0
 80314f4:	4d05      	ldr	r5, [pc, #20]	; (803150c <_close_r+0x1c>)
 80314f6:	4604      	mov	r4, r0
 80314f8:	4608      	mov	r0, r1
 80314fa:	602b      	str	r3, [r5, #0]
 80314fc:	f7df fb6a 	bl	8010bd4 <_close>
 8031500:	1c43      	adds	r3, r0, #1
 8031502:	d102      	bne.n	803150a <_close_r+0x1a>
 8031504:	682b      	ldr	r3, [r5, #0]
 8031506:	b103      	cbz	r3, 803150a <_close_r+0x1a>
 8031508:	6023      	str	r3, [r4, #0]
 803150a:	bd38      	pop	{r3, r4, r5, pc}
 803150c:	2001fedc 	.word	0x2001fedc

08031510 <_fstat_r>:
 8031510:	b538      	push	{r3, r4, r5, lr}
 8031512:	2300      	movs	r3, #0
 8031514:	4d06      	ldr	r5, [pc, #24]	; (8031530 <_fstat_r+0x20>)
 8031516:	4604      	mov	r4, r0
 8031518:	4608      	mov	r0, r1
 803151a:	4611      	mov	r1, r2
 803151c:	602b      	str	r3, [r5, #0]
 803151e:	f7df fb5d 	bl	8010bdc <_fstat>
 8031522:	1c43      	adds	r3, r0, #1
 8031524:	d102      	bne.n	803152c <_fstat_r+0x1c>
 8031526:	682b      	ldr	r3, [r5, #0]
 8031528:	b103      	cbz	r3, 803152c <_fstat_r+0x1c>
 803152a:	6023      	str	r3, [r4, #0]
 803152c:	bd38      	pop	{r3, r4, r5, pc}
 803152e:	bf00      	nop
 8031530:	2001fedc 	.word	0x2001fedc

08031534 <_isatty_r>:
 8031534:	b538      	push	{r3, r4, r5, lr}
 8031536:	2300      	movs	r3, #0
 8031538:	4d05      	ldr	r5, [pc, #20]	; (8031550 <_isatty_r+0x1c>)
 803153a:	4604      	mov	r4, r0
 803153c:	4608      	mov	r0, r1
 803153e:	602b      	str	r3, [r5, #0]
 8031540:	f7df fb52 	bl	8010be8 <_isatty>
 8031544:	1c43      	adds	r3, r0, #1
 8031546:	d102      	bne.n	803154e <_isatty_r+0x1a>
 8031548:	682b      	ldr	r3, [r5, #0]
 803154a:	b103      	cbz	r3, 803154e <_isatty_r+0x1a>
 803154c:	6023      	str	r3, [r4, #0]
 803154e:	bd38      	pop	{r3, r4, r5, pc}
 8031550:	2001fedc 	.word	0x2001fedc

08031554 <_lseek_r>:
 8031554:	b538      	push	{r3, r4, r5, lr}
 8031556:	4604      	mov	r4, r0
 8031558:	4d06      	ldr	r5, [pc, #24]	; (8031574 <_lseek_r+0x20>)
 803155a:	4608      	mov	r0, r1
 803155c:	4611      	mov	r1, r2
 803155e:	2200      	movs	r2, #0
 8031560:	602a      	str	r2, [r5, #0]
 8031562:	461a      	mov	r2, r3
 8031564:	f7df fb42 	bl	8010bec <_lseek>
 8031568:	1c43      	adds	r3, r0, #1
 803156a:	d102      	bne.n	8031572 <_lseek_r+0x1e>
 803156c:	682b      	ldr	r3, [r5, #0]
 803156e:	b103      	cbz	r3, 8031572 <_lseek_r+0x1e>
 8031570:	6023      	str	r3, [r4, #0]
 8031572:	bd38      	pop	{r3, r4, r5, pc}
 8031574:	2001fedc 	.word	0x2001fedc

08031578 <memchr>:
 8031578:	b2c9      	uxtb	r1, r1
 803157a:	4402      	add	r2, r0
 803157c:	b510      	push	{r4, lr}
 803157e:	4290      	cmp	r0, r2
 8031580:	4603      	mov	r3, r0
 8031582:	d101      	bne.n	8031588 <memchr+0x10>
 8031584:	2300      	movs	r3, #0
 8031586:	e003      	b.n	8031590 <memchr+0x18>
 8031588:	781c      	ldrb	r4, [r3, #0]
 803158a:	3001      	adds	r0, #1
 803158c:	428c      	cmp	r4, r1
 803158e:	d1f6      	bne.n	803157e <memchr+0x6>
 8031590:	4618      	mov	r0, r3
 8031592:	bd10      	pop	{r4, pc}

08031594 <_realloc_r>:
 8031594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031596:	4607      	mov	r7, r0
 8031598:	4614      	mov	r4, r2
 803159a:	460e      	mov	r6, r1
 803159c:	b921      	cbnz	r1, 80315a8 <_realloc_r+0x14>
 803159e:	4611      	mov	r1, r2
 80315a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80315a4:	f7fe bcc6 	b.w	802ff34 <_malloc_r>
 80315a8:	b922      	cbnz	r2, 80315b4 <_realloc_r+0x20>
 80315aa:	4625      	mov	r5, r4
 80315ac:	f7fe fc72 	bl	802fe94 <_free_r>
 80315b0:	4628      	mov	r0, r5
 80315b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80315b4:	f000 f86a 	bl	803168c <_malloc_usable_size_r>
 80315b8:	42a0      	cmp	r0, r4
 80315ba:	d20f      	bcs.n	80315dc <_realloc_r+0x48>
 80315bc:	4621      	mov	r1, r4
 80315be:	4638      	mov	r0, r7
 80315c0:	f7fe fcb8 	bl	802ff34 <_malloc_r>
 80315c4:	4605      	mov	r5, r0
 80315c6:	2800      	cmp	r0, #0
 80315c8:	d0f2      	beq.n	80315b0 <_realloc_r+0x1c>
 80315ca:	4631      	mov	r1, r6
 80315cc:	4622      	mov	r2, r4
 80315ce:	f7fe fc23 	bl	802fe18 <memcpy>
 80315d2:	4631      	mov	r1, r6
 80315d4:	4638      	mov	r0, r7
 80315d6:	f7fe fc5d 	bl	802fe94 <_free_r>
 80315da:	e7e9      	b.n	80315b0 <_realloc_r+0x1c>
 80315dc:	4635      	mov	r5, r6
 80315de:	e7e7      	b.n	80315b0 <_realloc_r+0x1c>

080315e0 <_read_r>:
 80315e0:	b538      	push	{r3, r4, r5, lr}
 80315e2:	4604      	mov	r4, r0
 80315e4:	4d06      	ldr	r5, [pc, #24]	; (8031600 <_read_r+0x20>)
 80315e6:	4608      	mov	r0, r1
 80315e8:	4611      	mov	r1, r2
 80315ea:	2200      	movs	r2, #0
 80315ec:	602a      	str	r2, [r5, #0]
 80315ee:	461a      	mov	r2, r3
 80315f0:	f7df fad4 	bl	8010b9c <_read>
 80315f4:	1c43      	adds	r3, r0, #1
 80315f6:	d102      	bne.n	80315fe <_read_r+0x1e>
 80315f8:	682b      	ldr	r3, [r5, #0]
 80315fa:	b103      	cbz	r3, 80315fe <_read_r+0x1e>
 80315fc:	6023      	str	r3, [r4, #0]
 80315fe:	bd38      	pop	{r3, r4, r5, pc}
 8031600:	2001fedc 	.word	0x2001fedc

08031604 <_raise_r>:
 8031604:	291f      	cmp	r1, #31
 8031606:	b538      	push	{r3, r4, r5, lr}
 8031608:	4604      	mov	r4, r0
 803160a:	460d      	mov	r5, r1
 803160c:	d904      	bls.n	8031618 <_raise_r+0x14>
 803160e:	2316      	movs	r3, #22
 8031610:	6003      	str	r3, [r0, #0]
 8031612:	f04f 30ff 	mov.w	r0, #4294967295
 8031616:	bd38      	pop	{r3, r4, r5, pc}
 8031618:	6c42      	ldr	r2, [r0, #68]	; 0x44
 803161a:	b112      	cbz	r2, 8031622 <_raise_r+0x1e>
 803161c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8031620:	b94b      	cbnz	r3, 8031636 <_raise_r+0x32>
 8031622:	4620      	mov	r0, r4
 8031624:	f000 f830 	bl	8031688 <_getpid_r>
 8031628:	462a      	mov	r2, r5
 803162a:	4601      	mov	r1, r0
 803162c:	4620      	mov	r0, r4
 803162e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8031632:	f000 b817 	b.w	8031664 <_kill_r>
 8031636:	2b01      	cmp	r3, #1
 8031638:	d00a      	beq.n	8031650 <_raise_r+0x4c>
 803163a:	1c59      	adds	r1, r3, #1
 803163c:	d103      	bne.n	8031646 <_raise_r+0x42>
 803163e:	2316      	movs	r3, #22
 8031640:	6003      	str	r3, [r0, #0]
 8031642:	2001      	movs	r0, #1
 8031644:	e7e7      	b.n	8031616 <_raise_r+0x12>
 8031646:	2400      	movs	r4, #0
 8031648:	4628      	mov	r0, r5
 803164a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 803164e:	4798      	blx	r3
 8031650:	2000      	movs	r0, #0
 8031652:	e7e0      	b.n	8031616 <_raise_r+0x12>

08031654 <raise>:
 8031654:	4b02      	ldr	r3, [pc, #8]	; (8031660 <raise+0xc>)
 8031656:	4601      	mov	r1, r0
 8031658:	6818      	ldr	r0, [r3, #0]
 803165a:	f7ff bfd3 	b.w	8031604 <_raise_r>
 803165e:	bf00      	nop
 8031660:	20018300 	.word	0x20018300

08031664 <_kill_r>:
 8031664:	b538      	push	{r3, r4, r5, lr}
 8031666:	2300      	movs	r3, #0
 8031668:	4d06      	ldr	r5, [pc, #24]	; (8031684 <_kill_r+0x20>)
 803166a:	4604      	mov	r4, r0
 803166c:	4608      	mov	r0, r1
 803166e:	4611      	mov	r1, r2
 8031670:	602b      	str	r3, [r5, #0]
 8031672:	f7df fa83 	bl	8010b7c <_kill>
 8031676:	1c43      	adds	r3, r0, #1
 8031678:	d102      	bne.n	8031680 <_kill_r+0x1c>
 803167a:	682b      	ldr	r3, [r5, #0]
 803167c:	b103      	cbz	r3, 8031680 <_kill_r+0x1c>
 803167e:	6023      	str	r3, [r4, #0]
 8031680:	bd38      	pop	{r3, r4, r5, pc}
 8031682:	bf00      	nop
 8031684:	2001fedc 	.word	0x2001fedc

08031688 <_getpid_r>:
 8031688:	f7df ba76 	b.w	8010b78 <_getpid>

0803168c <_malloc_usable_size_r>:
 803168c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8031690:	1f18      	subs	r0, r3, #4
 8031692:	2b00      	cmp	r3, #0
 8031694:	bfbc      	itt	lt
 8031696:	580b      	ldrlt	r3, [r1, r0]
 8031698:	18c0      	addlt	r0, r0, r3
 803169a:	4770      	bx	lr

0803169c <_init>:
 803169c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803169e:	bf00      	nop
 80316a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80316a2:	bc08      	pop	{r3}
 80316a4:	469e      	mov	lr, r3
 80316a6:	4770      	bx	lr

080316a8 <_fini>:
 80316a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80316aa:	bf00      	nop
 80316ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80316ae:	bc08      	pop	{r3}
 80316b0:	469e      	mov	lr, r3
 80316b2:	4770      	bx	lr
 80316b4:	0000      	movs	r0, r0
	...

080316b8 <__SECURE_SystemCoreClockUpdate_veneer>:
 80316b8:	b401      	push	{r0}
 80316ba:	4802      	ldr	r0, [pc, #8]	; (80316c4 <__SECURE_SystemCoreClockUpdate_veneer+0xc>)
 80316bc:	4684      	mov	ip, r0
 80316be:	bc01      	pop	{r0}
 80316c0:	4760      	bx	ip
 80316c2:	bf00      	nop
 80316c4:	0c00c009 	.word	0x0c00c009

080316c8 <__SECURE_FLASH_READ_veneer>:
 80316c8:	b401      	push	{r0}
 80316ca:	4802      	ldr	r0, [pc, #8]	; (80316d4 <__SECURE_FLASH_READ_veneer+0xc>)
 80316cc:	4684      	mov	ip, r0
 80316ce:	bc01      	pop	{r0}
 80316d0:	4760      	bx	ip
 80316d2:	bf00      	nop
 80316d4:	0c00c019 	.word	0x0c00c019

080316d8 <__SECURE_printf_veneer>:
 80316d8:	b401      	push	{r0}
 80316da:	4802      	ldr	r0, [pc, #8]	; (80316e4 <__SECURE_printf_veneer+0xc>)
 80316dc:	4684      	mov	ip, r0
 80316de:	bc01      	pop	{r0}
 80316e0:	4760      	bx	ip
 80316e2:	bf00      	nop
 80316e4:	0c00c029 	.word	0x0c00c029

080316e8 <__SECURE_FLASH_WRITE_veneer>:
 80316e8:	b401      	push	{r0}
 80316ea:	4802      	ldr	r0, [pc, #8]	; (80316f4 <__SECURE_FLASH_WRITE_veneer+0xc>)
 80316ec:	4684      	mov	ip, r0
 80316ee:	bc01      	pop	{r0}
 80316f0:	4760      	bx	ip
 80316f2:	bf00      	nop
 80316f4:	0c00c031 	.word	0x0c00c031

080316f8 <__SECURE_Get_Running_Bank_veneer>:
 80316f8:	b401      	push	{r0}
 80316fa:	4802      	ldr	r0, [pc, #8]	; (8031704 <__SECURE_Get_Running_Bank_veneer+0xc>)
 80316fc:	4684      	mov	ip, r0
 80316fe:	bc01      	pop	{r0}
 8031700:	4760      	bx	ip
 8031702:	bf00      	nop
 8031704:	0c00c001 	.word	0x0c00c001
