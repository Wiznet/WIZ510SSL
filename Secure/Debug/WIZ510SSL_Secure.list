
WIZ510SSL_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  0c000000  0c000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006750  0c0001f4  0c0001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  0c006944  0c006944  00016944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0c006b40  0c006b40  0002c040  2**0
                  CONTENTS
  4 .ARM          00000008  0c006b40  0c006b40  00016b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0c006b48  0c006b48  0002c040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0c006b48  0c006b48  00016b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0c006b4c  0c006b4c  00016b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  30000000  0c006b50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .gnu.sgstubs  00000040  0c00c000  0c00c000  0002c000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .bss          00003310  30000094  30000094  00030094  2**2
                  ALLOC
 11 ._user_heap_stack 0000bb04  300033a4  300033a4  00030094  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  0002c040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017783  00000000  00000000  0002c076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b64  00000000  00000000  000437f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0000c2c3  00000000  00000000  0004735d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c58  00000000  00000000  00053620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001690  00000000  00000000  00054278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002bafd  00000000  00000000  00055908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000160fe  00000000  00000000  00081405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010ad4a  00000000  00000000  00097503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  001a224d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00002c6c  00000000  00000000  001a22a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c0001f4 <__do_global_dtors_aux>:
 c0001f4:	b510      	push	{r4, lr}
 c0001f6:	4c05      	ldr	r4, [pc, #20]	; (c00020c <__do_global_dtors_aux+0x18>)
 c0001f8:	7823      	ldrb	r3, [r4, #0]
 c0001fa:	b933      	cbnz	r3, c00020a <__do_global_dtors_aux+0x16>
 c0001fc:	4b04      	ldr	r3, [pc, #16]	; (c000210 <__do_global_dtors_aux+0x1c>)
 c0001fe:	b113      	cbz	r3, c000206 <__do_global_dtors_aux+0x12>
 c000200:	4804      	ldr	r0, [pc, #16]	; (c000214 <__do_global_dtors_aux+0x20>)
 c000202:	e000      	b.n	c000206 <__do_global_dtors_aux+0x12>
 c000204:	bf00      	nop
 c000206:	2301      	movs	r3, #1
 c000208:	7023      	strb	r3, [r4, #0]
 c00020a:	bd10      	pop	{r4, pc}
 c00020c:	30000094 	.word	0x30000094
 c000210:	00000000 	.word	0x00000000
 c000214:	0c00692c 	.word	0x0c00692c

0c000218 <frame_dummy>:
 c000218:	b508      	push	{r3, lr}
 c00021a:	4b03      	ldr	r3, [pc, #12]	; (c000228 <frame_dummy+0x10>)
 c00021c:	b11b      	cbz	r3, c000226 <frame_dummy+0xe>
 c00021e:	4903      	ldr	r1, [pc, #12]	; (c00022c <frame_dummy+0x14>)
 c000220:	4803      	ldr	r0, [pc, #12]	; (c000230 <frame_dummy+0x18>)
 c000222:	e000      	b.n	c000226 <frame_dummy+0xe>
 c000224:	bf00      	nop
 c000226:	bd08      	pop	{r3, pc}
 c000228:	00000000 	.word	0x00000000
 c00022c:	30000098 	.word	0x30000098
 c000230:	0c00692c 	.word	0x0c00692c

0c000234 <__gnu_cmse_nonsecure_call>:
 c000234:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c000238:	4627      	mov	r7, r4
 c00023a:	46a0      	mov	r8, r4
 c00023c:	46a1      	mov	r9, r4
 c00023e:	46a2      	mov	sl, r4
 c000240:	46a3      	mov	fp, r4
 c000242:	46a4      	mov	ip, r4
 c000244:	ed2d 8b10 	vpush	{d8-d15}
 c000248:	f04f 0500 	mov.w	r5, #0
 c00024c:	ec45 5b18 	vmov	d8, r5, r5
 c000250:	ec45 5a19 	vmov	s18, s19, r5, r5
 c000254:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c000258:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c00025c:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c000260:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c000264:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c000268:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c00026c:	eef1 5a10 	vmrs	r5, fpscr
 c000270:	f64f 7660 	movw	r6, #65376	; 0xff60
 c000274:	f6c0 76ff 	movt	r6, #4095	; 0xfff
 c000278:	4035      	ands	r5, r6
 c00027a:	eee1 5a10 	vmsr	fpscr, r5
 c00027e:	f384 8800 	msr	CPSR_f, r4
 c000282:	4625      	mov	r5, r4
 c000284:	4626      	mov	r6, r4
 c000286:	47a4      	blxns	r4
 c000288:	ecbd 8b10 	vpop	{d8-d15}
 c00028c:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c000290 <__aeabi_uldivmod>:
 c000290:	b953      	cbnz	r3, c0002a8 <__aeabi_uldivmod+0x18>
 c000292:	b94a      	cbnz	r2, c0002a8 <__aeabi_uldivmod+0x18>
 c000294:	2900      	cmp	r1, #0
 c000296:	bf08      	it	eq
 c000298:	2800      	cmpeq	r0, #0
 c00029a:	bf1c      	itt	ne
 c00029c:	f04f 31ff 	movne.w	r1, #4294967295
 c0002a0:	f04f 30ff 	movne.w	r0, #4294967295
 c0002a4:	f000 b980 	b.w	c0005a8 <__aeabi_idiv0>
 c0002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 c0002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 c0002b0:	f000 f806 	bl	c0002c0 <__udivmoddi4>
 c0002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 c0002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c0002bc:	b004      	add	sp, #16
 c0002be:	4770      	bx	lr

0c0002c0 <__udivmoddi4>:
 c0002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0002c4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 c0002c6:	4604      	mov	r4, r0
 c0002c8:	4688      	mov	r8, r1
 c0002ca:	2b00      	cmp	r3, #0
 c0002cc:	f040 8084 	bne.w	c0003d8 <__udivmoddi4+0x118>
 c0002d0:	428a      	cmp	r2, r1
 c0002d2:	4617      	mov	r7, r2
 c0002d4:	d943      	bls.n	c00035e <__udivmoddi4+0x9e>
 c0002d6:	fab2 f282 	clz	r2, r2
 c0002da:	b142      	cbz	r2, c0002ee <__udivmoddi4+0x2e>
 c0002dc:	f1c2 0020 	rsb	r0, r2, #32
 c0002e0:	4091      	lsls	r1, r2
 c0002e2:	4097      	lsls	r7, r2
 c0002e4:	fa24 f000 	lsr.w	r0, r4, r0
 c0002e8:	4094      	lsls	r4, r2
 c0002ea:	ea40 0801 	orr.w	r8, r0, r1
 c0002ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 c0002f2:	0c23      	lsrs	r3, r4, #16
 c0002f4:	fa1f fe87 	uxth.w	lr, r7
 c0002f8:	fbb8 f6fc 	udiv	r6, r8, ip
 c0002fc:	fb0c 8116 	mls	r1, ip, r6, r8
 c000300:	fb06 f00e 	mul.w	r0, r6, lr
 c000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 c000308:	4298      	cmp	r0, r3
 c00030a:	d907      	bls.n	c00031c <__udivmoddi4+0x5c>
 c00030c:	18fb      	adds	r3, r7, r3
 c00030e:	f106 31ff 	add.w	r1, r6, #4294967295
 c000312:	d202      	bcs.n	c00031a <__udivmoddi4+0x5a>
 c000314:	4298      	cmp	r0, r3
 c000316:	f200 8131 	bhi.w	c00057c <__udivmoddi4+0x2bc>
 c00031a:	460e      	mov	r6, r1
 c00031c:	1a19      	subs	r1, r3, r0
 c00031e:	b2a3      	uxth	r3, r4
 c000320:	fbb1 f0fc 	udiv	r0, r1, ip
 c000324:	fb0c 1110 	mls	r1, ip, r0, r1
 c000328:	fb00 fe0e 	mul.w	lr, r0, lr
 c00032c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 c000330:	45a6      	cmp	lr, r4
 c000332:	d907      	bls.n	c000344 <__udivmoddi4+0x84>
 c000334:	193c      	adds	r4, r7, r4
 c000336:	f100 33ff 	add.w	r3, r0, #4294967295
 c00033a:	d202      	bcs.n	c000342 <__udivmoddi4+0x82>
 c00033c:	45a6      	cmp	lr, r4
 c00033e:	f200 811a 	bhi.w	c000576 <__udivmoddi4+0x2b6>
 c000342:	4618      	mov	r0, r3
 c000344:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 c000348:	eba4 040e 	sub.w	r4, r4, lr
 c00034c:	2600      	movs	r6, #0
 c00034e:	b11d      	cbz	r5, c000358 <__udivmoddi4+0x98>
 c000350:	40d4      	lsrs	r4, r2
 c000352:	2300      	movs	r3, #0
 c000354:	e9c5 4300 	strd	r4, r3, [r5]
 c000358:	4631      	mov	r1, r6
 c00035a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c00035e:	b902      	cbnz	r2, c000362 <__udivmoddi4+0xa2>
 c000360:	deff      	udf	#255	; 0xff
 c000362:	fab2 f282 	clz	r2, r2
 c000366:	2a00      	cmp	r2, #0
 c000368:	d152      	bne.n	c000410 <__udivmoddi4+0x150>
 c00036a:	1bcb      	subs	r3, r1, r7
 c00036c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 c000370:	fa1f f887 	uxth.w	r8, r7
 c000374:	2601      	movs	r6, #1
 c000376:	0c21      	lsrs	r1, r4, #16
 c000378:	fbb3 fcfe 	udiv	ip, r3, lr
 c00037c:	fb0e 301c 	mls	r0, lr, ip, r3
 c000380:	fb08 f90c 	mul.w	r9, r8, ip
 c000384:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 c000388:	4589      	cmp	r9, r1
 c00038a:	d90b      	bls.n	c0003a4 <__udivmoddi4+0xe4>
 c00038c:	1879      	adds	r1, r7, r1
 c00038e:	f10c 33ff 	add.w	r3, ip, #4294967295
 c000392:	bf2c      	ite	cs
 c000394:	2001      	movcs	r0, #1
 c000396:	2000      	movcc	r0, #0
 c000398:	4589      	cmp	r9, r1
 c00039a:	d902      	bls.n	c0003a2 <__udivmoddi4+0xe2>
 c00039c:	2800      	cmp	r0, #0
 c00039e:	f000 80f0 	beq.w	c000582 <__udivmoddi4+0x2c2>
 c0003a2:	469c      	mov	ip, r3
 c0003a4:	eba1 0109 	sub.w	r1, r1, r9
 c0003a8:	b2a3      	uxth	r3, r4
 c0003aa:	fbb1 f0fe 	udiv	r0, r1, lr
 c0003ae:	fb0e 1110 	mls	r1, lr, r0, r1
 c0003b2:	fb08 f800 	mul.w	r8, r8, r0
 c0003b6:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 c0003ba:	45a0      	cmp	r8, r4
 c0003bc:	d907      	bls.n	c0003ce <__udivmoddi4+0x10e>
 c0003be:	193c      	adds	r4, r7, r4
 c0003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 c0003c4:	d202      	bcs.n	c0003cc <__udivmoddi4+0x10c>
 c0003c6:	45a0      	cmp	r8, r4
 c0003c8:	f200 80d2 	bhi.w	c000570 <__udivmoddi4+0x2b0>
 c0003cc:	4618      	mov	r0, r3
 c0003ce:	eba4 0408 	sub.w	r4, r4, r8
 c0003d2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 c0003d6:	e7ba      	b.n	c00034e <__udivmoddi4+0x8e>
 c0003d8:	428b      	cmp	r3, r1
 c0003da:	d909      	bls.n	c0003f0 <__udivmoddi4+0x130>
 c0003dc:	2d00      	cmp	r5, #0
 c0003de:	f000 80be 	beq.w	c00055e <__udivmoddi4+0x29e>
 c0003e2:	2600      	movs	r6, #0
 c0003e4:	e9c5 0100 	strd	r0, r1, [r5]
 c0003e8:	4630      	mov	r0, r6
 c0003ea:	4631      	mov	r1, r6
 c0003ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c0003f0:	fab3 f683 	clz	r6, r3
 c0003f4:	2e00      	cmp	r6, #0
 c0003f6:	d14d      	bne.n	c000494 <__udivmoddi4+0x1d4>
 c0003f8:	428b      	cmp	r3, r1
 c0003fa:	f0c0 80b3 	bcc.w	c000564 <__udivmoddi4+0x2a4>
 c0003fe:	4282      	cmp	r2, r0
 c000400:	f240 80b0 	bls.w	c000564 <__udivmoddi4+0x2a4>
 c000404:	4630      	mov	r0, r6
 c000406:	2d00      	cmp	r5, #0
 c000408:	d0a6      	beq.n	c000358 <__udivmoddi4+0x98>
 c00040a:	e9c5 4800 	strd	r4, r8, [r5]
 c00040e:	e7a3      	b.n	c000358 <__udivmoddi4+0x98>
 c000410:	4097      	lsls	r7, r2
 c000412:	f1c2 0320 	rsb	r3, r2, #32
 c000416:	fa01 f002 	lsl.w	r0, r1, r2
 c00041a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 c00041e:	40d9      	lsrs	r1, r3
 c000420:	fa24 f303 	lsr.w	r3, r4, r3
 c000424:	fa1f f887 	uxth.w	r8, r7
 c000428:	4094      	lsls	r4, r2
 c00042a:	4303      	orrs	r3, r0
 c00042c:	fbb1 f0fe 	udiv	r0, r1, lr
 c000430:	0c1e      	lsrs	r6, r3, #16
 c000432:	fb0e 1110 	mls	r1, lr, r0, r1
 c000436:	fb00 fc08 	mul.w	ip, r0, r8
 c00043a:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 c00043e:	458c      	cmp	ip, r1
 c000440:	d90e      	bls.n	c000460 <__udivmoddi4+0x1a0>
 c000442:	1879      	adds	r1, r7, r1
 c000444:	f100 36ff 	add.w	r6, r0, #4294967295
 c000448:	bf2c      	ite	cs
 c00044a:	f04f 0901 	movcs.w	r9, #1
 c00044e:	f04f 0900 	movcc.w	r9, #0
 c000452:	458c      	cmp	ip, r1
 c000454:	d903      	bls.n	c00045e <__udivmoddi4+0x19e>
 c000456:	f1b9 0f00 	cmp.w	r9, #0
 c00045a:	f000 8096 	beq.w	c00058a <__udivmoddi4+0x2ca>
 c00045e:	4630      	mov	r0, r6
 c000460:	eba1 010c 	sub.w	r1, r1, ip
 c000464:	b29b      	uxth	r3, r3
 c000466:	fbb1 f6fe 	udiv	r6, r1, lr
 c00046a:	fb0e 1116 	mls	r1, lr, r6, r1
 c00046e:	fb06 fc08 	mul.w	ip, r6, r8
 c000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 c000476:	458c      	cmp	ip, r1
 c000478:	d907      	bls.n	c00048a <__udivmoddi4+0x1ca>
 c00047a:	1879      	adds	r1, r7, r1
 c00047c:	f106 33ff 	add.w	r3, r6, #4294967295
 c000480:	d202      	bcs.n	c000488 <__udivmoddi4+0x1c8>
 c000482:	458c      	cmp	ip, r1
 c000484:	f200 8088 	bhi.w	c000598 <__udivmoddi4+0x2d8>
 c000488:	461e      	mov	r6, r3
 c00048a:	eba1 030c 	sub.w	r3, r1, ip
 c00048e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 c000492:	e770      	b.n	c000376 <__udivmoddi4+0xb6>
 c000494:	f1c6 0720 	rsb	r7, r6, #32
 c000498:	fa03 f406 	lsl.w	r4, r3, r6
 c00049c:	fa02 fc06 	lsl.w	ip, r2, r6
 c0004a0:	fa01 fe06 	lsl.w	lr, r1, r6
 c0004a4:	40fa      	lsrs	r2, r7
 c0004a6:	fa20 f807 	lsr.w	r8, r0, r7
 c0004aa:	40f9      	lsrs	r1, r7
 c0004ac:	fa00 f306 	lsl.w	r3, r0, r6
 c0004b0:	4322      	orrs	r2, r4
 c0004b2:	ea48 040e 	orr.w	r4, r8, lr
 c0004b6:	ea4f 4812 	mov.w	r8, r2, lsr #16
 c0004ba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 c0004be:	fa1f f982 	uxth.w	r9, r2
 c0004c2:	fbb1 faf8 	udiv	sl, r1, r8
 c0004c6:	fb08 111a 	mls	r1, r8, sl, r1
 c0004ca:	fb0a f009 	mul.w	r0, sl, r9
 c0004ce:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 c0004d2:	4570      	cmp	r0, lr
 c0004d4:	d90e      	bls.n	c0004f4 <__udivmoddi4+0x234>
 c0004d6:	eb12 0e0e 	adds.w	lr, r2, lr
 c0004da:	f10a 31ff 	add.w	r1, sl, #4294967295
 c0004de:	bf2c      	ite	cs
 c0004e0:	f04f 0b01 	movcs.w	fp, #1
 c0004e4:	f04f 0b00 	movcc.w	fp, #0
 c0004e8:	4570      	cmp	r0, lr
 c0004ea:	d902      	bls.n	c0004f2 <__udivmoddi4+0x232>
 c0004ec:	f1bb 0f00 	cmp.w	fp, #0
 c0004f0:	d04e      	beq.n	c000590 <__udivmoddi4+0x2d0>
 c0004f2:	468a      	mov	sl, r1
 c0004f4:	ebae 0e00 	sub.w	lr, lr, r0
 c0004f8:	b2a4      	uxth	r4, r4
 c0004fa:	fbbe f0f8 	udiv	r0, lr, r8
 c0004fe:	fb08 ee10 	mls	lr, r8, r0, lr
 c000502:	fb00 f909 	mul.w	r9, r0, r9
 c000506:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 c00050a:	45f1      	cmp	r9, lr
 c00050c:	d907      	bls.n	c00051e <__udivmoddi4+0x25e>
 c00050e:	eb12 0e0e 	adds.w	lr, r2, lr
 c000512:	f100 31ff 	add.w	r1, r0, #4294967295
 c000516:	d201      	bcs.n	c00051c <__udivmoddi4+0x25c>
 c000518:	45f1      	cmp	r9, lr
 c00051a:	d840      	bhi.n	c00059e <__udivmoddi4+0x2de>
 c00051c:	4608      	mov	r0, r1
 c00051e:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 c000522:	ebae 0e09 	sub.w	lr, lr, r9
 c000526:	fba0 890c 	umull	r8, r9, r0, ip
 c00052a:	45ce      	cmp	lr, r9
 c00052c:	4641      	mov	r1, r8
 c00052e:	464c      	mov	r4, r9
 c000530:	d302      	bcc.n	c000538 <__udivmoddi4+0x278>
 c000532:	d106      	bne.n	c000542 <__udivmoddi4+0x282>
 c000534:	4543      	cmp	r3, r8
 c000536:	d204      	bcs.n	c000542 <__udivmoddi4+0x282>
 c000538:	3801      	subs	r0, #1
 c00053a:	ebb8 010c 	subs.w	r1, r8, ip
 c00053e:	eb69 0402 	sbc.w	r4, r9, r2
 c000542:	b37d      	cbz	r5, c0005a4 <__udivmoddi4+0x2e4>
 c000544:	1a5a      	subs	r2, r3, r1
 c000546:	eb6e 0e04 	sbc.w	lr, lr, r4
 c00054a:	40f2      	lsrs	r2, r6
 c00054c:	fa0e f707 	lsl.w	r7, lr, r7
 c000550:	fa2e f306 	lsr.w	r3, lr, r6
 c000554:	2600      	movs	r6, #0
 c000556:	4317      	orrs	r7, r2
 c000558:	e9c5 7300 	strd	r7, r3, [r5]
 c00055c:	e6fc      	b.n	c000358 <__udivmoddi4+0x98>
 c00055e:	462e      	mov	r6, r5
 c000560:	4628      	mov	r0, r5
 c000562:	e6f9      	b.n	c000358 <__udivmoddi4+0x98>
 c000564:	1a84      	subs	r4, r0, r2
 c000566:	eb61 0103 	sbc.w	r1, r1, r3
 c00056a:	2001      	movs	r0, #1
 c00056c:	4688      	mov	r8, r1
 c00056e:	e74a      	b.n	c000406 <__udivmoddi4+0x146>
 c000570:	3802      	subs	r0, #2
 c000572:	443c      	add	r4, r7
 c000574:	e72b      	b.n	c0003ce <__udivmoddi4+0x10e>
 c000576:	3802      	subs	r0, #2
 c000578:	443c      	add	r4, r7
 c00057a:	e6e3      	b.n	c000344 <__udivmoddi4+0x84>
 c00057c:	3e02      	subs	r6, #2
 c00057e:	443b      	add	r3, r7
 c000580:	e6cc      	b.n	c00031c <__udivmoddi4+0x5c>
 c000582:	f1ac 0c02 	sub.w	ip, ip, #2
 c000586:	4439      	add	r1, r7
 c000588:	e70c      	b.n	c0003a4 <__udivmoddi4+0xe4>
 c00058a:	3802      	subs	r0, #2
 c00058c:	4439      	add	r1, r7
 c00058e:	e767      	b.n	c000460 <__udivmoddi4+0x1a0>
 c000590:	f1aa 0a02 	sub.w	sl, sl, #2
 c000594:	4496      	add	lr, r2
 c000596:	e7ad      	b.n	c0004f4 <__udivmoddi4+0x234>
 c000598:	3e02      	subs	r6, #2
 c00059a:	4439      	add	r1, r7
 c00059c:	e775      	b.n	c00048a <__udivmoddi4+0x1ca>
 c00059e:	3802      	subs	r0, #2
 c0005a0:	4496      	add	lr, r2
 c0005a2:	e7bc      	b.n	c00051e <__udivmoddi4+0x25e>
 c0005a4:	462e      	mov	r6, r5
 c0005a6:	e6d7      	b.n	c000358 <__udivmoddi4+0x98>

0c0005a8 <__aeabi_idiv0>:
 c0005a8:	4770      	bx	lr
 c0005aa:	bf00      	nop

0c0005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 c0005ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 c0005ae:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 c0005b0:	2248      	movs	r2, #72	; 0x48
 c0005b2:	2100      	movs	r1, #0
 c0005b4:	a806      	add	r0, sp, #24
 c0005b6:	f005 f82c 	bl	c005612 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 c0005ba:	2000      	movs	r0, #0
 c0005bc:	e9cd 0000 	strd	r0, r0, [sp]
 c0005c0:	e9cd 0002 	strd	r0, r0, [sp, #8]
 c0005c4:	9004      	str	r0, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 c0005c6:	f001 fb95 	bl	c001cf4 <HAL_PWREx_ControlVoltageScaling>
 c0005ca:	b108      	cbz	r0, c0005d0 <SystemClock_Config+0x24>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 c0005cc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 c0005ce:	e7fe      	b.n	c0005ce <SystemClock_Config+0x22>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 c0005d0:	4603      	mov	r3, r0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 c0005d2:	2202      	movs	r2, #2
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 c0005d4:	2401      	movs	r4, #1
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 c0005d6:	f04f 0e60 	mov.w	lr, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 c0005da:	2103      	movs	r1, #3
  RCC_OscInitStruct.PLL.PLLN = 50;
 c0005dc:	f04f 0c32 	mov.w	ip, #50	; 0x32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 c0005e0:	2619      	movs	r6, #25
 c0005e2:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 c0005e6:	2507      	movs	r5, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 c0005e8:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 c0005ea:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 c0005ec:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 c0005ee:	e9cd 6706 	strd	r6, r7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 c0005f2:	e9cd 2216 	strd	r2, r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLM = 3;
 c0005f6:	e9cd 1112 	strd	r1, r1, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 c0005fa:	e9cd c514 	strd	ip, r5, [sp, #80]	; 0x50
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 c0005fe:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 c000600:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 c000602:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 c000606:	9211      	str	r2, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 c000608:	f001 fc66 	bl	c001ed8 <HAL_RCC_OscConfig>
 c00060c:	4603      	mov	r3, r0
 c00060e:	b108      	cbz	r0, c000614 <SystemClock_Config+0x68>
 c000610:	b672      	cpsid	i
  while (1)
 c000612:	e7fe      	b.n	c000612 <SystemClock_Config+0x66>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 c000614:	260f      	movs	r6, #15
 c000616:	2703      	movs	r7, #3
 c000618:	2400      	movs	r4, #0
 c00061a:	2500      	movs	r5, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 c00061c:	4668      	mov	r0, sp
 c00061e:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 c000620:	e9cd 6700 	strd	r6, r7, [sp]
 c000624:	e9cd 4502 	strd	r4, r5, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 c000628:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 c00062a:	f002 f81b 	bl	c002664 <HAL_RCC_ClockConfig>
 c00062e:	b108      	cbz	r0, c000634 <SystemClock_Config+0x88>
 c000630:	b672      	cpsid	i
  while (1)
 c000632:	e7fe      	b.n	c000632 <SystemClock_Config+0x86>
}
 c000634:	b019      	add	sp, #100	; 0x64
 c000636:	bdf0      	pop	{r4, r5, r6, r7, pc}

0c000638 <main>:
{
 c000638:	b580      	push	{r7, lr}
  MPCBB_desc.AttributeConfig.MPCBB_LockConfig_array[0] = 0x00000000U;  /* Locked configuration */
 c00063a:	2400      	movs	r4, #0
  MPCBB_desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c00063c:	2600      	movs	r6, #0
 c00063e:	2700      	movs	r7, #0
  __HAL_RCC_GTZC_CLK_ENABLE();
 c000640:	4dad      	ldr	r5, [pc, #692]	; (c0008f8 <main+0x2c0>)
{
 c000642:	f5ad 6da3 	sub.w	sp, sp, #1304	; 0x518
  HAL_Init();
 c000646:	f000 fdcb 	bl	c0011e0 <HAL_Init>
  HAL_ICACHE_Enable();
 c00064a:	f001 fb41 	bl	c001cd0 <HAL_ICACHE_Enable>
  __HAL_RCC_GTZC_CLK_ENABLE();
 c00064e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 c000650:	2230      	movs	r2, #48	; 0x30
 c000652:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 c000656:	64ab      	str	r3, [r5, #72]	; 0x48
 c000658:	6cab      	ldr	r3, [r5, #72]	; 0x48
 c00065a:	21ff      	movs	r1, #255	; 0xff
 c00065c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c000660:	9305      	str	r3, [sp, #20]
 c000662:	a808      	add	r0, sp, #32
 c000664:	9b05      	ldr	r3, [sp, #20]
  MPCBB_desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c000666:	e9cd 6706 	strd	r6, r7, [sp, #24]
  MPCBB_desc.AttributeConfig.MPCBB_LockConfig_array[0] = 0x00000000U;  /* Locked configuration */
 c00066a:	9420      	str	r4, [sp, #128]	; 0x80
  for(index=0; index<12; index++)
 c00066c:	f004 ffd1 	bl	c005612 <memset>
 c000670:	4621      	mov	r1, r4
 c000672:	2230      	movs	r2, #48	; 0x30
 c000674:	a814      	add	r0, sp, #80	; 0x50
 c000676:	f004 ffcc 	bl	c005612 <memset>
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB_desc) != HAL_OK)
 c00067a:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 c00067e:	a906      	add	r1, sp, #24
 c000680:	f001 fa3e 	bl	c001b00 <HAL_GTZC_MPCBB_ConfigMem>
 c000684:	b950      	cbnz	r0, c00069c <main+0x64>
 c000686:	4601      	mov	r1, r0
 c000688:	2220      	movs	r2, #32
 c00068a:	a808      	add	r0, sp, #32
 c00068c:	f004 ffc1 	bl	c005612 <memset>
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM2_BASE, &MPCBB_desc) != HAL_OK)
 c000690:	489a      	ldr	r0, [pc, #616]	; (c0008fc <main+0x2c4>)
 c000692:	a906      	add	r1, sp, #24
 c000694:	f001 fa34 	bl	c001b00 <HAL_GTZC_MPCBB_ConfigMem>
 c000698:	b108      	cbz	r0, c00069e <main+0x66>
    while(1);
 c00069a:	e7fe      	b.n	c00069a <main+0x62>
    while(1);
 c00069c:	e7fe      	b.n	c00069c <main+0x64>
  if(HAL_GTZC_TZIC_ClearFlag(GTZC_PERIPH_ALL) != HAL_OK)
 c00069e:	2020      	movs	r0, #32
 c0006a0:	f001 fa9e 	bl	c001be0 <HAL_GTZC_TZIC_ClearFlag>
 c0006a4:	b100      	cbz	r0, c0006a8 <main+0x70>
    while(1);
 c0006a6:	e7fe      	b.n	c0006a6 <main+0x6e>
  if(HAL_GTZC_TZIC_EnableIT(GTZC_PERIPH_ALL) != HAL_OK)
 c0006a8:	2020      	movs	r0, #32
 c0006aa:	f001 fa6b 	bl	c001b84 <HAL_GTZC_TZIC_EnableIT>
 c0006ae:	4601      	mov	r1, r0
 c0006b0:	b100      	cbz	r0, c0006b4 <main+0x7c>
    while(1);
 c0006b2:	e7fe      	b.n	c0006b2 <main+0x7a>
  HAL_NVIC_SetPriority(GTZC_IRQn, 0, 0); /* Highest priority level */
 c0006b4:	4602      	mov	r2, r0
 c0006b6:	9001      	str	r0, [sp, #4]
 c0006b8:	2008      	movs	r0, #8
 c0006ba:	f000 fdcb 	bl	c001254 <HAL_NVIC_SetPriority>
  HAL_NVIC_ClearPendingIRQ(GTZC_IRQn);
 c0006be:	2008      	movs	r0, #8
 c0006c0:	f000 fe26 	bl	c001310 <HAL_NVIC_ClearPendingIRQ>
  HAL_NVIC_EnableIRQ(GTZC_IRQn);
 c0006c4:	2008      	movs	r0, #8
 c0006c6:	f000 fdfd 	bl	c0012c4 <HAL_NVIC_EnableIRQ>
  SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
 c0006ca:	4a8d      	ldr	r2, [pc, #564]	; (c000900 <main+0x2c8>)
 c0006cc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 c0006ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 c0006d2:	6253      	str	r3, [r2, #36]	; 0x24
  SystemClock_Config();
 c0006d4:	f7ff ff6a 	bl	c0005ac <SystemClock_Config>
  MPCBB_ConfigTypeDef MPCBB_NonSecureArea_Desc = {0};
 c0006d8:	9901      	ldr	r1, [sp, #4]
 c0006da:	226c      	movs	r2, #108	; 0x6c
 c0006dc:	a806      	add	r0, sp, #24
 c0006de:	f004 ff98 	bl	c005612 <memset>
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_USART2, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c0006e2:	f240 3101 	movw	r1, #769	; 0x301
 c0006e6:	200a      	movs	r0, #10
 c0006e8:	f001 f98e 	bl	c001a08 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c0006ec:	b108      	cbz	r0, c0006f2 <main+0xba>
 c0006ee:	b672      	cpsid	i
  while (1)
 c0006f0:	e7fe      	b.n	c0006f0 <main+0xb8>
  MPCBB_NonSecureArea_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c0006f2:	f04f 33ff 	mov.w	r3, #4294967295
 c0006f6:	f04f 32ff 	mov.w	r2, #4294967295
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c0006fa:	9020      	str	r0, [sp, #128]	; 0x80
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c0006fc:	a906      	add	r1, sp, #24
 c0006fe:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
  MPCBB_NonSecureArea_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c000702:	e9cd 2308 	strd	r2, r3, [sp, #32]
 c000706:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 c00070a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 c00070e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 c000712:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 c000716:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 c00071a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 c00071e:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
 c000722:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
 c000726:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
 c00072a:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
 c00072e:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 c000732:	e9cd 671e 	strd	r6, r7, [sp, #120]	; 0x78
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c000736:	f001 f9e3 	bl	c001b00 <HAL_GTZC_MPCBB_ConfigMem>
 c00073a:	4603      	mov	r3, r0
 c00073c:	b108      	cbz	r0, c000742 <main+0x10a>
 c00073e:	b672      	cpsid	i
  while (1)
 c000740:	e7fe      	b.n	c000740 <main+0x108>
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM2_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c000742:	486e      	ldr	r0, [pc, #440]	; (c0008fc <main+0x2c4>)
 c000744:	a906      	add	r1, sp, #24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c000746:	e9cd 6708 	strd	r6, r7, [sp, #32]
 c00074a:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 c00074e:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
 c000752:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c000756:	9320      	str	r3, [sp, #128]	; 0x80
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM2_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c000758:	f001 f9d2 	bl	c001b00 <HAL_GTZC_MPCBB_ConfigMem>
 c00075c:	4604      	mov	r4, r0
 c00075e:	b108      	cbz	r0, c000764 <main+0x12c>
 c000760:	b672      	cpsid	i
  while (1)
 c000762:	e7fe      	b.n	c000762 <main+0x12a>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c000764:	e9cd 0006 	strd	r0, r0, [sp, #24]
 c000768:	e9cd 0008 	strd	r0, r0, [sp, #32]
 c00076c:	900a      	str	r0, [sp, #40]	; 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 c00076e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  HAL_GPIO_ConfigPinAttributes(GPIOA, SPI1_CS_Pin|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 c000770:	4602      	mov	r2, r0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 c000772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c000776:	64eb      	str	r3, [r5, #76]	; 0x4c
 c000778:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  HAL_GPIO_ConfigPinAttributes(GPIOA, SPI1_CS_Pin|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 c00077a:	f641 61f0 	movw	r1, #7920	; 0x1ef0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 c00077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c000782:	9302      	str	r3, [sp, #8]
 c000784:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 c000786:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  HAL_GPIO_ConfigPinAttributes(GPIOA, SPI1_CS_Pin|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 c000788:	485e      	ldr	r0, [pc, #376]	; (c000904 <main+0x2cc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 c00078a:	f043 0301 	orr.w	r3, r3, #1
 c00078e:	64eb      	str	r3, [r5, #76]	; 0x4c
 c000790:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  GPIO_InitStruct.Pin = PREV_BANK_Pin;
 c000792:	2608      	movs	r6, #8
  __HAL_RCC_GPIOA_CLK_ENABLE();
 c000794:	f003 0301 	and.w	r3, r3, #1
 c000798:	9303      	str	r3, [sp, #12]
 c00079a:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 c00079c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  GPIO_InitStruct.Pin = PREV_BANK_Pin;
 c00079e:	2700      	movs	r7, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 c0007a0:	f043 0302 	orr.w	r3, r3, #2
 c0007a4:	64eb      	str	r3, [r5, #76]	; 0x4c
 c0007a6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  huart2.Instance = USART2;
 c0007a8:	4d57      	ldr	r5, [pc, #348]	; (c000908 <main+0x2d0>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 c0007aa:	f003 0302 	and.w	r3, r3, #2
 c0007ae:	9304      	str	r3, [sp, #16]
 c0007b0:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_ConfigPinAttributes(GPIOA, SPI1_CS_Pin|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 c0007b2:	f001 f913 	bl	c0019dc <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOB, W5100S_INT_Pin|W5100S_RST_Pin|STATUS_LED0_Pin|STATUS_LED1_Pin
 c0007b6:	4622      	mov	r2, r4
 c0007b8:	f64e 4113 	movw	r1, #60435	; 0xec13
 c0007bc:	4853      	ldr	r0, [pc, #332]	; (c00090c <main+0x2d4>)
 c0007be:	f001 f90d 	bl	c0019dc <HAL_GPIO_ConfigPinAttributes>
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 c0007c2:	2301      	movs	r3, #1
  HAL_GPIO_Init(PREV_BANK_GPIO_Port, &GPIO_InitStruct);
 c0007c4:	4851      	ldr	r0, [pc, #324]	; (c00090c <main+0x2d4>)
 c0007c6:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 c0007c8:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pin = PREV_BANK_Pin;
 c0007ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
  HAL_GPIO_Init(PREV_BANK_GPIO_Port, &GPIO_InitStruct);
 c0007ce:	f000 ff59 	bl	c001684 <HAL_GPIO_Init>
  huart2.Init.BaudRate = 115200;
 c0007d2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 c0007d6:	230c      	movs	r3, #12
  huart2.Instance = USART2;
 c0007d8:	4a4d      	ldr	r2, [pc, #308]	; (c000910 <main+0x2d8>)
  if (HAL_UART_Init(&huart2) != HAL_OK)
 c0007da:	4628      	mov	r0, r5
  huart2.Init.BaudRate = 115200;
 c0007dc:	6069      	str	r1, [r5, #4]
  huart2.Init.StopBits = UART_STOPBITS_1;
 c0007de:	e9c5 4402 	strd	r4, r4, [r5, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 c0007e2:	e9c5 4406 	strd	r4, r4, [r5, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 c0007e6:	e9c5 4408 	strd	r4, r4, [r5, #32]
  huart2.Init.Parity = UART_PARITY_NONE;
 c0007ea:	612c      	str	r4, [r5, #16]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 c0007ec:	62ac      	str	r4, [r5, #40]	; 0x28
  huart2.Instance = USART2;
 c0007ee:	602a      	str	r2, [r5, #0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 c0007f0:	616b      	str	r3, [r5, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 c0007f2:	f002 fdc5 	bl	c003380 <HAL_UART_Init>
 c0007f6:	4601      	mov	r1, r0
 c0007f8:	b108      	cbz	r0, c0007fe <main+0x1c6>
 c0007fa:	b672      	cpsid	i
  while (1)
 c0007fc:	e7fe      	b.n	c0007fc <main+0x1c4>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 c0007fe:	4628      	mov	r0, r5
 c000800:	f003 f8b6 	bl	c003970 <HAL_UARTEx_SetTxFifoThreshold>
 c000804:	4601      	mov	r1, r0
 c000806:	b108      	cbz	r0, c00080c <main+0x1d4>
 c000808:	b672      	cpsid	i
  while (1)
 c00080a:	e7fe      	b.n	c00080a <main+0x1d2>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 c00080c:	4628      	mov	r0, r5
 c00080e:	f003 f8ed 	bl	c0039ec <HAL_UARTEx_SetRxFifoThreshold>
 c000812:	b108      	cbz	r0, c000818 <main+0x1e0>
 c000814:	b672      	cpsid	i
  while (1)
 c000816:	e7fe      	b.n	c000816 <main+0x1de>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 c000818:	483b      	ldr	r0, [pc, #236]	; (c000908 <main+0x2d0>)
 c00081a:	f003 f88b 	bl	c003934 <HAL_UARTEx_DisableFifoMode>
 c00081e:	4604      	mov	r4, r0
 c000820:	b108      	cbz	r0, c000826 <main+0x1ee>
 c000822:	b672      	cpsid	i
  while (1)
 c000824:	e7fe      	b.n	c000824 <main+0x1ec>
  printf("Secure World\r\n");
 c000826:	483b      	ldr	r0, [pc, #236]	; (c000914 <main+0x2dc>)
 c000828:	f005 f82c 	bl	c005884 <puts>
  key_init();
 c00082c:	f003 fa36 	bl	c003c9c <key_init>
  read_storage(STORAGE_CONFIG, 0, &temp_dev_config, sizeof(DevConfig));
 c000830:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 c000834:	4621      	mov	r1, r4
 c000836:	2001      	movs	r0, #1
 c000838:	aa06      	add	r2, sp, #24
 c00083a:	f003 f9f3 	bl	c003c24 <read_storage>
  if (temp_dev_config.serial_common.serial_debug_en == DISABLE)
 c00083e:	f89d 30fa 	ldrb.w	r3, [sp, #250]	; 0xfa
 c000842:	b913      	cbnz	r3, c00084a <main+0x212>
    HAL_UART_DeInit(&huart2);
 c000844:	4830      	ldr	r0, [pc, #192]	; (c000908 <main+0x2d0>)
 c000846:	f002 fcbf 	bl	c0031c8 <HAL_UART_DeInit>
    if(temp_dev_config.firmware_update.current_bank == 0)
 c00084a:	f89d 3125 	ldrb.w	r3, [sp, #293]	; 0x125
 c00084e:	2b00      	cmp	r3, #0
 c000850:	d144      	bne.n	c0008dc <main+0x2a4>
        VTOR_TABLE_NS_START_ADDR = FLASH_START_ADDR_BANK0;
 c000852:	4c31      	ldr	r4, [pc, #196]	; (c000918 <main+0x2e0>)
 c000854:	4b31      	ldr	r3, [pc, #196]	; (c00091c <main+0x2e4>)
 c000856:	6023      	str	r3, [r4, #0]
    if (!HAL_GPIO_ReadPin(PREV_BANK_GPIO_Port, PREV_BANK_Pin))
 c000858:	2108      	movs	r1, #8
 c00085a:	482c      	ldr	r0, [pc, #176]	; (c00090c <main+0x2d4>)
 c00085c:	f001 f8b8 	bl	c0019d0 <HAL_GPIO_ReadPin>
 c000860:	b930      	cbnz	r0, c000870 <main+0x238>
        if (VTOR_TABLE_NS_START_ADDR == FLASH_START_ADDR_BANK0)
 c000862:	4b2e      	ldr	r3, [pc, #184]	; (c00091c <main+0x2e4>)
 c000864:	6822      	ldr	r2, [r4, #0]
 c000866:	429a      	cmp	r2, r3
            VTOR_TABLE_NS_START_ADDR = FLASH_START_ADDR_BANK1;
 c000868:	bf08      	it	eq
 c00086a:	f503 3340 	addeq.w	r3, r3, #196608	; 0x30000
            VTOR_TABLE_NS_START_ADDR = FLASH_START_ADDR_BANK0;
 c00086e:	6023      	str	r3, [r4, #0]
    printf("current_bank = %d, bank addr = 0x%08X\r\n", temp_dev_config.firmware_update.current_bank, VTOR_TABLE_NS_START_ADDR);
 c000870:	6822      	ldr	r2, [r4, #0]
 c000872:	f89d 1125 	ldrb.w	r1, [sp, #293]	; 0x125
 c000876:	482a      	ldr	r0, [pc, #168]	; (c000920 <main+0x2e8>)
 c000878:	f004 ff7e 	bl	c005778 <iprintf>
  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c00087c:	6823      	ldr	r3, [r4, #0]
 c00087e:	4a29      	ldr	r2, [pc, #164]	; (c000924 <main+0x2ec>)
 c000880:	6093      	str	r3, [r2, #8]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c000882:	681a      	ldr	r2, [r3, #0]
 c000884:	f382 8888 	msr	MSP_NS, r2
  NonSecure_ResetHandler();
 c000888:	685c      	ldr	r4, [r3, #4]
 c00088a:	0864      	lsrs	r4, r4, #1
 c00088c:	0064      	lsls	r4, r4, #1
 c00088e:	4620      	mov	r0, r4
 c000890:	4621      	mov	r1, r4
 c000892:	4622      	mov	r2, r4
 c000894:	4623      	mov	r3, r4
 c000896:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00089a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00089e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0008a2:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0008a6:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0008aa:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0008ae:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0008b2:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0008b6:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0008ba:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0008be:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0008c2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0008c6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0008ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0008ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0008d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0008d6:	f7ff fcad 	bl	c000234 <__gnu_cmse_nonsecure_call>
  while (1)
 c0008da:	e7fe      	b.n	c0008da <main+0x2a2>
    else if (temp_dev_config.firmware_update.current_bank == 1)
 c0008dc:	2b01      	cmp	r3, #1
 c0008de:	d006      	beq.n	c0008ee <main+0x2b6>
        temp_dev_config.firmware_update.current_bank = 0;
 c0008e0:	2200      	movs	r2, #0
        VTOR_TABLE_NS_START_ADDR = FLASH_START_ADDR_BANK0;
 c0008e2:	4c0d      	ldr	r4, [pc, #52]	; (c000918 <main+0x2e0>)
 c0008e4:	4b0d      	ldr	r3, [pc, #52]	; (c00091c <main+0x2e4>)
        temp_dev_config.firmware_update.current_bank = 0;
 c0008e6:	f88d 2125 	strb.w	r2, [sp, #293]	; 0x125
        VTOR_TABLE_NS_START_ADDR = FLASH_START_ADDR_BANK0;
 c0008ea:	6023      	str	r3, [r4, #0]
        temp_dev_config.firmware_update.current_bank = 0;
 c0008ec:	e7b4      	b.n	c000858 <main+0x220>
        VTOR_TABLE_NS_START_ADDR = FLASH_START_ADDR_BANK1;
 c0008ee:	4c0a      	ldr	r4, [pc, #40]	; (c000918 <main+0x2e0>)
 c0008f0:	4b0d      	ldr	r3, [pc, #52]	; (c000928 <main+0x2f0>)
 c0008f2:	6023      	str	r3, [r4, #0]
 c0008f4:	e7b0      	b.n	c000858 <main+0x220>
 c0008f6:	bf00      	nop
 c0008f8:	50021000 	.word	0x50021000
 c0008fc:	30030000 	.word	0x30030000
 c000900:	e000ed00 	.word	0xe000ed00
 c000904:	52020000 	.word	0x52020000
 c000908:	300022f0 	.word	0x300022f0
 c00090c:	52020400 	.word	0x52020400
 c000910:	50004400 	.word	0x50004400
 c000914:	0c006944 	.word	0x0c006944
 c000918:	30000000 	.word	0x30000000
 c00091c:	08010000 	.word	0x08010000
 c000920:	0c006954 	.word	0x0c006954
 c000924:	e002ed00 	.word	0xe002ed00
 c000928:	08040000 	.word	0x08040000

0c00092c <HAL_GTZC_TZIC_Callback>:
  if(pSecureErrorCallback != (funcptr_NS)NULL)
 c00092c:	4b17      	ldr	r3, [pc, #92]	; (c00098c <HAL_GTZC_TZIC_Callback+0x60>)
{
 c00092e:	b510      	push	{r4, lr}
  if(pSecureErrorCallback != (funcptr_NS)NULL)
 c000930:	681c      	ldr	r4, [r3, #0]
 c000932:	b354      	cbz	r4, c00098a <HAL_GTZC_TZIC_Callback+0x5e>
   callback_NS();
 c000934:	f024 0401 	bic.w	r4, r4, #1
 c000938:	0864      	lsrs	r4, r4, #1
 c00093a:	0064      	lsls	r4, r4, #1
 c00093c:	4620      	mov	r0, r4
 c00093e:	4621      	mov	r1, r4
 c000940:	4622      	mov	r2, r4
 c000942:	4623      	mov	r3, r4
 c000944:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000948:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00094c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000950:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000954:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000958:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c00095c:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000960:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000964:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000968:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c00096c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000970:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000974:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000978:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c00097c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000980:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000984:	f7ff fc56 	bl	c000234 <__gnu_cmse_nonsecure_call>
}
 c000988:	bd10      	pop	{r4, pc}
    while(1);
 c00098a:	e7fe      	b.n	c00098a <HAL_GTZC_TZIC_Callback+0x5e>
 c00098c:	300000b0 	.word	0x300000b0

0c000990 <__io_putchar>:
{
 c000990:	b510      	push	{r4, lr}
 c000992:	4604      	mov	r4, r0
 c000994:	b082      	sub	sp, #8
    HAL_UART_Transmit(&RETARGET_PRINTF_USART, &c[0], 1, 10);
 c000996:	230a      	movs	r3, #10
 c000998:	2201      	movs	r2, #1
 c00099a:	a901      	add	r1, sp, #4
 c00099c:	4803      	ldr	r0, [pc, #12]	; (c0009ac <__io_putchar+0x1c>)
    c[0] = ch & 0x00FF;
 c00099e:	f88d 4004 	strb.w	r4, [sp, #4]
    HAL_UART_Transmit(&RETARGET_PRINTF_USART, &c[0], 1, 10);
 c0009a2:	f002 ff21 	bl	c0037e8 <HAL_UART_Transmit>
}
 c0009a6:	4620      	mov	r0, r4
 c0009a8:	b002      	add	sp, #8
 c0009aa:	bd10      	pop	{r4, pc}
 c0009ac:	300022f0 	.word	0x300022f0

0c0009b0 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 c0009b0:	b672      	cpsid	i
  while (1)
 c0009b2:	e7fe      	b.n	c0009b2 <Error_Handler+0x2>

0c0009b4 <__acle_se_SECURE_RegisterCallback>:
  * @param  func        pointer to non-secure function
  * @retval None
  */
CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func)
{
  if(func != NULL)
 c0009b4:	b111      	cbz	r1, c0009bc <__acle_se_SECURE_RegisterCallback+0x8>
  {
    switch(CallbackId)
 c0009b6:	b3c0      	cbz	r0, c000a2a <__acle_se_SECURE_RegisterCallback+0x76>
 c0009b8:	2801      	cmp	r0, #1
 c0009ba:	d033      	beq.n	c000a24 <__acle_se_SECURE_RegisterCallback+0x70>
      default:
        /* unknown */
        break;
    }
  }
}
 c0009bc:	4670      	mov	r0, lr
 c0009be:	4671      	mov	r1, lr
 c0009c0:	4672      	mov	r2, lr
 c0009c2:	4673      	mov	r3, lr
 c0009c4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0009c8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0009cc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0009d0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0009d4:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0009d8:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0009dc:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0009e0:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0009e4:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0009e8:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0009ec:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0009f0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0009f4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0009f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0009fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000a00:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000a04:	f38e 8c00 	msr	CPSR_fs, lr
 c000a08:	b410      	push	{r4}
 c000a0a:	eef1 ca10 	vmrs	ip, fpscr
 c000a0e:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000a12:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000a16:	ea0c 0c04 	and.w	ip, ip, r4
 c000a1a:	eee1 ca10 	vmsr	fpscr, ip
 c000a1e:	bc10      	pop	{r4}
 c000a20:	46f4      	mov	ip, lr
 c000a22:	4774      	bxns	lr
        pSecureErrorCallback = func;
 c000a24:	4b02      	ldr	r3, [pc, #8]	; (c000a30 <__acle_se_SECURE_RegisterCallback+0x7c>)
 c000a26:	6019      	str	r1, [r3, #0]
}
 c000a28:	e7c8      	b.n	c0009bc <__acle_se_SECURE_RegisterCallback+0x8>
        pSecureFaultCallback = func;
 c000a2a:	4b02      	ldr	r3, [pc, #8]	; (c000a34 <__acle_se_SECURE_RegisterCallback+0x80>)
 c000a2c:	6019      	str	r1, [r3, #0]
        break;
 c000a2e:	e7c5      	b.n	c0009bc <__acle_se_SECURE_RegisterCallback+0x8>
 c000a30:	300000b0 	.word	0x300000b0
 c000a34:	300000b4 	.word	0x300000b4

0c000a38 <__acle_se_SECURE_printf>:
	printf(va_buf);
	va_end(ap);
}
#else
CMSE_NS_ENTRY void SECURE_printf(const char* buf)
{
 c000a38:	b508      	push	{r3, lr}
 c000a3a:	4601      	mov	r1, r0
	//extern UART_HandleTypeDef huart2;
	printf("%s", buf);
 c000a3c:	481c      	ldr	r0, [pc, #112]	; (c000ab0 <__acle_se_SECURE_printf+0x78>)
 c000a3e:	f004 fe9b 	bl	c005778 <iprintf>

	//HAL_UART_Transmit(&huart2, "Secure_printf\r\n", 15, 100);
}
 c000a42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 c000a46:	4670      	mov	r0, lr
 c000a48:	4671      	mov	r1, lr
 c000a4a:	4672      	mov	r2, lr
 c000a4c:	4673      	mov	r3, lr
 c000a4e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000a52:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000a56:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000a5a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000a5e:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000a62:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000a66:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000a6a:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000a6e:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000a72:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000a76:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000a7a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000a7e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000a82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000a86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000a8a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000a8e:	f38e 8c00 	msr	CPSR_fs, lr
 c000a92:	b410      	push	{r4}
 c000a94:	eef1 ca10 	vmrs	ip, fpscr
 c000a98:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000a9c:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000aa0:	ea0c 0c04 	and.w	ip, ip, r4
 c000aa4:	eee1 ca10 	vmsr	fpscr, ip
 c000aa8:	bc10      	pop	{r4}
 c000aaa:	46f4      	mov	ip, lr
 c000aac:	4774      	bxns	lr
 c000aae:	bf00      	nop
 c000ab0:	0c00697c 	.word	0x0c00697c

0c000ab4 <__acle_se_SECURE_FLASH_WRITE>:

CMSE_NS_ENTRY int SECURE_FLASH_WRITE(teDATASTORAGE stype, void *data, uint16_t size)
{
 c000ab4:	b510      	push	{r4, lr}
 c000ab6:	4604      	mov	r4, r0
 c000ab8:	b082      	sub	sp, #8
 c000aba:	e9cd 2100 	strd	r2, r1, [sp]
    secure_erase_storage(stype);
 c000abe:	f003 f9fd 	bl	c003ebc <secure_erase_storage>
	return secure_write_storage(stype, data, size);
 c000ac2:	e9dd 2100 	ldrd	r2, r1, [sp]
 c000ac6:	4620      	mov	r0, r4
 c000ac8:	f003 f9ac 	bl	c003e24 <secure_write_storage>
}
 c000acc:	b002      	add	sp, #8
 c000ace:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000ad2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000ad6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000ada:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000ade:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000ae2:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000ae6:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000aea:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000aee:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000af2:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000af6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000afa:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000afe:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000b02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000b06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000b0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c000b0e:	4671      	mov	r1, lr
 c000b10:	4672      	mov	r2, lr
 c000b12:	4673      	mov	r3, lr
 c000b14:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000b18:	f38e 8c00 	msr	CPSR_fs, lr
 c000b1c:	b410      	push	{r4}
 c000b1e:	eef1 ca10 	vmrs	ip, fpscr
 c000b22:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000b26:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000b2a:	ea0c 0c04 	and.w	ip, ip, r4
 c000b2e:	eee1 ca10 	vmsr	fpscr, ip
 c000b32:	bc10      	pop	{r4}
 c000b34:	46f4      	mov	ip, lr
 c000b36:	4774      	bxns	lr

0c000b38 <__acle_se_SECURE_FLASH_READ>:

CMSE_NS_ENTRY int SECURE_FLASH_READ(teDATASTORAGE stype, void *data, uint16_t size)
{
 c000b38:	b508      	push	{r3, lr}
	return secure_read_storage(stype, data, size);
 c000b3a:	f003 f93b 	bl	c003db4 <secure_read_storage>
}
 c000b3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 c000b42:	4671      	mov	r1, lr
 c000b44:	4672      	mov	r2, lr
 c000b46:	4673      	mov	r3, lr
 c000b48:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000b4c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000b50:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000b54:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000b58:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000b5c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000b60:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000b64:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000b68:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000b6c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000b70:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000b74:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000b78:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000b7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000b80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000b84:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000b88:	f38e 8c00 	msr	CPSR_fs, lr
 c000b8c:	b410      	push	{r4}
 c000b8e:	eef1 ca10 	vmrs	ip, fpscr
 c000b92:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000b96:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000b9a:	ea0c 0c04 	and.w	ip, ip, r4
 c000b9e:	eee1 ca10 	vmsr	fpscr, ip
 c000ba2:	bc10      	pop	{r4}
 c000ba4:	46f4      	mov	ip, lr
 c000ba6:	4774      	bxns	lr

0c000ba8 <__acle_se_SECURE_FLASH_ERASE>:

CMSE_NS_ENTRY int SECURE_FLASH_ERASE(teDATASTORAGE stype)
{
 c000ba8:	b508      	push	{r3, lr}
	return secure_erase_storage(stype);
 c000baa:	f003 f987 	bl	c003ebc <secure_erase_storage>
}
 c000bae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 c000bb2:	4671      	mov	r1, lr
 c000bb4:	4672      	mov	r2, lr
 c000bb6:	4673      	mov	r3, lr
 c000bb8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000bbc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000bc0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000bc4:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000bc8:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000bcc:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000bd0:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000bd4:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000bd8:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000bdc:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000be0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000be4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000be8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000bec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000bf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000bf4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000bf8:	f38e 8c00 	msr	CPSR_fs, lr
 c000bfc:	b410      	push	{r4}
 c000bfe:	eef1 ca10 	vmrs	ip, fpscr
 c000c02:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000c06:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000c0a:	ea0c 0c04 	and.w	ip, ip, r4
 c000c0e:	eee1 ca10 	vmsr	fpscr, ip
 c000c12:	bc10      	pop	{r4}
 c000c14:	46f4      	mov	ip, lr
 c000c16:	4774      	bxns	lr

0c000c18 <__acle_se_SECURE_Get_Running_Bank>:

extern uint32_t VTOR_TABLE_NS_START_ADDR;
CMSE_NS_ENTRY uint8_t SECURE_Get_Running_Bank(void)
{
    if (VTOR_TABLE_NS_START_ADDR == FLASH_START_ADDR_BANK1)
 c000c18:	4a1c      	ldr	r2, [pc, #112]	; (c000c8c <__acle_se_SECURE_Get_Running_Bank+0x74>)
 c000c1a:	4b1d      	ldr	r3, [pc, #116]	; (c000c90 <__acle_se_SECURE_Get_Running_Bank+0x78>)
 c000c1c:	6810      	ldr	r0, [r2, #0]
        return 1;
    else
        return 0;
}
 c000c1e:	4671      	mov	r1, lr
 c000c20:	1ac0      	subs	r0, r0, r3
 c000c22:	fab0 f080 	clz	r0, r0
 c000c26:	4672      	mov	r2, lr
 c000c28:	4673      	mov	r3, lr
 c000c2a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000c2e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000c32:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000c36:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000c3a:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000c3e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000c42:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000c46:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000c4a:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000c4e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000c52:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000c56:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000c5a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000c62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000c66:	0940      	lsrs	r0, r0, #5
 c000c68:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000c6c:	f38e 8c00 	msr	CPSR_fs, lr
 c000c70:	b410      	push	{r4}
 c000c72:	eef1 ca10 	vmrs	ip, fpscr
 c000c76:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000c7a:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000c7e:	ea0c 0c04 	and.w	ip, ip, r4
 c000c82:	eee1 ca10 	vmsr	fpscr, ip
 c000c86:	bc10      	pop	{r4}
 c000c88:	46f4      	mov	ip, lr
 c000c8a:	4774      	bxns	lr
 c000c8c:	30000000 	.word	0x30000000
 c000c90:	08040000 	.word	0x08040000

0c000c94 <HAL_MspInit>:

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* GTZC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(GTZC_IRQn, 0, 0);
 c000c94:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c000c96:	4b15      	ldr	r3, [pc, #84]	; (c000cec <HAL_MspInit+0x58>)
{
 c000c98:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c000c9a:	6e1c      	ldr	r4, [r3, #96]	; 0x60
{
 c000c9c:	b084      	sub	sp, #16
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c000c9e:	f044 0401 	orr.w	r4, r4, #1
 c000ca2:	661c      	str	r4, [r3, #96]	; 0x60
 c000ca4:	6e1c      	ldr	r4, [r3, #96]	; 0x60
  HAL_NVIC_SetPriority(GTZC_IRQn, 0, 0);
 c000ca6:	4611      	mov	r1, r2
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c000ca8:	f004 0401 	and.w	r4, r4, #1
 c000cac:	9401      	str	r4, [sp, #4]
 c000cae:	9c01      	ldr	r4, [sp, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 c000cb0:	6d9c      	ldr	r4, [r3, #88]	; 0x58
  HAL_NVIC_SetPriority(GTZC_IRQn, 0, 0);
 c000cb2:	2008      	movs	r0, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 c000cb4:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 c000cb8:	659c      	str	r4, [r3, #88]	; 0x58
 c000cba:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 c000cbc:	f004 5480 	and.w	r4, r4, #268435456	; 0x10000000
 c000cc0:	9402      	str	r4, [sp, #8]
 c000cc2:	9c02      	ldr	r4, [sp, #8]
  __HAL_RCC_GTZC_CLK_ENABLE();
 c000cc4:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 c000cc6:	f444 0480 	orr.w	r4, r4, #4194304	; 0x400000
 c000cca:	649c      	str	r4, [r3, #72]	; 0x48
 c000ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c000cd2:	9303      	str	r3, [sp, #12]
 c000cd4:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(GTZC_IRQn, 0, 0);
 c000cd6:	f000 fabd 	bl	c001254 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(GTZC_IRQn);
 c000cda:	2008      	movs	r0, #8
 c000cdc:	f000 faf2 	bl	c0012c4 <HAL_NVIC_EnableIRQ>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c000ce0:	b004      	add	sp, #16
 c000ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_PWREx_DisableUCPDDeadBattery();
 c000ce6:	f001 b849 	b.w	c001d7c <HAL_PWREx_DisableUCPDDeadBattery>
 c000cea:	bf00      	nop
 c000cec:	50021000 	.word	0x50021000

0c000cf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 c000cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c000cf2:	2400      	movs	r4, #0
{
 c000cf4:	4605      	mov	r5, r0
 c000cf6:	b0ad      	sub	sp, #180	; 0xb4
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 c000cf8:	2294      	movs	r2, #148	; 0x94
 c000cfa:	4621      	mov	r1, r4
 c000cfc:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c000cfe:	e9cd 4402 	strd	r4, r4, [sp, #8]
 c000d02:	e9cd 4404 	strd	r4, r4, [sp, #16]
 c000d06:	9406      	str	r4, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 c000d08:	f004 fc83 	bl	c005612 <memset>
  if(huart->Instance==USART2)
 c000d0c:	682a      	ldr	r2, [r5, #0]
 c000d0e:	4b1a      	ldr	r3, [pc, #104]	; (c000d78 <HAL_UART_MspInit+0x88>)
 c000d10:	429a      	cmp	r2, r3
 c000d12:	d001      	beq.n	c000d18 <HAL_UART_MspInit+0x28>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 c000d14:	b02d      	add	sp, #180	; 0xb4
 c000d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 c000d18:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c000d1a:	a807      	add	r0, sp, #28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 c000d1c:	9415      	str	r4, [sp, #84]	; 0x54
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 c000d1e:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c000d20:	f001 ffc2 	bl	c002ca8 <HAL_RCCEx_PeriphCLKConfig>
 c000d24:	bb20      	cbnz	r0, c000d70 <HAL_UART_MspInit+0x80>
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 c000d26:	f04f 0c07 	mov.w	ip, #7
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 c000d2a:	260c      	movs	r6, #12
 c000d2c:	2702      	movs	r7, #2
 c000d2e:	2400      	movs	r4, #0
 c000d30:	2500      	movs	r5, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 c000d32:	4b12      	ldr	r3, [pc, #72]	; (c000d7c <HAL_UART_MspInit+0x8c>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 c000d34:	4812      	ldr	r0, [pc, #72]	; (c000d80 <HAL_UART_MspInit+0x90>)
    __HAL_RCC_USART2_CLK_ENABLE();
 c000d36:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 c000d38:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 c000d3a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 c000d3e:	659a      	str	r2, [r3, #88]	; 0x58
 c000d40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 c000d42:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 c000d46:	9200      	str	r2, [sp, #0]
 c000d48:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 c000d4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c000d4c:	f042 0201 	orr.w	r2, r2, #1
 c000d50:	64da      	str	r2, [r3, #76]	; 0x4c
 c000d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 c000d54:	e9cd 6702 	strd	r6, r7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 c000d58:	f003 0301 	and.w	r3, r3, #1
 c000d5c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 c000d5e:	e9cd 4504 	strd	r4, r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 c000d62:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 c000d64:	f8cd c018 	str.w	ip, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 c000d68:	f000 fc8c 	bl	c001684 <HAL_GPIO_Init>
}
 c000d6c:	b02d      	add	sp, #180	; 0xb4
 c000d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 c000d70:	f7ff fe1e 	bl	c0009b0 <Error_Handler>
 c000d74:	e7d7      	b.n	c000d26 <HAL_UART_MspInit+0x36>
 c000d76:	bf00      	nop
 c000d78:	50004400 	.word	0x50004400
 c000d7c:	50021000 	.word	0x50021000
 c000d80:	52020000 	.word	0x52020000

0c000d84 <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==USART2)
 c000d84:	4b06      	ldr	r3, [pc, #24]	; (c000da0 <HAL_UART_MspDeInit+0x1c>)
 c000d86:	6802      	ldr	r2, [r0, #0]
 c000d88:	429a      	cmp	r2, r3
 c000d8a:	d000      	beq.n	c000d8e <HAL_UART_MspDeInit+0xa>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 c000d8c:	4770      	bx	lr
    __HAL_RCC_USART2_CLK_DISABLE();
 c000d8e:	4a05      	ldr	r2, [pc, #20]	; (c000da4 <HAL_UART_MspDeInit+0x20>)
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 c000d90:	210c      	movs	r1, #12
    __HAL_RCC_USART2_CLK_DISABLE();
 c000d92:	6d93      	ldr	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 c000d94:	4804      	ldr	r0, [pc, #16]	; (c000da8 <HAL_UART_MspDeInit+0x24>)
    __HAL_RCC_USART2_CLK_DISABLE();
 c000d96:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 c000d9a:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 c000d9c:	f000 bd6a 	b.w	c001874 <HAL_GPIO_DeInit>
 c000da0:	50004400 	.word	0x50004400
 c000da4:	50021000 	.word	0x50021000
 c000da8:	52020000 	.word	0x52020000

0c000dac <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 c000dac:	e7fe      	b.n	c000dac <NMI_Handler>
 c000dae:	bf00      	nop

0c000db0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c000db0:	e7fe      	b.n	c000db0 <HardFault_Handler>
 c000db2:	bf00      	nop

0c000db4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c000db4:	e7fe      	b.n	c000db4 <MemManage_Handler>
 c000db6:	bf00      	nop

0c000db8 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c000db8:	e7fe      	b.n	c000db8 <BusFault_Handler>
 c000dba:	bf00      	nop

0c000dbc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c000dbc:	e7fe      	b.n	c000dbc <UsageFault_Handler>
 c000dbe:	bf00      	nop

0c000dc0 <SecureFault_Handler>:
void SecureFault_Handler(void)
{
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c000dc0:	e7fe      	b.n	c000dc0 <SecureFault_Handler>
 c000dc2:	bf00      	nop

0c000dc4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c000dc4:	4770      	bx	lr
 c000dc6:	bf00      	nop

0c000dc8 <DebugMon_Handler>:
 c000dc8:	4770      	bx	lr
 c000dca:	bf00      	nop

0c000dcc <PendSV_Handler>:
 c000dcc:	4770      	bx	lr
 c000dce:	bf00      	nop

0c000dd0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c000dd0:	f000 ba18 	b.w	c001204 <HAL_IncTick>

0c000dd4 <GTZC_IRQHandler>:
void GTZC_IRQHandler(void)
{
  /* USER CODE BEGIN GTZC_IRQn 0 */

  /* USER CODE END GTZC_IRQn 0 */
  HAL_GTZC_IRQHandler();
 c000dd4:	f000 bf32 	b.w	c001c3c <HAL_GTZC_IRQHandler>

0c000dd8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 c000dd8:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 c000dda:	1e16      	subs	r6, r2, #0
 c000ddc:	dd07      	ble.n	c000dee <_read+0x16>
 c000dde:	460c      	mov	r4, r1
 c000de0:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 c000de2:	e000      	b.n	c000de6 <_read+0xe>
 c000de4:	bf00      	nop
 c000de6:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 c000dea:	42a5      	cmp	r5, r4
 c000dec:	d1f9      	bne.n	c000de2 <_read+0xa>
	}

return len;
}
 c000dee:	4630      	mov	r0, r6
 c000df0:	bd70      	pop	{r4, r5, r6, pc}
 c000df2:	bf00      	nop

0c000df4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 c000df4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 c000df6:	1e16      	subs	r6, r2, #0
 c000df8:	dd07      	ble.n	c000e0a <_write+0x16>
 c000dfa:	460c      	mov	r4, r1
 c000dfc:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 c000dfe:	f814 0b01 	ldrb.w	r0, [r4], #1
 c000e02:	f7ff fdc5 	bl	c000990 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 c000e06:	42ac      	cmp	r4, r5
 c000e08:	d1f9      	bne.n	c000dfe <_write+0xa>
	}
	return len;
}
 c000e0a:	4630      	mov	r0, r6
 c000e0c:	bd70      	pop	{r4, r5, r6, pc}
 c000e0e:	bf00      	nop

0c000e10 <_close>:

int _close(int file)
{
	return -1;
}
 c000e10:	f04f 30ff 	mov.w	r0, #4294967295
 c000e14:	4770      	bx	lr
 c000e16:	bf00      	nop

0c000e18 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 c000e18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 c000e1c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 c000e1e:	604b      	str	r3, [r1, #4]
}
 c000e20:	4770      	bx	lr
 c000e22:	bf00      	nop

0c000e24 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 c000e24:	2001      	movs	r0, #1
 c000e26:	4770      	bx	lr

0c000e28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 c000e28:	2000      	movs	r0, #0
 c000e2a:	4770      	bx	lr

0c000e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 c000e2c:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 c000e2e:	480d      	ldr	r0, [pc, #52]	; (c000e64 <_sbrk+0x38>)
{
 c000e30:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 c000e32:	490d      	ldr	r1, [pc, #52]	; (c000e68 <_sbrk+0x3c>)
 c000e34:	4c0d      	ldr	r4, [pc, #52]	; (c000e6c <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 c000e36:	6802      	ldr	r2, [r0, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 c000e38:	1b09      	subs	r1, r1, r4
  if (NULL == __sbrk_heap_end)
 c000e3a:	b12a      	cbz	r2, c000e48 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 c000e3c:	4413      	add	r3, r2
 c000e3e:	428b      	cmp	r3, r1
 c000e40:	d808      	bhi.n	c000e54 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 c000e42:	6003      	str	r3, [r0, #0]

  return (void *)prev_heap_end;
}
 c000e44:	4610      	mov	r0, r2
 c000e46:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 c000e48:	4c09      	ldr	r4, [pc, #36]	; (c000e70 <_sbrk+0x44>)
 c000e4a:	4622      	mov	r2, r4
  if (__sbrk_heap_end + incr > max_heap)
 c000e4c:	4413      	add	r3, r2
 c000e4e:	428b      	cmp	r3, r1
    __sbrk_heap_end = &_end;
 c000e50:	6004      	str	r4, [r0, #0]
  if (__sbrk_heap_end + incr > max_heap)
 c000e52:	d9f6      	bls.n	c000e42 <_sbrk+0x16>
    errno = ENOMEM;
 c000e54:	f004 fb8c 	bl	c005570 <__errno>
 c000e58:	230c      	movs	r3, #12
    return (void *)-1;
 c000e5a:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 c000e5e:	6003      	str	r3, [r0, #0]
}
 c000e60:	4610      	mov	r0, r2
 c000e62:	bd10      	pop	{r4, pc}
 c000e64:	300000b8 	.word	0x300000b8
 c000e68:	30018000 	.word	0x30018000
 c000e6c:	00000b00 	.word	0x00000b00
 c000e70:	300033a8 	.word	0x300033a8

0c000e74 <SystemInit>:
{

#if defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U)

  #if defined (SAU_INIT_REGION0) && (SAU_INIT_REGION0 == 1U)
    SAU_INIT_REGION(0);
 c000e74:	2000      	movs	r0, #0
  #endif

  #if defined (SAU_INIT_REGION1) && (SAU_INIT_REGION1 == 1U)
    SAU_INIT_REGION(1);
 c000e76:	2101      	movs	r1, #1
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 c000e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  #endif

  #if defined (SAU_INIT_REGION2) && (SAU_INIT_REGION2 == 1U)
    SAU_INIT_REGION(2);
 c000e7c:	f04f 0802 	mov.w	r8, #2
  #endif

  #if defined (SAU_INIT_REGION3) && (SAU_INIT_REGION3 == 1U)
    SAU_INIT_REGION(3);
 c000e80:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 c000e84:	f04f 0e03 	mov.w	lr, #3
  #endif

  #if defined (SAU_INIT_REGION4) && (SAU_INIT_REGION4 == 1U)
    SAU_INIT_REGION(4);
 c000e88:	2704      	movs	r7, #4
 c000e8a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
  #endif

  #if defined (SAU_INIT_REGION5) && (SAU_INIT_REGION5 == 1U)
    SAU_INIT_REGION(5);
 c000e8e:	2405      	movs	r4, #5
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c000e90:	f44f 4600 	mov.w	r6, #32768	; 0x8000
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c000e94:	f04f 2520 	mov.w	r5, #536879104	; 0x20002000
    SAU_INIT_REGION(0);
 c000e98:	4b2d      	ldr	r3, [pc, #180]	; (c000f50 <SystemInit+0xdc>)
 c000e9a:	f8df 90d0 	ldr.w	r9, [pc, #208]	; c000f6c <SystemInit+0xf8>
 c000e9e:	6098      	str	r0, [r3, #8]
 c000ea0:	f8c3 900c 	str.w	r9, [r3, #12]
 c000ea4:	f509 597f 	add.w	r9, r9, #16320	; 0x3fc0
 c000ea8:	f109 0923 	add.w	r9, r9, #35	; 0x23
 c000eac:	f8c3 9010 	str.w	r9, [r3, #16]
    SAU_INIT_REGION(1);
 c000eb0:	f8df 90bc 	ldr.w	r9, [pc, #188]	; c000f70 <SystemInit+0xfc>
 c000eb4:	6099      	str	r1, [r3, #8]
 c000eb6:	f8c3 900c 	str.w	r9, [r3, #12]
 c000eba:	f509 29df 	add.w	r9, r9, #456704	; 0x6f800
 c000ebe:	f209 79e1 	addw	r9, r9, #2017	; 0x7e1
 c000ec2:	f8c3 9010 	str.w	r9, [r3, #16]
    SAU_INIT_REGION(2);
 c000ec6:	f8c3 8008 	str.w	r8, [r3, #8]
 c000eca:	f8df 80a8 	ldr.w	r8, [pc, #168]	; c000f74 <SystemInit+0x100>
 c000ece:	f8c3 800c 	str.w	r8, [r3, #12]
 c000ed2:	f508 381f 	add.w	r8, r8, #162816	; 0x27c00
 c000ed6:	f208 38e1 	addw	r8, r8, #993	; 0x3e1
 c000eda:	f8c3 8010 	str.w	r8, [r3, #16]
    SAU_INIT_REGION(3);
 c000ede:	f8c3 e008 	str.w	lr, [r3, #8]
 c000ee2:	f8c3 c00c 	str.w	ip, [r3, #12]
 c000ee6:	f8df c090 	ldr.w	ip, [pc, #144]	; c000f78 <SystemInit+0x104>
 c000eea:	f8c3 c010 	str.w	ip, [r3, #16]
    SAU_INIT_REGION(4);
 c000eee:	609f      	str	r7, [r3, #8]
 c000ef0:	4f18      	ldr	r7, [pc, #96]	; (c000f54 <SystemInit+0xe0>)
 c000ef2:	60da      	str	r2, [r3, #12]
    SAU_INIT_REGION(5);
 c000ef4:	4a18      	ldr	r2, [pc, #96]	; (c000f58 <SystemInit+0xe4>)
    SAU_INIT_REGION(4);
 c000ef6:	611f      	str	r7, [r3, #16]
    SAU_INIT_REGION(5);
 c000ef8:	609c      	str	r4, [r3, #8]
 c000efa:	4c18      	ldr	r4, [pc, #96]	; (c000f5c <SystemInit+0xe8>)
 c000efc:	60da      	str	r2, [r3, #12]
    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c000efe:	4a18      	ldr	r2, [pc, #96]	; (c000f60 <SystemInit+0xec>)
    SAU_INIT_REGION(5);
 c000f00:	611c      	str	r4, [r3, #16]
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c000f02:	6019      	str	r1, [r3, #0]
    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c000f04:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000f08:	4c16      	ldr	r4, [pc, #88]	; (c000f64 <SystemInit+0xf0>)
    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c000f0a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c000f0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000f12:	6863      	ldr	r3, [r4, #4]
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c000f14:	4914      	ldr	r1, [pc, #80]	; (c000f68 <SystemInit+0xf4>)
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c000f16:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c000f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000f1e:	6063      	str	r3, [r4, #4]
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c000f20:	f8c1 6280 	str.w	r6, [r1, #640]	; 0x280
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c000f24:	f8c1 5284 	str.w	r5, [r1, #644]	; 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c000f28:	f8c1 0288 	str.w	r0, [r1, #648]	; 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c000f2c:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c000f30:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c000f34:	f501 3103 	add.w	r1, r1, #134144	; 0x20c00
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c000f38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c000f3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c000f40:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 c000f44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c000f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif
}
 c000f4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 c000f50:	e000edd0 	.word	0xe000edd0
 c000f54:	9fffffe1 	.word	0x9fffffe1
 c000f58:	0bf90000 	.word	0x0bf90000
 c000f5c:	0bfa8fe1 	.word	0x0bfa8fe1
 c000f60:	e000ed00 	.word	0xe000ed00
 c000f64:	e000ef30 	.word	0xe000ef30
 c000f68:	e000e100 	.word	0xe000e100
 c000f6c:	0c00c000 	.word	0x0c00c000
 c000f70:	08010000 	.word	0x08010000
 c000f74:	20018000 	.word	0x20018000
 c000f78:	4fffffe1 	.word	0x4fffffe1

0c000f7c <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c000f7c:	4b25      	ldr	r3, [pc, #148]	; (c001014 <SystemCoreClockUpdate+0x98>)
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c000f7e:	4925      	ldr	r1, [pc, #148]	; (c001014 <SystemCoreClockUpdate+0x98>)
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c000f80:	681a      	ldr	r2, [r3, #0]
  msirange = MSIRangeTable[msirange];
 c000f82:	4825      	ldr	r0, [pc, #148]	; (c001018 <SystemCoreClockUpdate+0x9c>)
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c000f84:	0712      	lsls	r2, r2, #28
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c000f86:	bf54      	ite	pl
 c000f88:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c000f8c:	681b      	ldrmi	r3, [r3, #0]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c000f8e:	688a      	ldr	r2, [r1, #8]
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c000f90:	bf58      	it	pl
 c000f92:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c000f96:	f002 020c 	and.w	r2, r2, #12
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c000f9a:	bf48      	it	mi
 c000f9c:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c000fa0:	2a08      	cmp	r2, #8
  msirange = MSIRangeTable[msirange];
 c000fa2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c000fa6:	d00f      	beq.n	c000fc8 <SystemCoreClockUpdate+0x4c>
 c000fa8:	2a0c      	cmp	r2, #12
 c000faa:	d00f      	beq.n	c000fcc <SystemCoreClockUpdate+0x50>
 c000fac:	491b      	ldr	r1, [pc, #108]	; (c00101c <SystemCoreClockUpdate+0xa0>)
 c000fae:	2a04      	cmp	r2, #4
 c000fb0:	bf08      	it	eq
 c000fb2:	460b      	moveq	r3, r1
      SystemCoreClock = msirange;
      break;
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c000fb4:	4a17      	ldr	r2, [pc, #92]	; (c001014 <SystemCoreClockUpdate+0x98>)
 c000fb6:	481a      	ldr	r0, [pc, #104]	; (c001020 <SystemCoreClockUpdate+0xa4>)
 c000fb8:	6892      	ldr	r2, [r2, #8]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c000fba:	491a      	ldr	r1, [pc, #104]	; (c001024 <SystemCoreClockUpdate+0xa8>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c000fbc:	f3c2 1203 	ubfx	r2, r2, #4, #4
 c000fc0:	5c82      	ldrb	r2, [r0, r2]
  SystemCoreClock >>= tmp;
 c000fc2:	40d3      	lsrs	r3, r2
 c000fc4:	600b      	str	r3, [r1, #0]
}
 c000fc6:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c000fc8:	4b17      	ldr	r3, [pc, #92]	; (c001028 <SystemCoreClockUpdate+0xac>)
 c000fca:	e7f3      	b.n	c000fb4 <SystemCoreClockUpdate+0x38>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c000fcc:	68c8      	ldr	r0, [r1, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c000fce:	68ca      	ldr	r2, [r1, #12]
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c000fd0:	f000 0103 	and.w	r1, r0, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c000fd4:	f3c2 1203 	ubfx	r2, r2, #4, #4
 c000fd8:	2902      	cmp	r1, #2
 c000fda:	f102 0201 	add.w	r2, r2, #1
      switch (pllsource)
 c000fde:	d015      	beq.n	c00100c <SystemCoreClockUpdate+0x90>
 c000fe0:	2903      	cmp	r1, #3
 c000fe2:	d110      	bne.n	c001006 <SystemCoreClockUpdate+0x8a>
          pllvco = (HSE_VALUE / pllm);
 c000fe4:	4b10      	ldr	r3, [pc, #64]	; (c001028 <SystemCoreClockUpdate+0xac>)
 c000fe6:	fbb3 f3f2 	udiv	r3, r3, r2
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c000fea:	490a      	ldr	r1, [pc, #40]	; (c001014 <SystemCoreClockUpdate+0x98>)
 c000fec:	68ca      	ldr	r2, [r1, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c000fee:	68c9      	ldr	r1, [r1, #12]
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c000ff0:	f3c2 2206 	ubfx	r2, r2, #8, #7
 c000ff4:	fb03 f202 	mul.w	r2, r3, r2
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c000ff8:	f3c1 6341 	ubfx	r3, r1, #25, #2
 c000ffc:	3301      	adds	r3, #1
 c000ffe:	005b      	lsls	r3, r3, #1
      SystemCoreClock = pllvco/pllr;
 c001000:	fbb2 f3f3 	udiv	r3, r2, r3
      break;
 c001004:	e7d6      	b.n	c000fb4 <SystemCoreClockUpdate+0x38>
          pllvco = (msirange / pllm);
 c001006:	fbb3 f3f2 	udiv	r3, r3, r2
          break;
 c00100a:	e7ee      	b.n	c000fea <SystemCoreClockUpdate+0x6e>
          pllvco = (HSI_VALUE / pllm);
 c00100c:	4b03      	ldr	r3, [pc, #12]	; (c00101c <SystemCoreClockUpdate+0xa0>)
 c00100e:	fbb3 f3f2 	udiv	r3, r3, r2
          break;
 c001012:	e7ea      	b.n	c000fea <SystemCoreClockUpdate+0x6e>
 c001014:	50021000 	.word	0x50021000
 c001018:	0c006998 	.word	0x0c006998
 c00101c:	00f42400 	.word	0x00f42400
 c001020:	0c006980 	.word	0x0c006980
 c001024:	30000004 	.word	0x30000004
 c001028:	00b71b00 	.word	0x00b71b00

0c00102c <__acle_se_SECURE_SystemCoreClockUpdate>:
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c00102c:	4b3e      	ldr	r3, [pc, #248]	; (c001128 <__acle_se_SECURE_SystemCoreClockUpdate+0xfc>)
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c00102e:	493e      	ldr	r1, [pc, #248]	; (c001128 <__acle_se_SECURE_SystemCoreClockUpdate+0xfc>)
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c001030:	681a      	ldr	r2, [r3, #0]
  msirange = MSIRangeTable[msirange];
 c001032:	483e      	ldr	r0, [pc, #248]	; (c00112c <__acle_se_SECURE_SystemCoreClockUpdate+0x100>)
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c001034:	0712      	lsls	r2, r2, #28
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c001036:	bf54      	ite	pl
 c001038:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c00103c:	681a      	ldrmi	r2, [r3, #0]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c00103e:	688b      	ldr	r3, [r1, #8]
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c001040:	bf58      	it	pl
 c001042:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c001046:	f003 030c 	and.w	r3, r3, #12
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c00104a:	bf48      	it	mi
 c00104c:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c001050:	2b08      	cmp	r3, #8
  msirange = MSIRangeTable[msirange];
 c001052:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c001056:	d041      	beq.n	c0010dc <__acle_se_SECURE_SystemCoreClockUpdate+0xb0>
 c001058:	2b0c      	cmp	r3, #12
 c00105a:	d041      	beq.n	c0010e0 <__acle_se_SECURE_SystemCoreClockUpdate+0xb4>
 c00105c:	4a34      	ldr	r2, [pc, #208]	; (c001130 <__acle_se_SECURE_SystemCoreClockUpdate+0x104>)
 c00105e:	2b04      	cmp	r3, #4
 c001060:	bf08      	it	eq
 c001062:	4610      	moveq	r0, r2
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c001064:	4b30      	ldr	r3, [pc, #192]	; (c001128 <__acle_se_SECURE_SystemCoreClockUpdate+0xfc>)
 c001066:	4933      	ldr	r1, [pc, #204]	; (c001134 <__acle_se_SECURE_SystemCoreClockUpdate+0x108>)
 c001068:	689b      	ldr	r3, [r3, #8]
  SystemCoreClock >>= tmp;
 c00106a:	4a33      	ldr	r2, [pc, #204]	; (c001138 <__acle_se_SECURE_SystemCoreClockUpdate+0x10c>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c00106c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 c001070:	5ccb      	ldrb	r3, [r1, r3]
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
  SystemCoreClockUpdate();
  
  return SystemCoreClock;
}
 c001072:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
  SystemCoreClock >>= tmp;
 c001076:	40d8      	lsrs	r0, r3
}
 c001078:	4671      	mov	r1, lr
 c00107a:	4673      	mov	r3, lr
 c00107c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c001080:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c001084:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001088:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00108c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001090:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c001094:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001098:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00109c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0010a0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0010a4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0010a8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0010ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0010b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  SystemCoreClock >>= tmp;
 c0010b4:	6010      	str	r0, [r2, #0]
}
 c0010b6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0010ba:	4672      	mov	r2, lr
 c0010bc:	f38e 8c00 	msr	CPSR_fs, lr
 c0010c0:	b410      	push	{r4}
 c0010c2:	eef1 ca10 	vmrs	ip, fpscr
 c0010c6:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0010ca:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0010ce:	ea0c 0c04 	and.w	ip, ip, r4
 c0010d2:	eee1 ca10 	vmsr	fpscr, ip
 c0010d6:	bc10      	pop	{r4}
 c0010d8:	46f4      	mov	ip, lr
 c0010da:	4774      	bxns	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c0010dc:	4817      	ldr	r0, [pc, #92]	; (c00113c <__acle_se_SECURE_SystemCoreClockUpdate+0x110>)
 c0010de:	e7c1      	b.n	c001064 <__acle_se_SECURE_SystemCoreClockUpdate+0x38>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c0010e0:	68ca      	ldr	r2, [r1, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c0010e2:	68cb      	ldr	r3, [r1, #12]
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c0010e4:	f002 0203 	and.w	r2, r2, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c0010e8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 c0010ec:	2a02      	cmp	r2, #2
 c0010ee:	f103 0301 	add.w	r3, r3, #1
      switch (pllsource)
 c0010f2:	d015      	beq.n	c001120 <__acle_se_SECURE_SystemCoreClockUpdate+0xf4>
 c0010f4:	2a03      	cmp	r2, #3
 c0010f6:	d110      	bne.n	c00111a <__acle_se_SECURE_SystemCoreClockUpdate+0xee>
          pllvco = (HSE_VALUE / pllm);
 c0010f8:	4810      	ldr	r0, [pc, #64]	; (c00113c <__acle_se_SECURE_SystemCoreClockUpdate+0x110>)
 c0010fa:	fbb0 f0f3 	udiv	r0, r0, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c0010fe:	4a0a      	ldr	r2, [pc, #40]	; (c001128 <__acle_se_SECURE_SystemCoreClockUpdate+0xfc>)
 c001100:	68d3      	ldr	r3, [r2, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c001102:	68d2      	ldr	r2, [r2, #12]
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c001104:	f3c3 2306 	ubfx	r3, r3, #8, #7
 c001108:	fb00 f303 	mul.w	r3, r0, r3
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c00110c:	f3c2 6041 	ubfx	r0, r2, #25, #2
 c001110:	3001      	adds	r0, #1
 c001112:	0040      	lsls	r0, r0, #1
      SystemCoreClock = pllvco/pllr;
 c001114:	fbb3 f0f0 	udiv	r0, r3, r0
      break;
 c001118:	e7a4      	b.n	c001064 <__acle_se_SECURE_SystemCoreClockUpdate+0x38>
          pllvco = (msirange / pllm);
 c00111a:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 c00111e:	e7ee      	b.n	c0010fe <__acle_se_SECURE_SystemCoreClockUpdate+0xd2>
          pllvco = (HSI_VALUE / pllm);
 c001120:	4803      	ldr	r0, [pc, #12]	; (c001130 <__acle_se_SECURE_SystemCoreClockUpdate+0x104>)
 c001122:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 c001126:	e7ea      	b.n	c0010fe <__acle_se_SECURE_SystemCoreClockUpdate+0xd2>
 c001128:	50021000 	.word	0x50021000
 c00112c:	0c006998 	.word	0x0c006998
 c001130:	00f42400 	.word	0x00f42400
 c001134:	0c006980 	.word	0x0c006980
 c001138:	30000004 	.word	0x30000004
 c00113c:	00b71b00 	.word	0x00b71b00

0c001140 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 c001140:	f8df d034 	ldr.w	sp, [pc, #52]	; c001178 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 c001144:	f7ff fe96 	bl	c000e74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 c001148:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 c00114a:	e003      	b.n	c001154 <LoopCopyDataInit>

0c00114c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 c00114c:	4b0b      	ldr	r3, [pc, #44]	; (c00117c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 c00114e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 c001150:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 c001152:	3104      	adds	r1, #4

0c001154 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 c001154:	480a      	ldr	r0, [pc, #40]	; (c001180 <LoopForever+0xa>)
	ldr	r3, =_edata
 c001156:	4b0b      	ldr	r3, [pc, #44]	; (c001184 <LoopForever+0xe>)
	adds	r2, r0, r1
 c001158:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 c00115a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 c00115c:	d3f6      	bcc.n	c00114c <CopyDataInit>
	ldr	r2, =_sbss
 c00115e:	4a0a      	ldr	r2, [pc, #40]	; (c001188 <LoopForever+0x12>)
	b	LoopFillZerobss
 c001160:	e002      	b.n	c001168 <LoopFillZerobss>

0c001162 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 c001162:	2300      	movs	r3, #0
	str	r3, [r2], #4
 c001164:	f842 3b04 	str.w	r3, [r2], #4

0c001168 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 c001168:	4b08      	ldr	r3, [pc, #32]	; (c00118c <LoopForever+0x16>)
	cmp	r2, r3
 c00116a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 c00116c:	d3f9      	bcc.n	c001162 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 c00116e:	f004 fa05 	bl	c00557c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 c001172:	f7ff fa61 	bl	c000638 <main>

0c001176 <LoopForever>:

LoopForever:
    b LoopForever
 c001176:	e7fe      	b.n	c001176 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 c001178:	30018000 	.word	0x30018000
	ldr	r3, =_sidata
 c00117c:	0c006b50 	.word	0x0c006b50
	ldr	r0, =_sdata
 c001180:	30000000 	.word	0x30000000
	ldr	r3, =_edata
 c001184:	30000094 	.word	0x30000094
	ldr	r2, =_sbss
 c001188:	30000094 	.word	0x30000094
	ldr	r3, = _ebss
 c00118c:	300033a4 	.word	0x300033a4

0c001190 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 c001190:	e7fe      	b.n	c001190 <ADC1_2_IRQHandler>
	...

0c001194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c001194:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 c001196:	4b0f      	ldr	r3, [pc, #60]	; (c0011d4 <HAL_InitTick+0x40>)
 c001198:	781b      	ldrb	r3, [r3, #0]
 c00119a:	b90b      	cbnz	r3, c0011a0 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 c00119c:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 c00119e:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 c0011a0:	4605      	mov	r5, r0
 c0011a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 c0011a6:	fbb0 f3f3 	udiv	r3, r0, r3
 c0011aa:	4a0b      	ldr	r2, [pc, #44]	; (c0011d8 <HAL_InitTick+0x44>)
 c0011ac:	6810      	ldr	r0, [r2, #0]
 c0011ae:	fbb0 f0f3 	udiv	r0, r0, r3
 c0011b2:	f000 f895 	bl	c0012e0 <HAL_SYSTICK_Config>
 c0011b6:	4604      	mov	r4, r0
 c0011b8:	2800      	cmp	r0, #0
 c0011ba:	d1ef      	bne.n	c00119c <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 c0011bc:	2d07      	cmp	r5, #7
 c0011be:	d8ed      	bhi.n	c00119c <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c0011c0:	4602      	mov	r2, r0
 c0011c2:	4629      	mov	r1, r5
 c0011c4:	f04f 30ff 	mov.w	r0, #4294967295
 c0011c8:	f000 f844 	bl	c001254 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 c0011cc:	4b03      	ldr	r3, [pc, #12]	; (c0011dc <HAL_InitTick+0x48>)
 c0011ce:	4620      	mov	r0, r4
 c0011d0:	601d      	str	r5, [r3, #0]
}
 c0011d2:	bd38      	pop	{r3, r4, r5, pc}
 c0011d4:	30000008 	.word	0x30000008
 c0011d8:	30000004 	.word	0x30000004
 c0011dc:	3000000c 	.word	0x3000000c

0c0011e0 <HAL_Init>:
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 c0011e0:	2004      	movs	r0, #4
{
 c0011e2:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 c0011e4:	f000 f820 	bl	c001228 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClockUpdate();
 c0011e8:	f7ff fec8 	bl	c000f7c <SystemCoreClockUpdate>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c0011ec:	2000      	movs	r0, #0
 c0011ee:	f7ff ffd1 	bl	c001194 <HAL_InitTick>
 c0011f2:	b110      	cbz	r0, c0011fa <HAL_Init+0x1a>
    status = HAL_ERROR;
 c0011f4:	2401      	movs	r4, #1
}
 c0011f6:	4620      	mov	r0, r4
 c0011f8:	bd10      	pop	{r4, pc}
 c0011fa:	4604      	mov	r4, r0
    HAL_MspInit();
 c0011fc:	f7ff fd4a 	bl	c000c94 <HAL_MspInit>
}
 c001200:	4620      	mov	r0, r4
 c001202:	bd10      	pop	{r4, pc}

0c001204 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 c001204:	4a03      	ldr	r2, [pc, #12]	; (c001214 <HAL_IncTick+0x10>)
 c001206:	4b04      	ldr	r3, [pc, #16]	; (c001218 <HAL_IncTick+0x14>)
 c001208:	6811      	ldr	r1, [r2, #0]
 c00120a:	781b      	ldrb	r3, [r3, #0]
 c00120c:	440b      	add	r3, r1
 c00120e:	6013      	str	r3, [r2, #0]
}
 c001210:	4770      	bx	lr
 c001212:	bf00      	nop
 c001214:	30002380 	.word	0x30002380
 c001218:	30000008 	.word	0x30000008

0c00121c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 c00121c:	4b01      	ldr	r3, [pc, #4]	; (c001224 <HAL_GetTick+0x8>)
 c00121e:	6818      	ldr	r0, [r3, #0]
}
 c001220:	4770      	bx	lr
 c001222:	bf00      	nop
 c001224:	30002380 	.word	0x30002380

0c001228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c001228:	b410      	push	{r4}
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c00122a:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c00122e:	4908      	ldr	r1, [pc, #32]	; (c001250 <HAL_NVIC_SetPriorityGrouping+0x28>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c001230:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c001232:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c001234:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c001238:	ea02 0004 	and.w	r0, r2, r4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c00123c:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 c00123e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 c001242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 c001246:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 c00124a:	60cb      	str	r3, [r1, #12]
 c00124c:	4770      	bx	lr
 c00124e:	bf00      	nop
 c001250:	e000ed00 	.word	0xe000ed00

0c001254 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c001254:	4b19      	ldr	r3, [pc, #100]	; (c0012bc <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c001256:	b430      	push	{r4, r5}
 c001258:	68db      	ldr	r3, [r3, #12]
 c00125a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c00125e:	f1c3 0507 	rsb	r5, r3, #7
 c001262:	2d03      	cmp	r5, #3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c001264:	f103 0403 	add.w	r4, r3, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c001268:	bf28      	it	cs
 c00126a:	2503      	movcs	r5, #3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c00126c:	2c06      	cmp	r4, #6
 c00126e:	d919      	bls.n	c0012a4 <HAL_NVIC_SetPriority+0x50>
 c001270:	f04f 34ff 	mov.w	r4, #4294967295
 c001274:	3b04      	subs	r3, #4
 c001276:	409c      	lsls	r4, r3
 c001278:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c00127c:	f04f 34ff 	mov.w	r4, #4294967295
 c001280:	40ac      	lsls	r4, r5
 c001282:	ea21 0104 	bic.w	r1, r1, r4
 c001286:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 c001288:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c00128a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 c00128e:	db0c      	blt.n	c0012aa <HAL_NVIC_SetPriority+0x56>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c001290:	0149      	lsls	r1, r1, #5
 c001292:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 c001296:	b2c9      	uxtb	r1, r1
 c001298:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 c00129c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 c0012a0:	bc30      	pop	{r4, r5}
 c0012a2:	4770      	bx	lr
 c0012a4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c0012a6:	4613      	mov	r3, r2
 c0012a8:	e7e8      	b.n	c00127c <HAL_NVIC_SetPriority+0x28>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c0012aa:	4b05      	ldr	r3, [pc, #20]	; (c0012c0 <HAL_NVIC_SetPriority+0x6c>)
 c0012ac:	f000 000f 	and.w	r0, r0, #15
 c0012b0:	0149      	lsls	r1, r1, #5
 c0012b2:	b2c9      	uxtb	r1, r1
 c0012b4:	4403      	add	r3, r0
 c0012b6:	7619      	strb	r1, [r3, #24]
 c0012b8:	bc30      	pop	{r4, r5}
 c0012ba:	4770      	bx	lr
 c0012bc:	e000ed00 	.word	0xe000ed00
 c0012c0:	e000ecfc 	.word	0xe000ecfc

0c0012c4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 c0012c4:	2800      	cmp	r0, #0
 c0012c6:	db07      	blt.n	c0012d8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 c0012c8:	2301      	movs	r3, #1
 c0012ca:	f000 011f 	and.w	r1, r0, #31
 c0012ce:	4a03      	ldr	r2, [pc, #12]	; (c0012dc <HAL_NVIC_EnableIRQ+0x18>)
 c0012d0:	0940      	lsrs	r0, r0, #5
 c0012d2:	408b      	lsls	r3, r1
 c0012d4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 c0012d8:	4770      	bx	lr
 c0012da:	bf00      	nop
 c0012dc:	e000e100 	.word	0xe000e100

0c0012e0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c0012e0:	3801      	subs	r0, #1
 c0012e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 c0012e6:	d20d      	bcs.n	c001304 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c0012e8:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c0012ea:	25e0      	movs	r5, #224	; 0xe0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c0012ec:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c0012ee:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c0012f0:	4b05      	ldr	r3, [pc, #20]	; (c001308 <HAL_SYSTICK_Config+0x28>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c0012f2:	4c06      	ldr	r4, [pc, #24]	; (c00130c <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c0012f4:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c0012f6:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 c0012fa:	4610      	mov	r0, r2
  return SysTick_Config(TicksNumb);
}
 c0012fc:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c0012fe:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c001300:	6019      	str	r1, [r3, #0]
 c001302:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 c001304:	2001      	movs	r0, #1
 c001306:	4770      	bx	lr
 c001308:	e000e010 	.word	0xe000e010
 c00130c:	e000ed00 	.word	0xe000ed00

0c001310 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 c001310:	2800      	cmp	r0, #0
 c001312:	db08      	blt.n	c001326 <HAL_NVIC_ClearPendingIRQ+0x16>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 c001314:	2301      	movs	r3, #1
 c001316:	f000 011f 	and.w	r1, r0, #31
 c00131a:	4a03      	ldr	r2, [pc, #12]	; (c001328 <HAL_NVIC_ClearPendingIRQ+0x18>)
 c00131c:	0940      	lsrs	r0, r0, #5
 c00131e:	408b      	lsls	r3, r1
 c001320:	3060      	adds	r0, #96	; 0x60
 c001322:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 c001326:	4770      	bx	lr
 c001328:	e000e100 	.word	0xe000e100

0c00132c <FLASH_WaitForLastOperation.constprop.0>:
 c00132c:	b538      	push	{r3, r4, r5, lr}
 c00132e:	f7ff ff75 	bl	c00121c <HAL_GetTick>
 c001332:	4d19      	ldr	r5, [pc, #100]	; (c001398 <FLASH_WaitForLastOperation.constprop.0+0x6c>)
 c001334:	f500 747a 	add.w	r4, r0, #1000	; 0x3e8
 c001338:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 c00133a:	03da      	lsls	r2, r3, #15
 c00133c:	d505      	bpl.n	c00134a <FLASH_WaitForLastOperation.constprop.0+0x1e>
 c00133e:	f7ff ff6d 	bl	c00121c <HAL_GetTick>
 c001342:	4284      	cmp	r4, r0
 c001344:	d8f8      	bhi.n	c001338 <FLASH_WaitForLastOperation.constprop.0+0xc>
 c001346:	2003      	movs	r0, #3
 c001348:	bd38      	pop	{r3, r4, r5, pc}
 c00134a:	4914      	ldr	r1, [pc, #80]	; (c00139c <FLASH_WaitForLastOperation.constprop.0+0x70>)
 c00134c:	4b14      	ldr	r3, [pc, #80]	; (c0013a0 <FLASH_WaitForLastOperation.constprop.0+0x74>)
 c00134e:	6888      	ldr	r0, [r1, #8]
 c001350:	4a14      	ldr	r2, [pc, #80]	; (c0013a4 <FLASH_WaitForLastOperation.constprop.0+0x78>)
 c001352:	4c11      	ldr	r4, [pc, #68]	; (c001398 <FLASH_WaitForLastOperation.constprop.0+0x6c>)
 c001354:	ea32 0220 	bics.w	r2, r2, r0, asr #32
 c001358:	bf28      	it	cs
 c00135a:	461a      	movcs	r2, r3
 c00135c:	6810      	ldr	r0, [r2, #0]
 c00135e:	6a23      	ldr	r3, [r4, #32]
 c001360:	f000 00fa 	and.w	r0, r0, #250	; 0xfa
 c001364:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 c001368:	4303      	orrs	r3, r0
 c00136a:	d107      	bne.n	c00137c <FLASH_WaitForLastOperation.constprop.0+0x50>
 c00136c:	6810      	ldr	r0, [r2, #0]
 c00136e:	f010 0001 	ands.w	r0, r0, #1
 c001372:	d0e9      	beq.n	c001348 <FLASH_WaitForLastOperation.constprop.0+0x1c>
 c001374:	2101      	movs	r1, #1
 c001376:	4618      	mov	r0, r3
 c001378:	6011      	str	r1, [r2, #0]
 c00137a:	bd38      	pop	{r3, r4, r5, pc}
 c00137c:	6848      	ldr	r0, [r1, #4]
 c00137e:	4318      	orrs	r0, r3
 c001380:	6048      	str	r0, [r1, #4]
 c001382:	6013      	str	r3, [r2, #0]
 c001384:	049b      	lsls	r3, r3, #18
 c001386:	d504      	bpl.n	c001392 <FLASH_WaitForLastOperation.constprop.0+0x66>
 c001388:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 c00138c:	2001      	movs	r0, #1
 c00138e:	6223      	str	r3, [r4, #32]
 c001390:	bd38      	pop	{r3, r4, r5, pc}
 c001392:	2001      	movs	r0, #1
 c001394:	bd38      	pop	{r3, r4, r5, pc}
 c001396:	bf00      	nop
 c001398:	50022000 	.word	0x50022000
 c00139c:	30000010 	.word	0x30000010
 c0013a0:	40022020 	.word	0x40022020
 c0013a4:	50022024 	.word	0x50022024

0c0013a8 <HAL_FLASH_Program>:
 c0013a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c0013ac:	4c1a      	ldr	r4, [pc, #104]	; (c001418 <HAL_FLASH_Program+0x70>)
 c0013ae:	7826      	ldrb	r6, [r4, #0]
 c0013b0:	2e01      	cmp	r6, #1
 c0013b2:	d02e      	beq.n	c001412 <HAL_FLASH_Program+0x6a>
 c0013b4:	4690      	mov	r8, r2
 c0013b6:	4699      	mov	r9, r3
 c0013b8:	2201      	movs	r2, #1
 c0013ba:	2300      	movs	r3, #0
 c0013bc:	4605      	mov	r5, r0
 c0013be:	460f      	mov	r7, r1
 c0013c0:	7022      	strb	r2, [r4, #0]
 c0013c2:	6063      	str	r3, [r4, #4]
 c0013c4:	f7ff ffb2 	bl	c00132c <FLASH_WaitForLastOperation.constprop.0>
 c0013c8:	b118      	cbz	r0, c0013d2 <HAL_FLASH_Program+0x2a>
 c0013ca:	2300      	movs	r3, #0
 c0013cc:	7023      	strb	r3, [r4, #0]
 c0013ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 c0013d2:	4b12      	ldr	r3, [pc, #72]	; (c00141c <HAL_FLASH_Program+0x74>)
 c0013d4:	4812      	ldr	r0, [pc, #72]	; (c001420 <HAL_FLASH_Program+0x78>)
 c0013d6:	60a5      	str	r5, [r4, #8]
 c0013d8:	ea33 0525 	bics.w	r5, r3, r5, asr #32
 c0013dc:	bf28      	it	cs
 c0013de:	4605      	movcs	r5, r0
 c0013e0:	f3ef 8210 	mrs	r2, PRIMASK
 c0013e4:	b672      	cpsid	i
 c0013e6:	682b      	ldr	r3, [r5, #0]
 c0013e8:	f043 0301 	orr.w	r3, r3, #1
 c0013ec:	602b      	str	r3, [r5, #0]
 c0013ee:	f8c7 8000 	str.w	r8, [r7]
 c0013f2:	f3bf 8f6f 	isb	sy
 c0013f6:	f8c7 9004 	str.w	r9, [r7, #4]
 c0013fa:	f382 8810 	msr	PRIMASK, r2
 c0013fe:	f7ff ff95 	bl	c00132c <FLASH_WaitForLastOperation.constprop.0>
 c001402:	68a2      	ldr	r2, [r4, #8]
 c001404:	682b      	ldr	r3, [r5, #0]
 c001406:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 c00140a:	ea23 0302 	bic.w	r3, r3, r2
 c00140e:	602b      	str	r3, [r5, #0]
 c001410:	e7db      	b.n	c0013ca <HAL_FLASH_Program+0x22>
 c001412:	2002      	movs	r0, #2
 c001414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 c001418:	30000010 	.word	0x30000010
 c00141c:	5002202c 	.word	0x5002202c
 c001420:	40022028 	.word	0x40022028

0c001424 <HAL_FLASH_Unlock>:
 c001424:	4b0c      	ldr	r3, [pc, #48]	; (c001458 <HAL_FLASH_Unlock+0x34>)
 c001426:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 c001428:	2a00      	cmp	r2, #0
 c00142a:	db0c      	blt.n	c001446 <HAL_FLASH_Unlock+0x22>
 c00142c:	4b0a      	ldr	r3, [pc, #40]	; (c001458 <HAL_FLASH_Unlock+0x34>)
 c00142e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 c001430:	2a00      	cmp	r2, #0
 c001432:	db01      	blt.n	c001438 <HAL_FLASH_Unlock+0x14>
 c001434:	2000      	movs	r0, #0
 c001436:	4770      	bx	lr
 c001438:	4908      	ldr	r1, [pc, #32]	; (c00145c <HAL_FLASH_Unlock+0x38>)
 c00143a:	4a09      	ldr	r2, [pc, #36]	; (c001460 <HAL_FLASH_Unlock+0x3c>)
 c00143c:	60d9      	str	r1, [r3, #12]
 c00143e:	60da      	str	r2, [r3, #12]
 c001440:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 c001442:	0fc0      	lsrs	r0, r0, #31
 c001444:	4770      	bx	lr
 c001446:	4905      	ldr	r1, [pc, #20]	; (c00145c <HAL_FLASH_Unlock+0x38>)
 c001448:	4a05      	ldr	r2, [pc, #20]	; (c001460 <HAL_FLASH_Unlock+0x3c>)
 c00144a:	6099      	str	r1, [r3, #8]
 c00144c:	609a      	str	r2, [r3, #8]
 c00144e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c001450:	2b00      	cmp	r3, #0
 c001452:	daeb      	bge.n	c00142c <HAL_FLASH_Unlock+0x8>
 c001454:	2001      	movs	r0, #1
 c001456:	4770      	bx	lr
 c001458:	50022000 	.word	0x50022000
 c00145c:	45670123 	.word	0x45670123
 c001460:	cdef89ab 	.word	0xcdef89ab

0c001464 <HAL_FLASH_Lock>:
 c001464:	4b08      	ldr	r3, [pc, #32]	; (c001488 <HAL_FLASH_Lock+0x24>)
 c001466:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 c001468:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 c00146c:	629a      	str	r2, [r3, #40]	; 0x28
 c00146e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 c001470:	2a00      	cmp	r2, #0
 c001472:	db01      	blt.n	c001478 <HAL_FLASH_Lock+0x14>
 c001474:	2001      	movs	r0, #1
 c001476:	4770      	bx	lr
 c001478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 c00147a:	2000      	movs	r0, #0
 c00147c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 c001480:	62da      	str	r2, [r3, #44]	; 0x2c
 c001482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c001484:	4770      	bx	lr
 c001486:	bf00      	nop
 c001488:	50022000 	.word	0x50022000

0c00148c <FLASH_WaitForLastOperation>:
 c00148c:	b570      	push	{r4, r5, r6, lr}
 c00148e:	4604      	mov	r4, r0
 c001490:	f7ff fec4 	bl	c00121c <HAL_GetTick>
 c001494:	4e1b      	ldr	r6, [pc, #108]	; (c001504 <FLASH_WaitForLastOperation+0x78>)
 c001496:	1905      	adds	r5, r0, r4
 c001498:	1c60      	adds	r0, r4, #1
 c00149a:	d11c      	bne.n	c0014d6 <FLASH_WaitForLastOperation+0x4a>
 c00149c:	4a19      	ldr	r2, [pc, #100]	; (c001504 <FLASH_WaitForLastOperation+0x78>)
 c00149e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 c0014a0:	03d9      	lsls	r1, r3, #15
 c0014a2:	d4fc      	bmi.n	c00149e <FLASH_WaitForLastOperation+0x12>
 c0014a4:	4918      	ldr	r1, [pc, #96]	; (c001508 <FLASH_WaitForLastOperation+0x7c>)
 c0014a6:	4b19      	ldr	r3, [pc, #100]	; (c00150c <FLASH_WaitForLastOperation+0x80>)
 c0014a8:	6888      	ldr	r0, [r1, #8]
 c0014aa:	4a19      	ldr	r2, [pc, #100]	; (c001510 <FLASH_WaitForLastOperation+0x84>)
 c0014ac:	4c15      	ldr	r4, [pc, #84]	; (c001504 <FLASH_WaitForLastOperation+0x78>)
 c0014ae:	ea32 0220 	bics.w	r2, r2, r0, asr #32
 c0014b2:	bf28      	it	cs
 c0014b4:	461a      	movcs	r2, r3
 c0014b6:	6810      	ldr	r0, [r2, #0]
 c0014b8:	6a23      	ldr	r3, [r4, #32]
 c0014ba:	f000 00fa 	and.w	r0, r0, #250	; 0xfa
 c0014be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 c0014c2:	4303      	orrs	r3, r0
 c0014c4:	d110      	bne.n	c0014e8 <FLASH_WaitForLastOperation+0x5c>
 c0014c6:	6810      	ldr	r0, [r2, #0]
 c0014c8:	f010 0001 	ands.w	r0, r0, #1
 c0014cc:	d002      	beq.n	c0014d4 <FLASH_WaitForLastOperation+0x48>
 c0014ce:	2101      	movs	r1, #1
 c0014d0:	4618      	mov	r0, r3
 c0014d2:	6011      	str	r1, [r2, #0]
 c0014d4:	bd70      	pop	{r4, r5, r6, pc}
 c0014d6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 c0014d8:	03da      	lsls	r2, r3, #15
 c0014da:	d5e3      	bpl.n	c0014a4 <FLASH_WaitForLastOperation+0x18>
 c0014dc:	f7ff fe9e 	bl	c00121c <HAL_GetTick>
 c0014e0:	42a8      	cmp	r0, r5
 c0014e2:	d3d9      	bcc.n	c001498 <FLASH_WaitForLastOperation+0xc>
 c0014e4:	2003      	movs	r0, #3
 c0014e6:	bd70      	pop	{r4, r5, r6, pc}
 c0014e8:	6848      	ldr	r0, [r1, #4]
 c0014ea:	4318      	orrs	r0, r3
 c0014ec:	6048      	str	r0, [r1, #4]
 c0014ee:	6013      	str	r3, [r2, #0]
 c0014f0:	049b      	lsls	r3, r3, #18
 c0014f2:	d504      	bpl.n	c0014fe <FLASH_WaitForLastOperation+0x72>
 c0014f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 c0014f8:	2001      	movs	r0, #1
 c0014fa:	6223      	str	r3, [r4, #32]
 c0014fc:	bd70      	pop	{r4, r5, r6, pc}
 c0014fe:	2001      	movs	r0, #1
 c001500:	bd70      	pop	{r4, r5, r6, pc}
 c001502:	bf00      	nop
 c001504:	50022000 	.word	0x50022000
 c001508:	30000010 	.word	0x30000010
 c00150c:	40022020 	.word	0x40022020
 c001510:	50022024 	.word	0x50022024

0c001514 <HAL_FLASHEx_Erase>:
 c001514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c001518:	f8df b164 	ldr.w	fp, [pc, #356]	; c001680 <HAL_FLASHEx_Erase+0x16c>
 c00151c:	b083      	sub	sp, #12
 c00151e:	f89b 3000 	ldrb.w	r3, [fp]
 c001522:	2b01      	cmp	r3, #1
 c001524:	f000 8090 	beq.w	c001648 <HAL_FLASHEx_Erase+0x134>
 c001528:	2201      	movs	r2, #1
 c00152a:	2300      	movs	r3, #0
 c00152c:	4604      	mov	r4, r0
 c00152e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 c001532:	4689      	mov	r9, r1
 c001534:	f88b 2000 	strb.w	r2, [fp]
 c001538:	f8cb 3004 	str.w	r3, [fp, #4]
 c00153c:	f7ff ffa6 	bl	c00148c <FLASH_WaitForLastOperation>
 c001540:	4606      	mov	r6, r0
 c001542:	2800      	cmp	r0, #0
 c001544:	d179      	bne.n	c00163a <HAL_FLASHEx_Erase+0x126>
 c001546:	6823      	ldr	r3, [r4, #0]
 c001548:	4a4a      	ldr	r2, [pc, #296]	; (c001674 <HAL_FLASHEx_Erase+0x160>)
 c00154a:	4f4b      	ldr	r7, [pc, #300]	; (c001678 <HAL_FLASHEx_Erase+0x164>)
 c00154c:	f248 0504 	movw	r5, #32772	; 0x8004
 c001550:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 c001554:	f8cb 3008 	str.w	r3, [fp, #8]
 c001558:	ea32 0323 	bics.w	r3, r2, r3, asr #32
 c00155c:	bf28      	it	cs
 c00155e:	463b      	movcs	r3, r7
 c001560:	42a8      	cmp	r0, r5
 c001562:	9301      	str	r3, [sp, #4]
 c001564:	d044      	beq.n	c0015f0 <HAL_FLASHEx_Erase+0xdc>
 c001566:	f04f 33ff 	mov.w	r3, #4294967295
 c00156a:	f8c9 3000 	str.w	r3, [r9]
 c00156e:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 c001572:	442b      	add	r3, r5
 c001574:	429d      	cmp	r5, r3
 c001576:	d257      	bcs.n	c001628 <HAL_FLASHEx_Erase+0x114>
 c001578:	4690      	mov	r8, r2
 c00157a:	f8df a100 	ldr.w	sl, [pc, #256]	; c00167c <HAL_FLASHEx_Erase+0x168>
 c00157e:	e01f      	b.n	c0015c0 <HAL_FLASHEx_Erase+0xac>
 c001580:	6803      	ldr	r3, [r0, #0]
 c001582:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 c001586:	6003      	str	r3, [r0, #0]
 c001588:	6803      	ldr	r3, [r0, #0]
 c00158a:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 c00158e:	f023 0302 	bic.w	r3, r3, #2
 c001592:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
 c001596:	f043 0302 	orr.w	r3, r3, #2
 c00159a:	6003      	str	r3, [r0, #0]
 c00159c:	6803      	ldr	r3, [r0, #0]
 c00159e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c0015a2:	6003      	str	r3, [r0, #0]
 c0015a4:	f382 8810 	msr	PRIMASK, r2
 c0015a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 c0015ac:	f7ff ff6e 	bl	c00148c <FLASH_WaitForLastOperation>
 c0015b0:	2800      	cmp	r0, #0
 c0015b2:	d14e      	bne.n	c001652 <HAL_FLASHEx_Erase+0x13e>
 c0015b4:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 c0015b8:	3501      	adds	r5, #1
 c0015ba:	4413      	add	r3, r2
 c0015bc:	42ab      	cmp	r3, r5
 c0015be:	d933      	bls.n	c001628 <HAL_FLASHEx_Erase+0x114>
 c0015c0:	6863      	ldr	r3, [r4, #4]
 c0015c2:	f3ef 8210 	mrs	r2, PRIMASK
 c0015c6:	b672      	cpsid	i
 c0015c8:	f8db 0008 	ldr.w	r0, [fp, #8]
 c0015cc:	f8da 1040 	ldr.w	r1, [sl, #64]	; 0x40
 c0015d0:	ea38 0020 	bics.w	r0, r8, r0, asr #32
 c0015d4:	bf28      	it	cs
 c0015d6:	4638      	movcs	r0, r7
 c0015d8:	0249      	lsls	r1, r1, #9
 c0015da:	d5d1      	bpl.n	c001580 <HAL_FLASHEx_Erase+0x6c>
 c0015dc:	f013 0f01 	tst.w	r3, #1
 c0015e0:	6803      	ldr	r3, [r0, #0]
 c0015e2:	bf14      	ite	ne
 c0015e4:	f423 6300 	bicne.w	r3, r3, #2048	; 0x800
 c0015e8:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
 c0015ec:	6003      	str	r3, [r0, #0]
 c0015ee:	e7cb      	b.n	c001588 <HAL_FLASHEx_Erase+0x74>
 c0015f0:	6866      	ldr	r6, [r4, #4]
 c0015f2:	f3ef 8410 	mrs	r4, PRIMASK
 c0015f6:	b672      	cpsid	i
 c0015f8:	4d20      	ldr	r5, [pc, #128]	; (c00167c <HAL_FLASHEx_Erase+0x168>)
 c0015fa:	f8db 3008 	ldr.w	r3, [fp, #8]
 c0015fe:	6c2d      	ldr	r5, [r5, #64]	; 0x40
 c001600:	ea17 0723 	ands.w	r7, r7, r3, asr #32
 c001604:	bf38      	it	cc
 c001606:	4617      	movcc	r7, r2
 c001608:	026b      	lsls	r3, r5, #9
 c00160a:	d426      	bmi.n	c00165a <HAL_FLASHEx_Erase+0x146>
 c00160c:	683b      	ldr	r3, [r7, #0]
 c00160e:	4318      	orrs	r0, r3
 c001610:	6038      	str	r0, [r7, #0]
 c001612:	683b      	ldr	r3, [r7, #0]
 c001614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c001618:	603b      	str	r3, [r7, #0]
 c00161a:	f384 8810 	msr	PRIMASK, r4
 c00161e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 c001622:	f7ff ff33 	bl	c00148c <FLASH_WaitForLastOperation>
 c001626:	4606      	mov	r6, r0
 c001628:	9901      	ldr	r1, [sp, #4]
 c00162a:	f8db 2008 	ldr.w	r2, [fp, #8]
 c00162e:	680b      	ldr	r3, [r1, #0]
 c001630:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 c001634:	ea23 0302 	bic.w	r3, r3, r2
 c001638:	600b      	str	r3, [r1, #0]
 c00163a:	2300      	movs	r3, #0
 c00163c:	4630      	mov	r0, r6
 c00163e:	f88b 3000 	strb.w	r3, [fp]
 c001642:	b003      	add	sp, #12
 c001644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c001648:	2602      	movs	r6, #2
 c00164a:	4630      	mov	r0, r6
 c00164c:	b003      	add	sp, #12
 c00164e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c001652:	4606      	mov	r6, r0
 c001654:	f8c9 5000 	str.w	r5, [r9]
 c001658:	e7e6      	b.n	c001628 <HAL_FLASHEx_Erase+0x114>
 c00165a:	07f5      	lsls	r5, r6, #31
 c00165c:	d503      	bpl.n	c001666 <HAL_FLASHEx_Erase+0x152>
 c00165e:	683b      	ldr	r3, [r7, #0]
 c001660:	f043 0304 	orr.w	r3, r3, #4
 c001664:	603b      	str	r3, [r7, #0]
 c001666:	07b0      	lsls	r0, r6, #30
 c001668:	d5d3      	bpl.n	c001612 <HAL_FLASHEx_Erase+0xfe>
 c00166a:	683b      	ldr	r3, [r7, #0]
 c00166c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 c001670:	603b      	str	r3, [r7, #0]
 c001672:	e7ce      	b.n	c001612 <HAL_FLASHEx_Erase+0xfe>
 c001674:	5002202c 	.word	0x5002202c
 c001678:	40022028 	.word	0x40022028
 c00167c:	50022000 	.word	0x50022000
 c001680:	30000010 	.word	0x30000010

0c001684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 c001684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 c001688:	680d      	ldr	r5, [r1, #0]
{
 c00168a:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0U)
 c00168c:	2d00      	cmp	r5, #0
 c00168e:	f000 8089 	beq.w	c0017a4 <HAL_GPIO_Init+0x120>
  uint32_t position = 0U;
 c001692:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 c001694:	f04f 0b01 	mov.w	fp, #1
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
        EXTI->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 c001698:	f8df c1d4 	ldr.w	ip, [pc, #468]	; c001870 <HAL_GPIO_Init+0x1ec>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c00169c:	9501      	str	r5, [sp, #4]
    if(iocurrent != 0U)
 c00169e:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 c0016a0:	fa0b fe03 	lsl.w	lr, fp, r3
    if(iocurrent != 0U)
 c0016a4:	ea1e 0a02 	ands.w	sl, lr, r2
 c0016a8:	d077      	beq.n	c00179a <HAL_GPIO_Init+0x116>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c0016aa:	684c      	ldr	r4, [r1, #4]
 c0016ac:	005e      	lsls	r6, r3, #1
 c0016ae:	f024 0810 	bic.w	r8, r4, #16
 c0016b2:	f108 32ff 	add.w	r2, r8, #4294967295
 c0016b6:	2a01      	cmp	r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c0016b8:	f04f 0203 	mov.w	r2, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c0016bc:	d975      	bls.n	c0017aa <HAL_GPIO_Init+0x126>
      temp = GPIOx->PUPDR;
 c0016be:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c0016c0:	40b2      	lsls	r2, r6
 c0016c2:	ea27 0e02 	bic.w	lr, r7, r2
 c0016c6:	43d2      	mvns	r2, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 c0016c8:	688f      	ldr	r7, [r1, #8]
 c0016ca:	40b7      	lsls	r7, r6
 c0016cc:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->PUPDR = temp;
 c0016d0:	60c7      	str	r7, [r0, #12]
      temp = GPIOx->MODER;
 c0016d2:	f8d0 e000 	ldr.w	lr, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c0016d6:	f004 0703 	and.w	r7, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c0016da:	ea0e 0e02 	and.w	lr, lr, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c0016de:	fa07 f606 	lsl.w	r6, r7, r6
 c0016e2:	ea46 060e 	orr.w	r6, r6, lr
      GPIOx->MODER = temp;
 c0016e6:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 c0016e8:	00e6      	lsls	r6, r4, #3
 c0016ea:	d556      	bpl.n	c00179a <HAL_GPIO_Init+0x116>
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c0016ec:	220f      	movs	r2, #15
 c0016ee:	f023 0703 	bic.w	r7, r3, #3
 c0016f2:	f107 47a0 	add.w	r7, r7, #1342177280	; 0x50000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c0016f6:	4d58      	ldr	r5, [pc, #352]	; (c001858 <HAL_GPIO_Init+0x1d4>)
 c0016f8:	f507 373d 	add.w	r7, r7, #193536	; 0x2f400
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c0016fc:	f003 0603 	and.w	r6, r3, #3
        temp = EXTI->EXTICR[position >> 2U];
 c001700:	f8d7 e060 	ldr.w	lr, [r7, #96]	; 0x60
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c001704:	00f6      	lsls	r6, r6, #3
 c001706:	40b2      	lsls	r2, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c001708:	42a8      	cmp	r0, r5
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c00170a:	ea2e 0202 	bic.w	r2, lr, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c00170e:	d01d      	beq.n	c00174c <HAL_GPIO_Init+0xc8>
 c001710:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 c001714:	42a8      	cmp	r0, r5
 c001716:	f000 8089 	beq.w	c00182c <HAL_GPIO_Init+0x1a8>
 c00171a:	4d50      	ldr	r5, [pc, #320]	; (c00185c <HAL_GPIO_Init+0x1d8>)
 c00171c:	42a8      	cmp	r0, r5
 c00171e:	f000 8089 	beq.w	c001834 <HAL_GPIO_Init+0x1b0>
 c001722:	4d4f      	ldr	r5, [pc, #316]	; (c001860 <HAL_GPIO_Init+0x1dc>)
 c001724:	42a8      	cmp	r0, r5
 c001726:	d07b      	beq.n	c001820 <HAL_GPIO_Init+0x19c>
 c001728:	4d4e      	ldr	r5, [pc, #312]	; (c001864 <HAL_GPIO_Init+0x1e0>)
 c00172a:	42a8      	cmp	r0, r5
 c00172c:	f000 8088 	beq.w	c001840 <HAL_GPIO_Init+0x1bc>
 c001730:	4d4d      	ldr	r5, [pc, #308]	; (c001868 <HAL_GPIO_Init+0x1e4>)
 c001732:	42a8      	cmp	r0, r5
 c001734:	f000 808a 	beq.w	c00184c <HAL_GPIO_Init+0x1c8>
 c001738:	4d4c      	ldr	r5, [pc, #304]	; (c00186c <HAL_GPIO_Init+0x1e8>)
 c00173a:	42a8      	cmp	r0, r5
 c00173c:	bf0c      	ite	eq
 c00173e:	f04f 0e06 	moveq.w	lr, #6
 c001742:	f04f 0e07 	movne.w	lr, #7
 c001746:	fa0e f606 	lsl.w	r6, lr, r6
 c00174a:	4332      	orrs	r2, r6
        EXTI->EXTICR[position >> 2U] = temp;
 c00174c:	663a      	str	r2, [r7, #96]	; 0x60
        temp &= ~(iocurrent);
 c00174e:	ea6f 070a 	mvn.w	r7, sl
        temp = EXTI->IMR1;
 c001752:	f8dc 2080 	ldr.w	r2, [ip, #128]	; 0x80
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 c001756:	03e5      	lsls	r5, r4, #15
        temp &= ~(iocurrent);
 c001758:	bf54      	ite	pl
 c00175a:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 c00175c:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR1 = temp;
 c001760:	f8cc 2080 	str.w	r2, [ip, #128]	; 0x80

        temp = EXTI->EMR1;
 c001764:	f8dc 6084 	ldr.w	r6, [ip, #132]	; 0x84
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 c001768:	03a2      	lsls	r2, r4, #14
        temp &= ~(iocurrent);
 c00176a:	bf54      	ite	pl
 c00176c:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 c00176e:	ea4a 0606 	orrmi.w	r6, sl, r6
        }
        EXTI->EMR1 = temp;
 c001772:	f8cc 6084 	str.w	r6, [ip, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 c001776:	f8dc 6000 	ldr.w	r6, [ip]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 c00177a:	02e5      	lsls	r5, r4, #11
        temp &= ~(iocurrent);
 c00177c:	bf54      	ite	pl
 c00177e:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 c001780:	ea4a 0606 	orrmi.w	r6, sl, r6
        }
        EXTI->RTSR1 = temp;
 c001784:	f8cc 6000 	str.w	r6, [ip]

        temp = EXTI->FTSR1;
 c001788:	f8dc 2004 	ldr.w	r2, [ip, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 c00178c:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 c00178e:	bf54      	ite	pl
 c001790:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 c001792:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;
 c001796:	f8cc 2004 	str.w	r2, [ip, #4]
  while (((GPIO_Init->Pin) >> position) != 0U)
 c00179a:	9a01      	ldr	r2, [sp, #4]
      }
    }

    position++;
 c00179c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 c00179e:	40da      	lsrs	r2, r3
 c0017a0:	f47f af7d 	bne.w	c00169e <HAL_GPIO_Init+0x1a>
  }
}
 c0017a4:	b003      	add	sp, #12
 c0017a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 c0017aa:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c0017ac:	40b2      	lsls	r2, r6
 c0017ae:	ea27 0902 	bic.w	r9, r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 c0017b2:	68cf      	ldr	r7, [r1, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c0017b4:	f1b8 0f02 	cmp.w	r8, #2
        temp |= (GPIO_Init->Speed << (position * 2U));
 c0017b8:	fa07 f706 	lsl.w	r7, r7, r6
 c0017bc:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 c0017c0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 c0017c2:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 c0017c6:	f3c4 1700 	ubfx	r7, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 c0017ca:	ea29 0e0e 	bic.w	lr, r9, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 c0017ce:	fa07 f703 	lsl.w	r7, r7, r3
 c0017d2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 c0017d6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 c0017d8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c0017da:	ea27 0e02 	bic.w	lr, r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 c0017de:	688f      	ldr	r7, [r1, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c0017e0:	ea6f 0202 	mvn.w	r2, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 c0017e4:	fa07 f706 	lsl.w	r7, r7, r6
 c0017e8:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->PUPDR = temp;
 c0017ec:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c0017ee:	f47f af70 	bne.w	c0016d2 <HAL_GPIO_Init+0x4e>
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c0017f2:	f04f 0e0f 	mov.w	lr, #15
        temp = GPIOx->AFR[position >> 3U];
 c0017f6:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 c0017fa:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c0017fe:	f003 0707 	and.w	r7, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 c001802:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 c001806:	690d      	ldr	r5, [r1, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c001808:	00bf      	lsls	r7, r7, #2
 c00180a:	fa0e fe07 	lsl.w	lr, lr, r7
 c00180e:	ea29 0e0e 	bic.w	lr, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 c001812:	fa05 f707 	lsl.w	r7, r5, r7
 c001816:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 c00181a:	f8c8 7020 	str.w	r7, [r8, #32]
 c00181e:	e758      	b.n	c0016d2 <HAL_GPIO_Init+0x4e>
 c001820:	f04f 0e03 	mov.w	lr, #3
 c001824:	fa0e f606 	lsl.w	r6, lr, r6
 c001828:	4332      	orrs	r2, r6
 c00182a:	e78f      	b.n	c00174c <HAL_GPIO_Init+0xc8>
 c00182c:	fa0b f606 	lsl.w	r6, fp, r6
 c001830:	4332      	orrs	r2, r6
 c001832:	e78b      	b.n	c00174c <HAL_GPIO_Init+0xc8>
 c001834:	f04f 0e02 	mov.w	lr, #2
 c001838:	fa0e f606 	lsl.w	r6, lr, r6
 c00183c:	4332      	orrs	r2, r6
 c00183e:	e785      	b.n	c00174c <HAL_GPIO_Init+0xc8>
 c001840:	f04f 0e04 	mov.w	lr, #4
 c001844:	fa0e f606 	lsl.w	r6, lr, r6
 c001848:	4332      	orrs	r2, r6
 c00184a:	e77f      	b.n	c00174c <HAL_GPIO_Init+0xc8>
 c00184c:	f04f 0e05 	mov.w	lr, #5
 c001850:	fa0e f606 	lsl.w	r6, lr, r6
 c001854:	4332      	orrs	r2, r6
 c001856:	e779      	b.n	c00174c <HAL_GPIO_Init+0xc8>
 c001858:	52020000 	.word	0x52020000
 c00185c:	52020800 	.word	0x52020800
 c001860:	52020c00 	.word	0x52020c00
 c001864:	52021000 	.word	0x52021000
 c001868:	52021400 	.word	0x52021400
 c00186c:	52021800 	.word	0x52021800
 c001870:	5002f400 	.word	0x5002f400

0c001874 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 c001874:	2900      	cmp	r1, #0
 c001876:	f000 8099 	beq.w	c0019ac <HAL_GPIO_DeInit+0x138>
{
 c00187a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0U;
 c00187e:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 c001880:	f04f 0801 	mov.w	r8, #1
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      temp = EXTI->EXTICR[position >> 2U];
      temp &= ((0x0FUL) << (8U * (position & 0x03U)));
      if(temp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 c001884:	f8df 913c 	ldr.w	r9, [pc, #316]	; c0019c4 <HAL_GPIO_DeInit+0x150>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 c001888:	f8df e13c 	ldr.w	lr, [pc, #316]	; c0019c8 <HAL_GPIO_DeInit+0x154>
      if(temp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 c00188c:	f8df a13c 	ldr.w	sl, [pc, #316]	; c0019cc <HAL_GPIO_DeInit+0x158>
{
 c001890:	b083      	sub	sp, #12
    iocurrent = (GPIO_Pin) & (1UL << position);
 c001892:	fa08 f403 	lsl.w	r4, r8, r3
    if (iocurrent != 0U)
 c001896:	ea14 0701 	ands.w	r7, r4, r1
 c00189a:	d069      	beq.n	c001970 <HAL_GPIO_DeInit+0xfc>
      temp &= ((0x0FUL) << (8U * (position & 0x03U)));
 c00189c:	260f      	movs	r6, #15
 c00189e:	f023 0503 	bic.w	r5, r3, #3
 c0018a2:	f105 45a0 	add.w	r5, r5, #1342177280	; 0x50000000
 c0018a6:	f505 353d 	add.w	r5, r5, #193536	; 0x2f400
 c0018aa:	f003 0203 	and.w	r2, r3, #3
      temp = EXTI->EXTICR[position >> 2U];
 c0018ae:	f8d5 c060 	ldr.w	ip, [r5, #96]	; 0x60
      temp &= ((0x0FUL) << (8U * (position & 0x03U)));
 c0018b2:	00d2      	lsls	r2, r2, #3
 c0018b4:	4096      	lsls	r6, r2
      if(temp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 c0018b6:	4548      	cmp	r0, r9
      temp &= ((0x0FUL) << (8U * (position & 0x03U)));
 c0018b8:	9601      	str	r6, [sp, #4]
 c0018ba:	ea06 0c0c 	and.w	ip, r6, ip
      if(temp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 c0018be:	d017      	beq.n	c0018f0 <HAL_GPIO_DeInit+0x7c>
 c0018c0:	4550      	cmp	r0, sl
 c0018c2:	d05c      	beq.n	c00197e <HAL_GPIO_DeInit+0x10a>
 c0018c4:	4e3a      	ldr	r6, [pc, #232]	; (c0019b0 <HAL_GPIO_DeInit+0x13c>)
 c0018c6:	42b0      	cmp	r0, r6
 c0018c8:	d05c      	beq.n	c001984 <HAL_GPIO_DeInit+0x110>
 c0018ca:	4e3a      	ldr	r6, [pc, #232]	; (c0019b4 <HAL_GPIO_DeInit+0x140>)
 c0018cc:	42b0      	cmp	r0, r6
 c0018ce:	d063      	beq.n	c001998 <HAL_GPIO_DeInit+0x124>
 c0018d0:	4e39      	ldr	r6, [pc, #228]	; (c0019b8 <HAL_GPIO_DeInit+0x144>)
 c0018d2:	42b0      	cmp	r0, r6
 c0018d4:	d065      	beq.n	c0019a2 <HAL_GPIO_DeInit+0x12e>
 c0018d6:	4e39      	ldr	r6, [pc, #228]	; (c0019bc <HAL_GPIO_DeInit+0x148>)
 c0018d8:	42b0      	cmp	r0, r6
 c0018da:	d058      	beq.n	c00198e <HAL_GPIO_DeInit+0x11a>
 c0018dc:	4e38      	ldr	r6, [pc, #224]	; (c0019c0 <HAL_GPIO_DeInit+0x14c>)
 c0018de:	42b0      	cmp	r0, r6
 c0018e0:	bf14      	ite	ne
 c0018e2:	f04f 0b07 	movne.w	fp, #7
 c0018e6:	f04f 0b06 	moveq.w	fp, #6
 c0018ea:	fa0b f202 	lsl.w	r2, fp, r2
 c0018ee:	e000      	b.n	c0018f2 <HAL_GPIO_DeInit+0x7e>
 c0018f0:	2200      	movs	r2, #0
 c0018f2:	4594      	cmp	ip, r2
 c0018f4:	d11c      	bne.n	c001930 <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR1 &= ~(iocurrent);
 c0018f6:	f8de 2080 	ldr.w	r2, [lr, #128]	; 0x80
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
        EXTI->FTSR1 &= ~(iocurrent);

        temp = (0x0FUL) << (8U * (position & 0x03U));
        EXTI->EXTICR[position >> 2U] &= ~temp;
 c0018fa:	9e01      	ldr	r6, [sp, #4]
        EXTI->IMR1 &= ~(iocurrent);
 c0018fc:	ea22 0207 	bic.w	r2, r2, r7
 c001900:	f8ce 2080 	str.w	r2, [lr, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 c001904:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 c001908:	ea22 0207 	bic.w	r2, r2, r7
 c00190c:	f8ce 2084 	str.w	r2, [lr, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 c001910:	f8de 2000 	ldr.w	r2, [lr]
 c001914:	ea22 0207 	bic.w	r2, r2, r7
 c001918:	f8ce 2000 	str.w	r2, [lr]
        EXTI->FTSR1 &= ~(iocurrent);
 c00191c:	f8de 2004 	ldr.w	r2, [lr, #4]
 c001920:	ea22 0707 	bic.w	r7, r2, r7
 c001924:	f8ce 7004 	str.w	r7, [lr, #4]
        EXTI->EXTICR[position >> 2U] &= ~temp;
 c001928:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 c00192a:	ea22 0606 	bic.w	r6, r2, r6
 c00192e:	662e      	str	r6, [r5, #96]	; 0x60
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 c001930:	2503      	movs	r5, #3

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c001932:	f04f 0c0f 	mov.w	ip, #15
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 c001936:	6806      	ldr	r6, [r0, #0]
 c001938:	005a      	lsls	r2, r3, #1
 c00193a:	4095      	lsls	r5, r2
 c00193c:	432e      	orrs	r6, r5
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c00193e:	08da      	lsrs	r2, r3, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 c001940:	6006      	str	r6, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c001942:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 c001946:	f003 0607 	and.w	r6, r3, #7
 c00194a:	6a17      	ldr	r7, [r2, #32]
 c00194c:	00b6      	lsls	r6, r6, #2
 c00194e:	fa0c f606 	lsl.w	r6, ip, r6
 c001952:	ea27 0706 	bic.w	r7, r7, r6
 c001956:	6217      	str	r7, [r2, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c001958:	6882      	ldr	r2, [r0, #8]
 c00195a:	ea22 0205 	bic.w	r2, r2, r5
 c00195e:	6082      	str	r2, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 c001960:	6842      	ldr	r2, [r0, #4]
 c001962:	ea22 0404 	bic.w	r4, r2, r4
 c001966:	6044      	str	r4, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c001968:	68c2      	ldr	r2, [r0, #12]
 c00196a:	ea22 0505 	bic.w	r5, r2, r5
 c00196e:	60c5      	str	r5, [r0, #12]
    }

    position++;
 c001970:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0U)
 c001972:	fa31 f203 	lsrs.w	r2, r1, r3
 c001976:	d18c      	bne.n	c001892 <HAL_GPIO_DeInit+0x1e>
  }
}
 c001978:	b003      	add	sp, #12
 c00197a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c00197e:	fa08 f202 	lsl.w	r2, r8, r2
 c001982:	e7b6      	b.n	c0018f2 <HAL_GPIO_DeInit+0x7e>
 c001984:	f04f 0b02 	mov.w	fp, #2
 c001988:	fa0b f202 	lsl.w	r2, fp, r2
 c00198c:	e7b1      	b.n	c0018f2 <HAL_GPIO_DeInit+0x7e>
 c00198e:	f04f 0b05 	mov.w	fp, #5
 c001992:	fa0b f202 	lsl.w	r2, fp, r2
 c001996:	e7ac      	b.n	c0018f2 <HAL_GPIO_DeInit+0x7e>
 c001998:	f04f 0b03 	mov.w	fp, #3
 c00199c:	fa0b f202 	lsl.w	r2, fp, r2
 c0019a0:	e7a7      	b.n	c0018f2 <HAL_GPIO_DeInit+0x7e>
 c0019a2:	f04f 0b04 	mov.w	fp, #4
 c0019a6:	fa0b f202 	lsl.w	r2, fp, r2
 c0019aa:	e7a2      	b.n	c0018f2 <HAL_GPIO_DeInit+0x7e>
 c0019ac:	4770      	bx	lr
 c0019ae:	bf00      	nop
 c0019b0:	52020800 	.word	0x52020800
 c0019b4:	52020c00 	.word	0x52020c00
 c0019b8:	52021000 	.word	0x52021000
 c0019bc:	52021400 	.word	0x52021400
 c0019c0:	52021800 	.word	0x52021800
 c0019c4:	52020000 	.word	0x52020000
 c0019c8:	5002f400 	.word	0x5002f400
 c0019cc:	52020400 	.word	0x52020400

0c0019d0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != 0U)
 c0019d0:	6903      	ldr	r3, [r0, #16]
 c0019d2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 c0019d4:	bf14      	ite	ne
 c0019d6:	2001      	movne	r0, #1
 c0019d8:	2000      	moveq	r0, #0
 c0019da:	4770      	bx	lr

0c0019dc <HAL_GPIO_ConfigPinAttributes>:
  * @param  GPIO_Pin specifies the pin(s) to configure the secure attribute
  * @param  PinAttributes specifies the pin(s) to be set in secure mode, other being set non secured.
  * @retval None
  */
void HAL_GPIO_ConfigPinAttributes(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint32_t PinAttributes)
{
 c0019dc:	b470      	push	{r4, r5, r6}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ATTRIBUTES(PinAttributes));

  temp = GPIOx->SECCFGR;
 c0019de:	6b05      	ldr	r5, [r0, #48]	; 0x30

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 c0019e0:	b171      	cbz	r1, c001a00 <HAL_GPIO_ConfigPinAttributes+0x24>
  uint32_t position = 0U;
 c0019e2:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position);
 c0019e4:	2601      	movs	r6, #1
 c0019e6:	fa06 f403 	lsl.w	r4, r6, r3

    if(iocurrent != 0U)
 c0019ea:	420c      	tst	r4, r1
 c0019ec:	d004      	beq.n	c0019f8 <HAL_GPIO_ConfigPinAttributes+0x1c>
    {
      /* Configure the IO secure attribute */
      temp &= ~(GPIO_SECCFGR_SEC0 << position) ;
 c0019ee:	ea25 0504 	bic.w	r5, r5, r4
      temp |= (PinAttributes << position);
 c0019f2:	fa02 f403 	lsl.w	r4, r2, r3
 c0019f6:	4325      	orrs	r5, r4
    }
    position++;
 c0019f8:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0U)
 c0019fa:	fa51 f403 	asrs.w	r4, r1, r3
 c0019fe:	d1f2      	bne.n	c0019e6 <HAL_GPIO_ConfigPinAttributes+0xa>
  }

  /* Set secure attributes */
  GPIOx->SECCFGR = temp;
 c001a00:	6305      	str	r5, [r0, #48]	; 0x30
}
 c001a02:	bc70      	pop	{r4, r5, r6}
 c001a04:	4770      	bx	lr
 c001a06:	bf00      	nop

0c001a08 <HAL_GTZC_TZSC_ConfigPeriphAttributes>:
                                                       uint32_t PeriphAttributes)
{
  uint32_t register_address;

  /* check entry parameters */
  if ((PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c001a08:	f5b1 7f41 	cmp.w	r1, #772	; 0x304
 c001a0c:	d22f      	bcs.n	c001a6e <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x66>
{
 c001a0e:	b410      	push	{r4}
      || (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZSC_PERIPH_NUMBER)
 c001a10:	f000 021f 	and.w	r2, r0, #31
 c001a14:	0f04      	lsrs	r4, r0, #28
 c001a16:	eb02 1344 	add.w	r3, r2, r4, lsl #5
 c001a1a:	2b32      	cmp	r3, #50	; 0x32
 c001a1c:	d823      	bhi.n	c001a66 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x5e>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U) && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c001a1e:	0680      	lsls	r0, r0, #26
 c001a20:	d420      	bmi.n	c001a64 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x5c>
    /* common case where only one peripheral is configured */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    register_address = (uint32_t) &(GTZC_TZSC->SECCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c001a22:	f240 1001 	movw	r0, #257	; 0x101
    register_address = (uint32_t) &(GTZC_TZSC->SECCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c001a26:	4b32      	ldr	r3, [pc, #200]	; (c001af0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xe8>)
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c001a28:	4388      	bics	r0, r1
    register_address = (uint32_t) &(GTZC_TZSC->SECCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c001a2a:	4423      	add	r3, r4
 c001a2c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c001a30:	d03b      	beq.n	c001aaa <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xa2>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c001a32:	05c8      	lsls	r0, r1, #23
 c001a34:	d505      	bpl.n	c001a42 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x3a>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c001a36:	2401      	movs	r4, #1
 c001a38:	6818      	ldr	r0, [r3, #0]
 c001a3a:	4094      	lsls	r4, r2
 c001a3c:	ea20 0004 	bic.w	r0, r0, r4
 c001a40:	6018      	str	r0, [r3, #0]
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    register_address = (uint32_t) &(GTZC_TZSC->PRIVCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c001a42:	f240 2002 	movw	r0, #514	; 0x202
 c001a46:	4388      	bics	r0, r1
 c001a48:	d03f      	beq.n	c001aca <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xc2>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c001a4a:	0589      	lsls	r1, r1, #22
 c001a4c:	d506      	bpl.n	c001a5c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x54>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c001a4e:	2001      	movs	r0, #1
 c001a50:	6919      	ldr	r1, [r3, #16]
 c001a52:	fa00 f202 	lsl.w	r2, r0, r2
 c001a56:	ea21 0202 	bic.w	r2, r1, r2
 c001a5a:	611a      	str	r2, [r3, #16]
    else
    {
      /* do nothing */
    }
  }
  return HAL_OK;
 c001a5c:	2000      	movs	r0, #0
}
 c001a5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 c001a62:	4770      	bx	lr
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U) && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c001a64:	b12b      	cbz	r3, c001a72 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x6a>
    return HAL_ERROR;
 c001a66:	2001      	movs	r0, #1
}
 c001a68:	f85d 4b04 	ldr.w	r4, [sp], #4
 c001a6c:	4770      	bx	lr
    return HAL_ERROR;
 c001a6e:	2001      	movs	r0, #1
}
 c001a70:	4770      	bx	lr
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c001a72:	f240 1201 	movw	r2, #257	; 0x101
 c001a76:	438a      	bics	r2, r1
 c001a78:	d01d      	beq.n	c001ab6 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xae>
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c001a7a:	05ca      	lsls	r2, r1, #23
 c001a7c:	d506      	bpl.n	c001a8c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x84>
      CLEAR_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c001a7e:	4a1d      	ldr	r2, [pc, #116]	; (c001af4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xec>)
      CLEAR_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c001a80:	481d      	ldr	r0, [pc, #116]	; (c001af8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xf0>)
      CLEAR_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c001a82:	6914      	ldr	r4, [r2, #16]
 c001a84:	6113      	str	r3, [r2, #16]
      CLEAR_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c001a86:	6953      	ldr	r3, [r2, #20]
 c001a88:	4018      	ands	r0, r3
 c001a8a:	6150      	str	r0, [r2, #20]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c001a8c:	f240 2302 	movw	r3, #514	; 0x202
 c001a90:	438b      	bics	r3, r1
 c001a92:	d022      	beq.n	c001ada <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xd2>
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c001a94:	058c      	lsls	r4, r1, #22
 c001a96:	d5e1      	bpl.n	c001a5c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x54>
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c001a98:	2000      	movs	r0, #0
 c001a9a:	4b16      	ldr	r3, [pc, #88]	; (c001af4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xec>)
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c001a9c:	4a16      	ldr	r2, [pc, #88]	; (c001af8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xf0>)
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c001a9e:	6a19      	ldr	r1, [r3, #32]
 c001aa0:	6218      	str	r0, [r3, #32]
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c001aa2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 c001aa4:	400a      	ands	r2, r1
 c001aa6:	625a      	str	r2, [r3, #36]	; 0x24
 c001aa8:	e7de      	b.n	c001a68 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x60>
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c001aaa:	2001      	movs	r0, #1
 c001aac:	681c      	ldr	r4, [r3, #0]
 c001aae:	4090      	lsls	r0, r2
 c001ab0:	4320      	orrs	r0, r4
 c001ab2:	6018      	str	r0, [r3, #0]
 c001ab4:	e7c5      	b.n	c001a42 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x3a>
      SET_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c001ab6:	f04f 30ff 	mov.w	r0, #4294967295
 c001aba:	4b0e      	ldr	r3, [pc, #56]	; (c001af4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xec>)
      SET_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c001abc:	4a0f      	ldr	r2, [pc, #60]	; (c001afc <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xf4>)
      SET_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c001abe:	691c      	ldr	r4, [r3, #16]
 c001ac0:	6118      	str	r0, [r3, #16]
      SET_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c001ac2:	6958      	ldr	r0, [r3, #20]
 c001ac4:	4302      	orrs	r2, r0
 c001ac6:	615a      	str	r2, [r3, #20]
 c001ac8:	e7e0      	b.n	c001a8c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x84>
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c001aca:	2101      	movs	r1, #1
 c001acc:	6918      	ldr	r0, [r3, #16]
 c001ace:	fa01 f202 	lsl.w	r2, r1, r2
 c001ad2:	4302      	orrs	r2, r0
 c001ad4:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 c001ad6:	2000      	movs	r0, #0
 c001ad8:	e7c6      	b.n	c001a68 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x60>
      SET_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c001ada:	f04f 31ff 	mov.w	r1, #4294967295
 c001ade:	4b05      	ldr	r3, [pc, #20]	; (c001af4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xec>)
      SET_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c001ae0:	4a06      	ldr	r2, [pc, #24]	; (c001afc <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xf4>)
      SET_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c001ae2:	6a18      	ldr	r0, [r3, #32]
 c001ae4:	6219      	str	r1, [r3, #32]
      SET_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c001ae6:	6a59      	ldr	r1, [r3, #36]	; 0x24
  return HAL_OK;
 c001ae8:	2000      	movs	r0, #0
      SET_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c001aea:	430a      	orrs	r2, r1
 c001aec:	625a      	str	r2, [r3, #36]	; 0x24
 c001aee:	e7bb      	b.n	c001a68 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x60>
 c001af0:	1400c904 	.word	0x1400c904
 c001af4:	50032400 	.word	0x50032400
 c001af8:	fff89000 	.word	0xfff89000
 c001afc:	00076fff 	.word	0x00076fff

0c001b00 <HAL_GTZC_MPCBB_ConfigMem>:
  uint32_t size_mask;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c001b00:	f020 5080 	bic.w	r0, r0, #268435456	; 0x10000000
 c001b04:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 c001b08:	d004      	beq.n	c001b14 <HAL_GTZC_MPCBB_ConfigMem+0x14>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress)))
 c001b0a:	4b1b      	ldr	r3, [pc, #108]	; (c001b78 <HAL_GTZC_MPCBB_ConfigMem+0x78>)
 c001b0c:	4298      	cmp	r0, r3
 c001b0e:	d001      	beq.n	c001b14 <HAL_GTZC_MPCBB_ConfigMem+0x14>
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
  {
    return HAL_ERROR;
 c001b10:	2001      	movs	r0, #1
    WRITE_REG(mpcbb_ptr->VCTR[i],
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  return HAL_OK;
}
 c001b12:	4770      	bx	lr
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c001b14:	680a      	ldr	r2, [r1, #0]
 c001b16:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 c001b1a:	d1f9      	bne.n	c001b10 <HAL_GTZC_MPCBB_ConfigMem+0x10>
{
 c001b1c:	b470      	push	{r4, r5, r6}
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c001b1e:	684d      	ldr	r5, [r1, #4]
 c001b20:	f035 4380 	bics.w	r3, r5, #1073741824	; 0x40000000
 c001b24:	d125      	bne.n	c001b72 <HAL_GTZC_MPCBB_ConfigMem+0x72>
  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c001b26:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 c001b2a:	4814      	ldr	r0, [pc, #80]	; (c001b7c <HAL_GTZC_MPCBB_ConfigMem+0x7c>)
 c001b2c:	4c14      	ldr	r4, [pc, #80]	; (c001b80 <HAL_GTZC_MPCBB_ConfigMem+0x80>)
 c001b2e:	bf16      	itet	ne
 c001b30:	4604      	movne	r4, r0
 c001b32:	f04f 467f 	moveq.w	r6, #4278190080	; 0xff000000
 c001b36:	f06f 06ff 	mvnne.w	r6, #255	; 0xff
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c001b3a:	ea42 0205 	orr.w	r2, r2, r5
  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c001b3e:	bf0c      	ite	eq
 c001b40:	2518      	moveq	r5, #24
 c001b42:	2508      	movne	r5, #8
  MODIFY_REG(mpcbb_ptr->CR,
 c001b44:	6820      	ldr	r0, [r4, #0]
 c001b46:	3104      	adds	r1, #4
 c001b48:	f020 4040 	bic.w	r0, r0, #3221225472	; 0xc0000000
 c001b4c:	4302      	orrs	r2, r0
 c001b4e:	6022      	str	r2, [r4, #0]
  MODIFY_REG(mpcbb_ptr->LCKVTR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c001b50:	6922      	ldr	r2, [r4, #16]
 c001b52:	6e48      	ldr	r0, [r1, #100]	; 0x64
 c001b54:	4032      	ands	r2, r6
 c001b56:	4302      	orrs	r2, r0
 c001b58:	6122      	str	r2, [r4, #16]
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c001b5a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 c001b5e:	f851 0f04 	ldr.w	r0, [r1, #4]!
  for (i = 0U; i < size_in_superblocks; i++)
 c001b62:	3301      	adds	r3, #1
 c001b64:	429d      	cmp	r5, r3
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c001b66:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c001b6a:	d1f6      	bne.n	c001b5a <HAL_GTZC_MPCBB_ConfigMem+0x5a>
}
 c001b6c:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 c001b6e:	2000      	movs	r0, #0
}
 c001b70:	4770      	bx	lr
    return HAL_ERROR;
 c001b72:	2001      	movs	r0, #1
}
 c001b74:	bc70      	pop	{r4, r5, r6}
 c001b76:	4770      	bx	lr
 c001b78:	20030000 	.word	0x20030000
 c001b7c:	50033000 	.word	0x50033000
 c001b80:	50032c00 	.word	0x50032c00

0c001b84 <HAL_GTZC_TZIC_EnableIT>:
HAL_StatusTypeDef HAL_GTZC_TZIC_EnableIT(uint32_t PeriphId)
{
  uint32_t register_address;

  /* check entry parameters */
  if ((HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZIC_PERIPH_NUMBER)
 c001b84:	0f03      	lsrs	r3, r0, #28
 c001b86:	f000 011f 	and.w	r1, r0, #31
 c001b8a:	eb01 1243 	add.w	r2, r1, r3, lsl #5
 c001b8e:	2a47      	cmp	r2, #71	; 0x47
 c001b90:	d81c      	bhi.n	c001bcc <HAL_GTZC_TZIC_EnableIT+0x48>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U) && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c001b92:	f010 0020 	ands.w	r0, r0, #32
{
 c001b96:	b430      	push	{r4, r5}
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U) && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c001b98:	d00b      	beq.n	c001bb2 <HAL_GTZC_TZIC_EnableIT+0x2e>
 c001b9a:	b9ca      	cbnz	r2, c001bd0 <HAL_GTZC_TZIC_EnableIT+0x4c>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
  {
    /* same configuration is applied to all peripherals */
    WRITE_REG(GTZC_TZIC->IER1, TZIC_IER1_ALL);
 c001b9c:	f04f 35ff 	mov.w	r5, #4294967295
    WRITE_REG(GTZC_TZIC->IER2, TZIC_IER2_ALL);
    WRITE_REG(GTZC_TZIC->IER3, TZIC_IER3_ALL);
 c001ba0:	21ff      	movs	r1, #255	; 0xff
    WRITE_REG(GTZC_TZIC->IER1, TZIC_IER1_ALL);
 c001ba2:	4b0d      	ldr	r3, [pc, #52]	; (c001bd8 <HAL_GTZC_TZIC_EnableIT+0x54>)
    WRITE_REG(GTZC_TZIC->IER2, TZIC_IER2_ALL);
 c001ba4:	4c0d      	ldr	r4, [pc, #52]	; (c001bdc <HAL_GTZC_TZIC_EnableIT+0x58>)
    WRITE_REG(GTZC_TZIC->IER1, TZIC_IER1_ALL);
 c001ba6:	601d      	str	r5, [r3, #0]
    /* common case where only one peripheral is configured */
    register_address = (uint32_t) &(GTZC_TZIC->IER1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
    SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
  }

  return HAL_OK;
 c001ba8:	4610      	mov	r0, r2
    WRITE_REG(GTZC_TZIC->IER2, TZIC_IER2_ALL);
 c001baa:	605c      	str	r4, [r3, #4]
    WRITE_REG(GTZC_TZIC->IER3, TZIC_IER3_ALL);
 c001bac:	6099      	str	r1, [r3, #8]
}
 c001bae:	bc30      	pop	{r4, r5}
 c001bb0:	4770      	bx	lr
    SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c001bb2:	2201      	movs	r2, #1
    register_address = (uint32_t) &(GTZC_TZIC->IER1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c001bb4:	f103 53a0 	add.w	r3, r3, #335544320	; 0x14000000
 c001bb8:	f503 434a 	add.w	r3, r3, #51712	; 0xca00
 c001bbc:	009b      	lsls	r3, r3, #2
    SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c001bbe:	681c      	ldr	r4, [r3, #0]
 c001bc0:	fa02 f101 	lsl.w	r1, r2, r1
 c001bc4:	4321      	orrs	r1, r4
 c001bc6:	6019      	str	r1, [r3, #0]
}
 c001bc8:	bc30      	pop	{r4, r5}
 c001bca:	4770      	bx	lr
    return HAL_ERROR;
 c001bcc:	2001      	movs	r0, #1
}
 c001bce:	4770      	bx	lr
    return HAL_ERROR;
 c001bd0:	2001      	movs	r0, #1
}
 c001bd2:	bc30      	pop	{r4, r5}
 c001bd4:	4770      	bx	lr
 c001bd6:	bf00      	nop
 c001bd8:	50032800 	.word	0x50032800
 c001bdc:	3fff6fff 	.word	0x3fff6fff

0c001be0 <HAL_GTZC_TZIC_ClearFlag>:
HAL_StatusTypeDef HAL_GTZC_TZIC_ClearFlag(uint32_t PeriphId)
{
  uint32_t register_address;

  /* check entry parameters */
  if ((HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZIC_PERIPH_NUMBER)
 c001be0:	0f02      	lsrs	r2, r0, #28
 c001be2:	f000 011f 	and.w	r1, r0, #31
 c001be6:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 c001bea:	2b47      	cmp	r3, #71	; 0x47
 c001bec:	d81a      	bhi.n	c001c24 <HAL_GTZC_TZIC_ClearFlag+0x44>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U) && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c001bee:	f010 0020 	ands.w	r0, r0, #32
{
 c001bf2:	b430      	push	{r4, r5}
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U) && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c001bf4:	d00b      	beq.n	c001c0e <HAL_GTZC_TZIC_ClearFlag+0x2e>
 c001bf6:	b9bb      	cbnz	r3, c001c28 <HAL_GTZC_TZIC_ClearFlag+0x48>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
  {
    /* same configuration is applied to all peripherals */
    WRITE_REG(GTZC_TZIC->FCR1, TZIC_FCR1_ALL);
 c001bf8:	f04f 35ff 	mov.w	r5, #4294967295
    WRITE_REG(GTZC_TZIC->FCR2, TZIC_FCR2_ALL);
    WRITE_REG(GTZC_TZIC->FCR3, TZIC_FCR3_ALL);
 c001bfc:	21ff      	movs	r1, #255	; 0xff
    WRITE_REG(GTZC_TZIC->FCR1, TZIC_FCR1_ALL);
 c001bfe:	4a0c      	ldr	r2, [pc, #48]	; (c001c30 <HAL_GTZC_TZIC_ClearFlag+0x50>)
    WRITE_REG(GTZC_TZIC->FCR2, TZIC_FCR2_ALL);
 c001c00:	4c0c      	ldr	r4, [pc, #48]	; (c001c34 <HAL_GTZC_TZIC_ClearFlag+0x54>)
    WRITE_REG(GTZC_TZIC->FCR1, TZIC_FCR1_ALL);
 c001c02:	6215      	str	r5, [r2, #32]
    /* common case where only one peripheral is configured */
    register_address = (uint32_t) &(GTZC_TZIC->FCR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
    SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
  }

  return HAL_OK;
 c001c04:	4618      	mov	r0, r3
    WRITE_REG(GTZC_TZIC->FCR2, TZIC_FCR2_ALL);
 c001c06:	6254      	str	r4, [r2, #36]	; 0x24
    WRITE_REG(GTZC_TZIC->FCR3, TZIC_FCR3_ALL);
 c001c08:	6291      	str	r1, [r2, #40]	; 0x28
}
 c001c0a:	bc30      	pop	{r4, r5}
 c001c0c:	4770      	bx	lr
    SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c001c0e:	2401      	movs	r4, #1
    register_address = (uint32_t) &(GTZC_TZIC->FCR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c001c10:	4b09      	ldr	r3, [pc, #36]	; (c001c38 <HAL_GTZC_TZIC_ClearFlag+0x58>)
    SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c001c12:	fa04 f101 	lsl.w	r1, r4, r1
    register_address = (uint32_t) &(GTZC_TZIC->FCR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c001c16:	4413      	add	r3, r2
 c001c18:	009b      	lsls	r3, r3, #2
    SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c001c1a:	681a      	ldr	r2, [r3, #0]
}
 c001c1c:	bc30      	pop	{r4, r5}
    SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c001c1e:	4311      	orrs	r1, r2
 c001c20:	6019      	str	r1, [r3, #0]
}
 c001c22:	4770      	bx	lr
    return HAL_ERROR;
 c001c24:	2001      	movs	r0, #1
}
 c001c26:	4770      	bx	lr
    return HAL_ERROR;
 c001c28:	2001      	movs	r0, #1
}
 c001c2a:	bc30      	pop	{r4, r5}
 c001c2c:	4770      	bx	lr
 c001c2e:	bf00      	nop
 c001c30:	50032800 	.word	0x50032800
 c001c34:	3fff6fff 	.word	0x3fff6fff
 c001c38:	1400ca08 	.word	0x1400ca08

0c001c3c <HAL_GTZC_IRQHandler>:
  uint32_t flag;
  uint32_t ier_itsources;
  uint32_t sr_flags;

  /* Get current IT Flags and IT sources value on 1st register */
  ier_itsources = READ_REG(GTZC_TZIC->IER1);
 c001c3c:	4a23      	ldr	r2, [pc, #140]	; (c001ccc <HAL_GTZC_IRQHandler+0x90>)
{
 c001c3e:	b538      	push	{r3, r4, r5, lr}
  ier_itsources = READ_REG(GTZC_TZIC->IER1);
 c001c40:	6815      	ldr	r5, [r2, #0]
  sr_flags      = READ_REG(GTZC_TZIC->SR1);
 c001c42:	6913      	ldr	r3, [r2, #16]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
  if (flag != 0U)
 c001c44:	401d      	ands	r5, r3
 c001c46:	d010      	beq.n	c001c6a <HAL_GTZC_IRQHandler+0x2e>
  {
    WRITE_REG(GTZC_TZIC->FCR1, flag);
 c001c48:	462b      	mov	r3, r5

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c001c4a:	2400      	movs	r4, #0
    WRITE_REG(GTZC_TZIC->FCR1, flag);
 c001c4c:	6215      	str	r5, [r2, #32]
    while ((flag >> position) != 0U)
 c001c4e:	e003      	b.n	c001c58 <HAL_GTZC_IRQHandler+0x1c>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG1 | position);
      }

      /* Position bit to be updated */
      position++;
 c001c50:	3401      	adds	r4, #1
    while ((flag >> position) != 0U)
 c001c52:	fa35 f304 	lsrs.w	r3, r5, r4
 c001c56:	d008      	beq.n	c001c6a <HAL_GTZC_IRQHandler+0x2e>
      if ((flag & (1UL << position)) != 0U)
 c001c58:	07d9      	lsls	r1, r3, #31
 c001c5a:	d5f9      	bpl.n	c001c50 <HAL_GTZC_IRQHandler+0x14>
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG1 | position);
 c001c5c:	4620      	mov	r0, r4
      position++;
 c001c5e:	3401      	adds	r4, #1
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG1 | position);
 c001c60:	f7fe fe64 	bl	c00092c <HAL_GTZC_TZIC_Callback>
    while ((flag >> position) != 0U)
 c001c64:	fa35 f304 	lsrs.w	r3, r5, r4
 c001c68:	d1f6      	bne.n	c001c58 <HAL_GTZC_IRQHandler+0x1c>
    }
  }

  /* Get current IT Flags and IT sources value on 2nd register */
  ier_itsources = READ_REG(GTZC_TZIC->IER2);
 c001c6a:	4a18      	ldr	r2, [pc, #96]	; (c001ccc <HAL_GTZC_IRQHandler+0x90>)
 c001c6c:	6855      	ldr	r5, [r2, #4]
  sr_flags      = READ_REG(GTZC_TZIC->SR2);
 c001c6e:	6953      	ldr	r3, [r2, #20]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
  if (flag != 0U)
 c001c70:	401d      	ands	r5, r3
 c001c72:	d013      	beq.n	c001c9c <HAL_GTZC_IRQHandler+0x60>
  {
    WRITE_REG(GTZC_TZIC->FCR2, flag);
 c001c74:	462b      	mov	r3, r5
 c001c76:	6255      	str	r5, [r2, #36]	; 0x24

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
    while ((flag >> position) != 0U)
    {
      if ((flag & (1UL << position)) != 0U)
 c001c78:	07da      	lsls	r2, r3, #31
    position = 0U;
 c001c7a:	f04f 0400 	mov.w	r4, #0
      if ((flag & (1UL << position)) != 0U)
 c001c7e:	d405      	bmi.n	c001c8c <HAL_GTZC_IRQHandler+0x50>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG2 | position);
      }

      /* Position bit to be updated */
      position++;
 c001c80:	3401      	adds	r4, #1
    while ((flag >> position) != 0U)
 c001c82:	fa35 f304 	lsrs.w	r3, r5, r4
 c001c86:	d009      	beq.n	c001c9c <HAL_GTZC_IRQHandler+0x60>
      if ((flag & (1UL << position)) != 0U)
 c001c88:	07da      	lsls	r2, r3, #31
 c001c8a:	d5f9      	bpl.n	c001c80 <HAL_GTZC_IRQHandler+0x44>
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG2 | position);
 c001c8c:	f044 5080 	orr.w	r0, r4, #268435456	; 0x10000000
      position++;
 c001c90:	3401      	adds	r4, #1
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG2 | position);
 c001c92:	f7fe fe4b 	bl	c00092c <HAL_GTZC_TZIC_Callback>
    while ((flag >> position) != 0U)
 c001c96:	fa35 f304 	lsrs.w	r3, r5, r4
 c001c9a:	d1f5      	bne.n	c001c88 <HAL_GTZC_IRQHandler+0x4c>
    }
  }

  /* Get current IT Flags and IT sources value on 3rd register */
  ier_itsources = READ_REG(GTZC_TZIC->IER3);
 c001c9c:	4a0b      	ldr	r2, [pc, #44]	; (c001ccc <HAL_GTZC_IRQHandler+0x90>)
 c001c9e:	6895      	ldr	r5, [r2, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR3);
 c001ca0:	6993      	ldr	r3, [r2, #24]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
  if (flag != 0U)
 c001ca2:	401d      	ands	r5, r3
 c001ca4:	d011      	beq.n	c001cca <HAL_GTZC_IRQHandler+0x8e>
  {
    WRITE_REG(GTZC_TZIC->FCR3, flag);
 c001ca6:	462b      	mov	r3, r5

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c001ca8:	2400      	movs	r4, #0
    WRITE_REG(GTZC_TZIC->FCR3, flag);
 c001caa:	6295      	str	r5, [r2, #40]	; 0x28
    while ((flag >> position) != 0U)
 c001cac:	e003      	b.n	c001cb6 <HAL_GTZC_IRQHandler+0x7a>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG3 | position);
      }

      /* Position bit to be updated */
      position++;
 c001cae:	3401      	adds	r4, #1
    while ((flag >> position) != 0U)
 c001cb0:	fa35 f304 	lsrs.w	r3, r5, r4
 c001cb4:	d009      	beq.n	c001cca <HAL_GTZC_IRQHandler+0x8e>
      if ((flag & (1UL << position)) != 0U)
 c001cb6:	07db      	lsls	r3, r3, #31
 c001cb8:	d5f9      	bpl.n	c001cae <HAL_GTZC_IRQHandler+0x72>
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG3 | position);
 c001cba:	f044 5000 	orr.w	r0, r4, #536870912	; 0x20000000
      position++;
 c001cbe:	3401      	adds	r4, #1
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG3 | position);
 c001cc0:	f7fe fe34 	bl	c00092c <HAL_GTZC_TZIC_Callback>
    while ((flag >> position) != 0U)
 c001cc4:	fa35 f304 	lsrs.w	r3, r5, r4
 c001cc8:	d1f5      	bne.n	c001cb6 <HAL_GTZC_IRQHandler+0x7a>
    }
  }
}
 c001cca:	bd38      	pop	{r3, r4, r5, pc}
 c001ccc:	50032800 	.word	0x50032800

0c001cd0 <HAL_ICACHE_Enable>:
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 c001cd0:	4a03      	ldr	r2, [pc, #12]	; (c001ce0 <HAL_ICACHE_Enable+0x10>)

  return HAL_OK;
}
 c001cd2:	2000      	movs	r0, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 c001cd4:	6813      	ldr	r3, [r2, #0]
 c001cd6:	f043 0301 	orr.w	r3, r3, #1
 c001cda:	6013      	str	r3, [r2, #0]
}
 c001cdc:	4770      	bx	lr
 c001cde:	bf00      	nop
 c001ce0:	50030400 	.word	0x50030400

0c001ce4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 c001ce4:	4b02      	ldr	r3, [pc, #8]	; (c001cf0 <HAL_PWREx_GetVoltageRange+0xc>)
 c001ce6:	6818      	ldr	r0, [r3, #0]
}
 c001ce8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 c001cec:	4770      	bx	lr
 c001cee:	bf00      	nop
 c001cf0:	50007000 	.word	0x50007000

0c001cf4 <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 c001cf4:	4a1d      	ldr	r2, [pc, #116]	; (c001d6c <HAL_PWREx_ControlVoltageScaling+0x78>)
 c001cf6:	6813      	ldr	r3, [r2, #0]
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 c001cf8:	6911      	ldr	r1, [r2, #16]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
  {
    mode = PWR_SMPS_BYPASS;
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 c001cfa:	f411 4f10 	tst.w	r1, #36864	; 0x9000
 c001cfe:	d02e      	beq.n	c001d5e <HAL_PWREx_ControlVoltageScaling+0x6a>
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 c001d00:	68d1      	ldr	r1, [r2, #12]
 c001d02:	0409      	lsls	r1, r1, #16
 c001d04:	d42b      	bmi.n	c001d5e <HAL_PWREx_ControlVoltageScaling+0x6a>
  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 c001d06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (vos_old == VoltageScaling)
 c001d0a:	4283      	cmp	r3, r0
 c001d0c:	d029      	beq.n	c001d62 <HAL_PWREx_ControlVoltageScaling+0x6e>
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 c001d0e:	2332      	movs	r3, #50	; 0x32
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 c001d10:	6811      	ldr	r1, [r2, #0]
{
 c001d12:	b410      	push	{r4}
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 c001d14:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 c001d18:	4308      	orrs	r0, r1
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 c001d1a:	4c15      	ldr	r4, [pc, #84]	; (c001d70 <HAL_PWREx_ControlVoltageScaling+0x7c>)
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 c001d1c:	6010      	str	r0, [r2, #0]
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 c001d1e:	6821      	ldr	r1, [r4, #0]
 c001d20:	4814      	ldr	r0, [pc, #80]	; (c001d74 <HAL_PWREx_ControlVoltageScaling+0x80>)
 c001d22:	0949      	lsrs	r1, r1, #5
 c001d24:	fba0 0101 	umull	r0, r1, r0, r1
 c001d28:	09c9      	lsrs	r1, r1, #7
 c001d2a:	fb03 f301 	mul.w	r3, r3, r1
 c001d2e:	4812      	ldr	r0, [pc, #72]	; (c001d78 <HAL_PWREx_ControlVoltageScaling+0x84>)
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c001d30:	6951      	ldr	r1, [r2, #20]
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 c001d32:	fba0 0303 	umull	r0, r3, r0, r3
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c001d36:	0548      	lsls	r0, r1, #21
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 c001d38:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 c001d3c:	f103 0301 	add.w	r3, r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c001d40:	d505      	bpl.n	c001d4e <HAL_PWREx_ControlVoltageScaling+0x5a>
 c001d42:	e000      	b.n	c001d46 <HAL_PWREx_ControlVoltageScaling+0x52>
 c001d44:	b11b      	cbz	r3, c001d4e <HAL_PWREx_ControlVoltageScaling+0x5a>
 c001d46:	6951      	ldr	r1, [r2, #20]
    wait_loop_index--;
 c001d48:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c001d4a:	0549      	lsls	r1, r1, #21
 c001d4c:	d4fa      	bmi.n	c001d44 <HAL_PWREx_ControlVoltageScaling+0x50>
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 c001d4e:	4b07      	ldr	r3, [pc, #28]	; (c001d6c <HAL_PWREx_ControlVoltageScaling+0x78>)
 c001d50:	695b      	ldr	r3, [r3, #20]
 c001d52:	055b      	lsls	r3, r3, #21
 c001d54:	d407      	bmi.n	c001d66 <HAL_PWREx_ControlVoltageScaling+0x72>
    return HAL_OK;
 c001d56:	2000      	movs	r0, #0
}
 c001d58:	f85d 4b04 	ldr.w	r4, [sp], #4
 c001d5c:	4770      	bx	lr
    return HAL_ERROR;
 c001d5e:	2001      	movs	r0, #1
 c001d60:	4770      	bx	lr
    return HAL_OK;
 c001d62:	2000      	movs	r0, #0
}
 c001d64:	4770      	bx	lr
    return HAL_TIMEOUT;
 c001d66:	2003      	movs	r0, #3
 c001d68:	e7f6      	b.n	c001d58 <HAL_PWREx_ControlVoltageScaling+0x64>
 c001d6a:	bf00      	nop
 c001d6c:	50007000 	.word	0x50007000
 c001d70:	30000004 	.word	0x30000004
 c001d74:	0a7c5ac5 	.word	0x0a7c5ac5
 c001d78:	cccccccd 	.word	0xcccccccd

0c001d7c <HAL_PWREx_DisableUCPDDeadBattery>:
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 c001d7c:	4a02      	ldr	r2, [pc, #8]	; (c001d88 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 c001d7e:	6893      	ldr	r3, [r2, #8]
 c001d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c001d84:	6093      	str	r3, [r2, #8]
}
 c001d86:	4770      	bx	lr
 c001d88:	50007000 	.word	0x50007000

0c001d8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 c001d8c:	b530      	push	{r4, r5, lr}
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 c001d8e:	4c1f      	ldr	r4, [pc, #124]	; (c001e0c <RCC_SetFlashLatencyFromMSIRange+0x80>)
{
 c001d90:	4605      	mov	r5, r0
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 c001d92:	6da3      	ldr	r3, [r4, #88]	; 0x58
{
 c001d94:	b083      	sub	sp, #12
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 c001d96:	00db      	lsls	r3, r3, #3
 c001d98:	d522      	bpl.n	c001de0 <RCC_SetFlashLatencyFromMSIRange+0x54>
  {
    vos = HAL_PWREx_GetVoltageRange();
 c001d9a:	f7ff ffa3 	bl	c001ce4 <HAL_PWREx_GetVoltageRange>
 c001d9e:	4603      	mov	r3, r0
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 c001da0:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 c001da4:	d015      	beq.n	c001dd2 <RCC_SetFlashLatencyFromMSIRange+0x46>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 c001da6:	2d80      	cmp	r5, #128	; 0x80
 c001da8:	d82b      	bhi.n	c001e02 <RCC_SetFlashLatencyFromMSIRange+0x76>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 c001daa:	d02c      	beq.n	c001e06 <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if (msirange == RCC_MSIRANGE_7)
 c001dac:	f1a5 0370 	sub.w	r3, r5, #112	; 0x70
 c001db0:	fab3 f383 	clz	r3, r3
 c001db4:	095b      	lsrs	r3, r3, #5
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 c001db6:	4916      	ldr	r1, [pc, #88]	; (c001e10 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 c001db8:	680a      	ldr	r2, [r1, #0]
 c001dba:	f022 020f 	bic.w	r2, r2, #15
 c001dbe:	431a      	orrs	r2, r3
 c001dc0:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 c001dc2:	6808      	ldr	r0, [r1, #0]
 c001dc4:	f000 000f 	and.w	r0, r0, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 c001dc8:	1ac0      	subs	r0, r0, r3
 c001dca:	bf18      	it	ne
 c001dcc:	2001      	movne	r0, #1
 c001dce:	b003      	add	sp, #12
 c001dd0:	bd30      	pop	{r4, r5, pc}
    if (msirange > RCC_MSIRANGE_8)
 c001dd2:	2d80      	cmp	r5, #128	; 0x80
 c001dd4:	d9ef      	bls.n	c001db6 <RCC_SetFlashLatencyFromMSIRange+0x2a>
      if (msirange > RCC_MSIRANGE_10)
 c001dd6:	2da0      	cmp	r5, #160	; 0xa0
        latency = FLASH_LATENCY_1; /* 1WS */
 c001dd8:	bf8c      	ite	hi
 c001dda:	2302      	movhi	r3, #2
 c001ddc:	2301      	movls	r3, #1
 c001dde:	e7ea      	b.n	c001db6 <RCC_SetFlashLatencyFromMSIRange+0x2a>
    __HAL_RCC_PWR_CLK_ENABLE();
 c001de0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 c001de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c001de6:	65a3      	str	r3, [r4, #88]	; 0x58
 c001de8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 c001dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c001dee:	9301      	str	r3, [sp, #4]
 c001df0:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 c001df2:	f7ff ff77 	bl	c001ce4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 c001df6:	6da2      	ldr	r2, [r4, #88]	; 0x58
    vos = HAL_PWREx_GetVoltageRange();
 c001df8:	4603      	mov	r3, r0
    __HAL_RCC_PWR_CLK_DISABLE();
 c001dfa:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 c001dfe:	65a2      	str	r2, [r4, #88]	; 0x58
 c001e00:	e7ce      	b.n	c001da0 <RCC_SetFlashLatencyFromMSIRange+0x14>
      latency = FLASH_LATENCY_3; /* 3WS */
 c001e02:	2303      	movs	r3, #3
 c001e04:	e7d7      	b.n	c001db6 <RCC_SetFlashLatencyFromMSIRange+0x2a>
        latency = FLASH_LATENCY_2; /* 2WS */
 c001e06:	2302      	movs	r3, #2
 c001e08:	e7d5      	b.n	c001db6 <RCC_SetFlashLatencyFromMSIRange+0x2a>
 c001e0a:	bf00      	nop
 c001e0c:	50021000 	.word	0x50021000
 c001e10:	50022000 	.word	0x50022000

0c001e14 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c001e14:	4a2c      	ldr	r2, [pc, #176]	; (c001ec8 <HAL_RCC_GetSysClockFreq+0xb4>)
 c001e16:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c001e18:	68d2      	ldr	r2, [r2, #12]
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c001e1a:	f013 030c 	ands.w	r3, r3, #12
 c001e1e:	d008      	beq.n	c001e32 <HAL_RCC_GetSysClockFreq+0x1e>
 c001e20:	2b0c      	cmp	r3, #12
 c001e22:	d038      	beq.n	c001e96 <HAL_RCC_GetSysClockFreq+0x82>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 c001e24:	2b04      	cmp	r3, #4
 c001e26:	d034      	beq.n	c001e92 <HAL_RCC_GetSysClockFreq+0x7e>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 c001e28:	2b08      	cmp	r3, #8
 c001e2a:	4828      	ldr	r0, [pc, #160]	; (c001ecc <HAL_RCC_GetSysClockFreq+0xb8>)
 c001e2c:	bf18      	it	ne
 c001e2e:	2000      	movne	r0, #0
 c001e30:	4770      	bx	lr
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c001e32:	4a25      	ldr	r2, [pc, #148]	; (c001ec8 <HAL_RCC_GetSysClockFreq+0xb4>)
 c001e34:	6811      	ldr	r1, [r2, #0]
 c001e36:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c001e38:	bf54      	ite	pl
 c001e3a:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c001e3e:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 c001e40:	4923      	ldr	r1, [pc, #140]	; (c001ed0 <HAL_RCC_GetSysClockFreq+0xbc>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c001e42:	bf54      	ite	pl
 c001e44:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c001e48:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 c001e4c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c001e50:	b303      	cbz	r3, c001e94 <HAL_RCC_GetSysClockFreq+0x80>
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c001e52:	2b0c      	cmp	r3, #12
 c001e54:	d136      	bne.n	c001ec4 <HAL_RCC_GetSysClockFreq+0xb0>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c001e56:	491c      	ldr	r1, [pc, #112]	; (c001ec8 <HAL_RCC_GetSysClockFreq+0xb4>)
 c001e58:	68ca      	ldr	r2, [r1, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c001e5a:	68cb      	ldr	r3, [r1, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c001e5c:	f002 0203 	and.w	r2, r2, #3
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c001e60:	f3c3 1303 	ubfx	r3, r3, #4, #4
    switch (pllsource)
 c001e64:	2a02      	cmp	r2, #2
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c001e66:	f103 0301 	add.w	r3, r3, #1
    switch (pllsource)
 c001e6a:	d022      	beq.n	c001eb2 <HAL_RCC_GetSysClockFreq+0x9e>
 c001e6c:	2a03      	cmp	r2, #3
 c001e6e:	d118      	bne.n	c001ea2 <HAL_RCC_GetSysClockFreq+0x8e>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c001e70:	4816      	ldr	r0, [pc, #88]	; (c001ecc <HAL_RCC_GetSysClockFreq+0xb8>)
 c001e72:	68ca      	ldr	r2, [r1, #12]
 c001e74:	fbb0 f0f3 	udiv	r0, r0, r3
 c001e78:	f3c2 2306 	ubfx	r3, r2, #8, #7
 c001e7c:	fb00 f003 	mul.w	r0, r0, r3
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c001e80:	4b11      	ldr	r3, [pc, #68]	; (c001ec8 <HAL_RCC_GetSysClockFreq+0xb4>)
 c001e82:	68db      	ldr	r3, [r3, #12]
 c001e84:	f3c3 6341 	ubfx	r3, r3, #25, #2
 c001e88:	3301      	adds	r3, #1
 c001e8a:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 c001e8c:	fbb0 f0f3 	udiv	r0, r0, r3
 c001e90:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 c001e92:	4810      	ldr	r0, [pc, #64]	; (c001ed4 <HAL_RCC_GetSysClockFreq+0xc0>)
}
 c001e94:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c001e96:	f002 0203 	and.w	r2, r2, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 c001e9a:	2a01      	cmp	r2, #1
 c001e9c:	d0c9      	beq.n	c001e32 <HAL_RCC_GetSysClockFreq+0x1e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 c001e9e:	2000      	movs	r0, #0
 c001ea0:	e7d9      	b.n	c001e56 <HAL_RCC_GetSysClockFreq+0x42>
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c001ea2:	fbb0 f0f3 	udiv	r0, r0, r3
 c001ea6:	68cb      	ldr	r3, [r1, #12]
 c001ea8:	f3c3 2306 	ubfx	r3, r3, #8, #7
 c001eac:	fb00 f003 	mul.w	r0, r0, r3
        break;
 c001eb0:	e7e6      	b.n	c001e80 <HAL_RCC_GetSysClockFreq+0x6c>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c001eb2:	4808      	ldr	r0, [pc, #32]	; (c001ed4 <HAL_RCC_GetSysClockFreq+0xc0>)
 c001eb4:	68ca      	ldr	r2, [r1, #12]
 c001eb6:	fbb0 f0f3 	udiv	r0, r0, r3
 c001eba:	f3c2 2306 	ubfx	r3, r2, #8, #7
 c001ebe:	fb00 f003 	mul.w	r0, r0, r3
        break;
 c001ec2:	e7dd      	b.n	c001e80 <HAL_RCC_GetSysClockFreq+0x6c>
 c001ec4:	2000      	movs	r0, #0
  return sysclockfreq;
 c001ec6:	4770      	bx	lr
 c001ec8:	50021000 	.word	0x50021000
 c001ecc:	00b71b00 	.word	0x00b71b00
 c001ed0:	0c006998 	.word	0x0c006998
 c001ed4:	00f42400 	.word	0x00f42400

0c001ed8 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 c001ed8:	2800      	cmp	r0, #0
 c001eda:	f000 8306 	beq.w	c0024ea <HAL_RCC_OscConfig+0x612>
{
 c001ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c001ee2:	4aab      	ldr	r2, [pc, #684]	; (c002190 <HAL_RCC_OscConfig+0x2b8>)
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 c001ee4:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c001ee6:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 c001ee8:	68d6      	ldr	r6, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 c001eea:	06df      	lsls	r7, r3, #27
 c001eec:	4604      	mov	r4, r0
{
 c001eee:	b082      	sub	sp, #8
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c001ef0:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 c001ef4:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 c001ef8:	d534      	bpl.n	c001f64 <HAL_RCC_OscConfig+0x8c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c001efa:	2d00      	cmp	r5, #0
 c001efc:	f000 8178 	beq.w	c0021f0 <HAL_RCC_OscConfig+0x318>
 c001f00:	2d0c      	cmp	r5, #12
 c001f02:	f000 8172 	beq.w	c0021ea <HAL_RCC_OscConfig+0x312>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 c001f06:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_MSI_ENABLE();
 c001f08:	4fa1      	ldr	r7, [pc, #644]	; (c002190 <HAL_RCC_OscConfig+0x2b8>)
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 c001f0a:	2b00      	cmp	r3, #0
 c001f0c:	f000 81fb 	beq.w	c002306 <HAL_RCC_OscConfig+0x42e>
        __HAL_RCC_MSI_ENABLE();
 c001f10:	683b      	ldr	r3, [r7, #0]
 c001f12:	f043 0301 	orr.w	r3, r3, #1
 c001f16:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 c001f18:	f7ff f980 	bl	c00121c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c001f1c:	683b      	ldr	r3, [r7, #0]
        tickstart = HAL_GetTick();
 c001f1e:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c001f20:	079a      	lsls	r2, r3, #30
 c001f22:	d40c      	bmi.n	c001f3e <HAL_RCC_OscConfig+0x66>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c001f24:	f7ff f97a 	bl	c00121c <HAL_GetTick>
 c001f28:	eba0 0008 	sub.w	r0, r0, r8
 c001f2c:	2802      	cmp	r0, #2
 c001f2e:	d903      	bls.n	c001f38 <HAL_RCC_OscConfig+0x60>
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c001f30:	683b      	ldr	r3, [r7, #0]
 c001f32:	079b      	lsls	r3, r3, #30
 c001f34:	f140 81fe 	bpl.w	c002334 <HAL_RCC_OscConfig+0x45c>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c001f38:	683b      	ldr	r3, [r7, #0]
 c001f3a:	0798      	lsls	r0, r3, #30
 c001f3c:	d5f2      	bpl.n	c001f24 <HAL_RCC_OscConfig+0x4c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c001f3e:	4b94      	ldr	r3, [pc, #592]	; (c002190 <HAL_RCC_OscConfig+0x2b8>)
 c001f40:	681a      	ldr	r2, [r3, #0]
 c001f42:	f042 0208 	orr.w	r2, r2, #8
 c001f46:	601a      	str	r2, [r3, #0]
 c001f48:	681a      	ldr	r2, [r3, #0]
 c001f4a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 c001f4c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 c001f50:	430a      	orrs	r2, r1
 c001f52:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c001f54:	685a      	ldr	r2, [r3, #4]
 c001f56:	6a21      	ldr	r1, [r4, #32]
 c001f58:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 c001f5c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 c001f60:	605a      	str	r2, [r3, #4]
 c001f62:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 c001f64:	07d8      	lsls	r0, r3, #31
 c001f66:	d52e      	bpl.n	c001fc6 <HAL_RCC_OscConfig+0xee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 c001f68:	2d08      	cmp	r5, #8
 c001f6a:	f000 81c2 	beq.w	c0022f2 <HAL_RCC_OscConfig+0x41a>
 c001f6e:	2d0c      	cmp	r5, #12
 c001f70:	f000 81bc 	beq.w	c0022ec <HAL_RCC_OscConfig+0x414>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 c001f74:	6863      	ldr	r3, [r4, #4]
 c001f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c001f7a:	f000 81df 	beq.w	c00233c <HAL_RCC_OscConfig+0x464>
 c001f7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 c001f82:	f000 8318 	beq.w	c0025b6 <HAL_RCC_OscConfig+0x6de>
 c001f86:	4f82      	ldr	r7, [pc, #520]	; (c002190 <HAL_RCC_OscConfig+0x2b8>)
 c001f88:	683a      	ldr	r2, [r7, #0]
 c001f8a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 c001f8e:	603a      	str	r2, [r7, #0]
 c001f90:	683a      	ldr	r2, [r7, #0]
 c001f92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 c001f96:	603a      	str	r2, [r7, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 c001f98:	2b00      	cmp	r3, #0
 c001f9a:	f040 81d4 	bne.w	c002346 <HAL_RCC_OscConfig+0x46e>
        tickstart = HAL_GetTick();
 c001f9e:	f7ff f93d 	bl	c00121c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c001fa2:	683b      	ldr	r3, [r7, #0]
        tickstart = HAL_GetTick();
 c001fa4:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c001fa6:	0399      	lsls	r1, r3, #14
 c001fa8:	d50c      	bpl.n	c001fc4 <HAL_RCC_OscConfig+0xec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c001faa:	f7ff f937 	bl	c00121c <HAL_GetTick>
 c001fae:	eba0 0008 	sub.w	r0, r0, r8
 c001fb2:	2864      	cmp	r0, #100	; 0x64
 c001fb4:	d903      	bls.n	c001fbe <HAL_RCC_OscConfig+0xe6>
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c001fb6:	683b      	ldr	r3, [r7, #0]
 c001fb8:	039a      	lsls	r2, r3, #14
 c001fba:	f100 81bb 	bmi.w	c002334 <HAL_RCC_OscConfig+0x45c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c001fbe:	683b      	ldr	r3, [r7, #0]
 c001fc0:	039b      	lsls	r3, r3, #14
 c001fc2:	d4f2      	bmi.n	c001faa <HAL_RCC_OscConfig+0xd2>
 c001fc4:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 c001fc6:	079f      	lsls	r7, r3, #30
 c001fc8:	f100 80e6 	bmi.w	c002198 <HAL_RCC_OscConfig+0x2c0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 c001fcc:	071a      	lsls	r2, r3, #28
 c001fce:	d52b      	bpl.n	c002028 <HAL_RCC_OscConfig+0x150>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 c001fd0:	6963      	ldr	r3, [r4, #20]
 c001fd2:	2b00      	cmp	r3, #0
 c001fd4:	f000 816d 	beq.w	c0022b2 <HAL_RCC_OscConfig+0x3da>
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 c001fd8:	69a3      	ldr	r3, [r4, #24]
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c001fda:	4a6d      	ldr	r2, [pc, #436]	; (c002190 <HAL_RCC_OscConfig+0x2b8>)
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 c001fdc:	2b00      	cmp	r3, #0
 c001fde:	f040 820e 	bne.w	c0023fe <HAL_RCC_OscConfig+0x526>
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c001fe2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 c001fe6:	f023 0310 	bic.w	r3, r3, #16
 c001fea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      __HAL_RCC_LSI_ENABLE();
 c001fee:	4d68      	ldr	r5, [pc, #416]	; (c002190 <HAL_RCC_OscConfig+0x2b8>)
 c001ff0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 c001ff4:	f043 0301 	orr.w	r3, r3, #1
 c001ff8:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 c001ffc:	f7ff f90e 	bl	c00121c <HAL_GetTick>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c002000:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 c002004:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c002006:	079f      	lsls	r7, r3, #30
 c002008:	d40d      	bmi.n	c002026 <HAL_RCC_OscConfig+0x14e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c00200a:	f7ff f907 	bl	c00121c <HAL_GetTick>
 c00200e:	1b80      	subs	r0, r0, r6
 c002010:	2807      	cmp	r0, #7
 c002012:	d904      	bls.n	c00201e <HAL_RCC_OscConfig+0x146>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c002014:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 c002018:	0798      	lsls	r0, r3, #30
 c00201a:	f140 818b 	bpl.w	c002334 <HAL_RCC_OscConfig+0x45c>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c00201e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 c002022:	0799      	lsls	r1, r3, #30
 c002024:	d5f1      	bpl.n	c00200a <HAL_RCC_OscConfig+0x132>
 c002026:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 c002028:	075d      	lsls	r5, r3, #29
 c00202a:	d55c      	bpl.n	c0020e6 <HAL_RCC_OscConfig+0x20e>
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 c00202c:	4b58      	ldr	r3, [pc, #352]	; (c002190 <HAL_RCC_OscConfig+0x2b8>)
 c00202e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 c002030:	00d0      	lsls	r0, r2, #3
 c002032:	f140 8121 	bpl.w	c002278 <HAL_RCC_OscConfig+0x3a0>
    FlagStatus       pwrclkchanged = RESET;
 c002036:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c002038:	4e56      	ldr	r6, [pc, #344]	; (c002194 <HAL_RCC_OscConfig+0x2bc>)
 c00203a:	6833      	ldr	r3, [r6, #0]
 c00203c:	05d9      	lsls	r1, r3, #23
 c00203e:	f140 8222 	bpl.w	c002486 <HAL_RCC_OscConfig+0x5ae>
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 c002042:	68a3      	ldr	r3, [r4, #8]
 c002044:	07da      	lsls	r2, r3, #31
 c002046:	f140 8193 	bpl.w	c002370 <HAL_RCC_OscConfig+0x498>
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 c00204a:	075a      	lsls	r2, r3, #29
 c00204c:	f140 824f 	bpl.w	c0024ee <HAL_RCC_OscConfig+0x616>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c002050:	4b4f      	ldr	r3, [pc, #316]	; (c002190 <HAL_RCC_OscConfig+0x2b8>)
 c002052:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 c002056:	f042 0204 	orr.w	r2, r2, #4
 c00205a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c00205e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 c002062:	f042 0201 	orr.w	r2, r2, #1
 c002066:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      tickstart = HAL_GetTick();
 c00206a:	f7ff f8d7 	bl	c00121c <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c00206e:	4f48      	ldr	r7, [pc, #288]	; (c002190 <HAL_RCC_OscConfig+0x2b8>)
      tickstart = HAL_GetTick();
 c002070:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c002072:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c002076:	079b      	lsls	r3, r3, #30
 c002078:	d40f      	bmi.n	c00209a <HAL_RCC_OscConfig+0x1c2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c00207a:	f241 3888 	movw	r8, #5000	; 0x1388
 c00207e:	f7ff f8cd 	bl	c00121c <HAL_GetTick>
 c002082:	1b80      	subs	r0, r0, r6
 c002084:	4540      	cmp	r0, r8
 c002086:	d904      	bls.n	c002092 <HAL_RCC_OscConfig+0x1ba>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c002088:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c00208c:	0799      	lsls	r1, r3, #30
 c00208e:	f140 8151 	bpl.w	c002334 <HAL_RCC_OscConfig+0x45c>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c002092:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c002096:	079a      	lsls	r2, r3, #30
 c002098:	d5f1      	bpl.n	c00207e <HAL_RCC_OscConfig+0x1a6>
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 c00209a:	68a3      	ldr	r3, [r4, #8]
 c00209c:	0618      	lsls	r0, r3, #24
 c00209e:	f140 8233 	bpl.w	c002508 <HAL_RCC_OscConfig+0x630>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c0020a2:	4f3b      	ldr	r7, [pc, #236]	; (c002190 <HAL_RCC_OscConfig+0x2b8>)
 c0020a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c0020a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c0020ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c0020b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c0020b4:	051b      	lsls	r3, r3, #20
 c0020b6:	d40f      	bmi.n	c0020d8 <HAL_RCC_OscConfig+0x200>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0020b8:	f241 3888 	movw	r8, #5000	; 0x1388
 c0020bc:	f7ff f8ae 	bl	c00121c <HAL_GetTick>
 c0020c0:	1b80      	subs	r0, r0, r6
 c0020c2:	4540      	cmp	r0, r8
 c0020c4:	d904      	bls.n	c0020d0 <HAL_RCC_OscConfig+0x1f8>
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c0020c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c0020ca:	0518      	lsls	r0, r3, #20
 c0020cc:	f140 8132 	bpl.w	c002334 <HAL_RCC_OscConfig+0x45c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c0020d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c0020d4:	0519      	lsls	r1, r3, #20
 c0020d6:	d5f1      	bpl.n	c0020bc <HAL_RCC_OscConfig+0x1e4>
    if (pwrclkchanged == SET)
 c0020d8:	b125      	cbz	r5, c0020e4 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_DISABLE();
 c0020da:	4a2d      	ldr	r2, [pc, #180]	; (c002190 <HAL_RCC_OscConfig+0x2b8>)
 c0020dc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 c0020de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c0020e2:	6593      	str	r3, [r2, #88]	; 0x58
 c0020e4:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 c0020e6:	069d      	lsls	r5, r3, #26
 c0020e8:	d51f      	bpl.n	c00212a <HAL_RCC_OscConfig+0x252>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 c0020ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      __HAL_RCC_HSI48_ENABLE();
 c0020ec:	4d28      	ldr	r5, [pc, #160]	; (c002190 <HAL_RCC_OscConfig+0x2b8>)
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 c0020ee:	2b00      	cmp	r3, #0
 c0020f0:	f000 81ac 	beq.w	c00244c <HAL_RCC_OscConfig+0x574>
      __HAL_RCC_HSI48_ENABLE();
 c0020f4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 c0020f8:	f043 0301 	orr.w	r3, r3, #1
 c0020fc:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 c002100:	f7ff f88c 	bl	c00121c <HAL_GetTick>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c002104:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 c002108:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c00210a:	0798      	lsls	r0, r3, #30
 c00210c:	d40d      	bmi.n	c00212a <HAL_RCC_OscConfig+0x252>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c00210e:	f7ff f885 	bl	c00121c <HAL_GetTick>
 c002112:	1b80      	subs	r0, r0, r6
 c002114:	2802      	cmp	r0, #2
 c002116:	d904      	bls.n	c002122 <HAL_RCC_OscConfig+0x24a>
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c002118:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 c00211c:	0799      	lsls	r1, r3, #30
 c00211e:	f140 8109 	bpl.w	c002334 <HAL_RCC_OscConfig+0x45c>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c002122:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 c002126:	079a      	lsls	r2, r3, #30
 c002128:	d5f1      	bpl.n	c00210e <HAL_RCC_OscConfig+0x236>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 c00212a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 c00212c:	b358      	cbz	r0, c002186 <HAL_RCC_OscConfig+0x2ae>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c00212e:	4d18      	ldr	r5, [pc, #96]	; (c002190 <HAL_RCC_OscConfig+0x2b8>)
 c002130:	68ab      	ldr	r3, [r5, #8]
 c002132:	f003 030c 	and.w	r3, r3, #12
 c002136:	2b0c      	cmp	r3, #12
 c002138:	f000 8203 	beq.w	c002542 <HAL_RCC_OscConfig+0x66a>
        __HAL_RCC_PLL_DISABLE();
 c00213c:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 c00213e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 c002140:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c002144:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 c002146:	f000 8240 	beq.w	c0025ca <HAL_RCC_OscConfig+0x6f2>
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 c00214a:	682b      	ldr	r3, [r5, #0]
 c00214c:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
 c002150:	f000 81d5 	beq.w	c0024fe <HAL_RCC_OscConfig+0x626>
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 c002154:	4c0e      	ldr	r4, [pc, #56]	; (c002190 <HAL_RCC_OscConfig+0x2b8>)
 c002156:	68e3      	ldr	r3, [r4, #12]
 c002158:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 c00215c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c002160:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 c002162:	f7ff f85b 	bl	c00121c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c002166:	6823      	ldr	r3, [r4, #0]
        tickstart = HAL_GetTick();
 c002168:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c00216a:	0199      	lsls	r1, r3, #6
 c00216c:	d50b      	bpl.n	c002186 <HAL_RCC_OscConfig+0x2ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c00216e:	f7ff f855 	bl	c00121c <HAL_GetTick>
 c002172:	1b40      	subs	r0, r0, r5
 c002174:	2802      	cmp	r0, #2
 c002176:	d903      	bls.n	c002180 <HAL_RCC_OscConfig+0x2a8>
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c002178:	6823      	ldr	r3, [r4, #0]
 c00217a:	019a      	lsls	r2, r3, #6
 c00217c:	f100 80da 	bmi.w	c002334 <HAL_RCC_OscConfig+0x45c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c002180:	6823      	ldr	r3, [r4, #0]
 c002182:	019b      	lsls	r3, r3, #6
 c002184:	d4f3      	bmi.n	c00216e <HAL_RCC_OscConfig+0x296>
  return HAL_OK;
 c002186:	2000      	movs	r0, #0
}
 c002188:	b002      	add	sp, #8
 c00218a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c00218e:	bf00      	nop
 c002190:	50021000 	.word	0x50021000
 c002194:	50007000 	.word	0x50007000
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 c002198:	2d04      	cmp	r5, #4
 c00219a:	d07a      	beq.n	c002292 <HAL_RCC_OscConfig+0x3ba>
 c00219c:	2d0c      	cmp	r5, #12
 c00219e:	d076      	beq.n	c00228e <HAL_RCC_OscConfig+0x3b6>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 c0021a0:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 c0021a2:	4da6      	ldr	r5, [pc, #664]	; (c00243c <HAL_RCC_OscConfig+0x564>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 c0021a4:	2b00      	cmp	r3, #0
 c0021a6:	f000 8131 	beq.w	c00240c <HAL_RCC_OscConfig+0x534>
        __HAL_RCC_HSI_ENABLE();
 c0021aa:	682b      	ldr	r3, [r5, #0]
 c0021ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c0021b0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 c0021b2:	f7ff f833 	bl	c00121c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c0021b6:	682b      	ldr	r3, [r5, #0]
        tickstart = HAL_GetTick();
 c0021b8:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c0021ba:	0559      	lsls	r1, r3, #21
 c0021bc:	d40b      	bmi.n	c0021d6 <HAL_RCC_OscConfig+0x2fe>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c0021be:	f7ff f82d 	bl	c00121c <HAL_GetTick>
 c0021c2:	1b80      	subs	r0, r0, r6
 c0021c4:	2802      	cmp	r0, #2
 c0021c6:	d903      	bls.n	c0021d0 <HAL_RCC_OscConfig+0x2f8>
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c0021c8:	682b      	ldr	r3, [r5, #0]
 c0021ca:	055a      	lsls	r2, r3, #21
 c0021cc:	f140 80b2 	bpl.w	c002334 <HAL_RCC_OscConfig+0x45c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c0021d0:	682b      	ldr	r3, [r5, #0]
 c0021d2:	055b      	lsls	r3, r3, #21
 c0021d4:	d5f3      	bpl.n	c0021be <HAL_RCC_OscConfig+0x2e6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c0021d6:	4a99      	ldr	r2, [pc, #612]	; (c00243c <HAL_RCC_OscConfig+0x564>)
 c0021d8:	6921      	ldr	r1, [r4, #16]
 c0021da:	6853      	ldr	r3, [r2, #4]
 c0021dc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 c0021e0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 c0021e4:	6053      	str	r3, [r2, #4]
 c0021e6:	6823      	ldr	r3, [r4, #0]
 c0021e8:	e6f0      	b.n	c001fcc <HAL_RCC_OscConfig+0xf4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 c0021ea:	2e01      	cmp	r6, #1
 c0021ec:	f47f ae8b 	bne.w	c001f06 <HAL_RCC_OscConfig+0x2e>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c0021f0:	4b92      	ldr	r3, [pc, #584]	; (c00243c <HAL_RCC_OscConfig+0x564>)
 c0021f2:	681b      	ldr	r3, [r3, #0]
 c0021f4:	0798      	lsls	r0, r3, #30
 c0021f6:	d438      	bmi.n	c00226a <HAL_RCC_OscConfig+0x392>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 c0021f8:	4b90      	ldr	r3, [pc, #576]	; (c00243c <HAL_RCC_OscConfig+0x564>)
 c0021fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 c0021fc:	681a      	ldr	r2, [r3, #0]
 c0021fe:	0711      	lsls	r1, r2, #28
 c002200:	bf56      	itet	pl
 c002202:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 c002206:	681b      	ldrmi	r3, [r3, #0]
 c002208:	091b      	lsrpl	r3, r3, #4
 c00220a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c00220e:	4298      	cmp	r0, r3
 c002210:	f200 8153 	bhi.w	c0024ba <HAL_RCC_OscConfig+0x5e2>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c002214:	4b89      	ldr	r3, [pc, #548]	; (c00243c <HAL_RCC_OscConfig+0x564>)
 c002216:	681a      	ldr	r2, [r3, #0]
 c002218:	f042 0208 	orr.w	r2, r2, #8
 c00221c:	601a      	str	r2, [r3, #0]
 c00221e:	681a      	ldr	r2, [r3, #0]
 c002220:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 c002224:	4302      	orrs	r2, r0
 c002226:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c002228:	685a      	ldr	r2, [r3, #4]
 c00222a:	6a21      	ldr	r1, [r4, #32]
 c00222c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 c002230:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 c002234:	605a      	str	r2, [r3, #4]
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c002236:	2d00      	cmp	r5, #0
 c002238:	f000 81b7 	beq.w	c0025aa <HAL_RCC_OscConfig+0x6d2>
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c00223c:	f7ff fdea 	bl	c001e14 <HAL_RCC_GetSysClockFreq>
 c002240:	4b7e      	ldr	r3, [pc, #504]	; (c00243c <HAL_RCC_OscConfig+0x564>)
 c002242:	4a7f      	ldr	r2, [pc, #508]	; (c002440 <HAL_RCC_OscConfig+0x568>)
 c002244:	689b      	ldr	r3, [r3, #8]
        status = HAL_InitTick(uwTickPrio);
 c002246:	497f      	ldr	r1, [pc, #508]	; (c002444 <HAL_RCC_OscConfig+0x56c>)
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c002248:	f3c3 1303 	ubfx	r3, r3, #4, #4
 c00224c:	5cd3      	ldrb	r3, [r2, r3]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c00224e:	4a7e      	ldr	r2, [pc, #504]	; (c002448 <HAL_RCC_OscConfig+0x570>)
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c002250:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 c002254:	6808      	ldr	r0, [r1, #0]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c002256:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 c002258:	f7fe ff9c 	bl	c001194 <HAL_InitTick>
        if (status != HAL_OK)
 c00225c:	2800      	cmp	r0, #0
 c00225e:	d193      	bne.n	c002188 <HAL_RCC_OscConfig+0x2b0>
 c002260:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 c002262:	07d8      	lsls	r0, r3, #31
 c002264:	f57f aeaf 	bpl.w	c001fc6 <HAL_RCC_OscConfig+0xee>
 c002268:	e67e      	b.n	c001f68 <HAL_RCC_OscConfig+0x90>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c00226a:	69e3      	ldr	r3, [r4, #28]
 c00226c:	2b00      	cmp	r3, #0
 c00226e:	d1c3      	bne.n	c0021f8 <HAL_RCC_OscConfig+0x320>
        return HAL_ERROR;
 c002270:	2001      	movs	r0, #1
}
 c002272:	b002      	add	sp, #8
 c002274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 c002278:	6d9a      	ldr	r2, [r3, #88]	; 0x58
      pwrclkchanged = SET;
 c00227a:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 c00227c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 c002280:	659a      	str	r2, [r3, #88]	; 0x58
 c002282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c002288:	9301      	str	r3, [sp, #4]
 c00228a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 c00228c:	e6d4      	b.n	c002038 <HAL_RCC_OscConfig+0x160>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 c00228e:	2e02      	cmp	r6, #2
 c002290:	d186      	bne.n	c0021a0 <HAL_RCC_OscConfig+0x2c8>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c002292:	4a6a      	ldr	r2, [pc, #424]	; (c00243c <HAL_RCC_OscConfig+0x564>)
 c002294:	6812      	ldr	r2, [r2, #0]
 c002296:	0550      	lsls	r0, r2, #21
 c002298:	d502      	bpl.n	c0022a0 <HAL_RCC_OscConfig+0x3c8>
 c00229a:	68e2      	ldr	r2, [r4, #12]
 c00229c:	2a00      	cmp	r2, #0
 c00229e:	d0e7      	beq.n	c002270 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c0022a0:	4966      	ldr	r1, [pc, #408]	; (c00243c <HAL_RCC_OscConfig+0x564>)
 c0022a2:	6920      	ldr	r0, [r4, #16]
 c0022a4:	684a      	ldr	r2, [r1, #4]
 c0022a6:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 c0022aa:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 c0022ae:	604a      	str	r2, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c0022b0:	e68c      	b.n	c001fcc <HAL_RCC_OscConfig+0xf4>
      __HAL_RCC_LSI_DISABLE();
 c0022b2:	4d62      	ldr	r5, [pc, #392]	; (c00243c <HAL_RCC_OscConfig+0x564>)
 c0022b4:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 c0022b8:	f023 0301 	bic.w	r3, r3, #1
 c0022bc:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 c0022c0:	f7fe ffac 	bl	c00121c <HAL_GetTick>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c0022c4:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 c0022c8:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c0022ca:	079a      	lsls	r2, r3, #30
 c0022cc:	f57f aeab 	bpl.w	c002026 <HAL_RCC_OscConfig+0x14e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c0022d0:	f7fe ffa4 	bl	c00121c <HAL_GetTick>
 c0022d4:	1b80      	subs	r0, r0, r6
 c0022d6:	2807      	cmp	r0, #7
 c0022d8:	d903      	bls.n	c0022e2 <HAL_RCC_OscConfig+0x40a>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c0022da:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 c0022de:	079b      	lsls	r3, r3, #30
 c0022e0:	d428      	bmi.n	c002334 <HAL_RCC_OscConfig+0x45c>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c0022e2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 c0022e6:	079f      	lsls	r7, r3, #30
 c0022e8:	d4f2      	bmi.n	c0022d0 <HAL_RCC_OscConfig+0x3f8>
 c0022ea:	e69c      	b.n	c002026 <HAL_RCC_OscConfig+0x14e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 c0022ec:	2e03      	cmp	r6, #3
 c0022ee:	f47f ae41 	bne.w	c001f74 <HAL_RCC_OscConfig+0x9c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c0022f2:	4a52      	ldr	r2, [pc, #328]	; (c00243c <HAL_RCC_OscConfig+0x564>)
 c0022f4:	6812      	ldr	r2, [r2, #0]
 c0022f6:	0391      	lsls	r1, r2, #14
 c0022f8:	f57f ae65 	bpl.w	c001fc6 <HAL_RCC_OscConfig+0xee>
 c0022fc:	6862      	ldr	r2, [r4, #4]
 c0022fe:	2a00      	cmp	r2, #0
 c002300:	f47f ae61 	bne.w	c001fc6 <HAL_RCC_OscConfig+0xee>
 c002304:	e7b4      	b.n	c002270 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_MSI_DISABLE();
 c002306:	683b      	ldr	r3, [r7, #0]
 c002308:	f023 0301 	bic.w	r3, r3, #1
 c00230c:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 c00230e:	f7fe ff85 	bl	c00121c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c002312:	683b      	ldr	r3, [r7, #0]
        tickstart = HAL_GetTick();
 c002314:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c002316:	0799      	lsls	r1, r3, #30
 c002318:	d403      	bmi.n	c002322 <HAL_RCC_OscConfig+0x44a>
 c00231a:	e7a1      	b.n	c002260 <HAL_RCC_OscConfig+0x388>
 c00231c:	683b      	ldr	r3, [r7, #0]
 c00231e:	079b      	lsls	r3, r3, #30
 c002320:	d59e      	bpl.n	c002260 <HAL_RCC_OscConfig+0x388>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c002322:	f7fe ff7b 	bl	c00121c <HAL_GetTick>
 c002326:	eba0 0008 	sub.w	r0, r0, r8
 c00232a:	2802      	cmp	r0, #2
 c00232c:	d9f6      	bls.n	c00231c <HAL_RCC_OscConfig+0x444>
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c00232e:	683b      	ldr	r3, [r7, #0]
 c002330:	079a      	lsls	r2, r3, #30
 c002332:	d5f3      	bpl.n	c00231c <HAL_RCC_OscConfig+0x444>
              return HAL_TIMEOUT;
 c002334:	2003      	movs	r0, #3
}
 c002336:	b002      	add	sp, #8
 c002338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 c00233c:	4a3f      	ldr	r2, [pc, #252]	; (c00243c <HAL_RCC_OscConfig+0x564>)
 c00233e:	6813      	ldr	r3, [r2, #0]
 c002340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c002344:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 c002346:	f7fe ff69 	bl	c00121c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c00234a:	4f3c      	ldr	r7, [pc, #240]	; (c00243c <HAL_RCC_OscConfig+0x564>)
        tickstart = HAL_GetTick();
 c00234c:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c00234e:	683b      	ldr	r3, [r7, #0]
 c002350:	039a      	lsls	r2, r3, #14
 c002352:	f53f ae37 	bmi.w	c001fc4 <HAL_RCC_OscConfig+0xec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c002356:	f7fe ff61 	bl	c00121c <HAL_GetTick>
 c00235a:	eba0 0008 	sub.w	r0, r0, r8
 c00235e:	2864      	cmp	r0, #100	; 0x64
 c002360:	d902      	bls.n	c002368 <HAL_RCC_OscConfig+0x490>
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c002362:	683b      	ldr	r3, [r7, #0]
 c002364:	039b      	lsls	r3, r3, #14
 c002366:	d5e5      	bpl.n	c002334 <HAL_RCC_OscConfig+0x45c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c002368:	683b      	ldr	r3, [r7, #0]
 c00236a:	0398      	lsls	r0, r3, #14
 c00236c:	d5f3      	bpl.n	c002356 <HAL_RCC_OscConfig+0x47e>
 c00236e:	e629      	b.n	c001fc4 <HAL_RCC_OscConfig+0xec>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c002370:	4e32      	ldr	r6, [pc, #200]	; (c00243c <HAL_RCC_OscConfig+0x564>)
 c002372:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 c002376:	f022 0201 	bic.w	r2, r2, #1
 c00237a:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c00237e:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 c002382:	f022 0204 	bic.w	r2, r2, #4
 c002386:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 c00238a:	2b00      	cmp	r3, #0
 c00238c:	f47f ae6d 	bne.w	c00206a <HAL_RCC_OscConfig+0x192>
      tickstart = HAL_GetTick();
 c002390:	f7fe ff44 	bl	c00121c <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c002394:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      tickstart = HAL_GetTick();
 c002398:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c00239a:	0799      	lsls	r1, r3, #30
 c00239c:	d50e      	bpl.n	c0023bc <HAL_RCC_OscConfig+0x4e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c00239e:	f241 3888 	movw	r8, #5000	; 0x1388
 c0023a2:	f7fe ff3b 	bl	c00121c <HAL_GetTick>
 c0023a6:	1bc0      	subs	r0, r0, r7
 c0023a8:	4540      	cmp	r0, r8
 c0023aa:	d903      	bls.n	c0023b4 <HAL_RCC_OscConfig+0x4dc>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c0023ac:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 c0023b0:	079b      	lsls	r3, r3, #30
 c0023b2:	d4bf      	bmi.n	c002334 <HAL_RCC_OscConfig+0x45c>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c0023b4:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 c0023b8:	0798      	lsls	r0, r3, #30
 c0023ba:	d4f2      	bmi.n	c0023a2 <HAL_RCC_OscConfig+0x4ca>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 c0023bc:	4e1f      	ldr	r6, [pc, #124]	; (c00243c <HAL_RCC_OscConfig+0x564>)
 c0023be:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 c0023c2:	061a      	lsls	r2, r3, #24
 c0023c4:	f57f ae88 	bpl.w	c0020d8 <HAL_RCC_OscConfig+0x200>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c0023c8:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 c0023cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c0023d0:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c0023d4:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 c0023d8:	0519      	lsls	r1, r3, #20
 c0023da:	f57f ae7d 	bpl.w	c0020d8 <HAL_RCC_OscConfig+0x200>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0023de:	f241 3888 	movw	r8, #5000	; 0x1388
 c0023e2:	f7fe ff1b 	bl	c00121c <HAL_GetTick>
 c0023e6:	1bc0      	subs	r0, r0, r7
 c0023e8:	4540      	cmp	r0, r8
 c0023ea:	d903      	bls.n	c0023f4 <HAL_RCC_OscConfig+0x51c>
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c0023ec:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 c0023f0:	051a      	lsls	r2, r3, #20
 c0023f2:	d49f      	bmi.n	c002334 <HAL_RCC_OscConfig+0x45c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c0023f4:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 c0023f8:	051b      	lsls	r3, r3, #20
 c0023fa:	d4f2      	bmi.n	c0023e2 <HAL_RCC_OscConfig+0x50a>
 c0023fc:	e66c      	b.n	c0020d8 <HAL_RCC_OscConfig+0x200>
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c0023fe:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 c002402:	f043 0310 	orr.w	r3, r3, #16
 c002406:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 c00240a:	e5f0      	b.n	c001fee <HAL_RCC_OscConfig+0x116>
        __HAL_RCC_HSI_DISABLE();
 c00240c:	682b      	ldr	r3, [r5, #0]
 c00240e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 c002412:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 c002414:	f7fe ff02 	bl	c00121c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c002418:	682b      	ldr	r3, [r5, #0]
        tickstart = HAL_GetTick();
 c00241a:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c00241c:	055f      	lsls	r7, r3, #21
 c00241e:	d50a      	bpl.n	c002436 <HAL_RCC_OscConfig+0x55e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c002420:	f7fe fefc 	bl	c00121c <HAL_GetTick>
 c002424:	1b80      	subs	r0, r0, r6
 c002426:	2802      	cmp	r0, #2
 c002428:	d902      	bls.n	c002430 <HAL_RCC_OscConfig+0x558>
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c00242a:	682b      	ldr	r3, [r5, #0]
 c00242c:	0558      	lsls	r0, r3, #21
 c00242e:	d481      	bmi.n	c002334 <HAL_RCC_OscConfig+0x45c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c002430:	682b      	ldr	r3, [r5, #0]
 c002432:	0559      	lsls	r1, r3, #21
 c002434:	d4f4      	bmi.n	c002420 <HAL_RCC_OscConfig+0x548>
 c002436:	6823      	ldr	r3, [r4, #0]
 c002438:	e5c8      	b.n	c001fcc <HAL_RCC_OscConfig+0xf4>
 c00243a:	bf00      	nop
 c00243c:	50021000 	.word	0x50021000
 c002440:	0c006980 	.word	0x0c006980
 c002444:	3000000c 	.word	0x3000000c
 c002448:	30000004 	.word	0x30000004
      __HAL_RCC_HSI48_DISABLE();
 c00244c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 c002450:	f023 0301 	bic.w	r3, r3, #1
 c002454:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 c002458:	f7fe fee0 	bl	c00121c <HAL_GetTick>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c00245c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 c002460:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c002462:	079b      	lsls	r3, r3, #30
 c002464:	f57f ae61 	bpl.w	c00212a <HAL_RCC_OscConfig+0x252>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c002468:	f7fe fed8 	bl	c00121c <HAL_GetTick>
 c00246c:	1b80      	subs	r0, r0, r6
 c00246e:	2802      	cmp	r0, #2
 c002470:	d904      	bls.n	c00247c <HAL_RCC_OscConfig+0x5a4>
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c002472:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 c002476:	079f      	lsls	r7, r3, #30
 c002478:	f53f af5c 	bmi.w	c002334 <HAL_RCC_OscConfig+0x45c>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c00247c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 c002480:	0798      	lsls	r0, r3, #30
 c002482:	d4f1      	bmi.n	c002468 <HAL_RCC_OscConfig+0x590>
 c002484:	e651      	b.n	c00212a <HAL_RCC_OscConfig+0x252>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c002486:	6833      	ldr	r3, [r6, #0]
 c002488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c00248c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 c00248e:	f7fe fec5 	bl	c00121c <HAL_GetTick>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c002492:	6833      	ldr	r3, [r6, #0]
      tickstart = HAL_GetTick();
 c002494:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c002496:	05db      	lsls	r3, r3, #23
 c002498:	f53f add3 	bmi.w	c002042 <HAL_RCC_OscConfig+0x16a>
 c00249c:	e003      	b.n	c0024a6 <HAL_RCC_OscConfig+0x5ce>
 c00249e:	6833      	ldr	r3, [r6, #0]
 c0024a0:	05d9      	lsls	r1, r3, #23
 c0024a2:	f53f adce 	bmi.w	c002042 <HAL_RCC_OscConfig+0x16a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c0024a6:	f7fe feb9 	bl	c00121c <HAL_GetTick>
 c0024aa:	1bc0      	subs	r0, r0, r7
 c0024ac:	2802      	cmp	r0, #2
 c0024ae:	d9f6      	bls.n	c00249e <HAL_RCC_OscConfig+0x5c6>
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c0024b0:	6833      	ldr	r3, [r6, #0]
 c0024b2:	05d8      	lsls	r0, r3, #23
 c0024b4:	f57f af3e 	bpl.w	c002334 <HAL_RCC_OscConfig+0x45c>
 c0024b8:	e7f1      	b.n	c00249e <HAL_RCC_OscConfig+0x5c6>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c0024ba:	f7ff fc67 	bl	c001d8c <RCC_SetFlashLatencyFromMSIRange>
 c0024be:	2800      	cmp	r0, #0
 c0024c0:	f47f aed6 	bne.w	c002270 <HAL_RCC_OscConfig+0x398>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c0024c4:	4b65      	ldr	r3, [pc, #404]	; (c00265c <HAL_RCC_OscConfig+0x784>)
 c0024c6:	681a      	ldr	r2, [r3, #0]
 c0024c8:	f042 0208 	orr.w	r2, r2, #8
 c0024cc:	601a      	str	r2, [r3, #0]
 c0024ce:	681a      	ldr	r2, [r3, #0]
 c0024d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 c0024d2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 c0024d6:	430a      	orrs	r2, r1
 c0024d8:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c0024da:	685a      	ldr	r2, [r3, #4]
 c0024dc:	6a21      	ldr	r1, [r4, #32]
 c0024de:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 c0024e2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 c0024e6:	605a      	str	r2, [r3, #4]
 c0024e8:	e6a8      	b.n	c00223c <HAL_RCC_OscConfig+0x364>
    return HAL_ERROR;
 c0024ea:	2001      	movs	r0, #1
}
 c0024ec:	4770      	bx	lr
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c0024ee:	4a5b      	ldr	r2, [pc, #364]	; (c00265c <HAL_RCC_OscConfig+0x784>)
 c0024f0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 c0024f4:	f043 0301 	orr.w	r3, r3, #1
 c0024f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c0024fc:	e5b5      	b.n	c00206a <HAL_RCC_OscConfig+0x192>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 c0024fe:	68eb      	ldr	r3, [r5, #12]
 c002500:	f023 0303 	bic.w	r3, r3, #3
 c002504:	60eb      	str	r3, [r5, #12]
 c002506:	e625      	b.n	c002154 <HAL_RCC_OscConfig+0x27c>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c002508:	4f54      	ldr	r7, [pc, #336]	; (c00265c <HAL_RCC_OscConfig+0x784>)
 c00250a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c00250e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c002512:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c002516:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c00251a:	051a      	lsls	r2, r3, #20
 c00251c:	f57f addc 	bpl.w	c0020d8 <HAL_RCC_OscConfig+0x200>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c002520:	f241 3888 	movw	r8, #5000	; 0x1388
 c002524:	f7fe fe7a 	bl	c00121c <HAL_GetTick>
 c002528:	1b80      	subs	r0, r0, r6
 c00252a:	4540      	cmp	r0, r8
 c00252c:	d904      	bls.n	c002538 <HAL_RCC_OscConfig+0x660>
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c00252e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c002532:	051b      	lsls	r3, r3, #20
 c002534:	f53f aefe 	bmi.w	c002334 <HAL_RCC_OscConfig+0x45c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c002538:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c00253c:	0518      	lsls	r0, r3, #20
 c00253e:	d4f1      	bmi.n	c002524 <HAL_RCC_OscConfig+0x64c>
 c002540:	e5ca      	b.n	c0020d8 <HAL_RCC_OscConfig+0x200>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 c002542:	2801      	cmp	r0, #1
 c002544:	f43f ae20 	beq.w	c002188 <HAL_RCC_OscConfig+0x2b0>
        pll_config = RCC->PLLCFGR;
 c002548:	68eb      	ldr	r3, [r5, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c00254a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 c00254c:	f003 0103 	and.w	r1, r3, #3
 c002550:	4291      	cmp	r1, r2
 c002552:	f47f ae8d 	bne.w	c002270 <HAL_RCC_OscConfig+0x398>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c002556:	6b61      	ldr	r1, [r4, #52]	; 0x34
 c002558:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 c00255c:	3901      	subs	r1, #1
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c00255e:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 c002562:	f47f ae85 	bne.w	c002270 <HAL_RCC_OscConfig+0x398>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c002566:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 c002568:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c00256c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 c002570:	f47f ae7e 	bne.w	c002270 <HAL_RCC_OscConfig+0x398>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c002574:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 c002576:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c00257a:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 c00257e:	f47f ae77 	bne.w	c002270 <HAL_RCC_OscConfig+0x398>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c002582:	6c22      	ldr	r2, [r4, #64]	; 0x40
 c002584:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 c002588:	0852      	lsrs	r2, r2, #1
 c00258a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c00258c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 c002590:	f47f ae6e 	bne.w	c002270 <HAL_RCC_OscConfig+0x398>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 c002594:	6c62      	ldr	r2, [r4, #68]	; 0x44
 c002596:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 c00259a:	0852      	lsrs	r2, r2, #1
 c00259c:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c00259e:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 c0025a2:	bf14      	ite	ne
 c0025a4:	2001      	movne	r0, #1
 c0025a6:	2000      	moveq	r0, #0
 c0025a8:	e5ee      	b.n	c002188 <HAL_RCC_OscConfig+0x2b0>
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c0025aa:	f7ff fbef 	bl	c001d8c <RCC_SetFlashLatencyFromMSIRange>
 c0025ae:	2800      	cmp	r0, #0
 c0025b0:	f43f ae44 	beq.w	c00223c <HAL_RCC_OscConfig+0x364>
 c0025b4:	e65c      	b.n	c002270 <HAL_RCC_OscConfig+0x398>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 c0025b6:	4b29      	ldr	r3, [pc, #164]	; (c00265c <HAL_RCC_OscConfig+0x784>)
 c0025b8:	681a      	ldr	r2, [r3, #0]
 c0025ba:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 c0025be:	601a      	str	r2, [r3, #0]
 c0025c0:	681a      	ldr	r2, [r3, #0]
 c0025c2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 c0025c6:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 c0025c8:	e6bd      	b.n	c002346 <HAL_RCC_OscConfig+0x46e>
        tickstart = HAL_GetTick();
 c0025ca:	f7fe fe27 	bl	c00121c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c0025ce:	682b      	ldr	r3, [r5, #0]
        tickstart = HAL_GetTick();
 c0025d0:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c0025d2:	0199      	lsls	r1, r3, #6
 c0025d4:	d50b      	bpl.n	c0025ee <HAL_RCC_OscConfig+0x716>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c0025d6:	f7fe fe21 	bl	c00121c <HAL_GetTick>
 c0025da:	1b80      	subs	r0, r0, r6
 c0025dc:	2802      	cmp	r0, #2
 c0025de:	d903      	bls.n	c0025e8 <HAL_RCC_OscConfig+0x710>
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c0025e0:	682b      	ldr	r3, [r5, #0]
 c0025e2:	019b      	lsls	r3, r3, #6
 c0025e4:	f53f aea6 	bmi.w	c002334 <HAL_RCC_OscConfig+0x45c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c0025e8:	682b      	ldr	r3, [r5, #0]
 c0025ea:	019f      	lsls	r7, r3, #6
 c0025ec:	d4f3      	bmi.n	c0025d6 <HAL_RCC_OscConfig+0x6fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 c0025ee:	4d1b      	ldr	r5, [pc, #108]	; (c00265c <HAL_RCC_OscConfig+0x784>)
 c0025f0:	4b1b      	ldr	r3, [pc, #108]	; (c002660 <HAL_RCC_OscConfig+0x788>)
 c0025f2:	68ea      	ldr	r2, [r5, #12]
 c0025f4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 c0025f6:	4013      	ands	r3, r2
 c0025f8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 c0025fa:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 c0025fc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 c0025fe:	430b      	orrs	r3, r1
 c002600:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 c002604:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
 c002608:	e9d4 1210 	ldrd	r1, r2, [r4, #64]	; 0x40
 c00260c:	3801      	subs	r0, #1
 c00260e:	0849      	lsrs	r1, r1, #1
 c002610:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 c002614:	3901      	subs	r1, #1
 c002616:	0852      	lsrs	r2, r2, #1
 c002618:	3a01      	subs	r2, #1
 c00261a:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 c00261e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 c002622:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 c002624:	682b      	ldr	r3, [r5, #0]
 c002626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c00262a:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 c00262c:	68eb      	ldr	r3, [r5, #12]
 c00262e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c002632:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 c002634:	f7fe fdf2 	bl	c00121c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c002638:	682b      	ldr	r3, [r5, #0]
        tickstart = HAL_GetTick();
 c00263a:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c00263c:	019a      	lsls	r2, r3, #6
 c00263e:	f53f ada2 	bmi.w	c002186 <HAL_RCC_OscConfig+0x2ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c002642:	f7fe fdeb 	bl	c00121c <HAL_GetTick>
 c002646:	1b80      	subs	r0, r0, r6
 c002648:	2802      	cmp	r0, #2
 c00264a:	d903      	bls.n	c002654 <HAL_RCC_OscConfig+0x77c>
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c00264c:	682b      	ldr	r3, [r5, #0]
 c00264e:	019c      	lsls	r4, r3, #6
 c002650:	f57f ae70 	bpl.w	c002334 <HAL_RCC_OscConfig+0x45c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c002654:	682b      	ldr	r3, [r5, #0]
 c002656:	0198      	lsls	r0, r3, #6
 c002658:	d5f3      	bpl.n	c002642 <HAL_RCC_OscConfig+0x76a>
 c00265a:	e594      	b.n	c002186 <HAL_RCC_OscConfig+0x2ae>
 c00265c:	50021000 	.word	0x50021000
 c002660:	019f800c 	.word	0x019f800c

0c002664 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 c002664:	2800      	cmp	r0, #0
 c002666:	f000 80b2 	beq.w	c0027ce <HAL_RCC_ClockConfig+0x16a>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 c00266a:	4a93      	ldr	r2, [pc, #588]	; (c0028b8 <HAL_RCC_ClockConfig+0x254>)
{
 c00266c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 c002670:	6813      	ldr	r3, [r2, #0]
 c002672:	4681      	mov	r9, r0
 c002674:	f003 030f 	and.w	r3, r3, #15
 c002678:	428b      	cmp	r3, r1
 c00267a:	460c      	mov	r4, r1
 c00267c:	d20c      	bcs.n	c002698 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 c00267e:	6813      	ldr	r3, [r2, #0]
 c002680:	f023 030f 	bic.w	r3, r3, #15
 c002684:	430b      	orrs	r3, r1
 c002686:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c002688:	6813      	ldr	r3, [r2, #0]
 c00268a:	f003 030f 	and.w	r3, r3, #15
 c00268e:	428b      	cmp	r3, r1
 c002690:	d002      	beq.n	c002698 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 c002692:	2001      	movs	r0, #1
}
 c002694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 c002698:	f8d9 3000 	ldr.w	r3, [r9]
 c00269c:	07de      	lsls	r6, r3, #31
 c00269e:	d544      	bpl.n	c00272a <HAL_RCC_ClockConfig+0xc6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c0026a0:	f8d9 2004 	ldr.w	r2, [r9, #4]
 c0026a4:	2a03      	cmp	r2, #3
 c0026a6:	f000 8094 	beq.w	c0027d2 <HAL_RCC_ClockConfig+0x16e>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c0026aa:	4b84      	ldr	r3, [pc, #528]	; (c0028bc <HAL_RCC_ClockConfig+0x258>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c0026ac:	2a02      	cmp	r2, #2
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c0026ae:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c0026b0:	d07d      	beq.n	c0027ae <HAL_RCC_ClockConfig+0x14a>
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 c0026b2:	2a00      	cmp	r2, #0
 c0026b4:	f040 80d7 	bne.w	c002866 <HAL_RCC_ClockConfig+0x202>
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c0026b8:	079d      	lsls	r5, r3, #30
 c0026ba:	d5ea      	bpl.n	c002692 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 c0026bc:	f7ff fbaa 	bl	c001e14 <HAL_RCC_GetSysClockFreq>
      if (pllfreq > 80000000U)
 c0026c0:	4b7f      	ldr	r3, [pc, #508]	; (c0028c0 <HAL_RCC_ClockConfig+0x25c>)
 c0026c2:	4298      	cmp	r0, r3
 c0026c4:	f200 80c3 	bhi.w	c00284e <HAL_RCC_ClockConfig+0x1ea>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 c0026c8:	f04f 0800 	mov.w	r8, #0
 c0026cc:	f8d9 2004 	ldr.w	r2, [r9, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 c0026d0:	4d7a      	ldr	r5, [pc, #488]	; (c0028bc <HAL_RCC_ClockConfig+0x258>)
 c0026d2:	68ab      	ldr	r3, [r5, #8]
 c0026d4:	f023 0303 	bic.w	r3, r3, #3
 c0026d8:	431a      	orrs	r2, r3
 c0026da:	60aa      	str	r2, [r5, #8]
    tickstart = HAL_GetTick();
 c0026dc:	f7fe fd9e 	bl	c00121c <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c0026e0:	68ab      	ldr	r3, [r5, #8]
 c0026e2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 c0026e6:	f003 030c 	and.w	r3, r3, #12
 c0026ea:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
    tickstart = HAL_GetTick();
 c0026ee:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c0026f0:	d060      	beq.n	c0027b4 <HAL_RCC_ClockConfig+0x150>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c0026f2:	f241 3788 	movw	r7, #5000	; 0x1388
 c0026f6:	e007      	b.n	c002708 <HAL_RCC_ClockConfig+0xa4>
 c0026f8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 c0026fc:	0092      	lsls	r2, r2, #2
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c0026fe:	68ab      	ldr	r3, [r5, #8]
 c002700:	f003 030c 	and.w	r3, r3, #12
 c002704:	4293      	cmp	r3, r2
 c002706:	d055      	beq.n	c0027b4 <HAL_RCC_ClockConfig+0x150>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c002708:	f7fe fd88 	bl	c00121c <HAL_GetTick>
 c00270c:	1b83      	subs	r3, r0, r6
 c00270e:	42bb      	cmp	r3, r7
 c002710:	d9f2      	bls.n	c0026f8 <HAL_RCC_ClockConfig+0x94>
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c002712:	68ab      	ldr	r3, [r5, #8]
 c002714:	f8d9 1004 	ldr.w	r1, [r9, #4]
 c002718:	f003 030c 	and.w	r3, r3, #12
 c00271c:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
 c002720:	ea4f 0281 	mov.w	r2, r1, lsl #2
 c002724:	d0eb      	beq.n	c0026fe <HAL_RCC_ClockConfig+0x9a>
          return HAL_TIMEOUT;
 c002726:	2003      	movs	r0, #3
 c002728:	e7b4      	b.n	c002694 <HAL_RCC_ClockConfig+0x30>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c00272a:	079d      	lsls	r5, r3, #30
 c00272c:	d436      	bmi.n	c00279c <HAL_RCC_ClockConfig+0x138>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 c00272e:	4962      	ldr	r1, [pc, #392]	; (c0028b8 <HAL_RCC_ClockConfig+0x254>)
 c002730:	680a      	ldr	r2, [r1, #0]
 c002732:	f002 020f 	and.w	r2, r2, #15
 c002736:	42a2      	cmp	r2, r4
 c002738:	d909      	bls.n	c00274e <HAL_RCC_ClockConfig+0xea>
    __HAL_FLASH_SET_LATENCY(FLatency);
 c00273a:	680a      	ldr	r2, [r1, #0]
 c00273c:	f022 020f 	bic.w	r2, r2, #15
 c002740:	4322      	orrs	r2, r4
 c002742:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c002744:	680a      	ldr	r2, [r1, #0]
 c002746:	f002 020f 	and.w	r2, r2, #15
 c00274a:	42a2      	cmp	r2, r4
 c00274c:	d1a1      	bne.n	c002692 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c00274e:	075a      	lsls	r2, r3, #29
 c002750:	d507      	bpl.n	c002762 <HAL_RCC_ClockConfig+0xfe>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 c002752:	495a      	ldr	r1, [pc, #360]	; (c0028bc <HAL_RCC_ClockConfig+0x258>)
 c002754:	f8d9 000c 	ldr.w	r0, [r9, #12]
 c002758:	688a      	ldr	r2, [r1, #8]
 c00275a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 c00275e:	4302      	orrs	r2, r0
 c002760:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c002762:	071b      	lsls	r3, r3, #28
 c002764:	d508      	bpl.n	c002778 <HAL_RCC_ClockConfig+0x114>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 c002766:	4a55      	ldr	r2, [pc, #340]	; (c0028bc <HAL_RCC_ClockConfig+0x258>)
 c002768:	f8d9 1010 	ldr.w	r1, [r9, #16]
 c00276c:	6893      	ldr	r3, [r2, #8]
 c00276e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 c002772:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 c002776:	6093      	str	r3, [r2, #8]
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c002778:	f7ff fb4c 	bl	c001e14 <HAL_RCC_GetSysClockFreq>
 c00277c:	4b4f      	ldr	r3, [pc, #316]	; (c0028bc <HAL_RCC_ClockConfig+0x258>)
 c00277e:	4a51      	ldr	r2, [pc, #324]	; (c0028c4 <HAL_RCC_ClockConfig+0x260>)
 c002780:	689b      	ldr	r3, [r3, #8]
  return HAL_InitTick(uwTickPrio);
 c002782:	4951      	ldr	r1, [pc, #324]	; (c0028c8 <HAL_RCC_ClockConfig+0x264>)
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c002784:	f3c3 1303 	ubfx	r3, r3, #4, #4
 c002788:	5cd3      	ldrb	r3, [r2, r3]
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c00278a:	4a50      	ldr	r2, [pc, #320]	; (c0028cc <HAL_RCC_ClockConfig+0x268>)
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c00278c:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c002790:	6013      	str	r3, [r2, #0]
  return HAL_InitTick(uwTickPrio);
 c002792:	6808      	ldr	r0, [r1, #0]
}
 c002794:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 c002798:	f7fe bcfc 	b.w	c001194 <HAL_InitTick>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 c00279c:	4947      	ldr	r1, [pc, #284]	; (c0028bc <HAL_RCC_ClockConfig+0x258>)
 c00279e:	f8d9 0008 	ldr.w	r0, [r9, #8]
 c0027a2:	688a      	ldr	r2, [r1, #8]
 c0027a4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 c0027a8:	4302      	orrs	r2, r0
 c0027aa:	608a      	str	r2, [r1, #8]
 c0027ac:	e7bf      	b.n	c00272e <HAL_RCC_ClockConfig+0xca>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c0027ae:	039e      	lsls	r6, r3, #14
 c0027b0:	d484      	bmi.n	c0026bc <HAL_RCC_ClockConfig+0x58>
 c0027b2:	e76e      	b.n	c002692 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c0027b4:	f8d9 3000 	ldr.w	r3, [r9]
 c0027b8:	0799      	lsls	r1, r3, #30
 c0027ba:	d4ef      	bmi.n	c00279c <HAL_RCC_ClockConfig+0x138>
    if (hpre == RCC_SYSCLK_DIV2)
 c0027bc:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 c0027c0:	d1b5      	bne.n	c00272e <HAL_RCC_ClockConfig+0xca>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 c0027c2:	493e      	ldr	r1, [pc, #248]	; (c0028bc <HAL_RCC_ClockConfig+0x258>)
 c0027c4:	688a      	ldr	r2, [r1, #8]
 c0027c6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 c0027ca:	608a      	str	r2, [r1, #8]
 c0027cc:	e7af      	b.n	c00272e <HAL_RCC_ClockConfig+0xca>
    return HAL_ERROR;
 c0027ce:	2001      	movs	r0, #1
}
 c0027d0:	4770      	bx	lr
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c0027d2:	493a      	ldr	r1, [pc, #232]	; (c0028bc <HAL_RCC_ClockConfig+0x258>)
 c0027d4:	6808      	ldr	r0, [r1, #0]
 c0027d6:	0180      	lsls	r0, r0, #6
 c0027d8:	f57f af5b 	bpl.w	c002692 <HAL_RCC_ClockConfig+0x2e>
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
  uint32_t msirange = 0U;
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 c0027dc:	68c8      	ldr	r0, [r1, #12]
 c0027de:	f000 0003 	and.w	r0, r0, #3
 c0027e2:	2801      	cmp	r0, #1
 c0027e4:	d043      	beq.n	c00286e <HAL_RCC_ClockConfig+0x20a>
  uint32_t msirange = 0U;
 c0027e6:	2100      	movs	r1, #0
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 c0027e8:	4e34      	ldr	r6, [pc, #208]	; (c0028bc <HAL_RCC_ClockConfig+0x258>)
 c0027ea:	68f5      	ldr	r5, [r6, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c0027ec:	68f0      	ldr	r0, [r6, #12]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 c0027ee:	f005 0503 	and.w	r5, r5, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c0027f2:	f3c0 1003 	ubfx	r0, r0, #4, #4

  switch (pllsource)
 c0027f6:	2d02      	cmp	r5, #2
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c0027f8:	f100 0001 	add.w	r0, r0, #1
  switch (pllsource)
 c0027fc:	d049      	beq.n	c002892 <HAL_RCC_ClockConfig+0x22e>
 c0027fe:	2d03      	cmp	r5, #3
 c002800:	d050      	beq.n	c0028a4 <HAL_RCC_ClockConfig+0x240>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      break;

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c002802:	fbb1 f1f0 	udiv	r1, r1, r0
 c002806:	68f0      	ldr	r0, [r6, #12]
 c002808:	f3c0 2006 	ubfx	r0, r0, #8, #7
 c00280c:	fb01 f100 	mul.w	r1, r1, r0
      break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c002810:	4d2a      	ldr	r5, [pc, #168]	; (c0028bc <HAL_RCC_ClockConfig+0x258>)
      if (pllfreq > 80000000U)
 c002812:	4e2b      	ldr	r6, [pc, #172]	; (c0028c0 <HAL_RCC_ClockConfig+0x25c>)
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c002814:	68e8      	ldr	r0, [r5, #12]
 c002816:	f3c0 6041 	ubfx	r0, r0, #25, #2
 c00281a:	3001      	adds	r0, #1
 c00281c:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco / pllr;
 c00281e:	fbb1 f1f0 	udiv	r1, r1, r0
      if (pllfreq > 80000000U)
 c002822:	42b1      	cmp	r1, r6
 c002824:	d932      	bls.n	c00288c <HAL_RCC_ClockConfig+0x228>
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 c002826:	68a9      	ldr	r1, [r5, #8]
 c002828:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 c00282c:	d006      	beq.n	c00283c <HAL_RCC_ClockConfig+0x1d8>
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 c00282e:	f013 0802 	ands.w	r8, r3, #2
 c002832:	f43f af4d 	beq.w	c0026d0 <HAL_RCC_ClockConfig+0x6c>
 c002836:	f8d9 3008 	ldr.w	r3, [r9, #8]
 c00283a:	bb3b      	cbnz	r3, c00288c <HAL_RCC_ClockConfig+0x228>
          hpre = RCC_SYSCLK_DIV2;
 c00283c:	f04f 0880 	mov.w	r8, #128	; 0x80
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c002840:	68ab      	ldr	r3, [r5, #8]
 c002842:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c002846:	ea43 0308 	orr.w	r3, r3, r8
 c00284a:	60ab      	str	r3, [r5, #8]
          hpre = RCC_SYSCLK_DIV2;
 c00284c:	e740      	b.n	c0026d0 <HAL_RCC_ClockConfig+0x6c>
        hpre = RCC_SYSCLK_DIV2;
 c00284e:	f04f 0880 	mov.w	r8, #128	; 0x80
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c002852:	4a1a      	ldr	r2, [pc, #104]	; (c0028bc <HAL_RCC_ClockConfig+0x258>)
 c002854:	6893      	ldr	r3, [r2, #8]
 c002856:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c00285a:	ea43 0308 	orr.w	r3, r3, r8
 c00285e:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 c002860:	f8d9 2004 	ldr.w	r2, [r9, #4]
 c002864:	e734      	b.n	c0026d0 <HAL_RCC_ClockConfig+0x6c>
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c002866:	0558      	lsls	r0, r3, #21
 c002868:	f57f af13 	bpl.w	c002692 <HAL_RCC_ClockConfig+0x2e>
 c00286c:	e726      	b.n	c0026bc <HAL_RCC_ClockConfig+0x58>
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c00286e:	6808      	ldr	r0, [r1, #0]
 c002870:	0707      	lsls	r7, r0, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c002872:	bf54      	ite	pl
 c002874:	f8d1 1094 	ldrpl.w	r1, [r1, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c002878:	6809      	ldrmi	r1, [r1, #0]
    msirange = MSIRangeTable[msirange];
 c00287a:	4815      	ldr	r0, [pc, #84]	; (c0028d0 <HAL_RCC_ClockConfig+0x26c>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c00287c:	bf54      	ite	pl
 c00287e:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c002882:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 c002886:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 c00288a:	e7ad      	b.n	c0027e8 <HAL_RCC_ClockConfig+0x184>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 c00288c:	f04f 0800 	mov.w	r8, #0
 c002890:	e71e      	b.n	c0026d0 <HAL_RCC_ClockConfig+0x6c>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c002892:	4910      	ldr	r1, [pc, #64]	; (c0028d4 <HAL_RCC_ClockConfig+0x270>)
 c002894:	68f5      	ldr	r5, [r6, #12]
 c002896:	fbb1 f1f0 	udiv	r1, r1, r0
 c00289a:	f3c5 2006 	ubfx	r0, r5, #8, #7
 c00289e:	fb01 f100 	mul.w	r1, r1, r0
      break;
 c0028a2:	e7b5      	b.n	c002810 <HAL_RCC_ClockConfig+0x1ac>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c0028a4:	490c      	ldr	r1, [pc, #48]	; (c0028d8 <HAL_RCC_ClockConfig+0x274>)
 c0028a6:	68f5      	ldr	r5, [r6, #12]
 c0028a8:	fbb1 f1f0 	udiv	r1, r1, r0
 c0028ac:	f3c5 2006 	ubfx	r0, r5, #8, #7
 c0028b0:	fb01 f100 	mul.w	r1, r1, r0
      break;
 c0028b4:	e7ac      	b.n	c002810 <HAL_RCC_ClockConfig+0x1ac>
 c0028b6:	bf00      	nop
 c0028b8:	50022000 	.word	0x50022000
 c0028bc:	50021000 	.word	0x50021000
 c0028c0:	04c4b400 	.word	0x04c4b400
 c0028c4:	0c006980 	.word	0x0c006980
 c0028c8:	3000000c 	.word	0x3000000c
 c0028cc:	30000004 	.word	0x30000004
 c0028d0:	0c006998 	.word	0x0c006998
 c0028d4:	00f42400 	.word	0x00f42400
 c0028d8:	00b71b00 	.word	0x00b71b00

0c0028dc <HAL_RCC_GetPCLK1Freq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c0028dc:	4a35      	ldr	r2, [pc, #212]	; (c0029b4 <HAL_RCC_GetPCLK1Freq+0xd8>)
{
 c0028de:	b410      	push	{r4}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c0028e0:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c0028e2:	68d2      	ldr	r2, [r2, #12]
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c0028e4:	f013 030c 	ands.w	r3, r3, #12
 c0028e8:	d018      	beq.n	c00291c <HAL_RCC_GetPCLK1Freq+0x40>
 c0028ea:	2b0c      	cmp	r3, #12
 c0028ec:	d047      	beq.n	c00297e <HAL_RCC_GetPCLK1Freq+0xa2>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 c0028ee:	2b04      	cmp	r3, #4
 c0028f0:	d053      	beq.n	c00299a <HAL_RCC_GetPCLK1Freq+0xbe>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 c0028f2:	2b08      	cmp	r3, #8
 c0028f4:	4a30      	ldr	r2, [pc, #192]	; (c0029b8 <HAL_RCC_GetPCLK1Freq+0xdc>)
 c0028f6:	bf18      	it	ne
 c0028f8:	2200      	movne	r2, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c0028fa:	4b2e      	ldr	r3, [pc, #184]	; (c0029b4 <HAL_RCC_GetPCLK1Freq+0xd8>)
 c0028fc:	482f      	ldr	r0, [pc, #188]	; (c0029bc <HAL_RCC_GetPCLK1Freq+0xe0>)
 c0028fe:	6899      	ldr	r1, [r3, #8]
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 c002900:	689b      	ldr	r3, [r3, #8]
 c002902:	4c2f      	ldr	r4, [pc, #188]	; (c0029c0 <HAL_RCC_GetPCLK1Freq+0xe4>)
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c002904:	f3c1 1103 	ubfx	r1, r1, #4, #4
 c002908:	5c40      	ldrb	r0, [r0, r1]
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 c00290a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 c00290e:	5ce3      	ldrb	r3, [r4, r3]
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c002910:	fa22 f000 	lsr.w	r0, r2, r0
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 c002914:	40d8      	lsrs	r0, r3
}
 c002916:	f85d 4b04 	ldr.w	r4, [sp], #4
 c00291a:	4770      	bx	lr
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c00291c:	4a25      	ldr	r2, [pc, #148]	; (c0029b4 <HAL_RCC_GetPCLK1Freq+0xd8>)
 c00291e:	6811      	ldr	r1, [r2, #0]
 c002920:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c002922:	bf54      	ite	pl
 c002924:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c002928:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 c00292a:	4926      	ldr	r1, [pc, #152]	; (c0029c4 <HAL_RCC_GetPCLK1Freq+0xe8>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c00292c:	bf54      	ite	pl
 c00292e:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c002932:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 c002936:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c00293a:	2b00      	cmp	r3, #0
 c00293c:	d0dd      	beq.n	c0028fa <HAL_RCC_GetPCLK1Freq+0x1e>
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c00293e:	2b0c      	cmp	r3, #12
 c002940:	d136      	bne.n	c0029b0 <HAL_RCC_GetPCLK1Freq+0xd4>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c002942:	491c      	ldr	r1, [pc, #112]	; (c0029b4 <HAL_RCC_GetPCLK1Freq+0xd8>)
 c002944:	68cb      	ldr	r3, [r1, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c002946:	68c8      	ldr	r0, [r1, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c002948:	f003 0303 	and.w	r3, r3, #3
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c00294c:	f3c0 1003 	ubfx	r0, r0, #4, #4
    switch (pllsource)
 c002950:	2b02      	cmp	r3, #2
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c002952:	f100 0001 	add.w	r0, r0, #1
    switch (pllsource)
 c002956:	d022      	beq.n	c00299e <HAL_RCC_GetPCLK1Freq+0xc2>
 c002958:	2b03      	cmp	r3, #3
 c00295a:	d116      	bne.n	c00298a <HAL_RCC_GetPCLK1Freq+0xae>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c00295c:	4b16      	ldr	r3, [pc, #88]	; (c0029b8 <HAL_RCC_GetPCLK1Freq+0xdc>)
 c00295e:	68ca      	ldr	r2, [r1, #12]
 c002960:	fbb3 f0f0 	udiv	r0, r3, r0
 c002964:	f3c2 2206 	ubfx	r2, r2, #8, #7
 c002968:	fb00 f302 	mul.w	r3, r0, r2
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c00296c:	4a11      	ldr	r2, [pc, #68]	; (c0029b4 <HAL_RCC_GetPCLK1Freq+0xd8>)
 c00296e:	68d0      	ldr	r0, [r2, #12]
 c002970:	f3c0 6041 	ubfx	r0, r0, #25, #2
 c002974:	3001      	adds	r0, #1
 c002976:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 c002978:	fbb3 f2f0 	udiv	r2, r3, r0
 c00297c:	e7bd      	b.n	c0028fa <HAL_RCC_GetPCLK1Freq+0x1e>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c00297e:	f002 0203 	and.w	r2, r2, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 c002982:	2a01      	cmp	r2, #1
 c002984:	d0ca      	beq.n	c00291c <HAL_RCC_GetPCLK1Freq+0x40>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 c002986:	2200      	movs	r2, #0
 c002988:	e7db      	b.n	c002942 <HAL_RCC_GetPCLK1Freq+0x66>
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c00298a:	fbb2 f0f0 	udiv	r0, r2, r0
 c00298e:	68ca      	ldr	r2, [r1, #12]
 c002990:	f3c2 2206 	ubfx	r2, r2, #8, #7
 c002994:	fb00 f302 	mul.w	r3, r0, r2
        break;
 c002998:	e7e8      	b.n	c00296c <HAL_RCC_GetPCLK1Freq+0x90>
    sysclockfreq = HSI_VALUE;
 c00299a:	4a0b      	ldr	r2, [pc, #44]	; (c0029c8 <HAL_RCC_GetPCLK1Freq+0xec>)
 c00299c:	e7ad      	b.n	c0028fa <HAL_RCC_GetPCLK1Freq+0x1e>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c00299e:	4b0a      	ldr	r3, [pc, #40]	; (c0029c8 <HAL_RCC_GetPCLK1Freq+0xec>)
 c0029a0:	68ca      	ldr	r2, [r1, #12]
 c0029a2:	fbb3 f0f0 	udiv	r0, r3, r0
 c0029a6:	f3c2 2206 	ubfx	r2, r2, #8, #7
 c0029aa:	fb00 f302 	mul.w	r3, r0, r2
        break;
 c0029ae:	e7dd      	b.n	c00296c <HAL_RCC_GetPCLK1Freq+0x90>
 c0029b0:	2200      	movs	r2, #0
 c0029b2:	e7a2      	b.n	c0028fa <HAL_RCC_GetPCLK1Freq+0x1e>
 c0029b4:	50021000 	.word	0x50021000
 c0029b8:	00b71b00 	.word	0x00b71b00
 c0029bc:	0c006980 	.word	0x0c006980
 c0029c0:	0c006990 	.word	0x0c006990
 c0029c4:	0c006998 	.word	0x0c006998
 c0029c8:	00f42400 	.word	0x00f42400

0c0029cc <HAL_RCC_GetPCLK2Freq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c0029cc:	4a35      	ldr	r2, [pc, #212]	; (c002aa4 <HAL_RCC_GetPCLK2Freq+0xd8>)
{
 c0029ce:	b410      	push	{r4}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c0029d0:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c0029d2:	68d2      	ldr	r2, [r2, #12]
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c0029d4:	f013 030c 	ands.w	r3, r3, #12
 c0029d8:	d018      	beq.n	c002a0c <HAL_RCC_GetPCLK2Freq+0x40>
 c0029da:	2b0c      	cmp	r3, #12
 c0029dc:	d047      	beq.n	c002a6e <HAL_RCC_GetPCLK2Freq+0xa2>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 c0029de:	2b04      	cmp	r3, #4
 c0029e0:	d053      	beq.n	c002a8a <HAL_RCC_GetPCLK2Freq+0xbe>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 c0029e2:	2b08      	cmp	r3, #8
 c0029e4:	4a30      	ldr	r2, [pc, #192]	; (c002aa8 <HAL_RCC_GetPCLK2Freq+0xdc>)
 c0029e6:	bf18      	it	ne
 c0029e8:	2200      	movne	r2, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c0029ea:	4b2e      	ldr	r3, [pc, #184]	; (c002aa4 <HAL_RCC_GetPCLK2Freq+0xd8>)
 c0029ec:	482f      	ldr	r0, [pc, #188]	; (c002aac <HAL_RCC_GetPCLK2Freq+0xe0>)
 c0029ee:	6899      	ldr	r1, [r3, #8]
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 c0029f0:	689b      	ldr	r3, [r3, #8]
 c0029f2:	4c2f      	ldr	r4, [pc, #188]	; (c002ab0 <HAL_RCC_GetPCLK2Freq+0xe4>)
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c0029f4:	f3c1 1103 	ubfx	r1, r1, #4, #4
 c0029f8:	5c40      	ldrb	r0, [r0, r1]
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 c0029fa:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 c0029fe:	5ce3      	ldrb	r3, [r4, r3]
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c002a00:	fa22 f000 	lsr.w	r0, r2, r0
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 c002a04:	40d8      	lsrs	r0, r3
}
 c002a06:	f85d 4b04 	ldr.w	r4, [sp], #4
 c002a0a:	4770      	bx	lr
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c002a0c:	4a25      	ldr	r2, [pc, #148]	; (c002aa4 <HAL_RCC_GetPCLK2Freq+0xd8>)
 c002a0e:	6811      	ldr	r1, [r2, #0]
 c002a10:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c002a12:	bf54      	ite	pl
 c002a14:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c002a18:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 c002a1a:	4926      	ldr	r1, [pc, #152]	; (c002ab4 <HAL_RCC_GetPCLK2Freq+0xe8>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c002a1c:	bf54      	ite	pl
 c002a1e:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c002a22:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 c002a26:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c002a2a:	2b00      	cmp	r3, #0
 c002a2c:	d0dd      	beq.n	c0029ea <HAL_RCC_GetPCLK2Freq+0x1e>
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c002a2e:	2b0c      	cmp	r3, #12
 c002a30:	d136      	bne.n	c002aa0 <HAL_RCC_GetPCLK2Freq+0xd4>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c002a32:	491c      	ldr	r1, [pc, #112]	; (c002aa4 <HAL_RCC_GetPCLK2Freq+0xd8>)
 c002a34:	68cb      	ldr	r3, [r1, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c002a36:	68c8      	ldr	r0, [r1, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c002a38:	f003 0303 	and.w	r3, r3, #3
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c002a3c:	f3c0 1003 	ubfx	r0, r0, #4, #4
    switch (pllsource)
 c002a40:	2b02      	cmp	r3, #2
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c002a42:	f100 0001 	add.w	r0, r0, #1
    switch (pllsource)
 c002a46:	d022      	beq.n	c002a8e <HAL_RCC_GetPCLK2Freq+0xc2>
 c002a48:	2b03      	cmp	r3, #3
 c002a4a:	d116      	bne.n	c002a7a <HAL_RCC_GetPCLK2Freq+0xae>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c002a4c:	4b16      	ldr	r3, [pc, #88]	; (c002aa8 <HAL_RCC_GetPCLK2Freq+0xdc>)
 c002a4e:	68ca      	ldr	r2, [r1, #12]
 c002a50:	fbb3 f0f0 	udiv	r0, r3, r0
 c002a54:	f3c2 2206 	ubfx	r2, r2, #8, #7
 c002a58:	fb00 f302 	mul.w	r3, r0, r2
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c002a5c:	4a11      	ldr	r2, [pc, #68]	; (c002aa4 <HAL_RCC_GetPCLK2Freq+0xd8>)
 c002a5e:	68d0      	ldr	r0, [r2, #12]
 c002a60:	f3c0 6041 	ubfx	r0, r0, #25, #2
 c002a64:	3001      	adds	r0, #1
 c002a66:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 c002a68:	fbb3 f2f0 	udiv	r2, r3, r0
 c002a6c:	e7bd      	b.n	c0029ea <HAL_RCC_GetPCLK2Freq+0x1e>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c002a6e:	f002 0203 	and.w	r2, r2, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 c002a72:	2a01      	cmp	r2, #1
 c002a74:	d0ca      	beq.n	c002a0c <HAL_RCC_GetPCLK2Freq+0x40>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 c002a76:	2200      	movs	r2, #0
 c002a78:	e7db      	b.n	c002a32 <HAL_RCC_GetPCLK2Freq+0x66>
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c002a7a:	fbb2 f0f0 	udiv	r0, r2, r0
 c002a7e:	68ca      	ldr	r2, [r1, #12]
 c002a80:	f3c2 2206 	ubfx	r2, r2, #8, #7
 c002a84:	fb00 f302 	mul.w	r3, r0, r2
        break;
 c002a88:	e7e8      	b.n	c002a5c <HAL_RCC_GetPCLK2Freq+0x90>
    sysclockfreq = HSI_VALUE;
 c002a8a:	4a0b      	ldr	r2, [pc, #44]	; (c002ab8 <HAL_RCC_GetPCLK2Freq+0xec>)
 c002a8c:	e7ad      	b.n	c0029ea <HAL_RCC_GetPCLK2Freq+0x1e>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c002a8e:	4b0a      	ldr	r3, [pc, #40]	; (c002ab8 <HAL_RCC_GetPCLK2Freq+0xec>)
 c002a90:	68ca      	ldr	r2, [r1, #12]
 c002a92:	fbb3 f0f0 	udiv	r0, r3, r0
 c002a96:	f3c2 2206 	ubfx	r2, r2, #8, #7
 c002a9a:	fb00 f302 	mul.w	r3, r0, r2
        break;
 c002a9e:	e7dd      	b.n	c002a5c <HAL_RCC_GetPCLK2Freq+0x90>
 c002aa0:	2200      	movs	r2, #0
 c002aa2:	e7a2      	b.n	c0029ea <HAL_RCC_GetPCLK2Freq+0x1e>
 c002aa4:	50021000 	.word	0x50021000
 c002aa8:	00b71b00 	.word	0x00b71b00
 c002aac:	0c006980 	.word	0x0c006980
 c002ab0:	0c006990 	.word	0x0c006990
 c002ab4:	0c006998 	.word	0x0c006998
 c002ab8:	00f42400 	.word	0x00f42400

0c002abc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 c002abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c002abe:	4604      	mov	r4, r0
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 c002ac0:	6800      	ldr	r0, [r0, #0]
{
 c002ac2:	460e      	mov	r6, r1
  switch (pPllSai1->PLLSAI1Source)
 c002ac4:	2802      	cmp	r0, #2
 c002ac6:	d005      	beq.n	c002ad4 <RCCEx_PLLSAI1_Config+0x18>
 c002ac8:	2803      	cmp	r0, #3
 c002aca:	d04e      	beq.n	c002b6a <RCCEx_PLLSAI1_Config+0xae>
 c002acc:	2801      	cmp	r0, #1
 c002ace:	d047      	beq.n	c002b60 <RCCEx_PLLSAI1_Config+0xa4>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
      {
        status = HAL_ERROR;
 c002ad0:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 c002ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c002ad4:	4b3f      	ldr	r3, [pc, #252]	; (c002bd4 <RCCEx_PLLSAI1_Config+0x118>)
 c002ad6:	681b      	ldr	r3, [r3, #0]
 c002ad8:	055d      	lsls	r5, r3, #21
 c002ada:	d5f9      	bpl.n	c002ad0 <RCCEx_PLLSAI1_Config+0x14>
    __HAL_RCC_PLLSAI1_DISABLE();
 c002adc:	4b3d      	ldr	r3, [pc, #244]	; (c002bd4 <RCCEx_PLLSAI1_Config+0x118>)
 c002ade:	681a      	ldr	r2, [r3, #0]
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c002ae0:	461f      	mov	r7, r3
    __HAL_RCC_PLLSAI1_DISABLE();
 c002ae2:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 c002ae6:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 c002ae8:	f7fe fb98 	bl	c00121c <HAL_GetTick>
 c002aec:	4605      	mov	r5, r0
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c002aee:	e004      	b.n	c002afa <RCCEx_PLLSAI1_Config+0x3e>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c002af0:	f7fe fb94 	bl	c00121c <HAL_GetTick>
 c002af4:	1b43      	subs	r3, r0, r5
 c002af6:	2b02      	cmp	r3, #2
 c002af8:	d84f      	bhi.n	c002b9a <RCCEx_PLLSAI1_Config+0xde>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c002afa:	683b      	ldr	r3, [r7, #0]
 c002afc:	0119      	lsls	r1, r3, #4
 c002afe:	d4f7      	bmi.n	c002af0 <RCCEx_PLLSAI1_Config+0x34>
      if (Divider == DIVIDER_P_UPDATE)
 c002b00:	2e00      	cmp	r6, #0
 c002b02:	d038      	beq.n	c002b76 <RCCEx_PLLSAI1_Config+0xba>
      else if (Divider == DIVIDER_Q_UPDATE)
 c002b04:	2e01      	cmp	r6, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c002b06:	4833      	ldr	r0, [pc, #204]	; (c002bd4 <RCCEx_PLLSAI1_Config+0x118>)
      else if (Divider == DIVIDER_Q_UPDATE)
 c002b08:	d050      	beq.n	c002bac <RCCEx_PLLSAI1_Config+0xf0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c002b0a:	6901      	ldr	r1, [r0, #16]
 c002b0c:	4b32      	ldr	r3, [pc, #200]	; (c002bd8 <RCCEx_PLLSAI1_Config+0x11c>)
 c002b0e:	6822      	ldr	r2, [r4, #0]
 c002b10:	400b      	ands	r3, r1
 c002b12:	4313      	orrs	r3, r2
 c002b14:	6962      	ldr	r2, [r4, #20]
 c002b16:	e9d4 1501 	ldrd	r1, r5, [r4, #4]
 c002b1a:	0852      	lsrs	r2, r2, #1
 c002b1c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 c002b20:	3901      	subs	r1, #1
 c002b22:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 c002b26:	3a01      	subs	r2, #1
 c002b28:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 c002b2c:	6103      	str	r3, [r0, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 c002b2e:	4b29      	ldr	r3, [pc, #164]	; (c002bd4 <RCCEx_PLLSAI1_Config+0x118>)
 c002b30:	681a      	ldr	r2, [r3, #0]
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c002b32:	461e      	mov	r6, r3
      __HAL_RCC_PLLSAI1_ENABLE();
 c002b34:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 c002b38:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 c002b3a:	f7fe fb6f 	bl	c00121c <HAL_GetTick>
 c002b3e:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c002b40:	e004      	b.n	c002b4c <RCCEx_PLLSAI1_Config+0x90>
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c002b42:	f7fe fb6b 	bl	c00121c <HAL_GetTick>
 c002b46:	1b43      	subs	r3, r0, r5
 c002b48:	2b02      	cmp	r3, #2
 c002b4a:	d82b      	bhi.n	c002ba4 <RCCEx_PLLSAI1_Config+0xe8>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c002b4c:	6833      	ldr	r3, [r6, #0]
 c002b4e:	011b      	lsls	r3, r3, #4
 c002b50:	d5f7      	bpl.n	c002b42 <RCCEx_PLLSAI1_Config+0x86>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 c002b52:	4a20      	ldr	r2, [pc, #128]	; (c002bd4 <RCCEx_PLLSAI1_Config+0x118>)
 c002b54:	69a1      	ldr	r1, [r4, #24]
 c002b56:	6913      	ldr	r3, [r2, #16]
 c002b58:	2000      	movs	r0, #0
 c002b5a:	430b      	orrs	r3, r1
 c002b5c:	6113      	str	r3, [r2, #16]
}
 c002b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c002b60:	4a1c      	ldr	r2, [pc, #112]	; (c002bd4 <RCCEx_PLLSAI1_Config+0x118>)
 c002b62:	6812      	ldr	r2, [r2, #0]
 c002b64:	0797      	lsls	r7, r2, #30
 c002b66:	d4b9      	bmi.n	c002adc <RCCEx_PLLSAI1_Config+0x20>
}
 c002b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c002b6a:	4b1a      	ldr	r3, [pc, #104]	; (c002bd4 <RCCEx_PLLSAI1_Config+0x118>)
 c002b6c:	681b      	ldr	r3, [r3, #0]
 c002b6e:	f413 2fc0 	tst.w	r3, #393216	; 0x60000
 c002b72:	d0ad      	beq.n	c002ad0 <RCCEx_PLLSAI1_Config+0x14>
 c002b74:	e7b2      	b.n	c002adc <RCCEx_PLLSAI1_Config+0x20>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c002b76:	4917      	ldr	r1, [pc, #92]	; (c002bd4 <RCCEx_PLLSAI1_Config+0x118>)
 c002b78:	4b18      	ldr	r3, [pc, #96]	; (c002bdc <RCCEx_PLLSAI1_Config+0x120>)
 c002b7a:	6908      	ldr	r0, [r1, #16]
 c002b7c:	6822      	ldr	r2, [r4, #0]
 c002b7e:	68a5      	ldr	r5, [r4, #8]
 c002b80:	4003      	ands	r3, r0
 c002b82:	4313      	orrs	r3, r2
 c002b84:	68e0      	ldr	r0, [r4, #12]
 c002b86:	6862      	ldr	r2, [r4, #4]
 c002b88:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 c002b8c:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 c002b90:	3a01      	subs	r2, #1
 c002b92:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 c002b96:	610b      	str	r3, [r1, #16]
 c002b98:	e7c9      	b.n	c002b2e <RCCEx_PLLSAI1_Config+0x72>
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c002b9a:	683b      	ldr	r3, [r7, #0]
 c002b9c:	0118      	lsls	r0, r3, #4
 c002b9e:	d5af      	bpl.n	c002b00 <RCCEx_PLLSAI1_Config+0x44>
          status = HAL_TIMEOUT;
 c002ba0:	2003      	movs	r0, #3
}
 c002ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c002ba4:	6833      	ldr	r3, [r6, #0]
 c002ba6:	011a      	lsls	r2, r3, #4
 c002ba8:	d5fa      	bpl.n	c002ba0 <RCCEx_PLLSAI1_Config+0xe4>
 c002baa:	e7d2      	b.n	c002b52 <RCCEx_PLLSAI1_Config+0x96>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c002bac:	6901      	ldr	r1, [r0, #16]
 c002bae:	4b0c      	ldr	r3, [pc, #48]	; (c002be0 <RCCEx_PLLSAI1_Config+0x124>)
 c002bb0:	6822      	ldr	r2, [r4, #0]
 c002bb2:	400b      	ands	r3, r1
 c002bb4:	4313      	orrs	r3, r2
 c002bb6:	6922      	ldr	r2, [r4, #16]
 c002bb8:	e9d4 1501 	ldrd	r1, r5, [r4, #4]
 c002bbc:	0852      	lsrs	r2, r2, #1
 c002bbe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 c002bc2:	3901      	subs	r1, #1
 c002bc4:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 c002bc8:	3a01      	subs	r2, #1
 c002bca:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 c002bce:	6103      	str	r3, [r0, #16]
 c002bd0:	e7ad      	b.n	c002b2e <RCCEx_PLLSAI1_Config+0x72>
 c002bd2:	bf00      	nop
 c002bd4:	50021000 	.word	0x50021000
 c002bd8:	f9ff800c 	.word	0xf9ff800c
 c002bdc:	07ff800c 	.word	0x07ff800c
 c002be0:	ff9f800c 	.word	0xff9f800c

0c002be4 <RCCEx_PLLSAI2_Config.constprop.0>:
  *
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
 c002be4:	b570      	push	{r4, r5, r6, lr}
 c002be6:	4604      	mov	r4, r0
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 c002be8:	6800      	ldr	r0, [r0, #0]
 c002bea:	2802      	cmp	r0, #2
 c002bec:	d005      	beq.n	c002bfa <RCCEx_PLLSAI2_Config.constprop.0+0x16>
 c002bee:	2803      	cmp	r0, #3
 c002bf0:	d047      	beq.n	c002c82 <RCCEx_PLLSAI2_Config.constprop.0+0x9e>
 c002bf2:	2801      	cmp	r0, #1
 c002bf4:	d040      	beq.n	c002c78 <RCCEx_PLLSAI2_Config.constprop.0+0x94>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
      {
        status = HAL_ERROR;
 c002bf6:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 c002bf8:	bd70      	pop	{r4, r5, r6, pc}
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c002bfa:	4b29      	ldr	r3, [pc, #164]	; (c002ca0 <RCCEx_PLLSAI2_Config.constprop.0+0xbc>)
 c002bfc:	681b      	ldr	r3, [r3, #0]
 c002bfe:	055d      	lsls	r5, r3, #21
 c002c00:	d5f9      	bpl.n	c002bf6 <RCCEx_PLLSAI2_Config.constprop.0+0x12>
    __HAL_RCC_PLLSAI2_DISABLE();
 c002c02:	4b27      	ldr	r3, [pc, #156]	; (c002ca0 <RCCEx_PLLSAI2_Config.constprop.0+0xbc>)
 c002c04:	681a      	ldr	r2, [r3, #0]
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c002c06:	461e      	mov	r6, r3
    __HAL_RCC_PLLSAI2_DISABLE();
 c002c08:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 c002c0c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 c002c0e:	f7fe fb05 	bl	c00121c <HAL_GetTick>
 c002c12:	4605      	mov	r5, r0
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c002c14:	e004      	b.n	c002c20 <RCCEx_PLLSAI2_Config.constprop.0+0x3c>
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c002c16:	f7fe fb01 	bl	c00121c <HAL_GetTick>
 c002c1a:	1b43      	subs	r3, r0, r5
 c002c1c:	2b02      	cmp	r3, #2
 c002c1e:	d836      	bhi.n	c002c8e <RCCEx_PLLSAI2_Config.constprop.0+0xaa>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c002c20:	6833      	ldr	r3, [r6, #0]
 c002c22:	0099      	lsls	r1, r3, #2
 c002c24:	d4f7      	bmi.n	c002c16 <RCCEx_PLLSAI2_Config.constprop.0+0x32>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 c002c26:	4a1e      	ldr	r2, [pc, #120]	; (c002ca0 <RCCEx_PLLSAI2_Config.constprop.0+0xbc>)
 c002c28:	4b1e      	ldr	r3, [pc, #120]	; (c002ca4 <RCCEx_PLLSAI2_Config.constprop.0+0xc0>)
 c002c2a:	6950      	ldr	r0, [r2, #20]
 c002c2c:	6821      	ldr	r1, [r4, #0]
 c002c2e:	68a5      	ldr	r5, [r4, #8]
 c002c30:	4003      	ands	r3, r0
 c002c32:	430b      	orrs	r3, r1
 c002c34:	68e0      	ldr	r0, [r4, #12]
 c002c36:	6861      	ldr	r1, [r4, #4]
 c002c38:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 c002c3c:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 c002c40:	3901      	subs	r1, #1
 c002c42:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 c002c46:	6153      	str	r3, [r2, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 c002c48:	6813      	ldr	r3, [r2, #0]
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c002c4a:	4616      	mov	r6, r2
      __HAL_RCC_PLLSAI2_ENABLE();
 c002c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c002c50:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 c002c52:	f7fe fae3 	bl	c00121c <HAL_GetTick>
 c002c56:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c002c58:	e004      	b.n	c002c64 <RCCEx_PLLSAI2_Config.constprop.0+0x80>
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c002c5a:	f7fe fadf 	bl	c00121c <HAL_GetTick>
 c002c5e:	1b43      	subs	r3, r0, r5
 c002c60:	2b02      	cmp	r3, #2
 c002c62:	d819      	bhi.n	c002c98 <RCCEx_PLLSAI2_Config.constprop.0+0xb4>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c002c64:	6833      	ldr	r3, [r6, #0]
 c002c66:	009b      	lsls	r3, r3, #2
 c002c68:	d5f7      	bpl.n	c002c5a <RCCEx_PLLSAI2_Config.constprop.0+0x76>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 c002c6a:	4a0d      	ldr	r2, [pc, #52]	; (c002ca0 <RCCEx_PLLSAI2_Config.constprop.0+0xbc>)
 c002c6c:	6921      	ldr	r1, [r4, #16]
 c002c6e:	6953      	ldr	r3, [r2, #20]
 c002c70:	2000      	movs	r0, #0
 c002c72:	430b      	orrs	r3, r1
 c002c74:	6153      	str	r3, [r2, #20]
}
 c002c76:	bd70      	pop	{r4, r5, r6, pc}
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c002c78:	4a09      	ldr	r2, [pc, #36]	; (c002ca0 <RCCEx_PLLSAI2_Config.constprop.0+0xbc>)
 c002c7a:	6812      	ldr	r2, [r2, #0]
 c002c7c:	0796      	lsls	r6, r2, #30
 c002c7e:	d4c0      	bmi.n	c002c02 <RCCEx_PLLSAI2_Config.constprop.0+0x1e>
}
 c002c80:	bd70      	pop	{r4, r5, r6, pc}
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c002c82:	4b07      	ldr	r3, [pc, #28]	; (c002ca0 <RCCEx_PLLSAI2_Config.constprop.0+0xbc>)
 c002c84:	681b      	ldr	r3, [r3, #0]
 c002c86:	f413 2fc0 	tst.w	r3, #393216	; 0x60000
 c002c8a:	d0b4      	beq.n	c002bf6 <RCCEx_PLLSAI2_Config.constprop.0+0x12>
 c002c8c:	e7b9      	b.n	c002c02 <RCCEx_PLLSAI2_Config.constprop.0+0x1e>
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c002c8e:	6833      	ldr	r3, [r6, #0]
 c002c90:	0098      	lsls	r0, r3, #2
 c002c92:	d5c8      	bpl.n	c002c26 <RCCEx_PLLSAI2_Config.constprop.0+0x42>
          status = HAL_TIMEOUT;
 c002c94:	2003      	movs	r0, #3
}
 c002c96:	bd70      	pop	{r4, r5, r6, pc}
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c002c98:	6833      	ldr	r3, [r6, #0]
 c002c9a:	009a      	lsls	r2, r3, #2
 c002c9c:	d5fa      	bpl.n	c002c94 <RCCEx_PLLSAI2_Config.constprop.0+0xb0>
 c002c9e:	e7e4      	b.n	c002c6a <RCCEx_PLLSAI2_Config.constprop.0+0x86>
 c002ca0:	50021000 	.word	0x50021000
 c002ca4:	07ff800c 	.word	0x07ff800c

0c002ca8 <HAL_RCCEx_PeriphCLKConfig>:
{
 c002ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 c002cac:	6803      	ldr	r3, [r0, #0]
{
 c002cae:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 c002cb0:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
{
 c002cb4:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 c002cb6:	d022      	beq.n	c002cfe <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch (PeriphClkInit->Sai1ClockSelection)
 c002cb8:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 c002cba:	2940      	cmp	r1, #64	; 0x40
 c002cbc:	f000 8249 	beq.w	c003152 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 c002cc0:	d80f      	bhi.n	c002ce2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 c002cc2:	2900      	cmp	r1, #0
 c002cc4:	f000 8203 	beq.w	c0030ce <HAL_RCCEx_PeriphCLKConfig+0x426>
 c002cc8:	2920      	cmp	r1, #32
 c002cca:	f040 8279 	bne.w	c0031c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c002cce:	3020      	adds	r0, #32
 c002cd0:	f7ff ff88 	bl	c002be4 <RCCEx_PLLSAI2_Config.constprop.0>
 c002cd4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 c002cd6:	2d00      	cmp	r5, #0
 c002cd8:	f040 8239 	bne.w	c00314e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 c002cdc:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 c002cde:	6823      	ldr	r3, [r4, #0]
 c002ce0:	e004      	b.n	c002cec <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch (PeriphClkInit->Sai1ClockSelection)
 c002ce2:	2960      	cmp	r1, #96	; 0x60
 c002ce4:	d002      	beq.n	c002cec <HAL_RCCEx_PeriphCLKConfig+0x44>
 c002ce6:	2980      	cmp	r1, #128	; 0x80
 c002ce8:	f040 826a 	bne.w	c0031c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 c002cec:	2500      	movs	r5, #0
 c002cee:	48b9      	ldr	r0, [pc, #740]	; (c002fd4 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 c002cf0:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 c002cf4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 c002cf8:	4311      	orrs	r1, r2
 c002cfa:	f8c0 109c 	str.w	r1, [r0, #156]	; 0x9c
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 c002cfe:	04d9      	lsls	r1, r3, #19
 c002d00:	f140 8154 	bpl.w	c002fac <HAL_RCCEx_PeriphCLKConfig+0x304>
    switch (PeriphClkInit->Sai2ClockSelection)
 c002d04:	6f21      	ldr	r1, [r4, #112]	; 0x70
 c002d06:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 c002d0a:	f000 8228 	beq.w	c00315e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 c002d0e:	f200 813f 	bhi.w	c002f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 c002d12:	2900      	cmp	r1, #0
 c002d14:	f000 81d5 	beq.w	c0030c2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 c002d18:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 c002d1c:	f040 824d 	bne.w	c0031ba <HAL_RCCEx_PeriphCLKConfig+0x512>
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c002d20:	f104 0020 	add.w	r0, r4, #32
 c002d24:	f7ff ff5e 	bl	c002be4 <RCCEx_PLLSAI2_Config.constprop.0>
 c002d28:	4680      	mov	r8, r0
        break;
 c002d2a:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 c002d2c:	f1b8 0f00 	cmp.w	r8, #0
 c002d30:	f040 813a 	bne.w	c002fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 c002d34:	49a7      	ldr	r1, [pc, #668]	; (c002fd4 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 c002d36:	6f20      	ldr	r0, [r4, #112]	; 0x70
 c002d38:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 c002d3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 c002d40:	4302      	orrs	r2, r0
 c002d42:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 c002d46:	039a      	lsls	r2, r3, #14
 c002d48:	f100 8134 	bmi.w	c002fb4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 c002d4c:	07df      	lsls	r7, r3, #31
 c002d4e:	d508      	bpl.n	c002d62 <HAL_RCCEx_PeriphCLKConfig+0xba>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 c002d50:	49a0      	ldr	r1, [pc, #640]	; (c002fd4 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 c002d52:	6b60      	ldr	r0, [r4, #52]	; 0x34
 c002d54:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 c002d58:	f022 0203 	bic.w	r2, r2, #3
 c002d5c:	4302      	orrs	r2, r0
 c002d5e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 c002d62:	079e      	lsls	r6, r3, #30
 c002d64:	d508      	bpl.n	c002d78 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 c002d66:	499b      	ldr	r1, [pc, #620]	; (c002fd4 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 c002d68:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 c002d6a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 c002d6e:	f022 020c 	bic.w	r2, r2, #12
 c002d72:	4302      	orrs	r2, r0
 c002d74:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 c002d78:	0758      	lsls	r0, r3, #29
 c002d7a:	d508      	bpl.n	c002d8e <HAL_RCCEx_PeriphCLKConfig+0xe6>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 c002d7c:	4995      	ldr	r1, [pc, #596]	; (c002fd4 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 c002d7e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 c002d80:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 c002d84:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 c002d88:	4302      	orrs	r2, r0
 c002d8a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 c002d8e:	0719      	lsls	r1, r3, #28
 c002d90:	d508      	bpl.n	c002da4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 c002d92:	4990      	ldr	r1, [pc, #576]	; (c002fd4 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 c002d94:	6c20      	ldr	r0, [r4, #64]	; 0x40
 c002d96:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 c002d9a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 c002d9e:	4302      	orrs	r2, r0
 c002da0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 c002da4:	06da      	lsls	r2, r3, #27
 c002da6:	d508      	bpl.n	c002dba <HAL_RCCEx_PeriphCLKConfig+0x112>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 c002da8:	498a      	ldr	r1, [pc, #552]	; (c002fd4 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 c002daa:	6c60      	ldr	r0, [r4, #68]	; 0x44
 c002dac:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 c002db0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 c002db4:	4302      	orrs	r2, r0
 c002db6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 c002dba:	069f      	lsls	r7, r3, #26
 c002dbc:	d508      	bpl.n	c002dd0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 c002dbe:	4985      	ldr	r1, [pc, #532]	; (c002fd4 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 c002dc0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 c002dc2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 c002dc6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 c002dca:	4302      	orrs	r2, r0
 c002dcc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 c002dd0:	059e      	lsls	r6, r3, #22
 c002dd2:	d508      	bpl.n	c002de6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 c002dd4:	497f      	ldr	r1, [pc, #508]	; (c002fd4 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 c002dd6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 c002dd8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 c002ddc:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 c002de0:	4302      	orrs	r2, r0
 c002de2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 c002de6:	0558      	lsls	r0, r3, #21
 c002de8:	d508      	bpl.n	c002dfc <HAL_RCCEx_PeriphCLKConfig+0x154>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 c002dea:	497a      	ldr	r1, [pc, #488]	; (c002fd4 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 c002dec:	6e20      	ldr	r0, [r4, #96]	; 0x60
 c002dee:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 c002df2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 c002df6:	4302      	orrs	r2, r0
 c002df8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 c002dfc:	0259      	lsls	r1, r3, #9
 c002dfe:	d508      	bpl.n	c002e12 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 c002e00:	4974      	ldr	r1, [pc, #464]	; (c002fd4 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 c002e02:	6e60      	ldr	r0, [r4, #100]	; 0x64
 c002e04:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 c002e08:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 c002e0c:	4302      	orrs	r2, r0
 c002e0e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 c002e12:	019a      	lsls	r2, r3, #6
 c002e14:	d50c      	bpl.n	c002e30 <HAL_RCCEx_PeriphCLKConfig+0x188>
    switch (PeriphClkInit->FdcanClockSelection)
 c002e16:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 c002e18:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 c002e1c:	f000 8181 	beq.w	c003122 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 c002e20:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 c002e24:	f000 8134 	beq.w	c003090 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 c002e28:	2a00      	cmp	r2, #0
 c002e2a:	f000 8137 	beq.w	c00309c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 c002e2e:	2501      	movs	r5, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 c002e30:	065f      	lsls	r7, r3, #25
 c002e32:	d508      	bpl.n	c002e46 <HAL_RCCEx_PeriphCLKConfig+0x19e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 c002e34:	4967      	ldr	r1, [pc, #412]	; (c002fd4 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 c002e36:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 c002e38:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 c002e3c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 c002e40:	4302      	orrs	r2, r0
 c002e42:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 c002e46:	061e      	lsls	r6, r3, #24
 c002e48:	d508      	bpl.n	c002e5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 c002e4a:	4962      	ldr	r1, [pc, #392]	; (c002fd4 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 c002e4c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 c002e4e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 c002e52:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 c002e56:	4302      	orrs	r2, r0
 c002e58:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 c002e5c:	05d8      	lsls	r0, r3, #23
 c002e5e:	d508      	bpl.n	c002e72 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 c002e60:	495c      	ldr	r1, [pc, #368]	; (c002fd4 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 c002e62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 c002e64:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 c002e68:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 c002e6c:	4302      	orrs	r2, r0
 c002e6e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 c002e72:	02d9      	lsls	r1, r3, #11
 c002e74:	d508      	bpl.n	c002e88 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 c002e76:	4957      	ldr	r1, [pc, #348]	; (c002fd4 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 c002e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c002e7a:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 c002e7e:	f022 0203 	bic.w	r2, r2, #3
 c002e82:	4302      	orrs	r2, r0
 c002e84:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 c002e88:	049a      	lsls	r2, r3, #18
 c002e8a:	d511      	bpl.n	c002eb0 <HAL_RCCEx_PeriphCLKConfig+0x208>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 c002e8c:	4951      	ldr	r1, [pc, #324]	; (c002fd4 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 c002e8e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 c002e90:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 c002e94:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 c002e98:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 c002e9c:	ea42 0200 	orr.w	r2, r2, r0
 c002ea0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 c002ea4:	f000 811f 	beq.w	c0030e6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 c002ea8:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 c002eac:	f000 815e 	beq.w	c00316c <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 c002eb0:	031f      	lsls	r7, r3, #12
 c002eb2:	d51b      	bpl.n	c002eec <HAL_RCCEx_PeriphCLKConfig+0x244>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 c002eb4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 c002eb6:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 c002eba:	f000 8121 	beq.w	c003100 <HAL_RCCEx_PeriphCLKConfig+0x458>
 c002ebe:	4945      	ldr	r1, [pc, #276]	; (c002fd4 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 c002ec0:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 c002ec4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 c002ec8:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 c002ecc:	ea42 0200 	orr.w	r2, r2, r0
 c002ed0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 c002ed4:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 c002ed8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 c002edc:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 c002ee0:	f000 8154 	beq.w	c00318c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 c002ee4:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 c002ee8:	f000 812c 	beq.w	c003144 <HAL_RCCEx_PeriphCLKConfig+0x49c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 c002eec:	035e      	lsls	r6, r3, #13
 c002eee:	d511      	bpl.n	c002f14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 c002ef0:	4938      	ldr	r1, [pc, #224]	; (c002fd4 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 c002ef2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 c002ef4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 c002ef8:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 c002efc:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 c002f00:	ea42 0200 	orr.w	r2, r2, r0
 c002f04:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 c002f08:	f000 8106 	beq.w	c003118 <HAL_RCCEx_PeriphCLKConfig+0x470>
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 c002f0c:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 c002f10:	f000 8134 	beq.w	c00317c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 c002f14:	0458      	lsls	r0, r3, #17
 c002f16:	d50e      	bpl.n	c002f36 <HAL_RCCEx_PeriphCLKConfig+0x28e>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 c002f18:	482e      	ldr	r0, [pc, #184]	; (c002fd4 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 c002f1a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 c002f1e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 c002f22:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 c002f26:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 c002f2a:	ea42 0201 	orr.w	r2, r2, r1
 c002f2e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 c002f32:	f000 80ff 	beq.w	c003134 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 c002f36:	03d9      	lsls	r1, r3, #15
 c002f38:	d509      	bpl.n	c002f4e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 c002f3a:	4926      	ldr	r1, [pc, #152]	; (c002fd4 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 c002f3c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 c002f40:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 c002f44:	f022 0204 	bic.w	r2, r2, #4
 c002f48:	4302      	orrs	r2, r0
 c002f4a:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 c002f4e:	029a      	lsls	r2, r3, #10
 c002f50:	d509      	bpl.n	c002f66 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 c002f52:	4920      	ldr	r1, [pc, #128]	; (c002fd4 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 c002f54:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 c002f58:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 c002f5c:	f022 0218 	bic.w	r2, r2, #24
 c002f60:	4302      	orrs	r2, r0
 c002f62:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 c002f66:	01db      	lsls	r3, r3, #7
 c002f68:	d50e      	bpl.n	c002f88 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 c002f6a:	4a1a      	ldr	r2, [pc, #104]	; (c002fd4 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 c002f6c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 c002f70:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 c002f74:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 c002f78:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 c002f7c:	ea43 0301 	orr.w	r3, r3, r1
 c002f80:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 c002f84:	f000 80b4 	beq.w	c0030f0 <HAL_RCCEx_PeriphCLKConfig+0x448>
}
 c002f88:	4628      	mov	r0, r5
 c002f8a:	b002      	add	sp, #8
 c002f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch (PeriphClkInit->Sai2ClockSelection)
 c002f90:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 c002f94:	d003      	beq.n	c002f9e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 c002f96:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 c002f9a:	f040 810e 	bne.w	c0031ba <HAL_RCCEx_PeriphCLKConfig+0x512>
 c002f9e:	46a8      	mov	r8, r5
    if (ret == HAL_OK)
 c002fa0:	f1b8 0f00 	cmp.w	r8, #0
 c002fa4:	f43f aec6 	beq.w	c002d34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 c002fa8:	4645      	mov	r5, r8
 c002faa:	e000      	b.n	c002fae <HAL_RCCEx_PeriphCLKConfig+0x306>
 c002fac:	46a8      	mov	r8, r5
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 c002fae:	039a      	lsls	r2, r3, #14
 c002fb0:	f57f aecc 	bpl.w	c002d4c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c002fb4:	4b07      	ldr	r3, [pc, #28]	; (c002fd4 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 c002fb6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 c002fb8:	00d7      	lsls	r7, r2, #3
 c002fba:	d55d      	bpl.n	c003078 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    FlagStatus       pwrclkchanged = RESET;
 c002fbc:	f04f 0900 	mov.w	r9, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c002fc0:	4b05      	ldr	r3, [pc, #20]	; (c002fd8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 c002fc2:	681a      	ldr	r2, [r3, #0]
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c002fc4:	461f      	mov	r7, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c002fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 c002fca:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 c002fcc:	f7fe f926 	bl	c00121c <HAL_GetTick>
 c002fd0:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c002fd2:	e008      	b.n	c002fe6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 c002fd4:	50021000 	.word	0x50021000
 c002fd8:	50007000 	.word	0x50007000
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c002fdc:	f7fe f91e 	bl	c00121c <HAL_GetTick>
 c002fe0:	1b83      	subs	r3, r0, r6
 c002fe2:	2b02      	cmp	r3, #2
 c002fe4:	d867      	bhi.n	c0030b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c002fe6:	683b      	ldr	r3, [r7, #0]
 c002fe8:	05d8      	lsls	r0, r3, #23
 c002fea:	d5f7      	bpl.n	c002fdc <HAL_RCCEx_PeriphCLKConfig+0x334>
    if (ret == HAL_OK)
 c002fec:	f1b8 0f00 	cmp.w	r8, #0
 c002ff0:	d175      	bne.n	c0030de <HAL_RCCEx_PeriphCLKConfig+0x436>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 c002ff2:	4e74      	ldr	r6, [pc, #464]	; (c0031c4 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c002ff4:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 c002ff8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 c002ffc:	d028      	beq.n	c003050 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 c002ffe:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 c003002:	429a      	cmp	r2, r3
 c003004:	d026      	beq.n	c003054 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 c003006:	f8d6 1090 	ldr.w	r1, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 c00300a:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 c00300e:	f421 7040 	bic.w	r0, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 c003012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c003016:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 c00301a:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 c00301e:	07c9      	lsls	r1, r1, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 c003020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c003024:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 c003028:	f8c6 0090 	str.w	r0, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 c00302c:	f140 80c3 	bpl.w	c0031b6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
        tickstart = HAL_GetTick();
 c003030:	f7fe f8f4 	bl	c00121c <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c003034:	f241 3a88 	movw	sl, #5000	; 0x1388
        tickstart = HAL_GetTick();
 c003038:	4607      	mov	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c00303a:	e005      	b.n	c003048 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c00303c:	f7fe f8ee 	bl	c00121c <HAL_GetTick>
 c003040:	1bc0      	subs	r0, r0, r7
 c003042:	4550      	cmp	r0, sl
 c003044:	f200 80b2 	bhi.w	c0031ac <HAL_RCCEx_PeriphCLKConfig+0x504>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c003048:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 c00304c:	079b      	lsls	r3, r3, #30
 c00304e:	d5f5      	bpl.n	c00303c <HAL_RCCEx_PeriphCLKConfig+0x394>
 c003050:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 c003054:	495b      	ldr	r1, [pc, #364]	; (c0031c4 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c003056:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 c00305a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 c00305e:	4313      	orrs	r3, r2
 c003060:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
    if (pwrclkchanged == SET)
 c003064:	f1b9 0f00 	cmp.w	r9, #0
 c003068:	d004      	beq.n	c003074 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      __HAL_RCC_PWR_CLK_DISABLE();
 c00306a:	4a56      	ldr	r2, [pc, #344]	; (c0031c4 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c00306c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 c00306e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c003072:	6593      	str	r3, [r2, #88]	; 0x58
 c003074:	6823      	ldr	r3, [r4, #0]
 c003076:	e669      	b.n	c002d4c <HAL_RCCEx_PeriphCLKConfig+0xa4>
      __HAL_RCC_PWR_CLK_ENABLE();
 c003078:	6d9a      	ldr	r2, [r3, #88]	; 0x58
      pwrclkchanged = SET;
 c00307a:	f04f 0901 	mov.w	r9, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 c00307e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 c003082:	659a      	str	r2, [r3, #88]	; 0x58
 c003084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c00308a:	9301      	str	r3, [sp, #4]
 c00308c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 c00308e:	e797      	b.n	c002fc0 <HAL_RCCEx_PeriphCLKConfig+0x318>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c003090:	2100      	movs	r1, #0
 c003092:	1d20      	adds	r0, r4, #4
 c003094:	f7ff fd12 	bl	c002abc <RCCEx_PLLSAI1_Config>
 c003098:	4680      	mov	r8, r0
        break;
 c00309a:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 c00309c:	f1b8 0f00 	cmp.w	r8, #0
 c0030a0:	d11f      	bne.n	c0030e2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 c0030a2:	4948      	ldr	r1, [pc, #288]	; (c0031c4 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c0030a4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 c0030a6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 c0030aa:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 c0030ae:	4302      	orrs	r2, r0
 c0030b0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 c0030b4:	e6bc      	b.n	c002e30 <HAL_RCCEx_PeriphCLKConfig+0x188>
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c0030b6:	683b      	ldr	r3, [r7, #0]
 c0030b8:	05de      	lsls	r6, r3, #23
 c0030ba:	d497      	bmi.n	c002fec <HAL_RCCEx_PeriphCLKConfig+0x344>
          ret = HAL_TIMEOUT;
 c0030bc:	2503      	movs	r5, #3
 c0030be:	46a8      	mov	r8, r5
 c0030c0:	e7d0      	b.n	c003064 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c0030c2:	1d20      	adds	r0, r4, #4
 c0030c4:	f7ff fcfa 	bl	c002abc <RCCEx_PLLSAI1_Config>
 c0030c8:	6823      	ldr	r3, [r4, #0]
 c0030ca:	4680      	mov	r8, r0
        break;
 c0030cc:	e62e      	b.n	c002d2c <HAL_RCCEx_PeriphCLKConfig+0x84>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c0030ce:	3004      	adds	r0, #4
 c0030d0:	f7ff fcf4 	bl	c002abc <RCCEx_PLLSAI1_Config>
 c0030d4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 c0030d6:	2d00      	cmp	r5, #0
 c0030d8:	f43f ae00 	beq.w	c002cdc <HAL_RCCEx_PeriphCLKConfig+0x34>
 c0030dc:	e037      	b.n	c00314e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 c0030de:	4645      	mov	r5, r8
 c0030e0:	e7c0      	b.n	c003064 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 c0030e2:	4645      	mov	r5, r8
 c0030e4:	e6a4      	b.n	c002e30 <HAL_RCCEx_PeriphCLKConfig+0x188>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c0030e6:	68ca      	ldr	r2, [r1, #12]
 c0030e8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 c0030ec:	60ca      	str	r2, [r1, #12]
 c0030ee:	e6df      	b.n	c002eb0 <HAL_RCCEx_PeriphCLKConfig+0x208>
}
 c0030f0:	4628      	mov	r0, r5
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c0030f2:	68d3      	ldr	r3, [r2, #12]
 c0030f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c0030f8:	60d3      	str	r3, [r2, #12]
}
 c0030fa:	b002      	add	sp, #8
 c0030fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 c003100:	4a30      	ldr	r2, [pc, #192]	; (c0031c4 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c003102:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
 c003106:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 c00310a:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c00310e:	68d1      	ldr	r1, [r2, #12]
 c003110:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 c003114:	60d1      	str	r1, [r2, #12]
 c003116:	e6e9      	b.n	c002eec <HAL_RCCEx_PeriphCLKConfig+0x244>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c003118:	68ca      	ldr	r2, [r1, #12]
 c00311a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 c00311e:	60ca      	str	r2, [r1, #12]
 c003120:	e6f8      	b.n	c002f14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c003122:	4928      	ldr	r1, [pc, #160]	; (c0031c4 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c003124:	68ca      	ldr	r2, [r1, #12]
 c003126:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 c00312a:	60ca      	str	r2, [r1, #12]
    if (ret == HAL_OK)
 c00312c:	f1b8 0f00 	cmp.w	r8, #0
 c003130:	d1d7      	bne.n	c0030e2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 c003132:	e7b6      	b.n	c0030a2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 c003134:	2102      	movs	r1, #2
 c003136:	1d20      	adds	r0, r4, #4
 c003138:	f7ff fcc0 	bl	c002abc <RCCEx_PLLSAI1_Config>
      if (ret != HAL_OK)
 c00313c:	b370      	cbz	r0, c00319c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 c00313e:	4605      	mov	r5, r0
 c003140:	6823      	ldr	r3, [r4, #0]
 c003142:	e6f8      	b.n	c002f36 <HAL_RCCEx_PeriphCLKConfig+0x28e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c003144:	68ca      	ldr	r2, [r1, #12]
 c003146:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 c00314a:	60ca      	str	r2, [r1, #12]
 c00314c:	e6ce      	b.n	c002eec <HAL_RCCEx_PeriphCLKConfig+0x244>
 c00314e:	6823      	ldr	r3, [r4, #0]
 c003150:	e5d5      	b.n	c002cfe <HAL_RCCEx_PeriphCLKConfig+0x56>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c003152:	481c      	ldr	r0, [pc, #112]	; (c0031c4 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
 c003154:	68c2      	ldr	r2, [r0, #12]
 c003156:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 c00315a:	60c2      	str	r2, [r0, #12]
    if (ret == HAL_OK)
 c00315c:	e5c6      	b.n	c002cec <HAL_RCCEx_PeriphCLKConfig+0x44>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c00315e:	4919      	ldr	r1, [pc, #100]	; (c0031c4 <HAL_RCCEx_PeriphCLKConfig+0x51c>)
        break;
 c003160:	46a8      	mov	r8, r5
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c003162:	68ca      	ldr	r2, [r1, #12]
 c003164:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 c003168:	60ca      	str	r2, [r1, #12]
        break;
 c00316a:	e5df      	b.n	c002d2c <HAL_RCCEx_PeriphCLKConfig+0x84>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c00316c:	2101      	movs	r1, #1
 c00316e:	1d20      	adds	r0, r4, #4
 c003170:	f7ff fca4 	bl	c002abc <RCCEx_PLLSAI1_Config>
        if (ret != HAL_OK)
 c003174:	b1c0      	cbz	r0, c0031a8 <HAL_RCCEx_PeriphCLKConfig+0x500>
 c003176:	4605      	mov	r5, r0
 c003178:	6823      	ldr	r3, [r4, #0]
 c00317a:	e699      	b.n	c002eb0 <HAL_RCCEx_PeriphCLKConfig+0x208>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c00317c:	2101      	movs	r1, #1
 c00317e:	1d20      	adds	r0, r4, #4
 c003180:	f7ff fc9c 	bl	c002abc <RCCEx_PLLSAI1_Config>
      if (ret != HAL_OK)
 c003184:	b170      	cbz	r0, c0031a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 c003186:	4605      	mov	r5, r0
 c003188:	6823      	ldr	r3, [r4, #0]
 c00318a:	e6c3      	b.n	c002f14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c00318c:	2101      	movs	r1, #1
 c00318e:	1d20      	adds	r0, r4, #4
 c003190:	f7ff fc94 	bl	c002abc <RCCEx_PLLSAI1_Config>
      if (ret != HAL_OK)
 c003194:	b120      	cbz	r0, c0031a0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 c003196:	4605      	mov	r5, r0
 c003198:	6823      	ldr	r3, [r4, #0]
 c00319a:	e6a7      	b.n	c002eec <HAL_RCCEx_PeriphCLKConfig+0x244>
 c00319c:	6823      	ldr	r3, [r4, #0]
 c00319e:	e6ca      	b.n	c002f36 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 c0031a0:	6823      	ldr	r3, [r4, #0]
 c0031a2:	e6a3      	b.n	c002eec <HAL_RCCEx_PeriphCLKConfig+0x244>
 c0031a4:	6823      	ldr	r3, [r4, #0]
 c0031a6:	e6b5      	b.n	c002f14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 c0031a8:	6823      	ldr	r3, [r4, #0]
 c0031aa:	e681      	b.n	c002eb0 <HAL_RCCEx_PeriphCLKConfig+0x208>
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0031ac:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 c0031b0:	079a      	lsls	r2, r3, #30
 c0031b2:	d583      	bpl.n	c0030bc <HAL_RCCEx_PeriphCLKConfig+0x414>
 c0031b4:	e74c      	b.n	c003050 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 c0031b6:	4613      	mov	r3, r2
 c0031b8:	e74c      	b.n	c003054 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    switch (PeriphClkInit->Sai2ClockSelection)
 c0031ba:	2501      	movs	r5, #1
 c0031bc:	46a8      	mov	r8, r5
 c0031be:	e6f6      	b.n	c002fae <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch (PeriphClkInit->Sai1ClockSelection)
 c0031c0:	2501      	movs	r5, #1
 c0031c2:	e59c      	b.n	c002cfe <HAL_RCCEx_PeriphCLKConfig+0x56>
 c0031c4:	50021000 	.word	0x50021000

0c0031c8 <HAL_UART_DeInit>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 c0031c8:	b1d0      	cbz	r0, c003200 <HAL_UART_DeInit+0x38>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 c0031ca:	2224      	movs	r2, #36	; 0x24
{
 c0031cc:	b538      	push	{r3, r4, r5, lr}

  __HAL_UART_DISABLE(huart);

  huart->Instance->CR1 = 0x0U;
 c0031ce:	2500      	movs	r5, #0
 c0031d0:	4604      	mov	r4, r0
  __HAL_UART_DISABLE(huart);
 c0031d2:	6803      	ldr	r3, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 c0031d4:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 c0031d8:	681a      	ldr	r2, [r3, #0]
 c0031da:	f022 0201 	bic.w	r2, r2, #1
 c0031de:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0U;
 c0031e0:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 c0031e2:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 c0031e4:	609d      	str	r5, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 c0031e6:	f7fd fdcd 	bl	c000d84 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState = HAL_UART_STATE_RESET;
  huart->RxState = HAL_UART_STATE_RESET;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

  __HAL_UNLOCK(huart);
 c0031ea:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 c0031ee:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c

  return HAL_OK;
 c0031f2:	4628      	mov	r0, r5
  huart->gState = HAL_UART_STATE_RESET;
 c0031f4:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 c0031f8:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c0031fc:	66e5      	str	r5, [r4, #108]	; 0x6c
}
 c0031fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 c003200:	2001      	movs	r0, #1
}
 c003202:	4770      	bx	lr

0c003204 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 c003204:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 c003206:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 c003208:	07da      	lsls	r2, r3, #31
 c00320a:	d506      	bpl.n	c00321a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 c00320c:	6801      	ldr	r1, [r0, #0]
 c00320e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 c003210:	684a      	ldr	r2, [r1, #4]
 c003212:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 c003216:	4322      	orrs	r2, r4
 c003218:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 c00321a:	079c      	lsls	r4, r3, #30
 c00321c:	d506      	bpl.n	c00322c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 c00321e:	6801      	ldr	r1, [r0, #0]
 c003220:	6b04      	ldr	r4, [r0, #48]	; 0x30
 c003222:	684a      	ldr	r2, [r1, #4]
 c003224:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 c003228:	4322      	orrs	r2, r4
 c00322a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 c00322c:	0759      	lsls	r1, r3, #29
 c00322e:	d506      	bpl.n	c00323e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 c003230:	6801      	ldr	r1, [r0, #0]
 c003232:	6b44      	ldr	r4, [r0, #52]	; 0x34
 c003234:	684a      	ldr	r2, [r1, #4]
 c003236:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 c00323a:	4322      	orrs	r2, r4
 c00323c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 c00323e:	071a      	lsls	r2, r3, #28
 c003240:	d506      	bpl.n	c003250 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 c003242:	6801      	ldr	r1, [r0, #0]
 c003244:	6b84      	ldr	r4, [r0, #56]	; 0x38
 c003246:	684a      	ldr	r2, [r1, #4]
 c003248:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 c00324c:	4322      	orrs	r2, r4
 c00324e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 c003250:	06dc      	lsls	r4, r3, #27
 c003252:	d506      	bpl.n	c003262 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 c003254:	6801      	ldr	r1, [r0, #0]
 c003256:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 c003258:	688a      	ldr	r2, [r1, #8]
 c00325a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 c00325e:	4322      	orrs	r2, r4
 c003260:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 c003262:	0699      	lsls	r1, r3, #26
 c003264:	d506      	bpl.n	c003274 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 c003266:	6801      	ldr	r1, [r0, #0]
 c003268:	6c04      	ldr	r4, [r0, #64]	; 0x40
 c00326a:	688a      	ldr	r2, [r1, #8]
 c00326c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 c003270:	4322      	orrs	r2, r4
 c003272:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 c003274:	065a      	lsls	r2, r3, #25
 c003276:	d50a      	bpl.n	c00328e <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 c003278:	6801      	ldr	r1, [r0, #0]
 c00327a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 c00327c:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 c00327e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 c003282:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 c003286:	ea42 0204 	orr.w	r2, r2, r4
 c00328a:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 c00328c:	d00b      	beq.n	c0032a6 <UART_AdvFeatureConfig+0xa2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 c00328e:	061b      	lsls	r3, r3, #24
 c003290:	d506      	bpl.n	c0032a0 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 c003292:	6802      	ldr	r2, [r0, #0]
 c003294:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 c003296:	6853      	ldr	r3, [r2, #4]
 c003298:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 c00329c:	430b      	orrs	r3, r1
 c00329e:	6053      	str	r3, [r2, #4]
  }
}
 c0032a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 c0032a4:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 c0032a6:	684a      	ldr	r2, [r1, #4]
 c0032a8:	6c84      	ldr	r4, [r0, #72]	; 0x48
 c0032aa:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 c0032ae:	4322      	orrs	r2, r4
 c0032b0:	604a      	str	r2, [r1, #4]
 c0032b2:	e7ec      	b.n	c00328e <UART_AdvFeatureConfig+0x8a>

0c0032b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 c0032b4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 c0032b6:	2300      	movs	r3, #0
{
 c0032b8:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 c0032ba:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 c0032be:	f7fd ffad 	bl	c00121c <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 c0032c2:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 c0032c4:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 c0032c6:	681a      	ldr	r2, [r3, #0]
 c0032c8:	0711      	lsls	r1, r2, #28
 c0032ca:	d40d      	bmi.n	c0032e8 <UART_CheckIdleState+0x34>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 c0032cc:	681a      	ldr	r2, [r3, #0]
 c0032ce:	0752      	lsls	r2, r2, #29
 c0032d0:	d431      	bmi.n	c003336 <UART_CheckIdleState+0x82>
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c0032d2:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 c0032d4:	2220      	movs	r2, #32

  __HAL_UNLOCK(huart);
 c0032d6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 c0032da:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84

  return HAL_OK;
 c0032de:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 c0032e0:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c0032e4:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 c0032e6:	bd38      	pop	{r3, r4, r5, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c0032e8:	69da      	ldr	r2, [r3, #28]
 c0032ea:	0292      	lsls	r2, r2, #10
 c0032ec:	d4ee      	bmi.n	c0032cc <UART_CheckIdleState+0x18>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c0032ee:	f7fd ff95 	bl	c00121c <HAL_GetTick>
 c0032f2:	1b40      	subs	r0, r0, r5
 c0032f4:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 c0032f8:	d22e      	bcs.n	c003358 <UART_CheckIdleState+0xa4>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 c0032fa:	6823      	ldr	r3, [r4, #0]
 c0032fc:	681a      	ldr	r2, [r3, #0]
 c0032fe:	0750      	lsls	r0, r2, #29
 c003300:	d5f2      	bpl.n	c0032e8 <UART_CheckIdleState+0x34>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 c003302:	69da      	ldr	r2, [r3, #28]
 c003304:	0511      	lsls	r1, r2, #20
 c003306:	d5ef      	bpl.n	c0032e8 <UART_CheckIdleState+0x34>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c003308:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 c00330c:	2500      	movs	r5, #0
          huart->gState = HAL_UART_STATE_READY;
 c00330e:	2220      	movs	r2, #32
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c003310:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c003312:	6819      	ldr	r1, [r3, #0]
      return HAL_TIMEOUT;
 c003314:	2003      	movs	r0, #3
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c003316:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 c00331a:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c00331c:	6899      	ldr	r1, [r3, #8]
 c00331e:	f021 0101 	bic.w	r1, r1, #1
 c003322:	6099      	str	r1, [r3, #8]
          __HAL_UNLOCK(huart);
 c003324:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
          huart->gState = HAL_UART_STATE_READY;
 c003328:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 c00332c:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 c003330:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
}
 c003334:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c003336:	69db      	ldr	r3, [r3, #28]
 c003338:	0258      	lsls	r0, r3, #9
 c00333a:	d4ca      	bmi.n	c0032d2 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c00333c:	f7fd ff6e 	bl	c00121c <HAL_GetTick>
 c003340:	1b40      	subs	r0, r0, r5
 c003342:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 c003346:	d207      	bcs.n	c003358 <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 c003348:	6823      	ldr	r3, [r4, #0]
 c00334a:	681a      	ldr	r2, [r3, #0]
 c00334c:	0751      	lsls	r1, r2, #29
 c00334e:	d5f2      	bpl.n	c003336 <UART_CheckIdleState+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 c003350:	69da      	ldr	r2, [r3, #28]
 c003352:	0512      	lsls	r2, r2, #20
 c003354:	d5ef      	bpl.n	c003336 <UART_CheckIdleState+0x82>
 c003356:	e7d7      	b.n	c003308 <UART_CheckIdleState+0x54>
        __HAL_UNLOCK(huart);
 c003358:	2500      	movs	r5, #0
        huart->gState = HAL_UART_STATE_READY;
 c00335a:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c00335c:	6823      	ldr	r3, [r4, #0]
      return HAL_TIMEOUT;
 c00335e:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c003360:	681a      	ldr	r2, [r3, #0]
 c003362:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 c003366:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c003368:	689a      	ldr	r2, [r3, #8]
 c00336a:	f022 0201 	bic.w	r2, r2, #1
 c00336e:	609a      	str	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 c003370:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 c003374:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 c003378:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
}
 c00337c:	bd38      	pop	{r3, r4, r5, pc}
 c00337e:	bf00      	nop

0c003380 <HAL_UART_Init>:
  if (huart == NULL)
 c003380:	2800      	cmp	r0, #0
 c003382:	f000 81bb 	beq.w	c0036fc <HAL_UART_Init+0x37c>
  if (huart->gState == HAL_UART_STATE_RESET)
 c003386:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 c00338a:	b570      	push	{r4, r5, r6, lr}
 c00338c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 c00338e:	2b00      	cmp	r3, #0
 c003390:	d06d      	beq.n	c00346e <HAL_UART_Init+0xee>
  huart->gState = HAL_UART_STATE_BUSY;
 c003392:	2224      	movs	r2, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 c003394:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 c003396:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 c00339a:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 c00339c:	6925      	ldr	r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 c00339e:	f021 0101 	bic.w	r1, r1, #1
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 c0033a2:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 c0033a4:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 c0033a6:	6818      	ldr	r0, [r3, #0]
 c0033a8:	49c6      	ldr	r1, [pc, #792]	; (c0036c4 <HAL_UART_Init+0x344>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 c0033aa:	432a      	orrs	r2, r5
 c0033ac:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 c0033ae:	4001      	ands	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 c0033b0:	69e0      	ldr	r0, [r4, #28]
 c0033b2:	432a      	orrs	r2, r5
 c0033b4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 c0033b6:	430a      	orrs	r2, r1
 c0033b8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 c0033ba:	685a      	ldr	r2, [r3, #4]
 c0033bc:	68e5      	ldr	r5, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 c0033be:	49c2      	ldr	r1, [pc, #776]	; (c0036c8 <HAL_UART_Init+0x348>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 c0033c0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 c0033c4:	432a      	orrs	r2, r5
 c0033c6:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 c0033c8:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 c0033ca:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 c0033cc:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 c0033ce:	d053      	beq.n	c003478 <HAL_UART_Init+0xf8>
    tmpreg |= huart->Init.OneBitSampling;
 c0033d0:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 c0033d2:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 c0033d6:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 c0033da:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 c0033dc:	430a      	orrs	r2, r1
 c0033de:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 c0033e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 c0033e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 c0033e4:	4db9      	ldr	r5, [pc, #740]	; (c0036cc <HAL_UART_Init+0x34c>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 c0033e6:	f022 020f 	bic.w	r2, r2, #15
 c0033ea:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 c0033ec:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 c0033ee:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 c0033f0:	d029      	beq.n	c003446 <HAL_UART_Init+0xc6>
 c0033f2:	4ab7      	ldr	r2, [pc, #732]	; (c0036d0 <HAL_UART_Init+0x350>)
 c0033f4:	4293      	cmp	r3, r2
 c0033f6:	f000 8092 	beq.w	c00351e <HAL_UART_Init+0x19e>
 c0033fa:	4ab6      	ldr	r2, [pc, #728]	; (c0036d4 <HAL_UART_Init+0x354>)
 c0033fc:	4293      	cmp	r3, r2
 c0033fe:	f000 8153 	beq.w	c0036a8 <HAL_UART_Init+0x328>
 c003402:	4ab5      	ldr	r2, [pc, #724]	; (c0036d8 <HAL_UART_Init+0x358>)
 c003404:	4293      	cmp	r3, r2
 c003406:	f000 80e6 	beq.w	c0035d6 <HAL_UART_Init+0x256>
 c00340a:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 c00340e:	d112      	bne.n	c003436 <HAL_UART_Init+0xb6>
 c003410:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 c003414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003418:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c00341c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c003420:	f000 817f 	beq.w	c003722 <HAL_UART_Init+0x3a2>
 c003424:	f200 80f6 	bhi.w	c003614 <HAL_UART_Init+0x294>
 c003428:	2b00      	cmp	r3, #0
 c00342a:	f000 80e9 	beq.w	c003600 <HAL_UART_Init+0x280>
 c00342e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c003432:	f000 80de 	beq.w	c0035f2 <HAL_UART_Init+0x272>
  huart->NbRxDataToProcess = 1;
 c003436:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 c00343a:	2300      	movs	r3, #0
}
 c00343c:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 c00343e:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 c003442:	66a2      	str	r2, [r4, #104]	; 0x68
}
 c003444:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 c003446:	4ba5      	ldr	r3, [pc, #660]	; (c0036dc <HAL_UART_Init+0x35c>)
 c003448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00344c:	f003 0303 	and.w	r3, r3, #3
 c003450:	3b01      	subs	r3, #1
 c003452:	2b02      	cmp	r3, #2
 c003454:	f240 80db 	bls.w	c00360e <HAL_UART_Init+0x28e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c003458:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 c00345c:	f000 8156 	beq.w	c00370c <HAL_UART_Init+0x38c>
        pclk = HAL_RCC_GetPCLK2Freq();
 c003460:	f7ff fab4 	bl	c0029cc <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 c003464:	2800      	cmp	r0, #0
 c003466:	f000 8118 	beq.w	c00369a <HAL_UART_Init+0x31a>
 c00346a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 c00346c:	e082      	b.n	c003574 <HAL_UART_Init+0x1f4>
    huart->Lock = HAL_UNLOCKED;
 c00346e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 c003472:	f7fd fc3d 	bl	c000cf0 <HAL_UART_MspInit>
 c003476:	e78c      	b.n	c003392 <HAL_UART_Init+0x12>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 c003478:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 c00347c:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 c003480:	430a      	orrs	r2, r1
 c003482:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 c003484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 c003486:	6a61      	ldr	r1, [r4, #36]	; 0x24
 c003488:	f022 020f 	bic.w	r2, r2, #15
  UART_GETCLOCKSOURCE(huart, clocksource);
 c00348c:	4893      	ldr	r0, [pc, #588]	; (c0036dc <HAL_UART_Init+0x35c>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 c00348e:	430a      	orrs	r2, r1
 c003490:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 c003492:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 c003496:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 c00349a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c00349e:	f000 813e 	beq.w	c00371e <HAL_UART_Init+0x39e>
 c0034a2:	d80c      	bhi.n	c0034be <HAL_UART_Init+0x13e>
 c0034a4:	2b00      	cmp	r3, #0
 c0034a6:	f000 8137 	beq.w	c003718 <HAL_UART_Init+0x398>
 c0034aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0034ae:	d1c2      	bne.n	c003436 <HAL_UART_Init+0xb6>
        pclk = HAL_RCC_GetSysClockFreq();
 c0034b0:	f7fe fcb0 	bl	c001e14 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 c0034b4:	2800      	cmp	r0, #0
 c0034b6:	f000 80f0 	beq.w	c00369a <HAL_UART_Init+0x31a>
 c0034ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 c0034bc:	e004      	b.n	c0034c8 <HAL_UART_Init+0x148>
  UART_GETCLOCKSOURCE(huart, clocksource);
 c0034be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 c0034c2:	d1b8      	bne.n	c003436 <HAL_UART_Init+0xb6>
        pclk = (uint32_t) LSE_VALUE;
 c0034c4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 c0034c8:	4b85      	ldr	r3, [pc, #532]	; (c0036e0 <HAL_UART_Init+0x360>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c0034ca:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 c0034cc:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c0034d0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 c0034d4:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c0034d8:	428b      	cmp	r3, r1
 c0034da:	d3ac      	bcc.n	c003436 <HAL_UART_Init+0xb6>
 c0034dc:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 c0034e0:	d8a9      	bhi.n	c003436 <HAL_UART_Init+0xb6>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c0034e2:	2600      	movs	r6, #0
 c0034e4:	2300      	movs	r3, #0
 c0034e6:	4631      	mov	r1, r6
 c0034e8:	f7fc fed2 	bl	c000290 <__aeabi_uldivmod>
 c0034ec:	020b      	lsls	r3, r1, #8
 c0034ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 c0034f2:	0202      	lsls	r2, r0, #8
 c0034f4:	0868      	lsrs	r0, r5, #1
 c0034f6:	1810      	adds	r0, r2, r0
 c0034f8:	f143 0100 	adc.w	r1, r3, #0
 c0034fc:	462a      	mov	r2, r5
 c0034fe:	4633      	mov	r3, r6
 c003500:	f7fc fec6 	bl	c000290 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 c003504:	4b77      	ldr	r3, [pc, #476]	; (c0036e4 <HAL_UART_Init+0x364>)
 c003506:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 c00350a:	429a      	cmp	r2, r3
 c00350c:	d893      	bhi.n	c003436 <HAL_UART_Init+0xb6>
  huart->NbRxDataToProcess = 1;
 c00350e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 c003512:	6822      	ldr	r2, [r4, #0]
 c003514:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 c003516:	e9c4 661c 	strd	r6, r6, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 c00351a:	66a3      	str	r3, [r4, #104]	; 0x68
  return ret;
 c00351c:	e044      	b.n	c0035a8 <HAL_UART_Init+0x228>
  UART_GETCLOCKSOURCE(huart, clocksource);
 c00351e:	4b6f      	ldr	r3, [pc, #444]	; (c0036dc <HAL_UART_Init+0x35c>)
 c003520:	4a71      	ldr	r2, [pc, #452]	; (c0036e8 <HAL_UART_Init+0x368>)
 c003522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003526:	f003 030c 	and.w	r3, r3, #12
 c00352a:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c00352c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 c003530:	d074      	beq.n	c00361c <HAL_UART_Init+0x29c>
    switch (clocksource)
 c003532:	2b08      	cmp	r3, #8
 c003534:	f63f af7f 	bhi.w	c003436 <HAL_UART_Init+0xb6>
 c003538:	a201      	add	r2, pc, #4	; (adr r2, c003540 <HAL_UART_Init+0x1c0>)
 c00353a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c00353e:	bf00      	nop
 c003540:	0c003609 	.word	0x0c003609
 c003544:	0c003461 	.word	0x0c003461
 c003548:	0c0035d3 	.word	0x0c0035d3
 c00354c:	0c003437 	.word	0x0c003437
 c003550:	0c0035fb 	.word	0x0c0035fb
 c003554:	0c003437 	.word	0x0c003437
 c003558:	0c003437 	.word	0x0c003437
 c00355c:	0c003437 	.word	0x0c003437
 c003560:	0c003571 	.word	0x0c003571
  UART_GETCLOCKSOURCE(huart, clocksource);
 c003564:	2b30      	cmp	r3, #48	; 0x30
 c003566:	f47f af66 	bne.w	c003436 <HAL_UART_Init+0xb6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c00356a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 c00356e:	d06e      	beq.n	c00364e <HAL_UART_Init+0x2ce>
 c003570:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c003574:	4b5a      	ldr	r3, [pc, #360]	; (c0036e0 <HAL_UART_Init+0x360>)
 c003576:	6862      	ldr	r2, [r4, #4]
 c003578:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c00357c:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c003580:	fbb0 f3f3 	udiv	r3, r0, r3
 c003584:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 c003588:	fbb3 f3f2 	udiv	r3, r3, r2
 c00358c:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c00358e:	f1a3 0210 	sub.w	r2, r3, #16
 c003592:	428a      	cmp	r2, r1
 c003594:	f63f af4f 	bhi.w	c003436 <HAL_UART_Init+0xb6>
  huart->RxISR = NULL;
 c003598:	2200      	movs	r2, #0
  huart->NbRxDataToProcess = 1;
 c00359a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
        huart->Instance->BRR = usartdiv;
 c00359e:	6820      	ldr	r0, [r4, #0]
 c0035a0:	60c3      	str	r3, [r0, #12]
  huart->TxISR = NULL;
 c0035a2:	e9c4 221c 	strd	r2, r2, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 c0035a6:	66a1      	str	r1, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 c0035a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 c0035aa:	2b00      	cmp	r3, #0
 c0035ac:	d171      	bne.n	c003692 <HAL_UART_Init+0x312>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 c0035ae:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 c0035b0:	4620      	mov	r0, r4
}
 c0035b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 c0035b6:	685a      	ldr	r2, [r3, #4]
 c0035b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 c0035bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 c0035be:	689a      	ldr	r2, [r3, #8]
 c0035c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 c0035c4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 c0035c6:	681a      	ldr	r2, [r3, #0]
 c0035c8:	f042 0201 	orr.w	r2, r2, #1
 c0035cc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 c0035ce:	f7ff be71 	b.w	c0032b4 <UART_CheckIdleState>
        pclk = (uint32_t) HSI_VALUE;
 c0035d2:	4846      	ldr	r0, [pc, #280]	; (c0036ec <HAL_UART_Init+0x36c>)
 c0035d4:	e7ce      	b.n	c003574 <HAL_UART_Init+0x1f4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 c0035d6:	4b41      	ldr	r3, [pc, #260]	; (c0036dc <HAL_UART_Init+0x35c>)
 c0035d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0035dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 c0035e0:	2b80      	cmp	r3, #128	; 0x80
 c0035e2:	f000 809e 	beq.w	c003722 <HAL_UART_Init+0x3a2>
 c0035e6:	f200 8085 	bhi.w	c0036f4 <HAL_UART_Init+0x374>
 c0035ea:	b14b      	cbz	r3, c003600 <HAL_UART_Init+0x280>
 c0035ec:	2b40      	cmp	r3, #64	; 0x40
 c0035ee:	f47f af22 	bne.w	c003436 <HAL_UART_Init+0xb6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c0035f2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 c0035f6:	f000 8083 	beq.w	c003700 <HAL_UART_Init+0x380>
        pclk = HAL_RCC_GetSysClockFreq();
 c0035fa:	f7fe fc0b 	bl	c001e14 <HAL_RCC_GetSysClockFreq>
        break;
 c0035fe:	e731      	b.n	c003464 <HAL_UART_Init+0xe4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c003600:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 c003604:	f000 8085 	beq.w	c003712 <HAL_UART_Init+0x392>
        pclk = HAL_RCC_GetPCLK1Freq();
 c003608:	f7ff f968 	bl	c0028dc <HAL_RCC_GetPCLK1Freq>
        break;
 c00360c:	e72a      	b.n	c003464 <HAL_UART_Init+0xe4>
 c00360e:	4a38      	ldr	r2, [pc, #224]	; (c0036f0 <HAL_UART_Init+0x370>)
 c003610:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 c003612:	e78b      	b.n	c00352c <HAL_UART_Init+0x1ac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 c003614:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c003618:	d0a7      	beq.n	c00356a <HAL_UART_Init+0x1ea>
 c00361a:	e70c      	b.n	c003436 <HAL_UART_Init+0xb6>
    switch (clocksource)
 c00361c:	2b08      	cmp	r3, #8
 c00361e:	f63f af0a 	bhi.w	c003436 <HAL_UART_Init+0xb6>
 c003622:	a201      	add	r2, pc, #4	; (adr r2, c003628 <HAL_UART_Init+0x2a8>)
 c003624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c003628:	0c003713 	.word	0x0c003713
 c00362c:	0c00370d 	.word	0x0c00370d
 c003630:	0c00364d 	.word	0x0c00364d
 c003634:	0c003437 	.word	0x0c003437
 c003638:	0c003701 	.word	0x0c003701
 c00363c:	0c003437 	.word	0x0c003437
 c003640:	0c003437 	.word	0x0c003437
 c003644:	0c003437 	.word	0x0c003437
 c003648:	0c00364f 	.word	0x0c00364f
        pclk = (uint32_t) HSI_VALUE;
 c00364c:	4827      	ldr	r0, [pc, #156]	; (c0036ec <HAL_UART_Init+0x36c>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c00364e:	4b24      	ldr	r3, [pc, #144]	; (c0036e0 <HAL_UART_Init+0x360>)
 c003650:	6862      	ldr	r2, [r4, #4]
 c003652:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 c003656:	0853      	lsrs	r3, r2, #1
 c003658:	fbb0 f0f1 	udiv	r0, r0, r1
 c00365c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 c003660:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c003664:	f64f 73ef 	movw	r3, #65519	; 0xffef
 c003668:	b282      	uxth	r2, r0
 c00366a:	f1a2 0110 	sub.w	r1, r2, #16
 c00366e:	4299      	cmp	r1, r3
 c003670:	f63f aee1 	bhi.w	c003436 <HAL_UART_Init+0xb6>
  huart->NbRxDataToProcess = 1;
 c003674:	f04f 1501 	mov.w	r5, #65537	; 0x10001
  huart->RxISR = NULL;
 c003678:	2100      	movs	r1, #0
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 c00367a:	f020 030f 	bic.w	r3, r0, #15
 c00367e:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 c003680:	6820      	ldr	r0, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 c003682:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 c003686:	4313      	orrs	r3, r2
 c003688:	60c3      	str	r3, [r0, #12]
  huart->TxISR = NULL;
 c00368a:	e9c4 111c 	strd	r1, r1, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 c00368e:	66a5      	str	r5, [r4, #104]	; 0x68
  return ret;
 c003690:	e78a      	b.n	c0035a8 <HAL_UART_Init+0x228>
    UART_AdvFeatureConfig(huart);
 c003692:	4620      	mov	r0, r4
 c003694:	f7ff fdb6 	bl	c003204 <UART_AdvFeatureConfig>
 c003698:	e789      	b.n	c0035ae <HAL_UART_Init+0x22e>
  huart->NbRxDataToProcess = 1;
 c00369a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 c00369e:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 c0036a0:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 c0036a2:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  return ret;
 c0036a6:	e77f      	b.n	c0035a8 <HAL_UART_Init+0x228>
  UART_GETCLOCKSOURCE(huart, clocksource);
 c0036a8:	4b0c      	ldr	r3, [pc, #48]	; (c0036dc <HAL_UART_Init+0x35c>)
 c0036aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0036ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 c0036b2:	2b20      	cmp	r3, #32
 c0036b4:	d035      	beq.n	c003722 <HAL_UART_Init+0x3a2>
 c0036b6:	f63f af55 	bhi.w	c003564 <HAL_UART_Init+0x1e4>
 c0036ba:	2b00      	cmp	r3, #0
 c0036bc:	d0a0      	beq.n	c003600 <HAL_UART_Init+0x280>
 c0036be:	2b10      	cmp	r3, #16
 c0036c0:	d097      	beq.n	c0035f2 <HAL_UART_Init+0x272>
 c0036c2:	e6b8      	b.n	c003436 <HAL_UART_Init+0xb6>
 c0036c4:	cfff69f3 	.word	0xcfff69f3
 c0036c8:	50008000 	.word	0x50008000
 c0036cc:	50013800 	.word	0x50013800
 c0036d0:	50004400 	.word	0x50004400
 c0036d4:	50004800 	.word	0x50004800
 c0036d8:	50004c00 	.word	0x50004c00
 c0036dc:	50021000 	.word	0x50021000
 c0036e0:	0c0069ec 	.word	0x0c0069ec
 c0036e4:	000ffcff 	.word	0x000ffcff
 c0036e8:	0c0069dc 	.word	0x0c0069dc
 c0036ec:	00f42400 	.word	0x00f42400
 c0036f0:	0c0069d8 	.word	0x0c0069d8
 c0036f4:	2bc0      	cmp	r3, #192	; 0xc0
 c0036f6:	f43f af38 	beq.w	c00356a <HAL_UART_Init+0x1ea>
 c0036fa:	e69c      	b.n	c003436 <HAL_UART_Init+0xb6>
}
 c0036fc:	2001      	movs	r0, #1
 c0036fe:	4770      	bx	lr
        pclk = HAL_RCC_GetSysClockFreq();
 c003700:	f7fe fb88 	bl	c001e14 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 c003704:	2800      	cmp	r0, #0
 c003706:	d0c8      	beq.n	c00369a <HAL_UART_Init+0x31a>
 c003708:	6a61      	ldr	r1, [r4, #36]	; 0x24
 c00370a:	e7a0      	b.n	c00364e <HAL_UART_Init+0x2ce>
        pclk = HAL_RCC_GetPCLK2Freq();
 c00370c:	f7ff f95e 	bl	c0029cc <HAL_RCC_GetPCLK2Freq>
        break;
 c003710:	e7f8      	b.n	c003704 <HAL_UART_Init+0x384>
        pclk = HAL_RCC_GetPCLK1Freq();
 c003712:	f7ff f8e3 	bl	c0028dc <HAL_RCC_GetPCLK1Freq>
        break;
 c003716:	e7f5      	b.n	c003704 <HAL_UART_Init+0x384>
        pclk = HAL_RCC_GetPCLK1Freq();
 c003718:	f7ff f8e0 	bl	c0028dc <HAL_RCC_GetPCLK1Freq>
        break;
 c00371c:	e6ca      	b.n	c0034b4 <HAL_UART_Init+0x134>
  UART_GETCLOCKSOURCE(huart, clocksource);
 c00371e:	4804      	ldr	r0, [pc, #16]	; (c003730 <HAL_UART_Init+0x3b0>)
 c003720:	e6d2      	b.n	c0034c8 <HAL_UART_Init+0x148>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c003722:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 c003726:	4802      	ldr	r0, [pc, #8]	; (c003730 <HAL_UART_Init+0x3b0>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c003728:	f47f af24 	bne.w	c003574 <HAL_UART_Init+0x1f4>
 c00372c:	e78f      	b.n	c00364e <HAL_UART_Init+0x2ce>
 c00372e:	bf00      	nop
 c003730:	00f42400 	.word	0x00f42400

0c003734 <UART_WaitOnFlagUntilTimeout>:
{
 c003734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c003738:	4607      	mov	r7, r0
 c00373a:	460e      	mov	r6, r1
 c00373c:	4615      	mov	r5, r2
 c00373e:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c003740:	6804      	ldr	r4, [r0, #0]
{
 c003742:	f8dd 8020 	ldr.w	r8, [sp, #32]
 c003746:	f1b8 3fff 	cmp.w	r8, #4294967295
 c00374a:	d10a      	bne.n	c003762 <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c00374c:	69e3      	ldr	r3, [r4, #28]
 c00374e:	ea36 0303 	bics.w	r3, r6, r3
 c003752:	bf0c      	ite	eq
 c003754:	2301      	moveq	r3, #1
 c003756:	2300      	movne	r3, #0
 c003758:	429d      	cmp	r5, r3
 c00375a:	d0f7      	beq.n	c00374c <UART_WaitOnFlagUntilTimeout+0x18>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 c00375c:	2000      	movs	r0, #0
}
 c00375e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c003762:	69e3      	ldr	r3, [r4, #28]
 c003764:	ea36 0303 	bics.w	r3, r6, r3
 c003768:	bf0c      	ite	eq
 c00376a:	2301      	moveq	r3, #1
 c00376c:	2300      	movne	r3, #0
 c00376e:	429d      	cmp	r5, r3
 c003770:	d1f4      	bne.n	c00375c <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c003772:	f7fd fd53 	bl	c00121c <HAL_GetTick>
 c003776:	eba0 0009 	sub.w	r0, r0, r9
 c00377a:	4540      	cmp	r0, r8
 c00377c:	d820      	bhi.n	c0037c0 <UART_WaitOnFlagUntilTimeout+0x8c>
 c00377e:	f1b8 0f00 	cmp.w	r8, #0
 c003782:	d01d      	beq.n	c0037c0 <UART_WaitOnFlagUntilTimeout+0x8c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 c003784:	683c      	ldr	r4, [r7, #0]
 c003786:	6823      	ldr	r3, [r4, #0]
 c003788:	075a      	lsls	r2, r3, #29
 c00378a:	d5dc      	bpl.n	c003746 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 c00378c:	69e3      	ldr	r3, [r4, #28]
 c00378e:	051b      	lsls	r3, r3, #20
 c003790:	d5d9      	bpl.n	c003746 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c003792:	f44f 6200 	mov.w	r2, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 c003796:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 c003798:	2100      	movs	r1, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c00379a:	6222      	str	r2, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c00379c:	6822      	ldr	r2, [r4, #0]
          return HAL_TIMEOUT;
 c00379e:	2003      	movs	r0, #3
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c0037a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 c0037a4:	6022      	str	r2, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c0037a6:	68a2      	ldr	r2, [r4, #8]
 c0037a8:	f022 0201 	bic.w	r2, r2, #1
 c0037ac:	60a2      	str	r2, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 c0037ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 c0037b2:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 c0037b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 c0037ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 c0037be:	e7ce      	b.n	c00375e <UART_WaitOnFlagUntilTimeout+0x2a>
        huart->gState = HAL_UART_STATE_READY;
 c0037c0:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 c0037c2:	2400      	movs	r4, #0
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c0037c4:	683b      	ldr	r3, [r7, #0]
        __HAL_UNLOCK(huart);
 c0037c6:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c0037c8:	681a      	ldr	r2, [r3, #0]
 c0037ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 c0037ce:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c0037d0:	689a      	ldr	r2, [r3, #8]
 c0037d2:	f022 0201 	bic.w	r2, r2, #1
 c0037d6:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 c0037d8:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 c0037dc:	f887 4080 	strb.w	r4, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 c0037e0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 c0037e4:	e7bb      	b.n	c00375e <UART_WaitOnFlagUntilTimeout+0x2a>
 c0037e6:	bf00      	nop

0c0037e8 <HAL_UART_Transmit>:
{
 c0037e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c0037ec:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 c0037ee:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
{
 c0037f2:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 c0037f4:	2820      	cmp	r0, #32
 c0037f6:	d17b      	bne.n	c0038f0 <HAL_UART_Transmit+0x108>
    if ((pData == NULL) || (Size == 0U))
 c0037f8:	4688      	mov	r8, r1
 c0037fa:	2900      	cmp	r1, #0
 c0037fc:	d048      	beq.n	c003890 <HAL_UART_Transmit+0xa8>
 c0037fe:	4617      	mov	r7, r2
 c003800:	2a00      	cmp	r2, #0
 c003802:	d045      	beq.n	c003890 <HAL_UART_Transmit+0xa8>
 c003804:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 c003806:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 c00380a:	2b01      	cmp	r3, #1
 c00380c:	d070      	beq.n	c0038f0 <HAL_UART_Transmit+0x108>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 c00380e:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 c003810:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 c003812:	f04f 0900 	mov.w	r9, #0
    __HAL_LOCK(huart);
 c003816:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 c00381a:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 c00381e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    tickstart = HAL_GetTick();
 c003822:	f7fd fcfb 	bl	c00121c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c003826:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 c003828:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c00382a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize  = Size;
 c00382e:	f8a4 7054 	strh.w	r7, [r4, #84]	; 0x54
    huart->TxXferCount = Size;
 c003832:	f8a4 7056 	strh.w	r7, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c003836:	d05f      	beq.n	c0038f8 <HAL_UART_Transmit+0x110>
      pdata16bits = NULL;
 c003838:	464f      	mov	r7, r9
    __HAL_UNLOCK(huart);
 c00383a:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 c00383c:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
    __HAL_UNLOCK(huart);
 c003840:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 c003844:	b29b      	uxth	r3, r3
 c003846:	b1b3      	cbz	r3, c003876 <HAL_UART_Transmit+0x8e>
 c003848:	6822      	ldr	r2, [r4, #0]
 c00384a:	1c69      	adds	r1, r5, #1
 c00384c:	d124      	bne.n	c003898 <HAL_UART_Transmit+0xb0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c00384e:	69d3      	ldr	r3, [r2, #28]
 c003850:	061b      	lsls	r3, r3, #24
 c003852:	d5fc      	bpl.n	c00384e <HAL_UART_Transmit+0x66>
      if (pdata8bits == NULL)
 c003854:	f1b8 0f00 	cmp.w	r8, #0
 c003858:	d045      	beq.n	c0038e6 <HAL_UART_Transmit+0xfe>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 c00385a:	f818 3b01 	ldrb.w	r3, [r8], #1
 c00385e:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 c003860:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 c003864:	3b01      	subs	r3, #1
 c003866:	b29b      	uxth	r3, r3
 c003868:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 c00386c:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 c003870:	b29b      	uxth	r3, r3
 c003872:	2b00      	cmp	r3, #0
 c003874:	d1e9      	bne.n	c00384a <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 c003876:	4633      	mov	r3, r6
 c003878:	2200      	movs	r2, #0
 c00387a:	2140      	movs	r1, #64	; 0x40
 c00387c:	4620      	mov	r0, r4
 c00387e:	9500      	str	r5, [sp, #0]
 c003880:	f7ff ff58 	bl	c003734 <UART_WaitOnFlagUntilTimeout>
 c003884:	2800      	cmp	r0, #0
 c003886:	d152      	bne.n	c00392e <HAL_UART_Transmit+0x146>
    huart->gState = HAL_UART_STATE_READY;
 c003888:	2320      	movs	r3, #32
 c00388a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 c00388e:	e000      	b.n	c003892 <HAL_UART_Transmit+0xaa>
      return  HAL_ERROR;
 c003890:	2001      	movs	r0, #1
}
 c003892:	b003      	add	sp, #12
 c003894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c003898:	69d3      	ldr	r3, [r2, #28]
 c00389a:	f013 0980 	ands.w	r9, r3, #128	; 0x80
 c00389e:	d1d9      	bne.n	c003854 <HAL_UART_Transmit+0x6c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c0038a0:	f7fd fcbc 	bl	c00121c <HAL_GetTick>
 c0038a4:	1b80      	subs	r0, r0, r6
 c0038a6:	4285      	cmp	r5, r0
 c0038a8:	d32c      	bcc.n	c003904 <HAL_UART_Transmit+0x11c>
 c0038aa:	b35d      	cbz	r5, c003904 <HAL_UART_Transmit+0x11c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 c0038ac:	6822      	ldr	r2, [r4, #0]
 c0038ae:	6813      	ldr	r3, [r2, #0]
 c0038b0:	075b      	lsls	r3, r3, #29
 c0038b2:	d5ca      	bpl.n	c00384a <HAL_UART_Transmit+0x62>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 c0038b4:	69d3      	ldr	r3, [r2, #28]
 c0038b6:	0518      	lsls	r0, r3, #20
 c0038b8:	d5c7      	bpl.n	c00384a <HAL_UART_Transmit+0x62>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c0038ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 c0038be:	2320      	movs	r3, #32
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c0038c0:	6211      	str	r1, [r2, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c0038c2:	6811      	ldr	r1, [r2, #0]
        return HAL_TIMEOUT;
 c0038c4:	2003      	movs	r0, #3
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c0038c6:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 c0038ca:	6011      	str	r1, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c0038cc:	6891      	ldr	r1, [r2, #8]
 c0038ce:	f021 0101 	bic.w	r1, r1, #1
 c0038d2:	6091      	str	r1, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 c0038d4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 c0038d8:	f884 9080 	strb.w	r9, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 c0038dc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 c0038e0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          return HAL_TIMEOUT;
 c0038e4:	e7d5      	b.n	c003892 <HAL_UART_Transmit+0xaa>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 c0038e6:	f837 3b02 	ldrh.w	r3, [r7], #2
 c0038ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c0038ee:	e7b6      	b.n	c00385e <HAL_UART_Transmit+0x76>
    return HAL_BUSY;
 c0038f0:	2002      	movs	r0, #2
}
 c0038f2:	b003      	add	sp, #12
 c0038f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c0038f8:	6923      	ldr	r3, [r4, #16]
 c0038fa:	2b00      	cmp	r3, #0
 c0038fc:	d19c      	bne.n	c003838 <HAL_UART_Transmit+0x50>
 c0038fe:	4647      	mov	r7, r8
      pdata8bits  = NULL;
 c003900:	4698      	mov	r8, r3
 c003902:	e79a      	b.n	c00383a <HAL_UART_Transmit+0x52>
        huart->gState = HAL_UART_STATE_READY;
 c003904:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 c003906:	2500      	movs	r5, #0
        return HAL_TIMEOUT;
 c003908:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c00390a:	6823      	ldr	r3, [r4, #0]
 c00390c:	681a      	ldr	r2, [r3, #0]
 c00390e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 c003912:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c003914:	689a      	ldr	r2, [r3, #8]
 c003916:	f022 0201 	bic.w	r2, r2, #1
 c00391a:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 c00391c:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
        __HAL_UNLOCK(huart);
 c003920:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 c003924:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
}
 c003928:	b003      	add	sp, #12
 c00392a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 c00392e:	2003      	movs	r0, #3
 c003930:	e7af      	b.n	c003892 <HAL_UART_Transmit+0xaa>
 c003932:	bf00      	nop

0c003934 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 c003934:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 c003938:	2a01      	cmp	r2, #1
 c00393a:	d017      	beq.n	c00396c <HAL_UARTEx_DisableFifoMode+0x38>
 c00393c:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 c00393e:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 c003940:	2100      	movs	r1, #0
{
 c003942:	b430      	push	{r4, r5}

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 c003944:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c003946:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 c003948:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c00394c:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 c00394e:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 c003950:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 c003954:	f024 0401 	bic.w	r4, r4, #1
 c003958:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 c00395a:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c00395c:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c00395e:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80

  return HAL_OK;
 c003962:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 c003964:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 c003968:	bc30      	pop	{r4, r5}
 c00396a:	4770      	bx	lr
  __HAL_LOCK(huart);
 c00396c:	2002      	movs	r0, #2
}
 c00396e:	4770      	bx	lr

0c003970 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c003970:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 c003974:	2a01      	cmp	r2, #1
 c003976:	d033      	beq.n	c0039e0 <HAL_UARTEx_SetTxFifoThreshold+0x70>

  huart->gState = HAL_UART_STATE_BUSY;
 c003978:	4603      	mov	r3, r0
 c00397a:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c00397c:	681a      	ldr	r2, [r3, #0]
{
 c00397e:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 c003980:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c003984:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c003986:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 c003988:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 c00398a:	f020 0001 	bic.w	r0, r0, #1
 c00398e:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 c003990:	6890      	ldr	r0, [r2, #8]
 c003992:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 c003996:	4301      	orrs	r1, r0
 c003998:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 c00399a:	b1f5      	cbz	r5, c0039da <HAL_UARTEx_SetTxFifoThreshold+0x6a>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 c00399c:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 c00399e:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 c0039a0:	4810      	ldr	r0, [pc, #64]	; (c0039e4 <HAL_UARTEx_SetTxFifoThreshold+0x74>)
 c0039a2:	4f11      	ldr	r7, [pc, #68]	; (c0039e8 <HAL_UARTEx_SetTxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 c0039a4:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 c0039a8:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 c0039aa:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 c0039ac:	5d40      	ldrb	r0, [r0, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 c0039ae:	5dbe      	ldrb	r6, [r7, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 c0039b0:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 c0039b2:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 c0039b4:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 c0039b6:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 c0039ba:	fbb0 f0f5 	udiv	r0, r0, r5
  __HAL_UNLOCK(huart);
 c0039be:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 c0039c0:	2620      	movs	r6, #32
 c0039c2:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c0039c6:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
 c0039ca:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 c0039cc:	f883 5080 	strb.w	r5, [r3, #128]	; 0x80
  return HAL_OK;
 c0039d0:	4628      	mov	r0, r5
  huart->gState = HAL_UART_STATE_READY;
 c0039d2:	f8c3 6084 	str.w	r6, [r3, #132]	; 0x84
}
 c0039d6:	bcf0      	pop	{r4, r5, r6, r7}
 c0039d8:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 c0039da:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 c0039dc:	4608      	mov	r0, r1
 c0039de:	e7ee      	b.n	c0039be <HAL_UARTEx_SetTxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 c0039e0:	2002      	movs	r0, #2
}
 c0039e2:	4770      	bx	lr
 c0039e4:	0c006a0c 	.word	0x0c006a0c
 c0039e8:	0c006a04 	.word	0x0c006a04

0c0039ec <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 c0039ec:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 c0039f0:	2a01      	cmp	r2, #1
 c0039f2:	d033      	beq.n	c003a5c <HAL_UARTEx_SetRxFifoThreshold+0x70>
  huart->gState = HAL_UART_STATE_BUSY;
 c0039f4:	4603      	mov	r3, r0
 c0039f6:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c0039f8:	681a      	ldr	r2, [r3, #0]
{
 c0039fa:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 c0039fc:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c003a00:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 c003a02:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 c003a04:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 c003a06:	f020 0001 	bic.w	r0, r0, #1
 c003a0a:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 c003a0c:	6890      	ldr	r0, [r2, #8]
 c003a0e:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 c003a12:	4301      	orrs	r1, r0
 c003a14:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 c003a16:	b1f5      	cbz	r5, c003a56 <HAL_UARTEx_SetRxFifoThreshold+0x6a>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 c003a18:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 c003a1a:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 c003a1c:	4810      	ldr	r0, [pc, #64]	; (c003a60 <HAL_UARTEx_SetRxFifoThreshold+0x74>)
 c003a1e:	4f11      	ldr	r7, [pc, #68]	; (c003a64 <HAL_UARTEx_SetRxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 c003a20:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 c003a24:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 c003a26:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 c003a28:	5d40      	ldrb	r0, [r0, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 c003a2a:	5dbe      	ldrb	r6, [r7, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 c003a2c:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 c003a2e:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 c003a30:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 c003a32:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 c003a36:	fbb0 f0f5 	udiv	r0, r0, r5
  __HAL_UNLOCK(huart);
 c003a3a:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 c003a3c:	2620      	movs	r6, #32
 c003a3e:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c003a42:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
 c003a46:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 c003a48:	f883 5080 	strb.w	r5, [r3, #128]	; 0x80
  return HAL_OK;
 c003a4c:	4628      	mov	r0, r5
  huart->gState = HAL_UART_STATE_READY;
 c003a4e:	f8c3 6084 	str.w	r6, [r3, #132]	; 0x84
}
 c003a52:	bcf0      	pop	{r4, r5, r6, r7}
 c003a54:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 c003a56:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 c003a58:	4608      	mov	r0, r1
 c003a5a:	e7ee      	b.n	c003a3a <HAL_UARTEx_SetRxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 c003a5c:	2002      	movs	r0, #2
}
 c003a5e:	4770      	bx	lr
 c003a60:	0c006a0c 	.word	0x0c006a0c
 c003a64:	0c006a04 	.word	0x0c006a04

0c003a68 <write_flash>:
static uint32_t GetSectorSize(uint32_t Sector);
static uint32_t GetSectorStartAddr(uint32_t Sector);


uint32_t write_flash(uint32_t addr, uint8_t * data, uint32_t data_len)
{
 c003a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c003a6c:	4617      	mov	r7, r2
 c003a6e:	b672      	cpsid	i
    uint8_t byte_data;
    uint64_t double_word_data;
#if 1
    __disable_irq();

    if(data_len)
 c003a70:	b982      	cbnz	r2, c003a94 <write_flash+0x2c>
        rep_word = (data_len / 8);
        rep_byte = (data_len % 8);
    }

    /* Enable the flash control register access */
    HAL_FLASH_Unlock();
 c003a72:	f7fd fcd7 	bl	c001424 <HAL_FLASH_Unlock>

    /* Clear pending flags (if any) */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ECCR_ERRORS | FLASH_FLAG_OPTWERR | FLASH_FLAG_ECCR_ERRORS | FLASH_FLAG_OPTWERR);
 c003a76:	4b30      	ldr	r3, [pc, #192]	; (c003b38 <write_flash+0xd0>)
 c003a78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 c003a7a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 c003a7e:	631a      	str	r2, [r3, #48]	; 0x30
 c003a80:	6a1a      	ldr	r2, [r3, #32]
 c003a82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 c003a86:	621a      	str	r2, [r3, #32]
        {
            return -1; // flash write failed
        }
        addr += rep_byte;
    }
    HAL_FLASH_Lock();
 c003a88:	f7fd fcec 	bl	c001464 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 c003a8c:	b662      	cpsie	i

    __enable_irq();
#endif
    return data_len;
 c003a8e:	4638      	mov	r0, r7
}
 c003a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rep_word = (data_len / 8);
 c003a94:	4604      	mov	r4, r0
 c003a96:	4688      	mov	r8, r1
    HAL_FLASH_Unlock();
 c003a98:	f7fd fcc4 	bl	c001424 <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ECCR_ERRORS | FLASH_FLAG_OPTWERR | FLASH_FLAG_ECCR_ERRORS | FLASH_FLAG_OPTWERR);
 c003a9c:	4b26      	ldr	r3, [pc, #152]	; (c003b38 <write_flash+0xd0>)
        rep_word = (data_len / 8);
 c003a9e:	ea4f 09d7 	mov.w	r9, r7, lsr #3
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ECCR_ERRORS | FLASH_FLAG_OPTWERR | FLASH_FLAG_ECCR_ERRORS | FLASH_FLAG_OPTWERR);
 c003aa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
        rep_byte = (data_len % 8);
 c003aa4:	f007 0a07 	and.w	sl, r7, #7
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ECCR_ERRORS | FLASH_FLAG_OPTWERR | FLASH_FLAG_ECCR_ERRORS | FLASH_FLAG_OPTWERR);
 c003aa8:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 c003aac:	631a      	str	r2, [r3, #48]	; 0x30
 c003aae:	6a1a      	ldr	r2, [r3, #32]
 c003ab0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 c003ab4:	621a      	str	r2, [r3, #32]
    for(i = 0 ; i < rep_word ; i++)
 c003ab6:	f1b9 0f00 	cmp.w	r9, #0
 c003aba:	d013      	beq.n	c003ae4 <write_flash+0x7c>
 c003abc:	f1a8 0508 	sub.w	r5, r8, #8
 c003ac0:	eb04 06c9 	add.w	r6, r4, r9, lsl #3
 c003ac4:	e001      	b.n	c003aca <write_flash+0x62>
 c003ac6:	42a6      	cmp	r6, r4
 c003ac8:	d00d      	beq.n	c003ae6 <write_flash+0x7e>
        if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, addr, double_word_data) == HAL_OK)
 c003aca:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 c003ace:	4621      	mov	r1, r4
 c003ad0:	2001      	movs	r0, #1
 c003ad2:	f7fd fc69 	bl	c0013a8 <HAL_FLASH_Program>
        addr += 8;
 c003ad6:	3408      	adds	r4, #8
        if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, addr, double_word_data) == HAL_OK)
 c003ad8:	2800      	cmp	r0, #0
 c003ada:	d0f4      	beq.n	c003ac6 <write_flash+0x5e>
            return -1; // flash write failed
 c003adc:	f04f 30ff 	mov.w	r0, #4294967295
}
 c003ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for(i = 0 ; i < rep_word ; i++)
 c003ae4:	4626      	mov	r6, r4
    if(rep_byte)
 c003ae6:	f1ba 0f00 	cmp.w	sl, #0
 c003aea:	d0cd      	beq.n	c003a88 <write_flash+0x20>
        double_word_data |= (0xffffffffffffffff << (8 * rep_byte)); // padding remain bytes to 0xff
 c003aec:	f04f 31ff 	mov.w	r1, #4294967295
 c003af0:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 c003af4:	f1aa 0220 	sub.w	r2, sl, #32
 c003af8:	fa01 f202 	lsl.w	r2, r1, r2
 c003afc:	fa01 f30a 	lsl.w	r3, r1, sl
 c003b00:	f1ca 0020 	rsb	r0, sl, #32
 c003b04:	4313      	orrs	r3, r2
        double_word_data = *((uint64_t *)data + rep_word);
 c003b06:	eb08 02c9 	add.w	r2, r8, r9, lsl #3
        double_word_data |= (0xffffffffffffffff << (8 * rep_byte)); // padding remain bytes to 0xff
 c003b0a:	fa21 f000 	lsr.w	r0, r1, r0
        double_word_data = *((uint64_t *)data + rep_word);
 c003b0e:	6854      	ldr	r4, [r2, #4]
 c003b10:	f858 2039 	ldr.w	r2, [r8, r9, lsl #3]
        double_word_data |= (0xffffffffffffffff << (8 * rep_byte)); // padding remain bytes to 0xff
 c003b14:	4303      	orrs	r3, r0
 c003b16:	fa01 fa0a 	lsl.w	sl, r1, sl
        if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, addr, double_word_data) != HAL_OK)
 c003b1a:	2001      	movs	r0, #1
 c003b1c:	4631      	mov	r1, r6
 c003b1e:	4323      	orrs	r3, r4
 c003b20:	ea4a 0202 	orr.w	r2, sl, r2
 c003b24:	f7fd fc40 	bl	c0013a8 <HAL_FLASH_Program>
 c003b28:	2800      	cmp	r0, #0
 c003b2a:	d1d7      	bne.n	c003adc <write_flash+0x74>
    HAL_FLASH_Lock();
 c003b2c:	f7fd fc9a 	bl	c001464 <HAL_FLASH_Lock>
 c003b30:	b662      	cpsie	i
    return data_len;
 c003b32:	4638      	mov	r0, r7
 c003b34:	e7ac      	b.n	c003a90 <write_flash+0x28>
 c003b36:	bf00      	nop
 c003b38:	50022000 	.word	0x50022000

0c003b3c <read_flash>:
    uint32_t i = 0;
    uint32_t read_len = 0;

//    if((addr + data_len) > FLASH_END_ADDR) return 0;

    for(i = 0; i < data_len; i++)
 c003b3c:	2a00      	cmp	r2, #0
 c003b3e:	d039      	beq.n	c003bb4 <read_flash+0x78>
 c003b40:	1d0b      	adds	r3, r1, #4
 c003b42:	4283      	cmp	r3, r0
 c003b44:	bf8c      	ite	hi
 c003b46:	2300      	movhi	r3, #0
 c003b48:	2301      	movls	r3, #1
{
 c003b4a:	b470      	push	{r4, r5, r6}
 c003b4c:	1d04      	adds	r4, r0, #4
 c003b4e:	42a1      	cmp	r1, r4
 c003b50:	bf28      	it	cs
 c003b52:	f043 0301 	orrcs.w	r3, r3, #1
 c003b56:	b303      	cbz	r3, c003b9a <read_flash+0x5e>
 c003b58:	1e53      	subs	r3, r2, #1
 c003b5a:	2b07      	cmp	r3, #7
 c003b5c:	d91d      	bls.n	c003b9a <read_flash+0x5e>
    for(i = 0; i < data_len; i++)
 c003b5e:	4603      	mov	r3, r0
 c003b60:	f022 0503 	bic.w	r5, r2, #3
 c003b64:	4405      	add	r5, r0
 c003b66:	1a0e      	subs	r6, r1, r0
    {
        data[i] = *(uint8_t *) (addr + i);
 c003b68:	681c      	ldr	r4, [r3, #0]
 c003b6a:	50f4      	str	r4, [r6, r3]
    for(i = 0; i < data_len; i++)
 c003b6c:	3304      	adds	r3, #4
 c003b6e:	42ab      	cmp	r3, r5
 c003b70:	d1fa      	bne.n	c003b68 <read_flash+0x2c>
 c003b72:	0794      	lsls	r4, r2, #30
 c003b74:	f022 0303 	bic.w	r3, r2, #3
 c003b78:	d00c      	beq.n	c003b94 <read_flash+0x58>
        data[i] = *(uint8_t *) (addr + i);
 c003b7a:	5cc5      	ldrb	r5, [r0, r3]
        read_len++;
 c003b7c:	1c5c      	adds	r4, r3, #1
    for(i = 0; i < data_len; i++)
 c003b7e:	42a2      	cmp	r2, r4
        data[i] = *(uint8_t *) (addr + i);
 c003b80:	54cd      	strb	r5, [r1, r3]
    for(i = 0; i < data_len; i++)
 c003b82:	d913      	bls.n	c003bac <read_flash+0x70>
        data[i] = *(uint8_t *) (addr + i);
 c003b84:	5d06      	ldrb	r6, [r0, r4]
        read_len++;
 c003b86:	1c9d      	adds	r5, r3, #2
    for(i = 0; i < data_len; i++)
 c003b88:	42aa      	cmp	r2, r5
        data[i] = *(uint8_t *) (addr + i);
 c003b8a:	550e      	strb	r6, [r1, r4]
    for(i = 0; i < data_len; i++)
 c003b8c:	d90e      	bls.n	c003bac <read_flash+0x70>
        data[i] = *(uint8_t *) (addr + i);
 c003b8e:	4613      	mov	r3, r2
 c003b90:	5d40      	ldrb	r0, [r0, r5]
 c003b92:	5548      	strb	r0, [r1, r5]
    }

    return read_len;
}
 c003b94:	4618      	mov	r0, r3
 c003b96:	bc70      	pop	{r4, r5, r6}
 c003b98:	4770      	bx	lr
 c003b9a:	1c43      	adds	r3, r0, #1
 c003b9c:	1e4c      	subs	r4, r1, #1
        data[i] = *(uint8_t *) (addr + i);
 c003b9e:	1a58      	subs	r0, r3, r1
 c003ba0:	18a1      	adds	r1, r4, r2
 c003ba2:	5d03      	ldrb	r3, [r0, r4]
 c003ba4:	f804 3f01 	strb.w	r3, [r4, #1]!
    for(i = 0; i < data_len; i++)
 c003ba8:	428c      	cmp	r4, r1
 c003baa:	d1fa      	bne.n	c003ba2 <read_flash+0x66>
}
 c003bac:	bc70      	pop	{r4, r5, r6}
    for(i = 0; i < data_len; i++)
 c003bae:	4613      	mov	r3, r2
}
 c003bb0:	4618      	mov	r0, r3
 c003bb2:	4770      	bx	lr
 c003bb4:	4610      	mov	r0, r2
 c003bb6:	4770      	bx	lr

0c003bb8 <erase_flash_page>:


int8_t erase_flash_page(uint32_t addr)
{
 c003bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 c003bba:	4604      	mov	r4, r0
 c003bbc:	b087      	sub	sp, #28
  __ASM volatile ("cpsid i" : : : "memory");
 c003bbe:	b672      	cpsid	i
    /* Enable the flash control register access */
    HAL_FLASH_Unlock();

    pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
    pEraseInit.Banks = GetBank(addr);
    pEraseInit.NbPages = 1;
 c003bc0:	2501      	movs	r5, #1
    pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 c003bc2:	2602      	movs	r6, #2
 c003bc4:	2701      	movs	r7, #1
uint32_t GetPage(uint32_t Addr)
{
    uint32_t page = 0;

#if USE_SINGLE_BANK
    page = (Addr - FLASH_BASE) / FLASH_BANK_PAGE_SIZE;
 c003bc6:	f104 4474 	add.w	r4, r4, #4093640704	; 0xf4000000
 c003bca:	0b24      	lsrs	r4, r4, #12
    HAL_FLASH_Unlock();
 c003bcc:	f7fd fc2a 	bl	c001424 <HAL_FLASH_Unlock>
    {
    /* Bank 2 */
    page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
    }
#endif
    PRT_INFO("page = %d\r\n", page);
 c003bd0:	4910      	ldr	r1, [pc, #64]	; (c003c14 <erase_flash_page+0x5c>)
 c003bd2:	4811      	ldr	r0, [pc, #68]	; (c003c18 <erase_flash_page+0x60>)
 c003bd4:	4622      	mov	r2, r4
    pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 c003bd6:	e9cd 6702 	strd	r6, r7, [sp, #8]
    pEraseInit.NbPages = 1;
 c003bda:	9505      	str	r5, [sp, #20]
    PRT_INFO("page = %d\r\n", page);
 c003bdc:	f000 f840 	bl	c003c60 <WIZ_SECURE_printf>
    ret = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 c003be0:	a901      	add	r1, sp, #4
 c003be2:	a802      	add	r0, sp, #8
    pEraseInit.Page = GetPage(addr);// (addr - FLASH_START_ADDR_BANK2) / FLASH_PAGE_SIZE;
 c003be4:	9404      	str	r4, [sp, #16]
    ret = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 c003be6:	f7fd fc95 	bl	c001514 <HAL_FLASHEx_Erase>
    if(ret != HAL_OK )
 c003bea:	b928      	cbnz	r0, c003bf8 <erase_flash_page+0x40>
    HAL_FLASH_Lock();
 c003bec:	f7fd fc3a 	bl	c001464 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 c003bf0:	b662      	cpsie	i
    return 1;
 c003bf2:	4628      	mov	r0, r5
}
 c003bf4:	b007      	add	sp, #28
 c003bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 c003bf8:	4604      	mov	r4, r0
        HAL_FLASH_Lock();
 c003bfa:	f7fd fc33 	bl	c001464 <HAL_FLASH_Lock>
 c003bfe:	b662      	cpsie	i
        PRT_ERR("ret = %d\r\n", ret);
 c003c00:	4906      	ldr	r1, [pc, #24]	; (c003c1c <erase_flash_page+0x64>)
 c003c02:	4622      	mov	r2, r4
 c003c04:	4806      	ldr	r0, [pc, #24]	; (c003c20 <erase_flash_page+0x68>)
 c003c06:	f000 f82b 	bl	c003c60 <WIZ_SECURE_printf>
        return -1;
 c003c0a:	f04f 30ff 	mov.w	r0, #4294967295
}
 c003c0e:	b007      	add	sp, #28
 c003c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 c003c12:	bf00      	nop
 c003c14:	0c006a58 	.word	0x0c006a58
 c003c18:	0c006a14 	.word	0x0c006a14
 c003c1c:	0c006a44 	.word	0x0c006a44
 c003c20:	0c006a2c 	.word	0x0c006a2c

0c003c24 <read_storage>:

uint32_t read_storage(teDATASTORAGE stype, uint32_t addr, void *data, uint16_t size)
{
    uint32_t ret_len;
    
    switch(stype)
 c003c24:	2803      	cmp	r0, #3
 c003c26:	d810      	bhi.n	c003c4a <read_storage+0x26>
 c003c28:	2801      	cmp	r0, #1
{
 c003c2a:	b420      	push	{r5}
 c003c2c:	460d      	mov	r5, r1
 c003c2e:	4611      	mov	r1, r2
 c003c30:	461a      	mov	r2, r3
    switch(stype)
 c003c32:	d805      	bhi.n	c003c40 <read_storage+0x1c>
 c003c34:	b158      	cbz	r0, c003c4e <read_storage+0x2a>
            //ret_len = read_flash(OTP_BASE, data, size);
            ret_len = read_flash(FLASH_MAC_ADDR, data, size);
            break;
        
        case STORAGE_CONFIG:
            ret_len = read_flash(FLASH_DEV_INFO_ADDR, data, size);
 c003c36:	4808      	ldr	r0, [pc, #32]	; (c003c58 <read_storage+0x34>)
        default:
            break;
    }
    
    return ret_len;
}
 c003c38:	f85d 5b04 	ldr.w	r5, [sp], #4
            ret_len = read_flash(FLASH_DEV_INFO_ADDR, data, size);
 c003c3c:	f7ff bf7e 	b.w	c003b3c <read_flash>
            ret_len = read_flash(addr, data, size);
 c003c40:	4628      	mov	r0, r5
}
 c003c42:	f85d 5b04 	ldr.w	r5, [sp], #4
            ret_len = read_flash(addr, data, size);
 c003c46:	f7ff bf79 	b.w	c003b3c <read_flash>
}
 c003c4a:	2000      	movs	r0, #0
 c003c4c:	4770      	bx	lr
            ret_len = read_flash(FLASH_MAC_ADDR, data, size);
 c003c4e:	4803      	ldr	r0, [pc, #12]	; (c003c5c <read_storage+0x38>)
}
 c003c50:	f85d 5b04 	ldr.w	r5, [sp], #4
            ret_len = read_flash(FLASH_MAC_ADDR, data, size);
 c003c54:	f7ff bf72 	b.w	c003b3c <read_flash>
 c003c58:	08070000 	.word	0x08070000
 c003c5c:	08074000 	.word	0x08074000

0c003c60 <WIZ_SECURE_printf>:
 c003c60:	b40f      	push	{r0, r1, r2, r3}
 c003c62:	2100      	movs	r1, #0
 c003c64:	b530      	push	{r4, r5, lr}
 c003c66:	f6ad 0d0c 	subw	sp, sp, #2060	; 0x80c
 c003c6a:	f60d 0418 	addw	r4, sp, #2072	; 0x818
 c003c6e:	f854 5b04 	ldr.w	r5, [r4], #4
 c003c72:	f240 72fc 	movw	r2, #2044	; 0x7fc
 c003c76:	a803      	add	r0, sp, #12
 c003c78:	9102      	str	r1, [sp, #8]
 c003c7a:	f001 fcca 	bl	c005612 <memset>
 c003c7e:	4629      	mov	r1, r5
 c003c80:	4622      	mov	r2, r4
 c003c82:	a802      	add	r0, sp, #8
 c003c84:	9401      	str	r4, [sp, #4]
 c003c86:	f001 fe2b 	bl	c0058e0 <vsiprintf>
 c003c8a:	a802      	add	r0, sp, #8
 c003c8c:	f7fc fed4 	bl	c000a38 <__acle_se_SECURE_printf>
 c003c90:	f60d 0d0c 	addw	sp, sp, #2060	; 0x80c
 c003c94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 c003c98:	b004      	add	sp, #16
 c003c9a:	4770      	bx	lr

0c003c9c <key_init>:

uint8_t aes128_key[16];
uint8_t aes_buffer[AES_BUF_SIZE];

void key_init(void)
{
 c003c9c:	b410      	push	{r4}
	//it is dummy key, Users have to create their own key.
	memset(aes128_key, 0x11, 4);
	memset(&aes128_key[4], 0x22, 4);
 c003c9e:	f04f 3022 	mov.w	r0, #572662306	; 0x22222222
	memset(aes128_key, 0x11, 4);
 c003ca2:	f04f 3411 	mov.w	r4, #286331153	; 0x11111111
	memset(&aes128_key[8], 0x33, 4);
 c003ca6:	f04f 3133 	mov.w	r1, #858993459	; 0x33333333
	memset(&aes128_key[12], 0x44, 4);
 c003caa:	f04f 3244 	mov.w	r2, #1145324612	; 0x44444444
	memset(aes128_key, 0x11, 4);
 c003cae:	4b04      	ldr	r3, [pc, #16]	; (c003cc0 <key_init+0x24>)
 c003cb0:	601c      	str	r4, [r3, #0]
	memset(&aes128_key[4], 0x22, 4);
 c003cb2:	6058      	str	r0, [r3, #4]
	memset(&aes128_key[8], 0x33, 4);
 c003cb4:	6099      	str	r1, [r3, #8]
	memset(&aes128_key[12], 0x44, 4);
 c003cb6:	60da      	str	r2, [r3, #12]
}
 c003cb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 c003cbc:	4770      	bx	lr
 c003cbe:	bf00      	nop
 c003cc0:	30002384 	.word	0x30002384

0c003cc4 <encrypt_aes_128>:
    else
        return src_len;
}

int encrypt_aes_128(uint8_t *data_in, uint32_t data_len)
{
 c003cc4:	b570      	push	{r4, r5, r6, lr}
    uint8_t *key_ptr = key_get();
    int ret;
    uint32_t enc_len;
    //uint8_t *aes_output;

    unsigned char iv[16]={0xb2, 0x4b, 0xf2, 0xf7, 0x7a, 0xc5, 0xec, 0x0c, 0x5e, 0x1f, 0x4d, 0xc1, 0xae, 0x46, 0x5e, 0x75};
 c003cc6:	4b1a      	ldr	r3, [pc, #104]	; (c003d30 <encrypt_aes_128+0x6c>)
{
 c003cc8:	b0cc      	sub	sp, #304	; 0x130
    unsigned char iv[16]={0xb2, 0x4b, 0xf2, 0xf7, 0x7a, 0xc5, 0xec, 0x0c, 0x5e, 0x1f, 0x4d, 0xc1, 0xae, 0x46, 0x5e, 0x75};
 c003cca:	ad02      	add	r5, sp, #8
{
 c003ccc:	4606      	mov	r6, r0
 c003cce:	460c      	mov	r4, r1
    unsigned char iv[16]={0xb2, 0x4b, 0xf2, 0xf7, 0x7a, 0xc5, 0xec, 0x0c, 0x5e, 0x1f, 0x4d, 0xc1, 0xae, 0x46, 0x5e, 0x75};
 c003cd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 c003cd2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    mbedtls_aes_init(&wiz_aes);
 c003cd6:	a806      	add	r0, sp, #24
 c003cd8:	f000 fa9e 	bl	c004218 <mbedtls_aes_init>
    ret = mbedtls_aes_setkey_enc(&wiz_aes, key_ptr, 128);
 c003cdc:	2280      	movs	r2, #128	; 0x80
 c003cde:	4915      	ldr	r1, [pc, #84]	; (c003d34 <encrypt_aes_128+0x70>)
 c003ce0:	a806      	add	r0, sp, #24
 c003ce2:	f000 faa5 	bl	c004230 <mbedtls_aes_setkey_enc>
    if (ret < 0)
 c003ce6:	2800      	cmp	r0, #0
 c003ce8:	db1c      	blt.n	c003d24 <encrypt_aes_128+0x60>
    {
        mbedtls_aes_free(&wiz_aes);
        return -1;
    }
   
    memset(aes_buffer, 0x00, AES_BUF_SIZE);
 c003cea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 c003cee:	2100      	movs	r1, #0
 c003cf0:	4811      	ldr	r0, [pc, #68]	; (c003d38 <encrypt_aes_128+0x74>)
 c003cf2:	f001 fc8e 	bl	c005612 <memset>
    if (a)
 c003cf6:	f014 030f 	ands.w	r3, r4, #15
        return (16 - a + src_len);
 c003cfa:	bf18      	it	ne
 c003cfc:	3410      	addne	r4, #16
    enc_len = cal_enc_len(data_len);
    
    ret = mbedtls_aes_crypt_cbc(&wiz_aes, MBEDTLS_AES_ENCRYPT, enc_len, iv, data_in, aes_buffer);
 c003cfe:	490e      	ldr	r1, [pc, #56]	; (c003d38 <encrypt_aes_128+0x74>)
        return (16 - a + src_len);
 c003d00:	bf18      	it	ne
 c003d02:	1ae4      	subne	r4, r4, r3
    ret = mbedtls_aes_crypt_cbc(&wiz_aes, MBEDTLS_AES_ENCRYPT, enc_len, iv, data_in, aes_buffer);
 c003d04:	4622      	mov	r2, r4
 c003d06:	9101      	str	r1, [sp, #4]
 c003d08:	462b      	mov	r3, r5
 c003d0a:	2101      	movs	r1, #1
 c003d0c:	9600      	str	r6, [sp, #0]
 c003d0e:	a806      	add	r0, sp, #24
 c003d10:	f001 fb0a 	bl	c005328 <mbedtls_aes_crypt_cbc>
    if (ret < 0)
 c003d14:	1e04      	subs	r4, r0, #0
 c003d16:	db05      	blt.n	c003d24 <encrypt_aes_128+0x60>
    {
        mbedtls_aes_free(&wiz_aes);
        return -1;
    }

    mbedtls_aes_free(&wiz_aes);
 c003d18:	a806      	add	r0, sp, #24
 c003d1a:	f000 fa83 	bl	c004224 <mbedtls_aes_free>
    return ret;
}
 c003d1e:	4620      	mov	r0, r4
 c003d20:	b04c      	add	sp, #304	; 0x130
 c003d22:	bd70      	pop	{r4, r5, r6, pc}
        mbedtls_aes_free(&wiz_aes);
 c003d24:	a806      	add	r0, sp, #24
 c003d26:	f000 fa7d 	bl	c004224 <mbedtls_aes_free>
        return -1;
 c003d2a:	f04f 34ff 	mov.w	r4, #4294967295
 c003d2e:	e7f6      	b.n	c003d1e <encrypt_aes_128+0x5a>
 c003d30:	0c006a60 	.word	0x0c006a60
 c003d34:	30002384 	.word	0x30002384
 c003d38:	30002394 	.word	0x30002394

0c003d3c <decrypt_aes_128>:

int decrypt_aes_128(uint8_t *data_in, uint32_t data_len)
{
 c003d3c:	b570      	push	{r4, r5, r6, lr}
    mbedtls_aes_context wiz_aes;
    uint8_t *key_ptr = key_get();
    uint32_t enc_len;
    int ret;

    unsigned char iv[16]={0xb2, 0x4b, 0xf2, 0xf7, 0x7a, 0xc5, 0xec, 0x0c, 0x5e, 0x1f, 0x4d, 0xc1, 0xae, 0x46, 0x5e, 0x75};
 c003d3e:	4b1a      	ldr	r3, [pc, #104]	; (c003da8 <decrypt_aes_128+0x6c>)
{
 c003d40:	b0cc      	sub	sp, #304	; 0x130
    unsigned char iv[16]={0xb2, 0x4b, 0xf2, 0xf7, 0x7a, 0xc5, 0xec, 0x0c, 0x5e, 0x1f, 0x4d, 0xc1, 0xae, 0x46, 0x5e, 0x75};
 c003d42:	ad02      	add	r5, sp, #8
{
 c003d44:	4606      	mov	r6, r0
 c003d46:	460c      	mov	r4, r1
    unsigned char iv[16]={0xb2, 0x4b, 0xf2, 0xf7, 0x7a, 0xc5, 0xec, 0x0c, 0x5e, 0x1f, 0x4d, 0xc1, 0xae, 0x46, 0x5e, 0x75};
 c003d48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 c003d4a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

    //aes_output = malloc(4096);
    mbedtls_aes_init(&wiz_aes);
 c003d4e:	a806      	add	r0, sp, #24
 c003d50:	f000 fa62 	bl	c004218 <mbedtls_aes_init>
    ret = mbedtls_aes_setkey_dec(&wiz_aes, key_ptr, 128);
 c003d54:	2280      	movs	r2, #128	; 0x80
 c003d56:	4915      	ldr	r1, [pc, #84]	; (c003dac <decrypt_aes_128+0x70>)
 c003d58:	a806      	add	r0, sp, #24
 c003d5a:	f000 fdc9 	bl	c0048f0 <mbedtls_aes_setkey_dec>
    if (ret < 0)
 c003d5e:	2800      	cmp	r0, #0
 c003d60:	db1c      	blt.n	c003d9c <decrypt_aes_128+0x60>
    {
        mbedtls_aes_free(&wiz_aes);
        return -1;
    }
    memset(aes_buffer, 0x00, AES_BUF_SIZE);
 c003d62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 c003d66:	2100      	movs	r1, #0
 c003d68:	4811      	ldr	r0, [pc, #68]	; (c003db0 <decrypt_aes_128+0x74>)
 c003d6a:	f001 fc52 	bl	c005612 <memset>
    if (a)
 c003d6e:	f014 030f 	ands.w	r3, r4, #15
        return (16 - a + src_len);
 c003d72:	bf18      	it	ne
 c003d74:	3410      	addne	r4, #16
    enc_len = cal_enc_len(data_len);
    
    ret = mbedtls_aes_crypt_cbc(&wiz_aes, MBEDTLS_AES_DECRYPT, enc_len, iv, data_in, aes_buffer);
 c003d76:	490e      	ldr	r1, [pc, #56]	; (c003db0 <decrypt_aes_128+0x74>)
        return (16 - a + src_len);
 c003d78:	bf18      	it	ne
 c003d7a:	1ae4      	subne	r4, r4, r3
    ret = mbedtls_aes_crypt_cbc(&wiz_aes, MBEDTLS_AES_DECRYPT, enc_len, iv, data_in, aes_buffer);
 c003d7c:	4622      	mov	r2, r4
 c003d7e:	9101      	str	r1, [sp, #4]
 c003d80:	462b      	mov	r3, r5
 c003d82:	2100      	movs	r1, #0
 c003d84:	9600      	str	r6, [sp, #0]
 c003d86:	a806      	add	r0, sp, #24
 c003d88:	f001 face 	bl	c005328 <mbedtls_aes_crypt_cbc>
    if (ret < 0)
 c003d8c:	1e04      	subs	r4, r0, #0
 c003d8e:	db05      	blt.n	c003d9c <decrypt_aes_128+0x60>
    {
        mbedtls_aes_free(&wiz_aes);
        return -1;
    }
    mbedtls_aes_free(&wiz_aes);
 c003d90:	a806      	add	r0, sp, #24
 c003d92:	f000 fa47 	bl	c004224 <mbedtls_aes_free>
    return ret;
}
 c003d96:	4620      	mov	r0, r4
 c003d98:	b04c      	add	sp, #304	; 0x130
 c003d9a:	bd70      	pop	{r4, r5, r6, pc}
        mbedtls_aes_free(&wiz_aes);
 c003d9c:	a806      	add	r0, sp, #24
 c003d9e:	f000 fa41 	bl	c004224 <mbedtls_aes_free>
        return -1;
 c003da2:	f04f 34ff 	mov.w	r4, #4294967295
 c003da6:	e7f6      	b.n	c003d96 <decrypt_aes_128+0x5a>
 c003da8:	0c006a60 	.word	0x0c006a60
 c003dac:	30002384 	.word	0x30002384
 c003db0:	30002394 	.word	0x30002394

0c003db4 <secure_read_storage>:


int secure_read_storage(teDATASTORAGE stype, void *data, uint16_t size)
{
 c003db4:	b530      	push	{r4, r5, lr}
 c003db6:	3801      	subs	r0, #1
 c003db8:	460d      	mov	r5, r1
 c003dba:	b083      	sub	sp, #12
 c003dbc:	280a      	cmp	r0, #10
 c003dbe:	d807      	bhi.n	c003dd0 <secure_read_storage+0x1c>
 c003dc0:	e8df f000 	tbb	[pc, r0]
 c003dc4:	06060619 	.word	0x06060619
 c003dc8:	06060606 	.word	0x06060606
 c003dcc:	211d      	.short	0x211d
 c003dce:	0b          	.byte	0x0b
 c003dcf:	00          	.byte	0x00
 c003dd0:	f04f 34ff 	mov.w	r4, #4294967295
        default:
            break;
    }
    
    return ret;
}
 c003dd4:	4620      	mov	r0, r4
 c003dd6:	b003      	add	sp, #12
 c003dd8:	bd30      	pop	{r4, r5, pc}
            ret = decrypt_aes_128(S_FLASH_PKEY_ADDR, size);
 c003dda:	4611      	mov	r1, r2
 c003ddc:	480c      	ldr	r0, [pc, #48]	; (c003e10 <secure_read_storage+0x5c>)
 c003dde:	9201      	str	r2, [sp, #4]
 c003de0:	f7ff ffac 	bl	c003d3c <decrypt_aes_128>
 c003de4:	4604      	mov	r4, r0
            memcpy(data, aes_buffer, size);
 c003de6:	9a01      	ldr	r2, [sp, #4]
 c003de8:	4628      	mov	r0, r5
 c003dea:	490a      	ldr	r1, [pc, #40]	; (c003e14 <secure_read_storage+0x60>)
 c003dec:	f001 fbea 	bl	c0055c4 <memcpy>
}
 c003df0:	4620      	mov	r0, r4
 c003df2:	b003      	add	sp, #12
 c003df4:	bd30      	pop	{r4, r5, pc}
            ret = decrypt_aes_128(S_FLASH_DEV_INFO_ADDR, size);
 c003df6:	4611      	mov	r1, r2
 c003df8:	4807      	ldr	r0, [pc, #28]	; (c003e18 <secure_read_storage+0x64>)
 c003dfa:	9201      	str	r2, [sp, #4]
 c003dfc:	e7f0      	b.n	c003de0 <secure_read_storage+0x2c>
            ret = decrypt_aes_128(S_FLASH_ROOTCA_ADDR, size);
 c003dfe:	4611      	mov	r1, r2
 c003e00:	4806      	ldr	r0, [pc, #24]	; (c003e1c <secure_read_storage+0x68>)
 c003e02:	9201      	str	r2, [sp, #4]
 c003e04:	e7ec      	b.n	c003de0 <secure_read_storage+0x2c>
            ret = decrypt_aes_128(S_FLASH_CLICA_ADDR, size);
 c003e06:	4611      	mov	r1, r2
 c003e08:	4805      	ldr	r0, [pc, #20]	; (c003e20 <secure_read_storage+0x6c>)
 c003e0a:	9201      	str	r2, [sp, #4]
 c003e0c:	e7e8      	b.n	c003de0 <secure_read_storage+0x2c>
 c003e0e:	bf00      	nop
 c003e10:	0800b000 	.word	0x0800b000
 c003e14:	30002394 	.word	0x30002394
 c003e18:	08008000 	.word	0x08008000
 c003e1c:	08009000 	.word	0x08009000
 c003e20:	0800a000 	.word	0x0800a000

0c003e24 <secure_write_storage>:


int secure_write_storage(teDATASTORAGE stype, void *data, uint16_t size)
{
 c003e24:	b508      	push	{r3, lr}
 c003e26:	1e43      	subs	r3, r0, #1
 c003e28:	4608      	mov	r0, r1
 c003e2a:	4611      	mov	r1, r2
 c003e2c:	2b0a      	cmp	r3, #10
 c003e2e:	d807      	bhi.n	c003e40 <secure_write_storage+0x1c>
 c003e30:	e8df f003 	tbb	[pc, r3]
 c003e34:	06060615 	.word	0x06060615
 c003e38:	06060606 	.word	0x06060606
 c003e3c:	2d21      	.short	0x2d21
 c003e3e:	09          	.byte	0x09
 c003e3f:	00          	.byte	0x00
 c003e40:	f04f 30ff 	mov.w	r0, #4294967295
        default:
            break;
    }
    
    return ret;
}
 c003e44:	bd08      	pop	{r3, pc}
            ret = encrypt_aes_128(data, size);
 c003e46:	f7ff ff3d 	bl	c003cc4 <encrypt_aes_128>
            if (ret < 0)
 c003e4a:	2800      	cmp	r0, #0
 c003e4c:	dbfa      	blt.n	c003e44 <secure_write_storage+0x20>
}
 c003e4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            ret = write_flash(S_FLASH_PKEY_ADDR, aes_buffer, 4096);
 c003e52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 c003e56:	4914      	ldr	r1, [pc, #80]	; (c003ea8 <secure_write_storage+0x84>)
 c003e58:	4814      	ldr	r0, [pc, #80]	; (c003eac <secure_write_storage+0x88>)
 c003e5a:	f7ff be05 	b.w	c003a68 <write_flash>
            ret = encrypt_aes_128(data, size);
 c003e5e:	f7ff ff31 	bl	c003cc4 <encrypt_aes_128>
            if (ret < 0)
 c003e62:	2800      	cmp	r0, #0
 c003e64:	dbee      	blt.n	c003e44 <secure_write_storage+0x20>
}
 c003e66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            ret = write_flash(S_FLASH_DEV_INFO_ADDR, aes_buffer, 4096);
 c003e6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 c003e6e:	490e      	ldr	r1, [pc, #56]	; (c003ea8 <secure_write_storage+0x84>)
 c003e70:	480f      	ldr	r0, [pc, #60]	; (c003eb0 <secure_write_storage+0x8c>)
 c003e72:	f7ff bdf9 	b.w	c003a68 <write_flash>
            ret = encrypt_aes_128(data, size);
 c003e76:	f7ff ff25 	bl	c003cc4 <encrypt_aes_128>
            if (ret < 0)
 c003e7a:	2800      	cmp	r0, #0
 c003e7c:	dbe2      	blt.n	c003e44 <secure_write_storage+0x20>
}
 c003e7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            ret = write_flash(S_FLASH_ROOTCA_ADDR, aes_buffer, 4096);
 c003e82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 c003e86:	4908      	ldr	r1, [pc, #32]	; (c003ea8 <secure_write_storage+0x84>)
 c003e88:	480a      	ldr	r0, [pc, #40]	; (c003eb4 <secure_write_storage+0x90>)
 c003e8a:	f7ff bded 	b.w	c003a68 <write_flash>
            ret = encrypt_aes_128(data, size);
 c003e8e:	f7ff ff19 	bl	c003cc4 <encrypt_aes_128>
            if (ret < 0)
 c003e92:	2800      	cmp	r0, #0
 c003e94:	dbd6      	blt.n	c003e44 <secure_write_storage+0x20>
}
 c003e96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            ret = write_flash(S_FLASH_CLICA_ADDR, aes_buffer, 4096);
 c003e9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 c003e9e:	4902      	ldr	r1, [pc, #8]	; (c003ea8 <secure_write_storage+0x84>)
 c003ea0:	4805      	ldr	r0, [pc, #20]	; (c003eb8 <secure_write_storage+0x94>)
 c003ea2:	f7ff bde1 	b.w	c003a68 <write_flash>
 c003ea6:	bf00      	nop
 c003ea8:	30002394 	.word	0x30002394
 c003eac:	0800b000 	.word	0x0800b000
 c003eb0:	08008000 	.word	0x08008000
 c003eb4:	08009000 	.word	0x08009000
 c003eb8:	0800a000 	.word	0x0800a000

0c003ebc <secure_erase_storage>:

int secure_erase_storage(teDATASTORAGE stype)
{
 c003ebc:	b508      	push	{r3, lr}
 c003ebe:	280b      	cmp	r0, #11
 c003ec0:	d807      	bhi.n	c003ed2 <secure_erase_storage+0x16>
 c003ec2:	e8df f000 	tbb	[pc, r0]
 c003ec6:	130d      	.short	0x130d
 c003ec8:	06060606 	.word	0x06060606
 c003ecc:	17060606 	.word	0x17060606
 c003ed0:	091b      	.short	0x091b
    uint32_t address, working_address;
    
    uint8_t blocks = 0;
    uint16_t sectors = 0, remainder = 0;

    int ret = -1;
 c003ed2:	f04f 30ff 	mov.w	r0, #4294967295
        
        default:
            break;
    }
    return ret;
}
 c003ed6:	bd08      	pop	{r3, pc}
            ret = erase_flash_page(S_FLASH_PKEY_ADDR);
 c003ed8:	480a      	ldr	r0, [pc, #40]	; (c003f04 <secure_erase_storage+0x48>)
 c003eda:	f7ff fe6d 	bl	c003bb8 <erase_flash_page>
}
 c003ede:	bd08      	pop	{r3, pc}
            printf("can't erase MAC in f/w, use stm32cube programmer\r\n");
 c003ee0:	4809      	ldr	r0, [pc, #36]	; (c003f08 <secure_erase_storage+0x4c>)
 c003ee2:	f001 fccf 	bl	c005884 <puts>
    int ret = -1;
 c003ee6:	f04f 30ff 	mov.w	r0, #4294967295
}
 c003eea:	bd08      	pop	{r3, pc}
            ret = erase_flash_page(S_FLASH_DEV_INFO_ADDR);
 c003eec:	4807      	ldr	r0, [pc, #28]	; (c003f0c <secure_erase_storage+0x50>)
 c003eee:	f7ff fe63 	bl	c003bb8 <erase_flash_page>
}
 c003ef2:	bd08      	pop	{r3, pc}
            ret = erase_flash_page(S_FLASH_ROOTCA_ADDR);
 c003ef4:	4806      	ldr	r0, [pc, #24]	; (c003f10 <secure_erase_storage+0x54>)
 c003ef6:	f7ff fe5f 	bl	c003bb8 <erase_flash_page>
}
 c003efa:	bd08      	pop	{r3, pc}
            ret = erase_flash_page(S_FLASH_CLICA_ADDR);
 c003efc:	4805      	ldr	r0, [pc, #20]	; (c003f14 <secure_erase_storage+0x58>)
 c003efe:	f7ff fe5b 	bl	c003bb8 <erase_flash_page>
}
 c003f02:	bd08      	pop	{r3, pc}
 c003f04:	0800b000 	.word	0x0800b000
 c003f08:	0c006a74 	.word	0x0c006a74
 c003f0c:	08008000 	.word	0x08008000
 c003f10:	08009000 	.word	0x08009000
 c003f14:	0800a000 	.word	0x0800a000

0c003f18 <aes_gen_tables>:
 c003f18:	2203      	movs	r2, #3
 c003f1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c003f1e:	2000      	movs	r0, #0
 c003f20:	2401      	movs	r4, #1
 c003f22:	4613      	mov	r3, r2
 c003f24:	f6ad 0d1c 	subw	sp, sp, #2076	; 0x81c
 c003f28:	a906      	add	r1, sp, #24
 c003f2a:	9406      	str	r4, [sp, #24]
 c003f2c:	f8cd 041c 	str.w	r0, [sp, #1052]	; 0x41c
 c003f30:	f20d 4514 	addw	r5, sp, #1044	; 0x414
 c003f34:	0058      	lsls	r0, r3, #1
 c003f36:	ea83 0400 	eor.w	r4, r3, r0
 c003f3a:	f012 0f80 	tst.w	r2, #128	; 0x80
 c003f3e:	f841 3f04 	str.w	r3, [r1, #4]!
 c003f42:	f084 021b 	eor.w	r2, r4, #27
 c003f46:	f040 813c 	bne.w	c0041c2 <aes_gen_tables+0x2aa>
 c003f4a:	428d      	cmp	r5, r1
 c003f4c:	4622      	mov	r2, r4
 c003f4e:	b2e3      	uxtb	r3, r4
 c003f50:	d1f0      	bne.n	c003f34 <aes_gen_tables+0x1c>
 c003f52:	2303      	movs	r3, #3
 c003f54:	2201      	movs	r2, #1
 c003f56:	4619      	mov	r1, r3
 c003f58:	f50d 6083 	add.w	r0, sp, #1048	; 0x418
 c003f5c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 c003f60:	0058      	lsls	r0, r3, #1
 c003f62:	ea80 0403 	eor.w	r4, r0, r3
 c003f66:	f011 0f80 	tst.w	r1, #128	; 0x80
 c003f6a:	f084 011b 	eor.w	r1, r4, #27
 c003f6e:	f040 8121 	bne.w	c0041b4 <aes_gen_tables+0x29c>
 c003f72:	3201      	adds	r2, #1
 c003f74:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 c003f78:	4621      	mov	r1, r4
 c003f7a:	b2e3      	uxtb	r3, r4
 c003f7c:	d1ec      	bne.n	c003f58 <aes_gen_tables+0x40>
 c003f7e:	f04f 0a63 	mov.w	sl, #99	; 0x63
 c003f82:	2401      	movs	r4, #1
 c003f84:	2720      	movs	r7, #32
 c003f86:	f04f 0902 	mov.w	r9, #2
 c003f8a:	f04f 0c10 	mov.w	ip, #16
 c003f8e:	4d8f      	ldr	r5, [pc, #572]	; (c0041cc <aes_gen_tables+0x2b4>)
 c003f90:	4623      	mov	r3, r4
 c003f92:	462a      	mov	r2, r5
 c003f94:	f885 a000 	strb.w	sl, [r5]
 c003f98:	4628      	mov	r0, r5
 c003f9a:	4d8d      	ldr	r5, [pc, #564]	; (c0041d0 <aes_gen_tables+0x2b8>)
 c003f9c:	f04f 0804 	mov.w	r8, #4
 c003fa0:	e9c5 4900 	strd	r4, r9, [r5]
 c003fa4:	e9c5 c704 	strd	ip, r7, [r5, #16]
 c003fa8:	241b      	movs	r4, #27
 c003faa:	2780      	movs	r7, #128	; 0x80
 c003fac:	f04f 0e08 	mov.w	lr, #8
 c003fb0:	e9c5 7407 	strd	r7, r4, [r5, #28]
 c003fb4:	f04f 0b40 	mov.w	fp, #64	; 0x40
 c003fb8:	2600      	movs	r6, #0
 c003fba:	2436      	movs	r4, #54	; 0x36
 c003fbc:	e9c5 8e02 	strd	r8, lr, [r5, #8]
 c003fc0:	4690      	mov	r8, r2
 c003fc2:	4f84      	ldr	r7, [pc, #528]	; (c0041d4 <aes_gen_tables+0x2bc>)
 c003fc4:	f50d 6183 	add.w	r1, sp, #1048	; 0x418
 c003fc8:	f8c5 b018 	str.w	fp, [r5, #24]
 c003fcc:	626c      	str	r4, [r5, #36]	; 0x24
 c003fce:	f887 6063 	strb.w	r6, [r7, #99]	; 0x63
 c003fd2:	f851 4f04 	ldr.w	r4, [r1, #4]!
 c003fd6:	aa06      	add	r2, sp, #24
 c003fd8:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 c003fdc:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 c003fe0:	11d5      	asrs	r5, r2, #7
 c003fe2:	ea45 0542 	orr.w	r5, r5, r2, lsl #1
 c003fe6:	fa5f fe85 	uxtb.w	lr, r5
 c003fea:	f3c5 15c0 	ubfx	r5, r5, #7, #1
 c003fee:	ea45 054e 	orr.w	r5, r5, lr, lsl #1
 c003ff2:	fa5f fc85 	uxtb.w	ip, r5
 c003ff6:	f3c5 15c0 	ubfx	r5, r5, #7, #1
 c003ffa:	ea45 054c 	orr.w	r5, r5, ip, lsl #1
 c003ffe:	b2ee      	uxtb	r6, r5
 c004000:	f3c5 15c0 	ubfx	r5, r5, #7, #1
 c004004:	ea45 0546 	orr.w	r5, r5, r6, lsl #1
 c004008:	b2ec      	uxtb	r4, r5
 c00400a:	4054      	eors	r4, r2
 c00400c:	ea84 040e 	eor.w	r4, r4, lr
 c004010:	ea84 040c 	eor.w	r4, r4, ip
 c004014:	4074      	eors	r4, r6
 c004016:	f084 0463 	eor.w	r4, r4, #99	; 0x63
 c00401a:	553b      	strb	r3, [r7, r4]
 c00401c:	3301      	adds	r3, #1
 c00401e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c004022:	f800 4f01 	strb.w	r4, [r0, #1]!
 c004026:	d1d4      	bne.n	c003fd2 <aes_gen_tables+0xba>
 c004028:	4b6b      	ldr	r3, [pc, #428]	; (c0041d8 <aes_gen_tables+0x2c0>)
 c00402a:	f8df c1c8 	ldr.w	ip, [pc, #456]	; c0041f4 <aes_gen_tables+0x2dc>
 c00402e:	4619      	mov	r1, r3
 c004030:	f8df e1c4 	ldr.w	lr, [pc, #452]	; c0041f8 <aes_gen_tables+0x2e0>
 c004034:	4f69      	ldr	r7, [pc, #420]	; (c0041dc <aes_gen_tables+0x2c4>)
 c004036:	4e6a      	ldr	r6, [pc, #424]	; (c0041e0 <aes_gen_tables+0x2c8>)
 c004038:	f8cc e000 	str.w	lr, [ip]
 c00403c:	4642      	mov	r2, r8
 c00403e:	f8df e1bc 	ldr.w	lr, [pc, #444]	; c0041fc <aes_gen_tables+0x2e4>
 c004042:	f8df 81bc 	ldr.w	r8, [pc, #444]	; c004200 <aes_gen_tables+0x2e8>
 c004046:	f8c6 e000 	str.w	lr, [r6]
 c00404a:	463c      	mov	r4, r7
 c00404c:	4630      	mov	r0, r6
 c00404e:	f8c7 8000 	str.w	r8, [r7]
 c004052:	f8dd 644c 	ldr.w	r6, [sp, #1100]	; 0x44c
 c004056:	f8dd 7450 	ldr.w	r7, [sp, #1104]	; 0x450
 c00405a:	4665      	mov	r5, ip
 c00405c:	9702      	str	r7, [sp, #8]
 c00405e:	f8df c1a4 	ldr.w	ip, [pc, #420]	; c004204 <aes_gen_tables+0x2ec>
 c004062:	f8dd 743c 	ldr.w	r7, [sp, #1084]	; 0x43c
 c004066:	9604      	str	r6, [sp, #16]
 c004068:	f8dd 6444 	ldr.w	r6, [sp, #1092]	; 0x444
 c00406c:	f8df e198 	ldr.w	lr, [pc, #408]	; c004208 <aes_gen_tables+0x2f0>
 c004070:	9703      	str	r7, [sp, #12]
 c004072:	9605      	str	r6, [sp, #20]
 c004074:	f8c3 c000 	str.w	ip, [r3]
 c004078:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 c00407c:	f016 0f80 	tst.w	r6, #128	; 0x80
 c004080:	bf14      	ite	ne
 c004082:	271b      	movne	r7, #27
 c004084:	2700      	moveq	r7, #0
 c004086:	0433      	lsls	r3, r6, #16
 c004088:	ea87 0746 	eor.w	r7, r7, r6, lsl #1
 c00408c:	b2ff      	uxtb	r7, r7
 c00408e:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 c004092:	407b      	eors	r3, r7
 c004094:	407e      	eors	r6, r7
 c004096:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 c00409a:	ea4f 6c33 	mov.w	ip, r3, ror #24
 c00409e:	ea4f 4733 	mov.w	r7, r3, ror #16
 c0040a2:	ea4f 2633 	mov.w	r6, r3, ror #8
 c0040a6:	4596      	cmp	lr, r2
 c0040a8:	f845 3f04 	str.w	r3, [r5, #4]!
 c0040ac:	f844 cf04 	str.w	ip, [r4, #4]!
 c0040b0:	f840 7f04 	str.w	r7, [r0, #4]!
 c0040b4:	f841 6f04 	str.w	r6, [r1, #4]!
 c0040b8:	d1de      	bne.n	c004078 <aes_gen_tables+0x160>
 c0040ba:	4d4a      	ldr	r5, [pc, #296]	; (c0041e4 <aes_gen_tables+0x2cc>)
 c0040bc:	f8df 814c 	ldr.w	r8, [pc, #332]	; c00420c <aes_gen_tables+0x2f4>
 c0040c0:	f8df e14c 	ldr.w	lr, [pc, #332]	; c004210 <aes_gen_tables+0x2f8>
 c0040c4:	f8df c14c 	ldr.w	ip, [pc, #332]	; c004214 <aes_gen_tables+0x2fc>
 c0040c8:	4f47      	ldr	r7, [pc, #284]	; (c0041e8 <aes_gen_tables+0x2d0>)
 c0040ca:	4e48      	ldr	r6, [pc, #288]	; (c0041ec <aes_gen_tables+0x2d4>)
 c0040cc:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 c0040d0:	2b00      	cmp	r3, #0
 c0040d2:	d060      	beq.n	c004196 <aes_gen_tables+0x27e>
 c0040d4:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
 c0040d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 c0040dc:	9b04      	ldr	r3, [sp, #16]
 c0040de:	eb02 0b03 	add.w	fp, r2, r3
 c0040e2:	fb86 130b 	smull	r1, r3, r6, fp
 c0040e6:	9903      	ldr	r1, [sp, #12]
 c0040e8:	445b      	add	r3, fp
 c0040ea:	1850      	adds	r0, r2, r1
 c0040ec:	fb86 4100 	smull	r4, r1, r6, r0
 c0040f0:	9c02      	ldr	r4, [sp, #8]
 c0040f2:	4401      	add	r1, r0
 c0040f4:	eb04 0a02 	add.w	sl, r4, r2
 c0040f8:	9c05      	ldr	r4, [sp, #20]
 c0040fa:	4422      	add	r2, r4
 c0040fc:	ea4f 74eb 	mov.w	r4, fp, asr #31
 c004100:	ebc4 13e3 	rsb	r3, r4, r3, asr #7
 c004104:	9301      	str	r3, [sp, #4]
 c004106:	fb86 940a 	smull	r9, r4, r6, sl
 c00410a:	fb86 3902 	smull	r3, r9, r6, r2
 c00410e:	9b01      	ldr	r3, [sp, #4]
 c004110:	4454      	add	r4, sl
 c004112:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 c004116:	ebab 0303 	sub.w	r3, fp, r3
 c00411a:	ea4f 7be0 	mov.w	fp, r0, asr #31
 c00411e:	ebcb 11e1 	rsb	r1, fp, r1, asr #7
 c004122:	ebc1 2b01 	rsb	fp, r1, r1, lsl #8
 c004126:	a906      	add	r1, sp, #24
 c004128:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 c00412c:	eba0 010b 	sub.w	r1, r0, fp
 c004130:	ea4f 70ea 	mov.w	r0, sl, asr #31
 c004134:	ebc0 10e4 	rsb	r0, r0, r4, asr #7
 c004138:	ebc0 2400 	rsb	r4, r0, r0, lsl #8
 c00413c:	a806      	add	r0, sp, #24
 c00413e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 c004142:	4491      	add	r9, r2
 c004144:	17d1      	asrs	r1, r2, #31
 c004146:	ebc1 11e9 	rsb	r1, r1, r9, asr #7
 c00414a:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 c00414e:	f10d 0918 	add.w	r9, sp, #24
 c004152:	ebaa 0404 	sub.w	r4, sl, r4
 c004156:	1a52      	subs	r2, r2, r1
 c004158:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 c00415c:	041b      	lsls	r3, r3, #16
 c00415e:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 c004162:	ea83 2300 	eor.w	r3, r3, r0, lsl #8
 c004166:	4063      	eors	r3, r4
 c004168:	ea83 6302 	eor.w	r3, r3, r2, lsl #24
 c00416c:	ea4f 6033 	mov.w	r0, r3, ror #24
 c004170:	ea4f 4133 	mov.w	r1, r3, ror #16
 c004174:	ea4f 2233 	mov.w	r2, r3, ror #8
 c004178:	f848 3f04 	str.w	r3, [r8, #4]!
 c00417c:	4b1c      	ldr	r3, [pc, #112]	; (c0041f0 <aes_gen_tables+0x2d8>)
 c00417e:	f84e 0f04 	str.w	r0, [lr, #4]!
 c004182:	42ab      	cmp	r3, r5
 c004184:	f84c 1f04 	str.w	r1, [ip, #4]!
 c004188:	f847 2f04 	str.w	r2, [r7, #4]!
 c00418c:	d19e      	bne.n	c0040cc <aes_gen_tables+0x1b4>
 c00418e:	f60d 0d1c 	addw	sp, sp, #2076	; 0x81c
 c004192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c004196:	f848 3f04 	str.w	r3, [r8, #4]!
 c00419a:	f84e 3f04 	str.w	r3, [lr, #4]!
 c00419e:	f84c 3f04 	str.w	r3, [ip, #4]!
 c0041a2:	f847 3f04 	str.w	r3, [r7, #4]!
 c0041a6:	4b12      	ldr	r3, [pc, #72]	; (c0041f0 <aes_gen_tables+0x2d8>)
 c0041a8:	42ab      	cmp	r3, r5
 c0041aa:	d18f      	bne.n	c0040cc <aes_gen_tables+0x1b4>
 c0041ac:	f60d 0d1c 	addw	sp, sp, #2076	; 0x81c
 c0041b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c0041b4:	3201      	adds	r2, #1
 c0041b6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 c0041ba:	b2cb      	uxtb	r3, r1
 c0041bc:	f47f aecc 	bne.w	c003f58 <aes_gen_tables+0x40>
 c0041c0:	e6dd      	b.n	c003f7e <aes_gen_tables+0x66>
 c0041c2:	428d      	cmp	r5, r1
 c0041c4:	b2d3      	uxtb	r3, r2
 c0041c6:	f47f aeb5 	bne.w	c003f34 <aes_gen_tables+0x1c>
 c0041ca:	e6c2      	b.n	c003f52 <aes_gen_tables+0x3a>
 c0041cc:	300000bc 	.word	0x300000bc
 c0041d0:	300011bc 	.word	0x300011bc
 c0041d4:	300011e4 	.word	0x300011e4
 c0041d8:	30000dbc 	.word	0x30000dbc
 c0041dc:	300005bc 	.word	0x300005bc
 c0041e0:	300009bc 	.word	0x300009bc
 c0041e4:	300011e3 	.word	0x300011e3
 c0041e8:	30001ee0 	.word	0x30001ee0
 c0041ec:	80808081 	.word	0x80808081
 c0041f0:	300012e3 	.word	0x300012e3
 c0041f4:	300001bc 	.word	0x300001bc
 c0041f8:	a56363c6 	.word	0xa56363c6
 c0041fc:	63c6a563 	.word	0x63c6a563
 c004200:	6363c6a5 	.word	0x6363c6a5
 c004204:	c6a56363 	.word	0xc6a56363
 c004208:	300001bb 	.word	0x300001bb
 c00420c:	300012e0 	.word	0x300012e0
 c004210:	300016e0 	.word	0x300016e0
 c004214:	30001ae0 	.word	0x30001ae0

0c004218 <mbedtls_aes_init>:
 c004218:	f44f 728c 	mov.w	r2, #280	; 0x118
 c00421c:	2100      	movs	r1, #0
 c00421e:	f001 b9f8 	b.w	c005612 <memset>
 c004222:	bf00      	nop

0c004224 <mbedtls_aes_free>:
 c004224:	b118      	cbz	r0, c00422e <mbedtls_aes_free+0xa>
 c004226:	f44f 718c 	mov.w	r1, #280	; 0x118
 c00422a:	f001 b997 	b.w	c00555c <mbedtls_platform_zeroize>
 c00422e:	4770      	bx	lr

0c004230 <mbedtls_aes_setkey_enc>:
 c004230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c004234:	2ac0      	cmp	r2, #192	; 0xc0
 c004236:	4615      	mov	r5, r2
 c004238:	4680      	mov	r8, r0
 c00423a:	b083      	sub	sp, #12
 c00423c:	d009      	beq.n	c004252 <mbedtls_aes_setkey_enc+0x22>
 c00423e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 c004242:	d043      	beq.n	c0042cc <mbedtls_aes_setkey_enc+0x9c>
 c004244:	2a80      	cmp	r2, #128	; 0x80
 c004246:	d02f      	beq.n	c0042a8 <mbedtls_aes_setkey_enc+0x78>
 c004248:	f06f 001f 	mvn.w	r0, #31
 c00424c:	b003      	add	sp, #12
 c00424e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c004252:	230c      	movs	r3, #12
 c004254:	6003      	str	r3, [r0, #0]
 c004256:	4ccb      	ldr	r4, [pc, #812]	; (c004584 <mbedtls_aes_setkey_enc+0x354>)
 c004258:	6823      	ldr	r3, [r4, #0]
 c00425a:	b35b      	cbz	r3, c0042b4 <mbedtls_aes_setkey_enc+0x84>
 c00425c:	f108 0308 	add.w	r3, r8, #8
 c004260:	096d      	lsrs	r5, r5, #5
 c004262:	f8c8 3004 	str.w	r3, [r8, #4]
 c004266:	2400      	movs	r4, #0
 c004268:	1f1e      	subs	r6, r3, #4
 c00426a:	788a      	ldrb	r2, [r1, #2]
 c00426c:	7848      	ldrb	r0, [r1, #1]
 c00426e:	780f      	ldrb	r7, [r1, #0]
 c004270:	0412      	lsls	r2, r2, #16
 c004272:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 c004276:	78c8      	ldrb	r0, [r1, #3]
 c004278:	433a      	orrs	r2, r7
 c00427a:	3401      	adds	r4, #1
 c00427c:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 c004280:	42a5      	cmp	r5, r4
 c004282:	f846 2f04 	str.w	r2, [r6, #4]!
 c004286:	f101 0104 	add.w	r1, r1, #4
 c00428a:	d8ee      	bhi.n	c00426a <mbedtls_aes_setkey_enc+0x3a>
 c00428c:	f8d8 2000 	ldr.w	r2, [r8]
 c004290:	2a0c      	cmp	r2, #12
 c004292:	d01e      	beq.n	c0042d2 <mbedtls_aes_setkey_enc+0xa2>
 c004294:	2a0e      	cmp	r2, #14
 c004296:	f000 817b 	beq.w	c004590 <mbedtls_aes_setkey_enc+0x360>
 c00429a:	2a0a      	cmp	r2, #10
 c00429c:	f000 81d1 	beq.w	c004642 <mbedtls_aes_setkey_enc+0x412>
 c0042a0:	2000      	movs	r0, #0
 c0042a2:	b003      	add	sp, #12
 c0042a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c0042a8:	230a      	movs	r3, #10
 c0042aa:	4cb6      	ldr	r4, [pc, #728]	; (c004584 <mbedtls_aes_setkey_enc+0x354>)
 c0042ac:	6003      	str	r3, [r0, #0]
 c0042ae:	6823      	ldr	r3, [r4, #0]
 c0042b0:	2b00      	cmp	r3, #0
 c0042b2:	d1d3      	bne.n	c00425c <mbedtls_aes_setkey_enc+0x2c>
 c0042b4:	2601      	movs	r6, #1
 c0042b6:	9101      	str	r1, [sp, #4]
 c0042b8:	f7ff fe2e 	bl	c003f18 <aes_gen_tables>
 c0042bc:	f108 0308 	add.w	r3, r8, #8
 c0042c0:	9901      	ldr	r1, [sp, #4]
 c0042c2:	096d      	lsrs	r5, r5, #5
 c0042c4:	6026      	str	r6, [r4, #0]
 c0042c6:	f8c8 3004 	str.w	r3, [r8, #4]
 c0042ca:	e7cc      	b.n	c004266 <mbedtls_aes_setkey_enc+0x36>
 c0042cc:	230e      	movs	r3, #14
 c0042ce:	6003      	str	r3, [r0, #0]
 c0042d0:	e7c1      	b.n	c004256 <mbedtls_aes_setkey_enc+0x26>
 c0042d2:	695c      	ldr	r4, [r3, #20]
 c0042d4:	4eac      	ldr	r6, [pc, #688]	; (c004588 <mbedtls_aes_setkey_enc+0x358>)
 c0042d6:	48ad      	ldr	r0, [pc, #692]	; (c00458c <mbedtls_aes_setkey_enc+0x35c>)
 c0042d8:	6837      	ldr	r7, [r6, #0]
 c0042da:	f3c4 2107 	ubfx	r1, r4, #8, #8
 c0042de:	681a      	ldr	r2, [r3, #0]
 c0042e0:	5c45      	ldrb	r5, [r0, r1]
 c0042e2:	0e21      	lsrs	r1, r4, #24
 c0042e4:	407a      	eors	r2, r7
 c0042e6:	5c47      	ldrb	r7, [r0, r1]
 c0042e8:	b2e1      	uxtb	r1, r4
 c0042ea:	5c41      	ldrb	r1, [r0, r1]
 c0042ec:	406a      	eors	r2, r5
 c0042ee:	f3c4 4507 	ubfx	r5, r4, #16, #8
 c0042f2:	5d45      	ldrb	r5, [r0, r5]
 c0042f4:	ea82 4207 	eor.w	r2, r2, r7, lsl #16
 c0042f8:	ea82 6201 	eor.w	r2, r2, r1, lsl #24
 c0042fc:	6859      	ldr	r1, [r3, #4]
 c0042fe:	ea82 2205 	eor.w	r2, r2, r5, lsl #8
 c004302:	689d      	ldr	r5, [r3, #8]
 c004304:	4051      	eors	r1, r2
 c004306:	ea85 0801 	eor.w	r8, r5, r1
 c00430a:	e9d3 6703 	ldrd	r6, r7, [r3, #12]
 c00430e:	ea86 0c08 	eor.w	ip, r6, r8
 c004312:	e9c3 2106 	strd	r2, r1, [r3, #24]
 c004316:	e9c3 8c08 	strd	r8, ip, [r3, #32]
 c00431a:	ea87 0e0c 	eor.w	lr, r7, ip
 c00431e:	4e9a      	ldr	r6, [pc, #616]	; (c004588 <mbedtls_aes_setkey_enc+0x358>)
 c004320:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
 c004324:	ea84 040e 	eor.w	r4, r4, lr
 c004328:	62dc      	str	r4, [r3, #44]	; 0x2c
 c00432a:	6876      	ldr	r6, [r6, #4]
 c00432c:	f3c4 2e07 	ubfx	lr, r4, #8, #8
 c004330:	f810 e00e 	ldrb.w	lr, [r0, lr]
 c004334:	ea4f 6814 	mov.w	r8, r4, lsr #24
 c004338:	f810 9008 	ldrb.w	r9, [r0, r8]
 c00433c:	4072      	eors	r2, r6
 c00433e:	fa5f f884 	uxtb.w	r8, r4
 c004342:	f810 8008 	ldrb.w	r8, [r0, r8]
 c004346:	ea8e 0202 	eor.w	r2, lr, r2
 c00434a:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 c00434e:	f810 e00e 	ldrb.w	lr, [r0, lr]
 c004352:	ea82 4209 	eor.w	r2, r2, r9, lsl #16
 c004356:	ea82 6208 	eor.w	r2, r2, r8, lsl #24
 c00435a:	ea82 220e 	eor.w	r2, r2, lr, lsl #8
 c00435e:	4055      	eors	r5, r2
 c004360:	ea87 0805 	eor.w	r8, r7, r5
 c004364:	ea84 0e08 	eor.w	lr, r4, r8
 c004368:	4051      	eors	r1, r2
 c00436a:	e9c3 150d 	strd	r1, r5, [r3, #52]	; 0x34
 c00436e:	e9c3 8e10 	strd	r8, lr, [r3, #64]	; 0x40
 c004372:	4e85      	ldr	r6, [pc, #532]	; (c004588 <mbedtls_aes_setkey_enc+0x358>)
 c004374:	ea8c 0905 	eor.w	r9, ip, r5
 c004378:	631a      	str	r2, [r3, #48]	; 0x30
 c00437a:	f8c3 903c 	str.w	r9, [r3, #60]	; 0x3c
 c00437e:	68b6      	ldr	r6, [r6, #8]
 c004380:	f3ce 2907 	ubfx	r9, lr, #8, #8
 c004384:	f810 9009 	ldrb.w	r9, [r0, r9]
 c004388:	ea4f 6a1e 	mov.w	sl, lr, lsr #24
 c00438c:	f810 a00a 	ldrb.w	sl, [r0, sl]
 c004390:	4072      	eors	r2, r6
 c004392:	fa5f fb8e 	uxtb.w	fp, lr
 c004396:	f810 b00b 	ldrb.w	fp, [r0, fp]
 c00439a:	ea89 0202 	eor.w	r2, r9, r2
 c00439e:	f3ce 4e07 	ubfx	lr, lr, #16, #8
 c0043a2:	f810 e00e 	ldrb.w	lr, [r0, lr]
 c0043a6:	ea82 420a 	eor.w	r2, r2, sl, lsl #16
 c0043aa:	ea82 620b 	eor.w	r2, r2, fp, lsl #24
 c0043ae:	ea82 220e 	eor.w	r2, r2, lr, lsl #8
 c0043b2:	4051      	eors	r1, r2
 c0043b4:	ea8c 0c01 	eor.w	ip, ip, r1
 c0043b8:	ea88 0e0c 	eor.w	lr, r8, ip
 c0043bc:	e9c3 ce15 	strd	ip, lr, [r3, #84]	; 0x54
 c0043c0:	e9c3 2112 	strd	r2, r1, [r3, #72]	; 0x48
 c0043c4:	4e70      	ldr	r6, [pc, #448]	; (c004588 <mbedtls_aes_setkey_enc+0x358>)
 c0043c6:	ea84 080c 	eor.w	r8, r4, ip
 c0043ca:	ea85 0901 	eor.w	r9, r5, r1
 c0043ce:	f8c3 805c 	str.w	r8, [r3, #92]	; 0x5c
 c0043d2:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
 c0043d6:	68f6      	ldr	r6, [r6, #12]
 c0043d8:	f3c8 2e07 	ubfx	lr, r8, #8, #8
 c0043dc:	f810 e00e 	ldrb.w	lr, [r0, lr]
 c0043e0:	ea4f 6918 	mov.w	r9, r8, lsr #24
 c0043e4:	f810 a009 	ldrb.w	sl, [r0, r9]
 c0043e8:	4072      	eors	r2, r6
 c0043ea:	fa5f f988 	uxtb.w	r9, r8
 c0043ee:	f810 9009 	ldrb.w	r9, [r0, r9]
 c0043f2:	ea8e 0e02 	eor.w	lr, lr, r2
 c0043f6:	f3c8 4207 	ubfx	r2, r8, #16, #8
 c0043fa:	5c82      	ldrb	r2, [r0, r2]
 c0043fc:	ea8e 4e0a 	eor.w	lr, lr, sl, lsl #16
 c004400:	ea8e 6e09 	eor.w	lr, lr, r9, lsl #24
 c004404:	ea8e 2202 	eor.w	r2, lr, r2, lsl #8
 c004408:	4051      	eors	r1, r2
 c00440a:	e9c3 2118 	strd	r2, r1, [r3, #96]	; 0x60
 c00440e:	4057      	eors	r7, r2
 c004410:	4055      	eors	r5, r2
 c004412:	4e5d      	ldr	r6, [pc, #372]	; (c004588 <mbedtls_aes_setkey_enc+0x358>)
 c004414:	ea88 0807 	eor.w	r8, r8, r7
 c004418:	ea8c 0a05 	eor.w	sl, ip, r5
 c00441c:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
 c004420:	669d      	str	r5, [r3, #104]	; 0x68
 c004422:	671f      	str	r7, [r3, #112]	; 0x70
 c004424:	f8c3 a06c 	str.w	sl, [r3, #108]	; 0x6c
 c004428:	6936      	ldr	r6, [r6, #16]
 c00442a:	f3c8 2907 	ubfx	r9, r8, #8, #8
 c00442e:	f810 9009 	ldrb.w	r9, [r0, r9]
 c004432:	ea4f 6a18 	mov.w	sl, r8, lsr #24
 c004436:	f810 e00a 	ldrb.w	lr, [r0, sl]
 c00443a:	4072      	eors	r2, r6
 c00443c:	fa5f fa88 	uxtb.w	sl, r8
 c004440:	ea89 0202 	eor.w	r2, r9, r2
 c004444:	f3c8 4807 	ubfx	r8, r8, #16, #8
 c004448:	f810 900a 	ldrb.w	r9, [r0, sl]
 c00444c:	ea82 420e 	eor.w	r2, r2, lr, lsl #16
 c004450:	f810 e008 	ldrb.w	lr, [r0, r8]
 c004454:	ea82 6209 	eor.w	r2, r2, r9, lsl #24
 c004458:	ea82 220e 	eor.w	r2, r2, lr, lsl #8
 c00445c:	4051      	eors	r1, r2
 c00445e:	e9c3 211e 	strd	r2, r1, [r3, #120]	; 0x78
 c004462:	ea8c 0c01 	eor.w	ip, ip, r1
 c004466:	4e48      	ldr	r6, [pc, #288]	; (c004588 <mbedtls_aes_setkey_enc+0x358>)
 c004468:	404c      	eors	r4, r1
 c00446a:	ea87 0e0c 	eor.w	lr, r7, ip
 c00446e:	ea85 0801 	eor.w	r8, r5, r1
 c004472:	f8c3 c084 	str.w	ip, [r3, #132]	; 0x84
 c004476:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
 c00447a:	f8c3 e088 	str.w	lr, [r3, #136]	; 0x88
 c00447e:	f8c3 8080 	str.w	r8, [r3, #128]	; 0x80
 c004482:	6976      	ldr	r6, [r6, #20]
 c004484:	f3c4 2e07 	ubfx	lr, r4, #8, #8
 c004488:	f810 e00e 	ldrb.w	lr, [r0, lr]
 c00448c:	ea4f 6814 	mov.w	r8, r4, lsr #24
 c004490:	f810 9008 	ldrb.w	r9, [r0, r8]
 c004494:	4072      	eors	r2, r6
 c004496:	fa5f f884 	uxtb.w	r8, r4
 c00449a:	f810 8008 	ldrb.w	r8, [r0, r8]
 c00449e:	ea8e 0202 	eor.w	r2, lr, r2
 c0044a2:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 c0044a6:	f810 e00e 	ldrb.w	lr, [r0, lr]
 c0044aa:	ea82 4209 	eor.w	r2, r2, r9, lsl #16
 c0044ae:	ea82 6208 	eor.w	r2, r2, r8, lsl #24
 c0044b2:	ea82 220e 	eor.w	r2, r2, lr, lsl #8
 c0044b6:	4055      	eors	r5, r2
 c0044b8:	ea87 0e05 	eor.w	lr, r7, r5
 c0044bc:	ea84 090e 	eor.w	r9, r4, lr
 c0044c0:	4051      	eors	r1, r2
 c0044c2:	e9c3 1525 	strd	r1, r5, [r3, #148]	; 0x94
 c0044c6:	e9c3 e928 	strd	lr, r9, [r3, #160]	; 0xa0
 c0044ca:	4e2f      	ldr	r6, [pc, #188]	; (c004588 <mbedtls_aes_setkey_enc+0x358>)
 c0044cc:	ea8c 0805 	eor.w	r8, ip, r5
 c0044d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 c0044d4:	f8c3 809c 	str.w	r8, [r3, #156]	; 0x9c
 c0044d8:	69b6      	ldr	r6, [r6, #24]
 c0044da:	f3c9 2807 	ubfx	r8, r9, #8, #8
 c0044de:	f810 8008 	ldrb.w	r8, [r0, r8]
 c0044e2:	ea4f 6a19 	mov.w	sl, r9, lsr #24
 c0044e6:	f810 a00a 	ldrb.w	sl, [r0, sl]
 c0044ea:	4072      	eors	r2, r6
 c0044ec:	fa5f fb89 	uxtb.w	fp, r9
 c0044f0:	f810 b00b 	ldrb.w	fp, [r0, fp]
 c0044f4:	ea88 0802 	eor.w	r8, r8, r2
 c0044f8:	f3c9 4207 	ubfx	r2, r9, #16, #8
 c0044fc:	5c82      	ldrb	r2, [r0, r2]
 c0044fe:	ea88 480a 	eor.w	r8, r8, sl, lsl #16
 c004502:	ea88 680b 	eor.w	r8, r8, fp, lsl #24
 c004506:	ea88 2802 	eor.w	r8, r8, r2, lsl #8
 c00450a:	ea81 0108 	eor.w	r1, r1, r8
 c00450e:	ea8c 0c01 	eor.w	ip, ip, r1
 c004512:	ea84 040c 	eor.w	r4, r4, ip
 c004516:	ea8e 020c 	eor.w	r2, lr, ip
 c00451a:	e9c3 242e 	strd	r2, r4, [r3, #184]	; 0xb8
 c00451e:	e9c3 812a 	strd	r8, r1, [r3, #168]	; 0xa8
 c004522:	4e19      	ldr	r6, [pc, #100]	; (c004588 <mbedtls_aes_setkey_enc+0x358>)
 c004524:	ea85 0901 	eor.w	r9, r5, r1
 c004528:	f8c3 c0b4 	str.w	ip, [r3, #180]	; 0xb4
 c00452c:	f8c3 90b0 	str.w	r9, [r3, #176]	; 0xb0
 c004530:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 c004534:	f3c4 2207 	ubfx	r2, r4, #8, #8
 c004538:	5c82      	ldrb	r2, [r0, r2]
 c00453a:	0e26      	lsrs	r6, r4, #24
 c00453c:	f810 9006 	ldrb.w	r9, [r0, r6]
 c004540:	ea88 080e 	eor.w	r8, r8, lr
 c004544:	b2e6      	uxtb	r6, r4
 c004546:	5d86      	ldrb	r6, [r0, r6]
 c004548:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 c00454c:	ea82 0208 	eor.w	r2, r2, r8
 c004550:	f810 000e 	ldrb.w	r0, [r0, lr]
 c004554:	ea82 4209 	eor.w	r2, r2, r9, lsl #16
 c004558:	ea82 6206 	eor.w	r2, r2, r6, lsl #24
 c00455c:	ea82 2200 	eor.w	r2, r2, r0, lsl #8
 c004560:	4055      	eors	r5, r2
 c004562:	4057      	eors	r7, r2
 c004564:	ea85 060c 	eor.w	r6, r5, ip
 c004568:	407c      	eors	r4, r7
 c00456a:	4051      	eors	r1, r2
 c00456c:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
 c004570:	f8c3 60cc 	str.w	r6, [r3, #204]	; 0xcc
 c004574:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
 c004578:	f8c3 50c8 	str.w	r5, [r3, #200]	; 0xc8
 c00457c:	f8c3 70d0 	str.w	r7, [r3, #208]	; 0xd0
 c004580:	e68e      	b.n	c0042a0 <mbedtls_aes_setkey_enc+0x70>
 c004582:	bf00      	nop
 c004584:	300022e4 	.word	0x300022e4
 c004588:	300011bc 	.word	0x300011bc
 c00458c:	300000bc 	.word	0x300000bc
 c004590:	f8df 8358 	ldr.w	r8, [pc, #856]	; c0048ec <mbedtls_aes_setkey_enc+0x6bc>
 c004594:	69dc      	ldr	r4, [r3, #28]
 c004596:	681a      	ldr	r2, [r3, #0]
 c004598:	48d1      	ldr	r0, [pc, #836]	; (c0048e0 <mbedtls_aes_setkey_enc+0x6b0>)
 c00459a:	e9d3 6701 	ldrd	r6, r7, [r3, #4]
 c00459e:	9601      	str	r6, [sp, #4]
 c0045a0:	e9d3 ce05 	ldrd	ip, lr, [r3, #20]
 c0045a4:	e9d3 5103 	ldrd	r5, r1, [r3, #12]
 c0045a8:	f858 bf04 	ldr.w	fp, [r8, #4]!
 c0045ac:	f3c4 2907 	ubfx	r9, r4, #8, #8
 c0045b0:	f810 a009 	ldrb.w	sl, [r0, r9]
 c0045b4:	ea4f 6914 	mov.w	r9, r4, lsr #24
 c0045b8:	ea82 020b 	eor.w	r2, r2, fp
 c0045bc:	f810 b009 	ldrb.w	fp, [r0, r9]
 c0045c0:	fa5f f984 	uxtb.w	r9, r4
 c0045c4:	f810 9009 	ldrb.w	r9, [r0, r9]
 c0045c8:	ea8a 0202 	eor.w	r2, sl, r2
 c0045cc:	f3c4 4a07 	ubfx	sl, r4, #16, #8
 c0045d0:	f810 a00a 	ldrb.w	sl, [r0, sl]
 c0045d4:	ea82 420b 	eor.w	r2, r2, fp, lsl #16
 c0045d8:	9e01      	ldr	r6, [sp, #4]
 c0045da:	ea82 6209 	eor.w	r2, r2, r9, lsl #24
 c0045de:	ea82 220a 	eor.w	r2, r2, sl, lsl #8
 c0045e2:	4056      	eors	r6, r2
 c0045e4:	4077      	eors	r7, r6
 c0045e6:	407d      	eors	r5, r7
 c0045e8:	e9c3 2608 	strd	r2, r6, [r3, #32]
 c0045ec:	e9c3 750a 	strd	r7, r5, [r3, #40]	; 0x28
 c0045f0:	fa5f f985 	uxtb.w	r9, r5
 c0045f4:	f810 a009 	ldrb.w	sl, [r0, r9]
 c0045f8:	ea4f 6915 	mov.w	r9, r5, lsr #24
 c0045fc:	f810 b009 	ldrb.w	fp, [r0, r9]
 c004600:	f3c5 2907 	ubfx	r9, r5, #8, #8
 c004604:	f810 9009 	ldrb.w	r9, [r0, r9]
 c004608:	ea8a 0101 	eor.w	r1, sl, r1
 c00460c:	f3c5 4a07 	ubfx	sl, r5, #16, #8
 c004610:	f810 a00a 	ldrb.w	sl, [r0, sl]
 c004614:	ea81 610b 	eor.w	r1, r1, fp, lsl #24
 c004618:	ea81 2109 	eor.w	r1, r1, r9, lsl #8
 c00461c:	ea81 410a 	eor.w	r1, r1, sl, lsl #16
 c004620:	ea8c 0c01 	eor.w	ip, ip, r1
 c004624:	9601      	str	r6, [sp, #4]
 c004626:	4eaf      	ldr	r6, [pc, #700]	; (c0048e4 <mbedtls_aes_setkey_enc+0x6b4>)
 c004628:	ea8e 0e0c 	eor.w	lr, lr, ip
 c00462c:	ea84 040e 	eor.w	r4, r4, lr
 c004630:	4546      	cmp	r6, r8
 c004632:	e9c3 e40e 	strd	lr, r4, [r3, #56]	; 0x38
 c004636:	e9c3 1c0c 	strd	r1, ip, [r3, #48]	; 0x30
 c00463a:	f103 0320 	add.w	r3, r3, #32
 c00463e:	d1b3      	bne.n	c0045a8 <mbedtls_aes_setkey_enc+0x378>
 c004640:	e62e      	b.n	c0042a0 <mbedtls_aes_setkey_enc+0x70>
 c004642:	4ea9      	ldr	r6, [pc, #676]	; (c0048e8 <mbedtls_aes_setkey_enc+0x6b8>)
 c004644:	68da      	ldr	r2, [r3, #12]
 c004646:	48a6      	ldr	r0, [pc, #664]	; (c0048e0 <mbedtls_aes_setkey_enc+0x6b0>)
 c004648:	6831      	ldr	r1, [r6, #0]
 c00464a:	681d      	ldr	r5, [r3, #0]
 c00464c:	f3c2 2407 	ubfx	r4, r2, #8, #8
 c004650:	5d07      	ldrb	r7, [r0, r4]
 c004652:	0e14      	lsrs	r4, r2, #24
 c004654:	4069      	eors	r1, r5
 c004656:	5d05      	ldrb	r5, [r0, r4]
 c004658:	b2d4      	uxtb	r4, r2
 c00465a:	404f      	eors	r7, r1
 c00465c:	5d01      	ldrb	r1, [r0, r4]
 c00465e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 c004662:	ea87 4705 	eor.w	r7, r7, r5, lsl #16
 c004666:	5d05      	ldrb	r5, [r0, r4]
 c004668:	ea87 6701 	eor.w	r7, r7, r1, lsl #24
 c00466c:	6859      	ldr	r1, [r3, #4]
 c00466e:	f8d3 8008 	ldr.w	r8, [r3, #8]
 c004672:	ea87 2705 	eor.w	r7, r7, r5, lsl #8
 c004676:	4079      	eors	r1, r7
 c004678:	ea81 0508 	eor.w	r5, r1, r8
 c00467c:	406a      	eors	r2, r5
 c00467e:	e9c3 7104 	strd	r7, r1, [r3, #16]
 c004682:	e9c3 5206 	strd	r5, r2, [r3, #24]
 c004686:	f3c2 2507 	ubfx	r5, r2, #8, #8
 c00468a:	6874      	ldr	r4, [r6, #4]
 c00468c:	5d45      	ldrb	r5, [r0, r5]
 c00468e:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 c004692:	f810 e00c 	ldrb.w	lr, [r0, ip]
 c004696:	4067      	eors	r7, r4
 c004698:	fa5f fc82 	uxtb.w	ip, r2
 c00469c:	f810 c00c 	ldrb.w	ip, [r0, ip]
 c0046a0:	407d      	eors	r5, r7
 c0046a2:	f3c2 4707 	ubfx	r7, r2, #16, #8
 c0046a6:	5dc7      	ldrb	r7, [r0, r7]
 c0046a8:	ea85 450e 	eor.w	r5, r5, lr, lsl #16
 c0046ac:	ea85 650c 	eor.w	r5, r5, ip, lsl #24
 c0046b0:	ea85 2507 	eor.w	r5, r5, r7, lsl #8
 c0046b4:	ea88 0405 	eor.w	r4, r8, r5
 c0046b8:	4069      	eors	r1, r5
 c0046ba:	e9c3 1409 	strd	r1, r4, [r3, #36]	; 0x24
 c0046be:	ea84 0e02 	eor.w	lr, r4, r2
 c0046c2:	621d      	str	r5, [r3, #32]
 c0046c4:	f8c3 e02c 	str.w	lr, [r3, #44]	; 0x2c
 c0046c8:	68b7      	ldr	r7, [r6, #8]
 c0046ca:	f3ce 2c07 	ubfx	ip, lr, #8, #8
 c0046ce:	f810 c00c 	ldrb.w	ip, [r0, ip]
 c0046d2:	407d      	eors	r5, r7
 c0046d4:	ea4f 671e 	mov.w	r7, lr, lsr #24
 c0046d8:	f810 8007 	ldrb.w	r8, [r0, r7]
 c0046dc:	fa5f f78e 	uxtb.w	r7, lr
 c0046e0:	5dc7      	ldrb	r7, [r0, r7]
 c0046e2:	ea8c 0505 	eor.w	r5, ip, r5
 c0046e6:	f3ce 4e07 	ubfx	lr, lr, #16, #8
 c0046ea:	ea85 4c08 	eor.w	ip, r5, r8, lsl #16
 c0046ee:	f810 500e 	ldrb.w	r5, [r0, lr]
 c0046f2:	ea8c 6c07 	eor.w	ip, ip, r7, lsl #24
 c0046f6:	ea8c 2c05 	eor.w	ip, ip, r5, lsl #8
 c0046fa:	ea8c 0101 	eor.w	r1, ip, r1
 c0046fe:	e9c3 c10c 	strd	ip, r1, [r3, #48]	; 0x30
 c004702:	404a      	eors	r2, r1
 c004704:	ea81 0704 	eor.w	r7, r1, r4
 c004708:	63da      	str	r2, [r3, #60]	; 0x3c
 c00470a:	f3c2 2507 	ubfx	r5, r2, #8, #8
 c00470e:	639f      	str	r7, [r3, #56]	; 0x38
 c004710:	5d45      	ldrb	r5, [r0, r5]
 c004712:	68f7      	ldr	r7, [r6, #12]
 c004714:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 c004718:	f810 e00e 	ldrb.w	lr, [r0, lr]
 c00471c:	ea8c 0707 	eor.w	r7, ip, r7
 c004720:	fa5f fc82 	uxtb.w	ip, r2
 c004724:	f810 c00c 	ldrb.w	ip, [r0, ip]
 c004728:	407d      	eors	r5, r7
 c00472a:	f3c2 4707 	ubfx	r7, r2, #16, #8
 c00472e:	5dc7      	ldrb	r7, [r0, r7]
 c004730:	ea85 450e 	eor.w	r5, r5, lr, lsl #16
 c004734:	ea85 650c 	eor.w	r5, r5, ip, lsl #24
 c004738:	ea85 2507 	eor.w	r5, r5, r7, lsl #8
 c00473c:	406c      	eors	r4, r5
 c00473e:	4069      	eors	r1, r5
 c004740:	e9c3 1411 	strd	r1, r4, [r3, #68]	; 0x44
 c004744:	ea82 0e04 	eor.w	lr, r2, r4
 c004748:	6937      	ldr	r7, [r6, #16]
 c00474a:	641d      	str	r5, [r3, #64]	; 0x40
 c00474c:	f8c3 e04c 	str.w	lr, [r3, #76]	; 0x4c
 c004750:	f3ce 2c07 	ubfx	ip, lr, #8, #8
 c004754:	f810 c00c 	ldrb.w	ip, [r0, ip]
 c004758:	407d      	eors	r5, r7
 c00475a:	ea4f 671e 	mov.w	r7, lr, lsr #24
 c00475e:	f810 8007 	ldrb.w	r8, [r0, r7]
 c004762:	fa5f f78e 	uxtb.w	r7, lr
 c004766:	5dc7      	ldrb	r7, [r0, r7]
 c004768:	ea8c 0505 	eor.w	r5, ip, r5
 c00476c:	f3ce 4e07 	ubfx	lr, lr, #16, #8
 c004770:	ea85 4c08 	eor.w	ip, r5, r8, lsl #16
 c004774:	f810 500e 	ldrb.w	r5, [r0, lr]
 c004778:	ea8c 6c07 	eor.w	ip, ip, r7, lsl #24
 c00477c:	ea8c 2705 	eor.w	r7, ip, r5, lsl #8
 c004780:	4079      	eors	r1, r7
 c004782:	e9c3 7114 	strd	r7, r1, [r3, #80]	; 0x50
 c004786:	404a      	eors	r2, r1
 c004788:	ea84 0501 	eor.w	r5, r4, r1
 c00478c:	65da      	str	r2, [r3, #92]	; 0x5c
 c00478e:	659d      	str	r5, [r3, #88]	; 0x58
 c004790:	f3c2 2507 	ubfx	r5, r2, #8, #8
 c004794:	f810 8005 	ldrb.w	r8, [r0, r5]
 c004798:	6975      	ldr	r5, [r6, #20]
 c00479a:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 c00479e:	f810 e00e 	ldrb.w	lr, [r0, lr]
 c0047a2:	406f      	eors	r7, r5
 c0047a4:	fa5f fc82 	uxtb.w	ip, r2
 c0047a8:	f810 c00c 	ldrb.w	ip, [r0, ip]
 c0047ac:	ea88 0507 	eor.w	r5, r8, r7
 c0047b0:	f3c2 4707 	ubfx	r7, r2, #16, #8
 c0047b4:	5dc7      	ldrb	r7, [r0, r7]
 c0047b6:	ea85 450e 	eor.w	r5, r5, lr, lsl #16
 c0047ba:	ea85 650c 	eor.w	r5, r5, ip, lsl #24
 c0047be:	ea85 2507 	eor.w	r5, r5, r7, lsl #8
 c0047c2:	406c      	eors	r4, r5
 c0047c4:	4069      	eors	r1, r5
 c0047c6:	e9c3 1419 	strd	r1, r4, [r3, #100]	; 0x64
 c0047ca:	ea82 0e04 	eor.w	lr, r2, r4
 c0047ce:	69b7      	ldr	r7, [r6, #24]
 c0047d0:	661d      	str	r5, [r3, #96]	; 0x60
 c0047d2:	f8c3 e06c 	str.w	lr, [r3, #108]	; 0x6c
 c0047d6:	f3ce 2c07 	ubfx	ip, lr, #8, #8
 c0047da:	f810 c00c 	ldrb.w	ip, [r0, ip]
 c0047de:	407d      	eors	r5, r7
 c0047e0:	ea4f 671e 	mov.w	r7, lr, lsr #24
 c0047e4:	f810 8007 	ldrb.w	r8, [r0, r7]
 c0047e8:	fa5f f78e 	uxtb.w	r7, lr
 c0047ec:	5dc7      	ldrb	r7, [r0, r7]
 c0047ee:	ea8c 0505 	eor.w	r5, ip, r5
 c0047f2:	f3ce 4e07 	ubfx	lr, lr, #16, #8
 c0047f6:	ea85 4c08 	eor.w	ip, r5, r8, lsl #16
 c0047fa:	f810 500e 	ldrb.w	r5, [r0, lr]
 c0047fe:	ea8c 6c07 	eor.w	ip, ip, r7, lsl #24
 c004802:	ea8c 2705 	eor.w	r7, ip, r5, lsl #8
 c004806:	4079      	eors	r1, r7
 c004808:	404a      	eors	r2, r1
 c00480a:	ea84 0501 	eor.w	r5, r4, r1
 c00480e:	e9c3 711c 	strd	r7, r1, [r3, #112]	; 0x70
 c004812:	e9c3 521e 	strd	r5, r2, [r3, #120]	; 0x78
 c004816:	f3c2 2507 	ubfx	r5, r2, #8, #8
 c00481a:	f810 8005 	ldrb.w	r8, [r0, r5]
 c00481e:	69f5      	ldr	r5, [r6, #28]
 c004820:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 c004824:	f810 e00e 	ldrb.w	lr, [r0, lr]
 c004828:	406f      	eors	r7, r5
 c00482a:	fa5f fc82 	uxtb.w	ip, r2
 c00482e:	f810 c00c 	ldrb.w	ip, [r0, ip]
 c004832:	ea88 0507 	eor.w	r5, r8, r7
 c004836:	f3c2 4707 	ubfx	r7, r2, #16, #8
 c00483a:	5dc7      	ldrb	r7, [r0, r7]
 c00483c:	ea85 450e 	eor.w	r5, r5, lr, lsl #16
 c004840:	ea85 650c 	eor.w	r5, r5, ip, lsl #24
 c004844:	ea85 2507 	eor.w	r5, r5, r7, lsl #8
 c004848:	406c      	eors	r4, r5
 c00484a:	4069      	eors	r1, r5
 c00484c:	e9c3 1421 	strd	r1, r4, [r3, #132]	; 0x84
 c004850:	ea82 0c04 	eor.w	ip, r2, r4
 c004854:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
 c004858:	f8c3 c08c 	str.w	ip, [r3, #140]	; 0x8c
 c00485c:	f3cc 2707 	ubfx	r7, ip, #8, #8
 c004860:	f810 9007 	ldrb.w	r9, [r0, r7]
 c004864:	6a37      	ldr	r7, [r6, #32]
 c004866:	ea4f 6e1c 	mov.w	lr, ip, lsr #24
 c00486a:	f810 800e 	ldrb.w	r8, [r0, lr]
 c00486e:	407d      	eors	r5, r7
 c004870:	fa5f f78c 	uxtb.w	r7, ip
 c004874:	f810 e007 	ldrb.w	lr, [r0, r7]
 c004878:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 c00487c:	ea85 0509 	eor.w	r5, r5, r9
 c004880:	f810 700c 	ldrb.w	r7, [r0, ip]
 c004884:	ea85 4508 	eor.w	r5, r5, r8, lsl #16
 c004888:	ea85 650e 	eor.w	r5, r5, lr, lsl #24
 c00488c:	ea85 2507 	eor.w	r5, r5, r7, lsl #8
 c004890:	4069      	eors	r1, r5
 c004892:	e9c3 5124 	strd	r5, r1, [r3, #144]	; 0x90
 c004896:	404a      	eors	r2, r1
 c004898:	ea84 0701 	eor.w	r7, r4, r1
 c00489c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 c0048a0:	f8c3 7098 	str.w	r7, [r3, #152]	; 0x98
 c0048a4:	f8d6 c024 	ldr.w	ip, [r6, #36]	; 0x24
 c0048a8:	f3c2 2607 	ubfx	r6, r2, #8, #8
 c0048ac:	5d86      	ldrb	r6, [r0, r6]
 c0048ae:	0e17      	lsrs	r7, r2, #24
 c0048b0:	ea85 050c 	eor.w	r5, r5, ip
 c0048b4:	f810 c007 	ldrb.w	ip, [r0, r7]
 c0048b8:	b2d7      	uxtb	r7, r2
 c0048ba:	5dc7      	ldrb	r7, [r0, r7]
 c0048bc:	4075      	eors	r5, r6
 c0048be:	f3c2 4607 	ubfx	r6, r2, #16, #8
 c0048c2:	5d86      	ldrb	r6, [r0, r6]
 c0048c4:	ea85 450c 	eor.w	r5, r5, ip, lsl #16
 c0048c8:	ea85 6007 	eor.w	r0, r5, r7, lsl #24
 c0048cc:	ea80 2006 	eor.w	r0, r0, r6, lsl #8
 c0048d0:	4044      	eors	r4, r0
 c0048d2:	4062      	eors	r2, r4
 c0048d4:	4041      	eors	r1, r0
 c0048d6:	e9c3 422a 	strd	r4, r2, [r3, #168]	; 0xa8
 c0048da:	e9c3 0128 	strd	r0, r1, [r3, #160]	; 0xa0
 c0048de:	e4df      	b.n	c0042a0 <mbedtls_aes_setkey_enc+0x70>
 c0048e0:	300000bc 	.word	0x300000bc
 c0048e4:	300011d4 	.word	0x300011d4
 c0048e8:	300011bc 	.word	0x300011bc
 c0048ec:	300011b8 	.word	0x300011b8

0c0048f0 <mbedtls_aes_setkey_dec>:
 c0048f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0048f4:	4604      	mov	r4, r0
 c0048f6:	460d      	mov	r5, r1
 c0048f8:	4616      	mov	r6, r2
 c0048fa:	b0cb      	sub	sp, #300	; 0x12c
 c0048fc:	f44f 728c 	mov.w	r2, #280	; 0x118
 c004900:	2100      	movs	r1, #0
 c004902:	a804      	add	r0, sp, #16
 c004904:	f000 fe85 	bl	c005612 <memset>
 c004908:	f104 0308 	add.w	r3, r4, #8
 c00490c:	4632      	mov	r2, r6
 c00490e:	4629      	mov	r1, r5
 c004910:	6063      	str	r3, [r4, #4]
 c004912:	a804      	add	r0, sp, #16
 c004914:	f7ff fc8c 	bl	c004230 <mbedtls_aes_setkey_enc>
 c004918:	9002      	str	r0, [sp, #8]
 c00491a:	2800      	cmp	r0, #0
 c00491c:	f040 80c7 	bne.w	c004aae <mbedtls_aes_setkey_dec+0x1be>
 c004920:	e9dd e104 	ldrd	lr, r1, [sp, #16]
 c004924:	ea4f 130e 	mov.w	r3, lr, lsl #4
 c004928:	58cb      	ldr	r3, [r1, r3]
 c00492a:	eb01 110e 	add.w	r1, r1, lr, lsl #4
 c00492e:	60a3      	str	r3, [r4, #8]
 c004930:	684b      	ldr	r3, [r1, #4]
 c004932:	f10e 32ff 	add.w	r2, lr, #4294967295
 c004936:	60e3      	str	r3, [r4, #12]
 c004938:	688b      	ldr	r3, [r1, #8]
 c00493a:	2a00      	cmp	r2, #0
 c00493c:	6123      	str	r3, [r4, #16]
 c00493e:	68cb      	ldr	r3, [r1, #12]
 c004940:	4694      	mov	ip, r2
 c004942:	6163      	str	r3, [r4, #20]
 c004944:	f104 0318 	add.w	r3, r4, #24
 c004948:	9203      	str	r2, [sp, #12]
 c00494a:	f8c4 e000 	str.w	lr, [r4]
 c00494e:	f1a1 0810 	sub.w	r8, r1, #16
 c004952:	9301      	str	r3, [sp, #4]
 c004954:	f340 809e 	ble.w	c004a94 <mbedtls_aes_setkey_dec+0x1a4>
 c004958:	4859      	ldr	r0, [pc, #356]	; (c004ac0 <mbedtls_aes_setkey_dec+0x1d0>)
 c00495a:	4b5a      	ldr	r3, [pc, #360]	; (c004ac4 <mbedtls_aes_setkey_dec+0x1d4>)
 c00495c:	4f5a      	ldr	r7, [pc, #360]	; (c004ac8 <mbedtls_aes_setkey_dec+0x1d8>)
 c00495e:	4e5b      	ldr	r6, [pc, #364]	; (c004acc <mbedtls_aes_setkey_dec+0x1dc>)
 c004960:	4d5b      	ldr	r5, [pc, #364]	; (c004ad0 <mbedtls_aes_setkey_dec+0x1e0>)
 c004962:	3920      	subs	r1, #32
 c004964:	3428      	adds	r4, #40	; 0x28
 c004966:	f8d1 a010 	ldr.w	sl, [r1, #16]
 c00496a:	f1bc 0c01 	subs.w	ip, ip, #1
 c00496e:	ea4f 691a 	mov.w	r9, sl, lsr #24
 c004972:	fa5f f28a 	uxtb.w	r2, sl
 c004976:	f813 b009 	ldrb.w	fp, [r3, r9]
 c00497a:	5c9a      	ldrb	r2, [r3, r2]
 c00497c:	f3ca 2907 	ubfx	r9, sl, #8, #8
 c004980:	f813 9009 	ldrb.w	r9, [r3, r9]
 c004984:	f3ca 4a07 	ubfx	sl, sl, #16, #8
 c004988:	f857 b02b 	ldr.w	fp, [r7, fp, lsl #2]
 c00498c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 c004990:	f813 a00a 	ldrb.w	sl, [r3, sl]
 c004994:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 c004998:	f855 a02a 	ldr.w	sl, [r5, sl, lsl #2]
 c00499c:	ea82 020b 	eor.w	r2, r2, fp
 c0049a0:	ea82 0209 	eor.w	r2, r2, r9
 c0049a4:	ea82 020a 	eor.w	r2, r2, sl
 c0049a8:	f844 2c10 	str.w	r2, [r4, #-16]
 c0049ac:	f8d1 a014 	ldr.w	sl, [r1, #20]
 c0049b0:	f104 0410 	add.w	r4, r4, #16
 c0049b4:	ea4f 691a 	mov.w	r9, sl, lsr #24
 c0049b8:	fa5f f28a 	uxtb.w	r2, sl
 c0049bc:	f813 b009 	ldrb.w	fp, [r3, r9]
 c0049c0:	5c9a      	ldrb	r2, [r3, r2]
 c0049c2:	f3ca 2907 	ubfx	r9, sl, #8, #8
 c0049c6:	f813 9009 	ldrb.w	r9, [r3, r9]
 c0049ca:	f3ca 4a07 	ubfx	sl, sl, #16, #8
 c0049ce:	f857 b02b 	ldr.w	fp, [r7, fp, lsl #2]
 c0049d2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 c0049d6:	f813 a00a 	ldrb.w	sl, [r3, sl]
 c0049da:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 c0049de:	f855 a02a 	ldr.w	sl, [r5, sl, lsl #2]
 c0049e2:	ea82 020b 	eor.w	r2, r2, fp
 c0049e6:	ea82 0209 	eor.w	r2, r2, r9
 c0049ea:	ea82 020a 	eor.w	r2, r2, sl
 c0049ee:	f844 2c1c 	str.w	r2, [r4, #-28]
 c0049f2:	f8d1 a018 	ldr.w	sl, [r1, #24]
 c0049f6:	f1a1 0110 	sub.w	r1, r1, #16
 c0049fa:	ea4f 691a 	mov.w	r9, sl, lsr #24
 c0049fe:	fa5f f28a 	uxtb.w	r2, sl
 c004a02:	f813 b009 	ldrb.w	fp, [r3, r9]
 c004a06:	5c9a      	ldrb	r2, [r3, r2]
 c004a08:	f3ca 2907 	ubfx	r9, sl, #8, #8
 c004a0c:	f813 9009 	ldrb.w	r9, [r3, r9]
 c004a10:	f3ca 4a07 	ubfx	sl, sl, #16, #8
 c004a14:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 c004a18:	f857 b02b 	ldr.w	fp, [r7, fp, lsl #2]
 c004a1c:	f813 a00a 	ldrb.w	sl, [r3, sl]
 c004a20:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 c004a24:	f855 a02a 	ldr.w	sl, [r5, sl, lsl #2]
 c004a28:	ea82 020b 	eor.w	r2, r2, fp
 c004a2c:	ea82 0209 	eor.w	r2, r2, r9
 c004a30:	ea82 020a 	eor.w	r2, r2, sl
 c004a34:	f844 2c18 	str.w	r2, [r4, #-24]
 c004a38:	f8d1 a02c 	ldr.w	sl, [r1, #44]	; 0x2c
 c004a3c:	ea4f 691a 	mov.w	r9, sl, lsr #24
 c004a40:	fa5f f28a 	uxtb.w	r2, sl
 c004a44:	5c9a      	ldrb	r2, [r3, r2]
 c004a46:	f813 b009 	ldrb.w	fp, [r3, r9]
 c004a4a:	f3ca 2907 	ubfx	r9, sl, #8, #8
 c004a4e:	f813 9009 	ldrb.w	r9, [r3, r9]
 c004a52:	f3ca 4a07 	ubfx	sl, sl, #16, #8
 c004a56:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 c004a5a:	f857 b02b 	ldr.w	fp, [r7, fp, lsl #2]
 c004a5e:	f813 a00a 	ldrb.w	sl, [r3, sl]
 c004a62:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 c004a66:	f855 a02a 	ldr.w	sl, [r5, sl, lsl #2]
 c004a6a:	ea82 020b 	eor.w	r2, r2, fp
 c004a6e:	ea82 0209 	eor.w	r2, r2, r9
 c004a72:	ea82 020a 	eor.w	r2, r2, sl
 c004a76:	f844 2c14 	str.w	r2, [r4, #-20]
 c004a7a:	f47f af74 	bne.w	c004966 <mbedtls_aes_setkey_dec+0x76>
 c004a7e:	9b01      	ldr	r3, [sp, #4]
 c004a80:	9a03      	ldr	r2, [sp, #12]
 c004a82:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 c004a86:	eb08 180e 	add.w	r8, r8, lr, lsl #4
 c004a8a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 c004a8e:	f108 0810 	add.w	r8, r8, #16
 c004a92:	9301      	str	r3, [sp, #4]
 c004a94:	f8d8 3000 	ldr.w	r3, [r8]
 c004a98:	9a01      	ldr	r2, [sp, #4]
 c004a9a:	6013      	str	r3, [r2, #0]
 c004a9c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 c004aa0:	6053      	str	r3, [r2, #4]
 c004aa2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 c004aa6:	6093      	str	r3, [r2, #8]
 c004aa8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 c004aac:	60d3      	str	r3, [r2, #12]
 c004aae:	a804      	add	r0, sp, #16
 c004ab0:	f44f 718c 	mov.w	r1, #280	; 0x118
 c004ab4:	f000 fd52 	bl	c00555c <mbedtls_platform_zeroize>
 c004ab8:	9802      	ldr	r0, [sp, #8]
 c004aba:	b04b      	add	sp, #300	; 0x12c
 c004abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c004ac0:	300012e4 	.word	0x300012e4
 c004ac4:	300000bc 	.word	0x300000bc
 c004ac8:	30001ee4 	.word	0x30001ee4
 c004acc:	300016e4 	.word	0x300016e4
 c004ad0:	30001ae4 	.word	0x30001ae4

0c004ad4 <mbedtls_internal_aes_encrypt>:
 c004ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c004ad8:	6844      	ldr	r4, [r0, #4]
 c004ada:	6800      	ldr	r0, [r0, #0]
 c004adc:	b091      	sub	sp, #68	; 0x44
 c004ade:	1040      	asrs	r0, r0, #1
 c004ae0:	3801      	subs	r0, #1
 c004ae2:	9206      	str	r2, [sp, #24]
 c004ae4:	4602      	mov	r2, r0
 c004ae6:	680d      	ldr	r5, [r1, #0]
 c004ae8:	684b      	ldr	r3, [r1, #4]
 c004aea:	9508      	str	r5, [sp, #32]
 c004aec:	6826      	ldr	r6, [r4, #0]
 c004aee:	68cf      	ldr	r7, [r1, #12]
 c004af0:	ea85 0b06 	eor.w	fp, r5, r6
 c004af4:	e9cd b308 	strd	fp, r3, [sp, #32]
 c004af8:	6865      	ldr	r5, [r4, #4]
 c004afa:	688e      	ldr	r6, [r1, #8]
 c004afc:	406b      	eors	r3, r5
 c004afe:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
 c004b02:	68a5      	ldr	r5, [r4, #8]
 c004b04:	9007      	str	r0, [sp, #28]
 c004b06:	ea86 0105 	eor.w	r1, r6, r5
 c004b0a:	e9cd 170a 	strd	r1, r7, [sp, #40]	; 0x28
 c004b0e:	68e5      	ldr	r5, [r4, #12]
 c004b10:	9002      	str	r0, [sp, #8]
 c004b12:	ea87 0805 	eor.w	r8, r7, r5
 c004b16:	f104 0010 	add.w	r0, r4, #16
 c004b1a:	2a00      	cmp	r2, #0
 c004b1c:	f8df c39c 	ldr.w	ip, [pc, #924]	; c004ebc <mbedtls_internal_aes_encrypt+0x3e8>
 c004b20:	f8df e39c 	ldr.w	lr, [pc, #924]	; c004ec0 <mbedtls_internal_aes_encrypt+0x3ec>
 c004b24:	4ee2      	ldr	r6, [pc, #904]	; (c004eb0 <mbedtls_internal_aes_encrypt+0x3dc>)
 c004b26:	4de3      	ldr	r5, [pc, #908]	; (c004eb4 <mbedtls_internal_aes_encrypt+0x3e0>)
 c004b28:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 c004b2c:	9005      	str	r0, [sp, #20]
 c004b2e:	f340 80e4 	ble.w	c004cfa <mbedtls_internal_aes_encrypt+0x226>
 c004b32:	4640      	mov	r0, r8
 c004b34:	3430      	adds	r4, #48	; 0x30
 c004b36:	f8cd b004 	str.w	fp, [sp, #4]
 c004b3a:	f8dd b004 	ldr.w	fp, [sp, #4]
 c004b3e:	f854 2c20 	ldr.w	r2, [r4, #-32]
 c004b42:	fa5f f78b 	uxtb.w	r7, fp
 c004b46:	ea4f 6810 	mov.w	r8, r0, lsr #24
 c004b4a:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 c004b4e:	f85e a028 	ldr.w	sl, [lr, r8, lsl #2]
 c004b52:	f3c3 2807 	ubfx	r8, r3, #8, #8
 c004b56:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 c004b5a:	4057      	eors	r7, r2
 c004b5c:	f3c1 4907 	ubfx	r9, r1, #16, #8
 c004b60:	f855 9029 	ldr.w	r9, [r5, r9, lsl #2]
 c004b64:	ea87 070a 	eor.w	r7, r7, sl
 c004b68:	ea87 0708 	eor.w	r7, r7, r8
 c004b6c:	ea87 0209 	eor.w	r2, r7, r9
 c004b70:	920c      	str	r2, [sp, #48]	; 0x30
 c004b72:	fa5f f883 	uxtb.w	r8, r3
 c004b76:	f85c 7028 	ldr.w	r7, [ip, r8, lsl #2]
 c004b7a:	9203      	str	r2, [sp, #12]
 c004b7c:	ea4f 681b 	mov.w	r8, fp, lsr #24
 c004b80:	f854 2c1c 	ldr.w	r2, [r4, #-28]
 c004b84:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
 c004b88:	f3c1 2907 	ubfx	r9, r1, #8, #8
 c004b8c:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 c004b90:	4057      	eors	r7, r2
 c004b92:	f3c0 4a07 	ubfx	sl, r0, #16, #8
 c004b96:	f855 a02a 	ldr.w	sl, [r5, sl, lsl #2]
 c004b9a:	ea87 0708 	eor.w	r7, r7, r8
 c004b9e:	ea87 0809 	eor.w	r8, r7, r9
 c004ba2:	ea88 080a 	eor.w	r8, r8, sl
 c004ba6:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 c004baa:	fa5f f981 	uxtb.w	r9, r1
 c004bae:	f854 2c18 	ldr.w	r2, [r4, #-24]
 c004bb2:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 c004bb6:	ea4f 6913 	mov.w	r9, r3, lsr #24
 c004bba:	407a      	eors	r2, r7
 c004bbc:	9204      	str	r2, [sp, #16]
 c004bbe:	465a      	mov	r2, fp
 c004bc0:	f85e a029 	ldr.w	sl, [lr, r9, lsl #2]
 c004bc4:	9f04      	ldr	r7, [sp, #16]
 c004bc6:	f3c0 2907 	ubfx	r9, r0, #8, #8
 c004bca:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 c004bce:	f3cb 4b07 	ubfx	fp, fp, #16, #8
 c004bd2:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 c004bd6:	ea87 070a 	eor.w	r7, r7, sl
 c004bda:	ea87 0709 	eor.w	r7, r7, r9
 c004bde:	ea87 070b 	eor.w	r7, r7, fp
 c004be2:	970e      	str	r7, [sp, #56]	; 0x38
 c004be4:	b2c0      	uxtb	r0, r0
 c004be6:	f85c b020 	ldr.w	fp, [ip, r0, lsl #2]
 c004bea:	ea4f 6911 	mov.w	r9, r1, lsr #24
 c004bee:	f854 1c14 	ldr.w	r1, [r4, #-20]
 c004bf2:	f85e 0029 	ldr.w	r0, [lr, r9, lsl #2]
 c004bf6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 c004bfa:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 c004bfe:	ea8b 0901 	eor.w	r9, fp, r1
 c004c02:	f3c3 4307 	ubfx	r3, r3, #16, #8
 c004c06:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 c004c0a:	ea89 0900 	eor.w	r9, r9, r0
 c004c0e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 c004c12:	ea89 0902 	eor.w	r9, r9, r2
 c004c16:	ea89 0903 	eor.w	r9, r9, r3
 c004c1a:	ea4f 6219 	mov.w	r2, r9, lsr #24
 c004c1e:	fa5f f38b 	uxtb.w	r3, fp
 c004c22:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
 c004c26:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 c004c2a:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 c004c2e:	f854 3c10 	ldr.w	r3, [r4, #-16]
 c004c32:	f3c8 2107 	ubfx	r1, r8, #8, #8
 c004c36:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 c004c3a:	4042      	eors	r2, r0
 c004c3c:	f3c7 4007 	ubfx	r0, r7, #16, #8
 c004c40:	405a      	eors	r2, r3
 c004c42:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 c004c46:	404a      	eors	r2, r1
 c004c48:	405a      	eors	r2, r3
 c004c4a:	465b      	mov	r3, fp
 c004c4c:	fa5f f188 	uxtb.w	r1, r8
 c004c50:	0e1b      	lsrs	r3, r3, #24
 c004c52:	9208      	str	r2, [sp, #32]
 c004c54:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 c004c58:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 c004c5c:	9201      	str	r2, [sp, #4]
 c004c5e:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 c004c62:	404b      	eors	r3, r1
 c004c64:	ea83 0102 	eor.w	r1, r3, r2
 c004c68:	465a      	mov	r2, fp
 c004c6a:	f3c7 2007 	ubfx	r0, r7, #8, #8
 c004c6e:	f3c9 4a07 	ubfx	sl, r9, #16, #8
 c004c72:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 c004c76:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
 c004c7a:	4041      	eors	r1, r0
 c004c7c:	404b      	eors	r3, r1
 c004c7e:	b2f8      	uxtb	r0, r7
 c004c80:	ea4f 6118 	mov.w	r1, r8, lsr #24
 c004c84:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 c004c88:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 c004c8c:	9309      	str	r3, [sp, #36]	; 0x24
 c004c8e:	4041      	eors	r1, r0
 c004c90:	f3c9 2a07 	ubfx	sl, r9, #8, #8
 c004c94:	f854 0c08 	ldr.w	r0, [r4, #-8]
 c004c98:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
 c004c9c:	f3cb 4b07 	ubfx	fp, fp, #16, #8
 c004ca0:	4048      	eors	r0, r1
 c004ca2:	f855 102b 	ldr.w	r1, [r5, fp, lsl #2]
 c004ca6:	ea80 000a 	eor.w	r0, r0, sl
 c004caa:	0e3f      	lsrs	r7, r7, #24
 c004cac:	fa5f f989 	uxtb.w	r9, r9
 c004cb0:	4041      	eors	r1, r0
 c004cb2:	910a      	str	r1, [sp, #40]	; 0x28
 c004cb4:	f85e 0027 	ldr.w	r0, [lr, r7, lsl #2]
 c004cb8:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 c004cbc:	f3c2 2907 	ubfx	r9, r2, #8, #8
 c004cc0:	f854 2c04 	ldr.w	r2, [r4, #-4]
 c004cc4:	4078      	eors	r0, r7
 c004cc6:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 c004cca:	f3c8 4807 	ubfx	r8, r8, #16, #8
 c004cce:	4050      	eors	r0, r2
 c004cd0:	f855 7028 	ldr.w	r7, [r5, r8, lsl #2]
 c004cd4:	9a02      	ldr	r2, [sp, #8]
 c004cd6:	ea80 0009 	eor.w	r0, r0, r9
 c004cda:	4078      	eors	r0, r7
 c004cdc:	3a01      	subs	r2, #1
 c004cde:	900b      	str	r0, [sp, #44]	; 0x2c
 c004ce0:	f104 0420 	add.w	r4, r4, #32
 c004ce4:	9202      	str	r2, [sp, #8]
 c004ce6:	f47f af28 	bne.w	c004b3a <mbedtls_internal_aes_encrypt+0x66>
 c004cea:	9a05      	ldr	r2, [sp, #20]
 c004cec:	4680      	mov	r8, r0
 c004cee:	9807      	ldr	r0, [sp, #28]
 c004cf0:	f8dd b004 	ldr.w	fp, [sp, #4]
 c004cf4:	eb02 1240 	add.w	r2, r2, r0, lsl #5
 c004cf8:	9205      	str	r2, [sp, #20]
 c004cfa:	fa5f f08b 	uxtb.w	r0, fp
 c004cfe:	ea4f 6218 	mov.w	r2, r8, lsr #24
 c004d02:	f85c 7020 	ldr.w	r7, [ip, r0, lsl #2]
 c004d06:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 c004d0a:	9a05      	ldr	r2, [sp, #20]
 c004d0c:	f3c3 2407 	ubfx	r4, r3, #8, #8
 c004d10:	6812      	ldr	r2, [r2, #0]
 c004d12:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 c004d16:	4078      	eors	r0, r7
 c004d18:	f3c1 4707 	ubfx	r7, r1, #16, #8
 c004d1c:	4050      	eors	r0, r2
 c004d1e:	f855 2027 	ldr.w	r2, [r5, r7, lsl #2]
 c004d22:	4060      	eors	r0, r4
 c004d24:	4050      	eors	r0, r2
 c004d26:	900c      	str	r0, [sp, #48]	; 0x30
 c004d28:	9001      	str	r0, [sp, #4]
 c004d2a:	b2dc      	uxtb	r4, r3
 c004d2c:	9805      	ldr	r0, [sp, #20]
 c004d2e:	ea4f 621b 	mov.w	r2, fp, lsr #24
 c004d32:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 c004d36:	f85e 4022 	ldr.w	r4, [lr, r2, lsl #2]
 c004d3a:	f3c1 2907 	ubfx	r9, r1, #8, #8
 c004d3e:	6842      	ldr	r2, [r0, #4]
 c004d40:	407c      	eors	r4, r7
 c004d42:	f856 7029 	ldr.w	r7, [r6, r9, lsl #2]
 c004d46:	f3c8 4907 	ubfx	r9, r8, #16, #8
 c004d4a:	4062      	eors	r2, r4
 c004d4c:	f855 4029 	ldr.w	r4, [r5, r9, lsl #2]
 c004d50:	4057      	eors	r7, r2
 c004d52:	4067      	eors	r7, r4
 c004d54:	0e1a      	lsrs	r2, r3, #24
 c004d56:	b2cc      	uxtb	r4, r1
 c004d58:	970d      	str	r7, [sp, #52]	; 0x34
 c004d5a:	f85c a024 	ldr.w	sl, [ip, r4, lsl #2]
 c004d5e:	f85e 4022 	ldr.w	r4, [lr, r2, lsl #2]
 c004d62:	f3c8 2907 	ubfx	r9, r8, #8, #8
 c004d66:	6882      	ldr	r2, [r0, #8]
 c004d68:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 c004d6c:	ea8a 0404 	eor.w	r4, sl, r4
 c004d70:	f3cb 4a07 	ubfx	sl, fp, #16, #8
 c004d74:	4062      	eors	r2, r4
 c004d76:	f855 402a 	ldr.w	r4, [r5, sl, lsl #2]
 c004d7a:	ea82 0209 	eor.w	r2, r2, r9
 c004d7e:	4062      	eors	r2, r4
 c004d80:	0e09      	lsrs	r1, r1, #24
 c004d82:	fa5f f888 	uxtb.w	r8, r8
 c004d86:	920e      	str	r2, [sp, #56]	; 0x38
 c004d88:	f85e 4021 	ldr.w	r4, [lr, r1, lsl #2]
 c004d8c:	f85c 1028 	ldr.w	r1, [ip, r8, lsl #2]
 c004d90:	68c0      	ldr	r0, [r0, #12]
 c004d92:	f3cb 2c07 	ubfx	ip, fp, #8, #8
 c004d96:	f856 602c 	ldr.w	r6, [r6, ip, lsl #2]
 c004d9a:	404c      	eors	r4, r1
 c004d9c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 c004da0:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 c004da4:	ea84 0300 	eor.w	r3, r4, r0
 c004da8:	f8dd e004 	ldr.w	lr, [sp, #4]
 c004dac:	4073      	eors	r3, r6
 c004dae:	406b      	eors	r3, r5
 c004db0:	9805      	ldr	r0, [sp, #20]
 c004db2:	4d41      	ldr	r5, [pc, #260]	; (c004eb8 <mbedtls_internal_aes_encrypt+0x3e4>)
 c004db4:	930f      	str	r3, [sp, #60]	; 0x3c
 c004db6:	fa5f f18e 	uxtb.w	r1, lr
 c004dba:	6904      	ldr	r4, [r0, #16]
 c004dbc:	5c69      	ldrb	r1, [r5, r1]
 c004dbe:	0e1e      	lsrs	r6, r3, #24
 c004dc0:	f815 c006 	ldrb.w	ip, [r5, r6]
 c004dc4:	f3c7 2607 	ubfx	r6, r7, #8, #8
 c004dc8:	5dae      	ldrb	r6, [r5, r6]
 c004dca:	4061      	eors	r1, r4
 c004dcc:	f3c2 4407 	ubfx	r4, r2, #16, #8
 c004dd0:	5d2c      	ldrb	r4, [r5, r4]
 c004dd2:	ea81 610c 	eor.w	r1, r1, ip, lsl #24
 c004dd6:	ea81 2106 	eor.w	r1, r1, r6, lsl #8
 c004dda:	fa5f fc87 	uxtb.w	ip, r7
 c004dde:	f815 c00c 	ldrb.w	ip, [r5, ip]
 c004de2:	ea81 4104 	eor.w	r1, r1, r4, lsl #16
 c004de6:	6944      	ldr	r4, [r0, #20]
 c004de8:	9805      	ldr	r0, [sp, #20]
 c004dea:	ea4f 681e 	mov.w	r8, lr, lsr #24
 c004dee:	b2de      	uxtb	r6, r3
 c004df0:	fa5f fe82 	uxtb.w	lr, r2
 c004df4:	f815 e00e 	ldrb.w	lr, [r5, lr]
 c004df8:	f8d0 901c 	ldr.w	r9, [r0, #28]
 c004dfc:	9102      	str	r1, [sp, #8]
 c004dfe:	9108      	str	r1, [sp, #32]
 c004e00:	ea4f 6a17 	mov.w	sl, r7, lsr #24
 c004e04:	f815 1008 	ldrb.w	r1, [r5, r8]
 c004e08:	ea8c 0c04 	eor.w	ip, ip, r4
 c004e0c:	f815 8006 	ldrb.w	r8, [r5, r6]
 c004e10:	f3c3 2407 	ubfx	r4, r3, #8, #8
 c004e14:	6986      	ldr	r6, [r0, #24]
 c004e16:	f3c3 4307 	ubfx	r3, r3, #16, #8
 c004e1a:	9801      	ldr	r0, [sp, #4]
 c004e1c:	f815 a00a 	ldrb.w	sl, [r5, sl]
 c004e20:	9303      	str	r3, [sp, #12]
 c004e22:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 c004e26:	f815 b00b 	ldrb.w	fp, [r5, fp]
 c004e2a:	5d2c      	ldrb	r4, [r5, r4]
 c004e2c:	9b03      	ldr	r3, [sp, #12]
 c004e2e:	ea88 0809 	eor.w	r8, r8, r9
 c004e32:	ea8e 0606 	eor.w	r6, lr, r6
 c004e36:	f3c0 2907 	ubfx	r9, r0, #8, #8
 c004e3a:	f3c0 4007 	ubfx	r0, r0, #16, #8
 c004e3e:	f815 9009 	ldrb.w	r9, [r5, r9]
 c004e42:	5c28      	ldrb	r0, [r5, r0]
 c004e44:	ea86 660a 	eor.w	r6, r6, sl, lsl #24
 c004e48:	ea8c 6c01 	eor.w	ip, ip, r1, lsl #24
 c004e4c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 c004e50:	9902      	ldr	r1, [sp, #8]
 c004e52:	f3c7 4707 	ubfx	r7, r7, #16, #8
 c004e56:	f815 e003 	ldrb.w	lr, [r5, r3]
 c004e5a:	5caa      	ldrb	r2, [r5, r2]
 c004e5c:	5def      	ldrb	r7, [r5, r7]
 c004e5e:	ea86 2304 	eor.w	r3, r6, r4, lsl #8
 c004e62:	ea88 680b 	eor.w	r8, r8, fp, lsl #24
 c004e66:	ea83 4300 	eor.w	r3, r3, r0, lsl #16
 c004e6a:	9e02      	ldr	r6, [sp, #8]
 c004e6c:	ea88 2809 	eor.w	r8, r8, r9, lsl #8
 c004e70:	0a08      	lsrs	r0, r1, #8
 c004e72:	ea4f 4b11 	mov.w	fp, r1, lsr #16
 c004e76:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 c004e7a:	9906      	ldr	r1, [sp, #24]
 c004e7c:	ea8c 2c02 	eor.w	ip, ip, r2, lsl #8
 c004e80:	ea88 4207 	eor.w	r2, r8, r7, lsl #16
 c004e84:	ea8c 440e 	eor.w	r4, ip, lr, lsl #16
 c004e88:	700e      	strb	r6, [r1, #0]
 c004e8a:	0e16      	lsrs	r6, r2, #24
 c004e8c:	730a      	strb	r2, [r1, #12]
 c004e8e:	720b      	strb	r3, [r1, #8]
 c004e90:	7048      	strb	r0, [r1, #1]
 c004e92:	710c      	strb	r4, [r1, #4]
 c004e94:	f881 b002 	strb.w	fp, [r1, #2]
 c004e98:	f881 a003 	strb.w	sl, [r1, #3]
 c004e9c:	73ce      	strb	r6, [r1, #15]
 c004e9e:	0a1e      	lsrs	r6, r3, #8
 c004ea0:	0e18      	lsrs	r0, r3, #24
 c004ea2:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 c004ea6:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 c004eaa:	0c17      	lsrs	r7, r2, #16
 c004eac:	724e      	strb	r6, [r1, #9]
 c004eae:	e009      	b.n	c004ec4 <mbedtls_internal_aes_encrypt+0x3f0>
 c004eb0:	300005bc 	.word	0x300005bc
 c004eb4:	300009bc 	.word	0x300009bc
 c004eb8:	300000bc 	.word	0x300000bc
 c004ebc:	300001bc 	.word	0x300001bc
 c004ec0:	30000dbc 	.word	0x30000dbc
 c004ec4:	ea4f 2914 	mov.w	r9, r4, lsr #8
 c004ec8:	0c1e      	lsrs	r6, r3, #16
 c004eca:	ea4f 4814 	mov.w	r8, r4, lsr #16
 c004ece:	f881 9005 	strb.w	r9, [r1, #5]
 c004ed2:	f881 8006 	strb.w	r8, [r1, #6]
 c004ed6:	f881 e007 	strb.w	lr, [r1, #7]
 c004eda:	f881 c00d 	strb.w	ip, [r1, #13]
 c004ede:	738f      	strb	r7, [r1, #14]
 c004ee0:	728e      	strb	r6, [r1, #10]
 c004ee2:	72c8      	strb	r0, [r1, #11]
 c004ee4:	2120      	movs	r1, #32
 c004ee6:	eb0d 0001 	add.w	r0, sp, r1
 c004eea:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
 c004eee:	9409      	str	r4, [sp, #36]	; 0x24
 c004ef0:	f000 fb34 	bl	c00555c <mbedtls_platform_zeroize>
 c004ef4:	2000      	movs	r0, #0
 c004ef6:	b011      	add	sp, #68	; 0x44
 c004ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0c004efc <mbedtls_internal_aes_decrypt>:
 c004efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c004f00:	680d      	ldr	r5, [r1, #0]
 c004f02:	b091      	sub	sp, #68	; 0x44
 c004f04:	6844      	ldr	r4, [r0, #4]
 c004f06:	9508      	str	r5, [sp, #32]
 c004f08:	6826      	ldr	r6, [r4, #0]
 c004f0a:	684b      	ldr	r3, [r1, #4]
 c004f0c:	ea85 0b06 	eor.w	fp, r5, r6
 c004f10:	e9cd b308 	strd	fp, r3, [sp, #32]
 c004f14:	6865      	ldr	r5, [r4, #4]
 c004f16:	688f      	ldr	r7, [r1, #8]
 c004f18:	406b      	eors	r3, r5
 c004f1a:	e9cd 3709 	strd	r3, r7, [sp, #36]	; 0x24
 c004f1e:	68a5      	ldr	r5, [r4, #8]
 c004f20:	68ce      	ldr	r6, [r1, #12]
 c004f22:	ea87 0105 	eor.w	r1, r7, r5
 c004f26:	e9cd 160a 	strd	r1, r6, [sp, #40]	; 0x28
 c004f2a:	6805      	ldr	r5, [r0, #0]
 c004f2c:	68e0      	ldr	r0, [r4, #12]
 c004f2e:	106d      	asrs	r5, r5, #1
 c004f30:	3d01      	subs	r5, #1
 c004f32:	ea86 0900 	eor.w	r9, r6, r0
 c004f36:	2d00      	cmp	r5, #0
 c004f38:	f104 0010 	add.w	r0, r4, #16
 c004f3c:	9507      	str	r5, [sp, #28]
 c004f3e:	9503      	str	r5, [sp, #12]
 c004f40:	f8df e394 	ldr.w	lr, [pc, #916]	; c0052d8 <mbedtls_internal_aes_decrypt+0x3dc>
 c004f44:	f8df c394 	ldr.w	ip, [pc, #916]	; c0052dc <mbedtls_internal_aes_decrypt+0x3e0>
 c004f48:	4ee0      	ldr	r6, [pc, #896]	; (c0052cc <mbedtls_internal_aes_decrypt+0x3d0>)
 c004f4a:	4de1      	ldr	r5, [pc, #900]	; (c0052d0 <mbedtls_internal_aes_decrypt+0x3d4>)
 c004f4c:	9206      	str	r2, [sp, #24]
 c004f4e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 c004f52:	9005      	str	r0, [sp, #20]
 c004f54:	f340 80e5 	ble.w	c005122 <mbedtls_internal_aes_decrypt+0x226>
 c004f58:	4648      	mov	r0, r9
 c004f5a:	e9cd 3b01 	strd	r3, fp, [sp, #4]
 c004f5e:	3430      	adds	r4, #48	; 0x30
 c004f60:	9b02      	ldr	r3, [sp, #8]
 c004f62:	9a01      	ldr	r2, [sp, #4]
 c004f64:	b2df      	uxtb	r7, r3
 c004f66:	ea4f 6812 	mov.w	r8, r2, lsr #24
 c004f6a:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 c004f6e:	f854 2c20 	ldr.w	r2, [r4, #-32]
 c004f72:	f85c a028 	ldr.w	sl, [ip, r8, lsl #2]
 c004f76:	f3c0 2807 	ubfx	r8, r0, #8, #8
 c004f7a:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 c004f7e:	4057      	eors	r7, r2
 c004f80:	f3c1 4907 	ubfx	r9, r1, #16, #8
 c004f84:	f855 9029 	ldr.w	r9, [r5, r9, lsl #2]
 c004f88:	ea87 070a 	eor.w	r7, r7, sl
 c004f8c:	ea87 0708 	eor.w	r7, r7, r8
 c004f90:	ea87 0709 	eor.w	r7, r7, r9
 c004f94:	f89d 8004 	ldrb.w	r8, [sp, #4]
 c004f98:	970c      	str	r7, [sp, #48]	; 0x30
 c004f9a:	f854 2c1c 	ldr.w	r2, [r4, #-28]
 c004f9e:	9704      	str	r7, [sp, #16]
 c004fa0:	f85e 7028 	ldr.w	r7, [lr, r8, lsl #2]
 c004fa4:	ea4f 6811 	mov.w	r8, r1, lsr #24
 c004fa8:	f85c 8028 	ldr.w	r8, [ip, r8, lsl #2]
 c004fac:	f3c3 2907 	ubfx	r9, r3, #8, #8
 c004fb0:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 c004fb4:	4057      	eors	r7, r2
 c004fb6:	f3c0 4a07 	ubfx	sl, r0, #16, #8
 c004fba:	f855 a02a 	ldr.w	sl, [r5, sl, lsl #2]
 c004fbe:	ea87 0708 	eor.w	r7, r7, r8
 c004fc2:	ea87 0809 	eor.w	r8, r7, r9
 c004fc6:	ea88 080a 	eor.w	r8, r8, sl
 c004fca:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 c004fce:	fa5f f981 	uxtb.w	r9, r1
 c004fd2:	f854 2c18 	ldr.w	r2, [r4, #-24]
 c004fd6:	f85e 7029 	ldr.w	r7, [lr, r9, lsl #2]
 c004fda:	9b01      	ldr	r3, [sp, #4]
 c004fdc:	ea4f 6910 	mov.w	r9, r0, lsr #24
 c004fe0:	4057      	eors	r7, r2
 c004fe2:	9a02      	ldr	r2, [sp, #8]
 c004fe4:	f85c a029 	ldr.w	sl, [ip, r9, lsl #2]
 c004fe8:	f3c3 2907 	ubfx	r9, r3, #8, #8
 c004fec:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 c004ff0:	f3c2 4b07 	ubfx	fp, r2, #16, #8
 c004ff4:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 c004ff8:	ea87 070a 	eor.w	r7, r7, sl
 c004ffc:	ea87 0709 	eor.w	r7, r7, r9
 c005000:	ea87 070b 	eor.w	r7, r7, fp
 c005004:	9b01      	ldr	r3, [sp, #4]
 c005006:	970e      	str	r7, [sp, #56]	; 0x38
 c005008:	b2c0      	uxtb	r0, r0
 c00500a:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 c00500e:	f3c3 4b07 	ubfx	fp, r3, #16, #8
 c005012:	0e12      	lsrs	r2, r2, #24
 c005014:	f854 3c14 	ldr.w	r3, [r4, #-20]
 c005018:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 c00501c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 c005020:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 c005024:	ea80 0903 	eor.w	r9, r0, r3
 c005028:	ea89 0902 	eor.w	r9, r9, r2
 c00502c:	f855 302b 	ldr.w	r3, [r5, fp, lsl #2]
 c005030:	f8dd b010 	ldr.w	fp, [sp, #16]
 c005034:	ea89 0901 	eor.w	r9, r9, r1
 c005038:	ea89 0903 	eor.w	r9, r9, r3
 c00503c:	ea4f 6218 	mov.w	r2, r8, lsr #24
 c005040:	fa5f f38b 	uxtb.w	r3, fp
 c005044:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 c005048:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 c00504c:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 c005050:	f3c9 2107 	ubfx	r1, r9, #8, #8
 c005054:	f854 3c10 	ldr.w	r3, [r4, #-16]
 c005058:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 c00505c:	4042      	eors	r2, r0
 c00505e:	f3c7 4007 	ubfx	r0, r7, #16, #8
 c005062:	405a      	eors	r2, r3
 c005064:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 c005068:	404a      	eors	r2, r1
 c00506a:	405a      	eors	r2, r3
 c00506c:	fa5f f188 	uxtb.w	r1, r8
 c005070:	0e3b      	lsrs	r3, r7, #24
 c005072:	9208      	str	r2, [sp, #32]
 c005074:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 c005078:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 c00507c:	f3cb 2007 	ubfx	r0, fp, #8, #8
 c005080:	9202      	str	r2, [sp, #8]
 c005082:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 c005086:	f3c9 4a07 	ubfx	sl, r9, #16, #8
 c00508a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 c00508e:	404b      	eors	r3, r1
 c005090:	ea83 0102 	eor.w	r1, r3, r2
 c005094:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
 c005098:	4041      	eors	r1, r0
 c00509a:	404b      	eors	r3, r1
 c00509c:	9309      	str	r3, [sp, #36]	; 0x24
 c00509e:	9301      	str	r3, [sp, #4]
 c0050a0:	465b      	mov	r3, fp
 c0050a2:	ea4f 6119 	mov.w	r1, r9, lsr #24
 c0050a6:	b2f8      	uxtb	r0, r7
 c0050a8:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 c0050ac:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 c0050b0:	f854 2c08 	ldr.w	r2, [r4, #-8]
 c0050b4:	f3c8 2a07 	ubfx	sl, r8, #8, #8
 c0050b8:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
 c0050bc:	4041      	eors	r1, r0
 c0050be:	f3cb 4b07 	ubfx	fp, fp, #16, #8
 c0050c2:	ea81 0002 	eor.w	r0, r1, r2
 c0050c6:	f855 102b 	ldr.w	r1, [r5, fp, lsl #2]
 c0050ca:	ea80 000a 	eor.w	r0, r0, sl
 c0050ce:	fa5f f989 	uxtb.w	r9, r9
 c0050d2:	4041      	eors	r1, r0
 c0050d4:	ea4f 6a13 	mov.w	sl, r3, lsr #24
 c0050d8:	f85e 0029 	ldr.w	r0, [lr, r9, lsl #2]
 c0050dc:	910a      	str	r1, [sp, #40]	; 0x28
 c0050de:	f85c 902a 	ldr.w	r9, [ip, sl, lsl #2]
 c0050e2:	f854 2c04 	ldr.w	r2, [r4, #-4]
 c0050e6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 c0050ea:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 c0050ee:	f3c8 4807 	ubfx	r8, r8, #16, #8
 c0050f2:	ea80 0009 	eor.w	r0, r0, r9
 c0050f6:	4050      	eors	r0, r2
 c0050f8:	f855 8028 	ldr.w	r8, [r5, r8, lsl #2]
 c0050fc:	9a03      	ldr	r2, [sp, #12]
 c0050fe:	4078      	eors	r0, r7
 c005100:	ea80 0008 	eor.w	r0, r0, r8
 c005104:	3a01      	subs	r2, #1
 c005106:	900b      	str	r0, [sp, #44]	; 0x2c
 c005108:	f104 0420 	add.w	r4, r4, #32
 c00510c:	9203      	str	r2, [sp, #12]
 c00510e:	f47f af27 	bne.w	c004f60 <mbedtls_internal_aes_decrypt+0x64>
 c005112:	e9dd 3b01 	ldrd	r3, fp, [sp, #4]
 c005116:	9a05      	ldr	r2, [sp, #20]
 c005118:	4681      	mov	r9, r0
 c00511a:	9807      	ldr	r0, [sp, #28]
 c00511c:	eb02 1240 	add.w	r2, r2, r0, lsl #5
 c005120:	9205      	str	r2, [sp, #20]
 c005122:	fa5f f08b 	uxtb.w	r0, fp
 c005126:	0e1a      	lsrs	r2, r3, #24
 c005128:	f85e 7020 	ldr.w	r7, [lr, r0, lsl #2]
 c00512c:	f85c 0022 	ldr.w	r0, [ip, r2, lsl #2]
 c005130:	9a05      	ldr	r2, [sp, #20]
 c005132:	f3c9 2407 	ubfx	r4, r9, #8, #8
 c005136:	6812      	ldr	r2, [r2, #0]
 c005138:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 c00513c:	4078      	eors	r0, r7
 c00513e:	f3c1 4707 	ubfx	r7, r1, #16, #8
 c005142:	4050      	eors	r0, r2
 c005144:	f855 2027 	ldr.w	r2, [r5, r7, lsl #2]
 c005148:	4060      	eors	r0, r4
 c00514a:	4050      	eors	r0, r2
 c00514c:	900c      	str	r0, [sp, #48]	; 0x30
 c00514e:	9001      	str	r0, [sp, #4]
 c005150:	b2dc      	uxtb	r4, r3
 c005152:	9805      	ldr	r0, [sp, #20]
 c005154:	0e0a      	lsrs	r2, r1, #24
 c005156:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 c00515a:	f85c 4022 	ldr.w	r4, [ip, r2, lsl #2]
 c00515e:	f3cb 2807 	ubfx	r8, fp, #8, #8
 c005162:	6842      	ldr	r2, [r0, #4]
 c005164:	407c      	eors	r4, r7
 c005166:	f856 7028 	ldr.w	r7, [r6, r8, lsl #2]
 c00516a:	f3c9 4807 	ubfx	r8, r9, #16, #8
 c00516e:	4062      	eors	r2, r4
 c005170:	f855 4028 	ldr.w	r4, [r5, r8, lsl #2]
 c005174:	4057      	eors	r7, r2
 c005176:	4067      	eors	r7, r4
 c005178:	ea4f 6219 	mov.w	r2, r9, lsr #24
 c00517c:	b2cc      	uxtb	r4, r1
 c00517e:	970d      	str	r7, [sp, #52]	; 0x34
 c005180:	f85e a024 	ldr.w	sl, [lr, r4, lsl #2]
 c005184:	f85c 4022 	ldr.w	r4, [ip, r2, lsl #2]
 c005188:	f3c3 2807 	ubfx	r8, r3, #8, #8
 c00518c:	6882      	ldr	r2, [r0, #8]
 c00518e:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 c005192:	ea8a 0404 	eor.w	r4, sl, r4
 c005196:	f3cb 4a07 	ubfx	sl, fp, #16, #8
 c00519a:	4062      	eors	r2, r4
 c00519c:	f855 402a 	ldr.w	r4, [r5, sl, lsl #2]
 c0051a0:	ea82 0208 	eor.w	r2, r2, r8
 c0051a4:	4054      	eors	r4, r2
 c0051a6:	fa5f f989 	uxtb.w	r9, r9
 c0051aa:	ea4f 621b 	mov.w	r2, fp, lsr #24
 c0051ae:	940e      	str	r4, [sp, #56]	; 0x38
 c0051b0:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 c0051b4:	f85e e029 	ldr.w	lr, [lr, r9, lsl #2]
 c0051b8:	68c0      	ldr	r0, [r0, #12]
 c0051ba:	f3c1 2107 	ubfx	r1, r1, #8, #8
 c0051be:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 c0051c2:	ea8e 0e02 	eor.w	lr, lr, r2
 c0051c6:	f3c3 4307 	ubfx	r3, r3, #16, #8
 c0051ca:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 c0051ce:	ea8e 0300 	eor.w	r3, lr, r0
 c0051d2:	f8dd 9004 	ldr.w	r9, [sp, #4]
 c0051d6:	404b      	eors	r3, r1
 c0051d8:	9805      	ldr	r0, [sp, #20]
 c0051da:	406b      	eors	r3, r5
 c0051dc:	4d3d      	ldr	r5, [pc, #244]	; (c0052d4 <mbedtls_internal_aes_decrypt+0x3d8>)
 c0051de:	930f      	str	r3, [sp, #60]	; 0x3c
 c0051e0:	fa5f f189 	uxtb.w	r1, r9
 c0051e4:	6902      	ldr	r2, [r0, #16]
 c0051e6:	5c69      	ldrb	r1, [r5, r1]
 c0051e8:	0e3e      	lsrs	r6, r7, #24
 c0051ea:	f815 c006 	ldrb.w	ip, [r5, r6]
 c0051ee:	f3c3 2607 	ubfx	r6, r3, #8, #8
 c0051f2:	5dae      	ldrb	r6, [r5, r6]
 c0051f4:	4051      	eors	r1, r2
 c0051f6:	f3c4 4207 	ubfx	r2, r4, #16, #8
 c0051fa:	5caa      	ldrb	r2, [r5, r2]
 c0051fc:	ea81 610c 	eor.w	r1, r1, ip, lsl #24
 c005200:	ea81 2106 	eor.w	r1, r1, r6, lsl #8
 c005204:	ea81 4102 	eor.w	r1, r1, r2, lsl #16
 c005208:	9102      	str	r1, [sp, #8]
 c00520a:	9108      	str	r1, [sp, #32]
 c00520c:	4601      	mov	r1, r0
 c00520e:	ea4f 6814 	mov.w	r8, r4, lsr #24
 c005212:	6942      	ldr	r2, [r0, #20]
 c005214:	b2de      	uxtb	r6, r3
 c005216:	f815 0008 	ldrb.w	r0, [r5, r8]
 c00521a:	fa5f fc87 	uxtb.w	ip, r7
 c00521e:	fa5f fe84 	uxtb.w	lr, r4
 c005222:	ea4f 6a19 	mov.w	sl, r9, lsr #24
 c005226:	f815 9006 	ldrb.w	r9, [r5, r6]
 c00522a:	f815 e00e 	ldrb.w	lr, [r5, lr]
 c00522e:	f815 c00c 	ldrb.w	ip, [r5, ip]
 c005232:	9003      	str	r0, [sp, #12]
 c005234:	ea4f 6b13 	mov.w	fp, r3, lsr #24
 c005238:	9801      	ldr	r0, [sp, #4]
 c00523a:	f815 b00b 	ldrb.w	fp, [r5, fp]
 c00523e:	e9d1 6806 	ldrd	r6, r8, [r1, #24]
 c005242:	9903      	ldr	r1, [sp, #12]
 c005244:	ea89 0908 	eor.w	r9, r9, r8
 c005248:	f3c7 2807 	ubfx	r8, r7, #8, #8
 c00524c:	f815 a00a 	ldrb.w	sl, [r5, sl]
 c005250:	ea8c 0c02 	eor.w	ip, ip, r2
 c005254:	ea8e 0606 	eor.w	r6, lr, r6
 c005258:	f3c0 2207 	ubfx	r2, r0, #8, #8
 c00525c:	f815 e008 	ldrb.w	lr, [r5, r8]
 c005260:	f3c4 2407 	ubfx	r4, r4, #8, #8
 c005264:	f3c0 4007 	ubfx	r0, r0, #16, #8
 c005268:	5caa      	ldrb	r2, [r5, r2]
 c00526a:	5d2c      	ldrb	r4, [r5, r4]
 c00526c:	5c28      	ldrb	r0, [r5, r0]
 c00526e:	ea86 660b 	eor.w	r6, r6, fp, lsl #24
 c005272:	f3c3 4307 	ubfx	r3, r3, #16, #8
 c005276:	f3c7 4707 	ubfx	r7, r7, #16, #8
 c00527a:	ea8c 6c01 	eor.w	ip, ip, r1, lsl #24
 c00527e:	9902      	ldr	r1, [sp, #8]
 c005280:	f815 8003 	ldrb.w	r8, [r5, r3]
 c005284:	ea89 690a 	eor.w	r9, r9, sl, lsl #24
 c005288:	5ded      	ldrb	r5, [r5, r7]
 c00528a:	ea86 2e0e 	eor.w	lr, r6, lr, lsl #8
 c00528e:	ea8c 2c02 	eor.w	ip, ip, r2, lsl #8
 c005292:	9e02      	ldr	r6, [sp, #8]
 c005294:	ea8e 4200 	eor.w	r2, lr, r0, lsl #16
 c005298:	ea89 2304 	eor.w	r3, r9, r4, lsl #8
 c00529c:	0a08      	lsrs	r0, r1, #8
 c00529e:	ea4f 4b11 	mov.w	fp, r1, lsr #16
 c0052a2:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 c0052a6:	9906      	ldr	r1, [sp, #24]
 c0052a8:	ea8c 4408 	eor.w	r4, ip, r8, lsl #16
 c0052ac:	ea83 4305 	eor.w	r3, r3, r5, lsl #16
 c0052b0:	700e      	strb	r6, [r1, #0]
 c0052b2:	ea4f 2914 	mov.w	r9, r4, lsr #8
 c0052b6:	0e1e      	lsrs	r6, r3, #24
 c0052b8:	730b      	strb	r3, [r1, #12]
 c0052ba:	720a      	strb	r2, [r1, #8]
 c0052bc:	7048      	strb	r0, [r1, #1]
 c0052be:	710c      	strb	r4, [r1, #4]
 c0052c0:	f881 b002 	strb.w	fp, [r1, #2]
 c0052c4:	f881 a003 	strb.w	sl, [r1, #3]
 c0052c8:	e00a      	b.n	c0052e0 <mbedtls_internal_aes_decrypt+0x3e4>
 c0052ca:	bf00      	nop
 c0052cc:	300016e4 	.word	0x300016e4
 c0052d0:	30001ae4 	.word	0x30001ae4
 c0052d4:	300011e4 	.word	0x300011e4
 c0052d8:	300012e4 	.word	0x300012e4
 c0052dc:	30001ee4 	.word	0x30001ee4
 c0052e0:	f881 9005 	strb.w	r9, [r1, #5]
 c0052e4:	73ce      	strb	r6, [r1, #15]
 c0052e6:	0a16      	lsrs	r6, r2, #8
 c0052e8:	0e10      	lsrs	r0, r2, #24
 c0052ea:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 c0052ee:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 c0052f2:	0c1f      	lsrs	r7, r3, #16
 c0052f4:	724e      	strb	r6, [r1, #9]
 c0052f6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 c0052fa:	0c16      	lsrs	r6, r2, #16
 c0052fc:	f881 8006 	strb.w	r8, [r1, #6]
 c005300:	f881 e007 	strb.w	lr, [r1, #7]
 c005304:	f881 c00d 	strb.w	ip, [r1, #13]
 c005308:	738f      	strb	r7, [r1, #14]
 c00530a:	728e      	strb	r6, [r1, #10]
 c00530c:	72c8      	strb	r0, [r1, #11]
 c00530e:	2120      	movs	r1, #32
 c005310:	eb0d 0001 	add.w	r0, sp, r1
 c005314:	e9cd 4209 	strd	r4, r2, [sp, #36]	; 0x24
 c005318:	930b      	str	r3, [sp, #44]	; 0x2c
 c00531a:	f000 f91f 	bl	c00555c <mbedtls_platform_zeroize>
 c00531e:	2000      	movs	r0, #0
 c005320:	b011      	add	sp, #68	; 0x44
 c005322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c005326:	bf00      	nop

0c005328 <mbedtls_aes_crypt_cbc>:
 c005328:	f012 0f0f 	tst.w	r2, #15
 c00532c:	f040 8113 	bne.w	c005556 <mbedtls_aes_crypt_cbc+0x22e>
 c005330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c005334:	4680      	mov	r8, r0
 c005336:	4689      	mov	r9, r1
 c005338:	461d      	mov	r5, r3
 c00533a:	b085      	sub	sp, #20
 c00533c:	2900      	cmp	r1, #0
 c00533e:	f000 8085 	beq.w	c00544c <mbedtls_aes_crypt_cbc+0x124>
 c005342:	2a00      	cmp	r2, #0
 c005344:	f000 8103 	beq.w	c00554e <mbedtls_aes_crypt_cbc+0x226>
 c005348:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 c00534c:	f103 0610 	add.w	r6, r3, #16
 c005350:	18a7      	adds	r7, r4, r2
 c005352:	e012      	b.n	c00537a <mbedtls_aes_crypt_cbc+0x52>
 c005354:	4622      	mov	r2, r4
 c005356:	4621      	mov	r1, r4
 c005358:	4640      	mov	r0, r8
 c00535a:	f7ff fdcf 	bl	c004efc <mbedtls_internal_aes_decrypt>
 c00535e:	6820      	ldr	r0, [r4, #0]
 c005360:	6861      	ldr	r1, [r4, #4]
 c005362:	68a2      	ldr	r2, [r4, #8]
 c005364:	68e3      	ldr	r3, [r4, #12]
 c005366:	3410      	adds	r4, #16
 c005368:	42bc      	cmp	r4, r7
 c00536a:	f106 0610 	add.w	r6, r6, #16
 c00536e:	6028      	str	r0, [r5, #0]
 c005370:	6069      	str	r1, [r5, #4]
 c005372:	60aa      	str	r2, [r5, #8]
 c005374:	60eb      	str	r3, [r5, #12]
 c005376:	f000 80ea 	beq.w	c00554e <mbedtls_aes_crypt_cbc+0x226>
 c00537a:	782a      	ldrb	r2, [r5, #0]
 c00537c:	f816 3c10 	ldrb.w	r3, [r6, #-16]
 c005380:	f1b9 0f01 	cmp.w	r9, #1
 c005384:	ea83 0302 	eor.w	r3, r3, r2
 c005388:	7023      	strb	r3, [r4, #0]
 c00538a:	786a      	ldrb	r2, [r5, #1]
 c00538c:	f816 3c0f 	ldrb.w	r3, [r6, #-15]
 c005390:	ea83 0302 	eor.w	r3, r3, r2
 c005394:	7063      	strb	r3, [r4, #1]
 c005396:	78aa      	ldrb	r2, [r5, #2]
 c005398:	f816 3c0e 	ldrb.w	r3, [r6, #-14]
 c00539c:	ea83 0302 	eor.w	r3, r3, r2
 c0053a0:	70a3      	strb	r3, [r4, #2]
 c0053a2:	78ea      	ldrb	r2, [r5, #3]
 c0053a4:	f816 3c0d 	ldrb.w	r3, [r6, #-13]
 c0053a8:	ea83 0302 	eor.w	r3, r3, r2
 c0053ac:	70e3      	strb	r3, [r4, #3]
 c0053ae:	792a      	ldrb	r2, [r5, #4]
 c0053b0:	f816 3c0c 	ldrb.w	r3, [r6, #-12]
 c0053b4:	ea83 0302 	eor.w	r3, r3, r2
 c0053b8:	7123      	strb	r3, [r4, #4]
 c0053ba:	796a      	ldrb	r2, [r5, #5]
 c0053bc:	f816 3c0b 	ldrb.w	r3, [r6, #-11]
 c0053c0:	ea83 0302 	eor.w	r3, r3, r2
 c0053c4:	7163      	strb	r3, [r4, #5]
 c0053c6:	79aa      	ldrb	r2, [r5, #6]
 c0053c8:	f816 3c0a 	ldrb.w	r3, [r6, #-10]
 c0053cc:	ea83 0302 	eor.w	r3, r3, r2
 c0053d0:	71a3      	strb	r3, [r4, #6]
 c0053d2:	79ea      	ldrb	r2, [r5, #7]
 c0053d4:	f816 3c09 	ldrb.w	r3, [r6, #-9]
 c0053d8:	ea83 0302 	eor.w	r3, r3, r2
 c0053dc:	71e3      	strb	r3, [r4, #7]
 c0053de:	7a2a      	ldrb	r2, [r5, #8]
 c0053e0:	f816 3c08 	ldrb.w	r3, [r6, #-8]
 c0053e4:	ea83 0302 	eor.w	r3, r3, r2
 c0053e8:	7223      	strb	r3, [r4, #8]
 c0053ea:	7a6a      	ldrb	r2, [r5, #9]
 c0053ec:	f816 3c07 	ldrb.w	r3, [r6, #-7]
 c0053f0:	ea83 0302 	eor.w	r3, r3, r2
 c0053f4:	7263      	strb	r3, [r4, #9]
 c0053f6:	7aaa      	ldrb	r2, [r5, #10]
 c0053f8:	f816 3c06 	ldrb.w	r3, [r6, #-6]
 c0053fc:	ea83 0302 	eor.w	r3, r3, r2
 c005400:	72a3      	strb	r3, [r4, #10]
 c005402:	7aea      	ldrb	r2, [r5, #11]
 c005404:	f816 3c05 	ldrb.w	r3, [r6, #-5]
 c005408:	ea83 0302 	eor.w	r3, r3, r2
 c00540c:	72e3      	strb	r3, [r4, #11]
 c00540e:	7b2a      	ldrb	r2, [r5, #12]
 c005410:	f816 3c04 	ldrb.w	r3, [r6, #-4]
 c005414:	ea83 0302 	eor.w	r3, r3, r2
 c005418:	7323      	strb	r3, [r4, #12]
 c00541a:	7b6a      	ldrb	r2, [r5, #13]
 c00541c:	f816 3c03 	ldrb.w	r3, [r6, #-3]
 c005420:	ea83 0302 	eor.w	r3, r3, r2
 c005424:	7363      	strb	r3, [r4, #13]
 c005426:	7baa      	ldrb	r2, [r5, #14]
 c005428:	f816 3c02 	ldrb.w	r3, [r6, #-2]
 c00542c:	ea83 0302 	eor.w	r3, r3, r2
 c005430:	73a3      	strb	r3, [r4, #14]
 c005432:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 c005436:	7bea      	ldrb	r2, [r5, #15]
 c005438:	ea83 0302 	eor.w	r3, r3, r2
 c00543c:	73e3      	strb	r3, [r4, #15]
 c00543e:	d189      	bne.n	c005354 <mbedtls_aes_crypt_cbc+0x2c>
 c005440:	4622      	mov	r2, r4
 c005442:	4621      	mov	r1, r4
 c005444:	4640      	mov	r0, r8
 c005446:	f7ff fb45 	bl	c004ad4 <mbedtls_internal_aes_encrypt>
 c00544a:	e788      	b.n	c00535e <mbedtls_aes_crypt_cbc+0x36>
 c00544c:	2a00      	cmp	r2, #0
 c00544e:	d07e      	beq.n	c00554e <mbedtls_aes_crypt_cbc+0x226>
 c005450:	e9dd 630c 	ldrd	r6, r3, [sp, #48]	; 0x30
 c005454:	f103 0410 	add.w	r4, r3, #16
 c005458:	eb06 0902 	add.w	r9, r6, r2
 c00545c:	466f      	mov	r7, sp
 c00545e:	6830      	ldr	r0, [r6, #0]
 c005460:	6871      	ldr	r1, [r6, #4]
 c005462:	68b2      	ldr	r2, [r6, #8]
 c005464:	68f3      	ldr	r3, [r6, #12]
 c005466:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 c005468:	4631      	mov	r1, r6
 c00546a:	f1a4 0210 	sub.w	r2, r4, #16
 c00546e:	4640      	mov	r0, r8
 c005470:	f7ff fd44 	bl	c004efc <mbedtls_internal_aes_decrypt>
 c005474:	782a      	ldrb	r2, [r5, #0]
 c005476:	f814 1c10 	ldrb.w	r1, [r4, #-16]
 c00547a:	f814 3c0f 	ldrb.w	r3, [r4, #-15]
 c00547e:	404a      	eors	r2, r1
 c005480:	f804 2c10 	strb.w	r2, [r4, #-16]
 c005484:	7869      	ldrb	r1, [r5, #1]
 c005486:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
 c00548a:	404b      	eors	r3, r1
 c00548c:	f804 3c0f 	strb.w	r3, [r4, #-15]
 c005490:	78a9      	ldrb	r1, [r5, #2]
 c005492:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
 c005496:	404a      	eors	r2, r1
 c005498:	f804 2c0e 	strb.w	r2, [r4, #-14]
 c00549c:	78e9      	ldrb	r1, [r5, #3]
 c00549e:	f814 2c0c 	ldrb.w	r2, [r4, #-12]
 c0054a2:	404b      	eors	r3, r1
 c0054a4:	f804 3c0d 	strb.w	r3, [r4, #-13]
 c0054a8:	7929      	ldrb	r1, [r5, #4]
 c0054aa:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 c0054ae:	404a      	eors	r2, r1
 c0054b0:	f804 2c0c 	strb.w	r2, [r4, #-12]
 c0054b4:	7969      	ldrb	r1, [r5, #5]
 c0054b6:	f814 2c0a 	ldrb.w	r2, [r4, #-10]
 c0054ba:	404b      	eors	r3, r1
 c0054bc:	f804 3c0b 	strb.w	r3, [r4, #-11]
 c0054c0:	79a9      	ldrb	r1, [r5, #6]
 c0054c2:	f814 3c09 	ldrb.w	r3, [r4, #-9]
 c0054c6:	404a      	eors	r2, r1
 c0054c8:	f804 2c0a 	strb.w	r2, [r4, #-10]
 c0054cc:	79ea      	ldrb	r2, [r5, #7]
 c0054ce:	466f      	mov	r7, sp
 c0054d0:	4053      	eors	r3, r2
 c0054d2:	f804 3c09 	strb.w	r3, [r4, #-9]
 c0054d6:	7a29      	ldrb	r1, [r5, #8]
 c0054d8:	f814 3c08 	ldrb.w	r3, [r4, #-8]
 c0054dc:	f814 2c07 	ldrb.w	r2, [r4, #-7]
 c0054e0:	404b      	eors	r3, r1
 c0054e2:	f804 3c08 	strb.w	r3, [r4, #-8]
 c0054e6:	7a69      	ldrb	r1, [r5, #9]
 c0054e8:	f814 3c06 	ldrb.w	r3, [r4, #-6]
 c0054ec:	404a      	eors	r2, r1
 c0054ee:	f804 2c07 	strb.w	r2, [r4, #-7]
 c0054f2:	7aaa      	ldrb	r2, [r5, #10]
 c0054f4:	3610      	adds	r6, #16
 c0054f6:	4053      	eors	r3, r2
 c0054f8:	f804 3c06 	strb.w	r3, [r4, #-6]
 c0054fc:	7ae9      	ldrb	r1, [r5, #11]
 c0054fe:	f814 2c05 	ldrb.w	r2, [r4, #-5]
 c005502:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 c005506:	404a      	eors	r2, r1
 c005508:	f804 2c05 	strb.w	r2, [r4, #-5]
 c00550c:	7b29      	ldrb	r1, [r5, #12]
 c00550e:	f814 2c03 	ldrb.w	r2, [r4, #-3]
 c005512:	404b      	eors	r3, r1
 c005514:	f804 3c04 	strb.w	r3, [r4, #-4]
 c005518:	7b69      	ldrb	r1, [r5, #13]
 c00551a:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 c00551e:	404a      	eors	r2, r1
 c005520:	f804 2c03 	strb.w	r2, [r4, #-3]
 c005524:	7baa      	ldrb	r2, [r5, #14]
 c005526:	f814 cc01 	ldrb.w	ip, [r4, #-1]
 c00552a:	4053      	eors	r3, r2
 c00552c:	f804 3c02 	strb.w	r3, [r4, #-2]
 c005530:	f895 e00f 	ldrb.w	lr, [r5, #15]
 c005534:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 c005536:	454e      	cmp	r6, r9
 c005538:	ea8c 070e 	eor.w	r7, ip, lr
 c00553c:	f804 7c01 	strb.w	r7, [r4, #-1]
 c005540:	f104 0410 	add.w	r4, r4, #16
 c005544:	6028      	str	r0, [r5, #0]
 c005546:	6069      	str	r1, [r5, #4]
 c005548:	60aa      	str	r2, [r5, #8]
 c00554a:	60eb      	str	r3, [r5, #12]
 c00554c:	d186      	bne.n	c00545c <mbedtls_aes_crypt_cbc+0x134>
 c00554e:	2000      	movs	r0, #0
 c005550:	b005      	add	sp, #20
 c005552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 c005556:	f06f 0021 	mvn.w	r0, #33	; 0x21
 c00555a:	4770      	bx	lr

0c00555c <mbedtls_platform_zeroize>:
 c00555c:	b121      	cbz	r1, c005568 <mbedtls_platform_zeroize+0xc>
 c00555e:	4b03      	ldr	r3, [pc, #12]	; (c00556c <mbedtls_platform_zeroize+0x10>)
 c005560:	460a      	mov	r2, r1
 c005562:	681b      	ldr	r3, [r3, #0]
 c005564:	2100      	movs	r1, #0
 c005566:	4718      	bx	r3
 c005568:	4770      	bx	lr
 c00556a:	bf00      	nop
 c00556c:	3000002c 	.word	0x3000002c

0c005570 <__errno>:
 c005570:	4b01      	ldr	r3, [pc, #4]	; (c005578 <__errno+0x8>)
 c005572:	6818      	ldr	r0, [r3, #0]
 c005574:	4770      	bx	lr
 c005576:	bf00      	nop
 c005578:	30000030 	.word	0x30000030

0c00557c <__libc_init_array>:
 c00557c:	b570      	push	{r4, r5, r6, lr}
 c00557e:	4d0d      	ldr	r5, [pc, #52]	; (c0055b4 <__libc_init_array+0x38>)
 c005580:	2600      	movs	r6, #0
 c005582:	4c0d      	ldr	r4, [pc, #52]	; (c0055b8 <__libc_init_array+0x3c>)
 c005584:	1b64      	subs	r4, r4, r5
 c005586:	10a4      	asrs	r4, r4, #2
 c005588:	42a6      	cmp	r6, r4
 c00558a:	d109      	bne.n	c0055a0 <__libc_init_array+0x24>
 c00558c:	4d0b      	ldr	r5, [pc, #44]	; (c0055bc <__libc_init_array+0x40>)
 c00558e:	2600      	movs	r6, #0
 c005590:	4c0b      	ldr	r4, [pc, #44]	; (c0055c0 <__libc_init_array+0x44>)
 c005592:	f001 f9cb 	bl	c00692c <_init>
 c005596:	1b64      	subs	r4, r4, r5
 c005598:	10a4      	asrs	r4, r4, #2
 c00559a:	42a6      	cmp	r6, r4
 c00559c:	d105      	bne.n	c0055aa <__libc_init_array+0x2e>
 c00559e:	bd70      	pop	{r4, r5, r6, pc}
 c0055a0:	f855 3b04 	ldr.w	r3, [r5], #4
 c0055a4:	3601      	adds	r6, #1
 c0055a6:	4798      	blx	r3
 c0055a8:	e7ee      	b.n	c005588 <__libc_init_array+0xc>
 c0055aa:	f855 3b04 	ldr.w	r3, [r5], #4
 c0055ae:	3601      	adds	r6, #1
 c0055b0:	4798      	blx	r3
 c0055b2:	e7f2      	b.n	c00559a <__libc_init_array+0x1e>
 c0055b4:	0c006b48 	.word	0x0c006b48
 c0055b8:	0c006b48 	.word	0x0c006b48
 c0055bc:	0c006b48 	.word	0x0c006b48
 c0055c0:	0c006b4c 	.word	0x0c006b4c

0c0055c4 <memcpy>:
 c0055c4:	440a      	add	r2, r1
 c0055c6:	1e43      	subs	r3, r0, #1
 c0055c8:	4291      	cmp	r1, r2
 c0055ca:	d100      	bne.n	c0055ce <memcpy+0xa>
 c0055cc:	4770      	bx	lr
 c0055ce:	b510      	push	{r4, lr}
 c0055d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 c0055d4:	4291      	cmp	r1, r2
 c0055d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 c0055da:	d1f9      	bne.n	c0055d0 <memcpy+0xc>
 c0055dc:	bd10      	pop	{r4, pc}

0c0055de <memmove>:
 c0055de:	4288      	cmp	r0, r1
 c0055e0:	b510      	push	{r4, lr}
 c0055e2:	eb01 0402 	add.w	r4, r1, r2
 c0055e6:	d902      	bls.n	c0055ee <memmove+0x10>
 c0055e8:	4284      	cmp	r4, r0
 c0055ea:	4623      	mov	r3, r4
 c0055ec:	d807      	bhi.n	c0055fe <memmove+0x20>
 c0055ee:	1e43      	subs	r3, r0, #1
 c0055f0:	42a1      	cmp	r1, r4
 c0055f2:	d008      	beq.n	c005606 <memmove+0x28>
 c0055f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 c0055f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 c0055fc:	e7f8      	b.n	c0055f0 <memmove+0x12>
 c0055fe:	4402      	add	r2, r0
 c005600:	4601      	mov	r1, r0
 c005602:	428a      	cmp	r2, r1
 c005604:	d100      	bne.n	c005608 <memmove+0x2a>
 c005606:	bd10      	pop	{r4, pc}
 c005608:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 c00560c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 c005610:	e7f7      	b.n	c005602 <memmove+0x24>

0c005612 <memset>:
 c005612:	4402      	add	r2, r0
 c005614:	4603      	mov	r3, r0
 c005616:	4293      	cmp	r3, r2
 c005618:	d100      	bne.n	c00561c <memset+0xa>
 c00561a:	4770      	bx	lr
 c00561c:	f803 1b01 	strb.w	r1, [r3], #1
 c005620:	e7f9      	b.n	c005616 <memset+0x4>
	...

0c005624 <_free_r>:
 c005624:	b537      	push	{r0, r1, r2, r4, r5, lr}
 c005626:	2900      	cmp	r1, #0
 c005628:	d047      	beq.n	c0056ba <_free_r+0x96>
 c00562a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 c00562e:	1f0c      	subs	r4, r1, #4
 c005630:	9001      	str	r0, [sp, #4]
 c005632:	2b00      	cmp	r3, #0
 c005634:	bfb8      	it	lt
 c005636:	18e4      	addlt	r4, r4, r3
 c005638:	f000 fc38 	bl	c005eac <__malloc_lock>
 c00563c:	4a20      	ldr	r2, [pc, #128]	; (c0056c0 <_free_r+0x9c>)
 c00563e:	9801      	ldr	r0, [sp, #4]
 c005640:	6813      	ldr	r3, [r2, #0]
 c005642:	4615      	mov	r5, r2
 c005644:	b933      	cbnz	r3, c005654 <_free_r+0x30>
 c005646:	6063      	str	r3, [r4, #4]
 c005648:	6014      	str	r4, [r2, #0]
 c00564a:	b003      	add	sp, #12
 c00564c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 c005650:	f000 bc32 	b.w	c005eb8 <__malloc_unlock>
 c005654:	42a3      	cmp	r3, r4
 c005656:	d90b      	bls.n	c005670 <_free_r+0x4c>
 c005658:	6821      	ldr	r1, [r4, #0]
 c00565a:	1862      	adds	r2, r4, r1
 c00565c:	4293      	cmp	r3, r2
 c00565e:	bf02      	ittt	eq
 c005660:	681a      	ldreq	r2, [r3, #0]
 c005662:	685b      	ldreq	r3, [r3, #4]
 c005664:	1852      	addeq	r2, r2, r1
 c005666:	6063      	str	r3, [r4, #4]
 c005668:	bf08      	it	eq
 c00566a:	6022      	streq	r2, [r4, #0]
 c00566c:	602c      	str	r4, [r5, #0]
 c00566e:	e7ec      	b.n	c00564a <_free_r+0x26>
 c005670:	461a      	mov	r2, r3
 c005672:	685b      	ldr	r3, [r3, #4]
 c005674:	b10b      	cbz	r3, c00567a <_free_r+0x56>
 c005676:	42a3      	cmp	r3, r4
 c005678:	d9fa      	bls.n	c005670 <_free_r+0x4c>
 c00567a:	6811      	ldr	r1, [r2, #0]
 c00567c:	1855      	adds	r5, r2, r1
 c00567e:	42a5      	cmp	r5, r4
 c005680:	d10b      	bne.n	c00569a <_free_r+0x76>
 c005682:	6824      	ldr	r4, [r4, #0]
 c005684:	4421      	add	r1, r4
 c005686:	1854      	adds	r4, r2, r1
 c005688:	6011      	str	r1, [r2, #0]
 c00568a:	42a3      	cmp	r3, r4
 c00568c:	d1dd      	bne.n	c00564a <_free_r+0x26>
 c00568e:	681c      	ldr	r4, [r3, #0]
 c005690:	685b      	ldr	r3, [r3, #4]
 c005692:	4421      	add	r1, r4
 c005694:	6053      	str	r3, [r2, #4]
 c005696:	6011      	str	r1, [r2, #0]
 c005698:	e7d7      	b.n	c00564a <_free_r+0x26>
 c00569a:	d902      	bls.n	c0056a2 <_free_r+0x7e>
 c00569c:	230c      	movs	r3, #12
 c00569e:	6003      	str	r3, [r0, #0]
 c0056a0:	e7d3      	b.n	c00564a <_free_r+0x26>
 c0056a2:	6825      	ldr	r5, [r4, #0]
 c0056a4:	1961      	adds	r1, r4, r5
 c0056a6:	428b      	cmp	r3, r1
 c0056a8:	bf02      	ittt	eq
 c0056aa:	6819      	ldreq	r1, [r3, #0]
 c0056ac:	685b      	ldreq	r3, [r3, #4]
 c0056ae:	1949      	addeq	r1, r1, r5
 c0056b0:	6063      	str	r3, [r4, #4]
 c0056b2:	bf08      	it	eq
 c0056b4:	6021      	streq	r1, [r4, #0]
 c0056b6:	6054      	str	r4, [r2, #4]
 c0056b8:	e7c7      	b.n	c00564a <_free_r+0x26>
 c0056ba:	b003      	add	sp, #12
 c0056bc:	bd30      	pop	{r4, r5, pc}
 c0056be:	bf00      	nop
 c0056c0:	300022e8 	.word	0x300022e8

0c0056c4 <_malloc_r>:
 c0056c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c0056c6:	1ccd      	adds	r5, r1, #3
 c0056c8:	4606      	mov	r6, r0
 c0056ca:	f025 0503 	bic.w	r5, r5, #3
 c0056ce:	3508      	adds	r5, #8
 c0056d0:	2d0c      	cmp	r5, #12
 c0056d2:	bf38      	it	cc
 c0056d4:	250c      	movcc	r5, #12
 c0056d6:	2d00      	cmp	r5, #0
 c0056d8:	db01      	blt.n	c0056de <_malloc_r+0x1a>
 c0056da:	42a9      	cmp	r1, r5
 c0056dc:	d903      	bls.n	c0056e6 <_malloc_r+0x22>
 c0056de:	230c      	movs	r3, #12
 c0056e0:	6033      	str	r3, [r6, #0]
 c0056e2:	2000      	movs	r0, #0
 c0056e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c0056e6:	f000 fbe1 	bl	c005eac <__malloc_lock>
 c0056ea:	4921      	ldr	r1, [pc, #132]	; (c005770 <_malloc_r+0xac>)
 c0056ec:	680a      	ldr	r2, [r1, #0]
 c0056ee:	4614      	mov	r4, r2
 c0056f0:	b99c      	cbnz	r4, c00571a <_malloc_r+0x56>
 c0056f2:	4f20      	ldr	r7, [pc, #128]	; (c005774 <_malloc_r+0xb0>)
 c0056f4:	683b      	ldr	r3, [r7, #0]
 c0056f6:	b923      	cbnz	r3, c005702 <_malloc_r+0x3e>
 c0056f8:	4621      	mov	r1, r4
 c0056fa:	4630      	mov	r0, r6
 c0056fc:	f000 f8ca 	bl	c005894 <_sbrk_r>
 c005700:	6038      	str	r0, [r7, #0]
 c005702:	4629      	mov	r1, r5
 c005704:	4630      	mov	r0, r6
 c005706:	f000 f8c5 	bl	c005894 <_sbrk_r>
 c00570a:	1c43      	adds	r3, r0, #1
 c00570c:	d123      	bne.n	c005756 <_malloc_r+0x92>
 c00570e:	230c      	movs	r3, #12
 c005710:	4630      	mov	r0, r6
 c005712:	6033      	str	r3, [r6, #0]
 c005714:	f000 fbd0 	bl	c005eb8 <__malloc_unlock>
 c005718:	e7e3      	b.n	c0056e2 <_malloc_r+0x1e>
 c00571a:	6823      	ldr	r3, [r4, #0]
 c00571c:	1b5b      	subs	r3, r3, r5
 c00571e:	d417      	bmi.n	c005750 <_malloc_r+0x8c>
 c005720:	2b0b      	cmp	r3, #11
 c005722:	d903      	bls.n	c00572c <_malloc_r+0x68>
 c005724:	6023      	str	r3, [r4, #0]
 c005726:	441c      	add	r4, r3
 c005728:	6025      	str	r5, [r4, #0]
 c00572a:	e004      	b.n	c005736 <_malloc_r+0x72>
 c00572c:	6863      	ldr	r3, [r4, #4]
 c00572e:	42a2      	cmp	r2, r4
 c005730:	bf0c      	ite	eq
 c005732:	600b      	streq	r3, [r1, #0]
 c005734:	6053      	strne	r3, [r2, #4]
 c005736:	4630      	mov	r0, r6
 c005738:	f000 fbbe 	bl	c005eb8 <__malloc_unlock>
 c00573c:	f104 000b 	add.w	r0, r4, #11
 c005740:	1d23      	adds	r3, r4, #4
 c005742:	f020 0007 	bic.w	r0, r0, #7
 c005746:	1ac2      	subs	r2, r0, r3
 c005748:	d0cc      	beq.n	c0056e4 <_malloc_r+0x20>
 c00574a:	1a1b      	subs	r3, r3, r0
 c00574c:	50a3      	str	r3, [r4, r2]
 c00574e:	e7c9      	b.n	c0056e4 <_malloc_r+0x20>
 c005750:	4622      	mov	r2, r4
 c005752:	6864      	ldr	r4, [r4, #4]
 c005754:	e7cc      	b.n	c0056f0 <_malloc_r+0x2c>
 c005756:	1cc4      	adds	r4, r0, #3
 c005758:	f024 0403 	bic.w	r4, r4, #3
 c00575c:	42a0      	cmp	r0, r4
 c00575e:	d0e3      	beq.n	c005728 <_malloc_r+0x64>
 c005760:	1a21      	subs	r1, r4, r0
 c005762:	4630      	mov	r0, r6
 c005764:	f000 f896 	bl	c005894 <_sbrk_r>
 c005768:	3001      	adds	r0, #1
 c00576a:	d1dd      	bne.n	c005728 <_malloc_r+0x64>
 c00576c:	e7cf      	b.n	c00570e <_malloc_r+0x4a>
 c00576e:	bf00      	nop
 c005770:	300022e8 	.word	0x300022e8
 c005774:	300022ec 	.word	0x300022ec

0c005778 <iprintf>:
 c005778:	b40f      	push	{r0, r1, r2, r3}
 c00577a:	4b0a      	ldr	r3, [pc, #40]	; (c0057a4 <iprintf+0x2c>)
 c00577c:	b513      	push	{r0, r1, r4, lr}
 c00577e:	681c      	ldr	r4, [r3, #0]
 c005780:	b124      	cbz	r4, c00578c <iprintf+0x14>
 c005782:	69a3      	ldr	r3, [r4, #24]
 c005784:	b913      	cbnz	r3, c00578c <iprintf+0x14>
 c005786:	4620      	mov	r0, r4
 c005788:	f000 fa8c 	bl	c005ca4 <__sinit>
 c00578c:	ab05      	add	r3, sp, #20
 c00578e:	9a04      	ldr	r2, [sp, #16]
 c005790:	68a1      	ldr	r1, [r4, #8]
 c005792:	4620      	mov	r0, r4
 c005794:	9301      	str	r3, [sp, #4]
 c005796:	f000 fd1b 	bl	c0061d0 <_vfiprintf_r>
 c00579a:	b002      	add	sp, #8
 c00579c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c0057a0:	b004      	add	sp, #16
 c0057a2:	4770      	bx	lr
 c0057a4:	30000030 	.word	0x30000030

0c0057a8 <_puts_r>:
 c0057a8:	b570      	push	{r4, r5, r6, lr}
 c0057aa:	460e      	mov	r6, r1
 c0057ac:	4605      	mov	r5, r0
 c0057ae:	b118      	cbz	r0, c0057b8 <_puts_r+0x10>
 c0057b0:	6983      	ldr	r3, [r0, #24]
 c0057b2:	b90b      	cbnz	r3, c0057b8 <_puts_r+0x10>
 c0057b4:	f000 fa76 	bl	c005ca4 <__sinit>
 c0057b8:	69ab      	ldr	r3, [r5, #24]
 c0057ba:	68ac      	ldr	r4, [r5, #8]
 c0057bc:	b913      	cbnz	r3, c0057c4 <_puts_r+0x1c>
 c0057be:	4628      	mov	r0, r5
 c0057c0:	f000 fa70 	bl	c005ca4 <__sinit>
 c0057c4:	4b2c      	ldr	r3, [pc, #176]	; (c005878 <_puts_r+0xd0>)
 c0057c6:	429c      	cmp	r4, r3
 c0057c8:	d120      	bne.n	c00580c <_puts_r+0x64>
 c0057ca:	686c      	ldr	r4, [r5, #4]
 c0057cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 c0057ce:	07db      	lsls	r3, r3, #31
 c0057d0:	d405      	bmi.n	c0057de <_puts_r+0x36>
 c0057d2:	89a3      	ldrh	r3, [r4, #12]
 c0057d4:	0598      	lsls	r0, r3, #22
 c0057d6:	d402      	bmi.n	c0057de <_puts_r+0x36>
 c0057d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c0057da:	f000 fb01 	bl	c005de0 <__retarget_lock_acquire_recursive>
 c0057de:	89a3      	ldrh	r3, [r4, #12]
 c0057e0:	0719      	lsls	r1, r3, #28
 c0057e2:	d51d      	bpl.n	c005820 <_puts_r+0x78>
 c0057e4:	6923      	ldr	r3, [r4, #16]
 c0057e6:	b1db      	cbz	r3, c005820 <_puts_r+0x78>
 c0057e8:	3e01      	subs	r6, #1
 c0057ea:	68a3      	ldr	r3, [r4, #8]
 c0057ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 c0057f0:	3b01      	subs	r3, #1
 c0057f2:	60a3      	str	r3, [r4, #8]
 c0057f4:	bb39      	cbnz	r1, c005846 <_puts_r+0x9e>
 c0057f6:	2b00      	cmp	r3, #0
 c0057f8:	da38      	bge.n	c00586c <_puts_r+0xc4>
 c0057fa:	4622      	mov	r2, r4
 c0057fc:	210a      	movs	r1, #10
 c0057fe:	4628      	mov	r0, r5
 c005800:	f000 f878 	bl	c0058f4 <__swbuf_r>
 c005804:	3001      	adds	r0, #1
 c005806:	d011      	beq.n	c00582c <_puts_r+0x84>
 c005808:	250a      	movs	r5, #10
 c00580a:	e011      	b.n	c005830 <_puts_r+0x88>
 c00580c:	4b1b      	ldr	r3, [pc, #108]	; (c00587c <_puts_r+0xd4>)
 c00580e:	429c      	cmp	r4, r3
 c005810:	d101      	bne.n	c005816 <_puts_r+0x6e>
 c005812:	68ac      	ldr	r4, [r5, #8]
 c005814:	e7da      	b.n	c0057cc <_puts_r+0x24>
 c005816:	4b1a      	ldr	r3, [pc, #104]	; (c005880 <_puts_r+0xd8>)
 c005818:	429c      	cmp	r4, r3
 c00581a:	bf08      	it	eq
 c00581c:	68ec      	ldreq	r4, [r5, #12]
 c00581e:	e7d5      	b.n	c0057cc <_puts_r+0x24>
 c005820:	4621      	mov	r1, r4
 c005822:	4628      	mov	r0, r5
 c005824:	f000 f8b8 	bl	c005998 <__swsetup_r>
 c005828:	2800      	cmp	r0, #0
 c00582a:	d0dd      	beq.n	c0057e8 <_puts_r+0x40>
 c00582c:	f04f 35ff 	mov.w	r5, #4294967295
 c005830:	6e63      	ldr	r3, [r4, #100]	; 0x64
 c005832:	07da      	lsls	r2, r3, #31
 c005834:	d405      	bmi.n	c005842 <_puts_r+0x9a>
 c005836:	89a3      	ldrh	r3, [r4, #12]
 c005838:	059b      	lsls	r3, r3, #22
 c00583a:	d402      	bmi.n	c005842 <_puts_r+0x9a>
 c00583c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c00583e:	f000 fad0 	bl	c005de2 <__retarget_lock_release_recursive>
 c005842:	4628      	mov	r0, r5
 c005844:	bd70      	pop	{r4, r5, r6, pc}
 c005846:	2b00      	cmp	r3, #0
 c005848:	da04      	bge.n	c005854 <_puts_r+0xac>
 c00584a:	69a2      	ldr	r2, [r4, #24]
 c00584c:	429a      	cmp	r2, r3
 c00584e:	dc06      	bgt.n	c00585e <_puts_r+0xb6>
 c005850:	290a      	cmp	r1, #10
 c005852:	d004      	beq.n	c00585e <_puts_r+0xb6>
 c005854:	6823      	ldr	r3, [r4, #0]
 c005856:	1c5a      	adds	r2, r3, #1
 c005858:	6022      	str	r2, [r4, #0]
 c00585a:	7019      	strb	r1, [r3, #0]
 c00585c:	e7c5      	b.n	c0057ea <_puts_r+0x42>
 c00585e:	4622      	mov	r2, r4
 c005860:	4628      	mov	r0, r5
 c005862:	f000 f847 	bl	c0058f4 <__swbuf_r>
 c005866:	3001      	adds	r0, #1
 c005868:	d1bf      	bne.n	c0057ea <_puts_r+0x42>
 c00586a:	e7df      	b.n	c00582c <_puts_r+0x84>
 c00586c:	6823      	ldr	r3, [r4, #0]
 c00586e:	250a      	movs	r5, #10
 c005870:	1c5a      	adds	r2, r3, #1
 c005872:	6022      	str	r2, [r4, #0]
 c005874:	701d      	strb	r5, [r3, #0]
 c005876:	e7db      	b.n	c005830 <_puts_r+0x88>
 c005878:	0c006acc 	.word	0x0c006acc
 c00587c:	0c006aec 	.word	0x0c006aec
 c005880:	0c006aac 	.word	0x0c006aac

0c005884 <puts>:
 c005884:	4b02      	ldr	r3, [pc, #8]	; (c005890 <puts+0xc>)
 c005886:	4601      	mov	r1, r0
 c005888:	6818      	ldr	r0, [r3, #0]
 c00588a:	f7ff bf8d 	b.w	c0057a8 <_puts_r>
 c00588e:	bf00      	nop
 c005890:	30000030 	.word	0x30000030

0c005894 <_sbrk_r>:
 c005894:	b538      	push	{r3, r4, r5, lr}
 c005896:	2300      	movs	r3, #0
 c005898:	4d05      	ldr	r5, [pc, #20]	; (c0058b0 <_sbrk_r+0x1c>)
 c00589a:	4604      	mov	r4, r0
 c00589c:	4608      	mov	r0, r1
 c00589e:	602b      	str	r3, [r5, #0]
 c0058a0:	f7fb fac4 	bl	c000e2c <_sbrk>
 c0058a4:	1c43      	adds	r3, r0, #1
 c0058a6:	d102      	bne.n	c0058ae <_sbrk_r+0x1a>
 c0058a8:	682b      	ldr	r3, [r5, #0]
 c0058aa:	b103      	cbz	r3, c0058ae <_sbrk_r+0x1a>
 c0058ac:	6023      	str	r3, [r4, #0]
 c0058ae:	bd38      	pop	{r3, r4, r5, pc}
 c0058b0:	300033a0 	.word	0x300033a0

0c0058b4 <_vsiprintf_r>:
 c0058b4:	b500      	push	{lr}
 c0058b6:	b09b      	sub	sp, #108	; 0x6c
 c0058b8:	9100      	str	r1, [sp, #0]
 c0058ba:	9104      	str	r1, [sp, #16]
 c0058bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 c0058c0:	9105      	str	r1, [sp, #20]
 c0058c2:	9102      	str	r1, [sp, #8]
 c0058c4:	4905      	ldr	r1, [pc, #20]	; (c0058dc <_vsiprintf_r+0x28>)
 c0058c6:	9103      	str	r1, [sp, #12]
 c0058c8:	4669      	mov	r1, sp
 c0058ca:	f000 fb57 	bl	c005f7c <_svfiprintf_r>
 c0058ce:	9b00      	ldr	r3, [sp, #0]
 c0058d0:	2200      	movs	r2, #0
 c0058d2:	701a      	strb	r2, [r3, #0]
 c0058d4:	b01b      	add	sp, #108	; 0x6c
 c0058d6:	f85d fb04 	ldr.w	pc, [sp], #4
 c0058da:	bf00      	nop
 c0058dc:	ffff0208 	.word	0xffff0208

0c0058e0 <vsiprintf>:
 c0058e0:	4613      	mov	r3, r2
 c0058e2:	460a      	mov	r2, r1
 c0058e4:	4601      	mov	r1, r0
 c0058e6:	4802      	ldr	r0, [pc, #8]	; (c0058f0 <vsiprintf+0x10>)
 c0058e8:	6800      	ldr	r0, [r0, #0]
 c0058ea:	f7ff bfe3 	b.w	c0058b4 <_vsiprintf_r>
 c0058ee:	bf00      	nop
 c0058f0:	30000030 	.word	0x30000030

0c0058f4 <__swbuf_r>:
 c0058f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c0058f6:	460e      	mov	r6, r1
 c0058f8:	4614      	mov	r4, r2
 c0058fa:	4605      	mov	r5, r0
 c0058fc:	b118      	cbz	r0, c005906 <__swbuf_r+0x12>
 c0058fe:	6983      	ldr	r3, [r0, #24]
 c005900:	b90b      	cbnz	r3, c005906 <__swbuf_r+0x12>
 c005902:	f000 f9cf 	bl	c005ca4 <__sinit>
 c005906:	4b21      	ldr	r3, [pc, #132]	; (c00598c <__swbuf_r+0x98>)
 c005908:	429c      	cmp	r4, r3
 c00590a:	d12b      	bne.n	c005964 <__swbuf_r+0x70>
 c00590c:	686c      	ldr	r4, [r5, #4]
 c00590e:	69a3      	ldr	r3, [r4, #24]
 c005910:	60a3      	str	r3, [r4, #8]
 c005912:	89a3      	ldrh	r3, [r4, #12]
 c005914:	071a      	lsls	r2, r3, #28
 c005916:	d52f      	bpl.n	c005978 <__swbuf_r+0x84>
 c005918:	6923      	ldr	r3, [r4, #16]
 c00591a:	b36b      	cbz	r3, c005978 <__swbuf_r+0x84>
 c00591c:	6923      	ldr	r3, [r4, #16]
 c00591e:	b2f6      	uxtb	r6, r6
 c005920:	6820      	ldr	r0, [r4, #0]
 c005922:	4637      	mov	r7, r6
 c005924:	1ac0      	subs	r0, r0, r3
 c005926:	6963      	ldr	r3, [r4, #20]
 c005928:	4283      	cmp	r3, r0
 c00592a:	dc04      	bgt.n	c005936 <__swbuf_r+0x42>
 c00592c:	4621      	mov	r1, r4
 c00592e:	4628      	mov	r0, r5
 c005930:	f000 f924 	bl	c005b7c <_fflush_r>
 c005934:	bb30      	cbnz	r0, c005984 <__swbuf_r+0x90>
 c005936:	68a3      	ldr	r3, [r4, #8]
 c005938:	3001      	adds	r0, #1
 c00593a:	3b01      	subs	r3, #1
 c00593c:	60a3      	str	r3, [r4, #8]
 c00593e:	6823      	ldr	r3, [r4, #0]
 c005940:	1c5a      	adds	r2, r3, #1
 c005942:	6022      	str	r2, [r4, #0]
 c005944:	701e      	strb	r6, [r3, #0]
 c005946:	6963      	ldr	r3, [r4, #20]
 c005948:	4283      	cmp	r3, r0
 c00594a:	d004      	beq.n	c005956 <__swbuf_r+0x62>
 c00594c:	89a3      	ldrh	r3, [r4, #12]
 c00594e:	07db      	lsls	r3, r3, #31
 c005950:	d506      	bpl.n	c005960 <__swbuf_r+0x6c>
 c005952:	2e0a      	cmp	r6, #10
 c005954:	d104      	bne.n	c005960 <__swbuf_r+0x6c>
 c005956:	4621      	mov	r1, r4
 c005958:	4628      	mov	r0, r5
 c00595a:	f000 f90f 	bl	c005b7c <_fflush_r>
 c00595e:	b988      	cbnz	r0, c005984 <__swbuf_r+0x90>
 c005960:	4638      	mov	r0, r7
 c005962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c005964:	4b0a      	ldr	r3, [pc, #40]	; (c005990 <__swbuf_r+0x9c>)
 c005966:	429c      	cmp	r4, r3
 c005968:	d101      	bne.n	c00596e <__swbuf_r+0x7a>
 c00596a:	68ac      	ldr	r4, [r5, #8]
 c00596c:	e7cf      	b.n	c00590e <__swbuf_r+0x1a>
 c00596e:	4b09      	ldr	r3, [pc, #36]	; (c005994 <__swbuf_r+0xa0>)
 c005970:	429c      	cmp	r4, r3
 c005972:	bf08      	it	eq
 c005974:	68ec      	ldreq	r4, [r5, #12]
 c005976:	e7ca      	b.n	c00590e <__swbuf_r+0x1a>
 c005978:	4621      	mov	r1, r4
 c00597a:	4628      	mov	r0, r5
 c00597c:	f000 f80c 	bl	c005998 <__swsetup_r>
 c005980:	2800      	cmp	r0, #0
 c005982:	d0cb      	beq.n	c00591c <__swbuf_r+0x28>
 c005984:	f04f 37ff 	mov.w	r7, #4294967295
 c005988:	e7ea      	b.n	c005960 <__swbuf_r+0x6c>
 c00598a:	bf00      	nop
 c00598c:	0c006acc 	.word	0x0c006acc
 c005990:	0c006aec 	.word	0x0c006aec
 c005994:	0c006aac 	.word	0x0c006aac

0c005998 <__swsetup_r>:
 c005998:	4b32      	ldr	r3, [pc, #200]	; (c005a64 <__swsetup_r+0xcc>)
 c00599a:	b570      	push	{r4, r5, r6, lr}
 c00599c:	681d      	ldr	r5, [r3, #0]
 c00599e:	4606      	mov	r6, r0
 c0059a0:	460c      	mov	r4, r1
 c0059a2:	b125      	cbz	r5, c0059ae <__swsetup_r+0x16>
 c0059a4:	69ab      	ldr	r3, [r5, #24]
 c0059a6:	b913      	cbnz	r3, c0059ae <__swsetup_r+0x16>
 c0059a8:	4628      	mov	r0, r5
 c0059aa:	f000 f97b 	bl	c005ca4 <__sinit>
 c0059ae:	4b2e      	ldr	r3, [pc, #184]	; (c005a68 <__swsetup_r+0xd0>)
 c0059b0:	429c      	cmp	r4, r3
 c0059b2:	d10f      	bne.n	c0059d4 <__swsetup_r+0x3c>
 c0059b4:	686c      	ldr	r4, [r5, #4]
 c0059b6:	89a3      	ldrh	r3, [r4, #12]
 c0059b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 c0059bc:	0719      	lsls	r1, r3, #28
 c0059be:	d42c      	bmi.n	c005a1a <__swsetup_r+0x82>
 c0059c0:	06dd      	lsls	r5, r3, #27
 c0059c2:	d411      	bmi.n	c0059e8 <__swsetup_r+0x50>
 c0059c4:	2309      	movs	r3, #9
 c0059c6:	6033      	str	r3, [r6, #0]
 c0059c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 c0059cc:	f04f 30ff 	mov.w	r0, #4294967295
 c0059d0:	81a3      	strh	r3, [r4, #12]
 c0059d2:	e03e      	b.n	c005a52 <__swsetup_r+0xba>
 c0059d4:	4b25      	ldr	r3, [pc, #148]	; (c005a6c <__swsetup_r+0xd4>)
 c0059d6:	429c      	cmp	r4, r3
 c0059d8:	d101      	bne.n	c0059de <__swsetup_r+0x46>
 c0059da:	68ac      	ldr	r4, [r5, #8]
 c0059dc:	e7eb      	b.n	c0059b6 <__swsetup_r+0x1e>
 c0059de:	4b24      	ldr	r3, [pc, #144]	; (c005a70 <__swsetup_r+0xd8>)
 c0059e0:	429c      	cmp	r4, r3
 c0059e2:	bf08      	it	eq
 c0059e4:	68ec      	ldreq	r4, [r5, #12]
 c0059e6:	e7e6      	b.n	c0059b6 <__swsetup_r+0x1e>
 c0059e8:	0758      	lsls	r0, r3, #29
 c0059ea:	d512      	bpl.n	c005a12 <__swsetup_r+0x7a>
 c0059ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 c0059ee:	b141      	cbz	r1, c005a02 <__swsetup_r+0x6a>
 c0059f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c0059f4:	4299      	cmp	r1, r3
 c0059f6:	d002      	beq.n	c0059fe <__swsetup_r+0x66>
 c0059f8:	4630      	mov	r0, r6
 c0059fa:	f7ff fe13 	bl	c005624 <_free_r>
 c0059fe:	2300      	movs	r3, #0
 c005a00:	6363      	str	r3, [r4, #52]	; 0x34
 c005a02:	89a3      	ldrh	r3, [r4, #12]
 c005a04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 c005a08:	81a3      	strh	r3, [r4, #12]
 c005a0a:	2300      	movs	r3, #0
 c005a0c:	6063      	str	r3, [r4, #4]
 c005a0e:	6923      	ldr	r3, [r4, #16]
 c005a10:	6023      	str	r3, [r4, #0]
 c005a12:	89a3      	ldrh	r3, [r4, #12]
 c005a14:	f043 0308 	orr.w	r3, r3, #8
 c005a18:	81a3      	strh	r3, [r4, #12]
 c005a1a:	6923      	ldr	r3, [r4, #16]
 c005a1c:	b94b      	cbnz	r3, c005a32 <__swsetup_r+0x9a>
 c005a1e:	89a3      	ldrh	r3, [r4, #12]
 c005a20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 c005a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c005a28:	d003      	beq.n	c005a32 <__swsetup_r+0x9a>
 c005a2a:	4621      	mov	r1, r4
 c005a2c:	4630      	mov	r0, r6
 c005a2e:	f000 f9fd 	bl	c005e2c <__smakebuf_r>
 c005a32:	89a0      	ldrh	r0, [r4, #12]
 c005a34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 c005a38:	f010 0301 	ands.w	r3, r0, #1
 c005a3c:	d00a      	beq.n	c005a54 <__swsetup_r+0xbc>
 c005a3e:	2300      	movs	r3, #0
 c005a40:	60a3      	str	r3, [r4, #8]
 c005a42:	6963      	ldr	r3, [r4, #20]
 c005a44:	425b      	negs	r3, r3
 c005a46:	61a3      	str	r3, [r4, #24]
 c005a48:	6923      	ldr	r3, [r4, #16]
 c005a4a:	b943      	cbnz	r3, c005a5e <__swsetup_r+0xc6>
 c005a4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 c005a50:	d1ba      	bne.n	c0059c8 <__swsetup_r+0x30>
 c005a52:	bd70      	pop	{r4, r5, r6, pc}
 c005a54:	0781      	lsls	r1, r0, #30
 c005a56:	bf58      	it	pl
 c005a58:	6963      	ldrpl	r3, [r4, #20]
 c005a5a:	60a3      	str	r3, [r4, #8]
 c005a5c:	e7f4      	b.n	c005a48 <__swsetup_r+0xb0>
 c005a5e:	2000      	movs	r0, #0
 c005a60:	e7f7      	b.n	c005a52 <__swsetup_r+0xba>
 c005a62:	bf00      	nop
 c005a64:	30000030 	.word	0x30000030
 c005a68:	0c006acc 	.word	0x0c006acc
 c005a6c:	0c006aec 	.word	0x0c006aec
 c005a70:	0c006aac 	.word	0x0c006aac

0c005a74 <__sflush_r>:
 c005a74:	898a      	ldrh	r2, [r1, #12]
 c005a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c005a7a:	4605      	mov	r5, r0
 c005a7c:	0710      	lsls	r0, r2, #28
 c005a7e:	460c      	mov	r4, r1
 c005a80:	d458      	bmi.n	c005b34 <__sflush_r+0xc0>
 c005a82:	684b      	ldr	r3, [r1, #4]
 c005a84:	2b00      	cmp	r3, #0
 c005a86:	dc05      	bgt.n	c005a94 <__sflush_r+0x20>
 c005a88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 c005a8a:	2b00      	cmp	r3, #0
 c005a8c:	dc02      	bgt.n	c005a94 <__sflush_r+0x20>
 c005a8e:	2000      	movs	r0, #0
 c005a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c005a94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 c005a96:	2e00      	cmp	r6, #0
 c005a98:	d0f9      	beq.n	c005a8e <__sflush_r+0x1a>
 c005a9a:	2300      	movs	r3, #0
 c005a9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 c005aa0:	682f      	ldr	r7, [r5, #0]
 c005aa2:	602b      	str	r3, [r5, #0]
 c005aa4:	d032      	beq.n	c005b0c <__sflush_r+0x98>
 c005aa6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 c005aa8:	89a3      	ldrh	r3, [r4, #12]
 c005aaa:	075a      	lsls	r2, r3, #29
 c005aac:	d505      	bpl.n	c005aba <__sflush_r+0x46>
 c005aae:	6863      	ldr	r3, [r4, #4]
 c005ab0:	1ac0      	subs	r0, r0, r3
 c005ab2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 c005ab4:	b10b      	cbz	r3, c005aba <__sflush_r+0x46>
 c005ab6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 c005ab8:	1ac0      	subs	r0, r0, r3
 c005aba:	2300      	movs	r3, #0
 c005abc:	4602      	mov	r2, r0
 c005abe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 c005ac0:	4628      	mov	r0, r5
 c005ac2:	6a21      	ldr	r1, [r4, #32]
 c005ac4:	47b0      	blx	r6
 c005ac6:	1c43      	adds	r3, r0, #1
 c005ac8:	89a3      	ldrh	r3, [r4, #12]
 c005aca:	d106      	bne.n	c005ada <__sflush_r+0x66>
 c005acc:	6829      	ldr	r1, [r5, #0]
 c005ace:	291d      	cmp	r1, #29
 c005ad0:	d82c      	bhi.n	c005b2c <__sflush_r+0xb8>
 c005ad2:	4a29      	ldr	r2, [pc, #164]	; (c005b78 <__sflush_r+0x104>)
 c005ad4:	40ca      	lsrs	r2, r1
 c005ad6:	07d6      	lsls	r6, r2, #31
 c005ad8:	d528      	bpl.n	c005b2c <__sflush_r+0xb8>
 c005ada:	2200      	movs	r2, #0
 c005adc:	04d9      	lsls	r1, r3, #19
 c005ade:	6062      	str	r2, [r4, #4]
 c005ae0:	6922      	ldr	r2, [r4, #16]
 c005ae2:	6022      	str	r2, [r4, #0]
 c005ae4:	d504      	bpl.n	c005af0 <__sflush_r+0x7c>
 c005ae6:	1c42      	adds	r2, r0, #1
 c005ae8:	d101      	bne.n	c005aee <__sflush_r+0x7a>
 c005aea:	682b      	ldr	r3, [r5, #0]
 c005aec:	b903      	cbnz	r3, c005af0 <__sflush_r+0x7c>
 c005aee:	6560      	str	r0, [r4, #84]	; 0x54
 c005af0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 c005af2:	602f      	str	r7, [r5, #0]
 c005af4:	2900      	cmp	r1, #0
 c005af6:	d0ca      	beq.n	c005a8e <__sflush_r+0x1a>
 c005af8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c005afc:	4299      	cmp	r1, r3
 c005afe:	d002      	beq.n	c005b06 <__sflush_r+0x92>
 c005b00:	4628      	mov	r0, r5
 c005b02:	f7ff fd8f 	bl	c005624 <_free_r>
 c005b06:	2000      	movs	r0, #0
 c005b08:	6360      	str	r0, [r4, #52]	; 0x34
 c005b0a:	e7c1      	b.n	c005a90 <__sflush_r+0x1c>
 c005b0c:	6a21      	ldr	r1, [r4, #32]
 c005b0e:	2301      	movs	r3, #1
 c005b10:	4628      	mov	r0, r5
 c005b12:	47b0      	blx	r6
 c005b14:	1c41      	adds	r1, r0, #1
 c005b16:	d1c7      	bne.n	c005aa8 <__sflush_r+0x34>
 c005b18:	682b      	ldr	r3, [r5, #0]
 c005b1a:	2b00      	cmp	r3, #0
 c005b1c:	d0c4      	beq.n	c005aa8 <__sflush_r+0x34>
 c005b1e:	2b1d      	cmp	r3, #29
 c005b20:	d001      	beq.n	c005b26 <__sflush_r+0xb2>
 c005b22:	2b16      	cmp	r3, #22
 c005b24:	d101      	bne.n	c005b2a <__sflush_r+0xb6>
 c005b26:	602f      	str	r7, [r5, #0]
 c005b28:	e7b1      	b.n	c005a8e <__sflush_r+0x1a>
 c005b2a:	89a3      	ldrh	r3, [r4, #12]
 c005b2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c005b30:	81a3      	strh	r3, [r4, #12]
 c005b32:	e7ad      	b.n	c005a90 <__sflush_r+0x1c>
 c005b34:	690f      	ldr	r7, [r1, #16]
 c005b36:	2f00      	cmp	r7, #0
 c005b38:	d0a9      	beq.n	c005a8e <__sflush_r+0x1a>
 c005b3a:	0793      	lsls	r3, r2, #30
 c005b3c:	680e      	ldr	r6, [r1, #0]
 c005b3e:	600f      	str	r7, [r1, #0]
 c005b40:	bf0c      	ite	eq
 c005b42:	694b      	ldreq	r3, [r1, #20]
 c005b44:	2300      	movne	r3, #0
 c005b46:	eba6 0807 	sub.w	r8, r6, r7
 c005b4a:	608b      	str	r3, [r1, #8]
 c005b4c:	f1b8 0f00 	cmp.w	r8, #0
 c005b50:	dd9d      	ble.n	c005a8e <__sflush_r+0x1a>
 c005b52:	4643      	mov	r3, r8
 c005b54:	463a      	mov	r2, r7
 c005b56:	6a21      	ldr	r1, [r4, #32]
 c005b58:	4628      	mov	r0, r5
 c005b5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 c005b5c:	47b0      	blx	r6
 c005b5e:	2800      	cmp	r0, #0
 c005b60:	dc06      	bgt.n	c005b70 <__sflush_r+0xfc>
 c005b62:	89a3      	ldrh	r3, [r4, #12]
 c005b64:	f04f 30ff 	mov.w	r0, #4294967295
 c005b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c005b6c:	81a3      	strh	r3, [r4, #12]
 c005b6e:	e78f      	b.n	c005a90 <__sflush_r+0x1c>
 c005b70:	4407      	add	r7, r0
 c005b72:	eba8 0800 	sub.w	r8, r8, r0
 c005b76:	e7e9      	b.n	c005b4c <__sflush_r+0xd8>
 c005b78:	20400001 	.word	0x20400001

0c005b7c <_fflush_r>:
 c005b7c:	b538      	push	{r3, r4, r5, lr}
 c005b7e:	690b      	ldr	r3, [r1, #16]
 c005b80:	4605      	mov	r5, r0
 c005b82:	460c      	mov	r4, r1
 c005b84:	b913      	cbnz	r3, c005b8c <_fflush_r+0x10>
 c005b86:	2500      	movs	r5, #0
 c005b88:	4628      	mov	r0, r5
 c005b8a:	bd38      	pop	{r3, r4, r5, pc}
 c005b8c:	b118      	cbz	r0, c005b96 <_fflush_r+0x1a>
 c005b8e:	6983      	ldr	r3, [r0, #24]
 c005b90:	b90b      	cbnz	r3, c005b96 <_fflush_r+0x1a>
 c005b92:	f000 f887 	bl	c005ca4 <__sinit>
 c005b96:	4b14      	ldr	r3, [pc, #80]	; (c005be8 <_fflush_r+0x6c>)
 c005b98:	429c      	cmp	r4, r3
 c005b9a:	d11b      	bne.n	c005bd4 <_fflush_r+0x58>
 c005b9c:	686c      	ldr	r4, [r5, #4]
 c005b9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c005ba2:	2b00      	cmp	r3, #0
 c005ba4:	d0ef      	beq.n	c005b86 <_fflush_r+0xa>
 c005ba6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 c005ba8:	07d0      	lsls	r0, r2, #31
 c005baa:	d404      	bmi.n	c005bb6 <_fflush_r+0x3a>
 c005bac:	0599      	lsls	r1, r3, #22
 c005bae:	d402      	bmi.n	c005bb6 <_fflush_r+0x3a>
 c005bb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c005bb2:	f000 f915 	bl	c005de0 <__retarget_lock_acquire_recursive>
 c005bb6:	4628      	mov	r0, r5
 c005bb8:	4621      	mov	r1, r4
 c005bba:	f7ff ff5b 	bl	c005a74 <__sflush_r>
 c005bbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 c005bc0:	4605      	mov	r5, r0
 c005bc2:	07da      	lsls	r2, r3, #31
 c005bc4:	d4e0      	bmi.n	c005b88 <_fflush_r+0xc>
 c005bc6:	89a3      	ldrh	r3, [r4, #12]
 c005bc8:	059b      	lsls	r3, r3, #22
 c005bca:	d4dd      	bmi.n	c005b88 <_fflush_r+0xc>
 c005bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c005bce:	f000 f908 	bl	c005de2 <__retarget_lock_release_recursive>
 c005bd2:	e7d9      	b.n	c005b88 <_fflush_r+0xc>
 c005bd4:	4b05      	ldr	r3, [pc, #20]	; (c005bec <_fflush_r+0x70>)
 c005bd6:	429c      	cmp	r4, r3
 c005bd8:	d101      	bne.n	c005bde <_fflush_r+0x62>
 c005bda:	68ac      	ldr	r4, [r5, #8]
 c005bdc:	e7df      	b.n	c005b9e <_fflush_r+0x22>
 c005bde:	4b04      	ldr	r3, [pc, #16]	; (c005bf0 <_fflush_r+0x74>)
 c005be0:	429c      	cmp	r4, r3
 c005be2:	bf08      	it	eq
 c005be4:	68ec      	ldreq	r4, [r5, #12]
 c005be6:	e7da      	b.n	c005b9e <_fflush_r+0x22>
 c005be8:	0c006acc 	.word	0x0c006acc
 c005bec:	0c006aec 	.word	0x0c006aec
 c005bf0:	0c006aac 	.word	0x0c006aac

0c005bf4 <std>:
 c005bf4:	2300      	movs	r3, #0
 c005bf6:	b510      	push	{r4, lr}
 c005bf8:	4604      	mov	r4, r0
 c005bfa:	6083      	str	r3, [r0, #8]
 c005bfc:	8181      	strh	r1, [r0, #12]
 c005bfe:	4619      	mov	r1, r3
 c005c00:	6643      	str	r3, [r0, #100]	; 0x64
 c005c02:	81c2      	strh	r2, [r0, #14]
 c005c04:	2208      	movs	r2, #8
 c005c06:	6183      	str	r3, [r0, #24]
 c005c08:	e9c0 3300 	strd	r3, r3, [r0]
 c005c0c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 c005c10:	305c      	adds	r0, #92	; 0x5c
 c005c12:	f7ff fcfe 	bl	c005612 <memset>
 c005c16:	4b05      	ldr	r3, [pc, #20]	; (c005c2c <std+0x38>)
 c005c18:	6224      	str	r4, [r4, #32]
 c005c1a:	6263      	str	r3, [r4, #36]	; 0x24
 c005c1c:	4b04      	ldr	r3, [pc, #16]	; (c005c30 <std+0x3c>)
 c005c1e:	62a3      	str	r3, [r4, #40]	; 0x28
 c005c20:	4b04      	ldr	r3, [pc, #16]	; (c005c34 <std+0x40>)
 c005c22:	62e3      	str	r3, [r4, #44]	; 0x2c
 c005c24:	4b04      	ldr	r3, [pc, #16]	; (c005c38 <std+0x44>)
 c005c26:	6323      	str	r3, [r4, #48]	; 0x30
 c005c28:	bd10      	pop	{r4, pc}
 c005c2a:	bf00      	nop
 c005c2c:	0c00675d 	.word	0x0c00675d
 c005c30:	0c00677f 	.word	0x0c00677f
 c005c34:	0c0067b7 	.word	0x0c0067b7
 c005c38:	0c0067db 	.word	0x0c0067db

0c005c3c <_cleanup_r>:
 c005c3c:	4901      	ldr	r1, [pc, #4]	; (c005c44 <_cleanup_r+0x8>)
 c005c3e:	f000 b8af 	b.w	c005da0 <_fwalk_reent>
 c005c42:	bf00      	nop
 c005c44:	0c005b7d 	.word	0x0c005b7d

0c005c48 <__sfmoreglue>:
 c005c48:	b570      	push	{r4, r5, r6, lr}
 c005c4a:	1e4a      	subs	r2, r1, #1
 c005c4c:	2568      	movs	r5, #104	; 0x68
 c005c4e:	460e      	mov	r6, r1
 c005c50:	4355      	muls	r5, r2
 c005c52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 c005c56:	f7ff fd35 	bl	c0056c4 <_malloc_r>
 c005c5a:	4604      	mov	r4, r0
 c005c5c:	b140      	cbz	r0, c005c70 <__sfmoreglue+0x28>
 c005c5e:	2100      	movs	r1, #0
 c005c60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 c005c64:	e9c0 1600 	strd	r1, r6, [r0]
 c005c68:	300c      	adds	r0, #12
 c005c6a:	60a0      	str	r0, [r4, #8]
 c005c6c:	f7ff fcd1 	bl	c005612 <memset>
 c005c70:	4620      	mov	r0, r4
 c005c72:	bd70      	pop	{r4, r5, r6, pc}

0c005c74 <__sfp_lock_acquire>:
 c005c74:	4801      	ldr	r0, [pc, #4]	; (c005c7c <__sfp_lock_acquire+0x8>)
 c005c76:	f000 b8b3 	b.w	c005de0 <__retarget_lock_acquire_recursive>
 c005c7a:	bf00      	nop
 c005c7c:	3000339c 	.word	0x3000339c

0c005c80 <__sfp_lock_release>:
 c005c80:	4801      	ldr	r0, [pc, #4]	; (c005c88 <__sfp_lock_release+0x8>)
 c005c82:	f000 b8ae 	b.w	c005de2 <__retarget_lock_release_recursive>
 c005c86:	bf00      	nop
 c005c88:	3000339c 	.word	0x3000339c

0c005c8c <__sinit_lock_acquire>:
 c005c8c:	4801      	ldr	r0, [pc, #4]	; (c005c94 <__sinit_lock_acquire+0x8>)
 c005c8e:	f000 b8a7 	b.w	c005de0 <__retarget_lock_acquire_recursive>
 c005c92:	bf00      	nop
 c005c94:	30003397 	.word	0x30003397

0c005c98 <__sinit_lock_release>:
 c005c98:	4801      	ldr	r0, [pc, #4]	; (c005ca0 <__sinit_lock_release+0x8>)
 c005c9a:	f000 b8a2 	b.w	c005de2 <__retarget_lock_release_recursive>
 c005c9e:	bf00      	nop
 c005ca0:	30003397 	.word	0x30003397

0c005ca4 <__sinit>:
 c005ca4:	b510      	push	{r4, lr}
 c005ca6:	4604      	mov	r4, r0
 c005ca8:	f7ff fff0 	bl	c005c8c <__sinit_lock_acquire>
 c005cac:	69a3      	ldr	r3, [r4, #24]
 c005cae:	b11b      	cbz	r3, c005cb8 <__sinit+0x14>
 c005cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c005cb4:	f7ff bff0 	b.w	c005c98 <__sinit_lock_release>
 c005cb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 c005cbc:	6523      	str	r3, [r4, #80]	; 0x50
 c005cbe:	4620      	mov	r0, r4
 c005cc0:	4b12      	ldr	r3, [pc, #72]	; (c005d0c <__sinit+0x68>)
 c005cc2:	4a13      	ldr	r2, [pc, #76]	; (c005d10 <__sinit+0x6c>)
 c005cc4:	681b      	ldr	r3, [r3, #0]
 c005cc6:	62a2      	str	r2, [r4, #40]	; 0x28
 c005cc8:	42a3      	cmp	r3, r4
 c005cca:	bf04      	itt	eq
 c005ccc:	2301      	moveq	r3, #1
 c005cce:	61a3      	streq	r3, [r4, #24]
 c005cd0:	f000 f820 	bl	c005d14 <__sfp>
 c005cd4:	6060      	str	r0, [r4, #4]
 c005cd6:	4620      	mov	r0, r4
 c005cd8:	f000 f81c 	bl	c005d14 <__sfp>
 c005cdc:	60a0      	str	r0, [r4, #8]
 c005cde:	4620      	mov	r0, r4
 c005ce0:	f000 f818 	bl	c005d14 <__sfp>
 c005ce4:	2200      	movs	r2, #0
 c005ce6:	2104      	movs	r1, #4
 c005ce8:	60e0      	str	r0, [r4, #12]
 c005cea:	6860      	ldr	r0, [r4, #4]
 c005cec:	f7ff ff82 	bl	c005bf4 <std>
 c005cf0:	2201      	movs	r2, #1
 c005cf2:	2109      	movs	r1, #9
 c005cf4:	68a0      	ldr	r0, [r4, #8]
 c005cf6:	f7ff ff7d 	bl	c005bf4 <std>
 c005cfa:	2202      	movs	r2, #2
 c005cfc:	2112      	movs	r1, #18
 c005cfe:	68e0      	ldr	r0, [r4, #12]
 c005d00:	f7ff ff78 	bl	c005bf4 <std>
 c005d04:	2301      	movs	r3, #1
 c005d06:	61a3      	str	r3, [r4, #24]
 c005d08:	e7d2      	b.n	c005cb0 <__sinit+0xc>
 c005d0a:	bf00      	nop
 c005d0c:	0c006aa8 	.word	0x0c006aa8
 c005d10:	0c005c3d 	.word	0x0c005c3d

0c005d14 <__sfp>:
 c005d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c005d16:	4607      	mov	r7, r0
 c005d18:	f7ff ffac 	bl	c005c74 <__sfp_lock_acquire>
 c005d1c:	4b1e      	ldr	r3, [pc, #120]	; (c005d98 <__sfp+0x84>)
 c005d1e:	681e      	ldr	r6, [r3, #0]
 c005d20:	69b3      	ldr	r3, [r6, #24]
 c005d22:	b913      	cbnz	r3, c005d2a <__sfp+0x16>
 c005d24:	4630      	mov	r0, r6
 c005d26:	f7ff ffbd 	bl	c005ca4 <__sinit>
 c005d2a:	3648      	adds	r6, #72	; 0x48
 c005d2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 c005d30:	3b01      	subs	r3, #1
 c005d32:	d503      	bpl.n	c005d3c <__sfp+0x28>
 c005d34:	6833      	ldr	r3, [r6, #0]
 c005d36:	b30b      	cbz	r3, c005d7c <__sfp+0x68>
 c005d38:	6836      	ldr	r6, [r6, #0]
 c005d3a:	e7f7      	b.n	c005d2c <__sfp+0x18>
 c005d3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 c005d40:	b9d5      	cbnz	r5, c005d78 <__sfp+0x64>
 c005d42:	4b16      	ldr	r3, [pc, #88]	; (c005d9c <__sfp+0x88>)
 c005d44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 c005d48:	6665      	str	r5, [r4, #100]	; 0x64
 c005d4a:	60e3      	str	r3, [r4, #12]
 c005d4c:	f000 f847 	bl	c005dde <__retarget_lock_init_recursive>
 c005d50:	f7ff ff96 	bl	c005c80 <__sfp_lock_release>
 c005d54:	2208      	movs	r2, #8
 c005d56:	4629      	mov	r1, r5
 c005d58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 c005d5c:	6025      	str	r5, [r4, #0]
 c005d5e:	61a5      	str	r5, [r4, #24]
 c005d60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 c005d64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 c005d68:	f7ff fc53 	bl	c005612 <memset>
 c005d6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 c005d70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 c005d74:	4620      	mov	r0, r4
 c005d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c005d78:	3468      	adds	r4, #104	; 0x68
 c005d7a:	e7d9      	b.n	c005d30 <__sfp+0x1c>
 c005d7c:	2104      	movs	r1, #4
 c005d7e:	4638      	mov	r0, r7
 c005d80:	f7ff ff62 	bl	c005c48 <__sfmoreglue>
 c005d84:	4604      	mov	r4, r0
 c005d86:	6030      	str	r0, [r6, #0]
 c005d88:	2800      	cmp	r0, #0
 c005d8a:	d1d5      	bne.n	c005d38 <__sfp+0x24>
 c005d8c:	f7ff ff78 	bl	c005c80 <__sfp_lock_release>
 c005d90:	230c      	movs	r3, #12
 c005d92:	603b      	str	r3, [r7, #0]
 c005d94:	e7ee      	b.n	c005d74 <__sfp+0x60>
 c005d96:	bf00      	nop
 c005d98:	0c006aa8 	.word	0x0c006aa8
 c005d9c:	ffff0001 	.word	0xffff0001

0c005da0 <_fwalk_reent>:
 c005da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c005da4:	4606      	mov	r6, r0
 c005da6:	4688      	mov	r8, r1
 c005da8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 c005dac:	2700      	movs	r7, #0
 c005dae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 c005db2:	f1b9 0901 	subs.w	r9, r9, #1
 c005db6:	d505      	bpl.n	c005dc4 <_fwalk_reent+0x24>
 c005db8:	6824      	ldr	r4, [r4, #0]
 c005dba:	2c00      	cmp	r4, #0
 c005dbc:	d1f7      	bne.n	c005dae <_fwalk_reent+0xe>
 c005dbe:	4638      	mov	r0, r7
 c005dc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 c005dc4:	89ab      	ldrh	r3, [r5, #12]
 c005dc6:	2b01      	cmp	r3, #1
 c005dc8:	d907      	bls.n	c005dda <_fwalk_reent+0x3a>
 c005dca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 c005dce:	3301      	adds	r3, #1
 c005dd0:	d003      	beq.n	c005dda <_fwalk_reent+0x3a>
 c005dd2:	4629      	mov	r1, r5
 c005dd4:	4630      	mov	r0, r6
 c005dd6:	47c0      	blx	r8
 c005dd8:	4307      	orrs	r7, r0
 c005dda:	3568      	adds	r5, #104	; 0x68
 c005ddc:	e7e9      	b.n	c005db2 <_fwalk_reent+0x12>

0c005dde <__retarget_lock_init_recursive>:
 c005dde:	4770      	bx	lr

0c005de0 <__retarget_lock_acquire_recursive>:
 c005de0:	4770      	bx	lr

0c005de2 <__retarget_lock_release_recursive>:
 c005de2:	4770      	bx	lr

0c005de4 <__swhatbuf_r>:
 c005de4:	b570      	push	{r4, r5, r6, lr}
 c005de6:	460e      	mov	r6, r1
 c005de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c005dec:	b096      	sub	sp, #88	; 0x58
 c005dee:	4614      	mov	r4, r2
 c005df0:	2900      	cmp	r1, #0
 c005df2:	461d      	mov	r5, r3
 c005df4:	da07      	bge.n	c005e06 <__swhatbuf_r+0x22>
 c005df6:	2300      	movs	r3, #0
 c005df8:	602b      	str	r3, [r5, #0]
 c005dfa:	89b3      	ldrh	r3, [r6, #12]
 c005dfc:	061a      	lsls	r2, r3, #24
 c005dfe:	d410      	bmi.n	c005e22 <__swhatbuf_r+0x3e>
 c005e00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 c005e04:	e00e      	b.n	c005e24 <__swhatbuf_r+0x40>
 c005e06:	466a      	mov	r2, sp
 c005e08:	f000 fd0e 	bl	c006828 <_fstat_r>
 c005e0c:	2800      	cmp	r0, #0
 c005e0e:	dbf2      	blt.n	c005df6 <__swhatbuf_r+0x12>
 c005e10:	9a01      	ldr	r2, [sp, #4]
 c005e12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 c005e16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 c005e1a:	425a      	negs	r2, r3
 c005e1c:	415a      	adcs	r2, r3
 c005e1e:	602a      	str	r2, [r5, #0]
 c005e20:	e7ee      	b.n	c005e00 <__swhatbuf_r+0x1c>
 c005e22:	2340      	movs	r3, #64	; 0x40
 c005e24:	2000      	movs	r0, #0
 c005e26:	6023      	str	r3, [r4, #0]
 c005e28:	b016      	add	sp, #88	; 0x58
 c005e2a:	bd70      	pop	{r4, r5, r6, pc}

0c005e2c <__smakebuf_r>:
 c005e2c:	898b      	ldrh	r3, [r1, #12]
 c005e2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c005e30:	079d      	lsls	r5, r3, #30
 c005e32:	4606      	mov	r6, r0
 c005e34:	460c      	mov	r4, r1
 c005e36:	d507      	bpl.n	c005e48 <__smakebuf_r+0x1c>
 c005e38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 c005e3c:	6023      	str	r3, [r4, #0]
 c005e3e:	6123      	str	r3, [r4, #16]
 c005e40:	2301      	movs	r3, #1
 c005e42:	6163      	str	r3, [r4, #20]
 c005e44:	b002      	add	sp, #8
 c005e46:	bd70      	pop	{r4, r5, r6, pc}
 c005e48:	ab01      	add	r3, sp, #4
 c005e4a:	466a      	mov	r2, sp
 c005e4c:	f7ff ffca 	bl	c005de4 <__swhatbuf_r>
 c005e50:	9900      	ldr	r1, [sp, #0]
 c005e52:	4605      	mov	r5, r0
 c005e54:	4630      	mov	r0, r6
 c005e56:	f7ff fc35 	bl	c0056c4 <_malloc_r>
 c005e5a:	b948      	cbnz	r0, c005e70 <__smakebuf_r+0x44>
 c005e5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c005e60:	059a      	lsls	r2, r3, #22
 c005e62:	d4ef      	bmi.n	c005e44 <__smakebuf_r+0x18>
 c005e64:	f023 0303 	bic.w	r3, r3, #3
 c005e68:	f043 0302 	orr.w	r3, r3, #2
 c005e6c:	81a3      	strh	r3, [r4, #12]
 c005e6e:	e7e3      	b.n	c005e38 <__smakebuf_r+0xc>
 c005e70:	4b0d      	ldr	r3, [pc, #52]	; (c005ea8 <__smakebuf_r+0x7c>)
 c005e72:	62b3      	str	r3, [r6, #40]	; 0x28
 c005e74:	89a3      	ldrh	r3, [r4, #12]
 c005e76:	6020      	str	r0, [r4, #0]
 c005e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c005e7c:	6120      	str	r0, [r4, #16]
 c005e7e:	81a3      	strh	r3, [r4, #12]
 c005e80:	9b00      	ldr	r3, [sp, #0]
 c005e82:	6163      	str	r3, [r4, #20]
 c005e84:	9b01      	ldr	r3, [sp, #4]
 c005e86:	b15b      	cbz	r3, c005ea0 <__smakebuf_r+0x74>
 c005e88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 c005e8c:	4630      	mov	r0, r6
 c005e8e:	f000 fcdd 	bl	c00684c <_isatty_r>
 c005e92:	b128      	cbz	r0, c005ea0 <__smakebuf_r+0x74>
 c005e94:	89a3      	ldrh	r3, [r4, #12]
 c005e96:	f023 0303 	bic.w	r3, r3, #3
 c005e9a:	f043 0301 	orr.w	r3, r3, #1
 c005e9e:	81a3      	strh	r3, [r4, #12]
 c005ea0:	89a0      	ldrh	r0, [r4, #12]
 c005ea2:	4305      	orrs	r5, r0
 c005ea4:	81a5      	strh	r5, [r4, #12]
 c005ea6:	e7cd      	b.n	c005e44 <__smakebuf_r+0x18>
 c005ea8:	0c005c3d 	.word	0x0c005c3d

0c005eac <__malloc_lock>:
 c005eac:	4801      	ldr	r0, [pc, #4]	; (c005eb4 <__malloc_lock+0x8>)
 c005eae:	f7ff bf97 	b.w	c005de0 <__retarget_lock_acquire_recursive>
 c005eb2:	bf00      	nop
 c005eb4:	30003398 	.word	0x30003398

0c005eb8 <__malloc_unlock>:
 c005eb8:	4801      	ldr	r0, [pc, #4]	; (c005ec0 <__malloc_unlock+0x8>)
 c005eba:	f7ff bf92 	b.w	c005de2 <__retarget_lock_release_recursive>
 c005ebe:	bf00      	nop
 c005ec0:	30003398 	.word	0x30003398

0c005ec4 <__ssputs_r>:
 c005ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c005ec8:	688e      	ldr	r6, [r1, #8]
 c005eca:	4682      	mov	sl, r0
 c005ecc:	460c      	mov	r4, r1
 c005ece:	4690      	mov	r8, r2
 c005ed0:	429e      	cmp	r6, r3
 c005ed2:	461f      	mov	r7, r3
 c005ed4:	d838      	bhi.n	c005f48 <__ssputs_r+0x84>
 c005ed6:	898a      	ldrh	r2, [r1, #12]
 c005ed8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 c005edc:	d032      	beq.n	c005f44 <__ssputs_r+0x80>
 c005ede:	6825      	ldr	r5, [r4, #0]
 c005ee0:	3301      	adds	r3, #1
 c005ee2:	6909      	ldr	r1, [r1, #16]
 c005ee4:	eba5 0901 	sub.w	r9, r5, r1
 c005ee8:	6965      	ldr	r5, [r4, #20]
 c005eea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 c005eee:	444b      	add	r3, r9
 c005ef0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 c005ef4:	106d      	asrs	r5, r5, #1
 c005ef6:	429d      	cmp	r5, r3
 c005ef8:	bf38      	it	cc
 c005efa:	461d      	movcc	r5, r3
 c005efc:	0553      	lsls	r3, r2, #21
 c005efe:	d531      	bpl.n	c005f64 <__ssputs_r+0xa0>
 c005f00:	4629      	mov	r1, r5
 c005f02:	f7ff fbdf 	bl	c0056c4 <_malloc_r>
 c005f06:	4606      	mov	r6, r0
 c005f08:	b950      	cbnz	r0, c005f20 <__ssputs_r+0x5c>
 c005f0a:	230c      	movs	r3, #12
 c005f0c:	f04f 30ff 	mov.w	r0, #4294967295
 c005f10:	f8ca 3000 	str.w	r3, [sl]
 c005f14:	89a3      	ldrh	r3, [r4, #12]
 c005f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c005f1a:	81a3      	strh	r3, [r4, #12]
 c005f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c005f20:	464a      	mov	r2, r9
 c005f22:	6921      	ldr	r1, [r4, #16]
 c005f24:	f7ff fb4e 	bl	c0055c4 <memcpy>
 c005f28:	89a3      	ldrh	r3, [r4, #12]
 c005f2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 c005f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c005f32:	81a3      	strh	r3, [r4, #12]
 c005f34:	6126      	str	r6, [r4, #16]
 c005f36:	444e      	add	r6, r9
 c005f38:	6165      	str	r5, [r4, #20]
 c005f3a:	eba5 0509 	sub.w	r5, r5, r9
 c005f3e:	6026      	str	r6, [r4, #0]
 c005f40:	463e      	mov	r6, r7
 c005f42:	60a5      	str	r5, [r4, #8]
 c005f44:	42be      	cmp	r6, r7
 c005f46:	d900      	bls.n	c005f4a <__ssputs_r+0x86>
 c005f48:	463e      	mov	r6, r7
 c005f4a:	4632      	mov	r2, r6
 c005f4c:	4641      	mov	r1, r8
 c005f4e:	6820      	ldr	r0, [r4, #0]
 c005f50:	f7ff fb45 	bl	c0055de <memmove>
 c005f54:	68a3      	ldr	r3, [r4, #8]
 c005f56:	6822      	ldr	r2, [r4, #0]
 c005f58:	2000      	movs	r0, #0
 c005f5a:	1b9b      	subs	r3, r3, r6
 c005f5c:	4432      	add	r2, r6
 c005f5e:	60a3      	str	r3, [r4, #8]
 c005f60:	6022      	str	r2, [r4, #0]
 c005f62:	e7db      	b.n	c005f1c <__ssputs_r+0x58>
 c005f64:	462a      	mov	r2, r5
 c005f66:	f000 fca1 	bl	c0068ac <_realloc_r>
 c005f6a:	4606      	mov	r6, r0
 c005f6c:	2800      	cmp	r0, #0
 c005f6e:	d1e1      	bne.n	c005f34 <__ssputs_r+0x70>
 c005f70:	6921      	ldr	r1, [r4, #16]
 c005f72:	4650      	mov	r0, sl
 c005f74:	f7ff fb56 	bl	c005624 <_free_r>
 c005f78:	e7c7      	b.n	c005f0a <__ssputs_r+0x46>
	...

0c005f7c <_svfiprintf_r>:
 c005f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c005f80:	4698      	mov	r8, r3
 c005f82:	898b      	ldrh	r3, [r1, #12]
 c005f84:	b09d      	sub	sp, #116	; 0x74
 c005f86:	4607      	mov	r7, r0
 c005f88:	061b      	lsls	r3, r3, #24
 c005f8a:	460d      	mov	r5, r1
 c005f8c:	4614      	mov	r4, r2
 c005f8e:	d50e      	bpl.n	c005fae <_svfiprintf_r+0x32>
 c005f90:	690b      	ldr	r3, [r1, #16]
 c005f92:	b963      	cbnz	r3, c005fae <_svfiprintf_r+0x32>
 c005f94:	2140      	movs	r1, #64	; 0x40
 c005f96:	f7ff fb95 	bl	c0056c4 <_malloc_r>
 c005f9a:	6028      	str	r0, [r5, #0]
 c005f9c:	6128      	str	r0, [r5, #16]
 c005f9e:	b920      	cbnz	r0, c005faa <_svfiprintf_r+0x2e>
 c005fa0:	230c      	movs	r3, #12
 c005fa2:	603b      	str	r3, [r7, #0]
 c005fa4:	f04f 30ff 	mov.w	r0, #4294967295
 c005fa8:	e0d1      	b.n	c00614e <_svfiprintf_r+0x1d2>
 c005faa:	2340      	movs	r3, #64	; 0x40
 c005fac:	616b      	str	r3, [r5, #20]
 c005fae:	2300      	movs	r3, #0
 c005fb0:	f8cd 800c 	str.w	r8, [sp, #12]
 c005fb4:	f04f 0901 	mov.w	r9, #1
 c005fb8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; c006168 <_svfiprintf_r+0x1ec>
 c005fbc:	9309      	str	r3, [sp, #36]	; 0x24
 c005fbe:	2320      	movs	r3, #32
 c005fc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 c005fc4:	2330      	movs	r3, #48	; 0x30
 c005fc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 c005fca:	4623      	mov	r3, r4
 c005fcc:	469a      	mov	sl, r3
 c005fce:	f813 2b01 	ldrb.w	r2, [r3], #1
 c005fd2:	b10a      	cbz	r2, c005fd8 <_svfiprintf_r+0x5c>
 c005fd4:	2a25      	cmp	r2, #37	; 0x25
 c005fd6:	d1f9      	bne.n	c005fcc <_svfiprintf_r+0x50>
 c005fd8:	ebba 0b04 	subs.w	fp, sl, r4
 c005fdc:	d00b      	beq.n	c005ff6 <_svfiprintf_r+0x7a>
 c005fde:	465b      	mov	r3, fp
 c005fe0:	4622      	mov	r2, r4
 c005fe2:	4629      	mov	r1, r5
 c005fe4:	4638      	mov	r0, r7
 c005fe6:	f7ff ff6d 	bl	c005ec4 <__ssputs_r>
 c005fea:	3001      	adds	r0, #1
 c005fec:	f000 80aa 	beq.w	c006144 <_svfiprintf_r+0x1c8>
 c005ff0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 c005ff2:	445a      	add	r2, fp
 c005ff4:	9209      	str	r2, [sp, #36]	; 0x24
 c005ff6:	f89a 3000 	ldrb.w	r3, [sl]
 c005ffa:	2b00      	cmp	r3, #0
 c005ffc:	f000 80a2 	beq.w	c006144 <_svfiprintf_r+0x1c8>
 c006000:	2300      	movs	r3, #0
 c006002:	f04f 32ff 	mov.w	r2, #4294967295
 c006006:	f10a 0a01 	add.w	sl, sl, #1
 c00600a:	9304      	str	r3, [sp, #16]
 c00600c:	9307      	str	r3, [sp, #28]
 c00600e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 c006012:	931a      	str	r3, [sp, #104]	; 0x68
 c006014:	e9cd 2305 	strd	r2, r3, [sp, #20]
 c006018:	4654      	mov	r4, sl
 c00601a:	2205      	movs	r2, #5
 c00601c:	4852      	ldr	r0, [pc, #328]	; (c006168 <_svfiprintf_r+0x1ec>)
 c00601e:	f814 1b01 	ldrb.w	r1, [r4], #1
 c006022:	f000 fc35 	bl	c006890 <memchr>
 c006026:	9a04      	ldr	r2, [sp, #16]
 c006028:	b9d8      	cbnz	r0, c006062 <_svfiprintf_r+0xe6>
 c00602a:	06d0      	lsls	r0, r2, #27
 c00602c:	bf44      	itt	mi
 c00602e:	2320      	movmi	r3, #32
 c006030:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 c006034:	0711      	lsls	r1, r2, #28
 c006036:	bf44      	itt	mi
 c006038:	232b      	movmi	r3, #43	; 0x2b
 c00603a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 c00603e:	f89a 3000 	ldrb.w	r3, [sl]
 c006042:	2b2a      	cmp	r3, #42	; 0x2a
 c006044:	d015      	beq.n	c006072 <_svfiprintf_r+0xf6>
 c006046:	9a07      	ldr	r2, [sp, #28]
 c006048:	4654      	mov	r4, sl
 c00604a:	2000      	movs	r0, #0
 c00604c:	f04f 0c0a 	mov.w	ip, #10
 c006050:	4621      	mov	r1, r4
 c006052:	f811 3b01 	ldrb.w	r3, [r1], #1
 c006056:	3b30      	subs	r3, #48	; 0x30
 c006058:	2b09      	cmp	r3, #9
 c00605a:	d94e      	bls.n	c0060fa <_svfiprintf_r+0x17e>
 c00605c:	b1b0      	cbz	r0, c00608c <_svfiprintf_r+0x110>
 c00605e:	9207      	str	r2, [sp, #28]
 c006060:	e014      	b.n	c00608c <_svfiprintf_r+0x110>
 c006062:	eba0 0308 	sub.w	r3, r0, r8
 c006066:	46a2      	mov	sl, r4
 c006068:	fa09 f303 	lsl.w	r3, r9, r3
 c00606c:	4313      	orrs	r3, r2
 c00606e:	9304      	str	r3, [sp, #16]
 c006070:	e7d2      	b.n	c006018 <_svfiprintf_r+0x9c>
 c006072:	9b03      	ldr	r3, [sp, #12]
 c006074:	1d19      	adds	r1, r3, #4
 c006076:	681b      	ldr	r3, [r3, #0]
 c006078:	2b00      	cmp	r3, #0
 c00607a:	9103      	str	r1, [sp, #12]
 c00607c:	bfbb      	ittet	lt
 c00607e:	425b      	neglt	r3, r3
 c006080:	f042 0202 	orrlt.w	r2, r2, #2
 c006084:	9307      	strge	r3, [sp, #28]
 c006086:	9307      	strlt	r3, [sp, #28]
 c006088:	bfb8      	it	lt
 c00608a:	9204      	strlt	r2, [sp, #16]
 c00608c:	7823      	ldrb	r3, [r4, #0]
 c00608e:	2b2e      	cmp	r3, #46	; 0x2e
 c006090:	d10c      	bne.n	c0060ac <_svfiprintf_r+0x130>
 c006092:	7863      	ldrb	r3, [r4, #1]
 c006094:	2b2a      	cmp	r3, #42	; 0x2a
 c006096:	d135      	bne.n	c006104 <_svfiprintf_r+0x188>
 c006098:	9b03      	ldr	r3, [sp, #12]
 c00609a:	3402      	adds	r4, #2
 c00609c:	1d1a      	adds	r2, r3, #4
 c00609e:	681b      	ldr	r3, [r3, #0]
 c0060a0:	2b00      	cmp	r3, #0
 c0060a2:	9203      	str	r2, [sp, #12]
 c0060a4:	bfb8      	it	lt
 c0060a6:	f04f 33ff 	movlt.w	r3, #4294967295
 c0060aa:	9305      	str	r3, [sp, #20]
 c0060ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; c006178 <_svfiprintf_r+0x1fc>
 c0060b0:	2203      	movs	r2, #3
 c0060b2:	7821      	ldrb	r1, [r4, #0]
 c0060b4:	4650      	mov	r0, sl
 c0060b6:	f000 fbeb 	bl	c006890 <memchr>
 c0060ba:	b140      	cbz	r0, c0060ce <_svfiprintf_r+0x152>
 c0060bc:	2340      	movs	r3, #64	; 0x40
 c0060be:	eba0 000a 	sub.w	r0, r0, sl
 c0060c2:	3401      	adds	r4, #1
 c0060c4:	fa03 f000 	lsl.w	r0, r3, r0
 c0060c8:	9b04      	ldr	r3, [sp, #16]
 c0060ca:	4303      	orrs	r3, r0
 c0060cc:	9304      	str	r3, [sp, #16]
 c0060ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 c0060d2:	2206      	movs	r2, #6
 c0060d4:	4825      	ldr	r0, [pc, #148]	; (c00616c <_svfiprintf_r+0x1f0>)
 c0060d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 c0060da:	f000 fbd9 	bl	c006890 <memchr>
 c0060de:	2800      	cmp	r0, #0
 c0060e0:	d038      	beq.n	c006154 <_svfiprintf_r+0x1d8>
 c0060e2:	4b23      	ldr	r3, [pc, #140]	; (c006170 <_svfiprintf_r+0x1f4>)
 c0060e4:	bb1b      	cbnz	r3, c00612e <_svfiprintf_r+0x1b2>
 c0060e6:	9b03      	ldr	r3, [sp, #12]
 c0060e8:	3307      	adds	r3, #7
 c0060ea:	f023 0307 	bic.w	r3, r3, #7
 c0060ee:	3308      	adds	r3, #8
 c0060f0:	9303      	str	r3, [sp, #12]
 c0060f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c0060f4:	4433      	add	r3, r6
 c0060f6:	9309      	str	r3, [sp, #36]	; 0x24
 c0060f8:	e767      	b.n	c005fca <_svfiprintf_r+0x4e>
 c0060fa:	fb0c 3202 	mla	r2, ip, r2, r3
 c0060fe:	460c      	mov	r4, r1
 c006100:	2001      	movs	r0, #1
 c006102:	e7a5      	b.n	c006050 <_svfiprintf_r+0xd4>
 c006104:	2300      	movs	r3, #0
 c006106:	3401      	adds	r4, #1
 c006108:	f04f 0c0a 	mov.w	ip, #10
 c00610c:	4619      	mov	r1, r3
 c00610e:	9305      	str	r3, [sp, #20]
 c006110:	4620      	mov	r0, r4
 c006112:	f810 2b01 	ldrb.w	r2, [r0], #1
 c006116:	3a30      	subs	r2, #48	; 0x30
 c006118:	2a09      	cmp	r2, #9
 c00611a:	d903      	bls.n	c006124 <_svfiprintf_r+0x1a8>
 c00611c:	2b00      	cmp	r3, #0
 c00611e:	d0c5      	beq.n	c0060ac <_svfiprintf_r+0x130>
 c006120:	9105      	str	r1, [sp, #20]
 c006122:	e7c3      	b.n	c0060ac <_svfiprintf_r+0x130>
 c006124:	fb0c 2101 	mla	r1, ip, r1, r2
 c006128:	4604      	mov	r4, r0
 c00612a:	2301      	movs	r3, #1
 c00612c:	e7f0      	b.n	c006110 <_svfiprintf_r+0x194>
 c00612e:	ab03      	add	r3, sp, #12
 c006130:	462a      	mov	r2, r5
 c006132:	a904      	add	r1, sp, #16
 c006134:	4638      	mov	r0, r7
 c006136:	9300      	str	r3, [sp, #0]
 c006138:	4b0e      	ldr	r3, [pc, #56]	; (c006174 <_svfiprintf_r+0x1f8>)
 c00613a:	e000      	b.n	c00613e <_svfiprintf_r+0x1c2>
 c00613c:	bf00      	nop
 c00613e:	1c42      	adds	r2, r0, #1
 c006140:	4606      	mov	r6, r0
 c006142:	d1d6      	bne.n	c0060f2 <_svfiprintf_r+0x176>
 c006144:	89ab      	ldrh	r3, [r5, #12]
 c006146:	065b      	lsls	r3, r3, #25
 c006148:	f53f af2c 	bmi.w	c005fa4 <_svfiprintf_r+0x28>
 c00614c:	9809      	ldr	r0, [sp, #36]	; 0x24
 c00614e:	b01d      	add	sp, #116	; 0x74
 c006150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c006154:	ab03      	add	r3, sp, #12
 c006156:	462a      	mov	r2, r5
 c006158:	a904      	add	r1, sp, #16
 c00615a:	4638      	mov	r0, r7
 c00615c:	9300      	str	r3, [sp, #0]
 c00615e:	4b05      	ldr	r3, [pc, #20]	; (c006174 <_svfiprintf_r+0x1f8>)
 c006160:	f000 f9d6 	bl	c006510 <_printf_i>
 c006164:	e7eb      	b.n	c00613e <_svfiprintf_r+0x1c2>
 c006166:	bf00      	nop
 c006168:	0c006b0c 	.word	0x0c006b0c
 c00616c:	0c006b16 	.word	0x0c006b16
 c006170:	00000000 	.word	0x00000000
 c006174:	0c005ec5 	.word	0x0c005ec5
 c006178:	0c006b12 	.word	0x0c006b12

0c00617c <__sfputc_r>:
 c00617c:	6893      	ldr	r3, [r2, #8]
 c00617e:	3b01      	subs	r3, #1
 c006180:	2b00      	cmp	r3, #0
 c006182:	6093      	str	r3, [r2, #8]
 c006184:	b410      	push	{r4}
 c006186:	da08      	bge.n	c00619a <__sfputc_r+0x1e>
 c006188:	6994      	ldr	r4, [r2, #24]
 c00618a:	42a3      	cmp	r3, r4
 c00618c:	db01      	blt.n	c006192 <__sfputc_r+0x16>
 c00618e:	290a      	cmp	r1, #10
 c006190:	d103      	bne.n	c00619a <__sfputc_r+0x1e>
 c006192:	f85d 4b04 	ldr.w	r4, [sp], #4
 c006196:	f7ff bbad 	b.w	c0058f4 <__swbuf_r>
 c00619a:	6813      	ldr	r3, [r2, #0]
 c00619c:	1c58      	adds	r0, r3, #1
 c00619e:	6010      	str	r0, [r2, #0]
 c0061a0:	4608      	mov	r0, r1
 c0061a2:	7019      	strb	r1, [r3, #0]
 c0061a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 c0061a8:	4770      	bx	lr

0c0061aa <__sfputs_r>:
 c0061aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c0061ac:	4606      	mov	r6, r0
 c0061ae:	460f      	mov	r7, r1
 c0061b0:	4614      	mov	r4, r2
 c0061b2:	18d5      	adds	r5, r2, r3
 c0061b4:	42ac      	cmp	r4, r5
 c0061b6:	d101      	bne.n	c0061bc <__sfputs_r+0x12>
 c0061b8:	2000      	movs	r0, #0
 c0061ba:	e007      	b.n	c0061cc <__sfputs_r+0x22>
 c0061bc:	463a      	mov	r2, r7
 c0061be:	f814 1b01 	ldrb.w	r1, [r4], #1
 c0061c2:	4630      	mov	r0, r6
 c0061c4:	f7ff ffda 	bl	c00617c <__sfputc_r>
 c0061c8:	1c43      	adds	r3, r0, #1
 c0061ca:	d1f3      	bne.n	c0061b4 <__sfputs_r+0xa>
 c0061cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0c0061d0 <_vfiprintf_r>:
 c0061d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0061d4:	460d      	mov	r5, r1
 c0061d6:	b09d      	sub	sp, #116	; 0x74
 c0061d8:	4614      	mov	r4, r2
 c0061da:	4698      	mov	r8, r3
 c0061dc:	4606      	mov	r6, r0
 c0061de:	b118      	cbz	r0, c0061e8 <_vfiprintf_r+0x18>
 c0061e0:	6983      	ldr	r3, [r0, #24]
 c0061e2:	b90b      	cbnz	r3, c0061e8 <_vfiprintf_r+0x18>
 c0061e4:	f7ff fd5e 	bl	c005ca4 <__sinit>
 c0061e8:	4b89      	ldr	r3, [pc, #548]	; (c006410 <_vfiprintf_r+0x240>)
 c0061ea:	429d      	cmp	r5, r3
 c0061ec:	d11b      	bne.n	c006226 <_vfiprintf_r+0x56>
 c0061ee:	6875      	ldr	r5, [r6, #4]
 c0061f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c0061f2:	07d9      	lsls	r1, r3, #31
 c0061f4:	d405      	bmi.n	c006202 <_vfiprintf_r+0x32>
 c0061f6:	89ab      	ldrh	r3, [r5, #12]
 c0061f8:	059a      	lsls	r2, r3, #22
 c0061fa:	d402      	bmi.n	c006202 <_vfiprintf_r+0x32>
 c0061fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 c0061fe:	f7ff fdef 	bl	c005de0 <__retarget_lock_acquire_recursive>
 c006202:	89ab      	ldrh	r3, [r5, #12]
 c006204:	071b      	lsls	r3, r3, #28
 c006206:	d501      	bpl.n	c00620c <_vfiprintf_r+0x3c>
 c006208:	692b      	ldr	r3, [r5, #16]
 c00620a:	b9eb      	cbnz	r3, c006248 <_vfiprintf_r+0x78>
 c00620c:	4629      	mov	r1, r5
 c00620e:	4630      	mov	r0, r6
 c006210:	f7ff fbc2 	bl	c005998 <__swsetup_r>
 c006214:	b1c0      	cbz	r0, c006248 <_vfiprintf_r+0x78>
 c006216:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c006218:	07dc      	lsls	r4, r3, #31
 c00621a:	d50e      	bpl.n	c00623a <_vfiprintf_r+0x6a>
 c00621c:	f04f 30ff 	mov.w	r0, #4294967295
 c006220:	b01d      	add	sp, #116	; 0x74
 c006222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c006226:	4b7b      	ldr	r3, [pc, #492]	; (c006414 <_vfiprintf_r+0x244>)
 c006228:	429d      	cmp	r5, r3
 c00622a:	d101      	bne.n	c006230 <_vfiprintf_r+0x60>
 c00622c:	68b5      	ldr	r5, [r6, #8]
 c00622e:	e7df      	b.n	c0061f0 <_vfiprintf_r+0x20>
 c006230:	4b79      	ldr	r3, [pc, #484]	; (c006418 <_vfiprintf_r+0x248>)
 c006232:	429d      	cmp	r5, r3
 c006234:	bf08      	it	eq
 c006236:	68f5      	ldreq	r5, [r6, #12]
 c006238:	e7da      	b.n	c0061f0 <_vfiprintf_r+0x20>
 c00623a:	89ab      	ldrh	r3, [r5, #12]
 c00623c:	0598      	lsls	r0, r3, #22
 c00623e:	d4ed      	bmi.n	c00621c <_vfiprintf_r+0x4c>
 c006240:	6da8      	ldr	r0, [r5, #88]	; 0x58
 c006242:	f7ff fdce 	bl	c005de2 <__retarget_lock_release_recursive>
 c006246:	e7e9      	b.n	c00621c <_vfiprintf_r+0x4c>
 c006248:	2300      	movs	r3, #0
 c00624a:	f8cd 800c 	str.w	r8, [sp, #12]
 c00624e:	f04f 0901 	mov.w	r9, #1
 c006252:	f8df 81c8 	ldr.w	r8, [pc, #456]	; c00641c <_vfiprintf_r+0x24c>
 c006256:	9309      	str	r3, [sp, #36]	; 0x24
 c006258:	2320      	movs	r3, #32
 c00625a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 c00625e:	2330      	movs	r3, #48	; 0x30
 c006260:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 c006264:	4623      	mov	r3, r4
 c006266:	469a      	mov	sl, r3
 c006268:	f813 2b01 	ldrb.w	r2, [r3], #1
 c00626c:	b10a      	cbz	r2, c006272 <_vfiprintf_r+0xa2>
 c00626e:	2a25      	cmp	r2, #37	; 0x25
 c006270:	d1f9      	bne.n	c006266 <_vfiprintf_r+0x96>
 c006272:	ebba 0b04 	subs.w	fp, sl, r4
 c006276:	d00b      	beq.n	c006290 <_vfiprintf_r+0xc0>
 c006278:	465b      	mov	r3, fp
 c00627a:	4622      	mov	r2, r4
 c00627c:	4629      	mov	r1, r5
 c00627e:	4630      	mov	r0, r6
 c006280:	f7ff ff93 	bl	c0061aa <__sfputs_r>
 c006284:	3001      	adds	r0, #1
 c006286:	f000 80aa 	beq.w	c0063de <_vfiprintf_r+0x20e>
 c00628a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 c00628c:	445a      	add	r2, fp
 c00628e:	9209      	str	r2, [sp, #36]	; 0x24
 c006290:	f89a 3000 	ldrb.w	r3, [sl]
 c006294:	2b00      	cmp	r3, #0
 c006296:	f000 80a2 	beq.w	c0063de <_vfiprintf_r+0x20e>
 c00629a:	2300      	movs	r3, #0
 c00629c:	f04f 32ff 	mov.w	r2, #4294967295
 c0062a0:	f10a 0a01 	add.w	sl, sl, #1
 c0062a4:	9304      	str	r3, [sp, #16]
 c0062a6:	9307      	str	r3, [sp, #28]
 c0062a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 c0062ac:	931a      	str	r3, [sp, #104]	; 0x68
 c0062ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 c0062b2:	4654      	mov	r4, sl
 c0062b4:	2205      	movs	r2, #5
 c0062b6:	4859      	ldr	r0, [pc, #356]	; (c00641c <_vfiprintf_r+0x24c>)
 c0062b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 c0062bc:	f000 fae8 	bl	c006890 <memchr>
 c0062c0:	9a04      	ldr	r2, [sp, #16]
 c0062c2:	b9d8      	cbnz	r0, c0062fc <_vfiprintf_r+0x12c>
 c0062c4:	06d1      	lsls	r1, r2, #27
 c0062c6:	bf44      	itt	mi
 c0062c8:	2320      	movmi	r3, #32
 c0062ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 c0062ce:	0713      	lsls	r3, r2, #28
 c0062d0:	bf44      	itt	mi
 c0062d2:	232b      	movmi	r3, #43	; 0x2b
 c0062d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 c0062d8:	f89a 3000 	ldrb.w	r3, [sl]
 c0062dc:	2b2a      	cmp	r3, #42	; 0x2a
 c0062de:	d015      	beq.n	c00630c <_vfiprintf_r+0x13c>
 c0062e0:	9a07      	ldr	r2, [sp, #28]
 c0062e2:	4654      	mov	r4, sl
 c0062e4:	2000      	movs	r0, #0
 c0062e6:	f04f 0c0a 	mov.w	ip, #10
 c0062ea:	4621      	mov	r1, r4
 c0062ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 c0062f0:	3b30      	subs	r3, #48	; 0x30
 c0062f2:	2b09      	cmp	r3, #9
 c0062f4:	d94e      	bls.n	c006394 <_vfiprintf_r+0x1c4>
 c0062f6:	b1b0      	cbz	r0, c006326 <_vfiprintf_r+0x156>
 c0062f8:	9207      	str	r2, [sp, #28]
 c0062fa:	e014      	b.n	c006326 <_vfiprintf_r+0x156>
 c0062fc:	eba0 0308 	sub.w	r3, r0, r8
 c006300:	46a2      	mov	sl, r4
 c006302:	fa09 f303 	lsl.w	r3, r9, r3
 c006306:	4313      	orrs	r3, r2
 c006308:	9304      	str	r3, [sp, #16]
 c00630a:	e7d2      	b.n	c0062b2 <_vfiprintf_r+0xe2>
 c00630c:	9b03      	ldr	r3, [sp, #12]
 c00630e:	1d19      	adds	r1, r3, #4
 c006310:	681b      	ldr	r3, [r3, #0]
 c006312:	2b00      	cmp	r3, #0
 c006314:	9103      	str	r1, [sp, #12]
 c006316:	bfbb      	ittet	lt
 c006318:	425b      	neglt	r3, r3
 c00631a:	f042 0202 	orrlt.w	r2, r2, #2
 c00631e:	9307      	strge	r3, [sp, #28]
 c006320:	9307      	strlt	r3, [sp, #28]
 c006322:	bfb8      	it	lt
 c006324:	9204      	strlt	r2, [sp, #16]
 c006326:	7823      	ldrb	r3, [r4, #0]
 c006328:	2b2e      	cmp	r3, #46	; 0x2e
 c00632a:	d10c      	bne.n	c006346 <_vfiprintf_r+0x176>
 c00632c:	7863      	ldrb	r3, [r4, #1]
 c00632e:	2b2a      	cmp	r3, #42	; 0x2a
 c006330:	d135      	bne.n	c00639e <_vfiprintf_r+0x1ce>
 c006332:	9b03      	ldr	r3, [sp, #12]
 c006334:	3402      	adds	r4, #2
 c006336:	1d1a      	adds	r2, r3, #4
 c006338:	681b      	ldr	r3, [r3, #0]
 c00633a:	2b00      	cmp	r3, #0
 c00633c:	9203      	str	r2, [sp, #12]
 c00633e:	bfb8      	it	lt
 c006340:	f04f 33ff 	movlt.w	r3, #4294967295
 c006344:	9305      	str	r3, [sp, #20]
 c006346:	f8df a0e4 	ldr.w	sl, [pc, #228]	; c00642c <_vfiprintf_r+0x25c>
 c00634a:	2203      	movs	r2, #3
 c00634c:	7821      	ldrb	r1, [r4, #0]
 c00634e:	4650      	mov	r0, sl
 c006350:	f000 fa9e 	bl	c006890 <memchr>
 c006354:	b140      	cbz	r0, c006368 <_vfiprintf_r+0x198>
 c006356:	2340      	movs	r3, #64	; 0x40
 c006358:	eba0 000a 	sub.w	r0, r0, sl
 c00635c:	3401      	adds	r4, #1
 c00635e:	fa03 f000 	lsl.w	r0, r3, r0
 c006362:	9b04      	ldr	r3, [sp, #16]
 c006364:	4303      	orrs	r3, r0
 c006366:	9304      	str	r3, [sp, #16]
 c006368:	f814 1b01 	ldrb.w	r1, [r4], #1
 c00636c:	2206      	movs	r2, #6
 c00636e:	482c      	ldr	r0, [pc, #176]	; (c006420 <_vfiprintf_r+0x250>)
 c006370:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 c006374:	f000 fa8c 	bl	c006890 <memchr>
 c006378:	2800      	cmp	r0, #0
 c00637a:	d03f      	beq.n	c0063fc <_vfiprintf_r+0x22c>
 c00637c:	4b29      	ldr	r3, [pc, #164]	; (c006424 <_vfiprintf_r+0x254>)
 c00637e:	bb1b      	cbnz	r3, c0063c8 <_vfiprintf_r+0x1f8>
 c006380:	9b03      	ldr	r3, [sp, #12]
 c006382:	3307      	adds	r3, #7
 c006384:	f023 0307 	bic.w	r3, r3, #7
 c006388:	3308      	adds	r3, #8
 c00638a:	9303      	str	r3, [sp, #12]
 c00638c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c00638e:	443b      	add	r3, r7
 c006390:	9309      	str	r3, [sp, #36]	; 0x24
 c006392:	e767      	b.n	c006264 <_vfiprintf_r+0x94>
 c006394:	fb0c 3202 	mla	r2, ip, r2, r3
 c006398:	460c      	mov	r4, r1
 c00639a:	2001      	movs	r0, #1
 c00639c:	e7a5      	b.n	c0062ea <_vfiprintf_r+0x11a>
 c00639e:	2300      	movs	r3, #0
 c0063a0:	3401      	adds	r4, #1
 c0063a2:	f04f 0c0a 	mov.w	ip, #10
 c0063a6:	4619      	mov	r1, r3
 c0063a8:	9305      	str	r3, [sp, #20]
 c0063aa:	4620      	mov	r0, r4
 c0063ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 c0063b0:	3a30      	subs	r2, #48	; 0x30
 c0063b2:	2a09      	cmp	r2, #9
 c0063b4:	d903      	bls.n	c0063be <_vfiprintf_r+0x1ee>
 c0063b6:	2b00      	cmp	r3, #0
 c0063b8:	d0c5      	beq.n	c006346 <_vfiprintf_r+0x176>
 c0063ba:	9105      	str	r1, [sp, #20]
 c0063bc:	e7c3      	b.n	c006346 <_vfiprintf_r+0x176>
 c0063be:	fb0c 2101 	mla	r1, ip, r1, r2
 c0063c2:	4604      	mov	r4, r0
 c0063c4:	2301      	movs	r3, #1
 c0063c6:	e7f0      	b.n	c0063aa <_vfiprintf_r+0x1da>
 c0063c8:	ab03      	add	r3, sp, #12
 c0063ca:	462a      	mov	r2, r5
 c0063cc:	a904      	add	r1, sp, #16
 c0063ce:	4630      	mov	r0, r6
 c0063d0:	9300      	str	r3, [sp, #0]
 c0063d2:	4b15      	ldr	r3, [pc, #84]	; (c006428 <_vfiprintf_r+0x258>)
 c0063d4:	e000      	b.n	c0063d8 <_vfiprintf_r+0x208>
 c0063d6:	bf00      	nop
 c0063d8:	4607      	mov	r7, r0
 c0063da:	1c78      	adds	r0, r7, #1
 c0063dc:	d1d6      	bne.n	c00638c <_vfiprintf_r+0x1bc>
 c0063de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c0063e0:	07d9      	lsls	r1, r3, #31
 c0063e2:	d405      	bmi.n	c0063f0 <_vfiprintf_r+0x220>
 c0063e4:	89ab      	ldrh	r3, [r5, #12]
 c0063e6:	059a      	lsls	r2, r3, #22
 c0063e8:	d402      	bmi.n	c0063f0 <_vfiprintf_r+0x220>
 c0063ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 c0063ec:	f7ff fcf9 	bl	c005de2 <__retarget_lock_release_recursive>
 c0063f0:	89ab      	ldrh	r3, [r5, #12]
 c0063f2:	065b      	lsls	r3, r3, #25
 c0063f4:	f53f af12 	bmi.w	c00621c <_vfiprintf_r+0x4c>
 c0063f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 c0063fa:	e711      	b.n	c006220 <_vfiprintf_r+0x50>
 c0063fc:	ab03      	add	r3, sp, #12
 c0063fe:	462a      	mov	r2, r5
 c006400:	a904      	add	r1, sp, #16
 c006402:	4630      	mov	r0, r6
 c006404:	9300      	str	r3, [sp, #0]
 c006406:	4b08      	ldr	r3, [pc, #32]	; (c006428 <_vfiprintf_r+0x258>)
 c006408:	f000 f882 	bl	c006510 <_printf_i>
 c00640c:	e7e4      	b.n	c0063d8 <_vfiprintf_r+0x208>
 c00640e:	bf00      	nop
 c006410:	0c006acc 	.word	0x0c006acc
 c006414:	0c006aec 	.word	0x0c006aec
 c006418:	0c006aac 	.word	0x0c006aac
 c00641c:	0c006b0c 	.word	0x0c006b0c
 c006420:	0c006b16 	.word	0x0c006b16
 c006424:	00000000 	.word	0x00000000
 c006428:	0c0061ab 	.word	0x0c0061ab
 c00642c:	0c006b12 	.word	0x0c006b12

0c006430 <_printf_common>:
 c006430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c006434:	4616      	mov	r6, r2
 c006436:	4699      	mov	r9, r3
 c006438:	688a      	ldr	r2, [r1, #8]
 c00643a:	4607      	mov	r7, r0
 c00643c:	690b      	ldr	r3, [r1, #16]
 c00643e:	460c      	mov	r4, r1
 c006440:	f8dd 8020 	ldr.w	r8, [sp, #32]
 c006444:	4293      	cmp	r3, r2
 c006446:	bfb8      	it	lt
 c006448:	4613      	movlt	r3, r2
 c00644a:	6033      	str	r3, [r6, #0]
 c00644c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 c006450:	b10a      	cbz	r2, c006456 <_printf_common+0x26>
 c006452:	3301      	adds	r3, #1
 c006454:	6033      	str	r3, [r6, #0]
 c006456:	6823      	ldr	r3, [r4, #0]
 c006458:	0699      	lsls	r1, r3, #26
 c00645a:	bf42      	ittt	mi
 c00645c:	6833      	ldrmi	r3, [r6, #0]
 c00645e:	3302      	addmi	r3, #2
 c006460:	6033      	strmi	r3, [r6, #0]
 c006462:	6825      	ldr	r5, [r4, #0]
 c006464:	f015 0506 	ands.w	r5, r5, #6
 c006468:	d106      	bne.n	c006478 <_printf_common+0x48>
 c00646a:	f104 0a19 	add.w	sl, r4, #25
 c00646e:	68e3      	ldr	r3, [r4, #12]
 c006470:	6832      	ldr	r2, [r6, #0]
 c006472:	1a9b      	subs	r3, r3, r2
 c006474:	42ab      	cmp	r3, r5
 c006476:	dc29      	bgt.n	c0064cc <_printf_common+0x9c>
 c006478:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 c00647c:	1e13      	subs	r3, r2, #0
 c00647e:	6822      	ldr	r2, [r4, #0]
 c006480:	bf18      	it	ne
 c006482:	2301      	movne	r3, #1
 c006484:	0692      	lsls	r2, r2, #26
 c006486:	d42e      	bmi.n	c0064e6 <_printf_common+0xb6>
 c006488:	f104 0243 	add.w	r2, r4, #67	; 0x43
 c00648c:	4649      	mov	r1, r9
 c00648e:	4638      	mov	r0, r7
 c006490:	47c0      	blx	r8
 c006492:	3001      	adds	r0, #1
 c006494:	d021      	beq.n	c0064da <_printf_common+0xaa>
 c006496:	6823      	ldr	r3, [r4, #0]
 c006498:	341a      	adds	r4, #26
 c00649a:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 c00649e:	f003 0306 	and.w	r3, r3, #6
 c0064a2:	6832      	ldr	r2, [r6, #0]
 c0064a4:	2600      	movs	r6, #0
 c0064a6:	2b04      	cmp	r3, #4
 c0064a8:	f854 3c12 	ldr.w	r3, [r4, #-18]
 c0064ac:	bf08      	it	eq
 c0064ae:	1aad      	subeq	r5, r5, r2
 c0064b0:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 c0064b4:	bf14      	ite	ne
 c0064b6:	2500      	movne	r5, #0
 c0064b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 c0064bc:	4293      	cmp	r3, r2
 c0064be:	bfc4      	itt	gt
 c0064c0:	1a9b      	subgt	r3, r3, r2
 c0064c2:	18ed      	addgt	r5, r5, r3
 c0064c4:	42b5      	cmp	r5, r6
 c0064c6:	d11a      	bne.n	c0064fe <_printf_common+0xce>
 c0064c8:	2000      	movs	r0, #0
 c0064ca:	e008      	b.n	c0064de <_printf_common+0xae>
 c0064cc:	2301      	movs	r3, #1
 c0064ce:	4652      	mov	r2, sl
 c0064d0:	4649      	mov	r1, r9
 c0064d2:	4638      	mov	r0, r7
 c0064d4:	47c0      	blx	r8
 c0064d6:	3001      	adds	r0, #1
 c0064d8:	d103      	bne.n	c0064e2 <_printf_common+0xb2>
 c0064da:	f04f 30ff 	mov.w	r0, #4294967295
 c0064de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c0064e2:	3501      	adds	r5, #1
 c0064e4:	e7c3      	b.n	c00646e <_printf_common+0x3e>
 c0064e6:	18e1      	adds	r1, r4, r3
 c0064e8:	1c5a      	adds	r2, r3, #1
 c0064ea:	2030      	movs	r0, #48	; 0x30
 c0064ec:	3302      	adds	r3, #2
 c0064ee:	4422      	add	r2, r4
 c0064f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 c0064f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 c0064f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 c0064fc:	e7c4      	b.n	c006488 <_printf_common+0x58>
 c0064fe:	2301      	movs	r3, #1
 c006500:	4622      	mov	r2, r4
 c006502:	4649      	mov	r1, r9
 c006504:	4638      	mov	r0, r7
 c006506:	47c0      	blx	r8
 c006508:	3001      	adds	r0, #1
 c00650a:	d0e6      	beq.n	c0064da <_printf_common+0xaa>
 c00650c:	3601      	adds	r6, #1
 c00650e:	e7d9      	b.n	c0064c4 <_printf_common+0x94>

0c006510 <_printf_i>:
 c006510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 c006514:	460c      	mov	r4, r1
 c006516:	4691      	mov	r9, r2
 c006518:	4680      	mov	r8, r0
 c00651a:	469a      	mov	sl, r3
 c00651c:	7e27      	ldrb	r7, [r4, #24]
 c00651e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 c006522:	990c      	ldr	r1, [sp, #48]	; 0x30
 c006524:	2f78      	cmp	r7, #120	; 0x78
 c006526:	d807      	bhi.n	c006538 <_printf_i+0x28>
 c006528:	2f62      	cmp	r7, #98	; 0x62
 c00652a:	d80a      	bhi.n	c006542 <_printf_i+0x32>
 c00652c:	2f00      	cmp	r7, #0
 c00652e:	f000 80d8 	beq.w	c0066e2 <_printf_i+0x1d2>
 c006532:	2f58      	cmp	r7, #88	; 0x58
 c006534:	f000 80a3 	beq.w	c00667e <_printf_i+0x16e>
 c006538:	f104 0642 	add.w	r6, r4, #66	; 0x42
 c00653c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 c006540:	e03a      	b.n	c0065b8 <_printf_i+0xa8>
 c006542:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 c006546:	2b15      	cmp	r3, #21
 c006548:	d8f6      	bhi.n	c006538 <_printf_i+0x28>
 c00654a:	a001      	add	r0, pc, #4	; (adr r0, c006550 <_printf_i+0x40>)
 c00654c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 c006550:	0c0065a9 	.word	0x0c0065a9
 c006554:	0c0065bd 	.word	0x0c0065bd
 c006558:	0c006539 	.word	0x0c006539
 c00655c:	0c006539 	.word	0x0c006539
 c006560:	0c006539 	.word	0x0c006539
 c006564:	0c006539 	.word	0x0c006539
 c006568:	0c0065bd 	.word	0x0c0065bd
 c00656c:	0c006539 	.word	0x0c006539
 c006570:	0c006539 	.word	0x0c006539
 c006574:	0c006539 	.word	0x0c006539
 c006578:	0c006539 	.word	0x0c006539
 c00657c:	0c0066c9 	.word	0x0c0066c9
 c006580:	0c0065ed 	.word	0x0c0065ed
 c006584:	0c0066ab 	.word	0x0c0066ab
 c006588:	0c006539 	.word	0x0c006539
 c00658c:	0c006539 	.word	0x0c006539
 c006590:	0c0066eb 	.word	0x0c0066eb
 c006594:	0c006539 	.word	0x0c006539
 c006598:	0c0065ed 	.word	0x0c0065ed
 c00659c:	0c006539 	.word	0x0c006539
 c0065a0:	0c006539 	.word	0x0c006539
 c0065a4:	0c0066b3 	.word	0x0c0066b3
 c0065a8:	680b      	ldr	r3, [r1, #0]
 c0065aa:	f104 0642 	add.w	r6, r4, #66	; 0x42
 c0065ae:	1d1a      	adds	r2, r3, #4
 c0065b0:	681b      	ldr	r3, [r3, #0]
 c0065b2:	600a      	str	r2, [r1, #0]
 c0065b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 c0065b8:	2301      	movs	r3, #1
 c0065ba:	e0a3      	b.n	c006704 <_printf_i+0x1f4>
 c0065bc:	6825      	ldr	r5, [r4, #0]
 c0065be:	6808      	ldr	r0, [r1, #0]
 c0065c0:	062e      	lsls	r6, r5, #24
 c0065c2:	f100 0304 	add.w	r3, r0, #4
 c0065c6:	d50a      	bpl.n	c0065de <_printf_i+0xce>
 c0065c8:	6805      	ldr	r5, [r0, #0]
 c0065ca:	600b      	str	r3, [r1, #0]
 c0065cc:	2d00      	cmp	r5, #0
 c0065ce:	da03      	bge.n	c0065d8 <_printf_i+0xc8>
 c0065d0:	232d      	movs	r3, #45	; 0x2d
 c0065d2:	426d      	negs	r5, r5
 c0065d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 c0065d8:	485e      	ldr	r0, [pc, #376]	; (c006754 <_printf_i+0x244>)
 c0065da:	230a      	movs	r3, #10
 c0065dc:	e019      	b.n	c006612 <_printf_i+0x102>
 c0065de:	f015 0f40 	tst.w	r5, #64	; 0x40
 c0065e2:	6805      	ldr	r5, [r0, #0]
 c0065e4:	600b      	str	r3, [r1, #0]
 c0065e6:	bf18      	it	ne
 c0065e8:	b22d      	sxthne	r5, r5
 c0065ea:	e7ef      	b.n	c0065cc <_printf_i+0xbc>
 c0065ec:	680b      	ldr	r3, [r1, #0]
 c0065ee:	6825      	ldr	r5, [r4, #0]
 c0065f0:	1d18      	adds	r0, r3, #4
 c0065f2:	6008      	str	r0, [r1, #0]
 c0065f4:	0628      	lsls	r0, r5, #24
 c0065f6:	d501      	bpl.n	c0065fc <_printf_i+0xec>
 c0065f8:	681d      	ldr	r5, [r3, #0]
 c0065fa:	e002      	b.n	c006602 <_printf_i+0xf2>
 c0065fc:	0669      	lsls	r1, r5, #25
 c0065fe:	d5fb      	bpl.n	c0065f8 <_printf_i+0xe8>
 c006600:	881d      	ldrh	r5, [r3, #0]
 c006602:	2f6f      	cmp	r7, #111	; 0x6f
 c006604:	4853      	ldr	r0, [pc, #332]	; (c006754 <_printf_i+0x244>)
 c006606:	bf0c      	ite	eq
 c006608:	2308      	moveq	r3, #8
 c00660a:	230a      	movne	r3, #10
 c00660c:	2100      	movs	r1, #0
 c00660e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 c006612:	6866      	ldr	r6, [r4, #4]
 c006614:	2e00      	cmp	r6, #0
 c006616:	60a6      	str	r6, [r4, #8]
 c006618:	bfa2      	ittt	ge
 c00661a:	6821      	ldrge	r1, [r4, #0]
 c00661c:	f021 0104 	bicge.w	r1, r1, #4
 c006620:	6021      	strge	r1, [r4, #0]
 c006622:	b90d      	cbnz	r5, c006628 <_printf_i+0x118>
 c006624:	2e00      	cmp	r6, #0
 c006626:	d04d      	beq.n	c0066c4 <_printf_i+0x1b4>
 c006628:	4616      	mov	r6, r2
 c00662a:	fbb5 f1f3 	udiv	r1, r5, r3
 c00662e:	fb03 5711 	mls	r7, r3, r1, r5
 c006632:	5dc7      	ldrb	r7, [r0, r7]
 c006634:	f806 7d01 	strb.w	r7, [r6, #-1]!
 c006638:	462f      	mov	r7, r5
 c00663a:	460d      	mov	r5, r1
 c00663c:	42bb      	cmp	r3, r7
 c00663e:	d9f4      	bls.n	c00662a <_printf_i+0x11a>
 c006640:	2b08      	cmp	r3, #8
 c006642:	d10b      	bne.n	c00665c <_printf_i+0x14c>
 c006644:	6823      	ldr	r3, [r4, #0]
 c006646:	07df      	lsls	r7, r3, #31
 c006648:	d508      	bpl.n	c00665c <_printf_i+0x14c>
 c00664a:	6923      	ldr	r3, [r4, #16]
 c00664c:	6861      	ldr	r1, [r4, #4]
 c00664e:	4299      	cmp	r1, r3
 c006650:	bfde      	ittt	le
 c006652:	2330      	movle	r3, #48	; 0x30
 c006654:	f806 3c01 	strble.w	r3, [r6, #-1]
 c006658:	f106 36ff 	addle.w	r6, r6, #4294967295
 c00665c:	1b92      	subs	r2, r2, r6
 c00665e:	6122      	str	r2, [r4, #16]
 c006660:	464b      	mov	r3, r9
 c006662:	aa03      	add	r2, sp, #12
 c006664:	4621      	mov	r1, r4
 c006666:	4640      	mov	r0, r8
 c006668:	f8cd a000 	str.w	sl, [sp]
 c00666c:	f7ff fee0 	bl	c006430 <_printf_common>
 c006670:	3001      	adds	r0, #1
 c006672:	d14c      	bne.n	c00670e <_printf_i+0x1fe>
 c006674:	f04f 30ff 	mov.w	r0, #4294967295
 c006678:	b004      	add	sp, #16
 c00667a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c00667e:	4835      	ldr	r0, [pc, #212]	; (c006754 <_printf_i+0x244>)
 c006680:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 c006684:	6823      	ldr	r3, [r4, #0]
 c006686:	680e      	ldr	r6, [r1, #0]
 c006688:	061f      	lsls	r7, r3, #24
 c00668a:	f856 5b04 	ldr.w	r5, [r6], #4
 c00668e:	600e      	str	r6, [r1, #0]
 c006690:	d514      	bpl.n	c0066bc <_printf_i+0x1ac>
 c006692:	07d9      	lsls	r1, r3, #31
 c006694:	bf44      	itt	mi
 c006696:	f043 0320 	orrmi.w	r3, r3, #32
 c00669a:	6023      	strmi	r3, [r4, #0]
 c00669c:	b91d      	cbnz	r5, c0066a6 <_printf_i+0x196>
 c00669e:	6823      	ldr	r3, [r4, #0]
 c0066a0:	f023 0320 	bic.w	r3, r3, #32
 c0066a4:	6023      	str	r3, [r4, #0]
 c0066a6:	2310      	movs	r3, #16
 c0066a8:	e7b0      	b.n	c00660c <_printf_i+0xfc>
 c0066aa:	6823      	ldr	r3, [r4, #0]
 c0066ac:	f043 0320 	orr.w	r3, r3, #32
 c0066b0:	6023      	str	r3, [r4, #0]
 c0066b2:	2378      	movs	r3, #120	; 0x78
 c0066b4:	4828      	ldr	r0, [pc, #160]	; (c006758 <_printf_i+0x248>)
 c0066b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 c0066ba:	e7e3      	b.n	c006684 <_printf_i+0x174>
 c0066bc:	065e      	lsls	r6, r3, #25
 c0066be:	bf48      	it	mi
 c0066c0:	b2ad      	uxthmi	r5, r5
 c0066c2:	e7e6      	b.n	c006692 <_printf_i+0x182>
 c0066c4:	4616      	mov	r6, r2
 c0066c6:	e7bb      	b.n	c006640 <_printf_i+0x130>
 c0066c8:	680b      	ldr	r3, [r1, #0]
 c0066ca:	6826      	ldr	r6, [r4, #0]
 c0066cc:	1d1d      	adds	r5, r3, #4
 c0066ce:	6960      	ldr	r0, [r4, #20]
 c0066d0:	600d      	str	r5, [r1, #0]
 c0066d2:	0635      	lsls	r5, r6, #24
 c0066d4:	681b      	ldr	r3, [r3, #0]
 c0066d6:	d501      	bpl.n	c0066dc <_printf_i+0x1cc>
 c0066d8:	6018      	str	r0, [r3, #0]
 c0066da:	e002      	b.n	c0066e2 <_printf_i+0x1d2>
 c0066dc:	0671      	lsls	r1, r6, #25
 c0066de:	d5fb      	bpl.n	c0066d8 <_printf_i+0x1c8>
 c0066e0:	8018      	strh	r0, [r3, #0]
 c0066e2:	2300      	movs	r3, #0
 c0066e4:	4616      	mov	r6, r2
 c0066e6:	6123      	str	r3, [r4, #16]
 c0066e8:	e7ba      	b.n	c006660 <_printf_i+0x150>
 c0066ea:	680b      	ldr	r3, [r1, #0]
 c0066ec:	1d1a      	adds	r2, r3, #4
 c0066ee:	600a      	str	r2, [r1, #0]
 c0066f0:	2100      	movs	r1, #0
 c0066f2:	681e      	ldr	r6, [r3, #0]
 c0066f4:	6862      	ldr	r2, [r4, #4]
 c0066f6:	4630      	mov	r0, r6
 c0066f8:	f000 f8ca 	bl	c006890 <memchr>
 c0066fc:	b108      	cbz	r0, c006702 <_printf_i+0x1f2>
 c0066fe:	1b80      	subs	r0, r0, r6
 c006700:	6060      	str	r0, [r4, #4]
 c006702:	6863      	ldr	r3, [r4, #4]
 c006704:	6123      	str	r3, [r4, #16]
 c006706:	2300      	movs	r3, #0
 c006708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 c00670c:	e7a8      	b.n	c006660 <_printf_i+0x150>
 c00670e:	6923      	ldr	r3, [r4, #16]
 c006710:	4632      	mov	r2, r6
 c006712:	4649      	mov	r1, r9
 c006714:	4640      	mov	r0, r8
 c006716:	47d0      	blx	sl
 c006718:	3001      	adds	r0, #1
 c00671a:	d0ab      	beq.n	c006674 <_printf_i+0x164>
 c00671c:	6823      	ldr	r3, [r4, #0]
 c00671e:	079b      	lsls	r3, r3, #30
 c006720:	d413      	bmi.n	c00674a <_printf_i+0x23a>
 c006722:	68e0      	ldr	r0, [r4, #12]
 c006724:	9b03      	ldr	r3, [sp, #12]
 c006726:	4298      	cmp	r0, r3
 c006728:	bfb8      	it	lt
 c00672a:	4618      	movlt	r0, r3
 c00672c:	e7a4      	b.n	c006678 <_printf_i+0x168>
 c00672e:	2301      	movs	r3, #1
 c006730:	4632      	mov	r2, r6
 c006732:	4649      	mov	r1, r9
 c006734:	4640      	mov	r0, r8
 c006736:	47d0      	blx	sl
 c006738:	3001      	adds	r0, #1
 c00673a:	d09b      	beq.n	c006674 <_printf_i+0x164>
 c00673c:	3501      	adds	r5, #1
 c00673e:	68e3      	ldr	r3, [r4, #12]
 c006740:	9903      	ldr	r1, [sp, #12]
 c006742:	1a5b      	subs	r3, r3, r1
 c006744:	42ab      	cmp	r3, r5
 c006746:	dcf2      	bgt.n	c00672e <_printf_i+0x21e>
 c006748:	e7eb      	b.n	c006722 <_printf_i+0x212>
 c00674a:	2500      	movs	r5, #0
 c00674c:	f104 0619 	add.w	r6, r4, #25
 c006750:	e7f5      	b.n	c00673e <_printf_i+0x22e>
 c006752:	bf00      	nop
 c006754:	0c006b1d 	.word	0x0c006b1d
 c006758:	0c006b2e 	.word	0x0c006b2e

0c00675c <__sread>:
 c00675c:	b510      	push	{r4, lr}
 c00675e:	460c      	mov	r4, r1
 c006760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c006764:	f000 f8c8 	bl	c0068f8 <_read_r>
 c006768:	2800      	cmp	r0, #0
 c00676a:	bfab      	itete	ge
 c00676c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 c00676e:	89a3      	ldrhlt	r3, [r4, #12]
 c006770:	181b      	addge	r3, r3, r0
 c006772:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 c006776:	bfac      	ite	ge
 c006778:	6563      	strge	r3, [r4, #84]	; 0x54
 c00677a:	81a3      	strhlt	r3, [r4, #12]
 c00677c:	bd10      	pop	{r4, pc}

0c00677e <__swrite>:
 c00677e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c006782:	461f      	mov	r7, r3
 c006784:	898b      	ldrh	r3, [r1, #12]
 c006786:	4605      	mov	r5, r0
 c006788:	460c      	mov	r4, r1
 c00678a:	05db      	lsls	r3, r3, #23
 c00678c:	4616      	mov	r6, r2
 c00678e:	d505      	bpl.n	c00679c <__swrite+0x1e>
 c006790:	2302      	movs	r3, #2
 c006792:	2200      	movs	r2, #0
 c006794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c006798:	f000 f868 	bl	c00686c <_lseek_r>
 c00679c:	89a3      	ldrh	r3, [r4, #12]
 c00679e:	4632      	mov	r2, r6
 c0067a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 c0067a4:	4628      	mov	r0, r5
 c0067a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 c0067aa:	81a3      	strh	r3, [r4, #12]
 c0067ac:	463b      	mov	r3, r7
 c0067ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 c0067b2:	f000 b817 	b.w	c0067e4 <_write_r>

0c0067b6 <__sseek>:
 c0067b6:	b510      	push	{r4, lr}
 c0067b8:	460c      	mov	r4, r1
 c0067ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c0067be:	f000 f855 	bl	c00686c <_lseek_r>
 c0067c2:	1c43      	adds	r3, r0, #1
 c0067c4:	89a3      	ldrh	r3, [r4, #12]
 c0067c6:	bf15      	itete	ne
 c0067c8:	6560      	strne	r0, [r4, #84]	; 0x54
 c0067ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 c0067ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 c0067d2:	81a3      	strheq	r3, [r4, #12]
 c0067d4:	bf18      	it	ne
 c0067d6:	81a3      	strhne	r3, [r4, #12]
 c0067d8:	bd10      	pop	{r4, pc}

0c0067da <__sclose>:
 c0067da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c0067de:	f000 b813 	b.w	c006808 <_close_r>
	...

0c0067e4 <_write_r>:
 c0067e4:	b538      	push	{r3, r4, r5, lr}
 c0067e6:	4604      	mov	r4, r0
 c0067e8:	4d06      	ldr	r5, [pc, #24]	; (c006804 <_write_r+0x20>)
 c0067ea:	4608      	mov	r0, r1
 c0067ec:	4611      	mov	r1, r2
 c0067ee:	2200      	movs	r2, #0
 c0067f0:	602a      	str	r2, [r5, #0]
 c0067f2:	461a      	mov	r2, r3
 c0067f4:	f7fa fafe 	bl	c000df4 <_write>
 c0067f8:	1c43      	adds	r3, r0, #1
 c0067fa:	d102      	bne.n	c006802 <_write_r+0x1e>
 c0067fc:	682b      	ldr	r3, [r5, #0]
 c0067fe:	b103      	cbz	r3, c006802 <_write_r+0x1e>
 c006800:	6023      	str	r3, [r4, #0]
 c006802:	bd38      	pop	{r3, r4, r5, pc}
 c006804:	300033a0 	.word	0x300033a0

0c006808 <_close_r>:
 c006808:	b538      	push	{r3, r4, r5, lr}
 c00680a:	2300      	movs	r3, #0
 c00680c:	4d05      	ldr	r5, [pc, #20]	; (c006824 <_close_r+0x1c>)
 c00680e:	4604      	mov	r4, r0
 c006810:	4608      	mov	r0, r1
 c006812:	602b      	str	r3, [r5, #0]
 c006814:	f7fa fafc 	bl	c000e10 <_close>
 c006818:	1c43      	adds	r3, r0, #1
 c00681a:	d102      	bne.n	c006822 <_close_r+0x1a>
 c00681c:	682b      	ldr	r3, [r5, #0]
 c00681e:	b103      	cbz	r3, c006822 <_close_r+0x1a>
 c006820:	6023      	str	r3, [r4, #0]
 c006822:	bd38      	pop	{r3, r4, r5, pc}
 c006824:	300033a0 	.word	0x300033a0

0c006828 <_fstat_r>:
 c006828:	b538      	push	{r3, r4, r5, lr}
 c00682a:	2300      	movs	r3, #0
 c00682c:	4d06      	ldr	r5, [pc, #24]	; (c006848 <_fstat_r+0x20>)
 c00682e:	4604      	mov	r4, r0
 c006830:	4608      	mov	r0, r1
 c006832:	4611      	mov	r1, r2
 c006834:	602b      	str	r3, [r5, #0]
 c006836:	f7fa faef 	bl	c000e18 <_fstat>
 c00683a:	1c43      	adds	r3, r0, #1
 c00683c:	d102      	bne.n	c006844 <_fstat_r+0x1c>
 c00683e:	682b      	ldr	r3, [r5, #0]
 c006840:	b103      	cbz	r3, c006844 <_fstat_r+0x1c>
 c006842:	6023      	str	r3, [r4, #0]
 c006844:	bd38      	pop	{r3, r4, r5, pc}
 c006846:	bf00      	nop
 c006848:	300033a0 	.word	0x300033a0

0c00684c <_isatty_r>:
 c00684c:	b538      	push	{r3, r4, r5, lr}
 c00684e:	2300      	movs	r3, #0
 c006850:	4d05      	ldr	r5, [pc, #20]	; (c006868 <_isatty_r+0x1c>)
 c006852:	4604      	mov	r4, r0
 c006854:	4608      	mov	r0, r1
 c006856:	602b      	str	r3, [r5, #0]
 c006858:	f7fa fae4 	bl	c000e24 <_isatty>
 c00685c:	1c43      	adds	r3, r0, #1
 c00685e:	d102      	bne.n	c006866 <_isatty_r+0x1a>
 c006860:	682b      	ldr	r3, [r5, #0]
 c006862:	b103      	cbz	r3, c006866 <_isatty_r+0x1a>
 c006864:	6023      	str	r3, [r4, #0]
 c006866:	bd38      	pop	{r3, r4, r5, pc}
 c006868:	300033a0 	.word	0x300033a0

0c00686c <_lseek_r>:
 c00686c:	b538      	push	{r3, r4, r5, lr}
 c00686e:	4604      	mov	r4, r0
 c006870:	4d06      	ldr	r5, [pc, #24]	; (c00688c <_lseek_r+0x20>)
 c006872:	4608      	mov	r0, r1
 c006874:	4611      	mov	r1, r2
 c006876:	2200      	movs	r2, #0
 c006878:	602a      	str	r2, [r5, #0]
 c00687a:	461a      	mov	r2, r3
 c00687c:	f7fa fad4 	bl	c000e28 <_lseek>
 c006880:	1c43      	adds	r3, r0, #1
 c006882:	d102      	bne.n	c00688a <_lseek_r+0x1e>
 c006884:	682b      	ldr	r3, [r5, #0]
 c006886:	b103      	cbz	r3, c00688a <_lseek_r+0x1e>
 c006888:	6023      	str	r3, [r4, #0]
 c00688a:	bd38      	pop	{r3, r4, r5, pc}
 c00688c:	300033a0 	.word	0x300033a0

0c006890 <memchr>:
 c006890:	b2c9      	uxtb	r1, r1
 c006892:	4402      	add	r2, r0
 c006894:	b510      	push	{r4, lr}
 c006896:	4290      	cmp	r0, r2
 c006898:	4603      	mov	r3, r0
 c00689a:	d101      	bne.n	c0068a0 <memchr+0x10>
 c00689c:	2300      	movs	r3, #0
 c00689e:	e003      	b.n	c0068a8 <memchr+0x18>
 c0068a0:	781c      	ldrb	r4, [r3, #0]
 c0068a2:	3001      	adds	r0, #1
 c0068a4:	428c      	cmp	r4, r1
 c0068a6:	d1f6      	bne.n	c006896 <memchr+0x6>
 c0068a8:	4618      	mov	r0, r3
 c0068aa:	bd10      	pop	{r4, pc}

0c0068ac <_realloc_r>:
 c0068ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c0068ae:	4607      	mov	r7, r0
 c0068b0:	4614      	mov	r4, r2
 c0068b2:	460e      	mov	r6, r1
 c0068b4:	b921      	cbnz	r1, c0068c0 <_realloc_r+0x14>
 c0068b6:	4611      	mov	r1, r2
 c0068b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 c0068bc:	f7fe bf02 	b.w	c0056c4 <_malloc_r>
 c0068c0:	b922      	cbnz	r2, c0068cc <_realloc_r+0x20>
 c0068c2:	4625      	mov	r5, r4
 c0068c4:	f7fe feae 	bl	c005624 <_free_r>
 c0068c8:	4628      	mov	r0, r5
 c0068ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c0068cc:	f000 f826 	bl	c00691c <_malloc_usable_size_r>
 c0068d0:	42a0      	cmp	r0, r4
 c0068d2:	d20f      	bcs.n	c0068f4 <_realloc_r+0x48>
 c0068d4:	4621      	mov	r1, r4
 c0068d6:	4638      	mov	r0, r7
 c0068d8:	f7fe fef4 	bl	c0056c4 <_malloc_r>
 c0068dc:	4605      	mov	r5, r0
 c0068de:	2800      	cmp	r0, #0
 c0068e0:	d0f2      	beq.n	c0068c8 <_realloc_r+0x1c>
 c0068e2:	4631      	mov	r1, r6
 c0068e4:	4622      	mov	r2, r4
 c0068e6:	f7fe fe6d 	bl	c0055c4 <memcpy>
 c0068ea:	4631      	mov	r1, r6
 c0068ec:	4638      	mov	r0, r7
 c0068ee:	f7fe fe99 	bl	c005624 <_free_r>
 c0068f2:	e7e9      	b.n	c0068c8 <_realloc_r+0x1c>
 c0068f4:	4635      	mov	r5, r6
 c0068f6:	e7e7      	b.n	c0068c8 <_realloc_r+0x1c>

0c0068f8 <_read_r>:
 c0068f8:	b538      	push	{r3, r4, r5, lr}
 c0068fa:	4604      	mov	r4, r0
 c0068fc:	4d06      	ldr	r5, [pc, #24]	; (c006918 <_read_r+0x20>)
 c0068fe:	4608      	mov	r0, r1
 c006900:	4611      	mov	r1, r2
 c006902:	2200      	movs	r2, #0
 c006904:	602a      	str	r2, [r5, #0]
 c006906:	461a      	mov	r2, r3
 c006908:	f7fa fa66 	bl	c000dd8 <_read>
 c00690c:	1c43      	adds	r3, r0, #1
 c00690e:	d102      	bne.n	c006916 <_read_r+0x1e>
 c006910:	682b      	ldr	r3, [r5, #0]
 c006912:	b103      	cbz	r3, c006916 <_read_r+0x1e>
 c006914:	6023      	str	r3, [r4, #0]
 c006916:	bd38      	pop	{r3, r4, r5, pc}
 c006918:	300033a0 	.word	0x300033a0

0c00691c <_malloc_usable_size_r>:
 c00691c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 c006920:	1f18      	subs	r0, r3, #4
 c006922:	2b00      	cmp	r3, #0
 c006924:	bfbc      	itt	lt
 c006926:	580b      	ldrlt	r3, [r1, r0]
 c006928:	18c0      	addlt	r0, r0, r3
 c00692a:	4770      	bx	lr

0c00692c <_init>:
 c00692c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c00692e:	bf00      	nop
 c006930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c006932:	bc08      	pop	{r3}
 c006934:	469e      	mov	lr, r3
 c006936:	4770      	bx	lr

0c006938 <_fini>:
 c006938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c00693a:	bf00      	nop
 c00693c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c00693e:	bc08      	pop	{r3}
 c006940:	469e      	mov	lr, r3
 c006942:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c00c000 <SECURE_Get_Running_Bank>:
 c00c000:	e97f e97f 	sg
 c00c004:	f7f4 be08 	b.w	c000c18 <__acle_se_SECURE_Get_Running_Bank>

0c00c008 <SECURE_SystemCoreClockUpdate>:
 c00c008:	e97f e97f 	sg
 c00c00c:	f7f5 b80e 	b.w	c00102c <__acle_se_SECURE_SystemCoreClockUpdate>

0c00c010 <SECURE_FLASH_ERASE>:
 c00c010:	e97f e97f 	sg
 c00c014:	f7f4 bdc8 	b.w	c000ba8 <__acle_se_SECURE_FLASH_ERASE>

0c00c018 <SECURE_FLASH_READ>:
 c00c018:	e97f e97f 	sg
 c00c01c:	f7f4 bd8c 	b.w	c000b38 <__acle_se_SECURE_FLASH_READ>

0c00c020 <SECURE_RegisterCallback>:
 c00c020:	e97f e97f 	sg
 c00c024:	f7f4 bcc6 	b.w	c0009b4 <__acle_se_SECURE_RegisterCallback>

0c00c028 <SECURE_printf>:
 c00c028:	e97f e97f 	sg
 c00c02c:	f7f4 bd04 	b.w	c000a38 <__acle_se_SECURE_printf>

0c00c030 <SECURE_FLASH_WRITE>:
 c00c030:	e97f e97f 	sg
 c00c034:	f7f4 bd3e 	b.w	c000ab4 <__acle_se_SECURE_FLASH_WRITE>
	...
